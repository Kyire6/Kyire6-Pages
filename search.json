[{"title":"Hexo + Gitee 搭建个人博客","url":"/2021/02/06/8fe2b6a8.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>寒假封城，只能呆在家里鼓捣电脑，有一天看到了 b 站大佬<a href=\"https://space.bilibili.com/384068749\">CodeSheep</a>的<a href=\"https://www.bilibili.com/video/av44544186?t=1173\">手把手教你从 0 开始搭建自己的个人博客 |无坑版视频教程| hexo</a>,看了之后着手搭建了属于自己的博客。<br>视频里博客是搭建在 Github 上的，但其终究是国外的网站，访问速度得不到保障。推荐使用 Gitee，Gitee 类似于国内的 Github，访问速度没问题。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"环境要求\"><a href=\"#环境要求\" class=\"headerlink\" title=\"环境要求\"></a>环境要求</h2><ul>\n<li>Windows 系统电脑(Mac 用户可以参考上面的视频)</li>\n<li><a href=\"https://git-scm.com/\">Git</a></li>\n<li><a href=\"https://nodejs.org/en/\">Node.js</a></li>\n</ul>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><p>因为我们要用到<a href=\"https://git-scm.com/\">Git</a>中的<a href=\"https://git-scm.com/download/win\">Git Bash</a>，类似于 Windows 的 cmd 命令行，不过要好用许多(我开始是用 cmd 按视频的步骤来的，运行命令容易报错)。</p>\n<ul>\n<li><a href=\"https://git-scm.com/download/win\">下载地址</a></li>\n<li>安装步骤：双击下载好的 exe 文件，一路点击 next 就好了</li>\n<li>安装完成之后打开 Git Bash，输入<code>git version</code>查看版本：(我这里安装的版本是 2.23.0)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git version</span><br><span class=\"line\">git version 2.23.0.windows.1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>能看到版本号就说明你安装成功了，之后的命令都是在这里运行的</li>\n</ul>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p><a href=\"https://hexo.io/\">Hexo</a>是基于<a href=\"https://nodejs.org/en/\">Node.js</a>制作的静态博客，我们要用到 Node.js 里面的<a href=\"https://www.npmjs.cn/\">npm</a>(node package manager)包管理器来安装插件，如果你想玩 Hexo 博客，那么这个 Node.js 是必装的。</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/download/\">下载地址</a>(选择自己电脑版本相对应的包来下载)</li>\n<li>安装步骤：双击下载好的 msi 文件，也是一路下一步就好了</li>\n<li>安装完成后打开 Git Bash，输入<code>node -v</code>和<code>npm -v</code>查看 node 和 npm 的版本：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\">v12.14.1</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm -v</span><br><span class=\"line\">6.13.4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>到这里前置步骤就已经算完成了，接下来我们就来安装 Hexo 博客</li>\n</ul>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>安装<a href=\"https://hexo.io/\">Hexo</a>，我们需要借助<a href=\"https://www.npmjs.cn/\">npm</a>这个工具来安装，但是我们国内下载镜像源的速度很慢，所以我们可以先利用 npm 工具来安装一个<a href=\"https://npm.taobao.org/\">cnpm</a>工具(国内的淘宝 npm 镜像源)，这样一来速度会快很多。</p>\n<ul>\n<li>安装 cnpm：(安装完之后照样可以用<code>cnpm -v</code>来查看版本号验证是否成功)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用 cnpm 安装 Hexo</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接着用<code>Hexo -v</code>来验证是否安装成功</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo -v</span><br><span class=\"line\">hexo-cli: 3.1.0</span><br><span class=\"line\">os: Windows_NT 10.0.17134 win32 x64</span><br><span class=\"line\">node: 12.14.1</span><br></pre></td></tr></table></figure>\n\n<p>如果出现以上信息，那么恭喜安装成功了</p>\n<ul>\n<li>到这里 Hexo 博客已经算是安装完成了，步骤还是非常简单的，重点是耐心~</li>\n</ul>\n<h2 id=\"初始化-Hexo\"><a href=\"#初始化-Hexo\" class=\"headerlink\" title=\"初始化 Hexo\"></a>初始化 Hexo</h2><p>在你的电脑上建一个文件夹，命名没有要求，我这里创建的是 blog，文件夹路径也无所谓，最好装在出了系统盘的固态硬盘中，路径要自己找得到。</p>\n<ul>\n<li>在创建的文件夹目录下右键选择<code>Git Bash Here</code>，也就是在此处打开 Git Bash 终端</li>\n<li>输入 Hexo 初始化命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n\n<p>这个命令执行需要一定的时间，请耐心等待</p>\n<ul>\n<li>初始化完成之后可以查看指定文件夹目录下有：<ul>\n<li>node_modules: 依赖包</li>\n<li>public：存放生成的页面</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章</li>\n<li>themes：主题</li>\n<li>_config.yml: 博客的配置文件</li>\n</ul>\n</li>\n<li>打开 Hexo 服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n\n<p>这样你就可以再浏览器输入:localhost:4000 来访问你的博客啦，使用 Ctrl+C 可以关闭服务。<br>大概是这样：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/blog.jpg\"></p>\n<ul>\n<li>用 Hexo 写一篇博客</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo n <span class=\"string\">&quot;我的第一篇博客&quot;</span></span><br><span class=\"line\">INFO  Created: E:\\bolg\\<span class=\"built_in\">source</span>\\_posts\\我的第一篇博客.md</span><br></pre></td></tr></table></figure>\n\n<p>到 E:\\bolg\\source_posts 目录下打开我的第一篇博客.md 进行编辑(推荐用 vscode 进行编辑，vscode 有预览 md 文件的插件)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 我的第一篇博客</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2020-02-03 21:16:52</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 第一章</span></span><br><span class=\"line\"></span><br><span class=\"line\">内容</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 第二章</span></span><br><span class=\"line\"></span><br><span class=\"line\">内容</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 参考资料</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">https://ouwen.gitee.io</span><br></pre></td></tr></table></figure>\n\n<p>注意：这里的 md 文件是基于<a href=\"https://baike.baidu.com/item/markdown/3245829?fr=aladdin\">markdown</a>语法进行编辑的，不了解的朋友可以百度学习一下，很简单的，几分钟就能看明白，相信你不是问题。</p>\n<ul>\n<li>编辑完保存文件，重启 Hexo 服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean          <span class=\"comment\"># 清除所有记录</span></span><br><span class=\"line\">$ hexo generate       <span class=\"comment\"># 生成静态网页 简写：hexo g</span></span><br><span class=\"line\">$ hexo server         <span class=\"comment\"># 启动服务 简写：hexo s</span></span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器输入 localhost:4000：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/blog2.jpg\"></p>\n<h2 id=\"将博客部署到-Gitee-上\"><a href=\"#将博客部署到-Gitee-上\" class=\"headerlink\" title=\"将博客部署到 Gitee 上\"></a>将博客部署到 Gitee 上</h2><p>上面访问的 localhost:4000 是本地服务器端口，我们的博客不可能是放在本地服务器的，我们需要把博客部署到远端去。我这里推荐的一个免费的部署的方式就是部署到<a href=\"https://gitee.com/\">Gitee</a>上，部署好之后就可以通过访问<a href=\"https://gitee.com/\">Gitee</a>上的那个地址来访问我们的博客。</p>\n<ul>\n<li>进到<a href=\"https://gitee.com/\">Gitee</a>官网，注册账号并登陆</li>\n<li>点击个人主页右上角新建个人仓库</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/blog3.jpg\"></p>\n<ul>\n<li>创建完成后进入仓库</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/blog4.jpg\"></p>\n<ul>\n<li>打开 Hexo 的配置文件<code>_config.yml</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: https://gitee.com/ouwen666/test.git <span class=\"comment\">#仓库的url</span></span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里先安装一个 Hexo 插件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-deployer-git --save  <span class=\"comment\">#通过cpnm安装git插件</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&#x27;******@qq.com&#x27;</span>  <span class=\"comment\">#设置gitee邮箱（gitee的注册邮箱）</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&#x27;****&#x27;</span>            <span class=\"comment\">#设置用户名（gitee的y注册昵称）</span></span><br><span class=\"line\">hexo d  <span class=\"comment\">#上传到gitee的远端仓库</span></span><br><span class=\"line\"><span class=\"comment\"># 在上传时，需要再次输入gitee的用户名username和密码password</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上传成功仓库会多出一些文件</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/blog5.jpg\"></p>\n<ul>\n<li>接着打开 Gitee Page 服务</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/blog6.jpg\"></p>\n<p>然后点击启动或更新即可。<strong>注意每次更改网页重新上传到仓库都要到这里来更新服务。</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/blog7.jpg\"></p>\n<ul>\n<li>访问 Gitee Page 服务的网站地址</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/blog8.jpg\"></p>\n<p>从图中地址栏中的网址可以看出我们已经成功将本地的博客部署到了远端仓库，这样你的小伙伴也能在自己的电脑访问你的 Gitee Page 服务网站看到你的博客啦。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Hexo 博客搭建总的来说还是比较简单的，搭配 Gitee 码云使用起来还是比较方便的，访问速度也还行。总结下面几点：</p>\n<ol>\n<li>Hexo 博客个性化定制的话，大家可以多参考 Hexo 官方中文文档</li>\n<li>更新完代码可以访问 localhost:4000 预览效果再上传，上传后千万记得更新 Gitee Page 服务，否则刷新页面会出现没更新的情况</li>\n<li>Hexo 还支持很多主题，有兴趣的小伙伴可以自行搜索更改，参照官方文档进行操作也是不难的哦</li>\n<li>小伙伴们注意将自己写的代码保存好哦！我是将代码备份到 Github 上保存的，将博客部署到 Gitee 码云进行访问</li>\n</ol>\n","categories":["Hexo"],"tags":["笔记","教程"]},{"title":"常用编程环境与开发工具安装手册","url":"/2022/04/02/2f74bb89.html","content":"<blockquote>\n<p><strong>安装目录示分区大小而定，不可盲目复制命令进行安装！</strong></p>\n</blockquote>\n<h2 id=\"安装-Docker-容器服务\"><a href=\"#安装-Docker-容器服务\" class=\"headerlink\" title=\"安装 Docker 容器服务\"></a>安装 Docker 容器服务</h2><h3 id=\"CentOS-安装\"><a href=\"#CentOS-安装\" class=\"headerlink\" title=\"CentOS 安装\"></a>CentOS 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 卸载旧的版本</span></span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 安装yum-utils包（提供 yum-config-manager 程序）</span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 设置镜像的仓库</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo <span class=\"comment\"># 默认是国外的，十分慢！</span></span><br><span class=\"line\"><span class=\"comment\"># 建议使用阿里云的镜像地址</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新yum软件包索引</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 安装docker相关的 docker-ce docker-compose （默认为最新版）</span></span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 安装指定版本</span></span><br><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin -y</span><br><span class=\"line\">sudo yum install docker-ce-20.10.13 docker-ce-cli-20.10.13 containerd.io docker-compose-plugin -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6. 启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7. 使用docker version查看是否安装成功</span></span><br><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ubuntu-安装\"><a href=\"#Ubuntu-安装\" class=\"headerlink\" title=\"Ubuntu 安装\"></a>Ubuntu 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 卸载旧的版本</span></span><br><span class=\"line\">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 更新软件包索引并安装软件包，以允许通过 HTTPS 使用存储库：aptapt</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    gnupg-agent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 添加 Docker 的官方 GPG 密钥：</span></span><br><span class=\"line\">sudo curl -fsSL http://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br><span class=\"line\"><span class=\"comment\"># 4. 设置存储库</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=<span class=\"subst\">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] http://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$(. /etc/os-release &amp;&amp; echo <span class=\"string\">&quot;<span class=\"variable\">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \\</span><br><span class=\"line\">  sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 如果您使用 Ubuntu 衍生发行版，例如 Linux Mint，则可能需要使用 UBUNTU_CODENAME 而不是 VERSION_CODENAME</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 更新包索引，并安装最新版本的 Docker 引擎、容器和 Docker Compose</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定版本</span></span><br><span class=\"line\">sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先列出存储库中的可用版本</span></span><br><span class=\"line\">apt-cache madison docker-ce</span><br><span class=\"line\"> docker-ce | 5:20.10.18~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span><br><span class=\"line\"> docker-ce | 5:20.10.17~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span><br><span class=\"line\"> docker-ce | 5:20.10.16~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 取出其中的版本号，例如：5:20.10.17~3-0~ubuntu-focal</span></span><br><span class=\"line\">sudo apt-get install docker-ce=5:20.10.17~3-0~ubuntu-focal docker-ce-cli=5:20.10.17~3-0~ubuntu-focal containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6. 启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7. 使用docker version查看是否安装成功</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DockerHub-国内网络无法访问，如何下载镜像文件，离线导入\"><a href=\"#DockerHub-国内网络无法访问，如何下载镜像文件，离线导入\" class=\"headerlink\" title=\"DockerHub 国内网络无法访问，如何下载镜像文件，离线导入\"></a>DockerHub 国内网络无法访问，如何下载镜像文件，离线导入</h3><p><a href=\"https://wkdaily.cpolar.cn/archives/gc\">使用 Github Action 构建 docker 镜像</a></p>\n<h2 id=\"安装-MiniKube-单机-K8S-服务\"><a href=\"#安装-MiniKube-单机-K8S-服务\" class=\"headerlink\" title=\"安装 MiniKube 单机 K8S 服务\"></a>安装 MiniKube 单机 K8S 服务</h2><blockquote>\n<p><strong>安装环境：CentOS 8</strong></p>\n</blockquote>\n<h3 id=\"安装-kubectl\"><a href=\"#安装-kubectl\" class=\"headerlink\" title=\"安装 kubectl\"></a>安装 kubectl</h3><blockquote>\n<p><a href=\"https://kubernetes.io/zh-cn/docs/tasks/tools/\">安装工具 | Kubernetes</a></p>\n</blockquote>\n<h3 id=\"安装-MiniKube\"><a href=\"#安装-MiniKube\" class=\"headerlink\" title=\"安装 MiniKube\"></a>安装 MiniKube</h3><blockquote>\n<p><a href=\"https://minikube.kubernetes.ac.cn/docs/start/?arch=/windows/x86-64/stable/.exe+download\">minikube start | minikube 中文</a></p>\n</blockquote>\n<p>常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 minikube</span></span><br><span class=\"line\">minikube start --driver=<span class=\"string\">&#x27;docker&#x27;</span> --cache-images=<span class=\"literal\">true</span>  --kubernetes-version=<span class=\"string\">&#x27;v1.31.0&#x27;</span> --registry-mirror=<span class=\"string\">&#x27;https://hub.geekery.cn&#x27;</span> --base-image=<span class=\"string\">&#x27;registry.cn-hangzhou.aliyuncs.com/google_containers/kicbase:v0.0.45&#x27;</span> --listen-address=0.0.0.0 --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启 dashboard</span></span><br><span class=\"line\">minikube dashboard</span><br><span class=\"line\"><span class=\"comment\"># 启动端口转发，提供 dashboard 供外部访问</span></span><br><span class=\"line\">kubectl port-forward -n kubernetes-dashboard svc/kubernetes-dashboard 8080:80 --address 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启 nginx ingress controller 插件</span></span><br><span class=\"line\"><span class=\"comment\"># 1.手动加载国内镜像</span></span><br><span class=\"line\">minikube image load registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:v1.12.0-beta.0</span><br><span class=\"line\">minikube image load registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.4</span><br><span class=\"line\"><span class=\"comment\"># 2.开启插件</span></span><br><span class=\"line\">minikube addons <span class=\"built_in\">enable</span> ingress --images=<span class=\"string\">&quot;KubeWebhookCertgenCreate=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.4,KubeWebhookCertgenPatch=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.4,IngressController=google_containers/nginx-ingress-controller:v1.12.0-beta.0&quot;</span> --registries=<span class=\"string\">&quot;IngressController=registry.cn-hangzhou.aliyuncs.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布应用</span></span><br><span class=\"line\"><span class=\"comment\"># 前提</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 nfs 共享文件夹，供 pod 内的容器访问</span></span><br><span class=\"line\"><span class=\"comment\"># 后端</span></span><br><span class=\"line\"><span class=\"comment\"># 1.导入打包好的后端应用 docker 镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 Minikube 的 Docker 环境</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(minikube -p minikube docker-env)</span><br><span class=\"line\"><span class=\"comment\"># 导入镜像到 Minikube</span></span><br><span class=\"line\">docker load -i vxtcip-boot-v1.0.0.tar</span><br><span class=\"line\"><span class=\"comment\"># 2.编写 deployment 配置文件（yaml）</span></span><br><span class=\"line\"><span class=\"comment\"># 略...</span></span><br><span class=\"line\"><span class=\"comment\"># 3.部署 deployment</span></span><br><span class=\"line\">kubectl apply -f *-deployment.yaml</span><br><span class=\"line\"><span class=\"comment\"># 重启 deployment</span></span><br><span class=\"line\">kubectl rollout restart -n <span class=\"variable\">$&#123;namespace-name&#125;</span> deployment <span class=\"variable\">$&#123;deployment-name&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 删除 deployment</span></span><br><span class=\"line\">kubectl delete -n <span class=\"variable\">$&#123;namespace-name&#125;</span> deployment <span class=\"variable\">$&#123;deployment-name&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Kubernetes-集群和-KubeSphere\"><a href=\"#安装-Kubernetes-集群和-KubeSphere\" class=\"headerlink\" title=\"安装 Kubernetes 集群和 KubeSphere\"></a>安装 Kubernetes 集群和 KubeSphere</h2><blockquote>\n<p>官方文档: <a href=\"https://www.kubesphere.io/zh/docs/v4.1/03-installation-and-upgrade/02-install-kubesphere/02-install-kubernetes-and-kubesphere/\">在 Linux 上安装 Kubernetes 和 KubeSphere</a></p>\n<p>参考博客：<a href=\"https://www.kubesphere.io/zh/blogs/kubesphere-4.1.2-deployment-and-extension-installation/#23-%E9%83%A8%E7%BD%B2-k8s-%E9%9B%86%E7%BE%A4\">33 张高清大图，带你玩转 KubeSphere 4.1.2 部署与扩展组件安装</a></p>\n</blockquote>\n<h3 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h3><h4 id=\"安装-Ansible-自动化运维工具（用于批量执行脚本-命令）\"><a href=\"#安装-Ansible-自动化运维工具（用于批量执行脚本-命令）\" class=\"headerlink\" title=\"安装 Ansible 自动化运维工具（用于批量执行脚本/命令）\"></a>安装 Ansible 自动化运维工具（用于批量执行脚本/命令）</h4><p>参考本文《Ansible 安装与配置》</p>\n<h4 id=\"操作系统基础配置\"><a href=\"#操作系统基础配置\" class=\"headerlink\" title=\"操作系统基础配置\"></a>操作系统基础配置</h4><p>可使用 Ansible 批量在集群机器上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置主机名(每台机器都需要配置，按照不同的 hostname 执行)</span></span><br><span class=\"line\">hostnamectl set-hostname k8s-control-1</span><br><span class=\"line\"><span class=\"comment\"># 配置DNS(已配置则忽略)</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;echo &quot;nameserver 114.114.114.114&quot; &gt; /etc/resolv.conf&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置服务器时区</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;timedatectl set-timezone Asia/Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置时间同步</span></span><br><span class=\"line\"><span class=\"comment\"># - 安装 chrony 作为时间同步软件</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;yum install chrony -y&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># - 编辑配置文件 /etc/chrony.conf，修改 ntp 服务器配置</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&quot;sed -i &#x27;s/^pool pool.*/pool cn.pool.ntp.org iburst/g&#x27; /etc/chrony.conf&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># - 重启并设置 chrony 服务开机自启动</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;systemctl enable chronyd --now&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># - 验证 chrony 同步状态</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;chronyc sourcestats -v&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 关闭系统防火墙</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;systemctl stop firewalld &amp;&amp; systemctl disable firewalld&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 禁用 SELinux</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&quot;sed -i &#x27;s/^SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 安装必须依赖</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;yum install curl socat conntrack ebtables ipset ipvsadm -y&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"磁盘配置\"><a href=\"#磁盘配置\" class=\"headerlink\" title=\"磁盘配置\"></a>磁盘配置</h4><p>每台服务器新增一块数据盘 <strong>/dev/sdb</strong>，用于 <strong>Containerd</strong> 和 <strong>Kubernetes Pod</strong> 的持久化存储</p>\n<p>为了满足用户在上线后数据盘容量不足时，可以实现动态扩容的需求。本文采用了 LVM 的方式配置磁盘</p>\n<h5 id=\"使用-LVM-配置硬盘，并挂载到数据目录\"><a href=\"#使用-LVM-配置硬盘，并挂载到数据目录\" class=\"headerlink\" title=\"使用 LVM 配置硬盘，并挂载到数据目录\"></a>使用 LVM 配置硬盘，并挂载到数据目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 PV</span></span><br><span class=\"line\">pvcreate /dev/sdb</span><br><span class=\"line\"><span class=\"comment\"># 创建 VG</span></span><br><span class=\"line\">vgcreate data /dev/sdb</span><br><span class=\"line\"><span class=\"comment\"># 创建 LV（使用所有空间，VG 名字为 data，LV 名字为 lvdata）</span></span><br><span class=\"line\">lvcreate -l 100%VG data -n lvdata、</span><br><span class=\"line\"><span class=\"comment\"># 格式化磁盘</span></span><br><span class=\"line\">mkfs.xfs /dev/mapper/data-lvdata</span><br><span class=\"line\"><span class=\"comment\"># 手工挂载</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /u01</span><br><span class=\"line\">mount /dev/mapper/data-lvdata /u01/</span><br><span class=\"line\"><span class=\"comment\"># 开机自动挂载</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -1 /etc/mtab &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\"># 创建 OpenEBS 本地数据根目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/openebs/local</span><br><span class=\"line\"><span class=\"comment\"># 创建 Containerd 数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/containerd</span><br><span class=\"line\"><span class=\"comment\"># 创建 Containerd 数据目录软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /u01/containerd /var/lib/containerd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-Kubernetes-集群\"><a href=\"#部署-Kubernetes-集群\" class=\"headerlink\" title=\"部署 Kubernetes 集群\"></a>部署 Kubernetes 集群</h3><p>使用 KubeSphere 出品的 KubeKey 工具，可以根据配置文件一键部署 K8S 高可用集群</p>\n<p>选择一台 control 节点作为部署节点，执行下面的操作</p>\n<h4 id=\"下载-KubeKey\"><a href=\"#下载-KubeKey\" class=\"headerlink\" title=\"下载 KubeKey\"></a>下载 KubeKey</h4><ul>\n<li><p>下载最新版的 KubeKey（<strong>v3.1.7</strong>）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /u01/kubekey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /u01/kubekey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择中文区下载(访问 GitHub 受限时使用)</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KKZONE=cn</span><br><span class=\"line\">curl -sfL https://get-kk.kubesphere.io | sh -</span><br></pre></td></tr></table></figure></li>\n<li><p>查看 KubeKey 支持的 Kubernetes 版本列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./kk version --show-supported-k8s</span><br></pre></td></tr></table></figure>\n\n<p>选择稳定且兼容性高的较新版本，本文选择的是 <strong>v1.28.15</strong></p>\n</li>\n</ul>\n<h4 id=\"创建-Kubernetes-集群部署配置\"><a href=\"#创建-Kubernetes-集群部署配置\" class=\"headerlink\" title=\"创建 Kubernetes 集群部署配置\"></a>创建 Kubernetes 集群部署配置</h4><ol>\n<li><p>创建集群配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./kk create config -f ksp-k8s-v12815.yaml --with-kubernetes v1.28.15</span><br></pre></td></tr></table></figure></li>\n<li><p>修改配置文件</p>\n</li>\n</ol>\n<p>本文采用 3 个节点同时作为 control-plane、etcd 和 worker 节点</p>\n<p>请使用编辑器，编辑配置文件 <code>ksp-k8s-v12815.yaml</code>，修改 <strong>kind: Cluster</strong> 小节中 hosts 和 roleGroups 等信息，修改说明如下：</p>\n<ul>\n<li>hosts：指定节点的 IP、ssh 用户、ssh 密码</li>\n<li>roleGroups：指定 3 个 etcd、control-plane 节点，并复用为 worker 节点</li>\n<li>internalLoadbalancer： 启用内置的 HAProxy 负载均衡器</li>\n<li>domain：自定义域名 <strong>lb.opsxlab.cn</strong>，没特殊需求可使用默认值 <strong>lb.kubesphere.local</strong></li>\n<li>clusterName：自定义 <strong>opsxlab.cn</strong>，没特殊需求可使用默认值 <strong>cluster.local</strong></li>\n<li>autoRenewCerts：该参数可以实现证书到期自动续期，默认为 <strong>true</strong></li>\n<li>containerManager：容器运行时使用 <strong>containerd</strong></li>\n<li>storage.openebs.basePath：<strong>默认没有，新增配置</strong>，指定 openebs 默认存储路径为 <strong>/data/openebs/local</strong></li>\n<li>registry.privateRegistry：<strong>可选配置，</strong> 解决 Docker 官方镜像不可用的问题</li>\n<li>registry.namespaceOverride： <strong>可选配置，</strong> 解决 Docker 官方镜像不可用的问题</li>\n</ul>\n<p>修改后的完整示例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubekey.kubesphere.io/v1alpha2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">vansys</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">k8s-control-1</span>, <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.101</span>, <span class=\"attr\">internalAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.101</span>, <span class=\"attr\">user:</span> <span class=\"string\">root</span>, <span class=\"attr\">password:</span> <span class=\"string\">&quot;xxx&quot;</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">k8s-control-2</span>, <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.102</span>, <span class=\"attr\">internalAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.102</span>, <span class=\"attr\">user:</span> <span class=\"string\">root</span>, <span class=\"attr\">password:</span> <span class=\"string\">&quot;xxx&quot;</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">k8s-control-3</span>, <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.103</span>, <span class=\"attr\">internalAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.103</span>, <span class=\"attr\">user:</span> <span class=\"string\">root</span>, <span class=\"attr\">password:</span> <span class=\"string\">&quot;xxx&quot;</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">roleGroups:</span></span><br><span class=\"line\">    <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-3</span></span><br><span class=\"line\">    <span class=\"attr\">control-plane:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-3</span></span><br><span class=\"line\">    <span class=\"attr\">worker:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-3</span></span><br><span class=\"line\">  <span class=\"attr\">controlPlaneEndpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">domain:</span> <span class=\"string\">lb.kubesphere.local</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6443</span></span><br><span class=\"line\">  <span class=\"attr\">kubernetes:</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1.28.15</span></span><br><span class=\"line\">    <span class=\"attr\">clusterName:</span> <span class=\"string\">cluster.local</span></span><br><span class=\"line\">    <span class=\"attr\">autoRenewCerts:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">containerManager:</span> <span class=\"string\">containerd</span></span><br><span class=\"line\">  <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">kubekey</span></span><br><span class=\"line\">  <span class=\"attr\">network:</span></span><br><span class=\"line\">    <span class=\"attr\">plugin:</span> <span class=\"string\">calico</span></span><br><span class=\"line\">    <span class=\"attr\">kubePodsCIDR:</span> <span class=\"number\">10.233</span><span class=\"number\">.64</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\">    <span class=\"attr\">kubeServiceCIDR:</span> <span class=\"number\">10.233</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\">    <span class=\"attr\">enableMultusCNI:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">storage:</span></span><br><span class=\"line\">    <span class=\"attr\">openebs:</span></span><br><span class=\"line\">      <span class=\"attr\">basePath:</span> <span class=\"string\">/u01/openebs/local</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用 KubeSphere 在阿里云的镜像仓库，避免国内拉不下镜像的问题</span></span><br><span class=\"line\">    <span class=\"attr\">privateRegistry:</span> <span class=\"string\">&quot;registry.cn-beijing.aliyuncs.com&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">namespaceOverride:</span> <span class=\"string\">&quot;kubesphereio&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">registryMirrors:</span> []</span><br><span class=\"line\">    <span class=\"attr\">insecureRegistries:</span> []</span><br><span class=\"line\">  <span class=\"attr\">addons:</span> []</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署-Kubernetes-集群-1\"><a href=\"#部署-Kubernetes-集群-1\" class=\"headerlink\" title=\"部署 Kubernetes 集群\"></a>部署 Kubernetes 集群</h4><p>使用上面创建的配置文件，执行下面的命令，创建 K8S 集群</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> KKZONE=cn</span><br><span class=\"line\">./kk create cluster -f ksp-k8s-v12815.yaml</span><br></pre></td></tr></table></figure>\n\n<p>命令执行后，首先 <strong>Kubekey</strong> 会检查部署 K8S 的依赖及其他详细要求。通过检查后，系统将提示您确认安装。输入 <strong>yes</strong> 并按 <strong>ENTER</strong> 继续部署</p>\n<p>部署完成需要大约 10-20 分钟左右，具体需要看网速跟机器配置，若部署成功，会在终端显示如下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">20:10:23 CST Pipeline[CreateClusterPipeline] execute successfully</span><br><span class=\"line\">Installation is complete.</span><br><span class=\"line\"></span><br><span class=\"line\">Please check the result using the <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        kubectl get pod -A</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证-Kubernetes-集群状态\"><a href=\"#验证-Kubernetes-集群状态\" class=\"headerlink\" title=\"验证 Kubernetes 集群状态\"></a>验证 Kubernetes 集群状态</h4><p>在 control-1 控制节点使用 kubectl 命令验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看集群节点信息</span></span><br><span class=\"line\">kubectl get nodes -o wide</span><br><span class=\"line\"><span class=\"comment\"># 查看 Pod 信息</span></span><br><span class=\"line\">kubectl get pods -A -o wide</span><br><span class=\"line\"><span class=\"comment\"># 查看 Image 列表</span></span><br><span class=\"line\">crictl images <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h4><p>安装 Kubernetes 时出现如下日志，且 kubeadm 初始化集群超时</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">detected <span class=\"keyword\">that</span> <span class=\"keyword\">the</span> sandbox image <span class=\"string\">&quot;registry.k8s.io/pause:3.8&quot;</span> <span class=\"keyword\">of</span> <span class=\"keyword\">the</span> container runtime <span class=\"keyword\">is</span> inconsistent <span class=\"keyword\">with</span> <span class=\"keyword\">that</span> used <span class=\"keyword\">by</span> kubeadm. It <span class=\"keyword\">is</span> recommended <span class=\"keyword\">that</span> using <span class=\"string\">&quot;registry.cn-beijing.aliyuncs.com/kubesphereio/pause:3.9&quot;</span> <span class=\"keyword\">as</span> <span class=\"keyword\">the</span> CRI sandbox image</span><br></pre></td></tr></table></figure>\n\n<p>问题原因：containerd 配置的 sandbox image 跟 kubeadm 配置的不一致</p>\n<p>解决办法：将 <code>/etc/containerd/config.toml</code> 配置文件中的 sandbox_image 修改为 KubeKey 创建集群的配置文件中 <code>privateRegistry</code> 仓库的镜像，保持跟 kubeadm 的一致</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class=\"line\">  <span class=\"attr\">sandbox_image</span> = <span class=\"string\">&quot;registry.cn-beijing.aliyuncs.com/kubesphereio/pause:3.9&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis-缓存服务安装部署\"><a href=\"#Redis-缓存服务安装部署\" class=\"headerlink\" title=\"Redis 缓存服务安装部署\"></a>Redis 缓存服务安装部署</h2><p>这里下载的是 <code>redis-5.0.8.tar.gz</code> 安装包，并将其直接放在了 <code>opt</code> ⽬ 录下</p>\n<h3 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h3><p>1、在 <code>/usr/local/</code> 下创建 <code>redis</code> ⽂ 件夹并进 ⼊</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> redis</span><br><span class=\"line\"><span class=\"built_in\">cd</span> redis</span><br></pre></td></tr></table></figure>\n\n<p>2、将 <code>Redis</code> 安装包解压到 <code>/usr/local/redis</code> 中即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar zxvf /opt/redis-5.0.8.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>解压完之后， <code>/usr/local/redis</code> ⽬ 录中会出现 ⼀ 个 <code>redis-5.0.8.tar.gz</code> 的 ⽬ 录</p>\n<h3 id=\"编译并安装\"><a href=\"#编译并安装\" class=\"headerlink\" title=\"编译并安装\"></a>编译并安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> redis-5.0.8/</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将-Redis-安装为系统服务并后台启动\"><a href=\"#将-Redis-安装为系统服务并后台启动\" class=\"headerlink\" title=\"将 Redis 安装为系统服务并后台启动\"></a>将 Redis 安装为系统服务并后台启动</h3><p>进入 <code>utils</code> 目录，并执行如下脚本即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> utils/</span><br><span class=\"line\">./install_server.sh</span><br></pre></td></tr></table></figure>\n\n<p>此处我全部选择默认配置，有需要可以按需选择</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194438.png\" alt=\"image-20220401194430903\"></p>\n<h3 id=\"查看-Redis-服务启动情况\"><a href=\"#查看-Redis-服务启动情况\" class=\"headerlink\" title=\"查看 Redis 服务启动情况\"></a>查看 Redis 服务启动情况</h3><p>直接执行如下命令来查看 Redis 的启动结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status redis_6379.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 扩展</span></span><br><span class=\"line\">启动：systemctl start redis_6379.service</span><br><span class=\"line\">停止：systemctl stop redis_6379.service</span><br><span class=\"line\">重启：systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194604.png\" alt=\"image-20220401194604551\"></p>\n<h3 id=\"启动-Redis-客户端并测试\"><a href=\"#启动-Redis-客户端并测试\" class=\"headerlink\" title=\"启动 Redis 客户端并测试\"></a>启动 Redis 客户端并测试</h3><p>启动自带的 <code>redis-cli</code> 客户端，测试通过：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194833.png\" alt=\"image-20220401194833905\" style=\"zoom:50%;\" />\n\n<p>但是此时只能在本地访问，无法远程连接，因此还需要做部分设置</p>\n<h3 id=\"运行远程连接\"><a href=\"#运行远程连接\" class=\"headerlink\" title=\"运行远程连接\"></a>运行远程连接</h3><p>编辑 <code>redis</code> 配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>bind 127.0.0.1</code> 修改为 <code>0.0.0.0</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401195240.png\" alt=\"image-20220401195240594\"></p>\n<p>保存然后重启 <code>Redis</code> 服务即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置访问密码\"><a href=\"#设置访问密码\" class=\"headerlink\" title=\"设置访问密码\"></a>设置访问密码</h3><p>编辑 <code>redis</code> 配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到如下内容：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#requirepass foobared</span></span><br></pre></td></tr></table></figure>\n\n<p>去掉注释，将 <code>foobared</code> 修改为自己想要的密码，保存即可。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">requirepass</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>保存然后重启 <code>Redis</code> 服务即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>\n\n<p>这样后续的访问需要先输入密码认证通过：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401195615.png\" alt=\"image-20220401195615345\"></p>\n<h2 id=\"WEB-服务器-Nginx-安装部署\"><a href=\"#WEB-服务器-Nginx-安装部署\" class=\"headerlink\" title=\"WEB 服务器 Nginx 安装部署\"></a>WEB 服务器 Nginx 安装部署</h2><p>这 ⾥ 下载的是 <code>nginx-1.17.10.tar.gz</code> 安装包，并将其直接放在了 <code>opt</code> ⽬ 录下</p>\n<h3 id=\"解压安装包-1\"><a href=\"#解压安装包-1\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h3><p>1、在 <code>/usr/local/</code> 下创建 <code>nginx</code> ⽂ 件夹并进 ⼊</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> nginx</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx</span><br></pre></td></tr></table></figure>\n\n<p>2、将 <code>Nginx</code> 安装包解压到 <code>/usr/local/nginx</code> 中即可</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> zxvf /opt/nginx-<span class=\"number\">1</span>.<span class=\"number\">17</span>.<span class=\"number\">10</span>.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>解压完之后， <code>/usr/local/nginx</code> ⽬ 录中会出现 ⼀ 个 <code>nginx-1.17.10</code> 的 ⽬ 录</p>\n<h3 id=\"预先安装额外的依赖\"><a href=\"#预先安装额外的依赖\" class=\"headerlink\" title=\"预先安装额外的依赖\"></a>预先安装额外的依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install pcre-devel openssl openssl-devel gcc gcc-c++ autoconf automake make</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译安装-Nginx\"><a href=\"#编译安装-Nginx\" class=\"headerlink\" title=\"编译安装 Nginx\"></a>编译安装 Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.17.10</span><br><span class=\"line\"><span class=\"comment\"># 使用 --prefix= 可以指定目录安装</span></span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，Nginx 的可执 ⾏⽂ 件位置位于</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-Nginx\"><a href=\"#启动-Nginx\" class=\"headerlink\" title=\"启动 Nginx\"></a>启动 Nginx</h3><p>直接执 ⾏ 如下命令即可：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>如果想停 ⽌ Nginx 服务，可执 ⾏：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s stop</span><br></pre></td></tr></table></figure>\n\n<p>如果修改了配置 ⽂ 件后想重新加载 Nginx，可执 ⾏：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>注意其配置 ⽂ 件位于：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Centos6-9-注册为系统服务，并开机自启\"><a href=\"#Centos6-9-注册为系统服务，并开机自启\" class=\"headerlink\" title=\"Centos6.9 注册为系统服务，并开机自启\"></a>Centos6.9 注册为系统服务，并开机自启</h3><p>首先，在 linux 系统的/etc/init.d/目录下创建 nginx 文件，使用如下命令：</p>\n<p><code>vi /etc/init.d/nginx</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># nginx - this script starts and stops the nginx daemon</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig:   - 85 15</span></span><br><span class=\"line\"><span class=\"comment\"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \\</span></span><br><span class=\"line\"><span class=\"comment\">#               proxy and IMAP/POP3 proxy server</span></span><br><span class=\"line\"><span class=\"comment\"># processname: nginx</span></span><br><span class=\"line\"><span class=\"comment\"># config:      /etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"comment\"># config:      /etc/sysconfig/nginx</span></span><br><span class=\"line\"><span class=\"comment\"># pidfile:     /var/run/nginx.pid</span></span><br><span class=\"line\"><span class=\"comment\"># Source function library.</span></span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"><span class=\"comment\"># Source networking configuration.</span></span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"><span class=\"comment\"># Check that networking is up.</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$NETWORKING</span>&quot;</span> = <span class=\"string\">&quot;no&quot;</span> ] &amp;&amp; <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"comment\"># 这里根据实际安装位置修改</span></span><br><span class=\"line\">nginx=<span class=\"string\">&quot;/usr/local/nginx/sbin/nginx&quot;</span></span><br><span class=\"line\">prog=$(<span class=\"built_in\">basename</span> <span class=\"variable\">$nginx</span>)</span><br><span class=\"line\"><span class=\"comment\"># 这里根据实际配置文件位置修改</span></span><br><span class=\"line\">NGINX_CONF_FILE=<span class=\"string\">&quot;/usr/local/nginx/conf&quot;</span></span><br><span class=\"line\">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class=\"line\">lockfile=/var/lock/subsys/nginx</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">make_dirs</span></span>() &#123;</span><br><span class=\"line\">   <span class=\"comment\"># make required directories</span></span><br><span class=\"line\">   user=`<span class=\"variable\">$nginx</span> -V 2&gt;&amp;1 | grep <span class=\"string\">&quot;configure arguments:&quot;</span> | sed <span class=\"string\">&#x27;s/[^*]*--user=\\([^ ]*\\).*/\\1/g&#x27;</span> -`</span><br><span class=\"line\">   <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;`grep <span class=\"variable\">$user</span> /etc/passwd`&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">       useradd -M -s /bin/nologin <span class=\"variable\">$user</span></span><br><span class=\"line\">   <span class=\"keyword\">fi</span></span><br><span class=\"line\">   options=`<span class=\"variable\">$nginx</span> -V 2&gt;&amp;1 | grep <span class=\"string\">&#x27;configure arguments:&#x27;</span>`</span><br><span class=\"line\">   <span class=\"keyword\">for</span> opt <span class=\"keyword\">in</span> <span class=\"variable\">$options</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> [ `<span class=\"built_in\">echo</span> <span class=\"variable\">$opt</span> | grep <span class=\"string\">&#x27;.*-temp-path&#x27;</span>` ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">           value=`<span class=\"built_in\">echo</span> <span class=\"variable\">$opt</span> | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot;=&quot;</span> -f 2`</span><br><span class=\"line\">           <span class=\"keyword\">if</span> [ ! -d <span class=\"string\">&quot;<span class=\"variable\">$value</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">               <span class=\"comment\"># echo &quot;creating&quot; $value</span></span><br><span class=\"line\">               <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$value</span> &amp;&amp; <span class=\"built_in\">chown</span> -R <span class=\"variable\">$user</span> <span class=\"variable\">$value</span></span><br><span class=\"line\">           <span class=\"keyword\">fi</span></span><br><span class=\"line\">       <span class=\"keyword\">fi</span></span><br><span class=\"line\">   <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">    [ -x <span class=\"variable\">$nginx</span> ] || <span class=\"built_in\">exit</span> 5</span><br><span class=\"line\">    [ -f <span class=\"variable\">$NGINX_CONF_FILE</span> ] || <span class=\"built_in\">exit</span> 6</span><br><span class=\"line\">    make_dirs</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot;Starting <span class=\"variable\">$prog</span>: &quot;</span></span><br><span class=\"line\">    daemon <span class=\"variable\">$nginx</span> -c <span class=\"variable\">$NGINX_CONF_FILE</span></span><br><span class=\"line\">    retval=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    [ <span class=\"variable\">$retval</span> -eq 0 ] &amp;&amp; <span class=\"built_in\">touch</span> <span class=\"variable\">$lockfile</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot;Stopping <span class=\"variable\">$prog</span>: &quot;</span></span><br><span class=\"line\">    killproc <span class=\"variable\">$prog</span> -QUIT</span><br><span class=\"line\">    retval=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    [ <span class=\"variable\">$retval</span> -eq 0 ] &amp;&amp; <span class=\"built_in\">rm</span> -f <span class=\"variable\">$lockfile</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">restart</span></span>() &#123;</span><br><span class=\"line\">    configtest || <span class=\"built_in\">return</span> $?</span><br><span class=\"line\">    stop</span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">    start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">reload</span></span>() &#123;</span><br><span class=\"line\">    configtest || <span class=\"built_in\">return</span> $?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot;Reloading <span class=\"variable\">$prog</span>: &quot;</span></span><br><span class=\"line\">    killproc <span class=\"variable\">$nginx</span> -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">force_reload</span></span>() &#123;</span><br><span class=\"line\">    restart</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">configtest</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"variable\">$nginx</span> -t -c <span class=\"variable\">$NGINX_CONF_FILE</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">rh_status</span></span>() &#123;</span><br><span class=\"line\">    status <span class=\"variable\">$prog</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">rh_status_q</span></span>() &#123;</span><br><span class=\"line\">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        rh_status_q &amp;&amp; <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        rh_status_q || <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart|configtest)</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload)</span><br><span class=\"line\">        rh_status_q || <span class=\"built_in\">exit</span> 7</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    force-reload)</span><br><span class=\"line\">        force_reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">        rh_status</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    condrestart|try-restart)</span><br><span class=\"line\">        rh_status_q || <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> $<span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 2</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n\n<p>保存脚本文件，并修改权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改文件权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> a+x /etc/init.d/nginx</span><br><span class=\"line\"><span class=\"comment\"># 添加为系统服务</span></span><br><span class=\"line\">chkconfig --add /etc/init.d/nginx</span><br><span class=\"line\"><span class=\"comment\"># 服务启动/停止命令</span></span><br><span class=\"line\">service nginx start</span><br><span class=\"line\">service nginx stop</span><br><span class=\"line\"><span class=\"comment\"># 设置终端模式开机启动</span></span><br><span class=\"line\">chkconfig nginx on</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS7-注册为系统服务，并开机自启\"><a href=\"#CentOS7-注册为系统服务，并开机自启\" class=\"headerlink\" title=\"CentOS7 注册为系统服务，并开机自启\"></a>CentOS7 注册为系统服务，并开机自启</h3><p>在系统中创建服务脚本，命令如下：</p>\n<p><code>vi /usr/lib/systemd/system/nginx.service</code></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"keyword\">Description</span>=nginx - web server</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>logs/nginx.pid</span><br><span class=\"line\">ExecStartPre=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -t -c /u</span>sr<span class=\"regexp\">/local/</span>nginx<span class=\"regexp\">/conf/</span>nginx.conf</span><br><span class=\"line\">ExecStart=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -c /u</span>sr<span class=\"regexp\">/local/</span>nginx<span class=\"regexp\">/conf/</span>nginx.conf</span><br><span class=\"line\">ExecReload=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reload</span><br><span class=\"line\">ExecStop=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s stop</span><br><span class=\"line\">ExecQuit=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s quit</span><br><span class=\"line\">PrivateTmp=<span class=\"keyword\">true</span></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>重新加载系统服务，并设置开机自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新加载系统服务</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl start nginx.service</span><br><span class=\"line\"><span class=\"comment\"># 开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JDK（Java-环境）安装\"><a href=\"#JDK（Java-环境）安装\" class=\"headerlink\" title=\"JDK（Java 环境）安装\"></a>JDK（Java 环境）安装</h2><blockquote>\n<p>注意：这 ⾥ 安装的是 Oracle JDK</p>\n</blockquote>\n<h3 id=\"准备-JDK-安装包\"><a href=\"#准备-JDK-安装包\" class=\"headerlink\" title=\"准备 JDK 安装包\"></a>准备 JDK 安装包</h3><p>我这里下载的是 <code>jdk-8u251-linux-x64.tar.gz</code> 安装包，并将其放在了 <code>/opt</code> 目录下</p>\n<h3 id=\"卸载已有的-OPENJDK（如果有）\"><a href=\"#卸载已有的-OPENJDK（如果有）\" class=\"headerlink\" title=\"卸载已有的 OPENJDK（如果有）\"></a>卸载已有的 OPENJDK（如果有）</h3><p>如果系统 ⾃ 带有 <code>OpenJDK</code>，可以按照如下步骤提前卸载之。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep java</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308133517.png\" alt=\"image-20220308132559705\"></p>\n<p>接下来可以将 <code>java</code> 开头的安装包均卸载即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64</span><br><span class=\"line\">yum -y remove java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64</span><br><span class=\"line\">... 省略 ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建目录并解压\"><a href=\"#创建目录并解压\" class=\"headerlink\" title=\"创建目录并解压\"></a>创建目录并解压</h3><p>1、在 <code>/usr/local/</code> 下创建 <code>java</code> 文件夹并进入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> java</span><br><span class=\"line\"><span class=\"built_in\">cd</span> java</span><br></pre></td></tr></table></figure>\n\n<p>2、将上 ⾯ 准备好的 JDK 安装包解压到 /usr/local/java 中即可</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf <span class=\"regexp\">/opt/</span>jdk-<span class=\"number\">8</span>u251-linux-x64.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>解压完之后， /usr/local/java ⽬ 录中会出现 ⼀ 个 jdk1.8.0_251 的 ⽬ 录</p>\n<h3 id=\"配置-JDK-环境变量\"><a href=\"#配置-JDK-环境变量\" class=\"headerlink\" title=\"配置 JDK 环境变量\"></a>配置 JDK 环境变量</h3><p>编辑 <code>/etc/profile</code> 文件，在文件尾部加入如下 <code>JDK</code> 环境配置即可</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">JAVA_HOME</span>=/usr/local/java/jdk1.8.0_251</span><br><span class=\"line\"><span class=\"attribute\">CLASSPATH</span>=<span class=\"variable\">$JAVA_HOME</span>/lib/</span><br><span class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$JAVA_HOME/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>\n\n<p>然后执 ⾏ 如下命令让环境变量 ⽣ 效</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">source</span> <span class=\"regexp\">/etc/</span>profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证-JDK-安装结果\"><a href=\"#验证-JDK-安装结果\" class=\"headerlink\" title=\"验证 JDK 安装结果\"></a>验证 JDK 安装结果</h3><p>输入如下命令即可检查安装结果：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -<span class=\"built_in\">version</span></span><br><span class=\"line\"></span><br><span class=\"line\">javac</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308153603.png\" alt=\"image-20220308153602981\"></p>\n<h2 id=\"Maven-项目构建和管理工具安装\"><a href=\"#Maven-项目构建和管理工具安装\" class=\"headerlink\" title=\"Maven 项目构建和管理工具安装\"></a>Maven 项目构建和管理工具安装</h2><h3 id=\"准备-MAVEN-安装包并解压\"><a href=\"#准备-MAVEN-安装包并解压\" class=\"headerlink\" title=\"准备 MAVEN 安装包并解压\"></a>准备 MAVEN 安装包并解压</h3><p>这 ⾥ 下载的是 <code>apache-maven-3.6.3-bin.tar.gz</code> 安装包，并将其放置于提前创建好的 <code>/usr/local/maven</code> ⽬ 录下。</p>\n<p>执 ⾏ 命令解压之：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf /opt/apache-maven-3.6.3-bin.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>即可在当前 ⽬ 录得到 /usr/local/maven/apache-maven-3.6.3 ⽬ 录</p>\n<h3 id=\"配置-MAVEN-加速镜像源\"><a href=\"#配置-MAVEN-加速镜像源\" class=\"headerlink\" title=\"配置 MAVEN 加速镜像源\"></a>配置 MAVEN 加速镜像源</h3><p>这 ⾥ 配置的是阿 ⾥ 云的 maven 镜像源。</p>\n<p>编辑修改 <code>/usr/local/maven/apache-maven-3.6.3/conf/settings.xml</code> ⽂ 件，在 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 标签对 ⾥ 添加如下内容即可：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308154746.png\" alt=\"image-20220308154746010\"></p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>因为下载的是 ⼆ 进制版安装包，所以解压完，配置好环境变量即可使用了。</p>\n<p>编辑修改 <code>/etc/profile</code> ⽂ 件，在 ⽂ 件尾部添加如下内容，配置 <code>maven</code> 的安装路径</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">MAVEN_HOME</span>=/usr/local/maven/apache-maven-3.6.3</span><br><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">PATH</span>=<span class=\"variable\">$MAVEN_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>接下来执行 <code>source /etc/profile</code> 来刷新环境变量，让 <code>maven</code> 环境的路径配置生效</p>\n<h3 id=\"检验安装结果\"><a href=\"#检验安装结果\" class=\"headerlink\" title=\"检验安装结果\"></a>检验安装结果</h3><p>执 ⾏ <code>mvn –v</code> ，能打印出 <code>maven</code> 版本信息说明安装、配置成功：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308155428.png\" alt=\"image-20220308155428868\"></p>\n<h2 id=\"Jenkins-安装与配置\"><a href=\"#Jenkins-安装与配置\" class=\"headerlink\" title=\"Jenkins 安装与配置\"></a>Jenkins 安装与配置</h2><h3 id=\"安装-Jenkins-Master\"><a href=\"#安装-Jenkins-Master\" class=\"headerlink\" title=\"安装 Jenkins Master\"></a>安装 Jenkins Master</h3><blockquote>\n<p><a href=\"https://www.jenkins.io/zh/doc/book/installing/\">Jenkins 官方安装文档</a></p>\n</blockquote>\n<p><strong>Docker 安装 Jenkins（推荐）</strong></p>\n<ul>\n<li><p>使用 Docker 安装 Jenkins</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用命令直接安装（包含构建工具）</span></span><br><span class=\"line\">docker run -d --name jenkins --restart always \\</span><br><span class=\"line\">--user root -p <span class=\"number\">8080</span>:<span class=\"number\">8080</span> -p <span class=\"number\">50000</span>:<span class=\"number\">50000</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>jenkins_home:<span class=\"regexp\">/var/</span>jenkins_home \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/maven/</span>apache-maven-<span class=\"number\">3.6</span>.<span class=\"number\">3</span>:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/maven/</span>apache-maven-<span class=\"number\">3.6</span>.<span class=\"number\">3</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251 \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>run<span class=\"regexp\">/docker.sock:/</span>var<span class=\"regexp\">/run/</span>docker.sock \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 简易安装</span></span><br><span class=\"line\">docker run -d --name jenkins --restart always \\</span><br><span class=\"line\">--user root -p <span class=\"number\">8080</span>:<span class=\"number\">8080</span> -p <span class=\"number\">50000</span>:<span class=\"number\">50000</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/u01/</span>jenkins_home:<span class=\"regexp\">/var/</span>jenkins_home \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>run<span class=\"regexp\">/docker.sock:/</span>var<span class=\"regexp\">/run/</span>docker.sock \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>War 安装 Jenkins</strong></p>\n<ul>\n<li>获取 Jenkins 安装包</li>\n</ul>\n<p>下载页面：<a href=\"https://jenkins.io/zh/download/\">https://jenkins.io/zh/download/</a></p>\n<p>安装文件：jenkins.war</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、将最新的稳定Jenkins WAR包 下载到您计算机上的相应目录。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、在下载的目录内打开一个终端/命令提示符窗口到。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、运行命令java -jar jenkins.war</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、浏览http:<span class=\"comment\">//localhost:8080并等到*Unlock Jenkins*页面出现。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、继续使用Post-installation setup wizard后面步骤设置向导。</span><br></pre></td></tr></table></figure>\n\n<p><strong>解锁 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174609.png\" alt=\"image-20220309174609417\"></p>\n<p>获取并输入 admin 账户密码（我这里是 docker 安装的，目录是映射到指定位置的，密码实际存放路径以提示为主）</p>\n<p><code>cat /var/jenkins_home/secrets/initialAdminPassword</code></p>\n<p><strong>跳过插件安装</strong></p>\n<p>因为 Jenkins 插件需要连接默认官网下载，速度非常慢，而且容易安装失败，所以我们暂时先跳过插件安装。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174531.png\" alt=\"image-20220309174531892\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174831.png\" alt=\"image-20220309174831016\"></p>\n<p><strong>添加一个管理员账户，并进入 Jenkins 后台</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174954.png\" alt=\"image-20220309174953956\"></p>\n<p><strong>保存并完成</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175748.png\" alt=\"image-20220309175748708\"></p>\n<p><strong>开始使用 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175816.png\" alt=\"image-20220309175816074\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175908.png\" alt=\"image-20220309175908276\"></p>\n<h3 id=\"安装-Jenkins-Slave\"><a href=\"#安装-Jenkins-Slave\" class=\"headerlink\" title=\"安装 Jenkins Slave\"></a>安装 Jenkins Slave</h3><p><code>系统设置 &gt; 节点管理 &gt; 新建节点</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112501.png\" alt=\"image-20220315112454277\"></p>\n<p><strong><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112942.png\" alt=\"image-20220315112942218\" style=\"zoom:67%;\" /></strong></p>\n<p>下载 <code>agent.jar</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112649.png\" alt=\"image-20220315112649284\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建agent目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /dev/jenkinsagent</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /dev/jenkinsagent</span><br><span class=\"line\">wget http://192.168.88.230:8080/jnlpJars/agent.jar</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 编写启动脚本</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 0bdf5bac23b7d4e66880934b25bda0f353509529b7f843ebb688614ba389680e &gt; secret-file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar agent.jar -jnlpUrl http://192.168.88.230:8080/computer/build/jenkins-agent.jnlp -secret @secret-file -workDir <span class=\"string\">&quot;/u01/jenkins-agent&quot;</span> 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 启动agent</span></span><br><span class=\"line\">sh -x start.sh</span><br><span class=\"line\">ps aux | grep agent</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Jenkins-插件管理\"><a href=\"#Jenkins-插件管理\" class=\"headerlink\" title=\"Jenkins 插件管理\"></a>Jenkins 插件管理</h3><p>Jenkins 本身不提供很多功能，我们可以通过使用插件来满足我们的使用。例如从 Gitlab 拉取代码，使用 Maven 构建项目等功能需要依靠插件完成。接下来演示如何下载插件。</p>\n<p><strong>修改 Jenkins 插件下载地址</strong></p>\n<p>Jenkins 国外官方插件地址下载速度非常慢，所以可以修改为国内插件地址：</p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180153.png\" alt=\"image-20220309180153473\"></p>\n<p>这样做是为了把 Jenkins 官方的插件列表下载到本地，接着修改地址文件，替换为国内插件地址：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入配置目录 （目录视情况而定，安装的jenkins_home下）</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/var/jenkins_home/updates</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">sed -i &#x27;s/http:\\/\\<span class=\"string\">/updates.jenkins</span>\u0002ci.org\\<span class=\"string\">/download/https</span>:\\/\\<span class=\"string\">/mirrors.tuna.tsinghua.edu.cn</span>\\<span class=\"string\">/jenkins/g</span>&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\\/\\<span class=\"string\">/www.google.com/https</span>:\\/\\<span class=\"string\">/www.baidu.com/g</span>&#x27; default.json</span><br></pre></td></tr></table></figure>\n\n<p>最后，Manage Plugins 点击 Advanced，把 Update Site 改为国内插件下载地址</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180807.png\" alt=\"image-20220309180807037\"></p>\n<p>Sumbit 后，在浏览器输入： <a href=\"http://120.78.204.65:8180/restart\">http://120.78.204.65:8180/restart</a> ，重启 Jenkins。</p>\n<p><strong>下载中文汉化插件</strong></p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available，搜索&quot;Chinese&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181055.png\" alt=\"image-20220309181055822\"></p>\n<p>完成后如下图所示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181122.png\" alt=\"image-20220309181122066\"></p>\n<p>重启 Jenkins 之后，就看到 Jenkins 汉化了！（PS：某些菜单可能会汉化失败）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181408.png\" alt=\"image-20220309181408200\"></p>\n<h3 id=\"Jenkins-用户权限管理\"><a href=\"#Jenkins-用户权限管理\" class=\"headerlink\" title=\"Jenkins 用户权限管理\"></a>Jenkins 用户权限管理</h3><p>我们可以利用 <code>Role-based Authorization Strategy</code> 插件来管理 Jenkins 用户权限</p>\n<p><strong>安装 Role-based Authorization Strategy 插件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181600.png\" alt=\"image-20220309181600238\"></p>\n<p><strong>开启权限全局安全配置</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181914.png\" alt=\"image-20220309181914873\"></p>\n<p>授权策略切换为 “Role-Based Strategy”，保存</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181940.png\" alt=\"image-20220309181940124\"></p>\n<p><strong>创建角色</strong></p>\n<p>在系统管理页面进入 Manage and Assign Roles</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182209.png\" alt=\"image-20220309182209559\"></p>\n<p>点击 “Manage Roles”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182301.png\" alt=\"image-20220309182301430\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182435.png\" alt=\"image-20220309182435102\"></p>\n<p><code>Global roles（全局角色）</code>：管理员等高级用户可以创建基于全局的角色</p>\n<p><code>Item roles（项目角色）</code>： 针对某个或者某些项目的角色</p>\n<p><code>Node roles（节点角色）</code>：节点相关的权限</p>\n<p>我们添加以下三个角色：</p>\n<ul>\n<li>baseRole：该角色为全局角色。这个角色需要绑定 Overall 下面的 Read 权限，是为了给所有用户绑定最基本的 Jenkins 访问权限。注意：如果不给后续用户绑定这个角色，会报错误：<code>用户名 is missing the Overall/Read permission</code></li>\n<li>role1：该角色为项目角色。使用正则表达式绑定 <code>.vx-chx.\\*</code>，意思是只能操作 vx-chx 开头的项目。</li>\n<li>role2：该角色为项目角色。使用正则表达式绑定 <code>.vx-phm.\\*</code>，意思是只能操作 vx-phm 开头的项目。</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182812.png\" alt=\"image-20220309182812353\"></p>\n<p>保存</p>\n<p><strong>创建用户</strong></p>\n<p>在系统管理页面进入 Manage Users</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182917.png\" alt=\"image-20220309182917026\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183107.png\" alt=\"image-20220309183107565\"></p>\n<p>分别创建两个用户：vxchx 和 vxphm</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183223.png\" alt=\"image-20220309183223041\"></p>\n<p><strong>给用户分配角色</strong></p>\n<p>系统管理页面进入 Manage and Assign Roles，点击 Assign Roles</p>\n<p>绑定规则如下：</p>\n<ul>\n<li><p>vxchx 用户分别绑定 baseRole 和 role1 角色</p>\n</li>\n<li><p>vxphm 用户分别绑定 baseRole 和 role2 角色</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183455.png\" alt=\"image-20220309183455591\"></p>\n</li>\n</ul>\n<p>保存</p>\n<p><strong>创建项目测试权限</strong></p>\n<p>以 admin 管理员账户创建两个项目，分别为 vx-chx-test 和 vx-phm-test</p>\n<p>结果为： vxchx 用户登录，只能看到 vx-chx-test 项目 vxphm 用户登录，只能看到 vx-phm-test 项目</p>\n<h3 id=\"Jenkins-凭证管理\"><a href=\"#Jenkins-凭证管理\" class=\"headerlink\" title=\"Jenkins 凭证管理\"></a>Jenkins 凭证管理</h3><p>凭据可以用来存储需要密文保护的数据库密码、Gitlab 密码信息、Docker 私有仓库密码等，以便 Jenkins 可以和这些第三方的应用进行交互。</p>\n<p><strong>安装 Credentials Binding 插件</strong></p>\n<p>要在 Jenkins 使用凭证管理功能，需要安装 <code>Credentials Binding</code> 插件</p>\n<blockquote>\n<p>注：新版本已经默认安装了此插件，这里无需另外再安装了</p>\n</blockquote>\n<p>系统管理中选择 <code>Manage Credentials</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184117.png\" alt=\"image-20220309184117479\"></p>\n<p>可以添加的凭证有 5 种：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184218.png\" alt=\"image-20220309184218399\"></p>\n<ul>\n<li>Username with password：用户名和密码</li>\n<li>SSH Username with private key： 使用 SSH 用户和密钥</li>\n<li>Secret file：需要保密的文本文件，使用时 Jenkins 会将文件复制到一个临时目录中，再将文件路径 设置到一个变量中，等构建结束后，所复制的 Secret file 就会被删除。</li>\n<li>GitHub App：GitHub 的 API 令牌</li>\n<li>Secret text：需要保存的一个加密的文本串，如钉钉机器人或 Github 的 api token</li>\n<li>Certificate：通过上传证书文件的方式</li>\n</ul>\n<p>常用的凭证类型有：<strong>Username with password（用户密码）</strong> 和 <strong>SSH Username with private key（SSH 密钥）</strong></p>\n<p>接下来以使用 Git 工具到 Gitlab 拉取项目源码为例，演示 Jenkins 的如何管理 Gitlab 的凭证。</p>\n<p><strong>安装 Git 插件和 Git 工具</strong></p>\n<p>为了让 Jenkins 支持从 Gitlab 拉取源码，需要安装 Git 插件以及在服务器上安装 Git 工具。</p>\n<p>Git 插件安装：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310094719.png\" alt=\"image-20220310094712046\"></p>\n<p>服务器上安装 Git 工具（以 CentOS7 为例）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install git -y</span><br><span class=\"line\"><span class=\"comment\"># 安装后查看版本</span></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>用户密码类型</strong></p>\n<p>1）创建凭据</p>\n<p><code>Jenkins -&gt; 凭证 -&gt; 系统 -&gt; 全局凭据 -&gt; 添加凭据</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310095750.png\" alt=\"image-20220310095750604\"></p>\n<p>选择 “Username with password”，输入 Gitlab 的用户名和密码，点击 “确定”。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100359.png\" alt=\"image-20220310100359012\"></p>\n<p><strong>SSH 密钥类型</strong></p>\n<p>SSH 免密登录示意图</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100539.png\" alt=\"image-20220310100539140\"></p>\n<p>1）使用 root 用户生成公钥和私钥</p>\n<p><code>ssh-keygen -t rsa</code></p>\n<p>在/root/.ssh/目录保存了公钥和使用</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101013.png\" alt=\"image-20220310101013313\" style=\"zoom:67%;\" />\n\n<p>id_rsa：私钥文件</p>\n<p>id_rsa.pub：公钥文件</p>\n<p>2）把生成的公钥放在 Gitlab 中</p>\n<p><code>登录gitlab -&gt; 点击头像 -&gt; Settings -&gt; SSH Keys</code></p>\n<p>复制刚才 id_rsa.pub 文件的内容到这里，点击 “Add Key”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101538.png\" alt=\"image-20220310101538008\"></p>\n<p>3）在 Jenkins 中添加凭证，配置私钥</p>\n<p>在 Jenkins 添加一个新的凭证，类型为 “SSH Username with private key”，把刚才生成私有文件内容复制过来</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102203.png\" alt=\"image-20220310102203814\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102427.png\" alt=\"image-20220310102427213\"></p>\n<h3 id=\"Jenkins-关联-JDK-和-Maven\"><a href=\"#Jenkins-关联-JDK-和-Maven\" class=\"headerlink\" title=\"Jenkins 关联 JDK 和 Maven\"></a>Jenkins 关联 JDK 和 Maven</h3><p><strong>关联 JDK</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; JDK -&gt; 新增JDK，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102744.png\" alt=\"image-20220310102744563\"></p>\n<p><strong>关联 Maven</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; Maven -&gt; 新增Maven，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102836.png\" alt=\"image-20220310102835922\"></p>\n<h3 id=\"Jenkins-关闭跨站请求伪造保护\"><a href=\"#Jenkins-关闭跨站请求伪造保护\" class=\"headerlink\" title=\"Jenkins 关闭跨站请求伪造保护\"></a>Jenkins 关闭跨站请求伪造保护</h3><ul>\n<li>Docker 容器运行</li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、进入运行的容器</span></span><br><span class=\"line\">docker exec -u root -<span class=\"keyword\">it</span> 你的Jenkins容器名称或者容器<span class=\"built_in\">id</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、输入命令，编辑jenkins启动配置文件</span></span><br><span class=\"line\">vi /usr/<span class=\"keyword\">local</span>/bin/jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、在图中标记处，加入以下配置</span></span><br><span class=\"line\">-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、重启容器</span></span><br><span class=\"line\">docker restart jenkins</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220312001027.png\" alt=\"image-20220312001020531\"></p>\n<h3 id=\"添加-Jenkins-全局变量\"><a href=\"#添加-Jenkins-全局变量\" class=\"headerlink\" title=\"添加 Jenkins 全局变量\"></a><strong>添加 Jenkins 全局变量</strong></h3><p><code>Jenkins -&gt; 系统管理 -&gt; 全局属性 -&gt; 添加三个环境变量，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310103242.png\" alt=\"image-20220310103241974\"></p>\n<h3 id=\"Jenkins-数据迁移和备份\"><a href=\"#Jenkins-数据迁移和备份\" class=\"headerlink\" title=\"Jenkins 数据迁移和备份\"></a>Jenkins 数据迁移和备份</h3><p>将安装 Jenkins 的机器上的 <code>jenkins_home</code> 目录下的 config.xml 文件，jobs 文件夹，users 文件夹和 plugins 文件夹打包</p>\n<ul>\n<li>config.xml 是存放配置信息的</li>\n<li>jobs 是存放创建的工程项目的</li>\n<li>users 是存放用户账信息的</li>\n<li>plugins 是存放插件的</li>\n</ul>\n<h3 id=\"Jenkins-删除构建历史\"><a href=\"#Jenkins-删除构建历史\" class=\"headerlink\" title=\"Jenkins 删除构建历史\"></a>Jenkins 删除构建历史</h3><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//项目名称</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> jobName = <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//删除小于等于maxNumber的构建历史</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> maxNumber = xxx</span><br><span class=\"line\"></span><br><span class=\"line\">Jenkins.instance.getItemByFullName(jobName).builds.findAll &#123;</span><br><span class=\"line\">  it.number &lt;= maxNumber</span><br><span class=\"line\">&#125;.each &#123;</span><br><span class=\"line\">  it.delete()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins-构建-Maven-项目\"><a href=\"#Jenkins-构建-Maven-项目\" class=\"headerlink\" title=\"Jenkins 构建 Maven 项目\"></a>Jenkins 构建 Maven 项目</h2><blockquote>\n<p>构建方式均采用 Jar 包方式，War 方式参考 <a href=\"http://doc.jeecg.com/2043887\">WAR 部署方案 · JeecgBoot 开发文档</a></p>\n</blockquote>\n<h3 id=\"Jenkins-项目构建类型\"><a href=\"#Jenkins-项目构建类型\" class=\"headerlink\" title=\"Jenkins 项目构建类型\"></a>Jenkins 项目构建类型</h3><p>Jenkins 中自动构建项目的类型有很多，常用的有以下三种：</p>\n<ul>\n<li>自由风格软件项目（FreeStyle Project）</li>\n<li>Maven 项目（Maven Project）</li>\n<li>流水线项目（Pipeline Project）</li>\n</ul>\n<p>每种类型的构建其实都可以完成一样的构建过程与结果，只是在操作方式、灵活度等方面有所区别，在实际开发中可以根据自己的需求和习惯来选择。（PS：个人推荐使用流水线类型，因为灵活度非常高）</p>\n<h3 id=\"自由风格项目构建\"><a href=\"#自由风格项目构建\" class=\"headerlink\" title=\"自由风格项目构建\"></a>自由风格项目构建</h3><p>下面演示创建一个自由风格项目来完成项目的集成过程：</p>\n<p><code>拉取代码 -&gt; 编译 -&gt; 打包 -&gt; 部署</code></p>\n<p><strong>拉取代码</strong></p>\n<p>1）创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112707.png\" alt=\"image-20220310112707895\"></p>\n<p>2）源码管理，从 Gitlab 拉取代码</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112815.png\" alt=\"image-20220310112815147\"></p>\n<p><strong>编译打包</strong></p>\n<p><code>构建 -&gt; 添加构建步骤 -&gt; 执行shell</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;开始编译和打包&quot;</span></span><br><span class=\"line\">mvn clean package</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;编译和打包结束&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112952.png\" alt=\"image-20220310112952936\"></p>\n<p><strong>部署</strong></p>\n<p>把项目部署到远程的服务器上，并启动</p>\n<p>1）安装 <code>Publish Over SSH</code> 插件</p>\n<p>Jenkins 本身无法实现远程部署到服务器上的功能，需要安装 <code>Publish Over SSH</code> 插件实现</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310113332.png\" alt=\"image-20220310113332137\"></p>\n<p>2）配置 <code>Publish over SSH</code>，添加 SSH 服务器</p>\n<p><code>打开系统管理 -&gt; 系统配置 -&gt; 拉到底部，选择Publish over SSH区域选择新增</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114012.png\" alt=\"image-20220310114012322\"></p>\n<p><code>点击高级 -&gt; 填写服务器密码</code>（也可选择 ssh 验证，在 Jenkins 中配置本机私钥，将公钥发送到目标机器，即可完成无密码登录）</p>\n<p><code>发送命令：ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.xxx.xxx</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114702.png\" alt=\"image-20220310114702171\"></p>\n<ul>\n<li>Passphrase： 密码（目标机器的密码）</li>\n<li>Path to key：key 文件（私钥）的路径</li>\n<li>SSH Server Name： 标识的名字（随便你取什么）</li>\n<li>Hostname： 需要连接 ssh 的主机名或 ip 地址，此处填写应用服务器 IP（建议 ip）</li>\n<li>Username： 用户名</li>\n<li>Remote Directory： 远程目录(要发布的目录, 比如/usr/local/tomcat/webapps/)</li>\n</ul>\n<p>3）添加构建步骤</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115055.png\" alt=\"image-20220310115055853\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115245.png\" alt=\"image-20220310115245384\"></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 脚本参考</span></span><br><span class=\"line\"><span class=\"attribute\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">cd</span> /apps</span><br><span class=\"line\"><span class=\"attribute\">ps</span> -ef|grep jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar|grep -v grep|awk &#x27;&#123;print $<span class=\"number\">2</span>&#125;&#x27;|xargs kill -s <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">BUILD_ID</span>=dontKillMe</span><br><span class=\"line\"><span class=\"attribute\">nohup</span> java -jar jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar &gt; jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.log <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure>\n\n<p>4）点击 “立即构建”，开始构建过程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115628.png\" alt=\"image-20220310115628609\"></p>\n<p>5）构建成功，并自动化部署，访问测试！</p>\n<h3 id=\"Maven-项目构建\"><a href=\"#Maven-项目构建\" class=\"headerlink\" title=\"Maven 项目构建\"></a>Maven 项目构建</h3><p>1）安装 Maven Integration Plugin（高版本的 Jenkins 已预装了此插件）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135008.png\" alt=\"image-20220310135008339\"></p>\n<p>2）创建 Maven 项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135103.png\" alt=\"image-20220310135103444\"></p>\n<p>3）配置项目</p>\n<p>拉取代码和远程部署的过程和自由风格项目一样，只是 “构建” 部分不同</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135300.png\" alt=\"image-20220310135300799\"></p>\n<h3 id=\"Pipeline-流水线项目构建\"><a href=\"#Pipeline-流水线项目构建\" class=\"headerlink\" title=\"Pipeline 流水线项目构建(*)\"></a>Pipeline 流水线项目构建(*)</h3><h4 id=\"Pipeline-简介\"><a href=\"#Pipeline-简介\" class=\"headerlink\" title=\"Pipeline 简介\"></a>Pipeline 简介</h4><p><strong>1）概念</strong></p>\n<p>Pipeline，简单来说，就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p>\n<p><strong>2）使用 Pipeline 有以下好处（来自翻译自官方文档）：</strong></p>\n<p>代码：Pipeline 以代码的形式实现，通常被检入源代码控制，使团队能够编辑，审查和迭代其传送流 程。持久：无论是计划内的还是计划外的服务器重启。Pipeline 都是可恢复的。可停止：Pipeline 可接 收交互式输入，以确定是否继续执行 Pipeline。多功能：Pipeline 支持现实世界中复杂的持续交付要求。它支持 fork/join、循环执行，并行执行任务的功能。可扩展：Pipeline 插件支持其 DSL 的自定义扩展，以及与其他插件集成的多个选项。</p>\n<p><strong>3）如何创建 Jenkins Pipeline 呢？</strong></p>\n<ul>\n<li>Pipeline 脚本是由 <strong>Groovy</strong> 语言实现的，但是我们没必要单独去学习 Groovy</li>\n<li>Pipeline 支持两种语法：<strong>Declarative</strong>(声明式)和 <strong>Scripted Pipeline</strong>(脚本式)语法</li>\n<li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中（一般我们都推荐在 Jenkins 中直接从源代码控制(SCM)中直接载入 Jenkinsfile Pipeline 这种方法）。</li>\n</ul>\n<h4 id=\"Pipeline-语法快速入门\"><a href=\"#Pipeline-语法快速入门\" class=\"headerlink\" title=\"Pipeline 语法快速入门\"></a>Pipeline 语法快速入门</h4><p><strong>1）Declarative 声明式-Pipeline</strong></p>\n<p>创建一个流水线项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154144.png\" alt=\"image-20220310154144897\"></p>\n<p><code>流水线 -&gt; 选择HelloWorld模板</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154618.png\" alt=\"image-20220310154618000\"></p>\n<p>生成的内容如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Hello&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>stages：</strong> 代表整个流水线的所有执行阶段。通常 stages 只有 1 个，里面包含多个 stage</p>\n</li>\n<li><p><strong>stage：</strong> 代表流水线中的某个阶段，可能出现 n 个。一般分为拉取代码，编译构建，部署等阶段。</p>\n</li>\n<li><p><strong>steps：</strong> 代表一个阶段内需要执行的逻辑。steps 里面是 shell 脚本，git 拉取代码，ssh 远程发布等任意内容。</p>\n</li>\n</ul>\n<p>编写一个简单声明式的 Pipeline：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;编译构建&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;项目部署&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击构建，进入 <code>Blue Ocean</code> 可以看到整个构建过程</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155756.png\" alt=\"image-20220310155756052\" style=\"zoom: 150%;\" />\n\n<p><strong>2）Scripted Pipeline 脚本式-Pipeline</strong></p>\n<p>创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155938.png\" alt=\"image-20220310155938728\"></p>\n<p>选择 <code>Scripted Pipeline&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310160044.png\" alt=\"image-20220310160044398\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> mvnHome</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Preparation&#x27;</span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Results&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Node：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，后续讲到 Jenkins 的 Master-Slave 架构的时候用到。</li>\n<li>Stage：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如： Build、Test、Deploy，Stage 是一个逻辑分组的概念。</li>\n<li>Step：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像， 由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令 一样。</li>\n</ul>\n<p>编写一个简单的脚本式 Pipeline</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    def mvnHome</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;拉取代码&#x27;</span></span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;编译构建&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;项目部署&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构建结果和声明式一样！</p>\n<p><strong>Pipeline Script from SCM</strong></p>\n<p>刚才我们都是直接在 Jenkins 的 UI 界面编写 Pipeline 代码，这样不方便脚本维护，建议把 Pipeline 脚本放在项目中（一起进行版本控制）</p>\n<p><strong>1）在项目根目录建立 Jenkinsfile 文件，把内容复制到该文件中</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310163924.png\" alt=\"image-20220310163924603\" style=\"zoom:67%;\" />\n\n<p>把 Jenkinsfile 上传到 Gitlab</p>\n<p><strong>2）在项目中引用该文件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164207.png\" alt=\"image-20220310164207097\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164225.png\" alt=\"image-20220310164225747\"></p>\n<h3 id=\"Jenkinsfile\"><a href=\"#Jenkinsfile\" class=\"headerlink\" title=\"Jenkinsfile\"></a>Jenkinsfile</h3><h4 id=\"Jenkinsfile-环境变量\"><a href=\"#Jenkinsfile-环境变量\" class=\"headerlink\" title=\"Jenkinsfile 环境变量\"></a>Jenkinsfile 环境变量</h4><table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BRANCH_NAME</td>\n<td>在 multibranch 项目中，BRANCH_NAME 用于标明构建分支的名称。</td>\n</tr>\n<tr>\n<td>CHANGE_ID</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更 ID，比如 Pull Request</td>\n</tr>\n<tr>\n<td>CHANGE_URL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的 URL</td>\n</tr>\n<tr>\n<td>CHANGE_TITLE</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的标题</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_DISPLAY_NAME</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的显示名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_EMAIL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的邮件地址</td>\n</tr>\n<tr>\n<td>CHANGE_TARGET</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于合并后的分支信息等</td>\n</tr>\n<tr>\n<td>BUILD_NUMBER</td>\n<td>当前的构建编号</td>\n</tr>\n<tr>\n<td>BUILD_ID</td>\n<td>在 1.597 版本后引进，表示当前构建 ID</td>\n</tr>\n<tr>\n<td>BUILD_DISPLAY_NAME</td>\n<td>当前构建的显示信息</td>\n</tr>\n<tr>\n<td>JOB_NAME</td>\n<td>构建 Job 的全称，包含项目信息</td>\n</tr>\n<tr>\n<td>JOB_BASE_NAME</td>\n<td>除去项目信息的 Job 名称</td>\n</tr>\n<tr>\n<td>BUILD_TAG</td>\n<td>构建标签</td>\n</tr>\n<tr>\n<td>EXECUTOR_NUMBER</td>\n<td>执行器编号，用于标识构建器的不同编号</td>\n</tr>\n<tr>\n<td>NODE_NAME</td>\n<td>构建节点的名称</td>\n</tr>\n<tr>\n<td>NODE_LABELS</td>\n<td>节点标签</td>\n</tr>\n<tr>\n<td>WORKSPACE</td>\n<td>构建时使用的工作空间的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_HOME</td>\n<td>JENKINS 根目录的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_URL</td>\n<td>Jenkins 的 URL 信息</td>\n</tr>\n<tr>\n<td>BUILD_URL</td>\n<td>构建的 URL 信息</td>\n</tr>\n<tr>\n<td>JOB_URL</td>\n<td>构建 Job 的 URL 信息</td>\n</tr>\n<tr>\n<td>GIT_COMMIT</td>\n<td>git 提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_COMMIT</td>\n<td>当前分支上次提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_SUCCESSFUL_COMMIT</td>\n<td>当前分支上次成功构建时提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_BRANCH</td>\n<td>远程分支名称</td>\n</tr>\n<tr>\n<td>GIT_LOCAL_BRANCH</td>\n<td>本地分支名称</td>\n</tr>\n<tr>\n<td>GIT_URL</td>\n<td>远程 URL 地址</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_NAME</td>\n<td>Git 提交者的名称</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_NAME</td>\n<td>Git Author 的名称</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_EMAIL</td>\n<td>Git 提交者的 email 地址</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_EMAIL</td>\n<td>Git Author 的 email 地址</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION</td>\n<td>Mercurial 的版本 ID 信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_SHORT</td>\n<td>Mercurial 的版本 ID 缩写</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_NUMBER</td>\n<td>Mercurial 的版本号信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_BRANCH</td>\n<td>分支版本信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REPOSITORY_URL</td>\n<td>仓库 URL 信息</td>\n</tr>\n<tr>\n<td>SVN_REVISION</td>\n<td>Subversion 的当前版本信息</td>\n</tr>\n<tr>\n<td>SVN_URL</td>\n<td>当前工作空间中被 checkout 的 Subversion 工程的 URL 地址信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的构建触发器\"><a href=\"#常用的构建触发器\" class=\"headerlink\" title=\"常用的构建触发器\"></a>常用的构建触发器</h3><p>Jenkins 内置 4 种构建触发器：</p>\n<ul>\n<li>触发远程构建</li>\n<li>其他工程构建后触发（Build after other projects are build）</li>\n<li>定时构建（Build periodically）</li>\n<li>轮询 SCM（Poll SCM）</li>\n<li>GitHub 钩子触发的 GIT SCM 轮询（GitHub hook trigger for GITScm polling）</li>\n</ul>\n<p><strong>触发远程构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164928.png\" alt=\"image-20220310164928630\"></p>\n<p>触发构建 url：<a href=\"http://192.168.88.86:8180/job/vx-phm/build?token\">http://192.168.88.86:8180/job/vx-phm/build?token</a> = abcabc</p>\n<p><strong>其他工程构建后触发</strong></p>\n<p>1）创建 pre_job 流水线工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170455.png\" alt=\"image-20220310170454942\"></p>\n<p>2）配置需要触发的工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170935.png\" alt=\"image-20220310170935519\"></p>\n<p><strong>定时构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171234.png\" alt=\"image-20220310171234011\"></p>\n<p>定时字符串从左往右分别为： 分 时 日 月 周</p>\n<p>一些定时表达式的例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">每30分钟构建一次：H代表形参 H/30 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span> 10:02 10:32</span><br><span class=\"line\"></span><br><span class=\"line\">每2个小时构建一次: H H/2 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天的8点，12点，22点，一天构建3次： (多个时间点中间用逗号隔开) 0 8,12,22 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每天中午12点定时构建一次 H 12 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天下午18点定时构建一次 H 18 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">在每个小时的前半个小时内的每10分钟 H(0-29)/10 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每两小时一次，每个工作日上午9点到下午5点(也许是上午10:38，下午12:38，下午2:38，下午</span><br><span class=\"line\">4:38) H H(9-16)/2 <span class=\"emphasis\">* *</span> 1-5</span><br></pre></td></tr></table></figure>\n\n<p><strong>轮询 SCM</strong></p>\n<p>轮询 SCM，是指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171348.png\" alt=\"image-20220310171348558\"></p>\n<p>注意：此构建触发器，Jenkins 会定时扫描本地整个项目的代码，增大系统的开销，不建议使用。</p>\n<h3 id=\"Git-Hook-自动触发构建\"><a href=\"#Git-Hook-自动触发构建\" class=\"headerlink\" title=\"Git Hook 自动触发构建(*)\"></a>Git Hook 自动触发构建(*)</h3><p>刚才我们看到在 Jenkins 的内置构建触发器中，轮询 SCM 可以实现 Gitlab 代码更新，项目自动构建，但是该方案的性能不佳。那有没有更好的方案呢？有的。就是利用 Gitlab 的 webhook 实现代码 push 到仓库，立即触发项目自动构建。</p>\n<p><strong>安装 Gitlab Hook 插件</strong></p>\n<p>需要安装两个插件：</p>\n<p>Gitlab Hook 和 Gitlab</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172047.png\" alt=\"image-20220310172047813\"></p>\n<p><strong>Jenkins 设置自动构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172445.png\" alt=\"image-20220310172445870\"></p>\n<p>等会需要把生成的 webhook URL 配置到 Gitlab 中。</p>\n<p><strong>Gitlab 配置 webhook</strong></p>\n<p>1）开启 webhook 功能</p>\n<p><code>使用root账户登录到后台，点击Admin Area -&gt; Settings -&gt; Network</code></p>\n<p><code>勾选&quot;Allow requests to the local network from web hooks and services&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172805.png\" alt=\"image-20220310172805087\"></p>\n<p>2）在项目中添加 webhook</p>\n<p><code>点击项目 -&gt; Settings -&gt; Webhooks</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173325.png\" alt=\"image-20220310173325550\"></p>\n<p>注意：以下设置必须完成，否则会报错！</p>\n<p><code>系统管理 -&gt; 系统配置</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173704.png\" alt=\"image-20220310173704682\"></p>\n<h2 id=\"SonarQube-平台安装与配置\"><a href=\"#SonarQube-平台安装与配置\" class=\"headerlink\" title=\"SonarQube 平台安装与配置\"></a>SonarQube 平台安装与配置</h2><h3 id=\"认识-SonarQube\"><a href=\"#认识-SonarQube\" class=\"headerlink\" title=\"认识 SonarQube\"></a>认识 SonarQube</h3><p>SonarQube 是一款用于代码质量管理的开源工具，是静态代码检查工具，采用 B/S 架构它主要用于管理源代码的质量，可以支持众多计算机语言，比如 php，java, C#, go，C/C++, Cobol, JavaScrip, Groovy 等。sonar 可以通过 PMD，CheckStyle，Findbugs 等等代码规则检测工具来检测你的代码，帮助你发现代码的漏洞，Bug，异味等信息。</p>\n<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><ul>\n<li>一台 SonarQube Server 启动 3 个主要过程：<ul>\n<li>Web 服务器，供开发人员，管理人员浏览高质量的快照并配置 SonarQube 实例</li>\n<li>基于 Elasticsearch 的 Search Server 从 UI 进行后退搜索</li>\n<li>Compute Engine 服务器，负责处理代码分析报告并将其保存在 SonarQube 数据库中</li>\n</ul>\n</li>\n<li>一个 SonarQube 数据库要存储：<ul>\n<li>SonarQube 实例的配置（安全性，插件设置等）</li>\n<li>项目，视图等的质量快照。</li>\n</ul>\n</li>\n<li>服务器上安装了多个 SonarQube 插件，可能包括语言，SCM，集成，身份验证和管理插件</li>\n<li>在构建/持续集成服务器上运行一个或多个 SonarScanner，以分析项目</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135315.png\" alt=\"image-20220314135314928\"></p>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><p>开发人员在 IDE 开发代码，可以安装 SonarLint 插件进行提交前代码扫描 当开发人员提交代码到版本控制系统中，自动触发 jenkins 进行代码扫描</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135418.png\" alt=\"image-20220314135418834\"></p>\n<h4 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h4><p>开源社区版、开发版、企业版、数据中心版</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135630.png\" alt=\"image-20220314135630641\"></p>\n<h3 id=\"Docker-安装-SonarQube\"><a href=\"#Docker-安装-SonarQube\" class=\"headerlink\" title=\"Docker 安装 SonarQube\"></a>Docker 安装 SonarQube</h3><p>这里采用 docker 容器进行安装，简单快捷</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/sonarqube/&#123;data,extensions,logs&#125;</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 -R /u01/cicd/sonarqube/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 调整</span></span><br><span class=\"line\">sysctl -w vm.max_map_count=262144</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 运行</span></span><br><span class=\"line\">docker run -d -p 9000:9000 -p 9092:9092 --name sonarqube \\</span><br><span class=\"line\">\t-v /u01/sonarqube/data:/opt/sonarqube/data \\</span><br><span class=\"line\">\t-v /u01/sonarqube/extensions:/opt/sonarqube/extensions \\</span><br><span class=\"line\">\t-v /u01/sonarqube/logs:/opt/sonarqube/logs \\</span><br><span class=\"line\">\t-e SONAR_JDBC_USERNAME=sonar \\</span><br><span class=\"line\">\t-e SONAR_JDBC_PASSWORD=sonar \\</span><br><span class=\"line\">\t-e SONAR_JDBC_URL=<span class=\"string\">&quot;jdbc:postgresql://192.168.88.236:5432/sonar &quot;</span> \\</span><br><span class=\"line\">\t--restart = always \\</span><br><span class=\"line\">\t--privileged = <span class=\"literal\">true</span> \\</span><br><span class=\"line\">    sonarqube: 8.9.9-community</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 验证</span></span><br><span class=\"line\">docker logs -f sonarqube</span><br></pre></td></tr></table></figure>\n\n<p>访问：<a href=\"http://192.168.88.235:9000/\">http://192.168.88.235:9000/</a></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314134759.png\" alt=\"image-20220314134752470\" style=\"zoom:67%;\" />\n\n<p>默认账号：admin/admin</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314134841.png\" alt=\"image-20220314134841587\" style=\"zoom:67%;\" />\n\n<h3 id=\"配置-Scanner\"><a href=\"#配置-Scanner\" class=\"headerlink\" title=\"配置 Scanner\"></a>配置 Scanner</h3><p><strong>安装</strong></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取安装包</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>binaries.sonarsource.com<span class=\"regexp\">/Distribution/</span>sonar-scanner-cli/sonar-scanner-cli-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压到指定目录</span></span><br><span class=\"line\">unzip -o -d  <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner /</span>opt/sonar-scanner-cli-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑环境变量</span></span><br><span class=\"line\">vim <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\">export SCANNER_HOME =<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux</span><br><span class=\"line\">export PATH = <span class=\"variable\">$PATH</span>:$ SCANNER_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使环境变量生效</span></span><br><span class=\"line\">source <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">sonar-scanner -v</span><br><span class=\"line\">INFO: Scanner configuration file: <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner-4.6.0.2311-linux/</span>conf/sonar-scanner.properties</span><br><span class=\"line\">INFO: Project root configuration file: NONE</span><br><span class=\"line\">INFO: SonarScanner <span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span></span><br><span class=\"line\">INFO: Java <span class=\"number\">11.0</span>.<span class=\"number\">3</span> AdoptOpenJDK (<span class=\"number\">64</span>-bit)</span><br><span class=\"line\">INFO: Linux <span class=\"number\">4.18</span>.<span class=\"number\">0</span>-<span class=\"number\">80</span>.el8.x86_64 amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改使用的 jdk</span></span><br><span class=\"line\">vim <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux<span class=\"regexp\">/bin/</span>sonar-scanner</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SonarQube-平台配置管理\"><a href=\"#SonarQube-平台配置管理\" class=\"headerlink\" title=\"SonarQube 平台配置管理\"></a>SonarQube 平台配置管理</h3><h4 id=\"安装中文插件\"><a href=\"#安装中文插件\" class=\"headerlink\" title=\"安装中文插件\"></a>安装中文插件</h4><p><strong>在线安装：操作如下图</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314140021.png\" alt=\"image-20220314140021697\"></p>\n<h4 id=\"配置强制登录\"><a href=\"#配置强制登录\" class=\"headerlink\" title=\"配置强制登录\"></a>配置强制登录</h4><p>默认所有的项目都可以公开的查看，在企业内肯定要配置成私有的。只有登录后才能查看</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314140634.png\" alt=\"image-20220314140634628\" style=\"zoom:67%;\" />\n\n<h3 id=\"Jenkins-配置-SonarScanner\"><a href=\"#Jenkins-配置-SonarScanner\" class=\"headerlink\" title=\"Jenkins 配置 SonarScanner\"></a>Jenkins 配置 SonarScanner</h3><p>创建 SonarQube 账户 token</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143339.png\" alt=\"image-20220314143339207\" style=\"zoom:67%;\" />\n\n<p>将 token 保存到 Jenkins 凭据中</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143433.png\" alt=\"image-20220314143433728\" style=\"zoom:67%;\" />\n\n<p>在 Jenkins 中安装<code>SonarQube Scanner</code>插件</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143552.png\" alt=\"image-20220314143552551\" style=\"zoom:67%;\" />\n\n<p><code>系统管理 -&gt; 系统配置 -&gt; 往下翻找到SonarQube servers -&gt; Add SonarQube -&gt; 添加服务器，选择凭据</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143936.png\" alt=\"image-20220314143936259\" style=\"zoom:67%;\" />\n\n<h3 id=\"IDEA-配置-SonarLint-插件\"><a href=\"#IDEA-配置-SonarLint-插件\" class=\"headerlink\" title=\"IDEA 配置 SonarLint 插件\"></a>IDEA 配置 SonarLint 插件</h3><p>Token：a3268ff16b2d08b4582ff6a97342cc9d11b4e456</p>\n<h2 id=\"Nexus-制品库安装与配置\"><a href=\"#Nexus-制品库安装与配置\" class=\"headerlink\" title=\"Nexus 制品库安装与配置\"></a>Nexus 制品库安装与配置</h2><h3 id=\"Docker-安装部署-Nexus-制品库\"><a href=\"#Docker-安装部署-Nexus-制品库\" class=\"headerlink\" title=\"Docker 安装部署 Nexus 制品库\"></a>Docker 安装部署 Nexus 制品库</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 拉取镜像</span></span><br><span class=\"line\">docker pull sonatype/nexus3:3.30.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/cicd/nexus3/data</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 -R /u01/cicd/nexus3/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 启动容器</span></span><br><span class=\"line\">docker run -itd \\</span><br><span class=\"line\">--privileged = <span class=\"literal\">true</span> --name = nexus3 \\</span><br><span class=\"line\">-p 8081:8081 \\</span><br><span class=\"line\">-v /u01/cicd/nexus3/data:/nexus-data \\</span><br><span class=\"line\">sonatype/nexus3:3.30.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 验证</span></span><br><span class=\"line\">docker logs nexus3 -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 日志中出现 “Started Sonatype Nexus OSS 3.30.0-01” 为启动成功</span></span><br><span class=\"line\"><span class=\"comment\">## http://your-ip-addr: 8081 访问测试</span></span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，默认的 admin 密码存储在了数据目录，获取初始化密码</p>\n<p><code>docker exec -i nexus3 cat /nexus-data/admin.password</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314144935.png\" alt=\"image-20220314144935748\" style=\"zoom:67%;\" />\n\n<p>登录后更新密码</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145010.png\" alt=\"image-20220314145010632\" style=\"zoom:67%;\" />\n\n<h3 id=\"Nexus-制品库搭建\"><a href=\"#Nexus-制品库搭建\" class=\"headerlink\" title=\"Nexus 制品库搭建\"></a>Nexus 制品库搭建</h3><h4 id=\"搭建-Maven-私服（代理仓库）\"><a href=\"#搭建-Maven-私服（代理仓库）\" class=\"headerlink\" title=\"搭建 Maven 私服（代理仓库）\"></a>搭建 Maven 私服（代理仓库）</h4><p>默认安装 nexus 后会自动创建的</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145707.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<p>私服：将外网仓库代理到企业内部本地仓库中。图中的地址可以自定义修改</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145907.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<h4 id=\"搭建制品库（本地仓库）\"><a href=\"#搭建制品库（本地仓库）\" class=\"headerlink\" title=\"搭建制品库（本地仓库）\"></a>搭建制品库（本地仓库）</h4><p>新建 raw 类型的仓库</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145956.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<p>设置仓库的信息</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314150017.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<h3 id=\"上传制品\"><a href=\"#上传制品\" class=\"headerlink\" title=\"上传制品\"></a>上传制品</h3><p>在 nexus 中新建一个<code>maven-hostd</code>仓库，同时在 maven 的配置文件<code>settings.xml</code>中配置 maven-hostd 认证。具体配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span> maven-hosted <span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span> admin <span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span> wx123!@#<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意使用<code>mvn deploy</code>发布时，server.id=repository.id</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn deploy: deploy-file</span><br><span class=\"line\">-DgroupId = xxxxxx pom 中的 groupId</span><br><span class=\"line\">-DartifactId = xxxxxx pom 中的 artifactId</span><br><span class=\"line\">-Dversion = xxxxxx pom 中的版本号 version</span><br><span class=\"line\">-Dpackaging = xxxxxx pom 中打包方式</span><br><span class=\"line\">-Dfile = xxxxxx 本地文件</span><br><span class=\"line\">-Durl = xxxxxx 仓库 url</span><br><span class=\"line\">-DrepositoryId = xxxxxx 对应的是 setting.xml（认证）</span><br></pre></td></tr></table></figure>\n\n<p>直接读取 pom 文件（方便）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn deploy: deploy-file \\</span><br><span class=\"line\">-DgeneratePom = <span class=\"literal\">false</span> \\</span><br><span class=\"line\">-DrepositoryId = maven-hosted \\</span><br><span class=\"line\">-Durl = http://192.168.1.200:8081/repository/maven-hosted/ \\</span><br><span class=\"line\">-DpomFile = pom.xml \\</span><br><span class=\"line\">-Dfile = target/demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<p>自定义 pom 信息（灵活）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn deploy: deploy-file -Dmaven.test.skip = <span class=\"literal\">true</span>  \\</span><br><span class=\"line\">-Dfile = target/demo-0.0.1-SNAPSHOT.jar \\</span><br><span class=\"line\">-DgroupId = com.example \\</span><br><span class=\"line\">-DartifactId = demo \\</span><br><span class=\"line\">-Dversion = 1.1.1  \\</span><br><span class=\"line\">-Dpackaging = jar \\</span><br><span class=\"line\">-DrepositoryId = maven-hosted \\</span><br><span class=\"line\">-Durl = http://192.168.1.200:8081/repository/maven-hosted/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314152655.png\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314152725.png\" alt=\"img\"></p>\n<h3 id=\"Jenkins-安装-Nexus-插件\"><a href=\"#Jenkins-安装-Nexus-插件\" class=\"headerlink\" title=\"Jenkins 安装 Nexus 插件\"></a>Jenkins 安装 Nexus 插件</h3><p>安装<code>Nexus Artifact Upload</code>插件，使用片段生成器生成 DSL</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155314.png\" alt=\"img\"></p>\n<p><strong>发布制品</strong></p>\n<p>安装<code>Maven Artifact ChoiceListProvider (Nexus)</code>插件</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155850.png\" alt=\"images\"></p>\n<p>用户选择制品，在应用服务器通过 salt、ansible 下载制品并部署</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155911.png\" alt=\"img\"></p>\n<h2 id=\"Ansible-安装与配置\"><a href=\"#Ansible-安装与配置\" class=\"headerlink\" title=\"Ansible 安装与配置\"></a>Ansible 安装与配置</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS7.6 使用 YUM 安装</span></span><br><span class=\"line\">yum install ansible -y</span><br><span class=\"line\">ansible --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Anolis OS 8.9 使用 PIP3 安装</span></span><br><span class=\"line\"><span class=\"comment\"># 升级 Python 到 3.9.x</span></span><br><span class=\"line\"><span class=\"comment\"># 下载安装包并解压</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>www.python.org<span class=\"regexp\">/ftp/</span>python<span class=\"regexp\">/3.9.5/</span>Python-<span class=\"number\">3.9</span>.<span class=\"number\">5</span>.tgz</span><br><span class=\"line\">tar zxvf Python-<span class=\"number\">3.9</span>.<span class=\"number\">5</span>.tgz</span><br><span class=\"line\">cd Python-<span class=\"number\">3.9</span>.<span class=\"number\">5</span>/</span><br><span class=\"line\"><span class=\"comment\"># 安装所需的依赖</span></span><br><span class=\"line\">dnf -y install gcc zlib* libffi-devel</span><br><span class=\"line\"><span class=\"comment\"># 编译并安装</span></span><br><span class=\"line\">.<span class=\"regexp\">/configure --prefix=/u</span>sr<span class=\"regexp\">/local/</span>python3 --enable-optimizations</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"><span class=\"comment\"># 删除老的 python3 ，并链接新版本</span></span><br><span class=\"line\">rm -rf <span class=\"regexp\">/usr/</span>bin/python3</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/python3/</span>bin<span class=\"regexp\">/python3 /u</span>sr<span class=\"regexp\">/bin/</span>python3</span><br><span class=\"line\">rm -rf <span class=\"regexp\">/usr/</span>bin/pip3</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/python3/</span>bin<span class=\"regexp\">/pip3 /u</span>sr<span class=\"regexp\">/bin/</span>pip3</span><br><span class=\"line\"><span class=\"comment\"># 查看是否正确安装 python3</span></span><br><span class=\"line\">python3 --version</span><br><span class=\"line\">pip3 --version</span><br><span class=\"line\"><span class=\"comment\"># pip3 安装 ansible</span></span><br><span class=\"line\">python3 -m pip install --user ansible</span><br><span class=\"line\"><span class=\"comment\"># 同样进行链接</span></span><br><span class=\"line\">ln -sf <span class=\"regexp\">/root/</span>.local<span class=\"regexp\">/bin/</span>ansible  <span class=\"regexp\">/usr/</span>bin/ansible</span><br><span class=\"line\">ln -sf <span class=\"regexp\">/root/</span>.local<span class=\"regexp\">/bin/</span>ansible-config <span class=\"regexp\">/usr/</span>bin/ansible-config</span><br><span class=\"line\"><span class=\"comment\"># 查看已安装的软件包</span></span><br><span class=\"line\">python3 -m pip show ansible</span><br><span class=\"line\"><span class=\"comment\"># 检查 ansible 是否被正确安装</span></span><br><span class=\"line\">ansible --version </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-Ansible-主机列表\"><a href=\"#添加-Ansible-主机列表\" class=\"headerlink\" title=\"添加 Ansible 主机列表\"></a>添加 Ansible 主机列表</h3><h4 id=\"基于密钥连接\"><a href=\"#基于密钥连接\" class=\"headerlink\" title=\"基于密钥连接\"></a>基于密钥连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成私钥和公钥（已有则忽略）</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh &amp;&amp; ssh-keygen -t rsa</span><br><span class=\"line\"><span class=\"comment\"># 批量发送到管理机器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1,2,3,6&#125;; <span class=\"keyword\">do</span> ssh-copy-id -i 192.168.1.3<span class=\"variable\">$i</span> ; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-etc-ansible-hosts-文件\"><a href=\"#配置-etc-ansible-hosts-文件\" class=\"headerlink\" title=\"配置 /etc/ansible/hosts 文件\"></a>配置 /etc/ansible/hosts 文件</h4><figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[root@ansible ~]</span># vim /etc/ansible/hosts</span><br><span class=\"line\"># 方法一 主机+端口+密钥</span><br><span class=\"line\"><span class=\"string\">[webserver]</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.31:22</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.32</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.33</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.36</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 方法二 别名主机+端口+密钥</span><br><span class=\"line\"><span class=\"string\">[webserver]</span></span><br><span class=\"line\">node1 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">31</span> ansible_ssh_port=<span class=\"number\">22</span></span><br><span class=\"line\">node2 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">32</span> ansible_ssh_port=<span class=\"number\">22</span></span><br><span class=\"line\">node3 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">33</span> ansible_ssh_port=<span class=\"number\">22</span></span><br><span class=\"line\">node6 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">36</span> ansible_ssh_port=<span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试连通性\"><a href=\"#测试连通性\" class=\"headerlink\" title=\"测试连通性\"></a>测试连通性</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible webserver -m ping -o</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-NPM-包管理器\"><a href=\"#安装-NPM-包管理器\" class=\"headerlink\" title=\"安装 NPM 包管理器\"></a>安装 NPM 包管理器</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载 node 安装包</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>nodejs.org<span class=\"regexp\">/dist/</span>v14.<span class=\"number\">16.1</span>/node-v14.<span class=\"number\">16.1</span>-linux-x64.tar.xz</span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/usr/</span>local/node</span><br><span class=\"line\">tar xf node-v14.<span class=\"number\">16.1</span>-linux-x64.tar.xz -C <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/node/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑环境变量</span></span><br><span class=\"line\">vim <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\">export NODE_HOME =<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/node/</span>node-v14.<span class=\"number\">16.1</span>-linux-x64</span><br><span class=\"line\">export PATH = <span class=\"variable\">$NODE_HOME</span>/bin:$ PATH</span><br><span class=\"line\"><span class=\"comment\"># 生效</span></span><br><span class=\"line\">source <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\"><span class=\"comment\"># 查看是否安装成功</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置镜像</span></span><br><span class=\"line\">npm config set registry https:<span class=\"regexp\">//</span>registry.npm.taobao.org --global</span><br><span class=\"line\">npm config set disturl https:<span class=\"regexp\">//</span>npm.taobao.org/dist --global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置软链接</span></span><br><span class=\"line\">unlink <span class=\"regexp\">/usr/</span>bin/node</span><br><span class=\"line\">whereis node</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/node/</span>node-v14.<span class=\"number\">16.1</span>-linux-x64<span class=\"regexp\">/bin/</span>node <span class=\"regexp\">/usr/</span>bin/node</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Centos6-配置-YUM\"><a href=\"#Centos6-配置-YUM\" class=\"headerlink\" title=\"Centos6 配置 YUM\"></a>Centos6 配置 YUM</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># centos6 配置 yum</span></span><br><span class=\"line\">sed -i “s|enabled = <span class=\"number\">1</span>|enabled = <span class=\"number\">0</span>|g” <span class=\"regexp\">/etc/yum</span><span class=\"regexp\">/pluginconf.d/</span>fastestmirror.conf</span><br><span class=\"line\">mv <span class=\"regexp\">/etc/yum</span>.repos.d<span class=\"regexp\">/CentOS-Base.repo /</span>etc<span class=\"regexp\">/yum.repos.d/</span>CentOS-Base.repo.backup</span><br><span class=\"line\">curl -o <span class=\"regexp\">/etc/yum</span>.repos.d<span class=\"regexp\">/CentOS-Base.repo https:/</span><span class=\"regexp\">/www.xmpan.com/</span>Centos-<span class=\"number\">6</span>-Vault-Aliyun.repo</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Minio-文件服务安装与配置\"><a href=\"#Minio-文件服务安装与配置\" class=\"headerlink\" title=\"Minio 文件服务安装与配置\"></a>Minio 文件服务安装与配置</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二进制安装</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>dl.min.io<span class=\"regexp\">/server/mi</span>nio<span class=\"regexp\">/release/</span>linux-amd64/minio</span><br><span class=\"line\">chmod +x minio</span><br><span class=\"line\">MINIO_ROOT_USER = admin MINIO_ROOT_PASSWORD = password .<span class=\"regexp\">/minio server /m</span>nt/data --console-address <span class=\"string\">&quot;: 9001&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动</span></span><br><span class=\"line\">MINIO_ROOT_USER = admin MINIO_ROOT_PASSWORD =<span class=\"string\">&#x27;wx123!@#&#x27;</span> nohup <span class=\"regexp\">/u01/mi</span>nio-server<span class=\"regexp\">/minio server /u</span>01<span class=\"regexp\">/minio-server/</span>data --console-address <span class=\"string\">&quot;: 9001&quot;</span> &gt; <span class=\"regexp\">/u01/mi</span>nio-server/minio.log <span class=\"number\">2</span> &gt;&amp;<span class=\"number\">1</span> &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker 安装</span></span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/u01/mi</span>nio/data</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p <span class=\"number\">9000</span>:<span class=\"number\">9000</span> \\</span><br><span class=\"line\">  -p <span class=\"number\">9001</span>:<span class=\"number\">9001</span> \\</span><br><span class=\"line\">  --name minio \\</span><br><span class=\"line\">  -v <span class=\"regexp\">/u01/mi</span>nio<span class=\"regexp\">/data:/</span>data \\</span><br><span class=\"line\">  -v <span class=\"regexp\">/u01/mi</span>nio<span class=\"regexp\">/config:/</span>root/.minio \\</span><br><span class=\"line\">  -e <span class=\"string\">&quot;MINIO_ROOT_USER = q5H0EO1pbv&quot;</span> \\</span><br><span class=\"line\">  -e <span class=\"string\">&quot;MINIO_ROOT_PASSWORD = Wyk1dkn4Xp&quot;</span> \\</span><br><span class=\"line\">  -e MINIO_SERVER_URL = http:<span class=\"regexp\">//</span><span class=\"number\">192.168</span>.<span class=\"number\">88.200</span>:<span class=\"number\">9000</span> \\</span><br><span class=\"line\">  -e MINIO_BROWSER_REDIRECT_URL = http:<span class=\"regexp\">//</span><span class=\"number\">192.168</span>.<span class=\"number\">88.200</span>:<span class=\"number\">9001</span> \\</span><br><span class=\"line\">  quay.io<span class=\"regexp\">/minio/mi</span>nio server /data \\</span><br><span class=\"line\">  --address <span class=\"string\">&quot;: 9000&quot;</span> --console-address <span class=\"string\">&quot;: 9001&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GitStats-代码统计工具安装与配置\"><a href=\"#GitStats-代码统计工具安装与配置\" class=\"headerlink\" title=\"GitStats 代码统计工具安装与配置\"></a>GitStats 代码统计工具安装与配置</h2><h3 id=\"安装-Ruby-环境\"><a href=\"#安装-Ruby-环境\" class=\"headerlink\" title=\"安装 Ruby 环境\"></a>安装 Ruby 环境</h3><p>GitStats 需要 ruby-2.5 以上环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载：</span></span><br><span class=\"line\">wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压：</span></span><br><span class=\"line\">tar -zxvf ruby-2.5.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入目录：</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ruby-2.5.0</span><br><span class=\"line\"><span class=\"comment\"># 创建安装目录：</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /usr/local/ruby</span><br><span class=\"line\"><span class=\"comment\"># 安装必备依赖</span></span><br><span class=\"line\">yum -y install gcc openssl-devel make</span><br><span class=\"line\"><span class=\"comment\"># 配置并制定安装位置：</span></span><br><span class=\"line\">./configure --prefix =/usr/local/ruby</span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">make  &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">安装完成输入  ruby -v 提示/usr/bin/ruby: No such file or directory</span><br><span class=\"line\"></span><br><span class=\"line\">解决问题之前，先确认一个情况，输入命令 /usr/local/ruby/bin/ruby --version</span><br><span class=\"line\"></span><br><span class=\"line\">如果有版本信息，那说明 ruby 被装到了该目录下，而非系统认为的 /usr/bin/ruby</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法是在系统默认运行 ruby 的位置 [/usr/bin/ruby] 创建一个 symlink（相当于 win 下的快捷方式），指向 ruby 的实际位置 [/usr/local/ruby/bin/ruby]</span><br><span class=\"line\"></span><br><span class=\"line\">建立软链接</span><br><span class=\"line\">命令是  <span class=\"built_in\">ln</span> -s /usr/local/ruby/bin/ruby /usr/bin/ruby</span><br><span class=\"line\">再输入   ruby -v           OK 完成</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">附赠：要是安装 gem 也出现这种情况 [-bash: /usr/bin/gem: No such file or directory] 也是同理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/ruby/bin/gem /usr/bin/gem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前仓库地址</span></span><br><span class=\"line\">gem sources -l</span><br><span class=\"line\"><span class=\"comment\">#配置阿里云仓库源</span></span><br><span class=\"line\">gem sources -a http://mirrors.aliyun.com/rubygems/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-GitStats\"><a href=\"#安装-GitStats\" class=\"headerlink\" title=\"安装 GitStats\"></a>安装 GitStats</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 git_stats</span></span><br><span class=\"line\">gem install git_stats</span><br><span class=\"line\"><span class=\"comment\"># 安装 locate</span></span><br><span class=\"line\">yum install mlocate -y</span><br><span class=\"line\">updatedb</span><br><span class=\"line\"><span class=\"comment\"># find 命令查找 git_stats 目录</span></span><br><span class=\"line\">find / -name <span class=\"string\">&#x27;git_stats&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 进入到配置目录</span></span><br><span class=\"line\">cd <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/ruby/</span>lib<span class=\"regexp\">/ruby/g</span>ems<span class=\"regexp\">/2.5.0/g</span>ems<span class=\"regexp\">/git_stats-1.0.17/</span>config<span class=\"regexp\">/locales/</span></span><br><span class=\"line\">cp zh_tw_default.yml zh_default.yml</span><br><span class=\"line\"><span class=\"comment\">#修改以下 2 个 yml, 将最上边的 zh_tw 调整为 zh_cn，其余不变</span></span><br><span class=\"line\">vim zh_default.yml</span><br><span class=\"line\">vim zh.yml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若报以下错误</span></span><br><span class=\"line\">ERROR:  Error installing git_stats:</span><br><span class=\"line\">\tThe last version of nokogiri (~&gt; <span class=\"number\">1.6</span>) to support your Ruby &amp; RubyGems was <span class=\"number\">1.12</span>.<span class=\"number\">5</span>. Try installing it with `gem install nokogiri -v <span class=\"number\">1.12</span>.<span class=\"number\">5</span>` and then running the current command again</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">gem install nokogiri -v <span class=\"number\">1.12</span>.<span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量，放到末尾</span></span><br><span class=\"line\">vim <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\">PATH =<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/ruby/</span>bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">export PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使之生效</span></span><br><span class=\"line\">source <span class=\"regexp\">/etc/</span>profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-GitStats-生成报告\"><a href=\"#使用-GitStats-生成报告\" class=\"headerlink\" title=\"使用 GitStats 生成报告\"></a>使用 GitStats 生成报告</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个项目文件夹</span></span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/u01/gi</span>t-project</span><br><span class=\"line\"><span class=\"comment\"># 创建一个报告生成文件夹</span></span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/var/</span>www/git-report</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 git 将项目 clone 到项目文件夹中</span></span><br><span class=\"line\">git clone xxx.git</span><br><span class=\"line\"><span class=\"comment\"># 切换到项目根目录，使用 git_stats 生成报告</span></span><br><span class=\"line\">git_stats generate -o <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/git-report/</span>xxx --language zh_cn</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-nginx-访问\"><a href=\"#配置-nginx-访问\" class=\"headerlink\" title=\"配置 nginx 访问\"></a>配置 nginx 访问</h3><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">8098</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  <span class=\"number\">192.168.88.235</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"section\">location</span> /vansysboot &#123;</span><br><span class=\"line\">            <span class=\"attribute\">alias</span>   /var/www/git-report/vansysboot;</span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Prometheus-Grafana-监控平台\"><a href=\"#安装-Prometheus-Grafana-监控平台\" class=\"headerlink\" title=\"安装 Prometheus + Grafana 监控平台\"></a>安装 Prometheus + Grafana 监控平台</h2><blockquote>\n<p>官网：<a href=\"https://prometheus.io/\">https://prometheus.io/</a></p>\n<p>下载地址：<a href=\"https://prometheus.io/download/\">https://prometheus.io/download/</a></p>\n</blockquote>\n<h3 id=\"安装-Prometheus-Server\"><a href=\"#安装-Prometheus-Server\" class=\"headerlink\" title=\"安装 Prometheus Server\"></a>安装 Prometheus Server</h3><p><code>Prometheus</code> 基于 <code>Golang</code> 编写，编译后的软件包，不依赖于任何的第三方依赖。只需要下载对应平台的二进制包，解压并且添加基本的配置即可正常启动 <code>Prometheus Server</code>。</p>\n<h4 id=\"上传安装包\"><a href=\"#上传安装包\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>上传 <code>prometheus-2.29.1.linux-amd64.tar.gz</code> 到虚拟机的 <code>/opt</code> 目录</p>\n<h4 id=\"解压安装包-2\"><a href=\"#解压安装包-2\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf prometheus-2.37.0.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> prometheus-2.37.0.linux-amd64.tar.gz prometheus-2.37.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改配置文件-prometheus-yml\"><a href=\"#修改配置文件-prometheus-yml\" class=\"headerlink\" title=\"修改配置文件 prometheus.yml\"></a>修改配置文件 prometheus.yml</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> prometheus-2.37.0</span><br><span class=\"line\">vim prometheus.yml</span><br></pre></td></tr></table></figure>\n\n<p>在 scrape_configs 配置项下添加配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加 PushGateway 监控配置</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;pushgateway&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;192.168.88.231:9091&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">instance:</span> <span class=\"string\">pushgateway</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 Node Exporter 监控配置</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;node exporter&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;192.168.88.230:9100&#x27;</span>, <span class=\"string\">&#x27;192.168.88.231:9100&#x27;</span>, <span class=\"string\">&#x27;192.168.88.232:9100&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置说明：</strong></p>\n<ol>\n<li><p><strong>global 配置块</strong>：控制 Prometheus 服务器的全局配置</p>\n<ul>\n<li>scrape_interval：配置拉取数据的时间间隔，默认为 1 分钟。</li>\n<li>evaluation_interval：规则验证（生成 alert）的时间间隔，默认为 1 分钟。</li>\n</ul>\n</li>\n<li><p><strong>rule_files 配置块</strong>：规则配置文件</p>\n</li>\n<li><p><strong>scrape_configs 配置块</strong>：配置采集目标相关， prometheus 监视的目标。Prometheus自身的运行信息可以通过  HTTP 访问，所以 Prometheus 可以监控自己的运行数据。</p>\n<ul>\n<li><p>job_name：监控作业的名称</p>\n</li>\n<li><p>static_configs：表示静态目标配置，就是固定从某个 target 拉取数据</p>\n</li>\n<li><p>targets ： 指 定 监 控 的 目 标 ， 其 实 就 是 从 哪 儿 拉 取 数 据 。 Prometheus 会从 <a href=\"http://ip:9090/metrics\">http://ip:9090/metrics</a> 上拉取数据。</p>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p><em>Prometheus 是可以在运行时自动加载配置的。启动时需要添加：–web.enable-lifecycle</em></p>\n<p><em>重载配置命令：<code>curl -X POST http://127.0.0.1:9090/-/reload</code></em></p>\n</blockquote>\n<h3 id=\"安装-Node-Exporter\"><a href=\"#安装-Node-Exporter\" class=\"headerlink\" title=\"安装 Node Exporter\"></a>安装 Node Exporter</h3><p>在 <code>Prometheus</code> 的架构设计中，<code>Prometheus Server</code> 主要负责数据的收集，存储并且对外提供数据查询支持，而实际的监控样本数据的收集则是由 <code>Exporter</code> 完成。因此为了能够监控到某些东西，如主机的 <code>CPU</code> 使用率，我们需要使用到 <code>Exporter</code>。<code>Prometheus</code> 周期性的从 <code>Exporter</code> 暴露的 HTTP 服务地址（通常是 <code>/metrics</code> ）拉取监控样本数据。</p>\n<p><code>Exporter</code> 可以是一个相对开放的概念，其可以是一个独立运行的程序独立于监控目标以外，也可以是直接内置在监控目标中。只要能够向 <code>Prometheus</code> 提供标准格式的监控样本数据即可。</p>\n<p>为了能够采集到主机的运行指标如 CPU, 内存，磁盘等信息。我们可以使用 <code>Node Exporter</code>。<code>Node Exporter</code> 同样采用 <code>Golang</code> 编写，并且不存在任何的第三方依赖，只需要下载，解压即可运行。</p>\n<h4 id=\"上传安装包-1\"><a href=\"#上传安装包-1\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>上传 <code>node_exporter-1.4.0-rc.0.linux-amd64.tar.gz</code> 到虚拟机的 <code>/opt</code> 目录</p>\n<h4 id=\"解压安装包-3\"><a href=\"#解压安装包-3\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf node_exporter-1.4.0-rc.0.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> node_exporter-1.4.0-rc.0.linux-amd64.tar.gz node_exporter-1.4.0-rc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动并访问端点查看是否成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行启动命令</span></span><br><span class=\"line\">./node_exporter</span><br></pre></td></tr></table></figure>\n\n<p>浏览器输入：<a href=\"http://ip:9100/metrics%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%BD%93%E5%89%8D\">http://ip:9100/metrics，可以看到当前</a> node exporter 获取到的当前主机的所有监控数据。</p>\n<h4 id=\"节点分发\"><a href=\"#节点分发\" class=\"headerlink\" title=\"节点分发\"></a>节点分发</h4><p>将解压的目录分发到要监控的节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">xsync node_exporter-1.4.0-rc</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加文件分发脚本</strong></p>\n<p>创建脚本文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /usr/bin/xsync</span><br></pre></td></tr></table></figure>\n\n<p>脚本内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 判断参数是否足够</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> Not Enounh Arguement!</span><br><span class=\"line\"> <span class=\"built_in\">exit</span>;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历所有的机器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> 192.168.88.230 192.168.88.231 192.168.88.232 </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> ==== ==== ====  <span class=\"variable\">$host</span> ============</span><br><span class=\"line\"> <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 判断文件是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -e <span class=\"variable\">$file</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"comment\"># 获取父目录</span></span><br><span class=\"line\">   pdir = $(<span class=\"built_in\">cd</span> -P $(<span class=\"built_in\">dirname</span> <span class=\"variable\">$file</span>); <span class=\"built_in\">pwd</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 获取当前目录的名称</span></span><br><span class=\"line\">   fname = $(<span class=\"built_in\">basename</span> $ file)</span><br><span class=\"line\">   ssh <span class=\"variable\">$host</span> <span class=\"string\">&quot;mkdir -p $ pdir &quot;</span></span><br><span class=\"line\">   rsync -av <span class=\"variable\">$pdir</span>/$ fname <span class=\"variable\">$host</span>:$ pdir</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$file</span> does not exists!</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"> <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>若报错 <code>bash: rsync: command not found</code>，请在目标机器上安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Centos</span></span><br><span class=\"line\">yum install rsync -y </span><br></pre></td></tr></table></figure>\n\n\n\n<p>赋予执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/bin/xsync</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行条件</strong></p>\n<p>使用 ssh 密钥验证登录，这样在传输文件时就不需要进行二次验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 ssh 私钥（若有这忽略）</span></span><br><span class=\"line\">ssh-keygen -f ~/.ssh/id_rsa -N <span class=\"string\">&#x27;&#x27;</span> </span><br><span class=\"line\"><span class=\"comment\"># 循环把公钥传递到服务器上，免密登录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> 192.168.88.230 192.168.88.231 192.168.88.232  </span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">  ssh-copy-id <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据提示输入密码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h4><h5 id=\"centos6\"><a href=\"#centos6\" class=\"headerlink\" title=\"centos6\"></a>centos6</h5><ol>\n<li>创建自启动脚本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/init.d/node_exporter</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#\t/etc/rc.d/init.d/node_exporter</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 80 80</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># config: /etc/prometheus/node_exporter.conf</span></span><br><span class=\"line\"><span class=\"comment\"># pidfile: /var/run/prometheus/node_exporter.pid</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Source function library.</span></span><br><span class=\"line\">. /etc/init.d/functions</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">RETVAL = 0</span><br><span class=\"line\">PROG = <span class=\"string\">&quot;node_exporter&quot;</span></span><br><span class=\"line\">DAEMON_SYSCONFIG =/etc/sysconfig/<span class=\"variable\">$&#123;PROG&#125;</span></span><br><span class=\"line\">DAEMON =/usr/bin/<span class=\"variable\">$&#123;PROG&#125;</span> <span class=\"comment\">#要把安装目录下/u01/module/node_exporter/node_exporter 可执行文件拷贝到/usr/bin 目录下</span></span><br><span class=\"line\">PID_FILE =/var/run/prometheus/<span class=\"variable\">$&#123;PROG&#125;</span>.pid</span><br><span class=\"line\">LOCK_FILE =/var/lock/subsys/<span class=\"variable\">$&#123;PROG&#125;</span></span><br><span class=\"line\">LOG_FILE =/var/log/prometheus/node_exporter.log</span><br><span class=\"line\">DAEMON_USER = <span class=\"string\">&quot;prometheus&quot;</span></span><br><span class=\"line\">FQDN =$(hostname)</span><br><span class=\"line\">GOMAXPROCS =$(grep -c ^processor /proc/cpuinfo)</span><br><span class=\"line\"> </span><br><span class=\"line\">. <span class=\"variable\">$&#123;DAEMON_SYSCONFIG&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> check_status &gt; /dev/null; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;node_exporter is already running&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot; Starting node_exporter: &quot;</span></span><br><span class=\"line\">  daemonize -u <span class=\"variable\">$&#123;DAEMON_USER&#125;</span> -p <span class=\"variable\">$&#123;PID_FILE&#125;</span> -l <span class=\"variable\">$&#123;LOCK_FILE&#125;</span> -a -e <span class=\"variable\">$&#123;LOG_FILE&#125;</span> -o <span class=\"variable\">$&#123;LOG_FILE&#125;</span> <span class=\"variable\">$&#123;DAEMON&#125;</span> <span class=\"variable\">$&#123;ARGS&#125;</span></span><br><span class=\"line\">  RETVAL =$?</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot; Stopping node_exporter: &quot;</span></span><br><span class=\"line\">    killproc -p <span class=\"variable\">$&#123;PID_FILE&#125;</span> -d 10 <span class=\"variable\">$&#123;DAEMON&#125;</span></span><br><span class=\"line\">    RETVAL =$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    [ <span class=\"variable\">$RETVAL</span> = 0 ] &amp;&amp; <span class=\"built_in\">rm</span> -f <span class=\"variable\">$&#123;LOCK_FILE&#125;</span> <span class=\"variable\">$&#123;PID_FILE&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_status</span></span>() &#123;</span><br><span class=\"line\">    status -p <span class=\"variable\">$&#123;PID_FILE&#125;</span> <span class=\"variable\">$&#123;DAEMON&#125;</span></span><br><span class=\"line\">    RETVAL =$?</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span> &quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">\tcheck_status</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload|force-reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        N =/etc/init.d/<span class=\"variable\">$&#123;NAME&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot; Usage: <span class=\"variable\">$N</span> &#123;start|stop|status|restart|force-reload&#125;&quot;</span> &gt;&amp;2</span><br><span class=\"line\">        RETVAL = 2</span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$&#123;RETVAL&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编辑etc/sysconfig/node_exporter</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>sysconfig/node_exporter  </span><br><span class=\"line\"><span class=\"comment\">##添加如下内容</span></span><br><span class=\"line\">ARGS = <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建启动脚本中对应文件和目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##开机脚本赋权</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /etc/init.d/node_exporter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##拷贝可执行文件到/usr/bin/</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /u01/node_exporter-1.4.0-rc/node_exporter /usr/bin/node_exporter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 添加用户组 </span></span><br><span class=\"line\">groupadd -r prometheus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /usr/hostonnet/prometheus/</span><br><span class=\"line\">useradd -r -g prometheus -s /sbin/nologin -d /usr/hostonnet/prometheus/ -c <span class=\"string\">&quot;prometheus Daemons&quot;</span> prometheus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 家目录修改属主</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R prometheus: prometheus /usr/hostonnet/prometheus/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建运行目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/run/prometheus/</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/run/prometheus/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建 pid 文件，并赋权</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> /var/run/prometheus/node_exporter.pid</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/run/prometheus/node_exporter.pid </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建日志目录，并创建日志文件，赋权，修改属主</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/log/prometheus/</span><br><span class=\"line\"><span class=\"built_in\">touch</span> /var/log/prometheus/node_exporter.log</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/log/prometheus</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/log/prometheus/node_exporter.log</span><br><span class=\"line\"><span class=\"built_in\">chown</span> prometheus: prometheus /var/log/prometheus/node_exporter.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量执行语句</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /etc/init.d/node_exporter &amp;&amp; <span class=\"built_in\">cp</span> /u01/node_exporter-1.4.0-rc/node_exporter /usr/bin/node_exporter &amp;&amp; groupadd -r prometheus &amp;&amp; <span class=\"built_in\">mkdir</span> -p /usr/hostonnet/prometheus/ &amp;&amp; useradd -r -g prometheus -s /sbin/nologin -d /usr/hostonnet/prometheus/ -c <span class=\"string\">&quot;prometheus Daemons&quot;</span> prometheus &amp;&amp; <span class=\"built_in\">chown</span> -R prometheus: prometheus /usr/hostonnet/prometheus/ &amp;&amp; <span class=\"built_in\">mkdir</span> -p /var/run/prometheus/ &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/run/prometheus/ &amp;&amp; <span class=\"built_in\">touch</span> /var/run/prometheus/node_exporter.pid &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/run/prometheus/node_exporter.pid &amp;&amp; <span class=\"built_in\">mkdir</span> -p /var/log/prometheus/ &amp;&amp; <span class=\"built_in\">touch</span> /var/log/prometheus/node_exporter.log &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/log/prometheus &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/log/prometheus/node_exporter.log &amp;&amp; <span class=\"built_in\">chown</span> prometheus: prometheus /var/log/prometheus/node_exporter.log</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>安装daemonize</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -ivh daemonize-1.6.0-1.el6.rf.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行node_exporter</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动 node_exporter 并设置开机自启动</span></span><br><span class=\"line\">cd <span class=\"regexp\">/etc/i</span>nit.d<span class=\"regexp\">/ &amp;&amp; ./</span>node_exporter start &amp;&amp; chkconfig node_exporter on  </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"centos7\"><a href=\"#centos7\" class=\"headerlink\" title=\"centos7\"></a>centos7</h5><ol>\n<li>创建 service 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /usr/lib/systemd/system/node_exporter.service</span><br></pre></td></tr></table></figure>\n\n<p>文件内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span> = node_export</span><br><span class=\"line\"><span class=\"attr\">Documentation</span> = https://github.com/prometheus/node_exporter</span><br><span class=\"line\"><span class=\"attr\">After</span> = network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Type</span> = simple</span><br><span class=\"line\"><span class=\"attr\">User</span> = root</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span> = /u01/node_exporter-<span class=\"number\">1.4</span>.<span class=\"number\">0</span>-rc/node_exporter</span><br><span class=\"line\"><span class=\"attr\">Restart</span> = <span class=\"literal\">on</span>-failure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span> = multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>分发文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">xsync /usr/lib/systemd/system/node_exporter.service</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>设置开机自启并启动（所有机器都执行）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开机自启</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> node_exporter.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">sudo systemctl start node_exporter.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Alertmanager\"><a href=\"#安装-Alertmanager\" class=\"headerlink\" title=\"安装 Alertmanager\"></a>安装 Alertmanager</h3><h4 id=\"上传安装包-2\"><a href=\"#上传安装包-2\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>上传 <code>alertmanager-0.24.0.linux-amd64.tar.gz</code> 到虚拟机的 <code>/opt</code> 目录</p>\n<h4 id=\"解压安装包-4\"><a href=\"#解压安装包-4\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf alertmanager-0.24.0.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> alertmanager-0.24.0.linux-amd64.tar.gz alertmanager-0.24.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-Prometheus-Server-和-Alertmanager\"><a href=\"#启动-Prometheus-Server-和-Alertmanager\" class=\"headerlink\" title=\"启动 Prometheus Server 和 Alertmanager\"></a>启动 Prometheus Server 和 Alertmanager</h3><h4 id=\"在-Prometheus-Server-目录下执行启动命令\"><a href=\"#在-Prometheus-Server-目录下执行启动命令\" class=\"headerlink\" title=\"在 Prometheus Server 目录下执行启动命令\"></a>在 Prometheus Server 目录下执行启动命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./prometheus --config.file = prometheus.yml --web.enable-lifecycle &gt; ./prometheus.log 2 &gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-Alertmanager-目录下启动\"><a href=\"#在-Alertmanager-目录下启动\" class=\"headerlink\" title=\"在 Alertmanager 目录下启动\"></a>在 Alertmanager 目录下启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./alertmanager --config.file = alertmanager.yml &gt; ./alertmanager.log 2 &gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Grafana-数据展示\"><a href=\"#安装-Grafana-数据展示\" class=\"headerlink\" title=\"安装 Grafana 数据展示\"></a>安装 Grafana 数据展示</h3><p>grafana 是一款采用 Go 语言编写的开源应用，主要用于大规模指标数据的可视化展现，是网络架构和应用分析中最流行的时序数据展示工具，目前已经支持绝大部分常用的时序数据库。</p>\n<blockquote>\n<p>下载地址：<a href=\"https://grafana.com/grafana/download\">https://grafana.com/grafana/download</a></p>\n</blockquote>\n<h4 id=\"上传安装包-3\"><a href=\"#上传安装包-3\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>将 <code>grafana-enterprise-9.0.6.linux-amd64.tar.gz</code> 上传至 <code>/opt</code> 目录下</p>\n<h4 id=\"解压安装包-5\"><a href=\"#解压安装包-5\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf grafana-enterprise-9.0.6.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> grafana-enterprise-9.0.6.linux-amd64.tar.gz grafana-enterprise-9.0.6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动 grafana 服务</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./bin/grafana-server web &gt; ./grafana.log 2 &gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>打开浏览器，访问：<code>http://ip:3000</code>，默认用户名/密码：<code>admin</code></li>\n</ol>\n<h3 id=\"Grafana-与-Prometheus-数据对接\"><a href=\"#Grafana-与-Prometheus-数据对接\" class=\"headerlink\" title=\"Grafana 与 Prometheus 数据对接\"></a>Grafana 与 Prometheus 数据对接</h3><h4 id=\"添加-Prometheus-数据源\"><a href=\"#添加-Prometheus-数据源\" class=\"headerlink\" title=\"添加 Prometheus 数据源\"></a>添加 Prometheus 数据源</h4><ol>\n<li><code>配置 -&gt; 数据源 -&gt; 添加数据源</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804165746.png\" alt=\"image-20220804165739264\"></p>\n<ol start=\"2\">\n<li>选择 <code>Prometheus</code> 数据源</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804165940.png\" alt=\"image-20220804165940226\"></p>\n<ol start=\"3\">\n<li>配置 Prometheus Server 地址</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804170315.png\" alt=\"image-20220804170315289\"></p>\n<ol start=\"4\">\n<li>点击下方的 Save&amp;Test</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804170439.png\" alt=\"image-20220804170439669\"></p>\n<ol start=\"5\">\n<li>点击 Back 返回即可，可以看到 Data Sources 页面，出现了添加的 Prometheus：</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804171225.png\" alt=\"image-20220804171224982\"></p>\n<h4 id=\"添加仪表盘-Dashboard\"><a href=\"#添加仪表盘-Dashboard\" class=\"headerlink\" title=\"添加仪表盘 Dashboard\"></a>添加仪表盘 Dashboard</h4><p>手动一个个添加 Dashboard 比较繁琐，Grafana 社区鼓励用户分享 Dashboard，通过 <a href=\"https://grafana.com/grafana/dashboards\">https://grafana.com/grafana/dashboards</a> 网站，可以找到大量可直接使用的 Dashboard 模板。</p>\n<p>Grafana 中所有的 Dashboard 通过 JSON 进行共享，下载并且导入这些 JSON 文件，就可以直接使用这些已经定义好的 Dashboard。</p>\n<ol>\n<li>选择一款中文版本的 <code>Node Exporter</code> 仪表板</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173336.png\" alt=\"image-20220804173336648\"></p>\n<ol start=\"2\">\n<li>下载模板 json 文件</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173609.png\" alt=\"image-20220804173609120\"></p>\n<ol start=\"3\">\n<li>在 Grafana 中导入模板</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173822.png\" alt=\"image-20220804173822051\"></p>\n<ol start=\"4\">\n<li>导入之后选择 <code>Prometheus</code> 数据源即可</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804174154.png\" alt=\"image-20220804174153940\"></p>\n<ol start=\"5\">\n<li>导入成功之后就能看到炫酷的仪表板</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804174504.png\" alt=\"image-20220804174503814\"></p>\n<h3 id=\"安装-OracleDB-Exporter-监控-Oracle-数据库\"><a href=\"#安装-OracleDB-Exporter-监控-Oracle-数据库\" class=\"headerlink\" title=\"安装 OracleDB Exporter 监控 Oracle 数据库\"></a>安装 OracleDB Exporter 监控 Oracle 数据库</h3><blockquote>\n<p>GitHub 仓库：<a href=\"https://github.com/iamseth/oracledb_exporter\">iamseth/oracledb_exporter: Prometheus Oracle database exporter. (github.com)</a></p>\n<p>Grafana 面板：<a href=\"https://grafana.com/grafana/dashboards/11121-oracledb/\">Oracledb监控-性能与表空间 | Grafana Labs</a></p>\n<p>以下步骤是采用 Docker 进行安装</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、拉取最新版本镜像</span></span><br><span class=\"line\">docker pull ghcr.io/iamseth/oracledb_exporter: 0.5.0</span><br><span class=\"line\"><span class=\"comment\"># 2、使用 docker run 命令启动</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：1、--link 连接 oracle 数据库容器，这样在 oracledb_exporter 容器中可以直接使用容器名字代替 IP 地址进行通信</span></span><br><span class=\"line\"><span class=\"comment\"># \t   2、若密码中含有 !@#$ 等特殊字符，可以使用 URLEncode 进行转义</span></span><br><span class=\"line\">docker run -d --name oracledb_exporter --<span class=\"built_in\">link</span> = oracle11g -p 9161:9161 -e <span class=\"string\">&#x27;DATA_SOURCE_NAME = oracle://sys: 123456@oracle11g: 1521/orcl&#x27;</span> ghcr.io/iamseth/oracledb_exporter: 0.5.0</span><br><span class=\"line\"><span class=\"comment\"># 3、使用 culr 访问指标情况</span></span><br><span class=\"line\">curl -l http://127.0.0.1:9161/metric</span><br><span class=\"line\"><span class=\"comment\"># 4、接入 Prometheus</span></span><br><span class=\"line\">在 prometheus.yml 中添加一段配置：</span><br><span class=\"line\">  - job_name: oracledb_exporter</span><br><span class=\"line\">    metrics_path: /metrics</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [<span class=\"string\">&#x27;chxdb21.vansys.com: 15090&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Docker-安装服务\"><a href=\"#使用-Docker-安装服务\" class=\"headerlink\" title=\"使用 Docker 安装服务\"></a>使用 Docker 安装服务</h2><h3 id=\"Docker-安装-ClickHouse-数据库\"><a href=\"#Docker-安装-ClickHouse-数据库\" class=\"headerlink\" title=\"Docker 安装 ClickHouse 数据库\"></a>Docker 安装 ClickHouse 数据库</h3><blockquote>\n<p>前提：请先安装好 Docker 容器服务（<a href=\"https://blog.kyire.site/2022/04/02/2f74bb89.html#%E5%AE%89%E8%A3%85-Docker-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\">安装 Docker 容器服务</a>）</p>\n</blockquote>\n<ol>\n<li>创建目录并更改权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/clickhouse/&#123;data, config, <span class=\"built_in\">log</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 777 /u01/clickhouse/&#123;data, config, <span class=\"built_in\">log</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull yandex/clickhouse-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建临时容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -d --name = clickhouse-server \\</span><br><span class=\"line\">--<span class=\"built_in\">ulimit</span> nofile = 262144:262144 \\</span><br><span class=\"line\">-p 8123:8123 -p 9009:9009 -p 9000:9000 \\</span><br><span class=\"line\">yandex/clickhouse-server: latest</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>复制临时容器内配置文件到宿主机</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> clickhouse-server:/etc/clickhouse-server/config.xml /u01/clickhouse/config/config.xml</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> clickhouse-server:/etc/clickhouse-server/users.xml /u01/clickhouse/config/users.xml</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>停掉临时容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> -f clickhouse-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>default用户配置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 sha256sum 密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 随机生成密码</span></span><br><span class=\"line\">PASSWORD = $(<span class=\"built_in\">base64</span> &lt; /dev/urandom | <span class=\"built_in\">head</span> -c8); <span class=\"built_in\">echo</span> <span class=\"string\">&quot;$ PASSWORD &quot;</span>; <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;<span class=\"variable\">$PASSWORD</span> &quot;</span> | <span class=\"built_in\">sha256sum</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">会输出明码和 SHA256 密码（每个人生成的不一样）</span><br><span class=\"line\">jQ+72k17</span><br><span class=\"line\">a70b3173bfef01aff0d2472fd1f86a4be647aed4e0624f1b6c867a69072e1273</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成指定密码 wx123456</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;wx123456&quot;</span>; <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;wx123456&quot;</span> | <span class=\"built_in\">sha256sum</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">wx123456</span><br><span class=\"line\">37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开 users.xml 文件 default 用户设置密码为 123456</span></span><br><span class=\"line\">vim /u01/clickhouse/config/users.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将文件中 &lt;password&gt; &lt;/password&gt; 改为以下内容</span></span><br><span class=\"line\">&lt;password_sha256_hex&gt; 37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86 &lt;/password_sha256_hex&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 default 用户改为只读</span></span><br><span class=\"line\"><span class=\"comment\"># 将 &lt;profile&gt; default &lt;/profile&gt; 改为以下内容</span></span><br><span class=\"line\">&lt;profile&gt; <span class=\"built_in\">readonly</span> &lt;/profile&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>新增root用户</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 root 用户密码 wx123456</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;wx123456&quot;</span>; <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;wx123456&quot;</span> | <span class=\"built_in\">sha256sum</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">wx123456</span><br><span class=\"line\">37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开 users.xml 文件 </span></span><br><span class=\"line\">vim /u01/clickhouse/config/users.xml</span><br><span class=\"line\"><span class=\"comment\"># 在 &lt;/default&gt; 下一行添加以下内容</span></span><br><span class=\"line\">&lt;root&gt;</span><br><span class=\"line\">&lt;password_sha256_hex&gt; 37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86 &lt;/password_sha256_hex&gt;</span><br><span class=\"line\">    &lt;networks incl=<span class=\"string\">&quot;networks&quot;</span> replace=<span class=\"string\">&quot;replace&quot;</span>&gt;</span><br><span class=\"line\">            &lt;ip&gt;::/0 &lt;/ip&gt;</span><br><span class=\"line\">    &lt;/networks&gt;</span><br><span class=\"line\">    &lt;profile&gt; default &lt;/profile&gt;</span><br><span class=\"line\">    &lt;quota&gt; default &lt;/quota&gt;</span><br><span class=\"line\">&lt;/root&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>部署clickhouse-server</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name clickhouse-server \\</span><br><span class=\"line\">--privileged = <span class=\"literal\">true</span> --restart = always \\</span><br><span class=\"line\">--<span class=\"built_in\">ulimit</span> nofile = 262144:262144 \\</span><br><span class=\"line\">-p 8123:8123 \\</span><br><span class=\"line\">-p 9000:9000 \\</span><br><span class=\"line\">-p 9009:9009 \\</span><br><span class=\"line\">-v /u01/clickhouse/data:/var/lib/clickhouse: rw \\</span><br><span class=\"line\">-v /u01/clickhouse/log:/var/log/clickhouse-server: rw \\</span><br><span class=\"line\">-v /u01/clickhouse/config/config.xml:/etc/clickhouse-server/config.xml \\</span><br><span class=\"line\">-v /u01/clickhouse/config/users.xml:/etc/clickhouse-server/users.xml \\</span><br><span class=\"line\">yandex/clickhouse-server: latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker-安装-ElasticSearch-搜索引擎\"><a href=\"#Docker-安装-ElasticSearch-搜索引擎\" class=\"headerlink\" title=\"Docker 安装 ElasticSearch 搜索引擎\"></a>Docker 安装 ElasticSearch 搜索引擎</h3><blockquote>\n<p>前提：请先安装好 Docker 容器服务（<a href=\"https://blog.kyire.site/2022/04/02/2f74bb89.html#%E5%AE%89%E8%A3%85-Docker-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\">安装 Docker 容器服务</a>）</p>\n</blockquote>\n<ol>\n<li>创建目录、配置文件并修改权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 es 相关挂载目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /hd/docker/es/&#123;config, data, plugins&#125;</span><br><span class=\"line\"><span class=\"comment\"># 创建文件</span></span><br><span class=\"line\">vi /hd/docker/es/config/elasticsearch.yml</span><br><span class=\"line\">http.host: 0.0.0.0</span><br><span class=\"line\">http.cors.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">http.cors.allow-origin: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">http.cors.allow-headers: Authorization</span><br><span class=\"line\">xpack.security.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">xpack.security.transport.ssl.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置目录权限，否则会报错</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./config/elasticsearch.yml</span><br><span class=\"line\"><span class=\"comment\"># 设置为目录 777 权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 777 /hd/docker/es</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull elasticsearch: 7.17.4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --name es --restart = always -p 9200:9200 -p 9300:9300 \\</span><br><span class=\"line\">-e <span class=\"string\">&quot;ES_JAVA_OPTS =-Xms512m -Xmx1024m&quot;</span> \\</span><br><span class=\"line\">-v /hd/docker/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\</span><br><span class=\"line\">-v /hd/docker/es/data:/usr/share/elasticsearch/data \\</span><br><span class=\"line\">-v /hd/docker/es/plugins:/usr/share/elasticsearch/plugins \\</span><br><span class=\"line\">-d elasticsearch: 7.17.4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>配置 es 访问密码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入容器内部</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it es /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置密码命令</span></span><br><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>访问网页 <code>http://localhost:9200</code>（账号密码：<code>elastic</code>/<code>123456</code>）</li>\n</ol>\n<h3 id=\"Docker-安装-Nginx-Proxy-Manager-代理管理平台\"><a href=\"#Docker-安装-Nginx-Proxy-Manager-代理管理平台\" class=\"headerlink\" title=\"Docker 安装 Nginx Proxy Manager 代理管理平台\"></a>Docker 安装 Nginx Proxy Manager 代理管理平台</h3><blockquote>\n<p>前提：请先安装好 Docker 容器服务（<a href=\"https://blog.kyire.site/2022/04/02/2f74bb89.html#%E5%AE%89%E8%A3%85-Docker-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\">安装 Docker 容器服务</a>）</p>\n</blockquote>\n<ol>\n<li>创建 <code>docker-compose.yml</code></li>\n</ol>\n<p><strong>使用 network_mode: host 与宿主机共享网络</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;2691432189/nginx-proxy-manager-monitor-zh: latest&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>部署运行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>登录管理平台</li>\n</ol>\n<p>容器运行成功后，使用浏览器访问 <code>81</code> 端口。</p>\n<p><a href=\"http://127.0.0.1:81/\">http://127.0.0.1:81</a></p>\n<p>默认管理员信息：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Email:</span>    admin@example.com</span><br><span class=\"line\"><span class=\"symbol\">Password:</span> changeme</span><br></pre></td></tr></table></figure>\n\n<p>登录之后系统会要求修改详细信息和密码</p>\n<ol start=\"4\">\n<li>快速升级</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br><span class=\"line\">docker-compose pull</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker-安装-Redis-服务\"><a href=\"#Docker-安装-Redis-服务\" class=\"headerlink\" title=\"Docker 安装 Redis 服务\"></a>Docker 安装 Redis 服务</h3><ol>\n<li>拉取 <code>Redis</code> 镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取最新版本</span></span><br><span class=\"line\">docker pull redis</span><br><span class=\"line\"><span class=\"comment\"># 指定版本号</span></span><br><span class=\"line\">docker pull redis: 5.0.8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>启动 <code>Redis</code> 容器</li>\n</ol>\n<blockquote>\n<p>建议使用配置文件启动，先从 Redis 官网下载标准配置文件（也可以自己准备一个）</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建配置文件存放目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/software/redis/conf</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /u01/software/redis/conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载 redis.conf 配置文件</span></span><br><span class=\"line\">wget http://download.redis.io/redis-stable/redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 给配置文件授权</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\">1、注释 <span class=\"built_in\">bind</span> 127.0.0.1，开启远程访问</span><br><span class=\"line\">2、关闭保护模式 protected-mode no</span><br><span class=\"line\">3、设置密码 requirepass 123456</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 Redis 容器</span></span><br><span class=\"line\">docker run -p 6379:6379 --name redis --restart = always \\</span><br><span class=\"line\">-v /u01/software/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /u01/software/redis/data:/data \\</span><br><span class=\"line\">-itd redis redis-server /etc/redis/redis.conf \\</span><br><span class=\"line\">--appendonly <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux-下静默安装-Oracle-19c\"><a href=\"#Linux-下静默安装-Oracle-19c\" class=\"headerlink\" title=\"Linux 下静默安装 Oracle 19c\"></a>Linux 下静默安装 Oracle 19c</h2><h3 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><h4 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h4><p>官网下载：<a href=\"https://www.oracle.com/database/technologies/oracle19c-linux-downloads.html\">下载地址 | 点击跳转</a></p>\n<h4 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h4><table>\n<thead>\n<tr>\n<th>事项</th>\n<th>详情</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作系统</td>\n<td>Centos 7.9</td>\n</tr>\n<tr>\n<td>数据库版本</td>\n<td>19.3.0</td>\n</tr>\n<tr>\n<td>CPU</td>\n<td>Intel(R) Xeon(R) Silver 4210R CPU @ 2.40GHz</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>32GB</td>\n</tr>\n<tr>\n<td>Swap</td>\n<td>15GB</td>\n</tr>\n</tbody></table>\n<h3 id=\"准备安装环境\"><a href=\"#准备安装环境\" class=\"headerlink\" title=\"准备安装环境\"></a>准备安装环境</h3><h4 id=\"服务器环境检查\"><a href=\"#服务器环境检查\" class=\"headerlink\" title=\"服务器环境检查\"></a>服务器环境检查</h4><ol>\n<li>检查缺少了那些依赖包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm --query --queryformat <span class=\"string\">&quot;%&#123;NAME&#125;-%&#123;VERSION&#125;.%&#123;RELEASE&#125; (%&#123;ARCH&#125;)\\n&quot;</span> bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel make sysstat elfutils-libelf elfutils-libelf-devel fontconfig-devel libxcb smartmontools libX11 libXau libXtst libXrender libXrender-devel</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 yum 安装缺少的依赖</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y <span class=\"variable\">$NOT_INSTALLED</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建-Oracle-用户组\"><a href=\"#创建-Oracle-用户组\" class=\"headerlink\" title=\"创建 Oracle 用户组\"></a>创建 Oracle 用户组</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd oinstall &amp;&amp; groupadd dba &amp;&amp; groupadd asmdba &amp;&amp; groupadd backupdba &amp;&amp; groupadd dgdba &amp;&amp; groupadd kmdba &amp;&amp; groupadd racdba &amp;&amp; groupadd oper &amp;&amp; useradd -g oinstall -G dba, asmdba, backupdba, dgdba, kmdba, racdba, oper -m oracle</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-hosts-文件\"><a href=\"#配置-hosts-文件\" class=\"headerlink\" title=\"配置 hosts 文件\"></a>配置 hosts 文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置系统内核参数\"><a href=\"#配置系统内核参数\" class=\"headerlink\" title=\"配置系统内核参数\"></a>配置系统内核参数</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 /etc/sysctl.conf 文件</span></span><br><span class=\"line\">vi /etc/sysctl.conf</span><br><span class=\"line\">fs.aio-max-nr = 1048576</span><br><span class=\"line\">fs.file-max = 6815744</span><br><span class=\"line\">kernel.shmall = 16451328</span><br><span class=\"line\">kernel.shmmax = 33692319744</span><br><span class=\"line\">kernel.shmmni = 4096</span><br><span class=\"line\">kernel.sem = 250 32000 100 128</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class=\"line\">net.core.rmem_default = 262144</span><br><span class=\"line\">net.core.rmem_max = 4194304</span><br><span class=\"line\">net.core.wmem_default = 262144</span><br><span class=\"line\">net.core.wmem_max = 1048576</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 sysctl -p 使配置生效</span></span><br><span class=\"line\">/sbin/sysctl -p</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关闭-SELINUX-跟防火墙\"><a href=\"#关闭-SELINUX-跟防火墙\" class=\"headerlink\" title=\"关闭 SELINUX 跟防火墙\"></a>关闭 SELINUX 跟防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 /etc/selinux/config 中 SELINUX 配置是否是 disabled</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/selinux/config</span><br><span class=\"line\"><span class=\"comment\"># This file controls the state of SELinux on the system.</span></span><br><span class=\"line\"><span class=\"comment\"># SELINUX = can take one of these three values:</span></span><br><span class=\"line\"><span class=\"comment\">#     enforcing - SELinux security policy is enforced.</span></span><br><span class=\"line\"><span class=\"comment\">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class=\"line\"><span class=\"comment\">#     disabled - No SELinux policy is loaded.</span></span><br><span class=\"line\">SELINUX = disabled</span><br><span class=\"line\"><span class=\"comment\"># SELINUXTYPE = can take one of three two values:</span></span><br><span class=\"line\"><span class=\"comment\">#     targeted - Targeted processes are protected,</span></span><br><span class=\"line\"><span class=\"comment\">#     minimum - Modification of targeted policy. Only selected processes are protected. </span></span><br><span class=\"line\"><span class=\"comment\">#     mls - Multi Level Security protection.</span></span><br><span class=\"line\">SELINUXTYPE = targeted </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看防火墙状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭防火墙服务</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\"># 停止防火墙服务开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置用户环境\"><a href=\"#配置用户环境\" class=\"headerlink\" title=\"配置用户环境\"></a>配置用户环境</h4><ol>\n<li>配置 oracle 用户环境变量</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换 oracle 用户</span></span><br><span class=\"line\">su - oracle</span><br><span class=\"line\"><span class=\"comment\"># 编辑 .bash_profile 文件，在文件末尾添加</span></span><br><span class=\"line\">vi .bash_profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_BASE =/u01/app/oracle</span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_HOME =/u01/app/oracle/product/19.3.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH = <span class=\"variable\">$PATH</span>:$ ORACLE_HOME/bin:/usr/local/bin</span><br><span class=\"line\"><span class=\"comment\"># 修改为具体的机器名称 /etc/hosts 配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_HOSTNAME = xxx</span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_SID = orcl</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH = <span class=\"variable\">$ORACLE_HOME</span>/lib:$ ORACLE_HOME/rdbms/lib:<span class=\"variable\">$ORACLE_HOME</span>/network/lib:/lib:/usr/lib</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH = <span class=\"variable\">$ORACLE_HOME</span>/jlib:$ ORACLE_HOME/rdbms/jlib:<span class=\"variable\">$ORACLE_HOME</span>/network/jlib</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改用户的 shell 限制</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 /etc/security/limits.conf  文件末尾添加</span></span><br><span class=\"line\">vi /etc/security/limits.conf </span><br><span class=\"line\">@oinstall soft nofile 2048</span><br><span class=\"line\">@oinstall hard nofile 65536</span><br><span class=\"line\">@oinstall soft <span class=\"built_in\">nproc</span> 16384</span><br><span class=\"line\">@oinstall soft stack 10240</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><p>响应文件模板存放位置：</p>\n<ul>\n<li>软件：/u01/app/oracle/product/19.5.0/install/response/db_install.rsp</li>\n<li>监听：/u01/app/oracle/product/19.5.0/assistants/netca/netca.rsp</li>\n<li>建库：/u01/app/oracle/product/19.5.0/assistants/dbca/dbca.rsp</li>\n</ul>\n<h4 id=\"解压安装包-6\"><a href=\"#解压安装包-6\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 oracle 安装目录（root 用户）</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/app/oracle/product/19.3.0</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R oracle: oinstall /u01/app</span><br><span class=\"line\"><span class=\"comment\"># 切换到 oracle 用户解压</span></span><br><span class=\"line\">su - oracle</span><br><span class=\"line\">unzip LINUX.X64_193000_db_home.zip -d <span class=\"variable\">$ORACLE_HOME</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令行静默安装\"><a href=\"#命令行静默安装\" class=\"headerlink\" title=\"命令行静默安装\"></a>命令行静默安装</h4><h4 id=\"配置响应文件\"><a href=\"#配置响应文件\" class=\"headerlink\" title=\"配置响应文件\"></a>配置响应文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份 db_install.rsp 文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_HOME</span>/install/response</span><br><span class=\"line\"><span class=\"built_in\">cp</span> db_install.rsp db_install.rsp.bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑 db_install.rsp 文件，修改以下参数</span></span><br><span class=\"line\">oracle.install.option = INSTALL_DB_SWONLY</span><br><span class=\"line\">UNIX_GROUP_NAME = oinstall</span><br><span class=\"line\">INVENTORY_LOCATION =/u01/app/oraInventory</span><br><span class=\"line\">ORACLE_HOME =/u01/app/oracle/product/19.3.0</span><br><span class=\"line\">ORACLE_BASE =/u01/app/oracle</span><br><span class=\"line\">oracle.install.db.InstallEdition = EE</span><br><span class=\"line\">oracle.install.db.OSDBA_GROUP = dba</span><br><span class=\"line\">oracle.install.db.OSOPER_GROUP = oper</span><br><span class=\"line\">oracle.install.db.OSBACKUPDBA_GROUP = backupdba</span><br><span class=\"line\">oracle.install.db.OSDGDBA_GROUP = dgdba</span><br><span class=\"line\">oracle.install.db.OSKMDBA_GROUP = kmdba</span><br><span class=\"line\">oracle.install.db.OSRACDBA_GROUP = racdba</span><br><span class=\"line\">oracle.install.db.rootconfig.executeRootScript = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行安装\"><a href=\"#执行安装\" class=\"headerlink\" title=\"执行安装\"></a>执行安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./runInstaller -silent -responseFile <span class=\"variable\">$ORACLE_HOME</span>/install/response/db_install.rsp</span><br></pre></td></tr></table></figure>\n\n<p><strong>若出现安装错误，请根据提示查看日志，分析错误原因</strong></p>\n<h4 id=\"安装成功根据提示使用-root-用户执行脚本\"><a href=\"#安装成功根据提示使用-root-用户执行脚本\" class=\"headerlink\" title=\"安装成功根据提示使用 root 用户执行脚本\"></a>安装成功根据提示使用 root 用户执行脚本</h4><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh <span class=\"regexp\">/u01/</span>app<span class=\"regexp\">/oraInventory/</span>orainstRoot.sh</span><br><span class=\"line\">sh <span class=\"regexp\">/u01/</span>app<span class=\"regexp\">/oracle/</span>product<span class=\"regexp\">/19.3.0/</span>root.sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看相关执行日志，若没有错误，表示已经安装完成</strong></p>\n<h3 id=\"创建数据库实例\"><a href=\"#创建数据库实例\" class=\"headerlink\" title=\"创建数据库实例\"></a>创建数据库实例</h3><h4 id=\"配置监听\"><a href=\"#配置监听\" class=\"headerlink\" title=\"配置监听\"></a>配置监听</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建监听</span></span><br><span class=\"line\">netca /silent /responseFile <span class=\"variable\">$ORACLE_HOME</span>/assistants/netca/netca.rsp</span><br><span class=\"line\"><span class=\"comment\"># 查看监听状态</span></span><br><span class=\"line\">lsnrctl status</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份 dbca.rsp 响应文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_HOME</span>/assistants/dbca</span><br><span class=\"line\"><span class=\"built_in\">cp</span> dbca.rsp dbca.rsp.bak</span><br><span class=\"line\"><span class=\"comment\"># 配置 dbca.rsp 响应文件</span></span><br><span class=\"line\">vi dbca.rsp</span><br><span class=\"line\"><span class=\"comment\"># 主要修改以下参数</span></span><br><span class=\"line\">gdbName = orcl</span><br><span class=\"line\">sid = orcl</span><br><span class=\"line\">databaseConfigType = SI</span><br><span class=\"line\">templateName = General_Purpose.dbc</span><br><span class=\"line\">sysPassword = Qwer1234</span><br><span class=\"line\">systemPassword = Qwer1234</span><br><span class=\"line\">emConfiguration = DBEXPRESS</span><br><span class=\"line\">dbsnmpPassword = Qwer1234</span><br><span class=\"line\">datafileDestination =/u01/app/oracle/oradata</span><br><span class=\"line\">characterSet = ZHS16GBK</span><br><span class=\"line\">totalMemory = 8192</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行安装-1\"><a href=\"#执行安装-1\" class=\"headerlink\" title=\"执行安装\"></a>执行安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dbca -silent -createDatabase -responseFile <span class=\"variable\">$ORACLE_HOME</span>/assistants/dbca/dbca.rsp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接 sqlplus</span></span><br><span class=\"line\">sqlplus / as sysdba</span><br><span class=\"line\"><span class=\"comment\"># 查看实例的运行状态</span></span><br><span class=\"line\">select instance_name, status from v<span class=\"variable\">$instance</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完全卸载-Oracle-数据库\"><a href=\"#完全卸载-Oracle-数据库\" class=\"headerlink\" title=\"完全卸载 Oracle 数据库\"></a>完全卸载 Oracle 数据库</h3><h5 id=\"停止数据库服务\"><a href=\"#停止数据库服务\" class=\"headerlink\" title=\"停止数据库服务\"></a>停止数据库服务</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接 sqlplus</span></span><br><span class=\"line\">sqlplus / as sysdba</span><br><span class=\"line\"><span class=\"comment\"># 停止数据库服务</span></span><br><span class=\"line\">shutdown immediate;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"停止数据库监听\"><a href=\"#停止数据库监听\" class=\"headerlink\" title=\"停止数据库监听\"></a>停止数据库监听</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止数据库监听</span></span><br><span class=\"line\">lsnrctl stop</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-deinstall-工具进行卸载\"><a href=\"#使用-deinstall-工具进行卸载\" class=\"headerlink\" title=\"使用 deinstall 工具进行卸载\"></a>使用 deinstall 工具进行卸载</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行 deinstall 工具，按提示进行操作</span></span><br><span class=\"line\">/u01/app/oracle/product/19.3.0/deinstall/deinstall</span><br><span class=\"line\"><span class=\"comment\"># 执行结束后按提示使用 root 用户执行脚本</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/oraInst.loc</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /opt/ORCLfmap</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -r /etc/oratab</span><br></pre></td></tr></table></figure>\n\n","categories":["Linux"],"tags":["技巧","笔记"]},{"title":"Docker 容器-基础篇","url":"/2021/12/12/e33c148b.html","content":"<h2 id=\"Docker-概述\"><a href=\"#Docker-概述\" class=\"headerlink\" title=\"Docker 概述\"></a>Docker 概述</h2><h3 id=\"Docker-为什么会出现？\"><a href=\"#Docker-为什么会出现？\" class=\"headerlink\" title=\"Docker 为什么会出现？\"></a>Docker 为什么会出现？</h3><blockquote>\n<p>环境切换/配置麻烦</p>\n</blockquote>\n<p>一般一个产品的生命周期中，可能会存在多个环境：</p>\n<ul>\n<li>开发环境</li>\n<li>测试环境</li>\n<li>生产环境</li>\n</ul>\n<p>其实我们在编程的过程中，很大一部分时间都花在 <code>环境</code> 上：</p>\n<ul>\n<li>比如重装系统之后，想要运行 <code>Jar/War</code> 包，就必须在系统里装上 <code>JDK</code> . <code>Tomcat</code>. <code>MySQL</code> 等环境 ，并配置好相应的环境变量</li>\n<li>以前生产环境和测试环境完全是两套不同的环境，可能会出现：==代码在测试环境跑没问题，到生产环境就出各种错！==</li>\n<li>在学习 <code>分布式/集群</code> 项目时，需要搭建多个环境，以前使用 <code>Vmware</code> 搭建费时费力，且对电脑的配置要求较高</li>\n</ul>\n<blockquote>\n<p>应用之间需要隔离</p>\n</blockquote>\n<ul>\n<li>假设，我只有一台服务器，我写了两个应用（网站），都部署在一台服务器里，倘若其中一个应用出现了问题，导致 CPU 跑满到 100%，那么另一个应用也会受影响！</li>\n<li>同一个服务器下端口冲突. JRE 版本冲突…</li>\n</ul>\n<p>Docker 的出现就为以上问题带来了解决方案：</p>\n<p>Docerk 的思想就来自于集装箱！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211212012101.png\"></p>\n<h3 id=\"Docker-是什么？\"><a href=\"#Docker-是什么？\" class=\"headerlink\" title=\"Docker 是什么？\"></a>Docker 是什么？</h3><h4 id=\"Docker-基本介绍\"><a href=\"#Docker-基本介绍\" class=\"headerlink\" title=\"Docker 基本介绍\"></a>Docker 基本介绍</h4><p><code>Docker</code> 是一个开源的应用容器引擎，基于 <code>Go 语言</code> 并遵从 <code>Apache2.0</code> 协议开源。</p>\n<p><code>Docker</code> 可以让开发者打包他们的应用以及依赖包到一个轻量级. 可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app），更重要的是容器性能开销极低。</p>\n<p><code>Docker</code> 从 <code>17.03</code> 版本之后分为 <code>CE（Community Edition: 社区版）</code> 和 <code>EE（Enterprise Edition: 企业版）</code>，我们用社区版就可以了。</p>\n<p>官方文档：<a href=\"https://docs.docker.com/\">https://docs.docker.com/</a></p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>Web 应用的自动化打包和发布。</li>\n<li>自动化测试和持续集成. 发布。</li>\n<li>在服务型环境中部署和调整数据库或其他的后台应用。</li>\n<li>从头编译或者扩展现有的 <code>OpenShift</code> 或 <code>Cloud Foundry</code> 平台来搭建自己的 <code>PaaS</code> 环境。</li>\n</ul>\n<h4 id=\"Docker-的优势\"><a href=\"#Docker-的优势\" class=\"headerlink\" title=\"Docker 的优势\"></a>Docker 的优势</h4><ul>\n<li>更快速地进行应用的交付和部署</li>\n<li>更便携的升级和扩容</li>\n<li>更简单的系统运维</li>\n<li>更高效的计算机资源利用</li>\n</ul>\n<blockquote>\n<p>总结：解决了==运行环境和配置问题==的==软件容器==，方便做持续集成并有助于整体发布的容器虚拟化技术。</p>\n</blockquote>\n<h3 id=\"虚拟化技术和容器化技术的区别\"><a href=\"#虚拟化技术和容器化技术的区别\" class=\"headerlink\" title=\"虚拟化技术和容器化技术的区别\"></a>虚拟化技术和容器化技术的区别</h3><ul>\n<li>虚拟化技术：<ol>\n<li>资源占用多</li>\n<li>冗余步骤多</li>\n<li>启动很慢</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>容器化技术：容器化技术不是模拟的一个完整的操作系统</li>\n</ul>\n<p>比较 Docker 和虚拟机的不同：</p>\n<ol>\n<li>传统虚拟机，虚拟出硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件。</li>\n<li>Docker 容器内的应用直接运行在宿主机的内容，容器是没有自己的内核的，也没有虚拟硬件。</li>\n<li>每个容器都是相互隔离的，每个容器都有属于自己的文件系统，互不影响。</li>\n</ol>\n<h3 id=\"Docker-的基本组成\"><a href=\"#Docker-的基本组成\" class=\"headerlink\" title=\"Docker 的基本组成\"></a>Docker 的基本组成</h3><p>Docker 的基本组成图如下：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211212134734.png\" alt=\"image-20211212134734666\"></p>\n<ul>\n<li><p><strong>镜像（image）</strong></p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">Docker</span> 镜像（<span class=\"built_in\">Image</span>）就是一个只读的模板。镜像可以用来创建 <span class=\"variable\">Docker</span> 容器，一个镜像可以创建很多容器。就好似 <span class=\"variable\">Java</span> 中的类和对象，类就是镜像，容器就是对象！</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>容器（container）</strong></p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"code\"><pre><span class=\"line\">Docker 利用容器（<span class=\"keyword\">Container</span>）独立运行的一个或一组应用。容器就用镜像创建的运行实例。</span><br><span class=\"line\"></span><br><span class=\"line\">它可以被启动. 开始. 停止. 删除。每个容器都是相互隔离的，保证安全的平台。</span><br><span class=\"line\"></span><br><span class=\"line\">可以把容器看作是一个简易版的 Linux 环境（包括root用户权限. 进程空间. 用户空间和网络空间）和运行在其中的应用程序。</span><br><span class=\"line\"></span><br><span class=\"line\">容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那层是可读可写的。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p><strong>仓库（repository）</strong></p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"code\"><pre><span class=\"line\">仓库（Repository）是集中存放镜像文件的场所。</span><br><span class=\"line\"></span><br><span class=\"line\">仓库（Repository）和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（<span class=\"built_in\">tag</span>）。</span><br><span class=\"line\"></span><br><span class=\"line\">仓库分为公开仓库（<span class=\"keyword\">Public</span>）和私有仓库（<span class=\"keyword\">Private</span>）两种形式。</span><br><span class=\"line\"></span><br><span class=\"line\">最大的公开仓库是 Docker Hub（https:<span class=\"comment\">//hub.docker.com/），存放了数量庞大的镜像供用户下载。</span></span><br><span class=\"line\">国内最大的公开仓库包括阿里云. 网易云等。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h2><h3 id=\"Docker-的安装与卸载\"><a href=\"#Docker-的安装与卸载\" class=\"headerlink\" title=\"Docker 的安装与卸载\"></a>Docker 的安装与卸载</h3><blockquote>\n<p>环境准备</p>\n</blockquote>\n<ol>\n<li>需要会一点点的 Linux 的基础</li>\n<li>CentOS 7</li>\n<li>使用 Xshell 连接远程服务器进行操作！</li>\n</ol>\n<blockquote>\n<p>环境查看</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统内核是 3.10 以上的</span></span><br><span class=\"line\">[root@ouwen666 ~]# uname -r</span><br><span class=\"line\">3.10.0-1062.18.1.el7.x86_64</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">系统版本 centOS7</span></span><br><span class=\"line\">[root@ouwen666 ~]# cat /etc/os-release</span><br><span class=\"line\">NAME=&quot;CentOS Linux&quot;</span><br><span class=\"line\">VERSION=&quot;7 (Core)&quot;</span><br><span class=\"line\">ID=&quot;centos&quot;</span><br><span class=\"line\">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class=\"line\">VERSION_ID=&quot;7&quot;</span><br><span class=\"line\">PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;</span><br><span class=\"line\">ANSI_COLOR=&quot;0;31&quot;</span><br><span class=\"line\">CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;</span><br><span class=\"line\">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class=\"line\">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;</span><br><span class=\"line\">CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;</span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;</span><br><span class=\"line\">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>安装</p>\n</blockquote>\n<p>帮助文档：<a href=\"https://docs.docker.com/engine/install/centos/\">Docker 官方帮助文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 卸载旧的版本</span></span><br><span class=\"line\">yum list installed | grep docker</span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 安装yum-utils包（提供 yum-config-manager 程序）</span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. 设置镜像的仓库</span></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo # 默认是国外的，十分慢！</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建议使用阿里云的镜像地址</span></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新yum软件包索引</span></span><br><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4. 安装docker相关的 docker-ce docker-compose （默认为最新版）</span></span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装指定版本</span></span><br><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span><br><span class=\"line\">sudo yum install docker-ce-20.10.13 docker-ce-cli-20.10.13 containerd.io docker-compose-plugin</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5. 启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6. 使用docker version查看是否安装成功</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211212144008.png\" alt=\"image-20211212144007872\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">7. 启动docker-hello-world</span></span><br><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211212144259.png\" alt=\"image-20211212144259750\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">8. 查看下载的这个hello-world镜像</span></span><br><span class=\"line\">[root@ouwen666 /]# docker images</span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">hello-world   latest    feb5d9fea6a5   2 months ago   13.3kB</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>卸载 Docker</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 卸载依赖</span></span><br><span class=\"line\">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 删除资源 docker的默认工作路径</span></span><br><span class=\"line\">rm -rf /var/lib/docker</span><br><span class=\"line\">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"阿里云镜像加速\"><a href=\"#阿里云镜像加速\" class=\"headerlink\" title=\"阿里云镜像加速\"></a>阿里云镜像加速</h3><ul>\n<li><p>登录阿里云，找到容器镜像服务</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218143348.png\" alt=\"image-20211218143146762\"></p>\n</li>\n<li><p>找到镜像加速地址</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218143621.png\" alt=\"image-20211218143621304\"></p>\n</li>\n<li><p>配置使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://alq7pwwu.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"回顾-HelloWorld-流程\"><a href=\"#回顾-HelloWorld-流程\" class=\"headerlink\" title=\"回顾 HelloWorld 流程\"></a>回顾 HelloWorld 流程</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218144212.png\" alt=\"image-20211218144212215\"></p>\n<h3 id=\"底层原理\"><a href=\"#底层原理\" class=\"headerlink\" title=\"底层原理\"></a>底层原理</h3><h4 id=\"Docker-是怎么工作的？\"><a href=\"#Docker-是怎么工作的？\" class=\"headerlink\" title=\"Docker 是怎么工作的？\"></a>Docker 是怎么工作的？</h4><p>Docker 是一个 Client - Server 结构的系统，Docker 的守护进程运行在主机上。通过 Socket 从客户端访问！</p>\n<p>DockerServer 接收到 Docker - Client 的指令，就会执行这个命令！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218144701.png\" alt=\"image-20211218144701740\"></p>\n<h4 id=\"Docker-为什么比-VM-快？\"><a href=\"#Docker-为什么比-VM-快？\" class=\"headerlink\" title=\"Docker 为什么比 VM 快？\"></a>Docker 为什么比 VM 快？</h4><ol>\n<li><p>Docker 有着比虚拟机更少的抽象层</p>\n</li>\n<li><p>Docker 利用的是宿主机的内核，VM 需要的是 Guest OS（操作系统）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218144918.png\" alt=\"image-20211218144918851\"></p>\n<p>新建一个容器的时候，Docker 不需要像虚拟机一样重新加载一个操作系统内核，避免不必要的消耗。</p>\n</li>\n</ol>\n<h2 id=\"Docker-的常用命令\"><a href=\"#Docker-的常用命令\" class=\"headerlink\" title=\"Docker 的常用命令\"></a>Docker 的常用命令</h2><h3 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示docker的版本信息</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示docker的系统信息，包括镜像和容器</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">帮助命令</span></span><br><span class=\"line\">docker 命令 --help</span><br></pre></td></tr></table></figure>\n\n<p>帮助文档地址：<a href=\"https://docs.docker.com/engine/reference/commandline/cli/\">Docker 官方帮助文档</a></p>\n<h3 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h3><h4 id=\"列出本机所有镜像\"><a href=\"#列出本机所有镜像\" class=\"headerlink\" title=\"列出本机所有镜像\"></a>列出本机所有镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ouwen666 ~]# docker images</span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">hello-world   latest    feb5d9fea6a5   2 months ago   13.3kB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解释</span></span><br><span class=\"line\">REPOSITORY  镜像的仓库源</span><br><span class=\"line\">TAG         镜像的标签</span><br><span class=\"line\">IMAGE ID    镜像的ID</span><br><span class=\"line\">CREATED     镜像的创建时间</span><br><span class=\"line\">SIZE        镜像的大小</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可选项</span></span><br><span class=\"line\">  -a， --all             # 列出所有镜像</span><br><span class=\"line\">  -q， --quiet           # 只显示镜像的ID</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"搜索镜像\"><a href=\"#搜索镜像\" class=\"headerlink\" title=\"搜索镜像\"></a>搜索镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ouwen666 ~]# docker search mysql</span><br><span class=\"line\">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">mysql                             MySQL is a widely used， open-source relation…   11833     [OK]</span><br><span class=\"line\">mariadb                           MariaDB Server is a high performing open sou…   4505      [OK]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">可选项，通过收藏来过滤</span></span><br><span class=\"line\">--filter=STARS=3000</span><br><span class=\"line\">[root@ouwen666 ~]# docker search mysql --filter=STARS=3000</span><br><span class=\"line\">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class=\"line\">mysql     MySQL is a widely used， open-source relation…   11833     [OK]</span><br><span class=\"line\">mariadb   MariaDB Server is a high performing open sou…   4505      [OK]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载镜像 docker pull 镜像名[:tag]</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker pull mysql</span><br><span class=\"line\">Using default tag: latest   # 如果写 tag，默认就是 latest</span><br><span class=\"line\">latest: Pulling from library/mysql</span><br><span class=\"line\">ffbb094f4f9e: Pull complete # 分层下载，docker image 的核心 联合文件系统</span><br><span class=\"line\">df186527fc46: Pull complete</span><br><span class=\"line\">fa362a6aa7bd: Pull complete</span><br><span class=\"line\">5af7cb1a200e: Pull complete</span><br><span class=\"line\">949da226cc6d: Pull complete</span><br><span class=\"line\">bce007079ee9: Pull complete</span><br><span class=\"line\">eab9f076e5a3: Pull complete</span><br><span class=\"line\">8a57a7529e8d: Pull complete</span><br><span class=\"line\">b1ccc6ed6fc7: Pull complete</span><br><span class=\"line\">b4af75e64169: Pull complete</span><br><span class=\"line\">3aed6a9cd681: Pull complete</span><br><span class=\"line\">23390142f76f: Pull complete</span><br><span class=\"line\">Digest: sha256:ff9a288d1ecf4397967989b5d1ec269f7d9042a46fc8bc2c3ae35458c1a26727  # 签名</span><br><span class=\"line\">Status: Downloaded newer image for mysql:latest</span><br><span class=\"line\">docker.io/library/mysql:latest  # 真实地址</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">等价与它</span></span><br><span class=\"line\">docker pull mysql</span><br><span class=\"line\">docker pull docker.io/library/mysql:latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定版本下载</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker pull mysql:5.7</span><br><span class=\"line\">5.7: Pulling from library/mysql</span><br><span class=\"line\">ffbb094f4f9e: Already exists</span><br><span class=\"line\">df186527fc46: Already exists</span><br><span class=\"line\">fa362a6aa7bd: Already exists</span><br><span class=\"line\">5af7cb1a200e: Already exists</span><br><span class=\"line\">949da226cc6d: Already exists</span><br><span class=\"line\">bce007079ee9: Already exists</span><br><span class=\"line\">eab9f076e5a3: Already exists</span><br><span class=\"line\">c7b24c3f27af: Pull complete</span><br><span class=\"line\">6fc26ff6705a: Pull complete</span><br><span class=\"line\">bec5cdb5e7f7: Pull complete</span><br><span class=\"line\">6c1cb25f7525: Pull complete</span><br><span class=\"line\">Digest: sha256:d1cc87a3bd5dc07defc837bc9084f748a130606ff41923f46dec1986e0dc828d</span><br><span class=\"line\">Status: Downloaded newer image for mysql:5.7</span><br><span class=\"line\">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218170934.png\" alt=\"image-20211218170934412\"></p>\n<h4 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ouwen666 ~]# docker rmi -f 镜像ID  # 删除指定的镜像</span><br><span class=\"line\">[root@ouwen666 ~]# docker rmi -f 镜像ID 镜像ID 镜像ID 镜像ID  # 删除多个镜像</span><br><span class=\"line\">[root@ouwen666 ~]# docker rmi -f $(docker images -aq)   # 删除全部的镜像</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h3><p>有了镜像才可以创建容器：linux，下载一个 centos 镜像来学习</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull centos</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建容器并启动\"><a href=\"#新建容器并启动\" class=\"headerlink\" title=\"新建容器并启动\"></a>新建容器并启动</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run [可选参数] image</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">参数说明</span></span><br><span class=\"line\">--name=&quot;Name&quot;  # 容器名字 为容器指定一个名称</span><br><span class=\"line\">-d             # 后台方式运行</span><br><span class=\"line\">-it            # 使用交互方式运行，并分配一个伪终端，等待交互</span><br><span class=\"line\">-p             # 指定容器的端口  -p 8080:8080</span><br><span class=\"line\">  -p ip:主机端口:容器端口 (常用)</span><br><span class=\"line\">  -p 主机端口:容器端口 (常用)</span><br><span class=\"line\">  -p 容器端口</span><br><span class=\"line\">-P             # 随机指定端口</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试一下 启动并进入容器</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker run -it centos /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看容器内的centos，官方镜像是一个基础版本，很多命令都是不完善的！</span></span><br><span class=\"line\">[root@0226b99be9ff /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从容器中退出主机</span></span><br><span class=\"line\">[root@0226b99be9ff /]# exit</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列出所有运行的容器\"><a href=\"#列出所有运行的容器\" class=\"headerlink\" title=\"列出所有运行的容器\"></a>列出所有运行的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker ps 命令</span></span><br><span class=\"line\">-a    # 列出当前正在运行的容器+带出历史运行过的容器</span><br><span class=\"line\">-l    # 显示最近创建的容器</span><br><span class=\"line\">-n=?  # 显示最近创建n个容器</span><br><span class=\"line\">-q    # 只显示容器的编号</span><br><span class=\"line\">[root@ouwen666 ~]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class=\"line\">[root@ouwen666 ~]# docker ps -a</span><br><span class=\"line\">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                             NAMES</span><br><span class=\"line\">0226b99be9ff   centos         &quot;/bin/bash&quot;   3 minutes ago   Exited (0) About a minute ago</span><br><span class=\"line\">55a3ece5f682   feb5d9fea6a5   &quot;/hello&quot;      6 days ago      Exited (0) 6 days ago</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"退出容器\"><a href=\"#退出容器\" class=\"headerlink\" title=\"退出容器\"></a>退出容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">exit    # 直接停止容器并退出</span><br><span class=\"line\">Ctrl + P + Q  # 容器不停止并退出</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm 容器ID  # 删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -f</span><br><span class=\"line\">docker rm -f $(docker ps -aq)  # 删除所有的容器</span><br><span class=\"line\">docker ps -a -q|xargs docker rm  #删除所有的容器</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动和停止容器\"><a href=\"#启动和停止容器\" class=\"headerlink\" title=\"启动和停止容器\"></a>启动和停止容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start 容器ID       # 启动容器</span><br><span class=\"line\">docker restart 容器ID     # 重启容器</span><br><span class=\"line\">docker stop 容器ID        # 停止容器</span><br><span class=\"line\">docker kill 容器ID        # 强制停止当前容器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用其他命令【重要】\"><a href=\"#常用其他命令【重要】\" class=\"headerlink\" title=\"常用其他命令【重要】\"></a>常用其他命令【重要】</h3><h4 id=\"后台启动容器\"><a href=\"#后台启动容器\" class=\"headerlink\" title=\"后台启动容器\"></a>后台启动容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令 docker run -d 镜像名！</span></span><br><span class=\"line\">[root@ouwen666 /]# docker run -d centos</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">问题 docker ps，发现 centos 停止了</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">常见的坑：docker容器使用后台运行，就必须要有要给前台进程，docker发现没有应用，就会自动停止</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker logs -f -t --tail 10 容器ID</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">写一段shell脚本，不停的打印输出</span></span><br><span class=\"line\">[root@ouwen666 /]# docker run -d centos /bin/sh -c &quot;while true;do echo helloworld;sleep 1;done&quot;</span><br><span class=\"line\">5fff272a8948f573264a09ac17d437b6d7424a5b03604b4191666f252993a6f3</span><br><span class=\"line\"></span><br><span class=\"line\">[root@ouwen666 /]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS</span><br><span class=\"line\">5fff272a8948   centos    &quot;/bin/sh -c &#x27;while t…&quot;   5 seconds ago   Up 5 seconds</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示日志</span></span><br><span class=\"line\">-tf             # 显示所有的日志</span><br><span class=\"line\">--tail number   # 显示指定行数的日志</span><br><span class=\"line\">[root@ouwen666 /]# docker logs -tf --tail 10 5fff272a8948</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器中的进程信息\"><a href=\"#查看容器中的进程信息\" class=\"headerlink\" title=\"查看容器中的进程信息\"></a>查看容器中的进程信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令 docker top 容器ID</span></span><br><span class=\"line\">[root@ouwen666 /]# docker top 5fff272a8948</span><br><span class=\"line\">UID                 PID                 PPID                C                   STIME</span><br><span class=\"line\">root                326                 32457               0                   17:46</span><br><span class=\"line\">root                32457               32438               0                   17:42</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看镜像-容器的详细信息\"><a href=\"#查看镜像-容器的详细信息\" class=\"headerlink\" title=\"查看镜像/容器的详细信息\"></a>查看镜像/容器的详细信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令 docker inspect 镜像/容器ID</span></span><br><span class=\"line\">[root@ouwen666 /]# docker inspect 5fff272a8948</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进入当前正在运行的容器\"><a href=\"#进入当前正在运行的容器\" class=\"headerlink\" title=\"进入当前正在运行的容器\"></a>进入当前正在运行的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令</span></span><br><span class=\"line\">docker exec -it 容器ID bashShell</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试</span></span><br><span class=\"line\">[root@ouwen666 /]# docker exec -it 5fff272a8948 /bin/bash</span><br><span class=\"line\">[root@5fff272a8948 /]#</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">方式二</span></span><br><span class=\"line\">docker attach 容器ID</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试</span></span><br><span class=\"line\">[root@ouwen666 /]# docker attach 5fff272a8948</span><br><span class=\"line\">正在执行的代码...</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker <span class=\"built_in\">exec</span>     <span class=\"comment\"># 进入容器后，开启一个新的终端，exit后不会停止容器（常用）</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker attach   <span class=\"comment\"># 进入容器正在执行的终端，不会启动新的进程，exit后会停止容器！</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"从容器内拷贝文件到主机上\"><a href=\"#从容器内拷贝文件到主机上\" class=\"headerlink\" title=\"从容器内拷贝文件到主机上\"></a>从容器内拷贝文件到主机上</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker cp 容器ID:容器内路径 目的主机路径</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试</span></span><br><span class=\"line\">[root@ouwen666 home]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS</span><br><span class=\"line\">7938b1a7dece   centos    &quot;/bin/bash&quot;   About a minute ago   Up About a minute</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器内部</span></span><br><span class=\"line\">[root@ouwen666 home]# docker attach 7938b1a7dece</span><br><span class=\"line\">[root@7938b1a7dece /]# cd /home/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建一个文件</span></span><br><span class=\"line\">[root@7938b1a7dece home]# touch helloworld.java</span><br><span class=\"line\">[root@7938b1a7dece home]# ls</span><br><span class=\"line\">helloworld.java</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">退出容器</span></span><br><span class=\"line\">[root@7938b1a7dece home]# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将容器中的文件拷贝到主机中</span></span><br><span class=\"line\">[root@ouwen666 home]# docker cp 7938b1a7dece:/home/helloworld.java /home/</span><br><span class=\"line\">[root@ouwen666 home]# ls</span><br><span class=\"line\">git  helloworld.java</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入-导出容器\"><a href=\"#导入-导出容器\" class=\"headerlink\" title=\"导入/导出容器\"></a>导入/导出容器</h4><ul>\n<li><p>export 导出容器的内容留作为一个 tar 归档文件[对应 import 命令]</p>\n</li>\n<li><p>import 从 tar 包中的内容创建一个新的文件系统再导入为镜像[对应 export]</p>\n</li>\n</ul>\n<figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 导出</span></span><br><span class=\"line\">[root<span class=\"symbol\">@88233</span> ~]<span class=\"meta\"># docker export 71720f3a8f51 &gt; myubuntu.tar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 导入</span></span><br><span class=\"line\">[root<span class=\"symbol\">@88233</span> ~]<span class=\"meta\"># cat myubuntu.tar | docker import - vansys/ubuntu:1.0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218192225.png\" alt=\"image-20211218192225807\"></p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"code\"><pre><span class=\"line\">attach       <span class=\"meta\"># 当前 shell 下 attach 连接指定运行镜像</span></span><br><span class=\"line\">build        <span class=\"meta\"># 通过 Dockerfile 定制镜像</span></span><br><span class=\"line\">commit       <span class=\"meta\"># 提交当前容器为新的镜像</span></span><br><span class=\"line\">cp           <span class=\"meta\">#从容器中拷贝指定文件或者目录到宿主机中</span></span><br><span class=\"line\"><span class=\"keyword\">create</span>       <span class=\"meta\"># 创建一个新的容器，同 run，但不启动容器</span></span><br><span class=\"line\">diff         <span class=\"meta\"># 查看 docker 容器变化</span></span><br><span class=\"line\">events       <span class=\"meta\"># 从 docker 服务获取容器实时事件</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span>         <span class=\"meta\"># 在已存在的容器上运行命令</span></span><br><span class=\"line\">export       <span class=\"meta\"># 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span></span><br><span class=\"line\">history      <span class=\"meta\"># 展示一个镜像形成历史</span></span><br><span class=\"line\">images       <span class=\"meta\"># 列出系统当前镜像</span></span><br><span class=\"line\">import       <span class=\"meta\"># 从tar包中的内容创建一个新的文件系统映像[对应export]</span></span><br><span class=\"line\">info         <span class=\"meta\"># 显示系统相关信息</span></span><br><span class=\"line\">inspect      <span class=\"meta\"># 查看容器详细信息</span></span><br><span class=\"line\">kill         <span class=\"meta\"># kill 指定 docker 容器</span></span><br><span class=\"line\"><span class=\"keyword\">load</span>         <span class=\"meta\"># 从一个 tar 包中加载一个镜像[对应 save]</span></span><br><span class=\"line\">login        <span class=\"meta\"># 注册或者登陆一个 docker 源服务器</span></span><br><span class=\"line\">logout       <span class=\"meta\"># 从当前 Docker registry 退出</span></span><br><span class=\"line\">logs         <span class=\"meta\"># 输出当前容器日志信息</span></span><br><span class=\"line\">port         <span class=\"meta\"># 查看映射端口对应的容器内部源端口</span></span><br><span class=\"line\"><span class=\"built_in\">pause</span>        <span class=\"meta\"># 暂停容器</span></span><br><span class=\"line\">ps           <span class=\"meta\"># 列出容器列表</span></span><br><span class=\"line\">pull         <span class=\"meta\"># 从docker镜像源服务器拉取指定镜像或者库镜像</span></span><br><span class=\"line\"><span class=\"keyword\">push</span>         <span class=\"meta\"># 推送指定镜像或者库镜像至docker源服务器</span></span><br><span class=\"line\">restart      <span class=\"meta\"># 重启运行的容器</span></span><br><span class=\"line\">rm           <span class=\"meta\"># 移除一个或者多个容器</span></span><br><span class=\"line\">rmi          <span class=\"meta\"># 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span></span><br><span class=\"line\"><span class=\"keyword\">run</span>          <span class=\"meta\"># 创建一个新的容器并运行一个命令</span></span><br><span class=\"line\"><span class=\"keyword\">save</span>         <span class=\"meta\"># 保存一个镜像为一个 tar 包[对应 load]</span></span><br><span class=\"line\">search       <span class=\"meta\"># 在 docker hub 中搜索镜像</span></span><br><span class=\"line\">start        <span class=\"meta\"># 启动容器</span></span><br><span class=\"line\"><span class=\"keyword\">stop</span>         <span class=\"meta\"># 停止容器</span></span><br><span class=\"line\">tag          <span class=\"meta\"># 给源中镜像打标签</span></span><br><span class=\"line\">top          <span class=\"meta\"># 查看容器中运行的进程信息</span></span><br><span class=\"line\">unpause      <span class=\"meta\"># 取消暂停容器</span></span><br><span class=\"line\">version      <span class=\"meta\"># 查看 docker 版本号</span></span><br><span class=\"line\"><span class=\"built_in\">wait</span>         <span class=\"meta\"># 截取容器停止时的退出状态值</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"Docker-安装-Nginx\"><a href=\"#Docker-安装-Nginx\" class=\"headerlink\" title=\"Docker 安装 Nginx\"></a>Docker 安装 Nginx</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 搜索镜像 或者去 dockerHub 上搜索 https://hub.docker.com/search?q=nginx&amp;<span class=\"built_in\">type</span>=image</span></span><br><span class=\"line\">[root@ouwen666 home]# docker search nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 下载镜像</span></span><br><span class=\"line\">[root@ouwen666 home]# docker pull nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3. 运行测试</span></span><br><span class=\"line\">[root@ouwen666 home]# docker images</span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">nginx        latest    f652ca386ed1   2 weeks ago    141MB</span><br><span class=\"line\">centos       latest    5d0da3dc9764   3 months ago   231MB</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-d 后台运行</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--name 给容器命名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-p 宿主机端口:容器内部端口 映射端口</span></span><br><span class=\"line\">[root@ouwen666 home]# docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class=\"line\">639cb4f9a9e60d96d698f0c1200f216176a3735b40b3276b25af5e8fb502e337</span><br><span class=\"line\">[root@ouwen666 home]# docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                  NAMES</span><br><span class=\"line\">639cb4f9a9e6   nginx     &quot;/docker-entrypoint.…&quot;   10 seconds ago   Up 9 seconds   0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class=\"line\">[root@ouwen666 home]# curl localhost:3344</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">[root@ouwen666 home]# docker exec -it nginx01 /bin/bash</span><br><span class=\"line\">root@639cb4f9a9e6:/# whereis nginx</span><br><span class=\"line\">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class=\"line\">root@639cb4f9a9e6:/# cd /etc/nginx/</span><br><span class=\"line\">root@639cb4f9a9e6:/etc/nginx# ls</span><br><span class=\"line\">conf.d\tfastcgi_params\tmime.types  modules  nginx.conf  scgi_params  uwsgi_params</span><br><span class=\"line\">root@639cb4f9a9e6:/etc/nginx#</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>端口暴露：</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218194409.png\" alt=\"image-20211218194409553\"></p>\n<h4 id=\"Docker-安装-Tomcat\"><a href=\"#Docker-安装-Tomcat\" class=\"headerlink\" title=\"Docker 安装 Tomcat\"></a>Docker 安装 Tomcat</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">官方的使用</span></span><br><span class=\"line\">docker run -it --rm tomcat:9.0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这种方式停止了容器之后，会直接删除容器</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载再启动</span></span><br><span class=\"line\">docker pull tomcat:9.0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动运行</span></span><br><span class=\"line\">docker run -d -p 3355:8080 --name tomcat01 tomcat:9.0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试访问没有问题</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器内部</span></span><br><span class=\"line\">[root@ouwen666 home]# docker exec -it tomcat01 /bin/bash</span><br><span class=\"line\">root@b59126dcef8d:/usr/local/tomcat# ls</span><br><span class=\"line\">BUILDING.txt\t LICENSE  README.md\t RUNNING.txt  conf  logs\t    temp     webapps.dist</span><br><span class=\"line\">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin\t      lib   native-jni-lib  webapps  work</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker-安装-ElasticSearch-Kibana\"><a href=\"#Docker-安装-ElasticSearch-Kibana\" class=\"headerlink\" title=\"Docker 安装 ElasticSearch + Kibana\"></a>Docker 安装 ElasticSearch + Kibana</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">官方的使用</span></span><br><span class=\"line\">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">es 是十分耗内存的 1.xG 服务器 2核2G</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 docker stats</span></span><br><span class=\"line\">[root@ouwen666 home]# docker stats</span><br><span class=\"line\">CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O   BLOCK I/O</span><br><span class=\"line\">b496914b7726   elasticsearch   0.00%     1.237GiB / 1.694GiB   73.00%    0B / 0B   197MB / 729kB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试一下es是否安装成功</span></span><br><span class=\"line\">[root@ouwen666 home]# curl localhost:9200</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;b496914b7726&quot;，</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;，</span><br><span class=\"line\">  &quot;cluster_uuid&quot; : &quot;v5CISdg4Sw-d8-Jui-XXTw&quot;，</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;7.6.2&quot;，</span><br><span class=\"line\">    &quot;build_flavor&quot; : &quot;default&quot;，</span><br><span class=\"line\">    &quot;build_type&quot; : &quot;docker&quot;，</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;，</span><br><span class=\"line\">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;，</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false，</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;8.4.0&quot;，</span><br><span class=\"line\">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;，</span><br><span class=\"line\">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know， for Search&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">增加对内存的限制 修改配置文件 -e 环境配置的修改</span></span><br><span class=\"line\">docker run -d --name elasticsearch01 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 docker stats 内存明显变小</span></span><br><span class=\"line\">[root@ouwen666 home]# docker stats</span><br><span class=\"line\">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %    NET I/O      BLOCK I/O</span><br><span class=\"line\">c0d59f8ca889   elasticsearch01   0.00%     375.2MiB / 1.694GiB   21.63%   524B / 942B  107MB/733kB</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试是否启动成功</span></span><br><span class=\"line\">[root@ouwen666 home]# curl localhost:9200</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;c0d59f8ca889&quot;，</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;，</span><br><span class=\"line\">  &quot;cluster_uuid&quot; : &quot;ECE4OHoqQ5Sk-fhT-ALuPg&quot;，</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;7.6.2&quot;，</span><br><span class=\"line\">    &quot;build_flavor&quot; : &quot;default&quot;，</span><br><span class=\"line\">    &quot;build_type&quot; : &quot;docker&quot;，</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;，</span><br><span class=\"line\">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;，</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false，</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;8.4.0&quot;，</span><br><span class=\"line\">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;，</span><br><span class=\"line\">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know， for Search&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如何使用 Kibana 连接 ES？</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218201949.png\" alt=\"image-20211218201949070\"></p>\n<h2 id=\"Docker-镜像详解\"><a href=\"#Docker-镜像详解\" class=\"headerlink\" title=\"Docker 镜像详解\"></a>Docker 镜像详解</h2><h3 id=\"镜像是什么\"><a href=\"#镜像是什么\" class=\"headerlink\" title=\"镜像是什么\"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是 image 镜像文件。</p>\n<p>只有通过这个镜像文件才能生成 Docker 容器实例(类似 Java 中 new 出来一个对象)。</p>\n<p>如何得到镜像：</p>\n<ul>\n<li>从远程仓库下载</li>\n<li>自己制作一个镜像 DockerFile</li>\n</ul>\n<h3 id=\"Docker-镜像加载原理\"><a href=\"#Docker-镜像加载原理\" class=\"headerlink\" title=\"Docker 镜像加载原理\"></a>Docker 镜像加载原理</h3><blockquote>\n<p>UnionFS(联合文件系统)</p>\n</blockquote>\n<p>Union 文件系统(UnionFS) 是一种分层. 轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual filesystem）。Union 文件系统是 Docker 镜像的基础。==镜像可以通过分层来进行继承==，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>\n<p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层文件和目录。</p>\n<blockquote>\n<p>Docker 镜像加载原理</p>\n</blockquote>\n<p>docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。</p>\n<p>bootfs(boot file system) 主要包含 bootloader 和 kernel，bootloader 主要是引导加载 kernel，Linux 刚启动时会加载 bootfs 文件系统，==在 Docker 镜像的最底层是 bootfs==。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就存在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p>\n<p>roorfs （root file system），在 bootfs 之上。包含的就是典型 Linux 系统中的 /dev ，/proc，/bin ，/etx 等标准的目录和文件。rootfs 就是各种不同的操作系统发行版。比如 Ubuntu，Centos 等等。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218204700.png\" alt=\"image-20211218204700594\"></p>\n<p>平时安装进虚拟机的 CentOS 镜像都是好几个 G，为什么 Docker 这里才 200M？</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218204834.png\" alt=\"image-20211218204834885\"></p>\n<p>对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令. 工具和程序库就可以了，因为底层直接用 Host（宿主机）的 kernel，自己只需要提供 rootfs 就行了，由此可见对于不同的 Linux 发行版，bootfs 基本是一致的，rootfs 会有差别，因此不同的发行版可以公用 bootfs。</p>\n<h3 id=\"分层的镜像\"><a href=\"#分层的镜像\" class=\"headerlink\" title=\"分层的镜像\"></a>分层的镜像</h3><p>下载一个镜像，观察下载的日志，可以发现是一层一层往下下载的！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ouwen666 home]# docker pull redis</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from library/redis</span><br><span class=\"line\">e5ae68f74026: Already exists</span><br><span class=\"line\">37c4354629da: Pull complete</span><br><span class=\"line\">b065b1b1fa0f: Pull complete</span><br><span class=\"line\">6954d19bb2e5: Pull complete</span><br><span class=\"line\">6333f8baaf7c: Pull complete</span><br><span class=\"line\">f9772c8a44e7: Pull complete</span><br><span class=\"line\">Digest: sha256:2f502d27c3e9b54295f1c591b3970340d02f8a5824402c8179dcd20d4076b796</span><br><span class=\"line\">Status: Downloaded newer image for redis:latest</span><br><span class=\"line\">docker.io/library/redis:latest</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为什么 Docker 镜像要采用这种分层的结构？</p>\n</blockquote>\n<p>==最大的好处，就是是资源共享了！==</p>\n<p>如有多个镜像都从相同的基本镜像构建而来，那么宿主机只需在磁盘上保留一份基本镜像，同时内存中也只需要加载一份基本镜像 ，这样就可以为所有的容器服务了，且镜像的每一层都可以被共享。</p>\n<p>查看镜像分层的方式可以通过<code>docker image inspect</code> 命令！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ouwen666 home]# docker image inspect redis</span><br><span class=\"line\">[</span><br><span class=\"line\">...</span><br><span class=\"line\">        &quot;RootFS&quot;: &#123;</span><br><span class=\"line\">            &quot;Type&quot;: &quot;layers&quot;，</span><br><span class=\"line\">            &quot;Layers&quot;: [</span><br><span class=\"line\">                &quot;sha256:9321ff862abbe8e1532076e5fdc932371eff562334ac86984a836d77dfb717f5&quot;，</span><br><span class=\"line\">                &quot;sha256:aa2858ea5edc9c0981901a1b63b49a8f4a6e7099b4304b49e680ffdcc6b71b3e&quot;，</span><br><span class=\"line\">                &quot;sha256:93079bf13a6d5fe7c4bd9f00cb96183f9d1db9968c4bd15b395df2f3867bf8e5&quot;，</span><br><span class=\"line\">                &quot;sha256:9ca504b88e256aa6f6c04ec65aeeed6b926661ea30a0b97f829fbe230155241a&quot;，</span><br><span class=\"line\">                &quot;sha256:9468a3f0498bd5cc298ce25ea6ce9c6adf14aa2ce152856b5f389510a9bb9e01&quot;，</span><br><span class=\"line\">                &quot;sha256:b7851a62867d82784052d7662862adc0b47b2bddcddc89ae78307f75ba1b29ae&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>理解</p>\n</blockquote>\n<p>所有的 Docker 镜像都起始于一个基础镜像层 ，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p>\n<p>举一个简单的例子，假如基于 Ubuntu Linux 16.04 创建一个新的镜像 ，这就是新镜像的第一层。如果在该镜像中添加 Python 包，就会在基础镜像层之上创建第二个镜像层;如果继续添加一个安全补丁，就会创建第三个镜像层。</p>\n<p>该镜像当前已经包含 3 个镜像层，如下图所示(这只是一个用于演示的很简单的例子 )。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218210259.png\" alt=\"image-20211218210258974\"></p>\n<p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。</p>\n<p>下图中举 了一个简单的例子，每个镜像层包含 3 个文件，而镜像包含了来自两个镜像层的 6 个文件。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218210445.png\" alt=\"image-20211218210445762\"></p>\n<p>上图中的镜像层跟之前图中的略有区别，主要目的是便于展示文件。</p>\n<p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有 6 个文件，这是因为最上层中的文件 7 是文件 5 的一一个更新版本。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218210534.png\" alt=\"image-20211218210534319\"></p>\n<p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p>\n<p>Docker 通过存储引擎(新版本采用快照机制)的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p>\n<p>Linux 上可用的存储引擎有 AUFS. Overlay2. Device Mapper. Btrfs 以及 ZFS。顾名思义，每种存储引擎都基于 Linux 中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。</p>\n<p>Docker 在 Windows 上仅支持 windowsfilter -种存储引擎，该引擎基于 NTFS 文件系统之上实现了分层和 CoW[1]。</p>\n<p>下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218210605.png\" alt=\"image-20211218210605289\"></p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<p>Docker 镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部！这一层就是我们通常说的容器层，容器之下都叫镜像层！</p>\n<h3 id=\"提交镜像\"><a href=\"#提交镜像\" class=\"headerlink\" title=\"提交镜像\"></a>提交镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker commit 提交容器成为一个新的镜像副本</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令和git原理类似</span></span><br><span class=\"line\">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 目标镜像名:[标签名]</span><br></pre></td></tr></table></figure>\n\n<p><strong>实战测试</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动一个默认的tomcat</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">发现默认的tomcat的webapps目录下是没用部署应用的。原因是官方的镜像都是默认webapps下是没有应用的</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将webapps.dist目录下的应用拷贝到webapps下</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将更改过的镜像提交到仓库，以后就能使用修改过的镜像进行启动！</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker commit -a=&quot;Irving&quot; -m=&quot;add webapps app&quot; 9bffc8b128c7 mytomcat:1.0</span><br><span class=\"line\">sha256:ef1ba8ee4bba1a39202b89a9bfecc4cb4dfbf20263b6e1b913a4cecf80ff8381</span><br><span class=\"line\">[root@ouwen666 ~]# docker images</span><br><span class=\"line\">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">mytomcat              1.0       ef1ba8ee4bba   10 seconds ago   685MB</span><br><span class=\"line\">tomcat                9.0       3f3cadde9a68   10 days ago      680MB</span><br><span class=\"line\">redis                 latest    aea9b698d7d1   2 weeks ago      113MB</span><br><span class=\"line\">nginx                 latest    f652ca386ed1   2 weeks ago      141MB</span><br><span class=\"line\">centos                latest    5d0da3dc9764   3 months ago     231MB</span><br><span class=\"line\">portainer/portainer   latest    580c0e4e98b0   9 months ago     79.1MB</span><br><span class=\"line\">elasticsearch         7.6.2     f29a1ee41030   21 months ago    791MB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提交镜像到阿里云\"><a href=\"#提交镜像到阿里云\" class=\"headerlink\" title=\"提交镜像到阿里云\"></a>提交镜像到阿里云</h3><p>本地镜像发布到阿里云流程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220612132649.png\" alt=\"image-20220604164136425\"></p>\n<ol>\n<li>登录阿里云控制台，选择容器镜像服务</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220604211156.png\" alt=\"image-20220604211107790\"></p>\n<ol start=\"2\">\n<li>选择个人实例</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220604211320.png\" alt=\"image-20220604211320410\"></p>\n<ol start=\"3\">\n<li>创建命名空间</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220604211651.png\" alt=\"image-20220604211650899\"></p>\n<ol start=\"4\">\n<li>创建镜像仓库</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220604212038.png\" alt=\"image-20220604212038508\"></p>\n<ol start=\"5\">\n<li>继续</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220604212554.png\" alt=\"image-20220604212532015\"></p>\n<ol start=\"6\">\n<li>继续</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220604212648.png\" alt=\"image-20220604212648063\"></p>\n<ol start=\"7\">\n<li>进入管理界面获取脚本</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220604212843.png\" alt=\"image-20220604212843596\"></p>\n<ol start=\"8\">\n<li>将镜像推送到阿里云</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220604213052.png\" alt=\"image-20220604213052191\"></p>\n<h3 id=\"提交镜像到私有库\"><a href=\"#提交镜像到私有库\" class=\"headerlink\" title=\"提交镜像到私有库\"></a>提交镜像到私有库</h3><p>Docker Registry 是官方提供的工具，可以用于构建私有镜像仓库。</p>\n<ol>\n<li><strong>下载镜像 Docker Registry</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@88231 ~]<span class=\"comment\"># docker pull registry</span></span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from library/registry</span><br><span class=\"line\">79e9f2f55bf5: Pull complete</span><br><span class=\"line\">0d96da54f60b: Pull complete</span><br><span class=\"line\">5b27040df4a2: Pull complete</span><br><span class=\"line\">e2ead8259a04: Pull complete</span><br><span class=\"line\">3790aef225b9: Pull complete</span><br><span class=\"line\">Digest: sha256:169211e20e2f2d5d115674681eb79d21a217b296b43374b8e39f97fcf866b375</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> registry:latest</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>运行私有库 Registry，相当于自己搭建一个 Docker Hub</strong></li>\n</ol>\n<p>默认情况，仓库被创建在容器内的 /var/lib/registry 目录下，建议自行用容器卷映射，方便于宿主机联调</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@88231 hd]<span class=\"comment\"># docker run -d -p 5000:5000  -v /hd/docker-registry/:/var/lib/registry --privileged=true registry</span></span><br><span class=\"line\">96579e94a32238269d25239394f62a7d38492d27834ebb4863fe8d3baea55b77</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>curl 验证私服库上有什么镜像</strong></li>\n</ol>\n<p><code>curl -XGET http://192.168.88.231:5000/v2/_catalog</code></p>\n<p>可以看到，目前私服库没有任何镜像上传过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@88231 docker-registry]<span class=\"comment\"># curl -XGET http://192.168.88.231:5000/v2/_catalog</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[]&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>提交一个新镜像到私有的 Registry 库</strong></li>\n</ol>\n<ul>\n<li>修改符合私服规范的 Tag</li>\n</ul>\n<p><code>docker tag 镜像ID Host:Port/Repository:Tag</code></p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@88231</span> docker-registry]<span class=\"meta\"># docker tag ba6acccedd29 192.168.88.231:5000/myubuntu:1.0</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改配置文件，使之支持 http 上传</li>\n</ul>\n<p>这里的地址是 registry 私服所在主机的地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@88231 docker-registry]<span class=\"comment\"># vim /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://alq7pwwu.mirror.aliyuncs.com&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>: [<span class=\"string\">&quot;192.168.88.231:5000&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 重启 docker 生效</span></span><br><span class=\"line\">[root@88231 docker-registry]<span class=\"comment\"># service docker restart</span></span><br><span class=\"line\">Stopping docker:                                       [  OK  ]</span><br><span class=\"line\">Starting docker:\t                                   [  OK  ]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>push 推送到私服库</li>\n</ul>\n<figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 使用 docker push 命令推送私服库</span></span><br><span class=\"line\">[root<span class=\"symbol\">@88231</span> docker-registry]<span class=\"meta\"># docker push 192.168.88.231:5000/myubuntu:1.0</span></span><br><span class=\"line\">The push refers <span class=\"keyword\">to</span> a repository [<span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.231</span>:<span class=\"number\">5000</span>/myubuntu]</span><br><span class=\"line\"><span class=\"number\">9</span>f54eef41275: Pushed</span><br><span class=\"line\"><span class=\"number\">1.0</span>: digest: sha256:<span class=\"number\">870</span>c68e5f7e5cac7cb9a747e18865524dbc0952575dcc498621c79b94a78a846 size: <span class=\"number\">529</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 使用 curl 查看私服库上的镜像</span></span><br><span class=\"line\">[root<span class=\"symbol\">@88231</span> docker-registry]<span class=\"meta\"># curl -XGET http://192.168.88.231:5000/v2/_catalog</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;repositories&quot;</span>:[<span class=\"string\">&quot;myubuntu&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>将私服库上的镜像 pull 到本地运行</strong></li>\n</ol>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 使用 docker pull 命令将私服库上的镜像下载到本地</span></span><br><span class=\"line\">[root<span class=\"subst\">@88231</span> /]<span class=\"meta\"># docker pull 192.168.88.231:5000/myubuntu:1.0</span></span><br><span class=\"line\"><span class=\"number\">1.0</span>: Pulling from myubuntu</span><br><span class=\"line\"><span class=\"symbol\">f9945daba3cc:</span> Pull complete</span><br><span class=\"line\"><span class=\"symbol\">Digest:</span> sha256:<span class=\"number\">870</span>c68e5f7e5cac7cb9a747e18865524dbc0952575dcc498621c79b94a78a846</span><br><span class=\"line\"><span class=\"symbol\">Status:</span> Downloaded newer image for <span class=\"number\">192.168</span><span class=\"number\">.88</span><span class=\"number\">.231</span>:<span class=\"number\">5000</span>/myubuntu:<span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器数据卷\"><a href=\"#容器数据卷\" class=\"headerlink\" title=\"容器数据卷\"></a>容器数据卷</h2><h3 id=\"什么是容器数据卷？\"><a href=\"#什么是容器数据卷？\" class=\"headerlink\" title=\"什么是容器数据卷？\"></a>什么是容器数据卷？</h3><blockquote>\n<p>docker 的理念回顾</p>\n</blockquote>\n<p>将应用和环境打包成一个镜像！</p>\n<p>数据都在容器中，如果删除容器，数据就会丢失！==数据如何持久化？数据需要存储在本地！==</p>\n<p>容器之间可以有一个数据共享的技术！Docker 容器中产生的数据，可以同步到本地！</p>\n<p>这就是卷技术！其本质就是目录的挂载，将容器内的目录，挂载到 Linux 上！</p>\n<h3 id=\"使用数据卷\"><a href=\"#使用数据卷\" class=\"headerlink\" title=\"使用数据卷\"></a>使用数据卷</h3><blockquote>\n<p>==坑！使用容器数据卷时记得加入：–privileged=true==</p>\n<p>Docker 挂载主机目录访问如果出现 cannot open directory: Permission denied<br>解决办法：在挂载目录后多加一个–privileged=true 参数即可</p>\n<p>如果是 CentOS7 安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，<br>在 SELinux 里面挂载目录被禁止掉了额，如果要开启，我们一般使用–privileged=true 命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container 内的 root 拥有真正的 root 权限，否则，container 内的 root 只是外部的一个普通用户权限。</p>\n</blockquote>\n<blockquote>\n<p>方式一：直接使用命令来挂载 -v</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -v 主机目录:容器内目录</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker run -it -v /home/ceshi:/home --privileged=true centos /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动成功后查看详细信息</span></span><br><span class=\"line\">[root@ouwen666 ceshi]# docker inspect 015ee9a39cf1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219162714.png\" alt=\"image-20211219162714621\"></p>\n<p>测试文件的同步</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219163426.png\" alt=\"image-20211219163426342\"></p>\n<p>继续测试！</p>\n<ol>\n<li>停止容器</li>\n<li>宿主机上修改文件</li>\n<li>启动并进入容器</li>\n<li>发现容器内的数据跟宿主机是同步的！</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219163920.png\" alt=\"image-20211219163920495\"></p>\n<blockquote>\n<p>好处：修改只需要在本地修改即可，容器内会自动同步！</p>\n</blockquote>\n<h3 id=\"实战：安装-MySQL\"><a href=\"#实战：安装-MySQL\" class=\"headerlink\" title=\"实战：安装 MySQL\"></a>实战：安装 MySQL</h3><p>思考：MySQL 的数据持久化问题！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取镜像</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker pull mysql:5.7</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行容器，需要做数据挂载！ <span class=\"comment\"># 安装启动mysql，需要配置密码的</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">官方命令: docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动mysql</span></span><br><span class=\"line\">docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">命令解释</span></span><br><span class=\"line\">-d  后台运行</span><br><span class=\"line\">-p  端口映射</span><br><span class=\"line\">-v  卷挂载</span><br><span class=\"line\">-e  环境配置</span><br><span class=\"line\">--name 容器名字</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动成功，通过Navicat连接测试！</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219171950.png\" alt=\"image-20211219171950528\"></p>\n<p>用 Navicat 建一个数据库</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219193046.png\" alt=\"image-20211219193046702\"></p>\n<p>服务器上映射的路径下，出现了同名文件</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219193150.png\" alt=\"image-20211219193150622\"></p>\n<p>将容器删除，发现 <code>/home/mysql/data</code> 目录下的文件还是存在的。这就实现了容器数据持久化！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219193417.png\" alt=\"image-20211219193417029\"></p>\n<h3 id=\"具名和匿名挂载\"><a href=\"#具名和匿名挂载\" class=\"headerlink\" title=\"具名和匿名挂载\"></a>具名和匿名挂载</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">匿名挂载</span></span><br><span class=\"line\">-v 容器内路径</span><br><span class=\"line\">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所有 volume 的情况</span></span><br><span class=\"line\">[root@ouwen666 data]# docker volume ls</span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     5370f027b4d5a86a9718f66c9bc9c39138aa92ad2b6368a74f930c09f94c52bb</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里发现 volume name 是一串乱码，是因为我们挂载时没有指定名字。这就是匿名挂载。我们在 -v 时只写了容器内路径，没有写容器外路径！</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">具名挂载</span></span><br><span class=\"line\">[root@ouwen666 data]# docker run -d -P --name nginx02 -v nginxvolumename:/etc/nginx nginx</span><br><span class=\"line\">11ba9ffded8187484386ff37103c91a6a2bd2e103420b9376c45c61f604dab57</span><br><span class=\"line\">[root@ouwen666 data]# docker volume ls</span><br><span class=\"line\">DRIVER    VOLUME NAME</span><br><span class=\"line\">local     nginxvolumename</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过 -v 卷名:容器内路径 完成具名挂载</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看这个卷的具体信息 inspect</span></span><br><span class=\"line\">[root@ouwen666 data]# docker volume inspect nginxvolumename</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;CreatedAt&quot;: &quot;2021-12-19T19:44:11+08:00&quot;,</span><br><span class=\"line\">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class=\"line\">        &quot;Labels&quot;: null,</span><br><span class=\"line\">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/nginxvolumename/_data&quot;,</span><br><span class=\"line\">        &quot;Name&quot;: &quot;nginxvolumename&quot;,</span><br><span class=\"line\">        &quot;Options&quot;: null,</span><br><span class=\"line\">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>所有的 docker 容器内的卷，没有指定目录的情况下都是在 <code>/var/lib/docker/volumes/xxx/_data</code> 下！</p>\n<p>通过具名挂载可以方便地找到卷所在的位置，大多数请况下使用 <code>具名挂载</code> ！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219194814.png\" alt=\"image-20211219194814407\"></p>\n<p><strong>如何确定是具名挂载. 匿名挂载还是指定路径挂载？</strong></p>\n<ul>\n<li><code>-v 容器内路径</code> 匿名挂载</li>\n<li><code>-v 卷名:容器内路径</code> 具名挂载</li>\n<li><code>-v /宿主机路径:容器内路径</code> 指定路径挂载</li>\n</ul>\n<p>拓展：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过 -v 容器内路径:ro/rw  改变读写权限</span></span><br><span class=\"line\">ro   readonly  # 只读</span><br><span class=\"line\">rw   readwrite # 可读可写</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例如</span></span><br><span class=\"line\">docker run -d -P --name nginx02 -v nginxvolumename:/etc/nginx:ro nginx</span><br><span class=\"line\">docker run -d -P --name nginx02 -v nginxvolumename:/etc/nginx:rw nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">一旦设置了ro，就说这个路径只能通过映射后宿主机的来操作，容器内部是无法操作的！</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初识-DockerFile\"><a href=\"#初识-DockerFile\" class=\"headerlink\" title=\"初识 DockerFile\"></a>初识 DockerFile</h3><p>DockerFile 就是用来构建 docker 镜像的构建文件！其实就是一段命令脚本！</p>\n<p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个个的命令，每个命令都是一层！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建一个dockerfile文件，名字可以随意 建议 Dockerfile</span></span><br><span class=\"line\">[root@ouwen666 docker-test]# vim Dockerfile</span><br><span class=\"line\">FROM centos</span><br><span class=\"line\"></span><br><span class=\"line\">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">CMD echo &quot;-----end-----&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">CMD /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过Dockerfile构建一个属于自己的镜像 注意末尾有一个 . 代表当前路径</span></span><br><span class=\"line\">[root@ouwen666 docker-test]# docker build -f /home/docker-test/Dockerfile -t irving/centos:1.0 .</span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/4 : FROM centos</span><br><span class=\"line\"><span class=\"meta prompt_\"> ---&gt; </span><span class=\"language-bash\">5d0da3dc9764</span></span><br><span class=\"line\">Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class=\"line\"><span class=\"meta prompt_\"> ---&gt; </span><span class=\"language-bash\">Running <span class=\"keyword\">in</span> e121337bcbbe</span></span><br><span class=\"line\">Removing intermediate container e121337bcbbe</span><br><span class=\"line\"><span class=\"meta prompt_\"> ---&gt; </span><span class=\"language-bash\">2e6cad23ca38</span></span><br><span class=\"line\">Step 3/4 : CMD echo &quot;-----end-----&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"> ---&gt; </span><span class=\"language-bash\">Running <span class=\"keyword\">in</span> 7025e750f7ac</span></span><br><span class=\"line\">Removing intermediate container 7025e750f7ac</span><br><span class=\"line\"><span class=\"meta prompt_\"> ---&gt; </span><span class=\"language-bash\">cf376f17795b</span></span><br><span class=\"line\">Step 4/4 : CMD /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"> ---&gt; </span><span class=\"language-bash\">Running <span class=\"keyword\">in</span> 60e0bccacc5d</span></span><br><span class=\"line\">Removing intermediate container 60e0bccacc5d</span><br><span class=\"line\"><span class=\"meta prompt_\"> ---&gt; </span><span class=\"language-bash\">2aee0e7445ac</span></span><br><span class=\"line\">Successfully built 2aee0e7445ac</span><br><span class=\"line\">Successfully tagged irving/centos:1.0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看生成的镜像</span></span><br><span class=\"line\">[root@ouwen666 docker-test]# docker images</span><br><span class=\"line\">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">irving/centos         1.0       2aee0e7445ac   2 minutes ago   231MB</span><br><span class=\"line\">mytomcat              1.0       ef1ba8ee4bba   4 hours ago     685MB</span><br><span class=\"line\">tomcat                9.0       3f3cadde9a68   10 days ago     680MB</span><br><span class=\"line\">redis                 latest    aea9b698d7d1   2 weeks ago     113MB</span><br><span class=\"line\">mysql                 5.7       738e7101490b   2 weeks ago     448MB</span><br><span class=\"line\">nginx                 latest    f652ca386ed1   2 weeks ago     141MB</span><br><span class=\"line\">centos                latest    5d0da3dc9764   3 months ago    231MB</span><br><span class=\"line\">portainer/portainer   latest    580c0e4e98b0   9 months ago    79.1MB</span><br><span class=\"line\">elasticsearch         7.6.2     f29a1ee41030   21 months ago   791MB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用刚刚生成的镜像启动一个容器</span></span><br><span class=\"line\">[root@ouwen666 docker-test]# docker run -it 2aee0e7445ac /bin/bash</span><br><span class=\"line\">[root@b2707d29bda4 /]#</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219203120.png\" alt=\"image-20211219203120341\"></p>\n<p>这个挂载的卷目录一定和外部有一个同步的目录！</p>\n<p>通过 <code>docker inspect 容器ID</code> 查看具体信息</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219203438.png\" alt=\"image-20211219203438140\"></p>\n<p>发现确实是在 <code>/var/lib/docker/volumes/</code> 目录下的一个随机目录下！</p>\n<h3 id=\"卷的继承和共享\"><a href=\"#卷的继承和共享\" class=\"headerlink\" title=\"卷的继承和共享\"></a>卷的继承和共享</h3><blockquote>\n<p>图解</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211219203754.png\" alt=\"image-20211219203754331\"></p>\n<blockquote>\n<p>测试！</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动三个容器！通过刚刚自己制作的镜像启动</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第一个容器 docker01</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker run -it --name docker01 irving/centos:1.0</span><br><span class=\"line\">[root@9e033da9de3e /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01\tvolume02</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第二个容器 docker02 通过 --volumes-from 挂载 docker01 容器</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker run -it --name docker02 --volumes-from docker01 irving/centos:1.0</span><br><span class=\"line\">[root@75fb856af436 /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01\tvolume02</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker01 创建的文件同步到 docker02 容器上了</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker attach docker01</span><br><span class=\"line\">[root@9e033da9de3e /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01\tvolume02</span><br><span class=\"line\">[root@9e033da9de3e /]# cd volume01</span><br><span class=\"line\">[root@9e033da9de3e volume01]# ls</span><br><span class=\"line\">[root@9e033da9de3e volume01]# touch docker01</span><br><span class=\"line\">[root@9e033da9de3e volume01]# ls</span><br><span class=\"line\">docker01</span><br><span class=\"line\"></span><br><span class=\"line\">[root@ouwen666 /]# docker attach docker02</span><br><span class=\"line\">[root@75fb856af436 /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01\tvolume02</span><br><span class=\"line\">[root@75fb856af436 /]# cd volume01</span><br><span class=\"line\">[root@75fb856af436 volume01]# ls</span><br><span class=\"line\">docker01</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第三个容器 docker03 也通过 --volumes-from 挂载 docker01</span></span><br><span class=\"line\">[root@ouwen666 ~]# docker run -it --name docker03 --volumes-from docker01 irving/centos:1.0</span><br><span class=\"line\">[root@eda4d0cad3f0 /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01\tvolume02</span><br><span class=\"line\">[root@eda4d0cad3f0 /]# cd volume01</span><br><span class=\"line\">[root@eda4d0cad3f0 volume01]# ls</span><br><span class=\"line\">docker01</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">发现文件还是同步过来，在 docker03 中新建一个文件</span></span><br><span class=\"line\">[root@eda4d0cad3f0 volume01]# touch docker03</span><br><span class=\"line\">[root@eda4d0cad3f0 volume01]# ls</span><br><span class=\"line\">docker01  docker03</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入 docker01 容器，发现 docker03 中创建的文件也同步过来了！</span></span><br><span class=\"line\">[root@ouwen666 /]# docker attach docker01</span><br><span class=\"line\">[root@9e033da9de3e /]# cd volume01</span><br><span class=\"line\">[root@9e033da9de3e volume01]# ls</span><br><span class=\"line\">docker01  docker03</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>结论</p>\n</blockquote>\n<p>只要通过 <code>--volumes-from</code> 就可以做到容器间的数据共享！</p>\n<p>思考：删除 docker01，查看 docker02. docker03 是否还能访问这些文件</p>\n<p>依旧可以访问！本质上是一种数据拷贝，而不是单纯的数据共享！</p>\n<p>容器之间配置信息的传递，数据卷容器的生命周期可以一直持续到没有人使用为止！</p>\n","categories":["Linux"],"tags":["Docker","容器"]},{"title":"Docker 容器-高级篇","url":"/2022/04/07/289e2bff.html","content":"<h2 id=\"Docker-复杂应用安装\"><a href=\"#Docker-复杂应用安装\" class=\"headerlink\" title=\"Docker 复杂应用安装\"></a>Docker 复杂应用安装</h2><h3 id=\"MySQL-主从复制\"><a href=\"#MySQL-主从复制\" class=\"headerlink\" title=\"MySQL 主从复制\"></a>MySQL 主从复制</h3><p>主从搭建步骤：</p>\n<ul>\n<li><h4 id=\"新建主服务器容器实例-3307\"><a href=\"#新建主服务器容器实例-3307\" class=\"headerlink\" title=\"新建主服务器容器实例 3307\"></a><strong>新建主服务器容器实例 3307</strong></h4></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 3307:3306 --name mysql-master \\</span><br><span class=\"line\">-v /mydata/mysql-master/log:/var/log/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-master/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-master/conf:/etc/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root  \\</span><br><span class=\"line\">-d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>进入/mydata/mysql-master/conf 目录下新建 my.cnf</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># vim my.cnf</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=101</span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能</span></span><br><span class=\"line\">log-bin=mall-mysql-bin</span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>修改完配置后重启 master 实例</strong></li>\n</ol>\n<figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@88231</span> conf]<span class=\"meta\"># docker restart mysql-master</span></span><br><span class=\"line\">mysql-master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>进入 mysql-master 容器</strong></li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@88231</span> conf]<span class=\"comment\"># docker exec -it mysql-master /bin/bash</span></span><br><span class=\"line\">root<span class=\"variable\">@c84fa378812d</span><span class=\"symbol\">:/</span><span class=\"comment\"># mysql -uroot -p</span></span><br><span class=\"line\"><span class=\"title class_\">Enter</span> <span class=\"symbol\">password:</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>master 容器实例内创建数据同步用户</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"新建从服务器容器实例-3308\"><a href=\"#新建从服务器容器实例-3308\" class=\"headerlink\" title=\"新建从服务器容器实例 3308\"></a>新建从服务器容器实例 3308</h4></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 3308:3306 --name mysql-slave \\</span><br><span class=\"line\">-v /mydata/mysql-slave/log:/var/log/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-slave/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-slave/conf:/etc/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root  \\</span><br><span class=\"line\">-d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>进入/mydata/mysql-slave/conf 目录下新建 my.cnf</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># vim my.cnf</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=102</span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span></span><br><span class=\"line\">log-bin=mall-mysql-slave1-bin</span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\"><span class=\"comment\">## relay_log配置中继日志</span></span><br><span class=\"line\">relay_log=mall-mysql-relay-bin</span><br><span class=\"line\"><span class=\"comment\">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\"><span class=\"comment\">## slave设置为只读（具有super权限的用户除外）</span></span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>修改完配置后重启 slave 实例</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># docker restart mysql-slave</span></span><br><span class=\"line\">mysql-slave</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>在主数据库中查看主从同步状态</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File                  | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| mall-mysql-bin.000001 |      617 |              | mysql            |                   |</span><br><span class=\"line\">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>进入 mysql-slave 容器</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># docker exec -it mysql-slave /bin/bash</span></span><br><span class=\"line\">root@820edd47f326:/<span class=\"comment\"># mysql -uroot -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>在从数据库中配置主从复制</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">change master to master_host=<span class=\"string\">&#x27;宿主机ip&#x27;</span>, master_user=<span class=\"string\">&#x27;slave&#x27;</span>, master_password=<span class=\"string\">&#x27;123456&#x27;</span>, master_port=3307, master_log_file=<span class=\"string\">&#x27;mall-mysql-bin.000001&#x27;</span>, master_log_pos=617, master_connect_retry=30;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; change master to master_host=<span class=\"string\">&#x27;192.168.88.231&#x27;</span>, master_user=<span class=\"string\">&#x27;slave&#x27;</span>, master_password=<span class=\"string\">&#x27;123456&#x27;</span>, master_port=3307, master_log_file=<span class=\"string\">&#x27;mall-mysql-bin.000001&#x27;</span>, master_log_pos=617, master_connect_retry=30;</span><br><span class=\"line\">Query OK, 0 rows affected, 2 warnings (0.15 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主从复制命令参数说明</span></span><br><span class=\"line\">master_host：主数据库的IP地址；</span><br><span class=\"line\">master_port：主数据库的运行端口；</span><br><span class=\"line\">master_user：在主数据库创建的用于同步数据的用户账号；</span><br><span class=\"line\">master_password：在主数据库创建的用于同步数据的用户密码；</span><br><span class=\"line\">master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</span><br><span class=\"line\">master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</span><br><span class=\"line\">master_connect_retry：连接失败重试的时间间隔，单位为秒。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><strong>在从数据库中查看主从同步状态</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State:</span><br><span class=\"line\">                  Master_Host: 192.168.88.231</span><br><span class=\"line\">                  Master_User: slave</span><br><span class=\"line\">                  Master_Port: 3307</span><br><span class=\"line\">                Connect_Retry: 30</span><br><span class=\"line\">              Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 617</span><br><span class=\"line\">               Relay_Log_File: mall-mysql-relay-bin.000001</span><br><span class=\"line\">                Relay_Log_Pos: 4</span><br><span class=\"line\">        Relay_Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">         <span class=\"comment\"># NO -- 还没开始</span></span><br><span class=\"line\">             Slave_IO_Running: No</span><br><span class=\"line\">            Slave_SQL_Running: No</span><br><span class=\"line\">              Replicate_Do_DB:</span><br><span class=\"line\">          Replicate_Ignore_DB:</span><br><span class=\"line\">           Replicate_Do_Table:</span><br><span class=\"line\">       Replicate_Ignore_Table:</span><br><span class=\"line\">      Replicate_Wild_Do_Table:</span><br><span class=\"line\">  Replicate_Wild_Ignore_Table:</span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error:</span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 617</span><br><span class=\"line\">              Relay_Log_Space: 154</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File:</span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File:</span><br><span class=\"line\">           Master_SSL_CA_Path:</span><br><span class=\"line\">              Master_SSL_Cert:</span><br><span class=\"line\">            Master_SSL_Cipher:</span><br><span class=\"line\">               Master_SSL_Key:</span><br><span class=\"line\">        Seconds_Behind_Master: NULL</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error:</span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error:</span><br><span class=\"line\">  Replicate_Ignore_Server_Ids:</span><br><span class=\"line\">             Master_Server_Id: 0</span><br><span class=\"line\">                  Master_UUID:</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State:</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind:</span><br><span class=\"line\">      Last_IO_Error_Timestamp:</span><br><span class=\"line\">     Last_SQL_Error_Timestamp:</span><br><span class=\"line\">               Master_SSL_Crl:</span><br><span class=\"line\">           Master_SSL_Crlpath:</span><br><span class=\"line\">           Retrieved_Gtid_Set:</span><br><span class=\"line\">            Executed_Gtid_Set:</span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB:</span><br><span class=\"line\">                 Channel_Name:</span><br><span class=\"line\">           Master_TLS_Version:</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><strong>在从数据库中开启主从同步</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li><strong>查看从数据库状态发现已经同步</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting <span class=\"keyword\">for</span> master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.88.231</span><br><span class=\"line\">                  Master_User: slave</span><br><span class=\"line\">                  Master_Port: 3307</span><br><span class=\"line\">                Connect_Retry: 30</span><br><span class=\"line\">              Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 617</span><br><span class=\"line\">               Relay_Log_File: mall-mysql-relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 325</span><br><span class=\"line\">        Relay_Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">           <span class=\"comment\"># Yes -- 已开始</span></span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB:</span><br><span class=\"line\">          Replicate_Ignore_DB:</span><br><span class=\"line\">           Replicate_Do_Table:</span><br><span class=\"line\">       Replicate_Ignore_Table:</span><br><span class=\"line\">      Replicate_Wild_Do_Table:</span><br><span class=\"line\">  Replicate_Wild_Ignore_Table:</span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error:</span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 617</span><br><span class=\"line\">              Relay_Log_Space: 537</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File:</span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File:</span><br><span class=\"line\">           Master_SSL_CA_Path:</span><br><span class=\"line\">              Master_SSL_Cert:</span><br><span class=\"line\">            Master_SSL_Cipher:</span><br><span class=\"line\">               Master_SSL_Key:</span><br><span class=\"line\">        Seconds_Behind_Master: 0</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error:</span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error:</span><br><span class=\"line\">  Replicate_Ignore_Server_Ids:</span><br><span class=\"line\">             Master_Server_Id: 101</span><br><span class=\"line\">                  Master_UUID: 25cb5d93-e4df-11ec-86da-0242ac110003</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State: Slave has <span class=\"built_in\">read</span> all relay <span class=\"built_in\">log</span>; waiting <span class=\"keyword\">for</span> more updates</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind:</span><br><span class=\"line\">      Last_IO_Error_Timestamp:</span><br><span class=\"line\">     Last_SQL_Error_Timestamp:</span><br><span class=\"line\">               Master_SSL_Crl:</span><br><span class=\"line\">           Master_SSL_Crlpath:</span><br><span class=\"line\">           Retrieved_Gtid_Set:</span><br><span class=\"line\">            Executed_Gtid_Set:</span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB:</span><br><span class=\"line\">                 Channel_Name:</span><br><span class=\"line\">           Master_TLS_Version:</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li><strong>主从复制测试</strong></li>\n</ol>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">- </span>主机新建库-使用库-新建表-插入数据，ok</span><br><span class=\"line\"><span class=\"bullet\">- </span>从机使用库-查看记录，ok</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis-集群\"><a href=\"#Redis-集群\" class=\"headerlink\" title=\"Redis 集群\"></a>Redis 集群</h3><h4 id=\"搭建-Redis-集群\"><a href=\"#搭建-Redis-集群\" class=\"headerlink\" title=\"搭建 Redis 集群\"></a>搭建 Redis 集群</h4><blockquote>\n<p>3 主 3 从 redis 集群扩缩容配置案例架构说明</p>\n<p><a href=\"https://www.processon.com/view/link/629e20255653bb03f2cc0a14\">https://www.processon.com/view/link/629e20255653bb03f2cc0a14</a></p>\n</blockquote>\n<ol>\n<li><strong>新建 6 个 docker 容器 redis 实例</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-1 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6381</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-2 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6382</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-3 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6383</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-4 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6384</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-5 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6385</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-6 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6386</span><br></pre></td></tr></table></figure>\n\n<p>==如果运行成功，效果如下：==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606234533.png\" alt=\"image-20220606234533562\"></p>\n<blockquote>\n<p>命令分步解释：</p>\n<ul>\n<li><p>docker run：创建并运行 docker 容器实例</p>\n</li>\n<li><p>–name redis-node-6：容器名字</p>\n</li>\n<li><p>–net host：使用宿主机的 IP 和端口，默认</p>\n</li>\n<li><p>–privileged=true：获取宿主机 root 用户权限</p>\n</li>\n<li><p>-v /data/redis/share/redis-node-6:/data：容器卷，宿主机地址:docker 内部地址</p>\n</li>\n<li><p>redis:6.0.8：redis 镜像和版本号</p>\n</li>\n<li><p>–cluster-enabled yes：开启 redis 集群</p>\n</li>\n<li><p>–appendonly yes：开启持久化</p>\n</li>\n<li><p>–port 6386：redis 端口号</p>\n</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li><strong>进入容器 redis-node-1 并为 6 台机器构建集群关系</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">[root@88231 ~]<span class=\"comment\"># docker exec -it redis-node-1 /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建主从关系</span></span><br><span class=\"line\"><span class=\"comment\"># 注意，进入docker容器后才能执行一下命令，且注意自己的真实IP地址</span></span><br><span class=\"line\">redis-cli --cluster create 192.168.88.231:6381 192.168.88.231:6382 192.168.88.231:6383 192.168.88.231:6384 192.168.88.231:6385 192.168.88.231:6386 --cluster-replicas 1</span><br><span class=\"line\"><span class=\"comment\"># --cluster-replicas 1 表示为每个master创建一个slave节点</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235150.png\" alt=\"image-20220606235150386\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235242.png\" alt=\"image-20220606235242475\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235333.png\" alt=\"image-20220606235332969\"></p>\n<p>==一切 OK 的话，3 主 3 从搞定==</p>\n<ol start=\"3\">\n<li><strong>链接进入 6381 作为切入点，查看集群状态</strong></li>\n</ol>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@<span class=\"number\">88231</span>:/data# redis-cli -p <span class=\"number\">6381</span></span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6381</span>&gt; keys *</span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6381</span>&gt; cluster info</span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6381</span>&gt; cluster nodes</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220607000338.png\" alt=\"image-20220607000338016\" style=\"zoom:50%;\" />\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220607000524.png\" alt=\"image-20220607000524306\"></p>\n<h4 id=\"主从容错切换迁移\"><a href=\"#主从容错切换迁移\" class=\"headerlink\" title=\"主从容错切换迁移\"></a>主从容错切换迁移</h4><h5 id=\"数据读写存储\"><a href=\"#数据读写存储\" class=\"headerlink\" title=\"数据读写存储\"></a>数据读写存储</h5><ol>\n<li>启动 6 个 redis 构成的集群并通过 exec 进入</li>\n<li>对 6381 新增两个 key</li>\n<li>防止路由失效加参数 -c 并新增两个 key</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222235.png\" alt=\"image-20220609222228049\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222420.png\" alt=\"image-20220609222420357\"></p>\n<ol start=\"4\">\n<li>查看集群信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222613.png\" alt=\"image-20220609222613143\"></p>\n<h5 id=\"容错切换迁移\"><a href=\"#容错切换迁移\" class=\"headerlink\" title=\"容错切换迁移\"></a>容错切换迁移</h5><ol>\n<li>主 6381 和从机切换，先停止主机 6381</li>\n<li>6381 主机停了，对应的真实从机上位</li>\n<li>6381 作为 1 号主机分配的从机以实际情况为准，具体是几号机器就是几号</li>\n<li>再次查看集群信息</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609223136.png\" alt=\"image-20220609223136321\"></p>\n<blockquote>\n<p>==6381 宕机了，6385 上位成了新的 master==</p>\n<p>备注：本次操作 6381 为主节点，对应的从节点是 6385，对应关系是随机的，每次操作以实际情况为准</p>\n</blockquote>\n<ol start=\"5\">\n<li>启动 6381 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start redis-node-1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609224043.png\" alt=\"image-20220609224042839\"></p>\n<ol start=\"6\">\n<li>再停 6385 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker stop redis-node-5</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609224750.png\" alt=\"image-20220609224750744\"></p>\n<ol start=\"7\">\n<li>再启 6385 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start redis-node-5</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==发现主从节点又恢复之前的状态了==</p>\n</blockquote>\n<ol start=\"8\">\n<li>查看集群状态</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>自己IP:6381</span><br><span class=\"line\"></span><br><span class=\"line\">可以看到主节点分配的</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609230337.png\" alt=\"image-20220609230337692\"></p>\n<h5 id=\"主从扩容案例\"><a href=\"#主从扩容案例\" class=\"headerlink\" title=\"主从扩容案例\"></a>主从扩容案例</h5><ol>\n<li>新建 6387、6388 两个节点+新建后启动+查看是否是 8 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-7 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6387</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-8 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6388</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>进入 6387 容器实例内部</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node-7 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将新增的 6387 节点（空槽号）作为 master 节点加入集群</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> add-node </span>自己实际IP地址:6387 自己实际IP地址:6381</span><br><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> add-node </span>192.168.88.231:6387 192.168.88.231:6381</span><br><span class=\"line\">6387 就是将要作为master新增节点</span><br><span class=\"line\">6381 就是原来集群节点里面的领路人，相当于6387拜拜6381的码头从而找到组织加入集群</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609231034.png\" alt=\"image-20220609231034192\"></p>\n<ol start=\"4\">\n<li>检查集群情况第 1 次</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>真实ip地址:6381</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609231423.png\" alt=\"image-20220609231423755\"></p>\n<ol start=\"5\">\n<li>重新分派槽号</li>\n</ol>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">重新分派槽号</span><br><span class=\"line\"></span><br><span class=\"line\">命令:redis-<span class=\"keyword\">cli</span> --<span class=\"keyword\">cluster</span> reshard IP地址:端口号</span><br><span class=\"line\"></span><br><span class=\"line\">redis-<span class=\"keyword\">cli</span> --<span class=\"keyword\">cluster</span> reshard 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609232741.png\" alt=\"image-20220609232741435\"></p>\n<ol start=\"6\">\n<li>检查集群情况第 2 次</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 真实ip地址:6381</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster check 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233201.png\" alt=\"image-20220609233201196\"></p>\n<blockquote>\n<p>==槽号分派说明==</p>\n<p>为什么 6387 是 3 个新的区间，以前的还是连续？</p>\n<p>重新分配成本太高，所以前 3 家各自匀出来一部分，从 6381/6382/6383 三个旧节点分别匀出 1364 个坑位给新节点 6387</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233346.png\" alt=\"image-20220609233346240\"></p>\n<ol start=\"7\">\n<li>为主节点 6387 分配从节点 6388</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">命令：redis-cli --cluster<span class=\"built_in\"> add-node </span>ip:新slave端口 ip:新master端口 --cluster-slave --cluster-master-id 新主机节点ID</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> add-node </span>192.168.88.231:6388 192.168.88.231:6387 --cluster-slave --cluster-master-id 7206137ce4e66c0464fa0fa00472202ce5b16792</span><br><span class=\"line\">-------这个是6387的编号，按照自己实际情况</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233720.png\" alt=\"image-20220609233720722\"></p>\n<ol start=\"8\">\n<li>检查集群第 3 次</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>192.168.88.231:6382</span><br><span class=\"line\"></span><br><span class=\"line\">4 主 4 从</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233902.png\" alt=\"image-20220609233902550\"></p>\n<h5 id=\"主从缩容案例\"><a href=\"#主从缩容案例\" class=\"headerlink\" title=\"主从缩容案例\"></a>主从缩容案例</h5><blockquote>\n<p>目的：6387 和 6388 下线</p>\n</blockquote>\n<ol>\n<li>检查集群情况 - 获得 6388 的节点 ID</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231:6382</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223609.png\" alt=\"image-20220610223609176\"></p>\n<ol start=\"2\">\n<li>将 6388 删除 从集群中将 4 号从节点 6388 删除</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">命令：redis-cli --cluster del-node ip:从机端口 从机6388节点ID</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster del-node 192.168.88.231:6388 1fedf6a6f9acfbdba6951a532cd2d68e4546898e</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223709.png\" alt=\"image-20220610223709085\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231:6382</span><br></pre></td></tr></table></figure>\n\n<p>==检查一下发现，6388 被删除了，只剩下七台机器了。==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223901.png\" alt=\"image-20220610223900954\"></p>\n<ol start=\"3\">\n<li>将 6387 的槽号清空，重新分配，本例将清出来的槽号都给 6381</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster reshard 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610224116.png\" alt=\"image-20220610224116496\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610224735.png\" alt=\"image-20220610224657149\"></p>\n<blockquote>\n<p>将 6387 节点的槽号都分配给 6381</p>\n</blockquote>\n<ol start=\"4\">\n<li>检查集群情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231 6382</span><br><span class=\"line\"></span><br><span class=\"line\">4096 个槽位都指给 6381，它变成了 8192 个槽位，相当于全部都给 6381了</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225027.png\" alt=\"image-20220610225027291\"></p>\n<ol start=\"5\">\n<li>删除 6387 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">命令：redis-cli --cluster del-node ip:端口 6387节点ID</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster del-node 192.168.88.231:6387 7206137ce4e66c0464fa0fa00472202ce5b16792</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225145.png\" alt=\"image-20220610225144956\"></p>\n<ol start=\"6\">\n<li>再次检查集群情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231 6382</span><br><span class=\"line\"></span><br><span class=\"line\">恢复之前的 3 主 3 从，缩容成功！</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225344.png\" alt=\"image-20220610225344237\"></p>\n<h2 id=\"DockerFile\"><a href=\"#DockerFile\" class=\"headerlink\" title=\"DockerFile\"></a>DockerFile</h2><h3 id=\"Dockerfile-介绍\"><a href=\"#Dockerfile-介绍\" class=\"headerlink\" title=\"Dockerfile 介绍\"></a>Dockerfile 介绍</h3><p><code>Dockerfile</code> 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p>\n<blockquote>\n<p>官网：<a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></p>\n</blockquote>\n<p>构建步骤：</p>\n<ol>\n<li>编写一个 <code>Dockerfile</code> 文件</li>\n<li><code>docker bulid</code> 构建为一个镜像</li>\n<li><code>docker run</code> 运行镜像</li>\n<li><code>docker push</code> 发布镜像（DockerHub. 阿里云镜像仓库）</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611202748.png\" alt=\"image-20220611202748238\"></p>\n<h3 id=\"Dockerfile-构建过程\"><a href=\"#Dockerfile-构建过程\" class=\"headerlink\" title=\"Dockerfile 构建过程\"></a>Dockerfile 构建过程</h3><h4 id=\"Dockerfile-基础知识\"><a href=\"#Dockerfile-基础知识\" class=\"headerlink\" title=\"Dockerfile 基础知识\"></a>Dockerfile 基础知识</h4><ol>\n<li>每个保留关键字（指令）都==必须是大写字母==且后面要跟随至少一个参数</li>\n<li>指令按照从上到下，顺序执行</li>\n<li><code>#</code> 表示注释</li>\n<li>每条指令都会创建一个新的镜像层并对镜像进行提交</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211230224706.png\" alt=\"image-20211230224659329\"></p>\n<h4 id=\"Docker-执行-Dockerfile-的大致流程\"><a href=\"#Docker-执行-Dockerfile-的大致流程\" class=\"headerlink\" title=\"Docker 执行 Dockerfile 的大致流程\"></a>Docker 执行 Dockerfile 的大致流程</h4><ol>\n<li>docker 从基础镜像运行一个容器</li>\n<li>执行一条指令并对容器做出修改</li>\n<li>docker 再基于刚提交的镜像运行一个新容器</li>\n<li>执行 Dockerfile 中的下一条指令知道所有指令都执行完成</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>从应用软件的角度看，<code>Dockerfile</code>、<code>Docker镜像</code>与<code>Docker容器</code>分别代表软件的三个不同阶段：</p>\n<ul>\n<li><code>Dockerfile</code>是软件的原材料</li>\n<li><code>Docker镜像</code>是软件的交付品</li>\n<li><code>Docker容器</code>则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例</li>\n</ul>\n<p>==Dockerfile 面向开发，Docker 镜像成为交付标准，Docker 容器则涉及部署与运维，三者缺一不可，合力充当 Docker 体系的基石==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611204149.png\" alt=\"image-20220611204149366\"></p>\n<ol>\n<li><p>Dockerfile，需要定义一个 Dockerfile，Dockerfile 定义了进程需要的一切东西。Dockerfile 涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计 namespace 的权限控制)等等;</p>\n</li>\n<li><p>Docker 镜像，在用 Dockerfile 定义一个文件之后，docker build 时会产生一个 Docker 镜像，当运行 Docker 镜像时会真正开始提供服务;</p>\n</li>\n<li><p>Docker 容器，容器是直接提供服务的。</p>\n</li>\n</ol>\n<h3 id=\"DockerFile-的保留字指令\"><a href=\"#DockerFile-的保留字指令\" class=\"headerlink\" title=\"DockerFile 的保留字指令\"></a>DockerFile 的保留字指令</h3><ul>\n<li><p><code>FROM</code>：基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是 FROM</p>\n</li>\n<li><p><code>MAINTAINER</code>：镜像维护者的姓名和邮箱地址</p>\n</li>\n<li><p><code>RUN</code>：容器构建时需要运行的命令，包含两种格式：</p>\n<ul>\n<li>shell 格式：</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611204952.png\" alt=\"image-20220611204952312\"></p>\n<ul>\n<li>exec 格式：</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611205003.png\" alt=\"image-20220611205003786\"></p>\n<ul>\n<li><code>RUN</code> 是在 <code>docker build</code> 时运行</li>\n</ul>\n</li>\n<li><p><code>EXPOSE</code>：当前容器对外暴露出的端口</p>\n</li>\n<li><p><code>WORKDIR</code>：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p>\n</li>\n<li><p><code>USER</code>：指定该镜像以什么样的用户去执行，如果都不指定，默认是 root</p>\n</li>\n<li><p><code>ENV</code>：用来在构建镜像过程中设置环境变量</p>\n<ul>\n<li>```<br>ENV MY_PATH /usr/mytest<br>这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样；<br>也可以在其它指令中直接使用这些环境变量，比如：WORKDIR $MY_PATH<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `<span class=\"keyword\">ADD</span><span class=\"language-bash\">`：将宿主机目录下的文件拷贝进镜像且会自动处理 URL 和解压 tar 压缩包</span></span><br><span class=\"line\"></span><br><span class=\"line\">- `<span class=\"keyword\">COPY</span><span class=\"language-bash\">`：类似 ADD，拷贝文件和目录到镜像中</span></span><br><span class=\"line\"></span><br><span class=\"line\">  - ```dockerfile</span><br><span class=\"line\">    <span class=\"comment\"># 将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">COPY</span><span class=\"language-bash\"> src dest</span></span><br><span class=\"line\">    <span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;dest&quot;</span>]</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># &lt;src源路径&gt;：源文件或者源目录</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;dest目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><code>VOLUME</code>：容器数据卷，用于数据保存和持久化工作</p>\n</li>\n<li><p><code>CMD</code>：指定容器启动后的要干的事情</p>\n<ul>\n<li><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611210408.png\" alt=\"image-20220611210408046\"></li>\n<li><strong>注意：Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</strong></li>\n<li>它和前面 <code>RUN</code> 命令的区别：<ul>\n<li><code>CMD</code> 是在 <code>docker run</code> 时运行</li>\n<li><code>RUN</code> 是在 <code>docker build</code> 时运行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>ENTRYPOINT</code>：也是用来指定一个容器启动时要运行的命令</p>\n<ul>\n<li><p>类似于 CMD 指令，<strong>但是 ENTRYPOINT 不会被 docker run 后面的命令覆盖</strong>， 而且这些命令行参数<strong>会被当作参数送给 ENTRYPOINT 指令指定的程序</strong></p>\n</li>\n<li><p><code>ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;...]</code></p>\n</li>\n<li><p>ENTRYPOINT 可以和 CMD 一起用，一般是<strong>变参</strong>才会使用 CMD，这里的 CMD 等于是在给 ENTRYPOINT 传参。当指定了 ENTRYPOINT 后，CMD 的含义就发生了变化，不再是直接运行其命令而是将 CMD 的内容作为参数传递给 ENTRYPOINT 指令，他两个组合会变成 <code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></p>\n</li>\n<li><p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数</p>\n</li>\n<li><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效</p>\n</li>\n</ul>\n</li>\n<li><p>小总结</p>\n<ul>\n<li><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220618230538.png\" alt=\"image-20220618230538863\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实战案例\"><a href=\"#实战案例\" class=\"headerlink\" title=\"实战案例\"></a>实战案例</h3><p>自定义镜像 ==&gt; <code>mycentosjava8</code></p>\n<p><strong>要求：</strong></p>\n<ul>\n<li>Centos7 镜像具备 vim+ifconfig+jdk8</li>\n<li>准备 jdk8 的安装包（<code>jdk-8u251-linux-x64.tar.gz</code>）</li>\n</ul>\n<ol>\n<li><strong>准备编写 Dockerfile 文件</strong></li>\n</ol>\n<p>在 <code>/home</code> 目录下建一个 <code>myfile</code> 文件夹，并将 <code>jdk8</code> 的安装包放进去：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619202515.png\" alt=\"image-20220619202508648\"></p>\n<p><code>Dockerfile</code> 文件内容如下：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos:centos7</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Kyire6&lt;kyire666.outlook.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYPATH /usr/local</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"variable\">$MYPATH</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装vim编辑器</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install vim</span></span><br><span class=\"line\"><span class=\"comment\">#安装ifconfig命令查看网络IP</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install net-tools</span></span><br><span class=\"line\"><span class=\"comment\">#安装java8及lib库</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install glibc.i686</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> /usr/local/java</span></span><br><span class=\"line\"><span class=\"comment\">#ADD 是相对路径jar,把jdk-8u251-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> jdk-8u251-linux-x64.tar.gz /usr/local/java/</span></span><br><span class=\"line\"><span class=\"comment\">#配置java环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class=\"number\">8.0</span>_251</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$MYPATH</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;success--------------ok&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> /bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>执行构建命令</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t 新镜像名:TAG .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如</span></span><br><span class=\"line\">docker build -t centosjava8:1.0 .</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：命令要在 <code>Dockerfile</code> 的同级目录下执行，不要忘了命令结尾的 <code>.</code></strong></p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619203258.png\" alt=\"image-20220619203258616\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619204718.png\" alt=\"image-20220619204718396\"></p>\n<ol start=\"3\">\n<li><strong>运行容器</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it centosjava8:1.0 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619212101.png\" alt=\"image-20220619212100997\"></p>\n<h3 id=\"虚悬镜像\"><a href=\"#虚悬镜像\" class=\"headerlink\" title=\"虚悬镜像\"></a>虚悬镜像</h3><p>虚悬镜像就是仓库名、标签都是 <code>&lt;none&gt;</code> 的镜像，也称为 <code>dangling image</code></p>\n<p><strong>用 Dockerfile 生成一个</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编写 Dockerfile 文件</span></span><br><span class=\"line\">vim Dockerfile</span><br><span class=\"line\"><span class=\"keyword\">from</span> ubuntu</span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;action is success&#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build 镜像</span></span><br><span class=\"line\">docker build .</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619214708.png\" alt=\"image-20220619214708171\"></p>\n<p><strong>查看虚悬镜像</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images -f dangling=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619214819.png\" alt=\"image-20220619214819128\"></p>\n<p><strong>删除所有虚悬镜像</strong></p>\n<p>虚悬镜像已经失去存在价值，可以删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker image prune</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619215102.png\" alt=\"image-20220619215102621\"></p>\n<h3 id=\"发布自己的镜像\"><a href=\"#发布自己的镜像\" class=\"headerlink\" title=\"发布自己的镜像\"></a>发布自己的镜像</h3><blockquote>\n<p>DockerHub</p>\n</blockquote>\n<ol>\n<li><p>地址 <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a> 注册自己的账号！</p>\n</li>\n<li><p>确保这个账号可以登录</p>\n</li>\n<li><p>在服务器上提交自己的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ouwen ~]# docker login --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class=\"line\"></span><br><span class=\"line\">Log in to a Docker registry.</span><br><span class=\"line\">If no server is specified, the default is defined by the daemon.</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -p, --password string   Password</span><br><span class=\"line\">      --password-stdin    Take the password from stdin</span><br><span class=\"line\">  -u, --username string   Username</span><br><span class=\"line\">[root@ouwen ~]# docker login -u ouwen666</span><br><span class=\"line\">Password:</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <code>docker login</code> 登录之后就可以提交镜像了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 使用 docker tag 命令修改镜像版本</span></span><br><span class=\"line\">[root@ouwen ~]# docker tag 352abc3918b1 ouwen666/tomcat:1.0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 使用 docker push 命令提交镜像到 DockerHub</span></span><br><span class=\"line\">[root@ouwen ~]# docker push ouwen666/tomcat:1.0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103135111.png\" alt=\"image-20220103135111272\"></p>\n<blockquote>\n<p>发现：提交的时候也是按照镜像的层级来的！</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>阿里云镜像</p>\n</blockquote>\n<ol>\n<li><p>登录阿里云</p>\n</li>\n<li><p>找到容器镜像服务</p>\n</li>\n<li><p>创建镜像仓库</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103140835.png\" alt=\"image-20220103140835560\"></p>\n</li>\n<li><p>浏览仓库信息</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103140926.png\" alt=\"image-20220103140926596\"></p>\n</li>\n</ol>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103142038.png\" alt=\"image-20220103142038290\"></p>\n<h2 id=\"Docker-网络\"><a href=\"#Docker-网络\" class=\"headerlink\" title=\"Docker 网络\"></a>Docker 网络</h2><h3 id=\"docker0-网卡\"><a href=\"#docker0-网卡\" class=\"headerlink\" title=\"docker0 网卡\"></a><code>docker0</code> 网卡</h3><p>docker 服务启动后，会产生一个名为 <code>docker0</code> 的虚拟网桥，使用 <code>ip addr</code> 查看本机 ip</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220104001129.png\" alt=\"image-20220103235821684\"></p>\n<h3 id=\"docker-网络常用命令\"><a href=\"#docker-网络常用命令\" class=\"headerlink\" title=\"docker 网络常用命令\"></a>docker 网络常用命令</h3><h4 id=\"All-命令\"><a href=\"#All-命令\" class=\"headerlink\" title=\"All 命令\"></a>All 命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220625214901.png\" alt=\"image-20220625214854077\"></p>\n<h4 id=\"查看网络\"><a href=\"#查看网络\" class=\"headerlink\" title=\"查看网络\"></a>查看网络</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220625215035.png\" alt=\"image-20220625215035376\"></p>\n<h4 id=\"查看网络源数据\"><a href=\"#查看网络源数据\" class=\"headerlink\" title=\"查看网络源数据\"></a>查看网络源数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network inspect xxx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002156.png\" alt=\"image-20220626002156711\"></p>\n<h4 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network create xxx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除网络\"><a href=\"#删除网络\" class=\"headerlink\" title=\"删除网络\"></a>删除网络</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network <span class=\"built_in\">rm</span> xxx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002407.png\" alt=\"image-20220626002407749\"></p>\n<blockquote>\n<p><strong>docker 网络能干嘛？</strong></p>\n<ul>\n<li>容器间的互联和通信以及端口映射</li>\n<li>容器 IP 变动时可以通过服务名直接进行网络通信，进而不受到影响</li>\n</ul>\n</blockquote>\n<h3 id=\"网络模式\"><a href=\"#网络模式\" class=\"headerlink\" title=\"网络模式\"></a>网络模式</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002547.png\" alt=\"image-20220626002547570\"></p>\n<ul>\n<li>bridge 模式：使用 –network bridge 指定，默认使用 docker0</li>\n<li>host 模式：使用 –network host 指定</li>\n<li>none 模式：使用 –network none 指定</li>\n<li>container 模式：使用 –network container:NAME 或者容器 ID 指定</li>\n</ul>\n<p><strong>容器实例内默认网络 IP 生产规则</strong></p>\n<ol>\n<li>先启动两个 Ubuntu 容器实例</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002940.png\" alt=\"image-20220626002940194\"></p>\n<ol start=\"2\">\n<li><code>docker inspect 容器 ID or 容器名字</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003252.png\" alt=\"image-20220626003252589\"></p>\n<ol start=\"3\">\n<li>关闭 u2 实例，新建 u3，查看 IP 变化</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003453.png\" alt=\"image-20220626003453087\"></p>\n<blockquote>\n<p>结论：</p>\n<p><strong>docker 容器内部的 IP 是有可能会发生变化的</strong></p>\n</blockquote>\n<h4 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"bridge\"></a>bridge</h4><p>Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），该桥接网络的名称为 docker0，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查看 bridge 网络的详细信息，并通过 <span class=\"keyword\">grep</span> 获取名称项</span><br><span class=\"line\">docker network <span class=\"keyword\">inspect</span> bridge | <span class=\"keyword\">grep</span> name</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003931.png\" alt=\"image-20220626003931893\"></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">ifconfig <span class=\"string\">| grep docker</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004014.png\" alt=\"image-20220626004014292\"></p>\n<blockquote>\n<p><strong>说明：</strong></p>\n<ol>\n<li><p>Docker 使用 Linux 桥接，在宿主机虚拟一个 Docker 容器网桥(docker0)，Docker 启动一个容器时会根据 Docker 网桥的网段分配给容器一个 IP 地址，称为 Container-IP，同时 Docker 网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的 Container-IP 直接通信</p>\n</li>\n<li><p>docker run 的时候，没有指定 network 的话默认使用的网桥模式就是 bridge，使用的就是 docker0。在宿主机 ifconfig,就可以看到 docker0 和自己 create 的 network(后面讲)eth0，eth1，eth2……代表网卡一，网卡二，网卡三……，lo 代表 127.0.0.1，即 localhost，inet addr 用来表示网卡的 IP 地址</p>\n</li>\n<li><p>网桥 docker0 创建一对对等虚拟设备接口一个叫 veth，另一个叫 eth0，成对匹配</p>\n<ol>\n<li>整个宿主机的网桥模式都是 docker0，类似一个交换机有一堆接口，每个接口叫 veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫 veth pair）</li>\n<li>每个容器实例内部也有一块网卡，每个接口叫 eth0</li>\n<li>docker0 上面的每个 veth 匹配某个容器实例内部的 eth0，两两配对，一一匹配</li>\n</ol>\n</li>\n</ol>\n<p><strong>通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下,会从这个网关下各自拿到分配的 ip，此时两个容器的网络是互通的。</strong></p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004158.png\" alt=\"image-20220626004158705\"></p>\n<p><strong>两两匹配验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8080   --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8082:8080   --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004537.png\" alt=\"image-20220626004536998\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004743.png\" alt=\"image-20220626004743381\"></p>\n<h4 id=\"host\"><a href=\"#host\" class=\"headerlink\" title=\"host\"></a>host</h4><p>直接使用宿主机的 IP 地址与外界进行通信，不再需要额外进行 NAT 转换。</p>\n<blockquote>\n<p><strong>说明：</strong></p>\n<p>容器将不会获得一个独立的 Network Namespace， 而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡而是使用宿主机的 IP 和端口。</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004852.png\" alt=\"image-20220626004852511\"></p>\n<p><strong>验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8083:8080 --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005212.png\" alt=\"image-20220626005212574\"></p>\n<p><strong>问题：</strong></p>\n<p>docker 容器启动时出现了警告</p>\n<p><strong>原因：</strong></p>\n<p>docker 启动时指定 –network=host 或 -net=host，如果还指定了 -p 映射端口，那这个时候就会有此警告，并且通过-p 设置的参数将不会起到任何作用，端口号会以主机端口号为主，重复时则递增。</p>\n<p><strong>解决:</strong></p>\n<p>解决的办法就是使用 docker 的其他网络模式，例如 –network=bridge，这样就可以解决问题，或者直接无视…</p>\n<p><strong>正确做法：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>这样就不会出现之前的警告了，查看容器实例内部：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005512.png\" alt=\"image-20220626005512017\"></p>\n<blockquote>\n<p>没有设置-p 的端口映射了，如何访问启动的 tomcat83？</p>\n<p>http://宿主机IP:8080/</p>\n<p><strong>在 CentOS 里面用默认的火狐浏览器访问容器内的 tomcat83 看到访问成功，因为此时容器的 IP 借用主机的，所以容器共享宿主机网络 IP，这样的好处是外部主机与容器可以直接通信。</strong></p>\n</blockquote>\n<h4 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h4><p>在 none 模式下，并不为 Docker 容器进行任何网络配置。 也就是说，这个 Docker 容器没有网卡、IP、路由等信息，只有一个 lo，需要我们自己为 Docker 容器添加网卡、配置 IP 等。禁用网络功能，只有 lo 标识(就是 127.0.0.1 表示本地回环)</p>\n<p><strong>验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8084:8080 --network none --name tomcat84 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>进入容器内部查看</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005846.png\" alt=\"image-20220626005846474\"></p>\n<p>在容器外部查看</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005936.png\" alt=\"image-20220626005935898\"></p>\n<h4 id=\"container\"><a href=\"#container\" class=\"headerlink\" title=\"container\"></a>container</h4><p>新建的容器和已经存在的一个容器共享一个网络 IP 配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010017.png\" alt=\"image-20220626010017092\"></p>\n<p><strong>验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8085:8080 --name tomcat85 billygoo/tomcat8-jdk8</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8086:8080 --network container:tomcat85 --name tomcat86 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010148.png\" alt=\"image-20220626010148299\"></p>\n<p>相当于 tomcat86 和 tomcat85 公用同一个 ip 同一个端口，导致端口冲突！</p>\n<p><strong>换一个镜像进行验证</strong></p>\n<blockquote>\n<p>Alpine 操作系统是一个面向安全的轻型 Linux 发行版</p>\n<p>Alpine Linux 是一款独立的、非商业的通用 Linux 发行版，专为追求安全性、简单性和资源效率的用户而设计。 可能很多人没听说过这个 Linux 发行版本，但是经常用 Docker 的朋友可能都用过，因为他小，简单，安全而著称，所以作为基础镜像是非常好的一个选择，可谓是麻雀虽小但五脏俱全，镜像非常小巧，不到 6M 的大小，所以特别适合容器打包。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --name alpine1  alpine /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -it --network container:alpine1 --name alpine2  alpine /bin/sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010511.png\" alt=\"image-20220626010511330\"></p>\n<p>假如此时关闭 alpine1，再看看 alpin2</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010625.png\" alt=\"image-20220626010625716\"></p>\n<p>发现 <code>107: eth0@if108</code> 已经消失</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010751.png\" alt=\"image-20220626010751877\"></p>\n<h3 id=\"自定义网络\"><a href=\"#自定义网络\" class=\"headerlink\" title=\"自定义网络\"></a>自定义网络</h3><h4 id=\"过时的-link\"><a href=\"#过时的-link\" class=\"headerlink\" title=\"过时的 link\"></a>过时的 link</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010828.png\" alt=\"image-20220626010828576\"></p>\n<h4 id=\"使用自定义网络的好处\"><a href=\"#使用自定义网络的好处\" class=\"headerlink\" title=\"使用自定义网络的好处\"></a>使用自定义网络的好处</h4><p><strong>before</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8080   --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class=\"line\">docker run -d -p 8082:8080   --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>启动成功使用 docker exec 进入到容器内部</p>\n<p><strong>按照 IP 地址 ping 是 OK 的</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626011951.png\" alt=\"image-20220626011951406\"></p>\n<p>但是无法按照服务名 ping</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012135.png\" alt=\"image-20220626012135798\"></p>\n<p><strong>after</strong></p>\n<p>自定义桥接网络，自定义网络默认使用的就是桥接网络 – bridge</p>\n<ol>\n<li>新建自定义网络</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012308.png\" alt=\"image-20220626012308361\"></p>\n<ol start=\"2\">\n<li>新建容器并加入上一步新建的自定义网络</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8080 --network my_network  --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8082:8080 --network my_network  --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>互相 ping 测试</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012536.png\" alt=\"image-20220626012536459\"></p>\n<blockquote>\n<p><strong>结论</strong></p>\n<p><strong><em>自定义网络本身就维护好了主机名和 ip 的对应关系（ip 和域名都能通）</em></strong></p>\n</blockquote>\n<h2 id=\"Docker-平台架构图解\"><a href=\"#Docker-平台架构图解\" class=\"headerlink\" title=\"Docker 平台架构图解\"></a>Docker 平台架构图解</h2><h3 id=\"整体说明\"><a href=\"#整体说明\" class=\"headerlink\" title=\"整体说明\"></a>整体说明</h3><p>从其架构和运行流程来看，Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。</p>\n<p>Docker 运行的基本流程为：</p>\n<ol>\n<li>用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。</li>\n<li>Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。</li>\n<li>Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。</li>\n<li>Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver 将下载镜像以 Graph 的形式存储。</li>\n<li>当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境。</li>\n<li>当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。</li>\n<li>Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作。</li>\n</ol>\n<h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012732.png\" alt=\"image-20220626012732507\"></p>\n<h2 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h2><blockquote>\n<p>官方文档：<a href=\"https://docs.docker.com/compose/\">https://docs.docker.com/compose/</a></p>\n</blockquote>\n<h3 id=\"什么是-Docker-Compose\"><a href=\"#什么是-Docker-Compose\" class=\"headerlink\" title=\"什么是 Docker Compose\"></a>什么是 Docker Compose</h3><p><code>Docker Compose</code> 是一个用于定义和运行多容器 <code>Docker</code> 应用程序的工具。使用 <code>Compose</code>，您可以使用 <code>YAML</code> 文件来配置应用程序的服务。然后，使用单个命令，从配置创建并启动所有服务</p>\n<p>使用 <code>Docker Compose</code> 基本上有以下三步：</p>\n<ol>\n<li>使用 定义应用的环境，以便可以在任何位置重现它。<code>Dockerfile</code></li>\n<li>定义构成应用的服务，以便它们可以在隔离的环境中一起运行。<code>docker-compose.yml</code></li>\n<li>运行<a href=\"https://docs.docker.com/compose/cli-command/\">Docker Compose</a>将启动并运行整个应用。您也可以使用 docker-compose 二进制文件运行。<code>docker compose up``docker-compose up</code></li>\n</ol>\n<p><code>docker-compose.yml</code> 示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.9&quot;</span>  <span class=\"comment\"># optional since v1.27.0</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:5000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">.:/code</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">logvolume01:/var/log</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">logvolume01:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Docker-Compose\"><a href=\"#安装-Docker-Compose\" class=\"headerlink\" title=\"安装 Docker Compose\"></a>安装 Docker Compose</h3><ol>\n<li>下载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 官网地址</span></span><br><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 国内镜像</span></span><br><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220404124103.png\" alt=\"image-20220404124103270\"></p>\n<ol start=\"2\">\n<li>给 <code>docker-compose</code> 文件授可执行权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试安装是否成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>卸载 <code>docker-compose</code></li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220404124418.png\" alt=\"image-20220404124418121\"></p>\n<h3 id=\"Compose-核心概念\"><a href=\"#Compose-核心概念\" class=\"headerlink\" title=\"Compose 核心概念\"></a>Compose 核心概念</h3><p><strong>一文件</strong></p>\n<p><code>docker-compose.yml</code></p>\n<p><strong>两要素</strong></p>\n<ul>\n<li>服务（service)</li>\n</ul>\n<p>一个个应用容器实例，比如订单微服务、库存微服务、mysql 容器、nginx 容器或者 redis 容器</p>\n<ul>\n<li>工程（project）</li>\n</ul>\n<p>由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义</p>\n<h3 id=\"Compose-使用的三个步骤\"><a href=\"#Compose-使用的三个步骤\" class=\"headerlink\" title=\"Compose 使用的三个步骤\"></a>Compose 使用的三个步骤</h3><ol>\n<li>编写 Dockerfile 定义各个微服务应用并构建出对应的镜像文件</li>\n<li>使用 docker-compose.yml 定义一个完整业务单元，安排好整体应用中的各个容器服务</li>\n<li>最后，执行 docker-compose up 命令 来启动并运行整个应用程序，完成一键部署上线</li>\n</ol>\n<h3 id=\"Compose-常用命令\"><a href=\"#Compose-常用命令\" class=\"headerlink\" title=\"Compose 常用命令\"></a>Compose 常用命令</h3><p><strong>查看帮助信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose -h|<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>命令选项</strong></p>\n<ul>\n<li>-f, –file FILE 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定；</li>\n<li>-p, –project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名；</li>\n<li>–x-networking 使用 Docker 的可拔插网络后端特性；</li>\n<li>–x-network-driver DRIVER 指定网络后端的驱动，默认为 bridge；</li>\n<li>–verbose 输出更多调试信息；</li>\n<li>-v, –version 打印版本并退出；</li>\n<li>-H, –host HOST，远程操作 docker，被操作的 docker 需要开放 2375 端口</li>\n</ul>\n<p><strong>常用命令</strong></p>\n<ul>\n<li><strong>up</strong>：启动所有 docker-compose 服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br><span class=\"line\"><span class=\"comment\"># 启动所有docker-compose服务并后台运行</span></span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>down</strong>：停止并删除容器、网络、卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>exec</strong>：进入容器实例内部</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose <span class=\"built_in\">exec</span> docker-compose.yml文件中写的服务<span class=\"built_in\">id</span> /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ps</strong>：展示当前 docker-compose 编排过的运行的所有容器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose ps</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>top</strong>：展示当前 docker-compose 编排过的容器进程</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose top</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>logs</strong>：查看容器输出日志</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose logs yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>build</strong>：构建或者重新构建服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>start</strong>：启动服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose start yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>stop</strong>：停止服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose stop yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>restart</strong>：重启服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose restart yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>config</strong>：检查配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有问题才输出</span></span><br><span class=\"line\">docker-compose config -q</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>scale</strong>：设置指定服务运行容器的个数，以 <code>service=num</code> 形式指定</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose scale yml里面的服务<span class=\"built_in\">id</span>=实例个数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-compose-yml-文件规则\"><a href=\"#docker-compose-yml-文件规则\" class=\"headerlink\" title=\"docker-compose.yml 文件规则\"></a>docker-compose.yml 文件规则</h3><p>官网地址：<a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/\">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p>\n<ul>\n<li><strong>version</strong>：指定 docker-compose.yml 文件的写法格式</li>\n<li><strong>services</strong>：服务，多个容器集合</li>\n<li><strong>build</strong>：配置构建时，Compose 会利用它自动构建镜像，该值可以是一个路径，也可以是一个对象，用于指定 Dockerfile 参数</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">build:</span> <span class=\"string\">./dir</span></span><br><span class=\"line\"><span class=\"string\">---------------</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">context:</span> <span class=\"string\">./dir</span></span><br><span class=\"line\">    <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span></span><br><span class=\"line\">    <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"attr\">buildno:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>command</strong>：覆盖容器启动后默认执行的命令</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">command:</span> <span class=\"string\">bundle</span> <span class=\"string\">exec</span> <span class=\"string\">thin</span> <span class=\"string\">-p</span> <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"string\">----------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">command:</span> [<span class=\"string\">bundle</span>,<span class=\"string\">exec</span>,<span class=\"string\">thin</span>,<span class=\"string\">-p</span>,<span class=\"number\">3000</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dns</strong>：配置 dns 服务器，可以是一个值或列表</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dns:</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></span><br><span class=\"line\"><span class=\"string\">------------</span></span><br><span class=\"line\"><span class=\"attr\">dns:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">9.9</span><span class=\"number\">.9</span><span class=\"number\">.9</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dns_search</strong>：配置 DNS 搜索域，可以是一个值或列表</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dns_search:</span> <span class=\"string\">example.com</span></span><br><span class=\"line\"><span class=\"string\">------------------------</span></span><br><span class=\"line\"><span class=\"attr\">dns_search:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dc1.example.com</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dc2.example.com</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>environment</strong>：环境变量配置，可以用数组或字典两种方式</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"attr\">RACK_ENV:</span> <span class=\"string\">development</span></span><br><span class=\"line\">    <span class=\"attr\">SHOW:</span> <span class=\"string\">&#x27;ture&#x27;</span></span><br><span class=\"line\"><span class=\"string\">-------------------------</span></span><br><span class=\"line\"><span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">RACK_ENV=development</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">SHOW=ture</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>env_file</strong>：从文件中获取环境变量，可以指定一个文件路径或路径列表，其优先级低于 environment 指定的环境变量</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env_file:</span> <span class=\"string\">.env</span></span><br><span class=\"line\"><span class=\"string\">---------------</span></span><br><span class=\"line\"><span class=\"attr\">env_file:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./common.env</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>expose</strong>：暴露端口，只将端口暴露给连接的服务，而不暴露给主机</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">expose:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;3000&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>image</strong>：指定服务所使用的镜像</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">java</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>network_mode</strong>：设置网络模式</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;bridge&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;host&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;service:[service name]&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;container:[container name/id]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ports</strong>：对外暴露的端口定义，和 expose 对应</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ports:</span>   <span class=\"comment\"># 暴露端口信息  - &quot;宿主机端口:容器暴露端口&quot;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&quot;8763:8763&quot;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&quot;8763:8763&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>links</strong>：将指定容器连接到当前连接，可以设置别名，避免 ip 方式导致的容器重启动态改变的无法连接情况</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links:</span>    <span class=\"comment\"># 指定服务名称:别名</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker-compose-eureka-server:compose-eureka</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>volumes</strong>：卷挂载路径</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">/lib</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">/var</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-轻量级可视化工具-Portainer\"><a href=\"#Docker-轻量级可视化工具-Portainer\" class=\"headerlink\" title=\"Docker 轻量级可视化工具 Portainer\"></a>Docker 轻量级可视化工具 Portainer</h2><p>Portainer 是一款轻量级的应用，它提供了图形化界面，用于方便地管理 Docker 环境，包括单机环境和集群环境。</p>\n<p>docker 命令安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方版本</span></span><br><span class=\"line\">docker run -d -p 8000:8000 -p 9010:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 中文版本</span></span><br><span class=\"line\">docker run -d --restart=always --name=<span class=\"string\">&quot;portainer&quot;</span> -p 9010:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data 6053537/portainer-ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># EE 商业版本（public 为中文汉化资源）</span></span><br><span class=\"line\">docker run -d -p 8000:8000 -p 9010:9000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /u01/portainer/portainer_data:/data -v /u01/portainer/public:/public portainer/portainer-ee:2.10.0</span><br></pre></td></tr></table></figure>\n\n<p>第一次登录需要创建 admin 用户，访问地址：<code>xxx.xxx.xxx.xxx:9010</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203605.png\" alt=\"image-20211218203604987\"></p>\n<p>选择 local 选项卡后本地 docker 详细信息展示</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203652.png\" alt=\"image-20211218203652466\"></p>\n<p>管理本地环境</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203840.png\" alt=\"image-20211218203840461\"></p>\n<h2 id=\"Docker-Swarm\"><a href=\"#Docker-Swarm\" class=\"headerlink\" title=\"Docker Swarm\"></a>Docker Swarm</h2><blockquote>\n<p>官方文档：<a href=\"https://docs.docker.com/engine/swarm/\">https://docs.docker.com/engine/swarm/</a></p>\n</blockquote>\n<h3 id=\"什么是-Docker-Swarm\"><a href=\"#什么是-Docker-Swarm\" class=\"headerlink\" title=\"什么是 Docker Swarm\"></a>什么是 Docker Swarm</h3><p>Swarm 是 <a href=\"https://www.docker.com/\">Docker</a> 官方提供的一款集群管理工具，其主要作用是把若干台 Docker 主机抽象为一个整体，并且通过一个入口统一管理这些 Docker 主机上的各种 Docker 资源。</p>\n<p>Docker Swarm 和 Docker Compose 一样，都是 Docker 官方容器编排项目，但不同的是，Docker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务。</p>\n<h3 id=\"Docker-Swarm-架构图\"><a href=\"#Docker-Swarm-架构图\" class=\"headerlink\" title=\"Docker Swarm 架构图\"></a>Docker Swarm 架构图</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220405181654.png\" alt=\"image-20220405181654649\"></p>\n<p>上图可以看出，Swarm 是典型的 master-slave 结构，通过发现服务来选举 manager。manager 是中心管理节点，各个 node 上运行 agent 接受 manager 的统一管理，集群会自动通过 Raft 协议分布式选举出 manager 节点，无需额外的发现服务支持，避免了单点的瓶颈问题，同时也内置了 DNS 的负载均衡和对外部负载均衡机制的集成支持。</p>\n<h3 id=\"Swarm-关键概念\"><a href=\"#Swarm-关键概念\" class=\"headerlink\" title=\"Swarm 关键概念\"></a>Swarm 关键概念</h3><ul>\n<li><strong>Swarm（群）</strong></li>\n</ul>\n<p>嵌入在 Docker 引擎中的集群管理和编排功能是使用<a href=\"https://github.com/docker/swarmkit/\">swarmkit 构建的</a>。<code>Swarmkit</code> 是一个单独的项目，它实现了 Docker 的编排层并直接在 Docker 中使用。</p>\n<p>一个 swarm 由多个 Docker 主机组成，它们以<strong>swarm 模式</strong>运行并充当管理器（管理成员资格和委托）和工作人员（运行 <a href=\"https://docs.docker.com/engine/swarm/key-concepts/#services-and-tasks\">swarm 服务</a>）。给定的 Docker 主机可以是管理员、工作人员或同时执行这两种角色。创建服务时，您需要定义其最佳状态（副本数量、可用的网络和存储资源、服务向外界公开的端口等等）。Docker 致力于维护所需的状态。例如，如果一个工作节点变得不可用，Docker 会将该节点的任务安排在其他节点上。<em>任务</em>是一个 正在运行的容器，它是一个集群服务的一部分，由一个集群管理器管理，而不是一个独立的容器。</p>\n<p>swarm 服务相对于独立容器的主要优势之一是您可以修改服务的配置，包括它所连接的网络和卷，而无需手动重新启动服务。Docker 将更新配置，停止具有过期配置的服务任务，并创建与所需配置匹配的新任务。</p>\n<p>当 Docker 在 swarm 模式下运行时，您仍然可以在任何参与 swarm 的 Docker 主机以及 swarm 服务上运行独立容器。独立容器和 swarm 服务之间的一个关键区别在于，只有 <code>swarm manager</code> 可以管理 swarm，而独立容器可以在任何守护进程上启动。Docker 守护进程可以作为管理者、工作者或两者兼而有之。</p>\n<p>就像您可以使用<a href=\"https://docs.docker.com/compose/\">Docker Compose</a>定义和运行容器一样，您可以定义和运行<a href=\"https://docs.docker.com/engine/swarm/services/\">Swarm 服务</a>堆栈。</p>\n<ul>\n<li><strong>Node（节点）</strong></li>\n</ul>\n<p><strong>节点</strong>是参与 swarm 的 Docker 引擎的一个实例。您也可以将其视为 Docker 节点。您可以在单个物理计算机或云服务器上运行一个或多个节点，但生产群部署通常包括分布在多个物理和云计算机上的 Docker 节点。</p>\n<p>要将应用程序部署到 swarm，您需要向 <strong>管理器节点</strong>提交服务定义。管理节点将称为 <a href=\"https://docs.docker.com/engine/swarm/key-concepts/#services-and-tasks\">任务</a>的工作单元分派给工作节点。</p>\n<p>管理器节点还执行维护集群所需状态所需的编排和集群管理功能。管理器节点选举一个领导者来执行编排任务。</p>\n<p><strong>工作节点</strong>接收并执行从管理节点分派的任务。默认情况下，管理器节点也将服务作为工作节点运行，但您可以将它们配置为专门运行管理器任务并成为仅管理器节点。代理在每个工作节点上运行并报告分配给它的任务。<code>worker</code> 节点将其分配的任务的当前状态通知给 <code>manager</code> 节点，以便 <code>manager</code> 可以保持每个 <code>worker</code> 的期望状态。</p>\n<ul>\n<li><strong>Service（服务）</strong></li>\n</ul>\n<p><strong>服务</strong>是要在管理节点或工作节点上执行的任务的定义。它是 swarm 系统的<strong>中心结构</strong>，也是用户与 swarm 交互的主要根源。</p>\n<p>创建服务时，您需要指定要使用的容器映像以及在运行的容器中执行的命令。</p>\n<p>在<strong>复制服务</strong>模型中，群管理器根据您在所需状态中设置的规模在节点之间分配特定数量的副本任务。</p>\n<p>对于<strong>全局服务</strong>，swarm 在集群中的每个可用节点上为服务运行一个任务。</p>\n<ul>\n<li><strong>Task（任务）</strong></li>\n</ul>\n<p>一个<strong>任务</strong>携带一个 Docker 容器和在容器内运行的命令。它是 swarm 的<strong>原子调度单元</strong>。Manager 节点根据服务规模中设置的副本数将任务分配给工作节点。一旦任务被分配给一个节点，它就不能移动到另一个节点。它只能在分配的节点上运行或失败。</p>\n<ul>\n<li><strong>Load balancing（负载均衡）</strong></li>\n</ul>\n<p>swarm 管理器使用<strong>入口负载平衡</strong>将您希望在外部提供给 swarm 的服务公开。swarm manager 可以自动为服务分配一个<strong>PublishedPort</strong>，或者您可以为该服务配置一个 PublishedPort。您可以指定任何未使用的端口。如果不指定端口，swarm manager 会为服务分配一个 <code>30000-32767</code> 范围内的端口。</p>\n<p>外部组件（例如云负载均衡器）可以访问集群中任何节点的 PublishedPort 上的服务，无论该节点当前是否正在运行该服务的任务。swarm 中的所有节点将入口连接路由到正在运行的任务实例。</p>\n<p>Swarm 模式有一个内部 <code>DNS</code> 组件，它自动为 swarm 中的每个服务分配一个 DNS 条目。swarm manager 使用<strong>内部负载平衡</strong>根据服务的 DNS 名称在集群内的服务之间分配请求。</p>\n<h3 id=\"Swarm-工作原理\"><a href=\"#Swarm-工作原理\" class=\"headerlink\" title=\"Swarm 工作原理\"></a>Swarm 工作原理</h3><h4 id=\"节点如何工作\"><a href=\"#节点如何工作\" class=\"headerlink\" title=\"节点如何工作\"></a>节点如何工作</h4><p>Swarm 集群由管理节点（Manager）和工作节点（Work）构成。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220716220722.png\" alt=\"image-20220716220722605\"></p>\n<h5 id=\"管理节点\"><a href=\"#管理节点\" class=\"headerlink\" title=\"管理节点\"></a>管理节点</h5><p>Manager 节点处理集群管理任务：</p>\n<ul>\n<li>维护集群状态</li>\n<li>调度服务</li>\n<li>服务群模式<a href=\"https://docs.docker.com/engine/api/\">HTTP API 端点</a></li>\n</ul>\n<p>使用<a href=\"https://raft.github.io/raft.pdf\">Raft</a>实现，管理器维护整个 swarm 和在其上运行的所有服务的一致内部状态。出于测试目的，可以使用单个管理器运行 swarm。如果单管理器集群中的管理器发生故障，您的服务将继续运行，但您需要创建一个新集群才能恢复。</p>\n<p>为了利用 swarm 模式的容错特性，Docker 建议您根据组织的高可用性要求实现奇数个节点。当您有多个管理器时，您可以从管理器节点的故障中恢复而无需停机。</p>\n<ul>\n<li>一个三管理器群最多可以容忍一名管理器的损失。</li>\n<li>一个五管理器群最多可以同时丢失两个管理器节点。</li>\n<li>一个<code>N</code>管理器集群最多可以容忍丢失 <code>(N-1)/2</code>管理器。</li>\n<li>Docker 建议一个 swarm 最多使用七个管理器节点。</li>\n</ul>\n<blockquote>\n<p><strong>重要提示</strong>：添加更多管理器并不意味着增加可扩展性或提高性能。一般来说，情况正好相反。</p>\n</blockquote>\n<h5 id=\"工作节点\"><a href=\"#工作节点\" class=\"headerlink\" title=\"工作节点\"></a>工作节点</h5><p>工作节点也是 Docker 引擎的实例，其唯一目的是执行容器。Worker 节点不参与 Raft 分布式状态，不做调度决策，也不服务于 swarm 模式的 HTTP API。</p>\n<p>您可以创建一个由一个管理器节点组成的集群，但如果没有至少一个管理器节点，您就不能拥有一个工作程序节点。默认情况下，所有 manager 也是 worker。在单个管理节点集群中，您可以运行类似 <code>docker service create</code> 的命令，并且调度程序将所有任务放在本地引擎上。</p>\n<p>要防止调度程序将任务放置在多节点集群中的管理器节点上，请将管理器节点的可用性设置为 <code>Drain</code>。调度器优雅地停止 <code>Drain</code> 模式节点上的任务，并在一个 <code>Active</code> 节点上调度任务。调度程序不会将新任务分配给 <code>Drain</code> 可用的节点。</p>\n<p>请参阅<a href=\"https://docs.docker.com/engine/reference/commandline/node_update/\">docker node update</a> 命令行参考以了解如何更改节点可用性。</p>\n<h4 id=\"服务如何运作\"><a href=\"#服务如何运作\" class=\"headerlink\" title=\"服务如何运作\"></a>服务如何运作</h4><p>要在 Docker 引擎处于 swarm 模式时部署应用程序映像，您需要创建一个服务。通常，服务是某个更大应用程序上下文中微服务的映像。服务的示例可能包括 HTTP 服务器、数据库或您希望在分布式环境中运行的任何其他类型的可执行程序。</p>\n<p>创建服务时，您需要指定要使用的容器映像以及在运行的容器中执行的命令。您还可以定义服务的选项，包括：</p>\n<ul>\n<li>swarm 使服务在 swarm 外部可用的端口</li>\n<li>服务连接到集群中的其他服务的覆盖网络</li>\n<li>CPU 和内存限制和预留</li>\n<li>滚动更新策略</li>\n<li>在 swarm 中运行的图像的副本数</li>\n</ul>\n<h5 id=\"服务、任务和容器\"><a href=\"#服务、任务和容器\" class=\"headerlink\" title=\"服务、任务和容器\"></a>服务、任务和容器</h5><p>当您将服务部署到 swarm 时，swarm manager 接受您的服务定义作为服务的所需状态。然后，它将集群中的节点上的服务安排为一个或多个副本任务。这些任务在 swarm 中的节点上彼此独立运行。</p>\n<p>例如，假设您想在 nginx 的三个实例之间进行负载平衡。下图显示了具有三个副本的 nginx 服务。nginx 的三个实例中的每一个都是 swarm 中的一个任务。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717111642.png\" alt=\"image-20220717111642619\"></p>\n<p>容器是一个独立的进程。在 swarm 模式模型中，每个任务只调用一个容器。任务类似于调度程序放置容器的“槽”。一旦容器处于活动状态，调度程序就会识别出任务处于运行状态。如果容器未通过健康检查或终止，则任务终止。</p>\n<h5 id=\"任务和调度\"><a href=\"#任务和调度\" class=\"headerlink\" title=\"任务和调度\"></a>任务和调度</h5><p>任务是 swarm 中调度的原子单元。当您通过创建或更新服务来声明所需的服务状态时，编排器通过调度任务来实现所需的状态。例如，您定义了一个服务，该服务指示协调器始终保持三个 HTTP 侦听器实例运行。编排器通过创建三个任务来响应。每个任务都是调度程序通过生成容器来填充的槽。容器是任务的实例化。如果 HTTP 侦听器任务随后未能通过其健康检查或崩溃，编排器将创建一个新的副本任务来生成一个新容器。</p>\n<p>任务是一种单向机制。它通过一系列状态单调地进行：分配、准备、运行等。如果任务失败，编排器将删除任务及其容器，然后根据服务指定的所需状态创建一个新任务来替换它。</p>\n<p>Docker swarm 模式的底层逻辑是一个通用的调度器和编排器。服务和任务抽象本身并不知道它们实现的容器。假设您可以实现其他类型的任务，例如虚拟机任务或非容器化流程任务。调度器和编排器不知道任务的类型。但是，当前版本的 Docker 只支持容器任务。</p>\n<p>下图显示了 swarm 模式如何接受服务创建请求并将任务调度到工作节点。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717231629.png\" alt=\"image-20220717231629076\"></p>\n<h5 id=\"待办服务（pending）\"><a href=\"#待办服务（pending）\" class=\"headerlink\" title=\"待办服务（pending）\"></a>待办服务（pending）</h5><p>一个服务可以这样配置，使得当前在 swarm 中的任何节点都不能运行它的任务。在这种情况下，服务保持状态<code>pending</code>。以下是服务可能保持状态的几个示例<code>pending</code>。</p>\n<blockquote>\n<p><strong>注意</strong>：如果您的唯一目的是阻止部署服务，请将服务缩放到 0，而不是尝试将其配置为保留在<code>pending</code>.</p>\n</blockquote>\n<ul>\n<li>如果所有节点都已暂停或耗尽，并且您创建了一项服务，则该服务将处于挂起状态，直到节点可用为止。实际上，第一个可用的节点会获得所有任务，因此这在生产环境中不是一件好事。</li>\n<li>您可以为服务保留特定数量的内存。如果 swarm 中没有节点具有所需的内存量，则服务将保持挂起状态，直到可以运行其任务的节点可用。如果您指定一个非常大的值，例如 500 GB，则该任务将永远保持挂起状态，除非您确实有一个可以满足它的节点。</li>\n<li>您可以对服务施加放置约束，并且这些约束可能无法在给定时间得到遵守。</li>\n</ul>\n<p>这种行为说明您的任务的要求和配置与当前的 swarm 状态并没有紧密联系。作为 swarm 的管理员，您声明了您的 swarm 所需的状态，并且管理器与 swarm 中的节点一起创建该状态。您不需要对 swarm 上的任务进行微观管理。</p>\n<h5 id=\"部署模式\"><a href=\"#部署模式\" class=\"headerlink\" title=\"部署模式\"></a>部署模式</h5><p>有两种类型的服务部署，复制的（<code>replicated</code>）和全局的（<code>global</code>）。</p>\n<p>对于复制服务，您指定要运行的相同任务的数量。例如，您决定部署具有三个副本的 HTTP 服务，每个副本提供相同的内容。</p>\n<p>全局服务是在每个节点上运行一个任务的服务。没有预先指定的任务数量。每次将节点添加到 swarm 时，编排器都会创建一个任务，调度器会将任务分配给新节点。全局服务的良好候选者是监控代理、防病毒扫描程序或您希望在集群中的每个节点上运行的其他类型的容器。</p>\n<p>下图显示了黄色的三服务副本和灰色的全局服务。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717232121.png\" alt=\"image-20220717232121078\"></p>\n<h4 id=\"Swarm-任务状态\"><a href=\"#Swarm-任务状态\" class=\"headerlink\" title=\"Swarm 任务状态\"></a>Swarm 任务状态</h4><p>Docker 允许创建可以启动任务的服务。服务是对所需状态的描述，而任务完成工作。工作按以下顺序安排在 swarm 节点上：</p>\n<ol>\n<li>通过使用创建服务<code>docker service create</code>。</li>\n<li>请求转到 Docker 管理器节点。</li>\n<li>Docker 管理器节点安排服务在特定节点上运行。</li>\n<li>每个服务可以启动多个任务。</li>\n<li>每个任务都有一个生命周期，其状态包括 <code>NEW</code>、<code>PENDING</code> 和 <code>COMPLETE</code>。</li>\n</ol>\n<p>任务是运行一次即可完成的执行单元。当一个任务停止时，它不会再次执行，但一个新的任务可能会取代它。</p>\n<p>任务通过多个状态前进，直到它们完成或失败。任务在 <code>NEW</code> 状态中初始化。任务通过多个状态向前推进，并且其状态不会后退。例如，任务永远不会从 <code>COMPLETE</code> 到 <code>RUNNING</code>。</p>\n<p>任务按以下顺序通过状态：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">任务状态</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>NEW</code></td>\n<td align=\"left\">任务已初始化。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PENDING</code></td>\n<td align=\"left\">分配了任务的资源。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ASSIGNED</code></td>\n<td align=\"left\">Docker 将任务分配给节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ACCEPTED</code></td>\n<td align=\"left\">该任务已被工作节点接受。如果工作节点拒绝任务，则状态更改为<code>REJECTED</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PREPARING</code></td>\n<td align=\"left\">Docker 正在准备任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>STARTING</code></td>\n<td align=\"left\">Docker 正在启动任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>RUNNING</code></td>\n<td align=\"left\">任务正在执行。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COMPLETE</code></td>\n<td align=\"left\">任务退出，没有错误代码。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>FAILED</code></td>\n<td align=\"left\">任务以错误代码退出。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>SHUTDOWN</code></td>\n<td align=\"left\">Docker 请求关闭任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>REJECTED</code></td>\n<td align=\"left\">工作节点拒绝了该任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ORPHANED</code></td>\n<td align=\"left\">节点关闭时间过长。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>REMOVE</code></td>\n<td align=\"left\">该任务不是终端，但相关服务已被删除或缩小。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>查看任务状态</strong></p>\n<p>运行 docker service ps <service-name>以获取任务的状态。该 <code>CURRENT STATE</code> 字段显示任务的状态以及它在那里的时间。</p>\n</blockquote>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><h4 id=\"创建-Swarm\"><a href=\"#创建-Swarm\" class=\"headerlink\" title=\"创建 Swarm\"></a>创建 Swarm</h4><ol>\n<li>运行以下命令来创建一个新的 swarm：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker swarm init --advertise-addr &lt;MANAGER-IP&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>例如：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker swarm init --advertise-addr 192.168.88.230</span><br><span class=\"line\">Swarm initialized: current node (uo7m7w01d5wfdjt0qn9m3aau4) is now a manager.</span><br><span class=\"line\"></span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-3abelxhlyvhm54klavpbr06r5 192.168.88.230:2377</span><br><span class=\"line\"></span><br><span class=\"line\">To add a manager to this swarm, run <span class=\"string\">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该 <code>--advertise-addr</code> 标志将管理节点配置为将其地址发布为 <code>192.168.88.230</code>。 swarm 中的其他节点必须能够访问该 IP 地址的 manager。</p>\n<p>输出包括将新节点加入 swarm 的命令。根据 <code>--token</code> 标志的值，节点将作为 manager 或 worker 加入。</p>\n</blockquote>\n<ol start=\"3\">\n<li>运行<code>docker info</code>查看 swarm 的当前状态：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker info</span><br><span class=\"line\"> Containers: 3</span><br><span class=\"line\">  Running: 3</span><br><span class=\"line\">  Paused: 0</span><br><span class=\"line\">  Stopped: 0</span><br><span class=\"line\"> Images: 4</span><br><span class=\"line\"> ...snip...</span><br><span class=\"line\"> Swarm: active</span><br><span class=\"line\">  NodeID: uo7m7w01d5wfdjt0qn9m3aau4</span><br><span class=\"line\">  Is Manager: <span class=\"literal\">true</span></span><br><span class=\"line\">  ClusterID: ym3kr78wgx258lawn3iclgxwq</span><br><span class=\"line\">  Managers: 1</span><br><span class=\"line\">  Nodes: 3</span><br><span class=\"line\">  ...snip...</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>运行<code>docker node ls</code>命令查看节点信息：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker node <span class=\"built_in\">ls</span></span><br><span class=\"line\">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class=\"line\">uo7m7w01d5wfdjt0qn9m3aau4 *   88230      Ready     Active         Leader           20.10.13</span><br><span class=\"line\">p4tlkfxa4d2ne1diq0mtlifs9     88233      Ready     Active                          20.10.17</span><br><span class=\"line\">oawv9cs597brq8h5hzis3ynlc     88237      Ready     Active                          20.10.17</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将节点添加到-Swarm\"><a href=\"#将节点添加到-Swarm\" class=\"headerlink\" title=\"将节点添加到 Swarm\"></a>将节点添加到 Swarm</h4><p>当你创建了一个带有管理节点的 swarm 时，你就可以添加工作节点了。</p>\n<ol>\n<li>运行创建 Swarm 中 <code>docker swarm init</code> 步骤生成的命令，以创建一个加入现有 swarm 的工作节点：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-3abelxhlyvhm54klavpbr06r5 192.168.88.230:2377</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果没有可用的命令，可以在管理节点上运行以下命令来生成工作节点的加入命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker swarm join-token worker</span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-3abelxhlyvhm54klavpbr06r5 192.168.88.230:2377</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>生成管理节点的加入命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker swarm join-token manager</span><br><span class=\"line\">To add a manager to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-0so9mhkgy8btr579ho4pfza9n 192.168.88.230:2377</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h4><p>先在要删除的节点上运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker swarm leave</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>manage</code> 节点上运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker node <span class=\"built_in\">rm</span> NODE </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点提升\"><a href=\"#节点提升\" class=\"headerlink\" title=\"节点提升\"></a>节点提升</h4><p><strong>用法</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker node promote NODE [NODE...]</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<p>将节点提升为 <code>manager</code>。该命令只能在 <code>manage node</code> 上执行。</p>\n<blockquote>\n<p><strong>笔记</strong></p>\n<p>这是一个集群管理命令，必须在 swarm manager 节点上执行。</p>\n</blockquote>\n<h4 id=\"节点降级\"><a href=\"#节点降级\" class=\"headerlink\" title=\"节点降级\"></a>节点降级</h4><p><strong>用法</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker node demote NODE [NODE...]</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<p>降级现有 <code>manager</code>，使其不再是 <code>manager</code>。</p>\n<blockquote>\n<p><strong>笔记</strong></p>\n<p>这是一个集群管理命令，必须在 swarm manager 节点上执行。</p>\n</blockquote>\n<h4 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h4><ol>\n<li>在管理节点上运行以下命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br><span class=\"line\">ktcjndh4nj4nbwp461idnob0y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>该 <code>docker service create</code> 命令创建服务。</li>\n<li>该 <code>--name</code> 标志命名服务 <code>helloworld</code>。</li>\n<li>该 <code>--replicas</code> 标志指定 1 个正在运行的实例的所需状态。</li>\n<li>参数 <code>alpine ping docker.com</code> 将服务定义为执行命令的 Alpine Linux 容器 <code>ping docker.com</code>。</li>\n</ul>\n<ol start=\"2\">\n<li>运行 <code>docker service ls</code> 查看正在运行的服务列表：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service <span class=\"built_in\">ls</span></span><br><span class=\"line\">ID             NAME         MODE         REPLICAS   IMAGE           PORTS</span><br><span class=\"line\">ktcjndh4nj4n   helloworld   replicated   1/1        alpine:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h4><p>将服务部署到 swarm 后，可以使用 <code>Docker CLI</code> 查看有关在 swarm 中运行的服务的详细信息。</p>\n<ol>\n<li>运行 <code>docker service inspect --pretty &lt;SERVICE-ID&gt;</code> 以易于阅读的格式显示有关服务的详细信息。</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">docker</span> <span class=\"string\">service</span> <span class=\"string\">inspect</span> <span class=\"string\">--pretty</span> <span class=\"string\">helloworld</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ID:</span>\t\t<span class=\"string\">ktcjndh4nj4nbwp461idnob0y</span></span><br><span class=\"line\"><span class=\"attr\">Name:</span>\t\t<span class=\"string\">helloworld</span></span><br><span class=\"line\"><span class=\"attr\">Service Mode:</span>\t<span class=\"string\">Replicated</span></span><br><span class=\"line\"> <span class=\"attr\">Replicas:</span>\t<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">Placement:</span></span><br><span class=\"line\"><span class=\"attr\">ContainerSpec:</span></span><br><span class=\"line\"> <span class=\"attr\">Image:</span>\t\t<span class=\"string\">alpine</span></span><br><span class=\"line\"> <span class=\"attr\">Args:</span>\t\t<span class=\"string\">ping</span> <span class=\"string\">docker.com</span></span><br><span class=\"line\"> <span class=\"attr\">Init:</span>\t\t<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">Resources:</span></span><br><span class=\"line\"><span class=\"attr\">Endpoint Mode:</span>\t<span class=\"string\">vip</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>提示</strong>：要以 json 格式返回服务详细信息，请运行不带 <code>--pretty</code> 标志的相同命令。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service inspect helloworld</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;ID&quot;</span>: <span class=\"string\">&quot;ktcjndh4nj4nbwp461idnob0y&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Version&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Index&quot;</span>: 28</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreatedAt&quot;</span>: <span class=\"string\">&quot;2022-04-05T15:00:31.72873489Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;UpdatedAt&quot;</span>: <span class=\"string\">&quot;2022-04-05T15:00:31.72873489Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Spec&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;helloworld&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;TaskTemplate&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;ContainerSpec&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Image&quot;</span>: <span class=\"string\">&quot;alpine&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Args&quot;</span>: [</span><br><span class=\"line\">                        <span class=\"string\">&quot;ping&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;docker.com&quot;</span></span><br><span class=\"line\">                    ],</span><br><span class=\"line\">                    <span class=\"string\">&quot;Init&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;StopGracePeriod&quot;</span>: 10000000000,</span><br><span class=\"line\">                    <span class=\"string\">&quot;DNSConfig&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Isolation&quot;</span>: <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;Resources&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Limits&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Reservations&quot;</span>: &#123;&#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;RestartPolicy&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Condition&quot;</span>: <span class=\"string\">&quot;any&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Delay&quot;</span>: 5000000000,</span><br><span class=\"line\">                    <span class=\"string\">&quot;MaxAttempts&quot;</span>: 0</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;Placement&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;ForceUpdate&quot;</span>: 0,</span><br><span class=\"line\">                <span class=\"string\">&quot;Runtime&quot;</span>: <span class=\"string\">&quot;container&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;Mode&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Replicated&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Replicas&quot;</span>: 1</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;EndpointSpec&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Mode&quot;</span>: <span class=\"string\">&quot;vip&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;Endpoint&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Spec&quot;</span>: &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行 <code>docker service ps &lt;SERVICE-ID&gt;</code> 查看哪些节点正在运行该服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID             NAME           IMAGE           NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class=\"line\">3s1myvuaoc0k   helloworld.1.3s1myvuaoc0kdvlaz4fgz3usk   alpine:latest   8886      Running         Running 31 minutes ago</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，服务的一个实例正在节点 <code>helloworld</code> 上运行 。<code>8886</code> 您可能会看到该服务在您的管理器节点上运行。默认情况下，swarm 中的管理节点可以像工作节点一样执行任务。</p>\n<p>Swarm 还向您显示服务任务的 <code>DESIRED STATE</code> 和 <code>CURRENT STATE</code>，以便您可以查看任务是否根据服务定义运行。</p>\n<ol start=\"3\">\n<li>在运行 <code>docker ps</code> 任务的节点上运行以查看有关任务容器的详细信息。</li>\n</ol>\n<blockquote>\n<p><strong>提示</strong>：如果<code>helloworld</code>在管理节点以外的节点上运行，则必须 ssh 到该节点。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS     NAMES</span><br><span class=\"line\">3128610843c3   alpine:latest   <span class=\"string\">&quot;ping docker.com&quot;</span>   38 minutes ago   Up 38 minutes    helloworld.1.3s1myvuaoc0kdvlaz4fgz3usk</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展服务\"><a href=\"#扩展服务\" class=\"headerlink\" title=\"扩展服务\"></a>扩展服务</h4><p>将服务部署到 swarm 后，您就可以使用 <code>Docker CLI</code> 扩展服务中的容器数量了。在服务中运行的容器称为“任务”。</p>\n<ol>\n<li>运行以下命令以更改在 swarm 中运行的服务的所需状态</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service scale &lt;SERVICE-ID&gt;=&lt;NUMBER-OF-TASKS&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service scale helloworld=5</span><br><span class=\"line\">hellworld scaled to 5</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行 <code>docker service ps &lt;SERVICE-ID&gt;</code> 查看更新的任务列表：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID             NAME           IMAGE           NODE      DESIRED STATE   CURRENT STATE                ERROR     PORTS</span><br><span class=\"line\">3s1myvuaoc0k   helloworld.1   alpine:latest   8886      Running         Running 43 minutes ago</span><br><span class=\"line\">sub0vfkz17t1   helloworld.2   alpine:latest   88235     Running         Running 53 seconds ago</span><br><span class=\"line\">qiiwkq8eaw4c   helloworld.3   alpine:latest   88236     Running         Running about a minute ago</span><br><span class=\"line\">272jo44c63qd   helloworld.4   alpine:latest   88236     Running         Running about a minute ago</span><br><span class=\"line\">vx61pv6vzm9y   helloworld.5   alpine:latest   8886      Running         Running 2 minutes ago</span><br></pre></td></tr></table></figure>\n\n<p>您可以看到 swarm 创建了 4 个新任务以扩展到总共 5 个正在运行的 Alpine Linux 实例。任务分布在 swarm 的三个节点之间。</p>\n<h4 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h4><ol>\n<li>运行 <code>docker service rm helloworld</code> 以删除 <code>helloworld</code> 服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service <span class=\"built_in\">rm</span> helloworld</span><br><span class=\"line\">helloworld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应用滚动更新\"><a href=\"#应用滚动更新\" class=\"headerlink\" title=\"应用滚动更新\"></a>应用滚动更新</h4><ol>\n<li>将您的 Redis 标签部署到 swarm 并为 swarm 配置 10 秒的更新延迟。请注意，以下示例显示了较旧的 Redis 标记：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service create \\</span><br><span class=\"line\">  --replicas 3 \\</span><br><span class=\"line\">  --name redis \\</span><br><span class=\"line\">  --update-delay 10s \\</span><br><span class=\"line\">  redis:3.0.6</span><br><span class=\"line\">pvud31bgvl7e5ljf6xuxcn7dh</span><br></pre></td></tr></table></figure>\n\n<p>您在服务部署时配置滚动更新策略。</p>\n<p>该 <code>--update-delay</code> 标志配置更新服务任务或任务集之间的时间延迟。您可以将时间描述 <code>T</code> 为秒数 <code>Ts</code>、分钟数 <code>Tm</code> 或小时数的组合 <code>Th</code>。所以 <code>10m30s</code> 表示延迟 10 分 30 秒。</p>\n<p>默认情况下，调度程序一次更新 1 个任务。您可以传递该 <code>--update-parallelism</code> 标志来配置调度程序同时更新的最大服务任务数。</p>\n<p>默认情况下，当单个任务的更新返回状态为 时 <code>RUNNING</code>，调度程序会安排另一个任务进行更新，直到所有任务都更新完毕。如果在更新期间的任何时间任务返回 <code>FAILED</code>，调度程序会暂停更新。您可以使用或 的 <code>--update-failure-action</code> 标志来控制行为 。<code>docker service create</code> <code>docker service update</code></p>\n<ol start=\"2\">\n<li>检查<code>redis</code>服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service inspect --pretty redis</span><br><span class=\"line\"></span><br><span class=\"line\">ID:\t\tpvud31bgvl7e5ljf6xuxcn7dh</span><br><span class=\"line\">Name:\t\tredis</span><br><span class=\"line\">Service Mode:\tReplicated</span><br><span class=\"line\"> Replicas:\t3</span><br><span class=\"line\">Placement:</span><br><span class=\"line\">UpdateConfig:</span><br><span class=\"line\"> Parallelism:\t1</span><br><span class=\"line\"> Delay:\t\t10s</span><br><span class=\"line\">ContainerSpec:</span><br><span class=\"line\"> Image:\t\tredis:3.0.6</span><br><span class=\"line\"> Init:\t\t<span class=\"literal\">false</span></span><br><span class=\"line\">Resources:</span><br><span class=\"line\">Endpoint Mode:\tvip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>现在您可以更新 <code>redis</code>， swarm manager 根据 <code>UpdateConfig</code> 策略将更新应用到节点：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service update --image redis:3.0.7 redis</span><br><span class=\"line\">redis</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，调度程序按如下方式应用滚动更新：</p>\n<ul>\n<li>停止第一个任务。</li>\n<li>为已停止的任务安排更新。</li>\n<li>启动更新任务的容器。</li>\n<li>如果一个任务的更新返回<code>RUNNING</code>，等待指定的延迟时间然后开始下一个任务。</li>\n<li>如果在更新期间的任何时间，任务返回<code>FAILED</code>，则暂停更新。</li>\n</ul>\n<ol start=\"4\">\n<li>运行 <code>docker service inspect --pretty redis</code> 以查看处于所需状态的新图像：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service inspect --pretty redis</span><br><span class=\"line\"></span><br><span class=\"line\">ID:\t\tpvud31bgvl7e5ljf6xuxcn7dh</span><br><span class=\"line\">Name:\t\tredis</span><br><span class=\"line\">Service Mode:\tReplicated</span><br><span class=\"line\"> Replicas:\t3</span><br><span class=\"line\">Placement:</span><br><span class=\"line\">UpdateConfig:</span><br><span class=\"line\"> Parallelism:\t1</span><br><span class=\"line\"> Delay:\t\t10s</span><br><span class=\"line\">ContainerSpec:</span><br><span class=\"line\"> Image:\t\tredis:3.0.7</span><br><span class=\"line\"> Init:\t\t<span class=\"literal\">false</span></span><br><span class=\"line\">Resources:</span><br><span class=\"line\">Endpoint Mode:\tvip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行 <code>docker service ps &lt;SERVICE-ID&gt;</code> 以观看滚动更新：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker service ps redis</span><br><span class=\"line\">ID             NAME          IMAGE         NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class=\"line\">s3uwdrtssguv   redis.1       redis:3.0.7   88236     Running         Running 3 minutes ago</span><br><span class=\"line\">9nav9b094si0    \\_ redis.1   redis:3.0.6   88236     Shutdown        Shutdown 5 minutes ago</span><br><span class=\"line\">tdy6tqfhweo4   redis.2       redis:3.0.7   88235     Running         Running 2 minutes ago</span><br><span class=\"line\">t9vr0kt1h8av    \\_ redis.2   redis:3.0.6   88235     Shutdown        Shutdown 3 minutes ago</span><br><span class=\"line\">xjc6v95dayhv   redis.3       redis:3.0.7   8886      Running         Running 3 minutes ago</span><br><span class=\"line\">biy701m9tvat    \\_ redis.3   redis:3.0.6   8886      Shutdown        Shutdown 4 minutes ago</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"排空一个节点\"><a href=\"#排空一个节点\" class=\"headerlink\" title=\"排空一个节点\"></a>排空一个节点</h4><p>有时，例如计划的维护时间，您需要将节点设置为 <code>DRAIN</code> 可用。<code>DRAIN</code> 可用性阻止节点从集群管理器接收新任务。这也意味着管理器停止在节点上运行的任务，并在可用的节点上启动副本任务 <code>ACTIVE</code>。</p>\n<blockquote>\n<p><strong>重要</strong>：将节点设置为 <code>DRAIN</code> 不会从该节点删除独立容器，例如使用 Docker 引擎 API 创建的 <code>docker run</code> 容器 <code>docker-compose up</code>。一个节点的状态，包括 <code>DRAIN</code>，只影响节点调度 swarm 服务工作负载的能力。</p>\n</blockquote>\n<ol>\n<li>运行 <code>docker node update --availability drain &lt;NODE-ID&gt;</code> 以排空已分配任务的节点：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker node update --availability drain worker1</span><br><span class=\"line\">work1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>检查节点其可用性：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker node inspect --pretty worker1</span><br></pre></td></tr></table></figure>\n\n<p><code>AVAILABILITY</code> 属性值为 <code>Drain</code></p>\n<h2 id=\"Docker-Stack\"><a href=\"#Docker-Stack\" class=\"headerlink\" title=\"Docker Stack\"></a>Docker Stack</h2><h3 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h3><p>指定与服务的部署和运行有关的配置。只在 swarm 模式下才会有用。</p>\n<figure class=\"highlight nestedtext\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">version</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3.7&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">services</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">  <span class=\"attribute\">redis</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">    <span class=\"attribute\">image</span><span class=\"punctuation\">:</span> <span class=\"string\">redis:alpine</span></span><br><span class=\"line\">    <span class=\"attribute\">deploy</span><span class=\"punctuation\">:</span></span><br><span class=\"line\"><span class=\"attribute\">sssssssss</span></span><br><span class=\"line\"><span class=\"attribute\">      endpoint_mode</span><span class=\"punctuation\">:</span> <span class=\"string\">dnsrr</span></span><br><span class=\"line\">      <span class=\"attribute\">labels</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">        <span class=\"attribute\">description</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;This redis service label&quot;</span></span><br><span class=\"line\">      <span class=\"attribute\">resources</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">        <span class=\"attribute\">limits</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">          <span class=\"attribute\">cpus</span><span class=\"punctuation\">:</span> <span class=\"string\">&#x27;0.50&#x27;</span></span><br><span class=\"line\">          <span class=\"attribute\">memory</span><span class=\"punctuation\">:</span> <span class=\"string\">50M</span></span><br><span class=\"line\">        <span class=\"attribute\">reservations</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">          <span class=\"attribute\">cpus</span><span class=\"punctuation\">:</span> <span class=\"string\">&#x27;0.25&#x27;</span></span><br><span class=\"line\">          <span class=\"attribute\">memory</span><span class=\"punctuation\">:</span> <span class=\"string\">20M</span></span><br><span class=\"line\">      <span class=\"attribute\">restart_policy</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">        <span class=\"attribute\">condition</span><span class=\"punctuation\">:</span> <span class=\"string\">on-failure</span></span><br><span class=\"line\">        <span class=\"attribute\">delay</span><span class=\"punctuation\">:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">        <span class=\"attribute\">max_attempts</span><span class=\"punctuation\">:</span> <span class=\"string\">3</span></span><br><span class=\"line\">        <span class=\"attribute\">window</span><span class=\"punctuation\">:</span> <span class=\"string\">120s</span></span><br></pre></td></tr></table></figure>\n\n<p>可以选参数：</p>\n<p><strong>endpoint_mode</strong>：访问集群服务的方式。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">endpoint_mode:</span> vip</span><br><span class=\"line\"><span class=\"meta\"># Docker 集群服务一个对外的虚拟 ip。所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器。</span></span><br><span class=\"line\"><span class=\"symbol\">endpoint_mode:</span> dnsrr</span><br><span class=\"line\"><span class=\"meta\"># DNS 轮询（DNSRR）。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>labels</strong>：在服务上设置标签。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。</p>\n<p><strong>mode</strong>：指定服务提供的模式。</p>\n<ul>\n<li><p><strong>replicated</strong>：复制服务，复制指定服务到集群的机器上。</p>\n</li>\n<li><p><strong>global</strong>：全局服务，服务将部署至集群的每个节点。</p>\n</li>\n<li><p>图解：下图中黄色的方块是 replicated 模式的运行情况，灰色方块是 global 模式的运行情况。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220713152904.png\" alt=\"img\"></p>\n</li>\n</ul>\n<p><strong>replicas：mode</strong> 为 replicated 时，需要使用此参数配置具体运行的节点数量。</p>\n<p><strong>resources</strong>：配置服务器资源使用的限制，例如上例子，配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常。</p>\n<p><strong>restart_policy</strong>：配置如何在退出容器时重新启动容器。</p>\n<ul>\n<li>condition：可选 none，on-failure 或者 any（默认值：any）。</li>\n<li>delay：设置多久之后重启（默认值：0）。</li>\n<li>max_attempts：尝试重新启动容器的次数，超出次数，则不再尝试（默认值：一直重试）。</li>\n<li>window：设置容器重启超时时间（默认值：0）。</li>\n</ul>\n<p><strong>rollback_config</strong>：配置在更新失败的情况下应如何回滚服务。</p>\n<ul>\n<li>parallelism：一次要回滚的容器数。如果设置为 0，则所有容器将同时回滚。</li>\n<li>delay：每个容器组回滚之间等待的时间（默认为 0s）。</li>\n<li>failure_action：如果回滚失败，该怎么办。其中一个 continue 或者 pause（默认 pause）。</li>\n<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为 0s）。</li>\n<li>max_failure_ratio：在回滚期间可以容忍的故障率（默认为 0）。</li>\n<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first ）。</li>\n</ul>\n<p><strong>update_config</strong>：配置应如何更新服务，对于配置滚动更新很有用。</p>\n<ul>\n<li>parallelism：一次更新的容器数。</li>\n<li>delay：在更新一组容器之间等待的时间。</li>\n<li>failure_action：如果更新失败，该怎么办。其中一个 continue，rollback 或者 pause （默认：pause）。</li>\n<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为 0s）。</li>\n<li>max_failure_ratio：在更新过程中可以容忍的故障率。</li>\n<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first）。</li>\n</ul>\n<p><strong>注</strong>：仅支持 V3.4 及更高版本。</p>\n","categories":["Linux"],"tags":["Docker","容器"]},{"title":"Windows Terminal + PowerShell 7 + Scoop 打造 Windows 系统下最强终端","url":"/2024/07/23/e3012d83.html","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>最近因电脑系统故障而重装系统，借此机会正好使用 Windows 全新的 <code>Terminal(终端)</code> + <code>PowerShell 7</code> + <code>Scoop</code> 来打造 Windows 系统下最强终端，之前一直用的 <code>Git for Windows</code> 提供的 <code>Git Bash</code>，安装 <code>Zsh + Oh My Zsh</code> 优化体验，但是 <code>Zsh</code> 毕竟是 <code>UNIX/类UNIX</code> 系统的命令行解释器，在 Windows 系统上体验终归不是最优的。</p>\n<p><code>Windows Terminal</code> 是一个现代、功能强大的终端应用程序，支持多标签页、自定义主题、Unicode 和 UTF-8 字符、以及与 PowerShell、CMD 和 WSL 的无缝集成。</p>\n<p><code>PowerShell</code> 作为微软开发任务自动化和配置管理框架，最初就是为 Windows 系统设计(现在也支持 Linux 和 MacOS)，且通过强大的脚本语言，适合更灵活更复杂的自动化任务。</p>\n<p><code>Scoop</code> 是一个用于 Windows 的命令行安装器，简化了软件的安装、更新和管理过程，并支持无管理员权限安装。新系统的软件开发环境也在本文中通过 Scoop 来管理安装。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>按照以下步骤，一步一步打造 Windows Terminal + PowerShell 7 + Scoop 最强 Windows 终端</p>\n<h3 id=\"Scoop\"><a href=\"#Scoop\" class=\"headerlink\" title=\"Scoop\"></a>Scoop</h3><h4 id=\"执行策略\"><a href=\"#执行策略\" class=\"headerlink\" title=\"执行策略\"></a>执行策略</h4><p>以管理员身份打开 Windows Terminal/PowerShell，执行以下命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> <span class=\"literal\">-ExecutionPolicy</span> RemoteSigned <span class=\"literal\">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装路径\"><a href=\"#安装路径\" class=\"headerlink\" title=\"安装路径\"></a>安装路径</h4><p>Scoop 可以自定义 Scoop 安装路径与使用 Scoop 安装的软件路径：</p>\n<ul>\n<li>Scoop 本身和安装软件的路径为：<code>C:\\Users\\[username]\\scoop</code></li>\n<li>Scoop 全局安装软件的路径为：<code>C:\\ProgramData\\scoop</code></li>\n</ul>\n<p>在开始安装 Scoop 前，可以提前设置环境变量来决定其安装路径</p>\n<p>对于 Scoop 本身和安装软件的路径，打开 Windows Terminal/PowerShell，执行以下命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:SCOOP</span>=<span class=\"string\">&#x27;D:\\Scoop&#x27;</span></span><br><span class=\"line\">[<span class=\"type\">Environment</span>]::SetEnvironmentVariable(<span class=\"string\">&#x27;SCOOP&#x27;</span>, <span class=\"variable\">$env:SCOOP</span>, <span class=\"string\">&#x27;User&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>对于 Scoop 全局安装软件的路径，以 <code>管理员身份</code> 打开 Windows Terminal/PowerShell，执行以下命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:SCOOP_GLOBAL</span>=<span class=\"string\">&#x27;D:\\Scoop\\Global&#x27;</span></span><br><span class=\"line\">[<span class=\"type\">Environment</span>]::SetEnvironmentVariable(<span class=\"string\">&#x27;SCOOP_GLOBAL&#x27;</span>, <span class=\"variable\">$env:SCOOP_GLOBAL</span>, <span class=\"string\">&#x27;Machine&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h4><p>打开 Windows Terminal/PowerShell，执行以下命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Invoke-Expression</span> (<span class=\"built_in\">New-Object</span> System.Net.WebClient).DownloadString(<span class=\"string\">&#x27;https://get.scoop.sh&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或者短命令</span></span><br><span class=\"line\"><span class=\"built_in\">iwr</span> <span class=\"literal\">-useb</span> get.scoop.sh | <span class=\"built_in\">iex</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https://get.scoop.sh 地址实际是 https://raw.githubusercontent.com/scoopinstaller/install/master/install.ps1，若网络环境无法访问 GitHub，可以使用第三方 GitHub 加速服务</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>详细教程：<a href=\"https://blog.dejavu.moe/posts/windows-scoop/\">使用 Scoop 管理 Windows 下的软件和开发环境 · Dejavu’s Blog</a></p>\n</blockquote>\n<h3 id=\"Windows-Terminal\"><a href=\"#Windows-Terminal\" class=\"headerlink\" title=\"Windows Terminal\"></a>Windows Terminal</h3><p>Windows 11 自带新版本 <a href=\"https://github.com/microsoft/terminal\">Windows Terminal</a>，无需额外安装，若某些 LTSC 版本系统没有，建议直接从 <a href=\"https://www.microsoft.com/store/productId/9N0DX20HK701\">微软应用商店</a> 安装最新稳定版</p>\n<h3 id=\"PowerShell-7\"><a href=\"#PowerShell-7\" class=\"headerlink\" title=\"PowerShell 7\"></a>PowerShell 7</h3><p><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell 7</a> 直接在 [Releases](<a href=\"https://github.com/PowerShell/PowerShell/releases\">Releases · PowerShell/PowerShell</a>) 页面下载最新版本的安装包（根据系统架构选择，例如：Windows 11 x64 选择 <code>PowerShell-x-win-x64.msi.msi</code> 格式），双击运行安装程序，在 <code>Optional Actions</code> 勾选以下三项：</p>\n<ul>\n<li>添加到系统环境变量</li>\n<li>注册到 Windows 事件日志报表</li>\n<li>开启远程处理</li>\n</ul>\n<p><img src=\"D:\\workspace\\OtherProjects\\Blog\\source_posts\\assets\\image-20241118160856468.png\" alt=\"image-20241118160856468\"></p>\n<p>下一步选择 PowerShell 更新选项，勾选以下两个选项后续可以通过 Microsoft Update 更新 PowerShell</p>\n<p><img src=\"D:\\workspace\\OtherProjects\\Blog\\source_posts\\assets\\image-20241118160919429.png\" alt=\"image-20241118160919429\"></p>\n<h3 id=\"Nerd-Font\"><a href=\"#Nerd-Font\" class=\"headerlink\" title=\"Nerd Font\"></a>Nerd Font</h3><p><a href=\"https://github.com/jandedobbeleer/oh-my-posh\">oh-my-posh</a> 内置主题里的图标、符号需要安装额外的字体才能完美显示，这里我们选择 <a href=\"https://github.com/ryanoasis/nerd-fonts\">Nerd Font</a> 字体， Nerd Fonts 是一个专为开发者设计的字体聚合器和修补工具，它增强了原有字体的功能</p>\n<p><img src=\"D:\\workspace\\OtherProjects\\Blog\\source_posts\\assets\\sankey-glyphs-combined-diagram.png\" alt=\"sankey-glyphs-combined-diagram\"></p>\n<p>可以在 <a href=\"https://www.nerdfonts.com/\">Nerd Fonts 官网</a> 挑选喜欢的字体，然后在 <a href=\"https://github.com/ryanoasis/nerd-fonts/releases\">Releases</a> 页面下载对应的字体文件安装</p>\n<blockquote>\n<p>本文中演示使用的是 Nerd Fonts 修补过的 JetBrainsMono 字体</p>\n</blockquote>\n<h3 id=\"PSReadLine\"><a href=\"#PSReadLine\" class=\"headerlink\" title=\"PSReadLine\"></a>PSReadLine</h3><p><a href=\"https://github.com/PowerShell/PSReadLine\">PSReadLine</a> 是一个 PowerShell 模块，可以让 PowerShell 的命令行更好用，这里我们通过 Scoop 安装</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加 extras bucket</span></span><br><span class=\"line\">scoop bucket add extras</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 PSReadLine</span></span><br><span class=\"line\">scoop install PSReadLine</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"posh-git\"><a href=\"#posh-git\" class=\"headerlink\" title=\"posh-git\"></a>posh-git</h3><p><a href=\"https://github.com/dahlbyk/posh-git\">posh-git</a> 是一个 PowerShell 模块，可以让 git 更好用，这里我们通过 Scoop 安装</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过 scoop 安装 posh-git</span></span><br><span class=\"line\">scoop install posh<span class=\"literal\">-git</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"oh-my-posh\"><a href=\"#oh-my-posh\" class=\"headerlink\" title=\"oh-my-posh\"></a>oh-my-posh</h3><p><a href=\"https://ohmyposh.dev/\">oh-my-posh</a> 是一个全平台终端美化工具，可以让 PowerShell 终端更美观，这里我们通过 Scoop 安装</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过 scoop 安装 oh-my-posh</span></span><br><span class=\"line\"><span class=\"keyword\">scoop </span><span class=\"keyword\">install </span>oh-my-posh</span><br></pre></td></tr></table></figure>\n\n","categories":["Windows"],"tags":["技巧","笔记"]},{"title":"玩转网络文件系统（NFS）服务","url":"/2023/08/17/96e40473.html","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>公司有一个前后端不分离的单体项目，遇到一个场景，甲方要求应用服务分别部署到两台不同的服务器（<code>Windows Server 2022</code>）上，通过网关负载均衡进行访问（<code>集群部署</code>）。</p>\n<p>其中项目中有块业务涉及到文件上传、在线预览等功能。项目是部署在内网服务器，并且甲方也没有提供专门的文件服务器，所以项目中的文件上传都是上传到应用服务所在服务器上，因为是集群部署负载均衡进行访问，避免两台应用服务器之间的文件不同步，导致用户预览时异常，最终选择了 <code>NFS 网络文件系统</code> 实现共享文件夹。</p>\n<h2 id=\"NFS-共享文件夹实现步骤\"><a href=\"#NFS-共享文件夹实现步骤\" class=\"headerlink\" title=\"NFS 共享文件夹实现步骤\"></a>NFS 共享文件夹实现步骤</h2><h3 id=\"Windows-服务器\"><a href=\"#Windows-服务器\" class=\"headerlink\" title=\"Windows 服务器\"></a>Windows 服务器</h3><h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ol>\n<li>需要配置源服务器（被共享文件夹所在的服务器）的防火墙端口 <code>111</code> 和 <code>2049</code></li>\n<li>可以先关闭两台机器的防火墙，配置完成之后再打开，如果有问题再检查防火墙出入站规则</li>\n</ol>\n<h4 id=\"安装-NFS-服务器功能（已安装可略过）\"><a href=\"#安装-NFS-服务器功能（已安装可略过）\" class=\"headerlink\" title=\"安装 NFS 服务器功能（已安装可略过）\"></a>安装 NFS 服务器功能（已安装可略过）</h4><ol>\n<li>打开服务器管理器，添加角色和功能</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402971.png\" alt=\"image-20230818171512533\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402932.png\" alt=\"image-20230818171638594\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402145.png\" alt=\"image-20230818171728872\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402008.png\" alt=\"image-20230818171801367\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402407.png\" alt=\"image-20230818171914089\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402833.png\" alt=\"image-20230818172010661\"></p>\n<ol start=\"2\">\n<li>安装所选功能，默认 <code>下一步 -&gt; 安装</code> 即可</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402739.png\" alt=\"image-20230818172537913\"></p>\n<h4 id=\"在源服务器上设置共享文件夹\"><a href=\"#在源服务器上设置共享文件夹\" class=\"headerlink\" title=\"在源服务器上设置共享文件夹\"></a>在源服务器上设置共享文件夹</h4><ol>\n<li>选中需要共享的文件夹，右键属性，设置 NFS 共享</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402816.png\" alt=\"image-20230818173043659\">    </p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402641.png\" alt=\"image-20230818173126286\">    </p>\n<ol start=\"2\">\n<li>设置读写权限</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402336.png\" alt=\"image-20230818173159245\">    </p>\n<h4 id=\"在目标服务器上添加网络驱动器\"><a href=\"#在目标服务器上添加网络驱动器\" class=\"headerlink\" title=\"在目标服务器上添加网络驱动器\"></a>在目标服务器上添加网络驱动器</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181402579.png\" alt=\"image-20230818173737941\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181407601.png\" alt=\"image-20230918140756876\">    </p>\n<p>映射完成之后会在此电脑中的网络位置中显示</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/202309181408416.png\" alt=\"image-20230918140849304\"></p>\n<h4 id=\"可以通过命令创建目录链接，将网络位置添加的-Z-盘映射成一个文件目录，供其他位置使用\"><a href=\"#可以通过命令创建目录链接，将网络位置添加的-Z-盘映射成一个文件目录，供其他位置使用\" class=\"headerlink\" title=\"可以通过命令创建目录链接，将网络位置添加的 Z 盘映射成一个文件目录，供其他位置使用\"></a>可以通过命令创建目录链接，将网络位置添加的 Z 盘映射成一个文件目录，供其他位置使用</h4><p>命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mklink /H D:\\opt Z:\\</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Linux-服务器\"><a href=\"#Linux-服务器\" class=\"headerlink\" title=\"Linux 服务器\"></a>Linux 服务器</h3><p>步骤如下：</p>\n<p>192.168.116.17 作为服务端，共享数据给 192.168.116.18</p>\n<h4 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h4><ol>\n<li><p>安装 nfs server</p>\n</li>\n<li><p>设置 nfs 共享目录</p>\n</li>\n<li><p>重启 nfs server</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 nfs server（Ubuntu 系统）</span></span><br><span class=\"line\">sudo apt-get install nfs-kernel-server nfs-common</span><br><span class=\"line\"><span class=\"comment\"># 安装 nfs server（Centos 系统）</span></span><br><span class=\"line\">sudo yum install nfs-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 nfs 共享目录</span></span><br><span class=\"line\">sudo vim /etc/exports</span><br><span class=\"line\">/u01/opt            *(rw,no_root_squash,<span class=\"built_in\">sync</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启 nfs server（Ubuntu 系统）</span></span><br><span class=\"line\">sudo service nfs-kernel-server restart</span><br><span class=\"line\"><span class=\"comment\"># 重启 nfs server（Centos 系统）</span></span><br><span class=\"line\">sudo systemctl restart nfs-server </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h4><ol>\n<li>安装 nfs client</li>\n<li>查看服务端上共享的目录</li>\n<li>创建共享挂载点，并执行挂载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 nfs client（Ubuntu 系统）</span></span><br><span class=\"line\">sudo apt-get install nfs-common</span><br><span class=\"line\"><span class=\"comment\"># 安装 nfs client（Centos 系统）</span></span><br><span class=\"line\">sudo yum install nfs-common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看服务端上共享的目录</span></span><br><span class=\"line\">showmount -e 192.168.116.17</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建共享挂载点，并执行挂载</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/opt</span><br><span class=\"line\">mount -t nfs 192.168.116.17:/u01/opt /u01/opt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置开机自动挂载</span></span><br><span class=\"line\"><span class=\"comment\"># Ubuntu 系统</span></span><br><span class=\"line\">192.168.116.17:/u01/opt /u01/opt nfs defaults 0 0</span><br><span class=\"line\"><span class=\"comment\"># CentOS 系统</span></span><br><span class=\"line\">192.168.88.230:/u01/opt /u01/opt nfs rw,auto,nofail,noatime,nolock,intr,tcp,actimeo=1800,noac 0 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取消挂载</span></span><br><span class=\"line\">umount -lf /u01/opt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文简单记录了 Windows 服务器、Linux 服务器上使用 NFS 共享文件夹的步骤。</p>\n","categories":["随笔小记"],"tags":["Linux","Windows","NFS"]},{"title":"Java 中的 try-with-resources","url":"/2023/07/06/5fbf5da7.html","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>在 Java 7 中引入了 try-with-resources 语句，用于简化处理资源关闭的代码。它提供了一种便捷的方式来确保在使用完资源后正确关闭它们，无需手动编写繁琐的关闭逻辑。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>try-with-resources 使用以下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">ResourceType</span> <span class=\"variable\">resource1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResourceType1</span>();</span><br><span class=\"line\">     <span class=\"type\">ResourceType</span> <span class=\"variable\">resource2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResourceType2</span>();</span><br><span class=\"line\">     <span class=\"comment\">// 可以有更多的资源声明</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行需要使用资源的代码</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (ExceptionType ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异常处理逻辑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 <code>try</code> 关键字后面的括号中声明要使用的资源。每个资源都必须实现 <code>AutoCloseable</code> 接口或其子接口 <code>Closeable</code>。</li>\n<li>在 <code>try</code> 代码块执行结束后，无论是否发生异常，都会自动调用每个资源的 <code>close()</code> 方法进行关闭。</li>\n<li>如果发生异常，可以使用 <code>catch</code> 块处理异常。</li>\n</ul>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>使用 try-with-resources 有以下优点：</p>\n<ul>\n<li>简化资源关闭逻辑，无需手动编写 <code>finally</code> 块来关闭资源。</li>\n<li>代码更加简洁、清晰，减少出错的可能性。</li>\n<li>能够处理多个资源的自动关闭，避免资源泄漏。</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><p>自动关闭资源的顺序由声明顺序决定，先声明的资源会先关闭，后声明的资源会后关闭。</p>\n</li>\n<li><p>在 try-with-resources 语句中声明的资源的范围限定在该语句的作用域内。一旦超出作用域，资源将自动关闭。</p>\n</li>\n<li><p>资源必须实现 <code>AutoCloseable</code> 接口或其子接口 <code>Closeable</code>（这两个接口都包含了 <code>close()</code> 方法的定义，用于资源的关闭操作），否则无法在 try-with-resources 中使用。</p>\n</li>\n<li><p>尽量避免在 <code>try</code> 块中修改资源的引用，以免影响资源的关闭。</p>\n</li>\n<li><p>异常处理逻辑应该根据实际需求进行编写，确保适当处理异常。</p>\n</li>\n</ul>\n","categories":["后端开发"],"tags":["技巧","笔记","Java"]},{"title":"Vue 项目中如何缓存 Iframe 页面","url":"/2023/07/03/be3dc2ee.html","content":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>在我们日常项目开发中，可能会涉及到其他项目嵌入到本项目中。本人在工作中正好碰到了一个需求，需要将旧系统中大量的 <code>HTML</code> 页面嵌入到 <code>Vue</code> 的项目中，嵌入方式是采用 <code>Iframe</code>，但是若使用 Iframe 嵌入页面，那么页面缓存就相当重要，否则用户每次切换到 Iframe 页面类型的菜单，都要重新加载页面，这样非常浪费时间，并且很影响用户的体验。经过网上查阅资料以及结合项目情况，这里记录一下本次问题的解决思路及实现方案。</p>\n<blockquote>\n<p>项目框架：<a href=\"https://github.com/jeecgboot/ant-design-vue-jeecg\">jeecgboot/ant-design-vue-jeecg: 基于 Vue2 + AntDesignVue 实现的 Ant Design Pro（github.com）</a></p>\n<p>参考：<a href=\"https://juejin.cn/post/7160873633408090119\">vue 应用缓存 iframe 页面 - 掘金 (juejin.cn)</a></p>\n</blockquote>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><ol>\n<li>通过自定义规则区分 Iframe 类型路由与非 Iframe 类型路由</li>\n<li>手动获取 Iframe 类型路由的路由信息，并且手动注册所有的 Iframe 路由组件</li>\n<li>Iframe 页面打开时或页面切换时，设置对应的 Iframe 组件为打开状态</li>\n<li>获取所有已打开的 Iframe 路由组件，<code>v-for</code> 循环展示 Iframe 路由组件，并根据当前路由信息结合组件信息判断，使用 <code>v-show</code> 控制组件的显隐</li>\n</ol>\n<blockquote>\n<p><strong>关键：将所有 Iframe 类型页面全部注册为 Vue 组件，并且通过打开状态进行展示（懒加载），通过路由信息来控制组件的显隐状态（缓存）</strong></p>\n</blockquote>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><h3 id=\"区分-Iframe-路由\"><a href=\"#区分-Iframe-路由\" class=\"headerlink\" title=\"区分 Iframe 路由\"></a>区分 Iframe 路由</h3><p>本项目中是使用路由信息中 <code>meta</code> 数据中的 <code>componentName</code> 来判断的，只要 componentName 包含 Iframe 就代表是 <code>Iframe</code> 类型的路由（区分规则以实际项目为准）</p>\n<h3 id=\"获取所有的-Iframe-路由组件\"><a href=\"#获取所有的-Iframe-路由组件\" class=\"headerlink\" title=\"获取所有的 Iframe 路由组件\"></a>获取所有的 Iframe 路由组件</h3><p>本项目中采用了动态路由，数据存放在 <code>Vuex</code> 中，用户登录时从数据库加载当前用户的路由菜单。并且项目脚手架是使用 <code>Ant Design Pro</code>，采用的是 Tab 多页签模式，所以在关闭 Tab 时也需要修改 Iframe 组件的状态，所以将 Iframe 组件列表也存放在 Vuex 中，方便在不同组件中共享数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  ...<span class=\"title function_\">mapState</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 动态路由</span></span><br><span class=\"line\">    <span class=\"attr\">mainMenu</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.<span class=\"property\">user</span>.<span class=\"property\">allPermissionList</span>,</span><br><span class=\"line\">    <span class=\"attr\">iframeComponentList</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.<span class=\"property\">app</span>.<span class=\"property\">iframeComponentList</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getIframeComponentList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iframeMenuList = <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleIframe</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">mainMenu</span>, [])</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iframeComponentList = iframeMenuList.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 设置组件</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> component = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(item.<span class=\"property\">component</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;layouts&quot;</span>)&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        component = <span class=\"string\">&quot;components/&quot;</span>+item.<span class=\"property\">component</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        component = <span class=\"string\">&quot;views/&quot;</span>+item.<span class=\"property\">component</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">componentPath</span> = resolve =&gt; <span class=\"built_in\">require</span>([<span class=\"string\">&#x27;@/&#x27;</span> + component+<span class=\"string\">&#x27;.vue&#x27;</span>], resolve)</span><br><span class=\"line\">      <span class=\"comment\">// 根据 index 生成唯一的组件名称</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> name = <span class=\"string\">`iframe-<span class=\"subst\">$&#123;index&#125;</span>`</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">hasOpen</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否打开过，默认false</span></span><br><span class=\"line\">        ...item,</span><br><span class=\"line\">        name, <span class=\"comment\">// 组件名称</span></span><br><span class=\"line\">        <span class=\"attr\">component</span>: componentPath <span class=\"comment\">// 组件文件的引用</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 交给vuex管理</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;setIframeComponentList&#x27;</span>, iframeComponentList)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">handleIframe</span>(<span class=\"params\">menu, newMenu</span>) &#123;</span><br><span class=\"line\">    menu.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 根据规则判断是否为 Iframe 类型的路由</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item.<span class=\"property\">meta</span> &amp;&amp; item.<span class=\"property\">meta</span>.<span class=\"property\">componentName</span> &amp;&amp; item.<span class=\"property\">meta</span>.<span class=\"property\">componentName</span>.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;Iframe&#x27;</span>)) &#123;</span><br><span class=\"line\">        newMenu.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item.<span class=\"property\">children</span> &amp;&amp; item.<span class=\"property\">children</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleIframe</span>(item.<span class=\"property\">children</span>, newMenu)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newMenu</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置-Iframe-路由在打开后为打开状态，用于缓存\"><a href=\"#设置-Iframe-路由在打开后为打开状态，用于缓存\" class=\"headerlink\" title=\"设置 Iframe 路由在打开后为打开状态，用于缓存\"></a>设置 Iframe 路由在打开后为打开状态，用于缓存</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 实现懒加载，只渲染已经打开过（hasOpen:true）的 iframe 页</span></span><br><span class=\"line\">  <span class=\"title function_\">hasOpenComponentList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">hasOpen</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根据当前路由设置 hasOpen</span></span><br><span class=\"line\">  <span class=\"title function_\">isOpenIframePage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = <span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">path</span>.<span class=\"title function_\">includes</span>(item.<span class=\"property\">path</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target &amp;&amp; !target.<span class=\"property\">hasOpen</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"title function_\">indexOf</span>(target)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> hasOpen = <span class=\"literal\">true</span></span><br><span class=\"line\">\t  <span class=\"comment\">// 更改 vuex 中 iframe 路由列表中的打开状态</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;setIframeComponentHasOpen&#x27;</span>, &#123; index, hasOpen &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-Iframe-路由组件\"><a href=\"#使用-Iframe-路由组件\" class=\"headerlink\" title=\"使用 Iframe 路由组件\"></a>使用 Iframe 路由组件</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in hasOpenComponentList&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:is</span>=<span class=\"string\">&quot;item.name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:linkUrl</span>=<span class=\"string\">&quot;item.meta.url&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;$route.path.includes(item.path)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Iframe-路由出口组件完整代码\"><a href=\"#Iframe-路由出口组件完整代码\" class=\"headerlink\" title=\"Iframe 路由出口组件完整代码\"></a>Iframe 路由出口组件完整代码</h3><p>在项目中的菜单页面的路由出口处，将 <code>route-view</code> 组件更换成以下封装的 <code>iframe-route-view</code> 即可使用</p>\n<p><strong>注意：这里的 <code>route-view</code> 是 <code>JEECG</code> 框架在 <code>vue-router</code> 官方提供的 <code>router-view</code> 上封装了一层的自定义组件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;main&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 非 iframe 页 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">route-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&#x27;!$route.meta.componentName.includes(&quot;Iframe&quot;)&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">route-view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- iframe 页 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&#x27;hasOpenComponentList.length&#x27;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">component</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">&#x27;item in hasOpenComponentList&#x27;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:key</span>=<span class=\"string\">&#x27;item.name&#x27;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:is</span>=<span class=\"string\">&#x27;item.name&#x27;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:linkUrl</span>=<span class=\"string\">&#x27;item.meta.url&#x27;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-show</span>=<span class=\"string\">&#x27;$route.path.includes(item.path)&#x27;</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">RouteView</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/layouts/RouteView&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;IframeRouteView&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">RouteView</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">getIframeComponentList</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 注册 iframe 页组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(item.<span class=\"property\">name</span>, item.<span class=\"property\">component</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 初始化判断当前路由是否 iframe 页</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">isOpenIframePage</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $route() &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">getIframeComponentList</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 判断当前路由是否iframe页</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">isOpenIframePage</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    ...<span class=\"title function_\">mapState</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 动态主路由</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">mainMenu</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.<span class=\"property\">user</span>.<span class=\"property\">allPermissionList</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">iframeComponentList</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.<span class=\"property\">app</span>.<span class=\"property\">iframeComponentList</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;),</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 实现懒加载，只渲染已经打开过（hasOpen:true）的 iframe 页</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">hasOpenComponentList</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">hasOpen</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 根据当前路由设置hasOpen</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">isOpenIframePage</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> target = <span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$route</span>.<span class=\"property\">path</span>.<span class=\"title function_\">includes</span>(item.<span class=\"property\">path</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">if</span> (target &amp;&amp; !target.<span class=\"property\">hasOpen</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"title function_\">indexOf</span>(target)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> hasOpen = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 更改 vuex 中 iframe 路由列表中的打开状态</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;setIframeComponentHasOpen&#x27;</span>, &#123; index, hasOpen &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">getIframeComponentList</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> iframeMenuList = <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleIframe</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">mainMenu</span>, [])</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> iframeComponentList = iframeMenuList.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 设置组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> component = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(item.<span class=\"property\">component</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;layouts&quot;</span>)&gt;=<span class=\"number\">0</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          component = <span class=\"string\">&quot;components/&quot;</span>+item.<span class=\"property\">component</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          component = <span class=\"string\">&quot;views/&quot;</span>+item.<span class=\"property\">component</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> <span class=\"title function_\">componentPath</span> = resolve =&gt; <span class=\"built_in\">require</span>([<span class=\"string\">&#x27;@/&#x27;</span> + component+<span class=\"string\">&#x27;.vue&#x27;</span>], resolve)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 根据 index 生成唯一的组件名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> name = <span class=\"string\">`iframe-<span class=\"subst\">$&#123;index&#125;</span>`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">hasOpen</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否打开过，默认false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          ...item,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          name, <span class=\"comment\">// 组件名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">component</span>: componentPath <span class=\"comment\">// 组件文件的引用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 交给 vuex 管理</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;setIframeComponentList&#x27;</span>, iframeComponentList)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">handleIframe</span>(<span class=\"params\">menu, newMenu</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      menu.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// push所有的iframe节点</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (item.<span class=\"property\">meta</span> &amp;&amp; item.<span class=\"property\">meta</span>.<span class=\"property\">componentName</span> &amp;&amp; item.<span class=\"property\">meta</span>.<span class=\"property\">componentName</span>.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;Iframe&#x27;</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          newMenu.<span class=\"title function_\">push</span>(item)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (item.<span class=\"property\">children</span> &amp;&amp; item.<span class=\"property\">children</span>.<span class=\"property\">length</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleIframe</span>(item.<span class=\"property\">children</span>, newMenu)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> newMenu</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&#x27;less&#x27;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扩展一：使用-Vuex-管理-Iframe-组件列表\"><a href=\"#扩展一：使用-Vuex-管理-Iframe-组件列表\" class=\"headerlink\" title=\"扩展一：使用 Vuex 管理 Iframe 组件列表\"></a>扩展一：使用 Vuex 管理 Iframe 组件列表</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">IFRAME_COMPONENT_LIST</span> = <span class=\"string\">&quot;IFRAME_COMPONENT_LIST&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iframe = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">iframeComponentList</span>: [], <span class=\"comment\">//iframe组件列表</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"variable constant_\">SET_IFRAME_COMPONENT_LIST</span> (state, iframeComponentList) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Vue</span>.<span class=\"property\">ls</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">IFRAME_COMPONENT_LIST</span>, iframeComponentList)</span><br><span class=\"line\">      state.<span class=\"property\">iframeComponentList</span> = iframeComponentList</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"variable constant_\">SET_IFRAME_COMPONENT_HAS_OPENED</span> (state, &#123;index, hasOpen&#125;) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">iframeComponentList</span>[index].<span class=\"property\">hasOpen</span> = hasOpen</span><br><span class=\"line\">      <span class=\"title class_\">Vue</span>.<span class=\"property\">ls</span>.<span class=\"title function_\">set</span>(<span class=\"variable constant_\">IFRAME_COMPONENT_LIST</span>, state.<span class=\"property\">iframeComponentList</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setIframeComponentList</span>(<span class=\"params\">&#123; commit &#125;, iframeComponentList</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;SET_IFRAME_COMPONENT_LIST&#x27;</span>, iframeComponentList)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">setIframeComponentHasOpen</span>(<span class=\"params\">&#123; commit &#125;, &#123;index, hasOpen&#125;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;SET_IFRAME_COMPONENT_HAS_OPENED&#x27;</span>, &#123;index, hasOpen&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> iframe</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扩展二：在关闭-Tab-标签页时改变页面的打开状态\"><a href=\"#扩展二：在关闭-Tab-标签页时改变页面的打开状态\" class=\"headerlink\" title=\"扩展二：在关闭 Tab 标签页时改变页面的打开状态\"></a>扩展二：在关闭 Tab 标签页时改变页面的打开状态</h3><p><strong>注意：以下修改方式仅适用于当前项目，经供参考</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">close</span>(<span class=\"params\">pageKey</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">iframeComponentList</span>.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> pageKey.<span class=\"title function_\">includes</span>(item.<span class=\"property\">path</span>))</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasOpen = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;setIframeComponentHasOpen&#x27;</span>, &#123; index, hasOpen &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>整体的实现思路并不复杂，但是运用到实际项目中还是会牵动到项目框架本身的结构，可能会引起其他的问题，个人工作记录，仅供参考，如有不足之处，欢迎友友们在文章末尾进行留言交流指正。</p>\n","categories":["前端开发"],"tags":["技巧","笔记","Vue"]},{"title":"JJLUO 的个人备忘录","url":"/2023/05/18/fa915e12.html","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"4f104bfb95d5a9d9e6c168b0a588dca4edc710130a8f1136061cee030e3bf009\">debebae9fef519e064b58ef957dc2f35811c650f0876f4380636a305beca172be78f9ea624bffe0ef6fe295e902350b137acecdbcf17bb9f573e0794e23250f12c6c0c6a3ed735f272fb802321d959eb7983b2d325e018964aed03aa68d81885ac6e37daf9e0c67d267f9f0acb39eec139949bd0b6f3621c34e95f921534fc001ded31239cfb55883c5a3e863f59f262cd64edc161b01a4e80857dbe94e45ae004f0af11ff59cfd83074e1ac5b7ae745775b6d9fb77ffb703548182ca2170df9076f412ea65f8677e7f59c07fc216c844f243a8488596df23c51b52322d371e3e378f05831226e58c9a631be5b1285b985ffcff9af3663333fb480868735a6073a55bcb01985c55fd00a5e1f173278b0bf61d810247c85ea12dea9ab30a3a867633279cb8ef0029f2faec2d7d225107aca34729201fa2ac7fa0d82fd95221cafd07c510f9c174048852e3917fc87ecb023250293034d833c9878d607b22c8bafe1fab9e5df3601275c816a962c203592e70267dc52c7076dec3a55de2f06c5ba4bb1c6d39f28f002bf43f8a7399177a35cba28bdb5ef4ebe9b0a025aa57a0fb168820fbd4a4beb765e47e76c44d6afacc8ceb9b68ea8dd7d196e8cef4eaa5d17f5e36b7da71d766df881bb9efccf5a58a5c5895e5cc605886a93422bf0fee7ea7961ad7156b28ff4b84eba935548a30c0992f32b8f0f3c2efe7e09859c5e97f121b60f591fcffbeffbc5a5be54e03b239bac67e88b0d22589cdc30f657cab2c86baebea00f71f96a8a1ffce8d5cf92e45f1a3e7477874cd239e2ebc1209ca3e17c9b07240c78bd0ea71d06cfbd56e63e619390542aaaf4a9f0ae5bd2e8667079f6989259ae4c4d772e3958d8a0a7925a4410e3691dd178cb9278444dab054e81bad18e77f69dbe4c8f6219e62b6fafe1a4f3693439a1a638312a7639f65bda56b33afd25cd306e40b222e4010ab81dcfcdeb644c0f9fbdb211c84c32e4d76a8ab61a463bbed69ab27fc703023a484f81946b1d1a3ff8dbf9e2e6b560d19023ada3e2e638a73085ded09306235bdbeae77369d833af06023d808f05906f93662f81319637b6eb2530e2b2beaead0fc0375011495e9f745f8473cff31d0248b5d750ac9849cb10646220c786eac59b88968bbe0f10dda4b2b39275b8dc112c0e6520eef0c86f4cdcd2652d0027c42bf7aef74b8e55c621b35ade864b25c6af4b167fe4364a65b7708743e6a57ae2dea81565a9f8770ccf3fadd77a05746f3de86b0f76fea75858350764efc0446151518f3bb77eff76e0f01876999cda9c205198ab98ab6b704e765bd1904c1d74a969d40ebf970585f986413d9864cd71ced336e6bab415177b151a720bc4f09048ec6dbacacb7d2b345a2c5efbf07fa84a22f929e833d8f69f8a677264c92b87b3a0eadf5d25c481c9530e0090630109666bc6cb6b5f760b0b27cd23b60439f325a646823ac961ed01e0af8a02b63fbb0a1e135673ef5a4745bf569481fb675213c5c5500851b735a4f4ba7bb2bdb394b3a62ee905a61fccd2aae78b9a09cc42ada446a4eeef736b2cf7f647fe13bb88353f5877e53f402c298c0ddfa57e78553cbb13237e0b06a5534cb225b2522ddad6a3076edf290d85f9f5f10135fa7f53c863965a3eaa7d0f902cdf689ebf6be6372aaa714b5930e16e82947b12b88e05eceac01dd4c749a5f341a6e0dbde24c544da2c2042c9814fb0434d753ac1688727286c757f72aed2a00496a36e2c0883531cb2c22cb7224e7431ce9855d5112d117f70b3b2466f4f3bc6f5166cfcc16d4cb0db2638a7045de5aded59a369017e5a4921b177f26359d3eb63de7c8ed0ba4718e8acf762825aa135bb095ecb2b9c0b5945b6666c41edee9bf12edab6c675a63931a62bd935953ae75a113e85af1bef9267fb0e6f44a0afd03de0375db91fa23399cbd2802dc708aed06634572429882b9d892f6b7b9b6367af0aa2ee164fd635878874bde3275b8d0342ddd4959f77a5d495deff614ac08687769ba8b80ec1655fede4214dfe2bc8ab07350bfd61e661929609c4df4f84824e58120af468673a0d6f1aafb0b45a7397e9460e7b61f4c6f3de5d5281b75cc13a03b61106c0352591a7bcaaece3465411d7a119b0c4917cad31047ad8796b8280a91af7563e1bee10bed2ded87fa8aa06990989e7994185ee25ffcc1f2d5c9ec2cf695369d8f97d4c5b75f6ca0dbe3c4d25d0ee98365b4d499642149f0ce9fdf7d11f838b3f04da004f321bf83644408739bb1c951ced1501f0bbf92b2ac2d30b16797158253be5465b97c2ba3ce873e3fb6f051a7d8a6a076d08802a766ab364e25a30318f968541256309c6400ce45988af2cce15376a25706d8459a0ed5fbb1373171a4a49c9bfcdda2242b638d26e6896d9a4dd3bf930a93f4ad970ae246091aba0203cd91feea94caaee6e6ff5fc0926df40e8fa39026aeda1a0ecd100d43161becf439dd81588cdc8cfff6605fbc230e8dfb47df5e20abc001973ae0b0c0bc049ca040c0d0db927de03f7df40bc364d3e6aa71246d737bfcb254423c95b9f4fe88e953bb7bc95111aa5663e3b55df0abf0a6d7a41d8523b4f1edd3c6c90299806e6ff16214eb7422e9acdb4b61be20e4acfa9cc2b9d9b862e6e2864dbff333633ccf90940513b7fe31622505befce8af92bc03f9ae494c9c4ec9a1a928da4b0914aa91afbf0def82bb17ad00e0bd23b7b6320a1bb79c3ada56f8b0c3f52b2c56fd4d1eb658bdd2894e92b29677c739f9cf959c8a100d461f0fdf2b0b1fb21e42c3c7b439481b62ea8d2d22925ff18ce4a8450bae8292ed3f4e6fd834ddd65f96fe1d53a3cffe3548ca758bfbe2fe22f956cde2564df647b772991c5b3dd50f134892adddf6782f5ba7e378f318ac55a8006bc4160e8a9d9a3edacb9cfdfda0c96e68921aae8fbda7703a441f4f5bc53995abc8e88cad072c6253dac6cc5fb86abde10fdb671266f7cd32f3ca6709213e4ac833eddaef7887de6d7d9460382706dbf686cee689db12fe63f9730b48e85e3822f20abec0deb5b503a1d1a618b5c46ea7ab4f7e1b5ccd1cbc5ecb5210133f8098a965f418b511a365599c3efe4ae7a2ed79679fe7e4ff7f50f2c30a14652557834d3134bdbb4a1d68a37213cd6932dc52cc2b542df6f5d4e0f9408271d8d623838b2dfef36ec148b4169c7081e06b74ed7d1e86774261c108a656271dd9aafab666aa57c7e7c2d810fa96cadc3615569e21abf00a957437a61608cda776eede35fef4f7e446c9d08ada2aed95584047d55451f6308f730482b1efcdfc4faf3d6165310521b05739c194ec21c432d48449aa1d7f07c48f7e606ff6bba922f45c8c5903c18dc1687b0d056c2aeb7617796deaf05ce91817492a401054a8320e773390f9e8079b15b5d921266d2e1dbda02afa91fdb633f2616291cd5e6d06775dc00511a7ac7729f1236b22bfabc97225b335434f5f8ef0f79f5f859ddde71a4ca85770845bb0f3ee95bf6b8d249c5aa554cd47f876230dc31972105cbfae7c81b24c54f254e22946e269146b3127d85be28c898cdc9271d4c729fe9b105e66ecade336fa03716af3e04db29b8117a5b627877e1758c0c56090a5308713c00e3cfe257c93a64cb703090e55424de980fd79d9a1dc14ba1778ea3915094b0d8eac6fd0a15cbc808d590ada4e69c7fcb800dd0add4faa1a663255946633304d2b3ed45f2f29aadeaa7899776b64249c0f8616f9d51a253822d7f9d0556b2848d76441ed31d08d824c7561d0748cc227e82bacd356d53173f847379ada8ec573800a23c42c4b56c91702adccefe3285d6f83181bde534fb96c972f7926767d4e7701bb5c99bbc4bde860479816079f77331ce8092449fb7509bb938d92c0feefd4e319e844032f1da1d569049d1354f52654ae4a661380c93a1b61e28dd8b4f66dabbfc8054f6176f0bfbcd66f9b7d2fb970baf22db7c32f60552dc7cfe27fd2be610808cbc5bfb67639acff067c48fa2da248b22bd919cc707ad6021a45d0cc7bc1d967ff2dbad36f5060093ed70a42eff701c827cfcd604642e8ad9ca2c2649d17d3aedb22d4a859e285daf65dac71fb3577515a0526560f1e51716619b4c4e1daeffabf5e41e0184b541dcee57a4373f43103e29cdfc448d6d37554df243a05e7d6f930dd87f8f80bc659557807f330573411110ae15d99dfc3d2106930d7c3364f394ef487ba6396f6d89f3b750edcd7eede5c282ee7a92e4c14d4f922f099b9b747b64a8f5714e471a69e7658263f2de350be608dbcd5307672861f5eb60e7dbe884bc2d95fe9350d803b86d91566958b7603dd4ce7ebb205a9b3ada0934fcdab99358c435d7640b661f77b0518470eaa80315063a23dd79f79abb4938bbd8178858745b1736a84b0dacbac1d04d1ce166394eff925da377e3dbffd7312545bfd661d0381b2fae938e49f0661cb7ae7633871dfd30aeb37c9b9dea015e1614487d9354cd91cc55f090b48ca8f42882cee35e305df88f3990fc02f2c10325178dd6c49ebee78baec2e5604f058afab10187682d7fde80f6e4bdd7f8b11190e297a4b08e0166c9ac15c0523a4b683973a0f4b22ccbb42c1a2e6a128880d402322632493f20ec5d5bbfcf7f1140af9db87082e96dff8f0e4e9f98d3001d8f1922daf3339b1016474972308ee8ee8944bcc4c689eaaf24188539c48077e45a7c7e88af53bbd426b30acc0ce0af614547af253e488c0f81a5dfcfd105f411288d8ade97ae6a49327871a903a1a1752c4035b7a8ba24d0d0dcc3ff5a554343178d9ac973c6cf236d0300992d9688922f00783213bbfb62e588fa251828c1ce9789ce54c41776122a42a374c5f1cce99d2bdb03355026667cb6d50a740f5113fc18a42fd9e60a3093e8d4976c600fee56df0e838468b99c86bf63c69b63ea8b6de3d58b7c75c689070cf736e70da6ce731300f95588d147257d392433df4843e2552bd942402af7b0b1f9fe484c268f9547ef73d03229949f7e3717ac50142db9a23792753bb87a0993ca39e80487973d6df993a4b82f65ed2eee3ae50c32428c42ef31e5d3ce5dc65e7215fd8e77c534b1c11fdf4e59a234a5e57c0e477776ba1812244e0fe60c8855f6d4201f5700a981180b95cfd6e84676fbe595edc52464df6bf06ac4a85189c88641f96da290d665295397d8bf94d57bb55696a62465259be8a184e9623c18b9277a4181f41374f84bc649774669f26645a12eab600515428bfdbdf87edeb0638ce19d0b2ea583e676bb57d0453f340de2bf641b730b13cc1b19f06c0d3ae8c095024657679fd6a6380b3cd0f28b0c5487f0b14414a719d3f1f87795d8db841bf5b24f8b2616f7a60c8e0992b6268d2fca2bf62003dcde923e4edda7c0aad499687812cc95ec7ce435bbc3aacbe58ae8c6f7d8d6f0e458ac2fb2ccc0a9a316833784265d0c9726d544cd43490e7b05f686d7f05c0ea0286278a9d38541f2323580c95ad47ef2e00e71a7e133e8ac3551ed194159f9fd874e34c3a78887f1b32aabffea33ff52ece2f7367a02b1916086f74ce82951e00eb6016f8153f062f21a54fe8fd37b18cb4e00275d76fb1be515992023a0c3e16812bf6abe2f2b9083102413f738f1aeafbd3331cb2de77514616b3bfeb50f61e54c1f8341fb44a734f7c2cf84434371faffe0d431bc3548d8ed08eded8ac41bf61a3753bd8bfd2655b268cc65225fc64df1c2b9df7c7647837e9dedd70a2d787a95cae119b4947be1f16649513eea0f63a4c22ba644098e14cca7d39d2cb15b6b3f30463bd1426495b3243c2dea74943a6bce0564d792a914f781699d4b5cdc3a1a948a14df2d5a4fb57d824999e4af20ea2c70e666c2ca111741795670ff3be710f419a93f7a13e9c5b97819c684f0f5da665f5ca4476717b56aa3a3b2a1a2fcc3f114270a1b1aca80e36658e1fae1141d10786ac5b98396a0ee2bc5ae7611426ffd7426101c63e694682279f13b9db2cc73d629c6a0bc2b3675b2ebc65fb6dfe3070ee8f29c37d1030c20585d65dc0952a415a19ff88edfa746305cfb3ebab9cb7179e91ac8985fc0211761fb63915a506bec2cefb377802a467278bef7efe32fa57587e2f60cbe9001ae2d194c3c51280714088da3f3900a5e0e9be43a7f6c72d73def9e7d501ff34d8972d42bfe810cf7f725ae93ebf821274cb24fcb62f7fba22b7838a02c248d9fde151a2b4257ab38d99c60ae130c35606d6df561b54fd427c316ae91e88cc54274ee5b2d41640083cc5356d19aba5d2a821be04d66dc51b51b0258af66a9fd11949c630e650ca7c1332028977afa5224852ffb2018bfe69f3c0ec545365ba561f48f4aa3958d2d620907da6f0c1a3a1797d543399577d3b574abf1493f922944710054e7012b70470f591076264f15362406f483dd0789e9f5b46a628d97e00c658123578352db8616a29b23d5a5c3886f6f3ac1312fa3a2cb7485eb81d0c63a2429872fd879f977146efd7d78b1fb5a1564e59dce06147b6ac6ea9151ba5e75f62f88862a1ee2a413a2946608b20ec7c653fb27be2a0549fc476a5f6d18b6747e43fc1941ed59f043877f18682e711ecb3d7d4596bd289b599aaef72f9495c52fbd0600021371cc74640395a5f6ebbecc5ee7f24fbfa6b4b1bd356b489cb853ab999ff7f76ff08a6be53c799686d4fece61cde000f7bea56240539b0ae9b33b1e1a240ae6578227ae2554c18e9112fa7dbd44a3f5d3902e3a4f503bb8a520778fa61f6b562a53450c71ef046238ec4c0c47801a207e3997f7b522461764641c83c143ae670509f12cf1777080680ce061d5b1c019a114bec7172ea7dffab4085eeed0042b9ad07bcc87d64c7e29e187ac774f04677ced6bfe15ebb9a5423ced3e4bc0e75805f809e7b3d62979c2c6125071fd9a39e7f41db19d55763fc33ccc6a428982ce35e025242de75b5760be7f0303de6e5334f6a4dec6d4e78730f9dc37c893c1096b188f97f067e2f2dd40cb6f6b72706a17a87ae90a870712925bd7dc6f941c9b746db0cd894123321b7cd7303d246e601d3733148b10fb4e893811124b20e8ae716f13c363bc66eef83ece2544d8dc628b284e17025fbc1e7b2518511147502d315c57f2f17891ee818e4758e1323131f58ce6b292650c13c08418bcb9f7cdaeffd6f5be5a61a01f3352b9d55f851a127b647632de9767c5b68298f2b42a1af057a9f118bd3ec42e1189d8a219b7aeacbb47c4713a3e92f3cecb70eced2691aad3413507c340e5e49869b48b175e84122502f9ad5f5b45b60143fe4df4f4decfd59ed73e696bf22554b18389369bf35e728443cd96d8abbd5887e2e3171628ae3d10aefcc4a640dfcb62e20c1cd5ffff343ad5acf9d36f060224ad5da03e44d009b6386a1aa66f22eecf7ca94aa27ee6cec6797d5807e5df4c86a589cf3a6a16197fd5144a366cd921d027ba09d248b37c70425cc4df8f78292135cfd4dd6b35ed3f8191ed30917c62624c79909ac515138455d051f5d8f7120bbe9a55b4f45dc6e3252558ad7febece77d40f852092e3752d6bfaeb41b43d85d2dc7d5e28b863d4cfe7a2c2660e3d2371eb2bd334f0e98f4219aeb069b9b9ce2fb0a34af85cda0d0ac7f751a2970c7738998c79806aee855b751d0f5b0d274f5b26739ccb0f2512f335039f8f2bc662b8c2d1dabdea990fa401253147274b504e40d28cd4f85d9f8ee614e06776b42ce100cf6e90f225602e19a1d5c94d43b9e74f950fc8c07ea3e9cc12881dd3689b5e3085ad5a7f274a3f4f4a997786b1d80a43cfbd960fd3573dfe527b423938ddda19b6ece27e86c7ecaedf9386ac59f2256de0806e373dec6f31ddb0938f02769b83fa6ab14ab8f0112b0580769d84f9b4e6e544c3f5ef6c17f7add61dc61aca366da29436a86554ea862c4b3a15558af3ce03307e531e15c5b4c68b1ca9ff468626e5017ea4ec7fb623048a447dc337fe4a88ca866e9ce07686fd14cb994fdbe1627c83bcc50535be8115696df439252d494153950672f77bd46ebdd3a994bbc0332bb766d1368b181103dd9f31462a237d8b03ed8863eabf9a37555b647544addda8df395f6f27350a8e7e559f122acecc431516eb95304f54ae73c9073e0bc1c53054886564fa4cd4550674d8a4c0beee26e4636aa61b6ff99ca531df9081b1db79f486d52ca2d4e369de9c69094634d3fba41f60b59de1e880130033d0617edf49f806d0ad6d4dee6eb839a00246c7db6ddf293cf0ad15d22b59af922bf4fd59b946969eff5563dc2d99dfcfec8252e0fba407b2e4164a169174c8bdf98cc27dcc7c6749aa1a1ab24ea5090fccaee3ec674b47a2eb702e7f7aa84d46ac54d3572b85f4f5eeccf0957743142eb66738b9d3eec53bd5fad41071e4f830480dad4fb6c2c12cf090a757ce947cfbd09d9005a9673fd5a47a45268febaff9550d88de904a262f44ef06c829757d7efa3044db555fa332a2acc32d5cc885bc1199fa711a83c65678aa997ecc3365c2af826c67d1f309b052b0f48795ac39c7c251b9525905b7593bce737880788e5249422e1a0e2ee76231813cabb41a1db8cfc719be433b402f3efa53f8d646b46ccfa5459a6ad92d5398a9d078b7b3241b767b4bb475daa1b75170796d818b4c8628d212f5287200dd4c2f1de54a1f19c1e1264a06fdee150961fad943a95c65bccb373f042ded6ff78b422fee8dd8d9aa7fa150256008210f92da7e324e5e42ba4707dd29b47cf7bc815f1e778c7bb17fd3d5eff5e3bb49fda5626ec4f9ccf3bfff4882de06c3db95b637bb31caf67b266ed23351ae465a63f4430c62c06d8c81e6fa71a4373768853e86a32cbfcf37b3552fa685ad37a34607eb25d833ead433c7f047d848755b8c39dbbbd6dcc757eb964dd3636e51446952778205ba9ac3cb528c2a12bb0811552db981f3548fa576b705dcf87f59ef84f717823549e1e5d0197b3ced4d9ede216ea276d9c7d73145e4e283b293c51769530baf4dd5b6f7f3aac835e719125ae335c2cda33b13bb30b46ad04b649324b6252d72611c1edcd50af74dbb308f96647480dfb953f9256b2614d7fdfcbcf09871eb83d206f03c2397ad8e3188d3c1cd05b181c198a3816917dfe4217a575c04da343dfa5c0e312093993293f54a9d50c5631f379bbb3b2fbfd12bcbcf6db2a114211712e234187a7d2971c20b5b9c4551a2bc287e5f4340a37e16c4e87785e0ef15c73e2d6f27af222aae7323e40a0e50a374e32b7acc807eda6399016c14fe65e6b06bc41051cebf47b10ec67fda96ad320595f3f3ff7e2c604be8c1d3a999a429d92d34cc588ab73f8367021a09453bda1641172656a8b8d906aa7dba08a0f8298c0b576425e79dd5c50bd6bad4250fee10fab9f3ae6f71783c2d1594c1fabb853e94fd01c80da952fe41280e7a5d0440dc9e75111500ec1846fe199be73f4ecea9d7a971c9223e998bdbfd81a101ed3e569c51b8751aba21cf6626082fab05ca28a935132ccf7e0eab6cd1f1d06366a1f7a793900616f95fa45b64d952fd8f6172ec104226d6434368750ab2ac02fa81fdf41ad2cf1aa8a6d37b56064fae34a8d4d9a8960f4b2174db14262e79538264808442e876b08e6837ffbda2b180110fb587630e7b64f00f2ca9765e52f8029dfff5a96fcdf438ca2e9770d7f1f34ece25add53b31f07e718fdacaf1371732d939260de6880309f54f79b5717693e8000cfd8c83194f97bba70c1b81459352bfc9f1ecf2fbeb787ff846a54198e523ff7f827baca55b382a3ebb06c71500092486d810045738a18f6a6248c0a0064153c726ccdf15b419112823855467d2023113c944d6780919d15d4118e52e3c5cc01cbc0aa31820dc214b509ec59ea296142b5dc8bae6d2000771bcce549b6dd7750de5da4adda07cb0e28d2f4ce3d5d8c2df84bd68178e7c73131e9b682aa4664c3c4a5b92274be666c988876769a6c36f0d3f43896a65986f3ca53c4f7457b7aa532c837566294139b6cf69513772382a3ba5c2e05d50fb8eb23e8940c37379286a720473b9203dd810564004a5ec4a17a4aae2cb5e7b031d2a29c330834327556efefcfd0bae2c07b122119a1351c62fbe566910634c806a8bc1e80ef11a7b9def0a1213dec3b5b2de379e71748da01f5ee0535d417955cc55a09f213fd9bcaedd8411acd897a204667056cd2cc358ea656917ac9865428938ccff019f95136ac021522a7ee3b6a0d18a4511fa58a570a0dd1b92b1479838d4ff71ea986bc19357f11994aaa6a7c82a341f92b67747de07a2b6f96606d9dea365a3a8036f9aa64578bed1dcef03042f3d38b06da370406de29a63f7f8f53e1b1f4b7d260bdc01d130b97bf6de914feabb7371e297752965460ea0f9825b243888819e6a3101a5addb140eee132f8811d192f447373bfa58307840ce3812b584461d5834b544d99ec79af363b579c85ba4a93bf7d836fda619f5c5bf801cffefd59a6f55df7ed3f71f322d20b4918727aeea1bef0c9b03992b15afd56310cd2ff25480325bb9e8d6a5d135bf0b3c9ff077f27d4562a1da654ff5d8f5ecc22938ac6d177b239263cf704d7d362aacf9f1ae4f0f8719515d4d6331c1314cee8b913ceb9dea9e7b6b12974463f0ba99622e7ded309a680412f43d3cad2a4c273f4627d28e340c6ef1ad7ab68adceb714d6502d80ff39ef3179c39cf08f11f554743ae214999c50a2bba29c20446aba27c38701f8dc89cc5c1dfc201cd21260407eac21232a4b62f1ca533840a535a1bbf94d2c5530931c73b16bf5cbe1fc9f16202b15b3363f09a887ae5a970c50a18bdb8cb02a916ec2d9d8bfb500de6217ee08c151b15db5d3c8669b424567ae24c806cf2037b189470c5a98fc78f7c5c2e141a7cebf8c6b6b5af0d39a246bd5990032c714605b41c882aeb6eef80e80aeffb63b4b86aa7607eaf1f85d0b02f6d9937b8a48494b08187acdb96915906528003701d21b75099743998e31d905d9b5b3e913fc7995bcd0f3278c8e2f52a02f8b8c0a4d731bc7934ac96de715cf849213fd9d1ef24a18a688ffc21745fedcacad5879671836d736026392ab34ab7cc43da822f986e5a5f13b6ec5f9b7b0f3b53a2f9a12887cbd2347ec035e2198be29ca858f3b68f7a15dffbe003975a6ba97c7f39039fc47c04cb172e70c5634f45a0ac2036674adaa9e47da73c2950e45eaf140130e389c2e29c4b8108206c679c59894f5b597ad08eddbdea681ff6d4e767abfcf9ebf7b8425e6106d75c21a7b158359088a5091c3984eba73817b6cc28533bbd800722707437cb61a7ded668b84f3cda4387fc65499bb7bd5cce5d26fe4bd30bf2ee2928e416b3c050554fe9c4bef0ebe0dbedfc2cd996510d724781cd3baac00911fa43e7aa81b606eec2730971b96df4d874a570d08edd0166e12aadff2dab70e05e43cc789e180acacf274049e0971aaa37b6ee9edc2bd664f5909cc189bcff85e179e3b3e4ffb6646d772582850ecb5cd79fb86394187168745db874ef93ab539ec7d577c2a9e4cea94413e9e57aab1de38f2c49470ac764a8fe7cc6f04bdbf806cb8b7662ffddf8ba82fd34038df4636c3bb4dd182dbccfc06801fd1369519d16d7042c733f643f2eb56d5d57b0190c38c41206b77e91782f8cd8fbf40baa214266920ccef259b0164b30b8f78aaf10c4c805f1a73ef63010c4dc2166b633f5ab16aeb91669368dd2a725f7276a4ea016327f1f3b801941834fe5a825102827cb1a1d67c797b3940fb6a0cbec7d7fdd19c97fe192ef8ba97a7babae696c75b165cb53b1a3813094be4f9821754532d6b899c8d5409a449ce8de5d14abcbea97415cac7bb0875b575b34529b925d1ecd308fcc121cdbdd9e9f516bcf3235240553a537635fe598011239cebe071ad8a5b17c09b1962d0518a7e4891fdb64b3a292bee6408562f232969936874ab51f526536e83319f36aa7767eff6f01387b152a75d7bd9e552c8acc5ad9a8626c18ab1413b7efc83371b362220d9af9f0722e406b6e925ffc57d4c793bfb5d747fb87650db010414be35aa775f8d836788f4486c2a3a5bc816d7e6621f073ae71385e5bcd5c7fdd8d6a2a695ff90a9186007bc4376dfaf4cc6baeba85d9be1c50b0ef6732e83cb6c2d82e1f523778e461a89e52127a9fcfe040ec5a3410222fe810bf014c4f69f7fb684c1902a0b119e683db6687a2194e6b4a8e8d657e710be14662c14d0a6ad136bdf6c578a2ca803d1abaffe6c6a1f9172edf61c8328b23a8a04bb239c5e3b2d303cb9a081531de680a717a1df64424fac73d4d1f2db5343867380a47a19b17d35e13c63b34ee5e6ba2e3aba19e2ff527123c0758f59e1b8b9dc7fbb89ba19b67da4ec9483f277ba02f493769ed889dbd87fefa1ab5daae303d3f47832919348da4764d0d8dc68079c178f6b29b8c2486e629b4b354bbfffed270975becc0e861535d72e42dcc07d84992be53837f841b22e18a4a00ca8ae2848ed99ff52474f08d66c0b9c1f0615fb5ba220ba9c9a277cf8aed1016f6f82a71be9450bc1337f8d9a300c1a5ef14ea72e571593b3e756ae5debe429ed6c53ae7b567dd8631a1fb719cf8973de697fa007b2371b87873792f03a0eda785ddb0f90462a1c1a8d1deb731c560e598cbbc4b9ba35e1696cc094e086cbdec73c3eac5a8ee8af27f0c446aa1dff9321e79fc838dafda6f093a1264bf656f63556516aef7b895bb4149ad463dddb15b7636b73081e797e70a8952efa460e539f3aa322ab5a3a48774f37ba5e2163cbaba7b767101987e553b67257918c627f111b366f40ba3a6afaca9727b7a91cae0c3d70d3e595eed3b3411414873f9ce0e2295fe19ca8c580e70d30dafa0b3ed5c34acd3a1ebec67cb85b61207448733f00d89e1ff0ff338ea9439d0ae5b6a86a6bca70db0be69ce597949b975cb38a8dfc6f9aeded240528799bd2b26d0bd3639fb4641e49ef70eca62cd64e23213350f848d46f9cd941bfab60411aa5b2f42a4c1f7f8b35df0c6937607cb5eea39720732860d0ac5e229f4f8b4962eda6adbf3cdf850c84d1894646526ec3314b00a57b7cb3eea51fb635b315c0b8781fa6888d96017480057802313b20b3ca7387881a5971aae3935a9a0f149f50dd9d7a1bebc92500d72e7339728997a2006bb659bd3b23f64900321b29b511449c6b4f34b5def7bd926a5bd0bd77b42f888be90b04e2fa55cf2ee71bd3045cfbb58ad3c12c397bfaa08e2f144ef9825b7c1e23b5508f234c13c6ce0f9e5b567c77c834127d35b81645f11f5683d9e12130f09568081c9e9f03e52cdc10802d994699413d6f32e1fb8ca304e3d971c4909e7ed90cc32876b08b1f88eeb8506452adac33b5dbf203ef22fb86989ffc8d9ae1ef00dcd9e9fedfe2e327b04e356e99220043df126bf47e1f44c7b9ee6f212ac0f270b9745879f988db05bfd2f828202443a79b52d35554c417798a2d2b49fc0336e624fcd679411abd4bf12ec802ac358ac0c5e0813c6983506a28538ecd9f2bd6dc02fbdc1ebae4ac934a3942ea157c1453515240eaee644b0b40e22e75de6c5b052f1433d392f044e9991bb5de247e750eaf825f79518afd2f4582e8400324bf3f91a8ce487f0e6f27f16ca9d31d4590621b5b9932265f0b9b8af6833316c8c2e0c8b5ce138ea334f34570aa6b700d2b5ad61c2c7de8d6ae237dae8421a88fc677f8ec305cc2805cd1d7799aa733e733fde619f8d3549191f882211c8d8d1b8631cd657ec7ce2f30f21c2112f2efb703efbeda62e97a2bf61b34dbcc3932fc2b87677f04460081472dd340a5569a20dec00b7836f105101709b1dc0d701f6e01385a40bc0776c166bf3afcc1ac539fafe3f0b4e56b651e2cac071ea198656fc1c9c18f8598baeee9f32d639c19b241371f4e08fd4e6aadec52952d81e083e495aa122369855b23c358bf8201caf7278ed1016df52b647fb6cb25e90e829df8e0388e376f353dae0dba5a00b8c0d6585c3b69314deb985fbef406e129c35e4536b5adf53955589d4f01cbb3166620485acff16aff265ef11abff99e8e1bcfdd93ff986426ef2d10bdb2043a23c3f9904615883c19e32a4aa7eb039541ef05933c27050e666f6e754d7868c0605bba96c9eef08e60c0963173e43405f77c913fb7328d92656c8075bd77bd442450ce6483744b8c384c5b86120b6fe397c16b871d904d9d07e9aa7455c96a770c1bcb55429291919da098f21a5992a41167b2d5511f20f6d671b28c55f8fd5b177999faeeb1a6813e072fe495c5ccc7ab7bdde68f8fb3c7492e8d5ad27a8b0e5d7442190d633cbb860f8751cc3230049ef68485819be2ed58b3d7cb01e36b752c30c6ced75ac3b456883f317f04c1074f52547e88c682da4e5615a7f155ba4e16930a3ff7c929e26862e6b9a517e0328689c634a9d89e3bc2c06ad7ddc2a147432f7b622067cf898fd1229030b02f12756c1a709034a39442e6802030f6e8830e7e4a5ce59cb78f8bf15cff53a70b2603f20a76557ce3cb88f4d62cb70cfa0b582e50a6577340fcda0c6dd25049f89b05276a16e147a735cac542ab68037c1c6f3709dac916394a720b20e0a62d4a6fa8d0bab64937d9f3676914df3d383097717b64d1cf3376d745a7fdb84b9b75eab104819b60d2dc34dddcf2224ea6626949b5df427e6ea58c324bda0a084b11eb8b03bbceee8e0bedf710a6fa888289a313fb6eafa4f7574f9a9d0975a85d93144582879aa29a6e4296bddcd31ce39ced4e62bd712842b3decf3d66817fbca9ec9c841ec3cdcdca71ecc9ea3a0e02440bdb9c4be943968703908e382453d4448d319b883ffbeb98a0ad9e9c40e5d1b7c0c635c7445dbc42cdbd7195f4d7127681f87d6086eaad739fe60865bb5215915c11195217b17cd444b1de0aa42e890c4071e3c739d33dda9a08b57b84227cd62bebe9c173f424b40a78f8bf16a6a7169bf23ac4f0c19811a69c0c2ea9c6a43d8f1b480bd33794193b8ecba46296620ce95dc5a4291624ac558b315086bb9f5efbd4722f34e48e526b257668f10eecc2b5541a259930ae0df13d14e7ee2027f8cf469ca7b3c6bca2889fd699c08f3614e0e817a0364951b18247c7dc70bfba7617ac40081f3f0bc56f1e77a9b6bee92ec82decb1636bb1d71b8d732fb41fbe5838c0d001c01e9e53dfa502c436f911fbda7eca81ec6a7d791492f3de107117912a34da96e0e19a80be07375ae305cbaf77c6597410b33333e53a3baf4561775b922b2e9af977113e8b29226903b53fee6296f58c149bdf880e8dec68a8cb40a01636ed0c9b4601c4ad8f8dcc202e279aa1a144bdfa94f64f598c56d69cd7908e9720fcadb373f4af2bc4fcc2026e26319eda86190365e4c24a89805df52eec98c5143a5b7c5e876b49fe0c158f76e46b40db1fb756140ee0818b12e3c4eae608f31adab8302c32b4bd055a576375d046ab1b2d17d4f03eb608e7c07e2a6fabed82a979ba3f922b2435aaf18dc909bac7af5d5e70779c391a8e6d5b1f20bb7fc9a89f9d4eab9c23d241df5982fb6763e14eaf20625cb2fbbed41eb81e3551b701a5195d53c64b8298d0b69c33e010e2fdcc23319a81ace9cd6211fcf0749ac9c28f121cb59908c69570f5efb7ab26ff669201a7d850f2d984dd65ead421bad14d102bdea6ef034e559c56f62325a1a58f99a18d6cc0eea613952d4e7e04e5cc1701d096f6164b5add0929cfb6badf05ec8cd3ae812d028a05fe75c91248a0c46184954819d2d4bf5657cf95f234a7fec5bc851a7e56daae2a04ffbeb84f954f9399f5cbdf1481ac570b90ce6d7d5a03c75503b8e9f7e63957280ed0f829528b2838e07d73a01d2c44d480fbf2558ea748004b5977a88478d367a48ac7ecd75e5b7934b61242e9fdce2240a79aada8184d1eec40d42d3ff4e35ad76e526bb17230e25c89df9ac6d6d30bc6582062e21c7c6ad93d57081348c43001ed02b8e5635a82ce294f20dd74c8f549707957de94e35a048225273894f8657b23cea07ba3c071c2648669fa85a3160f2be0ef9e3427642b6203e645489f246751741331ec5f7cbc9d39cd4ee3e891673687042059fe07f040e5dd4beb00906722453c181f6c145ba935576903fa08fabdddaa54fa65a0fc3b523cf31812e46916f25b4e7b1a03efbb8cd4575f8b88cb7d966d0edfb37ce54ba67d3137e17bd865e6cb7085886136df33812040282bdd21029314e079518718c6ba980ab4253e671dc704571edc596c1b3651f91361d1e06af03d709144377bdd70c74972ce076cca667735b9ffe517dc98116b93348b1476414c662e193112947af2f8b02f0da14ce4b37f1c88c2468cf906f194a2dd976b14b96d6154c60025f1e3c8972217d33e371d05333c60a5eaf0465ad0f565952c0445ee03a903dc31228b804602b3ea08ce06a338e3bccbdc00c116f85210d2d1226b3cdcb3266a9d05c9ac83d2240ea87695b68a1a5d026df5e45140a2adcf754b3345a29ac35aa8353e0c124c3d71f266fdafaa9a997f79f01e0ee55898bfca2b08462a7774b4537ba83e38efb6a2a62a412815adaefec81305ba64c63799166d291eb9b2f37f0bc171ab1a2f215cbb17c22f32f26d05e63586bb65e6016e5897fc1911ba8910ce660de7961892be871661cad58bd3999f0a246430d8fdeb73d6966c77ac9a800bf280ac8ad9fdc7e4b5c0709d89b04b26f8f7ee6148c3c77fbe8584100418ac2269a50b102c3b8509e230215f1d7b7035f9a40eae875d11bc52d65e330a76b4f4ea38350c925eecc3c598057507ce1343c7e0c6e01c06b0f2b1b2ec4968b8afa743165e4eaf25054cab2eea302fff294077d2b15b5573965a58374150115f1b782138c27c5e20c42b4f10d2e7a186f6386b7ecced32fe11d0b5fcf3ce18932e672941bc7b21de3c25d44cd70b600181c0661866b4df477b9f590b6b83a373e7a46daf27bf87793340ebd45153f068450e517c2931b5e4a833ceb360a1ab334b5a4cbfe5615e5ab33813a9986fef233aaf9dadc7d4c19745e6a55a13d1b26ca97ad476205c6535de9db8588af78a40dfa4e062a4ed6bd153e2b49b0cfb30ccbbd065e8053644d22606c65970e11aea36756c2eb86492aa5ffdd20a6fe88471a873e4a7c6a2b5eb86c319971d8e24e26520c9ce7362e600e350cebdd79c539643447099e571d9d6ce2f139549c8c074247fe1d4de0ed8d5b3b41586271c8feddcd06fb7a3850af5dd716a3ca7643df1841db72d85e595116d8b4bacf157bf6d96fe68da51aac60518fc2c8fbec07d0998f17ed38ac99da8f932d2e39799172798b22fa7a9154d9eb141c343144dab14dd7cd3ef65bc82b2ba3da7bccd47508c63463e865a016ade4976f0179b0beead01452ca7db558348107a5ba0441d598554d47a9f6250ad249bbf3bdda234786e99c34da60d3e42f8f364bab98ecc027afa9b063a7741eda249a06e8f32eb8752a356e3099294289782c1be75011a9b6b3463543882ad944e113356422b9b9df85961ff9121efca1a7585949c1bdf5e9db2c4e087fb7629201f003031894ee6d8eb523432856fed696d946354541c691469cd8814f062b07c97e20dd62bdedd512ab1746fce5702079f40b8127bd39155f943eeae636ae4f61b46ee8b927793c37029cab5df4c30dd8a716cf79a238b41ae11e9ac7a4a102479dacffbb1e5887177668fcf0fb51a6e986015f7b6012cbb3d281de50ad735b56c23685b4a1ab855fa0ac38ebecbc84f8abeaec00ce7e729e515da69cc01c173f1d66c9d9d35543798c6a7f6b9a453838305826943b2ae17e38faca0f87ac6cc310adaa01bf9bc82125102a364ad2353756058a0c4976dbabd1b6b6a23b0241e549b40ef53745ffe4a4693fe42134702cace4773d104a913893866ab563b3345898d09d852e039eaab7800e273fe4a6ea13bf6f50b5784a5b6c5f1f9b801566542e00b156e559f6a97cd902cad291b3f25a8a5472cbd32bdf84df9f04667bec66d264614f42b45b806665292a8425f27633367113eea84c67d01a8075559507ae972951717a6bfff4d559e0310cbddefcf9bda153d28aed421b9641a428eb18a52ee82f5ab2539460183a2c27a29437a1afd8fde989d869f588d5a301bbfecc839c8ba089927735728ca1fe8971ac86d66c4bb99e50da73e314a3f21b97cc8fadfb4c9aebacf6d212d2ea991378092fc1e7c1309b1a780909316acb253a7cb05daa5adb9122ddc98708ce4a44bcf69db5ef24e552bd87ae50b9d6509d7b4169a8645176430114a7b51f32b595d026b3a3dbf42b899c447d2c4f170cb86a24083f2f0b4dc5bba9c307b9767970b0f218544bf0b404ff1689506a0a5da7b57a47a6233c2b63e2783f2594b1d59311694df99f45205fdedeb59a624414510647a3bb9b18f494226010341aadad885e795c175b8a6056c1f8135c0c0cc82f1ab0dea58ddcb3c7d482f01c1dc5b55393079170601b93b5cc2b2ee1e4842674d9ad7cfd9314994bcaffe29d953576e9b5cfe99a142efec174f351bc7f2978bd6c3c1e7b936dbf985c2d7835b6dad7e63a2a734736a0c16667c1f8365bbbc4038d28f62c53ac6fb166f6280c0d9d3a782b2fdfbafb07001bded06efc80098c6fb29c5740001e92f46ac3ba12d090e3240a7a1cfa6e9fe3c7d98e780ac630a7599e3ddaea32350be7fa0362bf91e1ac2ecd4b27979b9cfeace8f2412d450268076a21f23e212b572f677057572aa72c76bfdae0648f5c796ce1fb27e9014222bcfb08918dfe0194fb2f0f8a51d9561dbc03e4e3184dd6dd952b9cce2a900c6f9ab4af05ad877b73ecbeb0578ba66e4497ad6589f709f413b52c4cb49b228f4cc3b01f1d05476560344823ba8a62404dee7c053f2b53150a87ee9ea34e84968bc36a50356505517592128b90a4da5d373648ca6c133cc4091d7066b5e36dfc10f2986017029b24337e86fdbb7e2c9d18ddf4d6980978b6c1ec86c91ac227ec2cf4ef536e58589c407b437863a3550a6ad2ebd5525df0fd8a309d5bd3ec42fc07f037fe6dc74bc16dd32201438dd084ddc98a5e75b0f4e06b7864621b7f03df7eb5f0e17fc0628579133a5f9c3b5a63289635826fa095204b50b9677b1cd16c8cf21d9f6be8ed687d1db4401fced615552eec9dca88a94226b133a62da29cc25775f1d540ac8e20d149b873f229006384f6d3f0124fe732aaf6e1e58ed1a0682d1225b41ba8d3877e0e0a875a7335cb11b8e6594dfea8984deb5dd4c9e402edbb1b6dde144a39d25a2567796230d6386132bff9ad4d8ebfd5a5fcab134671bd71b332d3eec6d874426123286e8ca6af605c826378bfeb1f3117670583981b69920ab3dd6ad22763e368bebd9e2cc4f91e7eae69581779748a5740216247c9c128709e81357dca45d7071116c2858568a88143d1cece99ec722404d4a163783748212f2df6fa6122dceb13938b6f5031035091a30ced287d2bf55a5cf99b1da1143fbdbe66b1aef0d6bb3e068965816524753dfc87e22a45c63675338b46a9943160ea28c063096668e6c54ebeb7c082caf07547255424b76655e669ffe67c9442dd399ef0d18735ddd5e1821b97914cc5810a8fcbe81f88704bd16bfe3bc4a68d1e875f11605023c1ba43b005d6332c099ff7846c1f6ed5266057d1a6c98c322bfdc73c6674950cfa0ed73e92b14bd90146fb52fd3e84ac782237b01b66be5c9cdeaca5d3270c508e311b89bcd5a33c966ed5f888fe0cba9fc9b2a25b7973ae91a0b6f30593b68478cb22e7f402c4563a8c9c74f7851b8784d28c326b5d51dfcfe46583cf4425751f5ca8d806a2a6cb0ffa56b4f8cd9eb5e9b5401c4e1c036bd37bddb019acf486319aa70d84419ed30c34289cf621582c05f27ccf6fe4ef1e871e6a0d646c935c075457eb0bb9210da9040ba6bf57bff90d575f25ee3b714fb2583491d6c437c7e528b8b177794df0c655d3d2930579f1255d60f40d9942d18155d1a390726ea0b9d0fa68dbf21e6a633c4017342b7efebd25164f62589bf9509fc74a240fefb0b8bcb77538d378cc422772ce5277b04f55883f8c3eb81a911672abba67b9e346f30bb2d22c8993b71c558729f187e526d2bd89c3daf72f5fac87d84399750bf8dd82d10e742e2443b7613d2ba06cc5e50bd38bc115467c11614c559a1d214fa6beef17bb5f7f4ae35eaf44d09e6f97e5cc27e45e8403938aa8dd4f76153dd625408624ac28712415a1b26744218e7c5345362809c42fd3905055f67c005da6994456f0a8377339f4b4c3ce3fe9b9ac773a729572060bb1a4804ed053367f7ba0864c8b1a9f9c5afbe40e6748e3b3775ee1833dd86bbbe11e7ad70f659d98abddd4b36bc42a4ac26dbccb92d284a09e9c778dd3f3e6de652adf6605f6b62b09b19e412113462f585db12178280873bcbe3d2ba155a849cb90346f754fed2ab7a2edc902d48a5764ae73eb97ef55693c02a3b2c3d79e94918f71b38d47be361577b8a1ae76d7e6d1451ad1fe9ba211590b8699b4e66e929629a2b733d5b5e9be33fb2f3ab59c9f4c8d1bb71ece4744a13774b742bc845157945104019ff7c216853cee6045b6b18052390fabe0cf0a1f3d07a37ec1b670312bbdd3d172d5710ad631d19ecff0980677f288381e6dc62788f6c30e3ca5b16a7ecdd3c1e806cc32207a6e2e181842a48add12d90379638f84f65b578d4a30a9fea75c35398a0120060a768acbf3acf91ce2cbdfc8e29e9a569403358ed21d1a4e38879786d080178b0611e51b3851c13f6d7831534fcd4c753d5c4d811c7088d34edb50782c83af87ee2e66e1f93ba0f9a7da4ffde9373ae5f6382c303535f8b067d59560371978f49a2606c29fe84f82cd9052e6715d783b6fc58dc91d3d9a9d8e98b8aa73ed2d46a6bd58986798ed56341cf98a54afda01a69871313df29c88e1a9427633c90508f7f44ff243169d289acb2462ed268d6aab4da8b5cc6b4ea98ac0e64f48f8d0d72f0c1ffff2f52632369d48108fbb6b797e619328061dce4a60a48d0e734595ec8ac1f3710253f6ac64381baa68930582e51597eb312e3e67a6fbdc0f5613e5d03ddfbb9823e4f3c2e1ed340271d84379014c99c81410267b6370fa8e69ff1653fc8e108d10502cdc5f786ddbe2ec7c069611af10771e5c6e69057acb292145109bf32bb17b1c242b484ef95a90e0516aed4783aebcf59ab3193ef58c0550d275ebee7c162ebb28532fdb7cab9e18560c82cb025e93fad3aaf553a665bc2824390f8b8271cda0bf6676e20aedb2026cd1347303101e27ad41908eaa1bf1157eeefe2702b62e4989e1eed6b587257f57ea2bff35193f17c74c01f8dfdd79dce56cdfda0c2b525245ee1d2846d2e994485baab585a50e96cd84cbe72e216bf81ef4e4a6b12cf0a59d31a4c72b9e0ba5678161898a3827989619113773f3af2266abf971d1608c1383f21fd37d22e9ebcec9ef604be9f19df03928ae7e2c622df0cfadb1170101d4545e6970b2b604915e7ba2b3f36d2aa4c3a61db1b12db990e6008fdc8dbc68de6136754b7f9d375d4a3b71765302c562a436d14c9d9ed7d7edf07b7ae3de1ca33cfc9478b2dd3c99541452e88cde3ca2ce161cc0cd481fc11cc2bb75d9a53f2b25e797da81c9559ec534bfac8c5a0c5e0dd598ca4c37635f412a87308ebbcd107dce902e79d3742819b6790fb9a106356d1a9b28a3ade27ba2d558a4612f1aff661f91579d5d38a1ef169664eba95184fcd83ec2cab07689718ae98e908d7b3e3bc199fa344e6e8e36f3b45fcb13bbd72b3a5cffea49e0665224166494213e64e7bb403bc4654136c53b4a58db2baa57ccc926d0afae2fb0575a7b2546252e8ece8c0b38f5f00d4f804e9bbf641cb696ddd06c7155add7dcda6f224b0c70a165cdcb3e08617c6509e4d9795e4bf5d5893ef3fa5f183aad50ced68f8dd3014c707c52acdac5118d8afe4627ebb318c0df4e330b08732216f615eaeb816d23086399f0a9770f0e0aa225de5acfa2a7ab050257ba4398ffe3d877c252de0bf704341d9a3765f319d61abf80f684d0464b7dc4ed99c722e9af57cc9f33fb3ad83c9747d1cf44060f232bcc01d55fa81f095d77f4244f0c1a14aeed2670ee4ace82fa62b3546947a3bf4ccf35f96b1ffcf4183919ca007f215d00738efd9a50c67930cb2f897acb96a3aec987073368ba823167e0cca2544ca0f87d875e9e92b56caab78a988b2ed87eb255efbbceda702d7b2b62ae59b8c70f7002a2d38cfcca2d16d0bf06a25ff87067d412670f0b94a761fe1f82efd90731fd0e68a20f57c9ab4110f05146fef1b2f5d1522ebb9763560e4711800b96b191e640d1484106d6a89e49a7d4f88ec5a4dfa5d92bb0a5a18d8af9dd1d32aa447f3ac7e2fd1df52884dca3ce06aa14d975438a7f6b0ab5a676bc019a12e8267596c0c0844701b9e1a689177387b90b57bbc175fc9f99cdcbfb8c20649b5ab74b7fa5d0bb2f971bff15a003a121068778abbda73ccf292a668da1c3008ef7e252d11c54aa6aa72bb4082e33a582baaf52086a21d217e6d84099b12cc703132526f07c7f64d1101f7587f646788f717359c52cc89cf687cc7ec281aa36e316cc337bd616af381e0c6226397939e31582543e2aef664d42b6500413bd14afc3da592703fb5e97d6f79de92cdd533f7d26d73a99aab3203b5b30321d89930b3c277e9494fd1ccff9241c34757028335fd37ace8b1c0ecd263d4ed433bd48af5a5c6326c0a7d6054586057608f790e697562175d2a2b108a93b996f9e1c9eb697e9c33a1cd7fb26c01abc750573335f171deeb07ebb59e2a2bc4eba909f9842d669593581d73c96971a31df51ade152a287719dc57ea6c2cd5e337ae18bf0adba29758d580dbd49e3845f7df44d40d78ee689557d82e116a932ea312fc4cc29041a76b3e89e61d6ebf63299a61e8bab2f0b2326e5248416623adfcdd3b7d468d3adaba6a7d469a87e163dec900a21df2cc842dbad33e31976c64187f2468a1863d8e811c82ee10c6cb4983c271fa218a7616a04488a8404e11de43d6c239125c590062bf61b0170b9a7b623b21548ac5b68349280ecbf0f26c62534936305afb0ebfeaefe76f797df30551cc4851a62ab42413cd0185a47564621fb3c19e924d9d9e704e0d5dc7d6781516a99e2f51c679055c9d7dc54177e1ffc7299d986f1bb11c46fc69a9f3a756b92cf126cdcca5c4d538f3b778c19713762d422d0f18105eaa2ae6bfc04c77fbfd5f6559a6394b9f21a54d394ed7bab7c5cdb85f4dfc160c17db292e6ccd03c8ffca26031e74e0bd9dbdcf083e04420eb8526c1791a699d7e1e818b9fcc0013e1f304b81220d85097138b0132722a8d8cdd42f5c9113fec28a3f67b440d5d7f1c44f52f8dd4f0ecc420d25d216ab18b9d9feec7fbc9cbbad543f21307861d1efeed614d34198406b88738c954ee3fe656e17c7eee759e7aaab252e5ae728cde10150e659a6ea677d3a7ea6a7a06c33454de681b431a5a72bd23f0d8fcdd70d4d5ec11d7ca12aa2f413f84394d4156f1ce67913f74b4c36b83489ab137deb1281e4ac5775dafc2340b1ef8e36a1f16e19e44500abd877edab820d1bde46d950adcb00b2de83409dd6301c6ca71ebcf840567326c71714e4335be8fa7461fac30060ce04f90b2b049b1e72d156b308d9107197732fe97abcad33bb681cb448b1d5815e606db3c33d9c56cb7ce4c5f8f1ba5a241c78d4266cb8feed8f7ab07a9400a7da08771bc49889463d9b8b5f6733db481b88185c5678a84b198dbd8a931cc2bafdfd34e2d31068dcfab9fc5459cbba4b288cf815c60b3347320bf5c9c11164235fad85409719e49c62b54e820fe77ccea92f6ebd072eb71ac43bbe6f6fb890736dc5701091eb5a25ae55775b46ca922cbab6a08db3ecad8bb0df9a801b778825fd174bd3131871c7f2119a1c353a4f8e193c57a542f43698abd64ed58f1153ac2661475c27704149777b40dcb257afd413e0f94d2d96df0fd0005fdc9f50fdad984871eec2c6c854dc32a9b9ce2ee9a9ae918aaf5587fdcb42849652fcf1c7226185be72b4203d64166e69531f1d6ed92d6973bcc6a0be1061412fe16f759877af16aee3ea60468b135d0f8b3c4983cb985a661d62db2727abd15c05d8d9189db8d461934ffc322906fc6251cf24a8e522d70e9c357a458461b6edc89970677628e94773db53e570ef3b18a186ceeaa09f2f9c20ebc3974326f2e3c8d08df58cf2188721506d0378d38b7aae09424d1b3f79b3fa1389eede5f4b85b5f5be7709b16e6189ffa9bbb143f49e7ec7feb0a245cba09f74a7428f507939aae96af8c76658c5908b0ef95a91b6cbce20de8b312718b2e22f016f00a89a46b82285dced7f7971888ea69c89314b22e4acdb7dffb2db17d2a7fa605cd6fcb2fd2e3d082cea69527d19cab0cf5ebb592821275c6ccabad480b07c32edd1bec9aac41c78a45b88b1bf7c94aab9ccb8d52d78718ddf4f30fe14831e49949ce0f5c4c0c114aa4b4d28a171577fea37781ae3437264a6d34a4e23815f26a0b75ac1eb2aed856f95ac2f1ea5d24b2aa81762b32c3b23f4dafa12ed98017e65c52df0cc176bfa85e5e475493554cca685ec79e7f10da48c965107ebcf4a0565109859b4ebbf2326f6f812c9eb847b6f1940719552659ff25e6036bbb979b6c03dfdc97f376807d04c7cbc6bb9634225549c8e3ad583d8ec674169921ae31ad645e38bce344faf80802f10be31d06afb882497f82defe4286808aeb7f90be288d27f3367a3c82a4fc7250bb0974ebae4b1dff160cad895916fdc3a6938247e8dd57b7eda4f7af63369881a83b33d6a76c61f7ea583c6f1ff0e2c65182e82e7a0edafe3c925d55cce0f636cdc5325ba5c35452afe21b9552d732b1b7f53d2c4b4b58aa508068c1067d317b12844bd3e54b16135e66efda1160cc150e17446df6307411f9a773f133ffea9d09f4e019b4ac5e49883692cf776142dfd495f9a22bd51a0e569c5e245c6743cb6a5a9e18f629c3e905d6d4b7c80606e9149d62975ecb9f70d3da97151a094283eae82dfd65db6cace8803e9e1c54f80dfd04702cc6569954f4dd647946b5d6f0c0aff69c35f4579fa65fecfec02a441dccab89cbe128ed21aeec5770a31542e151b4b8518429e887e8707d75bfa2fc4af890af08ff36d5b9c8a846d0de85b40d60f816a663f80d5e53dac9447e8234ed13b0821bc9314639fa82a7d9cb6bbf7d35031bd0d8e3f43b838f5e4d68f45d0b5f7bb8e0142722bcfbfaee0feb32a2ddfe74de0204c6bf1b024ab800c38bc63f357cba3fbad6513d233094e49ea5df016552fb647253edebcb1e6a76e5a0554f95fbc046d000d06d44b9c69dbdaa1c3d71b33f96de8c24257e26306893497aeed9a956cbad4692a79b9807d2446d53fb8e1addc83911474941a3f53002d1c2499667b78a04fc349b439913f161bcbdd71e85001e929c83c43736fc099b923d75fe398b2ec20cdd640cd85f08d5268e18605dac965aba304b951aab803fffa177b1bdf2173be21cc128f5a0b23f249d8b2df6bdda912aef7750ad3c0705ca9ce3b0f59c4e767bfecbb9cbcc3aed298752ae6476713987a49a37abfb8339713f8906c7814d976e14145f17e2004df0ff2b28221d3420f273610413535846ca7de0e9673df5255e39d74404b588fb499a072c1d40d8104c35af76ce736ff312a205da57fef9a0247b518335b6b02c9bb2ea5361c070e0e6a506a934dc4e556019d4651e0c28b06ac9723e8901de99d18ef485863609f9ddebaefcbf2b87fa52ef7b0a0e05d0e4f6f607a7ed59d1c90c783e79ead5e2cad4d35eba9b177f0b712003d734fbcc8101e5e02429c4c3dfadc0417a23996540faf3db4df2fcdf3620c84b8d485b9c1163c828b1d5af7b14a5b283e92216be138c11d6e712207313b990b8519473c1d55abfe1acc7ec1c77802ee649775c817137f736e09dc2e6fd978da114c5ddf46674ef9d40467e1c804fc51e8363bc565a282f0127328da1fb425701f630b46c19bfb1f5a62a844ffaf34f0359957cde42bfe0cbfdef3144abab1cf7cad8ffda2d6304c3b0f8cad08d5dd608cd223239ab533a721069a4800b8affc173d5c28248a3b55882851a1b2ce97c63f2f0a4dac7abf3ca8b740e44db69e543ac0533bbc08aa1fcc1fb3a7dc10574f32f47e860e0f7bad22fba12794c37cec0c763255694e44aaf3fc0d04846abaa83a1f485022f7e16301e164fd926e3f990fd541fc1a8d03ef4e886480113683a78fc3b913b954171489cd1dd745ae48567b30921f033dc2b541ca08fc9d8396cee80ca6a86f180b613036f69d490b1c3d9a95fcf6157fc7800330203a8b2b4fdc53f4f833d78ef7c8bd8f9fade028a17ac26e873d6d412b035ee72654a86f72d417c383199508d9acadd659aae66acf59855ea152613083c8641b438df90648c19cc75bd5f6f0758f1ffc4c46d23574da7177e4f4a63e41fa5cdde127368ff2585164684c33939f0748de5d6d5b859844da53e676403ecff20ba1b15cdd6e5b5f20e6010250e688990ed4212c71526d8d098f0c2551a7a83dea3bc042a9baa53e810acbb2d4484a7136694755859c78655f0cc7a85975f2306930fde8361ffd94232d80a846babc4f5056608f98b39332ec66b0ab6c35e42ff2f3606fd446f00f9301cd6b4631e9ba37741e4859bac8065df92d578951bebe4cdb3b127b3f1c2701f07f48f23743f137023380ff146c28244df23ad9808daa628103a31a5bd66a10d876b8ec2b68f0e0fac115936410e94e98313e46c7e232761da6b66233c0d9c7d79a40fa59dc5868792f6db72d9ca2209d53fe784f2b46286c39eddaba0de8fca70a45c2768457af597edb4d138e1594df86c15c9145682a7c6ca8060532caa48413ff0b83834d1bbf72723f9863df9a2c1ff1e9130f204119917913be763fcc20efaef5ec86ddc020e6ce9c3db2ba6ce1c998a0fade3e707a656d69cc8df014b362c7d94d84c53ccd02ace9872bfc379463bab1a46de3022eee0b3e65bb5ca222ba5ec5394af1f9a52201e184f5f36d10f02fc46d4905cbc79d23efbe26b06c4003eb7e3b442dc1e0a4518f299f9b39dbf2473cc83bbfdc2ed65365e6dbdb08bee3fa752e819c342d5c572b3a417d813d2362e7003ddd439547bed1c4bbc68ae54c5bc8043200645dbf2e8329f9429ee6475db8c1092b9a5d464af64cecadf1f3a7148ecf19532e2b2bdd4fdf155880563af978d0c817517f7065d0839dc412214e5d6484105c3fc8bc2bea2af47746aeac22a70b83e50d09590ba3c934eccda9a82d0d7ebe9b6083a0e9813700a0f45a1a89263541b8fb25958c541219d12f252004aa22414b82697778535ee33ce9f6b57cf2bd576ddab61bb6147e8ee8c51e5dddb43d22b2dc36030c1fe56aa36c92a4cd137a50c9807d4f6d6784c9cce2993726573fd9d12eb19d6434bc6b0e651282776d508dc94a551b218db2b1613d82f61b0cabf3fabd6ef85f4436cf5d83c8f6e82d7fb64b62a80f1e9a556c3ffc7f6a68c3edf06dbcb80d2e8f12d41e7040e8b579b56c19cabb50f56e670973668d751c17ce5a22705543388841f313b1403735b68e7c6905d06d8fb2d121c7c4d8e42017edb7344b63d7837df2c5d27cdeef93dee85f23625dd939af095e29432d7e8826f1851706157bd3d7a41ec266f7a3164cab71a42b032b6ef782625d80a5e0d401d1b4e16efc3740632d5d70d782ba351bc5c5512ccfc56b3b2330b6984e667eb83bd82c4e06cb99826d07f6a5ccabf64e4c9f0424d4dc37530c22e687f5e0f2e44bded59709fe7b73b35cbf6251eae169523aa8086437f77c0220699afe9976354ea210b2d242cac72884a4fafbff9a9683a301ca2b738e70cea5ab2217bc0c4a11d04b4669154303c2543cba38970cf4d67607150f66a8b1dfe3006ecebb0956706f6a0dd7366ce707fb425188edf032c0030f8920fdc3f034d79963c5635fb93f5fc133924bb54e4f727a1200b3d9b891e66f5b9e579ce5e4265cad51154d8032644aba528a7d72410cb363c4b5ad6a21246884631cb60cd9f1f319f5dca22b1e5c04d12f2901cc749ccabce8d9e1a036026268ad61506d90f81e8010035e23315b1bf1d5b5260b6069003bf9c973e37bff1215726c03c2cb729c873f61a02748bf7b6543e97f38b1115896e35486b4ae0f904322b2d93e69637fe79a5fc9a96eac86ec5658118f012e8ebe9bd18b2e9d17b6745f2c061c46cf4db3afe6b8ba1d50846c9eb970bb079b678484f12742f16c281cbfdc2121c47353fe369758e0441b45ae182caacc70c34bc54b874a675d04148db7d733d01d7ea87065bb925ea5ddd44df7be136a3bd8a9912a6c3814f727b8ed843f1d85847f7143ac3d507fe2ba1509bd4a160ff70c20efb29503439235c4c6d5cf1d37a21bb7a65e0c9607734210c457ecaa68abdde3c70546a6715c798f7fa17fca67c7d06e27f3383a91008121cf704717be13da69c950a5a65c73443d0b7561d6b869fb12da71fc4f31dd5bf3b4ed0b89bceb67da6d985a74cf2b1eec9d6eeb7891d964b93e1ee2623f94b842a791435f6a1561b6a7b5b3b9a9cf4b1ee74520356ff2f2b3b1c46ce56b38140366deaed7b31c94d23d2f190159a30e5c45689150e2de45e704c0ba6b9625e2a01f79f6bc0eb788fb7d46b80b27386d04b3ba51749702b3efc082bcc06b082c0bc8f29660f6f844bba2ddaed582919bf5361d443e73e9564cb3fd10b305f8eb4c1f656e77ef4dcf11ed55b6bcb3764f79f46abc23dd2724d8de96957e94ad760937bacd23d815ad671b1bb4a6c1b2d43a7244c681135050a6e13b0389f7a15dd68bd8e8eb2687dff687c6268bad52e565331576fcd5e62303b43f74d0a6afa9e171e443d870141fcb9399687116cd58b902a79ac216800491646e5ddd224f0a1daeb797f9334f7a1875fe8302198095047ebbd260e2fbfbfd72baad3368e84df71a23b4aed44b3aa8b196bdf1216818418ca4311fe3eb6abe0ddc1bfd9020733118f0574e44eff86696f436f169207f0b97ae1b21a935f9f73d53e86fe0786e4abddc24c1a9a1b7ce4bc866a4cf6c0ac5e5fb112e66894be19c4d5e2b43152e5370f53f7bf1b91faa9e0172397a67e565f2b3de91727909fe61461b2b5a1378fd68f2eb5ab366a74e2b718d4d87f6d3eff278eae3745b2dfe11d3445716e32c3c6c8a2b0b25fb76d4cff33f031608562cb9533c81a738369aabe0cb41e5823d650078c3fb445dc9d0e5384112554f2f954a42c14f118f136056e1c786ef8dced1e8bf3be8b8b81010d99ca8740629d2c72ff8b07e9ff8a372a7a6cb38810ad8ff51dc3d180017a7158d25a6581898095dc165aa389406d337078502ce206ccaab394a83c98d059ebf9d89118c5058ea593584af8213490f161bfad0089ccc0540019d855dca0b9f9e5532e7ef406f5078fb4a960b7a4ed2d6ea9fb503a723489a16af8250cfa187c46495deb2585c3704cd0f0496107f5f7c041ad453b6431694527349137fb38c69db376ad72bf5fcbce2468c4fba223109b82cdb10e0ecce314c4ad42527b4ea6e54ce23d5b3a3e75d90e4174581e7db19aad1fa3377c8096f09bfb649ceb5114ea4611074ce3d99f1237df41fab1e9596236523528385149b9f154332a7730d1022153a278324ecd71933e4ae4b63907981476770c56148141dbc1eead6e488de239296a9194d2d41dbfd527575f6250899e7fb80a44507c2f489bee3795932d10b50b6a339bc8487ab5bd08965a3a47672e23b3597501b5d315b4ad726715880f88a6878dd0be11ddf24ec89e47d0bb2ae94da439212e564bcdd8b7878fe075807a2aaeab1d5fae3e0264e77de41ba8fcd8404e9178de67a0ffa248131b829ad6fdd8e2fad719f00af8a73622380b79cebeb6d0e73c99e07e8f8a26841d4fc8005580fa286a79237102fcdab8d0d6d245d31f8f50f341b111c4d38c40801b140351983f9044a02b94adca5d9c60d702baa279456121856847d050ce94c58ed18614a9e1735d7e6cbc13d52069c67c08509967d80a6a57cb6a32d3b67043cc9b94db75a49a1c16ff50059cdd8a573cc5c1f8797ea9f73043c08f4c99fbac81cbe3902d6b65c93d4babfbe0619b16721b3abdd0ee93f08321eea3e515d1c6e82e9b37b5558a1f5b32284a3b9dcf1fdde549c509ce281c9dfc26f104738f11258126e9a3cab8c778240297f514ecca11c0a1504865455e017a1834eba11c003ff6f54007ea0636549c21156a790098dd49ccd9af6122dbf1a3bd237afa4942b45c6c9742ed1ed5b24e79773e83baf0d4a80193c170de1204fe0d675f7e99201f75567623d054170a86a89c8a3ca2492dcf61ac284f61657d635ac2622219b3f7eccf56263db9fb7c2a0f84b38ef9f85553e725978e87cf9bb13d9aa792474ae00083606df12e7d72999edaab492507ce3571477e332eff5cb5c145d03a5579af053d5fe463016b7059dc89b96f91275482e01236c05e0c3391501b8add7c90f041719556db421fd118d12f62fe1430da8ec9abdfed0d8362ae7b589e59aea0f1e4626c8ca01d1630762e0e23eff5af67c1a477ea9657d6feaf1902bef9ab1bd685c6380f5ecae63966d99299d9320ae7911efc877df75f381c4a462551d0de695ec219c42ca77ee98673f2a2fbe86bdd485f2a77d691676297c333500f03b7ae8b931bb10a569c61db5a8234f5e3f191ce0125ef18f7c60049700656e66edd8fb75944f0a34ddcdaa006c37ffcdea7e81f55c596391042f9149b1416f635eda42c70d701a3b88f1341764901bd05fe73ca8c8bb79d465f5bad9736693f7c4fd4178618d931be8913c38aef2ec884b810e15fae634728739721ac333ce2bf29b4ce494a06e7aa2878f1eac1bd2e9e9196dfe0bd0089cd6a8d9aa5be7d2394b997f304c53605a4947eab51df4897ddafead9dd54f4d78c81084116711646454274bf25ea6de42fae64ba53a245fcdd6d58b38310affd01fd0b4d60325fbb8160409d8110bc10a589748ea161dc41ab0a97b621f9f0e5a31eb2e700ebceb68e5acad3e3a4c6c7c3c33c797653dce5f8beb325512c50672c96b85068beded94bd72f5f6ca4f903df4c1e7182cade309b8d45bd35b9aee6c8bc325cbee445897bbc2fee37a2d7b011596b2888643c027b7864b22cd3591140e729721ee0800e95d6b6f9360f5aaf9a2b958639795f6590e364bbdbdaa1728e748a560c2a5396f612f202e7595403fd5aae2375d171fc1d30720f5c739d1a616ac70d6473b9bd41a6ce9215f8bebcd8e5a0a43b10ce212c9af2037dbdb7bcf0711c3937eb806ad8b7749022d9f521e55c4eb1fa3c47cc34ff7fa6e14ca4fb9ec8d686ab8efc45f4d6b1e561ab3f50514a3dd07947d0de560f1d285ef4136cbd53d71f76feb337cd4e2b7f7038f0bfbb6dcccd0c132266df5037a85f83d22f108404a414fb5b951fe8cf402594bf664ae28a5d559ee4d2a277aec7531ed2c30dca778b9ba220e19bb00b213e48cea444311498287a66be0b024b7f1293b2caba43a5cf43b9c856d8013aa93a706c048866e96bfe100ea18cc20a9fd923e1ce54c00842281c7448312354226a6d7229fe681051ec7b692b9c67eed1c8ea4a377bc1482c7ef7448c7e39465fd36535a5c0681f6ea7b1ff37cb0115ed5b5517804985e0a05a7d2853911d105734660c17f275e109c5aa39713469b117c325d8d5b91ec5af52112e574c7cd2e94e8aee00a20e0b191150fa64f21720295aafd9a7f0bd537e93ff454a1d2f559c12126b37de09dfcc5f730017d8070a907cb578c7709110af8436411be7fb0ccdfcb6ad2424ec9f5837db9d43c8b2d4380cf5d796b39195e6f9c59d394518f870527f5754ce909bb7c8a83ed3ebb670ec249af3097b05e6feeee674a3f5439c8f865281b5bde246de6052f39425f4e55863925ca43b3101ac8b4d2b2581458721568b2ba389da7d4e055a776caa4b63f13c4e812fcf59e9998d8ecbdc3d0fb370a9ecf0b1ca5aebc005a6afb4cdb0e0c262f9d9d5d83c4bb0e7d05a4fe015bc8ea6b6ddff54fc60c6c28a64a71d6a39a3a8a0abe722e33e275b8527dfb7bd07a799e458c64c0e583b7b9219ca18660823fc53a3e51645944ffd854dc2abc51bb7fcda4204c8eecc3576d73ef560dbf46bca7c3ab0e694d1250fa66f302ec982b5b329f71c3e407cfca890b2824cf241dde66a28db7d9e744d9e84fc740439eb12a5e0d0d51c0938b394fb6f6705d1adfd04623ef29add290af12947622bce88a855c69956e971d23c5dc2dfe8ddc4cb46b17437a11b8127acdd92ec96fdae246b6c7f33221320661917f5fdfe5458280448d4c0f4f3d90262b238c0367cc5fe1301944ee5937b55f1eca9dadef744ee5cb32367ffb1505ba49248da09e238fb4d4bc6285c6944c64d9535de96f0dd40e8c31dd00f19fd51f049c62498bb21e214710020eda035051a62fd7b245b868b218ce2a2f309d75fa1b782639c4636b05d52eb974edf19033932fe798494940bcf6dc3f13209bf9aa56d1a4958afa390595eafc805bee176fa51ea7b419e408565dd3f6697e1778c89a35631cb774fb773d2e7c3e2f0e55be9eecc90c02ae6631efce548b234b8b7cf7580ea96559e3efee4390fe033ea40aee7ac06f9d40b01ecbd3bf328adf507e114498d0e2dfb3d4a3107fa7548f91ebcc61ce1bc55cbb6e53342f88adf8da655f5cc31b4002e5677d8e1d3116b0de4a0c3fef3f7e4c2509ec8fd1629da3d8764c90bfc64c01cea79fc5f651288cd13e436e3e8f7b8b897398bb01eeb03a110b657b64b2eb90b97295afcab76729da9b4a86b5099fc2bd01688d37671ddaddb3fae99d4b1b13524effa09df1662ee9910541133e0fd01a23317ecb74ecd6189f97c48e6399b7dc5e1a3009042620900901013905016e213e33fab8a5b2bdd35f4af1f0d1e12ea88a673289fda0a58f9c2b2c63c4f5d337f1af608cd50fb9597e965430f24163b6ebba4e5952c062cd4ae823bbc26e0f6b3359ac3444d3523a681957a6a16e277471e0f4926d07503b12b417cd55ca1daae7f3499cbae64bcae1efcffb6a166d7143a4b3bb52f5f569fbb70756f6180e77668a4fe4e5c004d9f3dcc5eca4f5af54cea3a4ff44b9cba9a497cc22863fb11fc55cc96cda1486e6b5d825aa8d3b225c069a1d8a66e4c10b6ff70545ec46b88b7937f1e2d161a65a939a376adc8faea8f7ef058208c28ae9146fd944fb3087ff1821a1fa7b8bc6e027014c40f37b40ea6a71b21cb45084f08a62ddca6fb34bbd252787c0e04840f7871ca538a1ea017370736bf4329f602a75245bf990a664002d835da1024f5844950d471832961c87b5b33eea843ee36305207762d0502c9e35b8a7857f90b3fdbee170e2904276301979e7999a6bea6e0e6a013e51c6d8df468ba3c64d7f8c0e7f88dff12aef26ff05f0566b5d246458a8e89fc2a84bef56dcd43a85ff75f409b43d3eede9c7b048d3214b05d103396662a5bbd814ebf4230063d444a86c8bfe6b1688c0b10396fbf39cf1e408a5e0b00525c86478585b2cfe6020aaf65ae6b5d9212313770ee9cdf496046bd24bbf32fc45fc23acecb2edad71f5900e05c3ed9bc585b12b8791729a441a463ce605df4a832c181ce7752d12d6fc1deb35110051a975e9441c99a38a0b7c8c82efca7aa5da7d089eeb1557f740365e1a6b2627538dddb801d2d40aff1199e495afd240afbd52f3bcceb65ca4bb35a891be99ae6e6e0c07956e9d0a39c4339d3be5e33c678a31f0f1eda0cca1f563e8e9b31b4d01f52d66e9d7f8abd2972dd5a20504c5b79e981021ec49962e63ceab4b27c175b9e262e80779f6d0725ee645aa8ac5dec7af1d4db42d3fb26bf0dfe043e5ec2092df8daabbbcf72569ca23ce7906b7fc4153ca0af7eed702757f815d80ba88405eae4e43e2dd691359937c6b9cce647c14964f1ce9f5994d7b06ed0ff5999d0b437d8cb1f673151c9e481f3cf27d6710d6a7590a45af1d19efcdbb6974eae4a90197e76033585242f8ede3241adc965b3c3a46d3f5770275698195491f60d95e4ff244e65654209183020c2277d9b5dbd1670a1703f9b037f6836d30148e67d6b125d397a974a7c1891b8007021cbf774da978169ce820c263d34520ac8d60f152f895f8207cad7a5e2d9cc36ece2dddec1b9a0ac10f6550984c3dcb59a5a6c9444b23aa6fff072651e56fb3f25e3226dbd9e89aa1da65f9dd90fbb4d9a14f500f744c8cbc973d4d00bba539d57e7bacfcc925a99f39504632273956210eb2e05a071d42ecb182f70bb3a1118db2a4048c1184f554a14038df090abb4612d5ad30595b6c0ea513aa92c808a3f3dbdcd882d0d635a43bc5bd99100d09a2aa2dfa55b6b51a8816611769a7ac8b360bb88e99920aaa03e4ea790287cebd5d28f23e6f055db9dd2cf1775f68164347ea1b269bd0d31110c64171eb47ec9fabdab591cadba898afb8c3eb1358bf74d01ed870a08c6d850ddb469dfa456870b560db7a541c8768fb3049cccada17fcfabd7940b01ec318ef5ba24e3ce7441137182f9ae4b561caf8fa6d4e5493462535fe0a621292c6c538ab417c3af9d8bf0f325524ffeb9000fc94da5d2dc636bc3a111f1612cdc01f800d0e3b68f3982ee05d38d441a37b85ea50d8f40ff6b724d888de4807e76c2c533735bc2b48f813049d5e7e898182dc261b896ef18d66cae54d0e4a6de6f64cda91f3e5f07148980eea94cb372c3045ece637266d4e6e85a7c24a999b9fce50c81c2e1c152d197e31080b644bd928b4ce7f6bde1be65360a99dd1aaa4cb265ef31d0b2f8531ee294766f00a62b4f937f584580757bda00528f6c1952384611804310dd470010ba71ab7a543f734c1bd602f0239bf7b285c45da93be8c23298c731a059528dc998c139bb8def4787e206cf7561b2d98dcbdb12bce447dee6aae21ad57d6b8406b1629f33b7ad140810715d53d3d64a4dbb5fddb7df89376eadfa0787d76f5090c9ecc175b1106a1befdd9c0133ed07e89ba61d6be6f53ccea74dca9068a13efdc6d09aa5d0f6e31ddeb0c631afceeee1b18a203d97d2371270eb19a49220dfe104acdc3d332337aec6ef80e154415eb0caf9fd62faa2ddac74e3223f4f3009759dfb1ac3ebca71e9b26396a819003bf68cfef0d834d443ba35a353a4862fc26619b33a9a445071ae9e8cf78c0cd9c7487923863b6346ade6c6058382b648353ec1190a9d945c80082c901edc8f06f7f2fb49ab6f20943c42bb0b2ce0c5272c2580830a35e78ebd1297d2d7ce8634729bea3c8912b7e49ccc1e34e27ec26b15c391543f92115fae323dc1a4f7003d54c030d9c9dd78b6325e81ad53160987deb9c8b94a6846f58ec72f710c906e2896df9cbf075bdab4caf1bb48eb1de8c286cd58ad3da749b3839e68ca5979db4c97cdb93df75769a8b8b6443ab228a36426fc1b38f355a342d8f3f706440e6d0eacc6aec79c6516b0d91a9f2f221d3655179832f3a87e5fc560dde7ff52653b7bb586fd6ade1fbd6d89b0cfd9709b4c6db54d13facfab17c9f111a1d896b67de2118f292f29dd5685b25cb021c59b327463efd1c1ba5900ff96cdd5a1f47f4cf8e28e752776f172d4e1a73fde23f51c984407569971776a4f346e5c7e502cdd8239c3bd78c9f606958790ce8d42f1e463269d00823a5b82dcacfdf117d73c57c64de9e5f2dbd59536363d3bd1715cd7d1da4e2ca4dc9f8b6e16b0c5adc268b4e5f5c2c3f83a8e2151d44786013b819dfa1c4568782d4e044fe45d94c96d444bd94f7783b1de959186ec1c7256a032b5e464c5eba531e8add23712c2323c18fa0302ef3045484d1e7dd205a31c206d3e14eeca2f2fb43988b5b39cb2de8523437a63ac26465304f83c40b7694a1cba4101e27d810701e45e79c482285cbbb45e428a4adb71b404881a9751ac07067253d6c5e25293ac7d07c38db87d38a44eee11a279498f82074030e287689f94fbfdd57bf710d9a335600a439967c9f11aa25c3b85beebf2c5e2f5d1e91f22a711a3e0dc8f77853eb95066b660bd9a63f5561ab915d11dc41623a4bdf75b2b795a974ed5fcf074b0ef82bc5243abd98138e9c2346ea71d92e23a22b9f8e1781e9fa5486f47369592c701a80c876b65fd18374cc5802f8fdd5337f520aca91d605124bc91e5e4bd25dad806d090c2b5dea41a5531a36b9b57ec21d3fca1a58934fa969cd22fdea33cac88d555381c85bdc0ea9cfa467962934a5cbda1b0cf35adefc31f67662558a9ebc805af31a72ed85457c39eb99985ebd1e866a28135f9517d15a90f9925c3121192731283a3ed72c8fa48516938fcfd5f69de005bbca322436467bab6a88eec439e4b1bbbd432e126b0a7f29db44c20dda6e022cb92ef10a2d197eb8d04a66db1df8d7828ad86ffe668b2df9e9d3baac856c9e5386c740690fcfef0ff59a69b998972d97015b85c96e23bf16ef544e64434ad56d7ff6555a43f9a25191827fe01c74ca7a0b180c51d338f95a689aa921a9d1e326e5761bdc4d1454bcfdafcb49492fc588dd9ce900386d81f8e1fb8d200ab22d71f6e2c1dc8fb90c2cb47dc06f168ab0298b23c72b5601f0a2e0fba4804c36eeac781b960cde3838c4199eb1f78f57fefb75d9ed688150c1ee3d941875037eddd44f2d999cf8433e41c25585f20dd529d21521c25edd19dbdece9e00a12ed504e4848a19ce6f76eb32fc4ef12848b8a435839587bcfa396ea69a23fb2c515e0f960f5abfeed9087b1f46b440ff87d7ec500dabc86e354b1989177facbb7d3f3a709a96f685b271eb6399ed4593907f41f8cac68d9d7837c1e972cdbda997dd68841acb73edfe98b120cc278e31de5bf9e45cdd3b707c5a7a73c72e0b60758bb8d8996a560208d9f50eee2bbaea8ea0f8b35b7f9e5ee8b390490baab7196ef2300b1707bac8507c6a7cd534c05591873e0bea6ac7e43f94198ce61f78886af6258ab771d0b24b6044cb7c287116ffc3acbfba93c7b853cf13bcc4f3c8991fad2e312f4e0e4296866ccec1bb48f57c0bf1883f750b751e844417411a9464ac1f834403fa57696b0332e38c4cb135c84463b54922f1a6cbabfc355839dbe77b7aab405a34157714814169960cced78a4abc142ce47bd70c1391fcb7304c30c1305e2ebcf630a43cfec40c55a7d1d9ce80606abfa0f94488dce8a5628c35d6c9f36c6301b06b087530725eb997536c59a24443243effedb417fdbcab041d98e99e0ce08d7c335b5c9bfe224ab01a8bb9e4f2348b47140151be974d0adf0a20d14d1290b259668dc1aefbec9caab38215c358445df62e781c927b6d2217f584036ffbc8b9f372840f28dda73dcc3be43961f43f79557f24ce0a65ecd884f064cfd4ea0b53b4baf719ca9fdb582fdd32125b4d8d508a2f458f73426c2e9924acc579bdb92541ffde40fde724c3282bc2c915c31dba81f63aa980babbd32acb4afb22d5f88db8275b16c26c68bec1450f8333af7c93b4befde08fcd8ec2036a829fda264dd4c0c4247d521bdde2551ba681de1b52081a7490cc2ca49b2023cf9cd6b74cb93858c51a4fe5c2648e53f4757ae688653e467e81d0e82e94b15538455f0a48fd8e3d8f7611f033dba904fe0609141a02c3a75a6c658bd9ee0571f4ace9e5322d9d2bd48ca1738c00a4346ca8491219f006f9fc94c59d46592d7ac048649795c6b731c5ff5e63810ac6ba52920527609c29a0b32755c5d237bb8d403e3ccafac7bc364d06e80afc5aa36478faf2c49e810a35bbc65adbd0487d0ae4054f4bbc878395e6bf5f66bb93612faea2daebf662e6730dbcb541da0a0b1a7461a2f567def4e7df787fe36d81b58e1c4633be1f70d0079f1f7bab79f7b032907bda907f4b1934749622ba7be764ce4df14eeec870f1fa198214ce578073112fbadd33012b6f5932a8aa4dd2a367df5b3ad7c8dc7750232329008006b29ecaedc93fcf67c60f8374c4516253c21c9e1c6926b9b778fa6ef2fbad4dce1892792cf3892f7a8cc53468f2899408fcbbf5b1febd7179fedcce04db12eaba7d878084e099bc907808eb5ab8b1bd3ad24a0d0a9b05e773b4a2963beb7f9c77bb11a996bab2646fcaca57efece4e701d83cf4f63b2e5224a446cfc136bac339e08a9acb1f14567cfea80356e6349e0598ca00a8b617ed9f8585edc19af5f5616a8708fe9a46b932ec33e6ef366a5aadd2aab199467ba81938a803a155485ea5853cc010d5a7778b560b7faa56c9e7b8a23d2f03621539be6f466b66c8c85776d99920e154e7b96a7aa788be6be777c9c84ff0600000e6312f21a6f1bd4fe950050f94612a783dfa11efef130a8d4d4d02732a2913c33d4e2607bb311d8700bde06c5297430ea208ceba3cb29447e76d2ba29d296d4e9570e4f32b5b9453f212431b987b303a6fa747b30ff13dd45a9a31829d4d138ea0b7df860ac182a1a0ee71abd15b0dfe7c99238252bc3d75d21ecf36ad43323e07c05d7c0e58e40ac52d19f1d9a0fffbcf297af7cf1590a204b5f5f8d6ef6759c0b18376f12cefddd66ef4934a4129eeb7c05279e5d92e4e67c7eb93b9dc81589349d6e7dfb8562c02bc0097d60d7f3ee5047e7c1b9506d06e4eabe6270153bd7698c056633e118620dccdf3eec621cf70b19d5fa79fa494d024498064edc81bd7e15df2fb13b77d0d34b1e00e4460f880259fdff5314c4a36483124afe78dce025fc14469f65750d6a1a939f658ad47bc8d1d72e96ccfd7e2209e5f7adef1c4cb30b918afb3034bf70c664a79d379ae6158785494299f7ef19710a2136f0e7f37fa26e353cdab4c14a171a3a9fcbf3f66de5c9cce87ff3a8fbf1889040500dca4ea041ff2c6d6385721ba66f5b9bbdeab2153ef1c125fc87b298803854acc8667749e6097f48374674cdd1d7b9dda84eb40f0b061fbdddb53bc20c6da116992486f9a3b818fc6a004179772429b4b4ddc2438817ee211d97a8a80fcfaf124e5804a84ff4f3d0583efbe9cf62b25278528a36fc99d1ab91c010d8eba3aba5f3a3e4ba8a4aed1f1d201953dc904d0f29edfa641029469369f2926d6d1244fc47861b09fde19985dfb130323d3ac06383ff625a7de7e887db7670574792f8d8d380b0d58763dd9921621d4d44deb0a580022dfdaaae665d89e8c63f6d65fa7b0e08d719312589725b6a7c948c1cd658039f04a68e59b72c83703249c00fa6835b8e23ddcb1fe9aad2ea085e15cc6cb192aea523ed468a74eda7cc6cb02f1d2093bd0a6f7cdab6793e229767aae41c7936971f0ac1b577ed099f3a95e3495dfa84c35b88768c4bf86a9669f99a9be16244a47ed2971661e7e308a043d6a78b9ad6d2c759c4348cac373b60a6cb55159769fc4c9e3122531c7dc086a17e7516e6a33f1b5de6179e2ad3067a012dbf8632bc94b1ad3046c6753954ed2a7be04a647bacff95bb8215bddc3b6cddf886ea04c4280db864fb0f46f3e76b5842f23e6bba3716fe83905a56e8068bdb77e12fe94ff5ac04e033859907c6335fce0be1f6f523a12adfcb549c1b7a239ee1db1fd1a4cff5cfbf3a15b215b865c7edd0323ed4deb6f5ed1f27b1410e32395801c6af7a32a74b3a39da1fa8c88f542188283e1f07769337737f532c185d96a892dd6f1f85ff5d85ec3538a4e6748d5be2fab26a91020499bf9aa3d02be9f993f81726b08c50387ea3b819ae217e28e5f9a5976d580070552e1a3599ae724f91ee0e8eed3de6e861180fab74e54efb3e4c3fec8649d936baa626868e747bec97b37e745c6b5d64649cbd6c6ae7c2f83bcef045316b19fdcba0795f3f1c0277fdd9842a620076cab4cc24c9e696c6aabd000242f6cac5e3f2d6d5a5c5e81c49d2028f85fb1e4fe9e1848ec19c403c4503296889be8ec055e3dbda821a408952403e5afc014e322f930c30d875580fdc733bb8b4a21113c112d02544761c6af16eac546668fe55b7a8c7879b79af3ed4596c4fadfde5f286cd889f801a8ed557f9e1f28cf697148c250711067cea109c512dfc6793911ae12cc0b1bf9a3d0e7a1f3310710f8146b537bf406552de9baec4bf878e09911a473519abf3a2fc1bde6ad503b9c3af30fed8a97ecf49fe4634a9290ceb2482ffe18daeb98905ea3c5402a0e833df74e711e3c0b372cd1eae08aa459f7d5f1d539122c8b70562a701c0fe05860d3903898d2a4a0c5a14ade08ee192d6d0d556264b967f08dfb87e2dd6a61f34a9229545b5d838c23a8616e7fc23d07f5a68c8ba926c56b3fd5209418fb73744e584d1d51c9ed3835cbb81844c670d3b29e9073c629c3feef5092713c6fd75af3522edf9f0b2d193bed733b2b0ddec8d360ffd6c82ea9a72fe2d95525e9564e6d589d584add536d64f0d1f44c2d77de739df80dba6e326a2d6fcd4936143ac337bba902869016f4b6f165d482e07210f4788a5a75ce9323debf3b2c250699ec2cfa05c0912cc9225d25df1a7ccb02b05e77cc895e61c2b7545960ed9e7b1ac36500e44c9f8d890dcc44cef933d169e12a80c665f9b85be1c4abb3eec910f7421d7d2c8655c545072a73e7d954b864eb21159754fed660c5cc8cf60a46fdd367fc96f1890e9b8d86e986ea775f9d2463511d941cf9a299a5816e3c33b755e7409667701fc8a6c93acc66cfed9688c41d8164e65b38e5392ed3801fb51c3544427a482c8d7eaaaab8199ef494e77ff5c2177e2b56667407d3feca9a86dea5bc5231ef32e5ac960d37be1100f2af4083e8eabf78efb650721105b51bbb2e072ebb693e58de912769bb4405748f1d53ff9e4e7599c115d62137b8d2e5d1406c4cfc01a62b88b7359a76a1f8b1f6d61062f0e0b9f2265e5ae0b325670a8d20c8078cac6a9201c843eb06c8d0baf07938e0f7a0b168b035a509f2e94d4bd618fd510b28518c954775684d129d361bbf6d20680737cdace7ea908b79d4be099dd47544bd74daeef0b1cb0e7eef0c4c23d137c709d4ae054ed17995a4c17ba88a914c235bb10024700c1508d49bda8ebeab4ee4bb3044688fbeca2c96ee3edf32303944b45186bf2e65e7dcbc976df94b5db40ecbd30927d495f0920d9517dedb5d8cba88032693b4e7bc3c5bec7af0000aaad44cd7b9f2c96ad90adef7137d7a75e0c5c766e89432320622f3aeed86ec3d3c0d2ecbd598d8029abfcc372f1dffce7c58b1a2f218299443124025c9260fd006e5fd77387c0b6053f5b5e60627dcb40cc9551b400dacbfda50b5550d5ce64e4fe44f62614b04740244968324ad601f56f8f234e82a13f0d78581425c07579010efdd1a1da7dee3beee66a5e0893a960652849fef27492db2460e6b7a3aa850780fec58312c7adc034a3362a45fff33b31226ef50cdee521e634418624b383b957fe5c8a1fb79c91ada995a63e19b648b16629159bd12cbdf7dbb64f084a612b847fce404996dde23fee87b5f6c8176eac3febff2acb00a08c865f6eede24358938586cf5e920045cc3668c9be88dcee8547279f75917ad55151b5ccd37d29124cb96af5269f78f27f35bbe63fe6d415bfb71f652a3a28e9621142a54fda608f6d74a8c58490cd946e5f997a2b8cbac05da08921b9272f30290acfb5a7c920e34a8c67ef04d9ec6625515219c76e016a1de468975db825a6705e256cb099c717e7c3764bcf250e042b00dde278f0a9b52c2f07f5524df0b576d67f815d7da7f0d45119ad8581782b74e6a660f6dafb8cc7aaaf381458120e48b1f757711d0c01f3950fc14659bfa78dc2549035e18f983f1d0dd4f9a05663555b1f927df5f6a92dfa8f32f04d8da7b2d8fdc9cb2dee99d9e6079e763543e71feff3f043524549d907f2ac28d87e14199627949a8ce56389d6c0fb4af6c01bcd791e22f65cef299082623b0b4ddabf7ddf392c7f104105251ffb2d64142d89194b06d9f09ee08ad526d5bd041ddbfa513cd1de685cd88ce417e9a38e8ec0f63b8e6d3085064606e579cc1024171df95dcc529b68b9fc453b775f4ab29cbb0c48e2df44d4ed955b6f8fe74812ed67c4adc7b323a13dbecb371b08b87960a681478f54a45675a646d79bc60100107a836261d888e8cb32600792db07616068d7f24a02eccac671cdd8eb8e603b825246e9cc9645e6b32ab517d4b8b3d4b8f0fd075850736f7b73d4274030debef91d795377c105498ffaee5a76c5a42ed9d8ee699baeece187e5f014734c74d3bd0e1aac64f10eeb65e0bf2c4e4efbe8af12ae5e376c8b9ed9489bb010420b2611f122d89f3e963ca122afd58a5aba06d9b8d1543df9ef8891db1ced37e6ed8b7320dbfa6a36f065c1576fb93150b196763f98c72efcea01b9e7b9859a5a8da70d1851c8f0e6086631fdf5cb74b26fb50f322ddbdb1206f1bc6453875d2a0316f5d6d8a703c3decf4ebfa9a87bb90e06df473e4029c68e6224bb79396a93dd2cf238f503adb01595c834cb01f01bae174bf1bac34be87e7fc966020491b16e7628f57fb5d2aec4ea5bebfe885630843fe3660533d4917d4da17fb6e9156a107424585a50b6d6809c32b7df21f65501b2bf118259a917f083b8e11e4835a7b123f71734958cb1a439f080f1f0db89e46664ad4d4d92432d9d3a3d2c87d3018a8fb63c36e40a3cdb3ce999572115c1ad1aaa3eb4ef02db5c06612188ee43f7663f7572c4821ab9b86f3536631966f1a6c2a2acf0cb5caf2bf015ad7db1d80ded4e12766932f62d2875d143d27861dbd4aaac1dd659f6b56e5103fc4ff7d5ce44a1c17155f47a6356ff647b39e82c6cf36a44f766248b4cdb7470283e4583d92303988eb00a77b92646697e18fd4a65090f9cdac91b208127e2ff5e589dbb46985bc8b6d602531121f8538a1f1f9e26a263b5e7ed3ec9d7a9003ef8b1369bd86f3780a803d61efb59e71f05438621260cbec41bf086e1238495a1721225fed955f1403a8d61a78ac077b2a25b6b518aecdda76ec3be4bb7883b62441c472fab57f8e3e63fb1d813f0b4009989b567b7c8928c178bd5027ce06780f252f6b12cbe2db1ed4f0bd4c544a442039c2481e5ad6c262b93219bae8789b1127aba2332787ada55ed95824e14c2849f5b2966f6e1c1e02fa748e68598a767567e1902354ac8fc56127e2dec0fd75a5d4442e32167fe3083a9585cf9c82eda4035a3fb0e07dc39a4d6f22853bc710b709c59b18bd52b670a88b2b88af3bfa1e7a7f2afa2ed74a83c2c1bc693d36d612893aab378577104b70d683ffec78197c715f0a24371e3e775e59695001dd59ac3e0b0be2283ded9b86bc2c5cf7327da692d4a8bb52edd954fda5228c20a464c1ffdc4da5ccb9f3166053e7c5a7f22746eb4c0b8c4018be1e771489113a17082356530a519e85205917a7367cd9acccb55c0aa2672200bd35a7888c77135234680cd6cdaed4ea5f3cbf1194fa7c972098a09a63cd537114927164e82697fda4e01b785f4f61fef0e4c4834be62c55a1599aa140184af80011f557b0df0c48a0ac4a920069eb52d1d46e698b04dd0d968d8fd6cffd74cc940134e00b1115696be2fa4a51568eaa6ac50ce21502e77eb2aa8c798f6c87b1431846908b76184074b2d63cbd7e0d83417b1f03cf74b3ae7cd251bd98837236205f50b11ea3c98d56684a3396e986cfeb9e5e0c0dff51c2058afa414bd9f0c86ac98106c5db5adc6d9c09c895bbf9920a27b40fbc05e02ad5db0c937ac70bad37f5d43488146586732f83f5d68267188ae24f8836ecc29f5307f2e467ef10f077ef254ef49b70708a6f945f7928520d10e55f4c2f72cc048295ee8280519ef9f6d5af40bea987da4f284a5a711f119f2614b46af84358d11c9d49ccee9b369cae395accf9632e2ead08f6f2dc2ce033ef211cd5e03a8764961204c8a646211d24d939b4240fe40e1299266bc527478639e0c24395c41290f087cc0c6f7473b189607de7efb9d8ce6e478210f445ae796da2cb416dd7160307c02a077dc3dcaa5a89da70130b9e389d2ff882d627091759919c89676de6e8cf820be0f33642d442fc17350cf935cdc95bd6559b2b5d1c132f435a0d055d3311fa5bc873c6127143d369a95b10e4b2c38ba8e6b4245e9fda97aff96de6bffaa35687ec7d9ece80285129c8f2e4aaccddb93d1fca7c897566249672fe01a88d7c7532da892394c36dd0a3646808859de445e758b42831546491584cb07ed1267816fb9427c7818fe89c9ceadc8c2d8a81df2eb3aa1ae5472431c0c7285c5a4eb67844975b27d91472a789e3aabe44bf9b4e05061610917761fcb9ef82606f2d36d232c6efa87c41fd72eedeeb1af622c375e02a10fb3e1c3c182e5ee43d7830e00643b9209f4c9116c7e649541f31aa56c89992802b3913edb7b90c2532fec58be74b63900dda44504ea66173e4b51ec53310cfb6b5ebb81d5d97d602ac96082f6e4c78dcef6c52e1d608106e7a57302559415642732dcfcd6570ee0ea821886577163d7d049714964e123f6f008cefb41a94bfe22dbdcd05510493a123e5d97dd99ac1d38d80a2e60bd35a53537eb02c5791c958a204bfb7d104927d4cacad52b5012d92f71e2d77e1955b5be253bc2f075f04851fa1ab49a18f3d394d3dfdcba2aef237b734719c51fdae72c1770d7fcaa1d5b428bdae39c0c9b49f732150ab0bd595c5abaedcab13eca2ef60bc8be1efeeca11302e6b103d62d346cc75573c40a8fa7812d0b7bdcba570f18de8b135346b60caae627c3d942d13e3c5cb20e2ec7de91b5e7cf71e694947b4cf3ef35644f81b4ccca4beee10d3c80fc3d9a74aa87021008c4cb95ce16fdfcec9bc2c6b0a77e7a15e2b93c779fdc1d1b6174fa223764615e895ac6d652af822a371752f63a1931062dfccc3ae880b6a52fe409dfaa002d9ee1be894b5dbf135522cbc7bbf6f29a4ba86cb9194a15a8adf504657f4948a3348c356ba209fc0151c29f421023576004f5bd7a692e1256eca0f0d3b28ddfe1e3f203d625e8aafd57741ec4dfd94325b1b130dc0b74620034321434cd8fb7937961f24ee5ebbb435a09d30b98325193c465c78982a1367602d9761a8acec77dded743564ab3538425a5d629c5577a0ca12bd0c2acb719e3091616361b0995ecb9b8607ad76469cfd6dd5ba4c7d9b90362fbb2b8f8d8ef9bb2e9f170685e80424324870d123e76fdcd44178e9b82b0c0bf4c19c11c9a28bcc93a96186453a42b74e0d59b1accc9b52aed99eedb1978a78309f7ee4bc31cd83c15df6e17586735746c18bdb8da8cf3e44840f2315316602200f7b164eb836bd712a6b9cf140486e0d656a7b183f60b13925a2a8a6617662dcbdcf169b10178e9b5632c2ba161ac09d4109d5c10b276b2c09722b856d14442139e0dc4914aae99ef8f25b0bc1dd973b4a017031eed9089f820449d65afc0d77056fa1e8a72bb0cfd1306af46f3b9c8d20eeebfe5eb85928f5ef52df6a33e5ed17801c29b54f122525bc8f7b7f2141baad9c632202dc8eeebc18da9b97057dbdc6afd2d4a1248fd68167e8b79800efd67137fc5b6722f33cf681b412c792268d8c952951ae88164a686ef67d0f6ff228ed87c8f3719d37ef0db6db60d49fecdab0b55532c85a1bf11603bd5a8c861f6014f32a9309038fb84801d479bf8a7295b8d12ae71ad71ec39f44e1f684802430910a045ae71724dd674d85a0f8812645154cc9354251b3abd4f3a7eb6ac14c932afc520c9cfc459bf23972e0bf9738ce32c3c598a77b94f4c8c4a7c2bc8d8d6fd356065919b4f8148a5be6e8a212a1b8b1b5ac955f8a01820858450367d8c8fc2d5316b309f532b57e0b222c08b779f91aa38ff2a19f9f847b0dca1a8649c034519a31b092d67d80c1072504bcc025430e46ac0497925b11042506b68d1daa179a23ff103bb75aecc77d75e8754ced665573d84e5b8e6600c5ba264a55f60c040c414c425b638df2d21d8b27ff4d7d30498736a96c6388431f56c9dbe82782ae901059ee456f6497746f9743e456583dc1fabfb1d55d4ffd4381e3c5d9f339d61bb8e849be5ed3987da10151f2733b06dd70dc7805bbcb263e485ed3a7a157777d66d6fb4b418b12fceec00d7b5608539977762f69e9424d82e1e54ecabd194e90c957784f9b3f92d587d2da250915b7018bc1672d271a1fdbd3e05fb3412fcf320da740d2294498639982f8a5d4cd09c77e9a8f35e9843006ae72b440b85248ded837156f69622842321acac4213616966c9fc5ed9e6f96e537f6b15392d0a01557923b65c21378d97b651d195ea32fb39f01568a4430a10a364b966b3eb9288f92003666d60279571037d370bd9bc1f8e05ba50671f6fe23c9f56e5b2437757f81487d7e6067d9da40b24c27de1f8687f30c1eb5a37a9d2cd568c29f2c0d245f6e570b3c5f0d37aa10cac87d8d98dc535bcaf1fbe624d4a3892a43f4a3bd342a07ac5c5dc669bbc14da1472910138216b7dfbbdffe11a8e6f3bfcfc1fe47d1ae77065cef680795e9fcc81aa904b933de3b574108ca9c449fca952fcb40a209f8096242bba9e31f1980ae48521afb7913ea942a42b36237b73beba565df0063ce9ac1948dfdc187cb8043c04fb3ef97dca7f0d9027cffa8af6f59d5aa70f4c250cf4d347080012281cecb9349e794ded16f6533bc5e339ea550242b4e388dfb687e8081b61f4bea17bdda8a463a8bfc9f67c65d3d6f8668cabf14a891c81cfd824564071d6a26d8d9d293a31d48e1a6c927d1ab4beb0275cd7bf51f5262986104a2936f3173be7c42efb98dc37d5ae8d2c630e271360f0bba8721205f2302c12b34b95b007bb20d2d098cb3d00061ef65edeb225825626a634fc9181b545df07384ebe60f3da396f3d14add1eaee10dac73e78810a4ff6fde4200a90b23d609157c7b6eeabde58768a7e4783f506b21fb3c2d7e639373fa811870741e8dc79a3bd749c49fc464b44ddb9b2c6aa1bdc6ad82c34ad035be343d043c7c045317f2e16b4e6ae891202d87f15bc5b33d287f14b6b95d36aa1a76ea59197cdf52541fc42aaf5284a4c1052cdcabc3be440e97402539393ccdcd84266e4dca62ad5ee72d1b91f3aa11d816fa1180e0580ae925bf8a725aba17b9447cb023ac4b0059096b4e45c7b1829b30c523e5a463a2aeb871de08277f50e7b7124f5d370c4fcb808669c08763a8ae7ee1f5b709b2782efdc6086e2e0f3ed8f07d5f8c5dfa50f03d93f31694afb285ab408f1e4a5622f07acc056280dbc4a1a6db269d9cb5dbb215764a223e5138fa329dc938681c7bcbda2abb5f4bfe77515d2d89e157f218c33c9f6df61144badeee973b0d981affb436b025763df70a6e93366f163be60bb4afcaedf770679153d04bfeea3082dae5aac394f17802cccac5c1d11abd51bd8ea10f460409cf0cad4f6fd9243f3f56ad92334bacb0446b1231022a7ec1f17f652f0cc90c40a36802ca51cfb57854a088dbd10088b6294c12fb9513bf35961506f0940a9a536f1c70a20a73bae30144821bec5379ecdcc5358770cb8881b86cf79874bd6ddd193d784bbd5a797dccf8efa8cc35d271fb86e104a2c895a8e7ce8ca54028503ccfb4ec1ef6ef83510ed077624c70a92684a9f8c6a5d2021592bdbe08cbf707ae220f92a9643e823363bed8ed121b8a8d7d5622dbd3dda860785eeb1b8b56ca1ba902490eede665d0dfa2488c42880d637a8727b90908eb348da29546c0e4e0417ae620f2a6c5278e65a9971a4691f928042d0028007a924bee65f74e8e28f797e93049808bb2b15e0a3b40e7fe0666b322d45a4d10afb39e6928074aa936a9cf93113617e65ab468666f2e18bee55f63ce9b19e2037f3b2be652aabb7bd39c598499c6f06557511c58cc8ddef73fd907f746b00c9cad309ed3c278246d887236e42411d79e5f285b21c7d86fb6949d29f912f4f2901791c84b24bcec9a2aa6743049ddfe05bda924727db7ca66f26661c734b8a5819505f2de085033d57906173b154e4402157a828154d1dd9e2804dfa0bf63571499354c22c4db85e1651853edbce4611e00ef0979f34cc67d31aeb4588505701b9e755c99d49304f26fcd75d5691669c06a5f9e4ca15f069667434e76a8491ebb92e417dc4d8d6765c6202938b0eed758bd2fb91c620f954d6f55cfbd99aa7b55c22b83afdafbf17cd90f3e2eebf98b619227e3bed51d4a375f08bdb773a73a425ef1c562cd6fd8c423c1ef7a15a85b4725a293ead3a7852196f647601c6308fb5167c45a2654e3d94585aaaf52a30931643fddea684ea60eadccfa7ed837b4b4260a1b4146061cb27718594049b0185b4967d7799a6a59754b6e506057696457222c0ff97d09587b4de162fced90ec917c5e7f9eadc8019aa135005c53a761b8de913699696cde0ce13622774b85f82dc1d60e725f8d893458e68709d4716df32b700fe20963029162888b9cccfc7e23a5d6a0b837ed6a3665bd11383a94eb36b8ae7a05f9a92aba899d3859297d770fc924e83e0fcfa38ea557bdf4535a2aa32be146c14bb663a9126fd22e9a5a51ff3eed0157658b69294e4140eea8e85ef683d6febdb97da775daa7b1989d20e03e361ee65a2d9728edcd8c95ebede8018ac3e51d59e0bc59775aaa78a341e8f1eda61fff8de546cecbebb3be2a3fe19c976490df2da1301acaea1b277a79ccbe508729cbc1487d16428957a8e02ec40a2f3d6aade2ccde174baf1d50397a239691794a03e4612f509e1dde0cc27e109fc421aaabc363ce5352fcf0c1f1e9f24c2e3ea6f32bb0173e2a0fdf04760dd64503a50473368e060c758d840b297b75af1642b840401b47e76d9382f08030c95b68b062069562cb992730037d6118604c696f386047e7ffad28a6dcd3045fecdeb2d87243d9d3a837d8b97cef45f660977f47317f13264e1ba63411a4e3ea692531f04f12a435991ce1318fe7f48e87911650ae8b655d6209557d9f2f4f5d8c5fdbec0b340e609ae157c71641ed15d48255810c1465286cc43c9a39cadc35d6a1c0fd1899654c7b1b0004ba1bfb039f0cfe1d1ba6b20bfea63420ccbe1d0d969f3c7f3955c48f53ca6d7064f2a5d838ba01ab6d42ebc516bf17790e9a3f87d858931e9ee57dbe4f500f9fa66ae3a4e285a052e46d5120456fd2c20fadb136da2237e6c4d1465982948548cf930277c8b9949f71dea90dd865b395d9d9aba3c1e4b61fc4b01d9ab0bdbf1fb351d9529d709c7230b76f4aa3ee55564707720854535ea03555d3a28b5cec9a5ae8e63af81d4e3b387c9bf532e64d3a1db18924a7ee54d9c8a5ca74b4ed3778790432ecc967d19987c784c11d8e432c23df91b3c3af0ad8a8b7ec28d9b0a1d622c035d24b6094ef0e7b4a94cd7304e30d70f0dfd31b4357ba16c1e0ddb31a925fd7327951e9b97df002e86f2c168a2a56fe586b4de665e3f9dbfda4f78634338aa4485630c68a803b9336b6d75df06b753f5922e18887292b7ec64e4d46e679cdae9d7a9cca3d3de4ea91d3b4825e923d8f59d340283c74356bc9d7cc076c085e055065d7baf3ed18c21793736e846d5930ff10527688aa4bd965705f15af4628c3c5f23c0c60326476bfc86f90af4f11d8a48ce7217e6112c8aaac7ba9641fd1fcb68f6a211ba23c6f29a137ca9f82ece6033267099e42347efbed47d4ff7b26e9227b2786080444f519914948a429094879a220c7a1b017de8b6badfb8bb99a87af7b297cb7403825f43d8395ff1db82f1d2eb565c0475b6bb331e34831ee384c66062a375ec99503fb17b8ffae500c4aab83db5f5a24e0f769fbd96007dae9b351144a45888d9883995c3df2da1adf19e83f1bc446799b8dcb4297de37d8a2d977379bc60e3df28057d2d012f8cf8e14e63eb75fbccf18be1ac2fd8681c93be45145f32e34d8620b2e599e40a94f12837b13ec9679245321110805cc6956f40e5d3e93a51dd11e046c7b6e25b25e46cc8e202b75adc4bb25a573d634fa94bf84e898b126919d243b49f3b6b8ada15244a601b822f10cc7393927b4774e449c0069796f82ca8949df949303ae422480f89a1ab78e0f4f7a5d562785f522cdf271b277fc9392c2b1abf99935e4f1122f135efb5da0aac794bee1d930a01633921242a97ea394fa6028f888e13bade9e1b9be677f99c46a62e2f1bf78da8866bf50b259cc607f093807231546b708c346d61da72b96f78195b3a5846993ee87ea71b4c74d97258acf5dbcf4452012adb96363a17b20115ff5a90caaf413dec9cffbf9f6453d82ce276a1a5cec5249b956bb96a799c6f19178755fc058479eff089c98f79de8607bc445dfd852ad6816dc768544a1cfdd4cff8d109519a470a88aca16429da9a6d783b37ce4847e3e0500bc269ab3726bcf40f165e721442ef009103997aac76b190dd3d2eac26700b9ccbc79ee64f719547c0561a7ffd11182aa8ee037e96e7ba2a89b8b4948ce1cbf0b11a822798135433514b02cc184815a512584898d4ea59f9f5730c2410e23a5c84ae4b2130c0cf492ef61427bb9c3c8daf50fed8ebd538a3ece72c69d21cec04243311e856cdb98742aaf59db801ba7873888456aebdac961af109d2ac022fe39931770e7e03acd14da473af576ea30f1e7ca13485c11547515d3579a767e133d0248867750badbfed6968f1590a75b2e2beb748901eb4a964f405c838dfbc33b5bfdae04de500b769b4c138869d3073b1ff42f49e161de4c519356ccb28734b6afd6db417915fa1999f54ab138b84489e0018b2319c3243bbc7a914eb0dee4d7366cdd0311a2a135ee1fe281807288779941bbb4c7308bb01c65bc28783495580b9efd7bc6e00643de2220c87b1c22513f9470513d20c6cd8a8b32c1c2a83a96029dbe46cecc2376f066b329dc31fd26d222de33cb3124fb497bd0b17109560a3856edf55e743f2b52cee4cf7347123d95f320ea8547b79e623b397a78b7d8f867dc5ae16a9d213bc8a520c16ad433588bd808d7c84e3cd4a934c4ccca7ebd7ddabfe52ca73acc931423ff2eaf6241abed320ed80275dceb770dbb42ff5723aa9c7164aaa313246bdfb446951f4126ce2286bee6e36da85bc577294ee438e51df2c8ec3b22d01ffcbb03a714c854982f10633f9408ae57ec4d91f9ce125a1faa29f1a3b94f06c173fa5a237e18d1870076cdf0bf2d6d214c013f3e278c67d1070b50854c2cc1ca8555f4ab5fd75d697645476ac99cfc7b38a41236de693b6e6cef5025b0558dfdf48ffbee381ef0569c6cea3d3a9417475994d21d068b7070d4001ada655cd984c6a0b0094c5aa02a50d67b02fac55314a0971a92b3d8a15506420e444bccc9b8d1f25d403cece1828d08e0c21bb6e5dcc784e4960b2e6ada18144093711f49a3ee0680daf9e665bf56882939190e91cba9a2382fd78d2def28bd3b48bf31c6209773ef58e43514b6c180264f7b106ad5c1f508ea14a26559da3157267b5f5b2fd65b1ccbd1737029817dfe858a20b526ebbc12c815da5050cdafdcf5f572d1b0cb044d25ec2248c6118a88bf24edf903030ab7fa50deb0545218d8884c8b8c3d33173c10b51789d53bec02a6e0b8c62bb93a745c617e0c31e0aae679cf4e309a8fa05e71219a9e76137a7045fc6877ac4d834622a158dd3397c468d29738a99c538abca7e9f0f28977acb0101884c200f184f43fab32a536e9274e718ac9bca45b5077d9cf3f3f15fbc26e2ccccc7a458ddc9f249ce6d7fce4ffd881c0d0f2d4be914918c70378702cc3bc0ebc6aebb733c34557502dcb5d579cbfc3936711dba3a77dc240bc3354e28a68ecb70d520d08ad2db570fd304d6e46318e3088070ebe12afea0d987daafb20607464fc3cb32c147720ff8c098467343a5df95d723f9607b90b8940dc29874fd7f35f6a95c92e4db4cc33c1090a1208458541f20bc63c1da7685cae250c215541afacf3be7dfea419772977998bd3a6d0a4cde8a092429d4c5f008daf65ef7997affa7a36ffde6e146d6b782cdb2b2df535e0c48484ad98972a831dd102bcf26a4bd54cdc3f17fa33f6fca89e6745afd08aefbe75585ccea8446c18f9fba9a6ca6a4b6508c8ccc5649823249462fd2c0c73f197ec834ce79ce21477df5fcb2c8e4048cb85b9d6d73487f69ec9399f6c0214892a7bb8490caed8d31b9acd8bc465a0d34311d4979173d2b82b8f2590ef8a283a5f72b6e7a7065409ac45c393b0939e9219276ae3a39ababb7da2c2b0f9aaa0150d9841cff68601ee66d2870883d4be36d68d128d4e02dbb6d06057dda9967c8d5ceda44cc547afe792af86c287dee2f976011c9302dedf47257a36927f3880496892a8a1d7b1503e2234c187a9bf34196d407884b1b4bb8b54c0aacae73354a6d19416c44c8264ec5dfc11adb7ec7bfa7aa4fc4c921f622c9311068961148349fc9c0e36104e0484bd4deca8d972f9e67122de41c1bf15fdc804fa6ba6086c986975748c1d3de3d4ab0bc416e1f35e57d636745450255758a68450744ec753a913058f4fe6cd75cbcf8d398d6bda2a842b0d172eaa391ccad695c94daf700eee897da5d49e235274576c2f7cbe4cb9236eeffec8b7f46b247c3e497e601f11eed2c09b6ffcbcaad3c7e425c7a66dcf87cd85cfa574654d82e7d4ab53c763f41f64d3248bfcc792d1dbdd6a5d479ff012a922fc9aaa858b714e93569ad64a673fda11e6b9b55b90a75dd1fe9210bd80869aefeaf700501660ca6d0909a473e7b9086aeba5c9a99fc77940973bd8de4cdc9c0b4c9bc581a6b787765beb3bc95830d0af8f7fbd7198f173cddee3d0ef990405b5d6abba94fc3e9fd170b1bc8ad505f0753cf7206261a19e8e974499f1177bf69369bfc2ba35d9640ce69c3d86d0c76b511055fb1cd4a107048c91c5bd6d6bb0a3cbc76495bdde966b3fa552e564e45200f3b7bf4a450f554c5b174bc2887dadbf2cee3303e7fd9d954432257da236f8a07259b33d124aa3b58a6b711f3925f0bed0a19ca6455a7d71dc6b3231036ee3108bfc27f9873397c348d5a8dcd3107da81a68562d79c783db95f3aebcf8ca6c0cc6ecb159479a7c7fd7c9053bbab392abd427465f1ec0967f51aefb9d13463da2208cf89000689d49939d7b6a96920671ac62f545b88a4fde05f5cd1a2049490805e1c5fe848cc1d7ae3c868605131370fbc7aa76cd4decd7b63e7888b1506be3f84fc2b7fb51e8e8d055be2b47680f3f0e9dec0f12a449dd62a0696dbe2c9ecc884ce2aa4f9e74b3dbba1f37e8ef8accbae19ae6b673fbb74210a01b95bdde63babc9935c0a7b7f4d9beb852cddad0faa962b58282491e15c162fe301c742cd1534ddf352e95f2ff63f39e83b119005c36df994cf5cdf908c8303d9aca2d1753bfdcd8b096b8e9b98a04031ee6bd06bc918c500b2aa550513b318fc2d55ce9b71d6e6431a76b8d4e00b83b1bdf1c470b984b3c0c3a15ce827fc9b16ce5912506d4429f056c1f4a0f3bb4d0cd82e5a69d564f95e5368aeb4ec8258e08b535126180ef8b4193fc21fa4c86b34d6661cc72d82d7d41637de943b3f3b034abb96c902f6113c23d723008bcbd926847789594c450bafaea40ceda73138b0244c30e52fd1e667f424f0c8e7af51ec2e0ca10006e1b364f2e55a0e5a7573cd757b89050d9fc51d6eecb801feebef821ea4dd2e8d8b212b584f9e4ac6411f7f35ebc275bf55cb2c7daa777de4c0748b0fbb1c9975d70dd33c38b5883d1cd6890ac171ea574f5916142f59dd660f0841ffa5dd1c80d7c7e4db7dd64ad6a12bcd205892ddd2ddfe12e04e272a462fdf10033986989700aff943b1d9c4575e07541b20b9a6f4d3d42f4a48b51cb15fc951865cbbeb8ac9812330418e9ffd5b31077021dfcd8d5441b4f5a6bcbd0eae94f64030e89e4b5f547586cec5cce736c16ac99e52ec65517ddd1d893aca9cc72150ae4b991308a473774ca4ae2266dbd7888b83b5c8ad0588d53d672e2996d2b7accbc82b02db28315a61336d1fbdd1b1685015acbb453d8f92a8c91b0232b51eb9d203421bb5794c9c32a69c34a075fd5f630a8116a19777641eabd77dcff9a7cdaede992be2e1ac52f04d80e3c3d9ac188768eeb92398004ecd9ef6c354c86ad6eac896def8b15205be480d42846081a71765027f3b513270af7c3ba1b307d80a57589dd06ffc5bd0ea7a5c5cdffe55f0f1b0b3335a1b51e1cbdaf348854500ca16d816aaae11517d71f3dc7486f0e28910c652982bdf3e473ca9b23fc0949468935af2745603812378dc247b60031623f108d557c1e0a3171e8ef8161a3f5e584d1f2a6f4da67262cedd3c70581a3a560350255359629212f5fa22dbf622859bc9b0a897df17226764b96830a9565ec8fe6188dc4e5f69a7d6f3d7009832e256982d13c57a1f182e930c07f45a0f7d2c1dc49fa509cda47038e76041c0b336766932e69e18cd9f4fcd199aa7981929d938153097011626eac993327fa4b4d0751824678638c0895057a122db778faef0b497732fb26644eca175397d4d25a7733c66278a577d9fd9180c2e430a93a982fe8220329e88b98495522714bcd2427be4b080f649a7c4355ea1dad93bb82fbea3bf1ccaf255f04f164ec1c5a0c92914043e8883b2a45e26b545adcefb2f23afc0b7d70661f8f8d07293e580c209d4ae34ec8a0f4e32415627f500918a01abb3a9662f7ae2ae52334b5888991b0486198c7bdac0bc22edbefaa7653f6350a3d015634877dc0d3d57cc147e0dc9ae410648ff26157d0e4cc2af2f6782768ddbc58d402f172b74b57bcb132c1b1e3ea041f665a4be3b75af8d99586751b6fa1fe89de328a0fb70e3051dcb458c73bd7523d1db5dcc3712f913f030ff544f1e611369ce6cbdaa5b5d64897b5d25b3d3df423c9928fe0bc3ccd452aa4ce53ec11b5002390387ade11b5d4246b9e232b96fbf4177bf629b8ffdd4227cfa788a7b28ebe55784b2339439dc723e43bbfc4b0ba50c74caa1017047552a4fbaa45d1e4cd3ccb6341a0c6fb2c7f1f8399f9f03790e7e51b45648e2e91042e442ecc5ccb66c16f35287bc772a857b1449334dc86e96b861686bfcc8d9be5b26f2bbbec94cfbd35ce3f7d7f1ce8d402ea6be47c4365aefb3f9d30f4980facc76cc9803e641a602316b307d92d2ea51d3577fbc61550c77aad761a6373a938291b17e2756f0945f86689d1eeba2e8c2d980afcfc9c9f6db392c4914dc580e648a5e7bf8d7d0b9dc8ce5be928ff2afb735383ece417b01bc1e0495be4c7a618407282afd8d08465f5f6d611de0bf4e13ab472629103b85bc95f5a7092e05670b04ce6ae4233c9bd1c7add54235cee69ec7529afc1dcc9f4b360beaf062e7533c818c218cfb8e011c9d43d5d4fb23985ad29deed30cc95c70e59aa45ab8aef3d127053d14015f66a6e03665559628b84936721609d5df252af313ef24efa21a529ef07e55dd6074bc524b11938c54ac73d7ab58ec3d8848b807da0223f649659a1542310fbfca936641e543de7d2de90bb2e532f2c5a35a6aa946581e74b79dc3a807cec7948ba8c61f5ee5ecf4e636a7b4eb7432d22fcd481277ccc5286d5d694e2b16d791f17016002e76c13fe8dd0f2e56a54d06af88cf729275cf09cfdd6bd882343193f20f0502c7ca9b947c86f09c5e0796e270b0365d041c78d1012e1d3476f69f7a97761af0b2598de96e3b53343d983f6b3b15e90b30869c80920fb05a7d53434dd03f2d4ac39f41386de41db1d9b9bf89d2fec9d7c5fcc94c329fcfbab03f76b071034debed2bef8f9e4a04644e2347eb3985d25dc6dbfdbbef02f79dfde51d7a87dcf0be52f71349169679dccea5fc1a7f56fc278e25ff7274d9d64bce682bc1c5e0cd6b20fa2f48df55587a83a7753fca4acc6fe44df2d098e4b38480fc96107fc1f21365383c31c6cbcaa4a8943960c9917b0f00a243472a7c668ebf37aba0adf17e76c2e6b4cde041eb913f05ce54895287b6d7280e6a103aacfa067a77208b519ca44096180ca188245a518e953e6cde5786347c6c94ca91690655dd42946503e3b8dedd7d77fabcca94404f4567ac038951e23467788d5b2571b31a748ca4595e7600e357853b0466ae58512b1e6ef913a81783edff99964f85570e13cab0309241fbff1fff02fc39bb79c5ed83683b5a24fa4ff0161b65be989c9403a37db47315d2e9fc4a88876757f1776aa9ccd284ade23605cbe7520781c12bd6e26d3e458ba79637d0766b8671f0cfff059961d71640dbe2e7a48c043ce9a8f7e43ca48f2ed0349528e446d3c1e9aedee0ba07224daa280fb9953d8d582330ca401d9982920f652655406e1cf9fa0078d147422020e53e4d04a962895938270f6e6653c83c49252b3c3a42c136c924ba16ea59fe0c0bbbe367aa25f01e397d4bdde211b6e13948ea4ac6ab6ee96624e4ddf9e7ab43200c51949d8610f38395212e2fa231cdb762ecefb3b75a8bb167a836b733a8b72aa160b604062199ae95df9cb73fadea72f564a0f7d4f546515d116341d8c16c658c5c149ccedc4ae2fe125dc2511c218e82ca5ca673ab08b0111542717b2c79495d56ad086e185db3c2c810f4abd8849dc82c47b6b4992a0d7967871cef8275f0562f84fd92407fe08c0ed5b976d793d5437d0e75427a592a4c82c45228577de11cacf6be620ff3965b758e3695308a27bb9307c46685efab1591206634a88862f4b67c1edb06dba0604213ba3eaf79231cacf786fa046fb3937fa670c9d9532625a1b4d5f6a2ddb379aef063c73fa1c8174c62d42dda0c549aee67ade6c3186406e7f73a213bbdb9a5707712564a586d8db33720fbffbcb9a0b740fa18b0f549a69c80b5552484ab017bf9360c1284964371e470d57235e569edbb0ef19e358daf5051d44619824980d3912638767310ac7e076482e61d1a0d891dcc1393930795588d1d1d11ce8507ef41ee36aa3edb26e2067190a4534160e68c785bda39ef526752514d7600ac798705fce1075634fcb96bcfeaa6419bef3ff5d8e3fa143cbd8972ee1925af76b2fbb126558c5fe2f9b256efa408a1e685972c8b63412f5fc29a730f77f89f839f0a157be9ec81d7135ff9cf22958fcc749a739186d48d26323422ce20e5614e25a6eb7b49fa79647936db939ef584ea67257993282f0cf9ce299782c75f44abc9074c269afa4699296bdd2faa0b0c9d1628b048943a83364568e57d55891a4139c6d39f40e850f4f4b6570c8a7846afa03d6b75c9d13d43ed1ee2daf029ceeff5d2b0335d0278267e99647f497f631f686629ee2494a50983932fc160b3cc6f444962047f06c1182eef8fb9efe2e0541a34bfa50e0c15d375d48e1cf2102def7b093e503f7607d868d689f2fac2eb194765fde57552f96d3a1b58962fdb3eb053d4076511d8b5d95a77ba4d098641f0d75311556e06fa3b22ef1402ce0fc6a21bac1c62ce8e9af8ef1abd9312d1d5afaa55c7434819db40e678f0f16c7725e5fc65aac77dbae6d47d5e2b183d661fb4717a2922d2f7230e0de8148b9cba3565bbdc9cd73cbb8c400acb26206e288e9c0070028e944d6e8bea93d65969b4a42ffa31b47a6a3e408877cc5c766631c3614842f3f534b87089881c5475ac4833cdd7b8f085056ef801c3456ed03a6b36ce62355d0629433ae811c0af77b7645fcca51ac91ac782b86026b32fcf27a63d6f671c883c325707de702158cd621612054548fa757e6d5f28113469db3acefe61927c6ed10b77e0491923d43c1cdd5f3103c5a28ea318bdc70f7a9258cfc8e696376f0c34c9b24853420d77185742199edffcb2dce69909340f5db954096221366abeb3b9ba06b57781bcbcd428c91d8684ab8a9efaca3cf33079abe6411a79fcbe24761d9dec396757c138f9961a65f28619b50ab48912ff8dcaae5c8693da4dba2e3fde53596a709e4c141abeb739ba66c173e0b99eb95d3adb58d7b86c6f9435c9c71077997764d28e2eff95d896c6cc730abe0777ac207e6d93f2e3901fa23b9396f54402ccdfa9559728c9890e6905c9d4e4381100c026de5c62611920fbd3da34302e327de085108cecae2c6507dde3a569b71502e2d185eab9919a007f9b624460dae03ed5c711386022774485bfc954d6c9706b966e5b3d04f9b8a9dbe85765a6d8aa82e6d21decec57482f1f7ab2fa6d01e1dc6082416f7e6e4756f7958a62131feb44dae67928de49cd43f006ab6fbe019f90c04118c997b0c42c479b59df4aa4e466a5d48d7eb6e7b0aeba915b01b6532783d4d137362a9779ab7bf577693d53bf147f9e01bf4ab9abd4d2411e33a27253d823d1ffa694eb9210d1efe17f4a68e37e25e61379be10ed08e108b41ae794a64f8f4831afdd95cc368f958dcba93567fc9cc0262c5fae5e26eeeafbb10fed29dcf3b97159948e0d4ff6ccb24a400d74bd257c2e018a6d829569ac707beba2fcb5f987bdda7ab492cec81c9c1f1397718a906da7c9fa80a8eb7c9871ba34985fd43c9c58df53de500c32200ae756dfd530126bbd48261a9ec800d4b728f0176dc9c20b7f89a24c22a5377dc6defe1222c8acbc132f97e23551d12e869f9e4af66da7edcedfbd3d01483694f544c048b5c61c8f120d9d2ec330b9e209c62c199869ae1917a732f51a1e6e054523a38f73cefc7c444f4e84aff145d757e7d487f993f2e09b9502b703a8131ae04a509e81e586808723770af381cacb284f60942c799f1806ed5c06d7277823cf99bb72ac21787894ffd2ffb025bdcafe152062ac3ae53fb2bbd789e5de05feeb3df8a6182f2a26ee69d2640f23bb159606fbb16460f8c087376ba61a3911a0b4c9e7d87b2265467b3da86ad3a123a60165265298a585fcbcd1d1716e35f3d52a049919100b274c3bdb509dd7c128a1331ba84df2a5df8d8d4b1427bcbf935d04eadf648ebada809ec00e65c6ff7be80a7c2c0039a9de8e9f35b38bfa2539f81a075be8f52beaf3329f60a31f44b7f02bdd4372a9eae07524adc925e0f1717b1b83c5b1cdd19cb665ec911f80c7e0d1255a7882a187b44dc1ddadb8929ca6dab77d0ba4c55879e33f8a1badd7298ae075bd33cfdb52e2cfa3860ddfd1e06d68de053011a0cdaa38341d6fe456b4371d312e820f595a506682f77cc77470d5e348cb4d7a227a97716b0896df3a357ceb0c03b6a7fd321af05ea6f67c0a9f3e43ae44e09ce98096565d81dec6538bbf518a739092c2e6868c514632583eee6b8590eef137a07a86fb182068cbc19d5d0e279607a8afed33cfc89b4fa4c0960b859ce15debfee235ff3ea8556eb2ee0bff57ddbb331e30b8af8ef270fa5fa267c9e2bd5b2b81fdec49ef644ca58e72b0cdeca96263156071df1f44223c861cd0fa7f5adddbf9c156f7dcbec81eb8772fd263a771a1d425bac4846e0e92c344d33ff784c8309ce22f3c0957c6a0b4ea58e434ee9bd14297f58442bf09c1922365512a06fa845503cbbffad20511d045e219cc4afa61aff9670fa9a7de94881818d941b3d8f6db9c13d322ef349ac7af4d1e232b86da47a9e12d886e719a9393ed29c699618e09e71424c004fdecf98999d403a4cf8f14db2608ae9db89666768da1b192e7f2b30a4d4aabc878ce13c4f65d05e36483f0f4c76b691bb4739c7e251513b2ca9db4f4026c3d0b8e2ee3da6495bf67e7651b47744143b8209258230447b44dec23609b0d461c669326a1a879818f84c2cc1f9a24b724e7ceb55e87a34a6fd9061d0c596c32627700a92ee3d8a13fc9f7515f7f79fd17960bc1da15d56d866d320fc6dd873704b046f4c07f6eb5025cf505eba414c227f217695735e6a759902156a2957727231d85a63240c6ad52a4cd4e5638055699b4af9309d03f3d5008b0453c735e836f7ca266300c01527c68806bdbceda8549af518f519783aceea80e7e88ec1b29905b8824d683fe0c5959e443df9c9578fc318cefc438b8cb9b77f398c2c7dfae72fef6f41df89b9bf195a2d1d247bf046767f17c80b199f2433e1f46f7002f019772211c3712cc3e1101b040e6175481af645acd74bf87751dfb932ee2530de03ac16f8bbd679a238af199654570e71c354dabeec1121acc5000d586eb9d911f35e2a47893fc92b774842acb678a6119ae2b5009ca85f72a7be79733ce5e2a5b8d777ed81d75a2a13b1ec24b649753fd03444b57f5c09fe2c727a2d9300ac4a40d32f8af266b6b6dea0cdec0b904ae24fef3d6b5dd7c25a07287cb6f5ae3260748f6f979c3273b373c6a8dab82e64262ddd085f3c6fb7ef305efe94fda2fbcd746d1bfe0612374c8365abc130934de3fd552103c4b50baa84ca8a9a9718ed193c12cdddbba37ec0bf74ea3fd1e68a262c12b8551a7d7b7e5a8558e41d19ae37f937d9f0db77c0cc4e3ccc2db9f84e9a550c64baa083c849c2ff2d07b157090593375a965102b4cf71829998aed946745849fab91e17e59182f787f351b552e7072b60c86d5f0aef1e7290ff93a23606875ed0a1507ed4770ccc6bebb753e679aa1759d6515ae38ff4bd99682e6d8ec28b834dedd86de26f016c18c10290a27b9ee0eb10cd10f4bc011bc56136ed1594a8849b89b304f72334c2ab1c37aba9b1da57b182fe397da00e6ad35a517fbbc16d059e0dd3f4fae4a7d2e148898859f56dcacf478d2cf0b11c799b9e9ddfd7689413203f25157e29b300c045c835c364cf00d52607a3e3ec1cdae07dd1cac702e11082f0cd39cdebbabb057a69a62944ec089d8db82e71d3983cdbf1331bbf3ff5c91967ffedb9259e4b1642995f8265fd81f6000ac8d2463e7b0d2192e480109d615b6994f2421c0cbb14d609418769525e03ab96fc10d4fc2dfa3b26ecc2382e65c945f634b9e2e176f7b1f047b0060d6615a63af20ba359b0eeb436ae6e6110bd167d5c5512bb98785d07e88d328f2ac58baf74bfe80c99d3c1d16679338a77bfa533a5830f84672e4bbe0820bd6a182b12f5206d54c06399b5808e5a548882527b701dad273b2e444e67f64c2e138cc5cf8625838ab589c7c45d9d73a79618b938f54636f8a0d8dbe808741fa2ae2a989ff09587a8bffcc117e1c745fb8679a5f17e08e1ba79f832dd8f539994e65daea0f6b0d16c098797e6d72c0802d931abdce0c7c8d11092a522d9c8a7de73e3d126b4a90f037ce8bc6e8dcaead20eb99e0f36a97596068361fbd112d866f8e4b7e3dafb37e784ec14d802ea5b78cd8663efc43412135e7e6a51b7652d403f0478f9e4896a836f510943a05255a2d5bfcdf83cf9cf249d52f7e29f196b13abc6a0a3e8fa1316335367fbbcdffd3485adca6711729049f4df187ab95b5aa587188855521b2d594288cc52ad524ccf6b4b48af9d49e7348a4919ecac1d5d8c10ead36855f17cd8679434fb3fe924fe68b8d3ab4fd93db5795258e1557c024442d5466d71a6e11468a4aaffa22d8513b3cb08048dd08addffd75d7ae688b009000336cbf570e63da925aa043bb5faa80f1809894e01848aa122ad59f3c3c62da4831bbe5bf68929cc98d61d16b05fa3bc30e3e657552dd46a3f040f81f39afef2a6d20061b07b073bef32f7018a670ad5ade9d691f3e530ef85b1c01b71c275de7330452c07802b431ade7444651c08b5aa1150f3f24e90637abdfc391bbb2115d540ea15e69b41ef7a08d791e00efc1e3b57caf6d13a825f225ed6f2815d61822f8cd442de095b016908de8ae04396da072490797d1a382ba31c1d49f6da256f96dc65804386d7c32f546efd3c432151a9f691387a0bc2fb642ef689ff5369daacc5d965236679eb0afb9bf40763b8495f3a38b6eea77125c3952fabe047e4ebcc01de974bf038bf8691cc62a66d3115a681ac75485913a833e42a7e9c03cf1279b5572361fadb8d21962b12e6aa0016c3baba275820f4fb2a204b75263e6531dcd1d92f4d904744f44d7ecf15a0c67b69f9900c58ed44b263a078894d1ef3dfeacecfc7cad066b87ec455391f751f42700f22c09f90b43de36065db4785e699d8ebad2b9d3a0445bdf933c8aa659d4ca55615011b14c306115bd9f20e1658c825a3bce6bc20ab218e9911e11283678b88df4024e319e7fcd20d1e6362793b216cd5053303e6b5deb20213e8aff7def616b266e635b11066e26ecbb2e1d4c5b2664ad9b24d5360d383bb1024b1d862797dd3630639685358c0a9b480f28beeb2629b6ebafd0e654f1a92729252c5a22895685a28cbc634473c2e8325b96059a5f2b72dec1dc133957e9f19a3c6f92fdd5334fec4202201502713e3c7befa0694661a57d017d64dfc0046ecd8bb1e7c7696c7962f73605f52cd0bf63a7cb01f3c87e8fc127142d4a85e6e24b21d87cbf53496edcb44ccf8999cbe99e64d5e9561f5c33e2aa26128762cf136e858d52f2a92aa9b862f05b5e351667bdfcfd0ae81fc82772d0a89ba91c3db77b1ce2ec46d68b8a11fa78998bf9244c8eb452ae2778aac5b2affdf57ca505fd051129d5d2f944fa6f85e1c1f071a1a66faf4bef859df6a6a62ef68e348c44ff1a98a437e621e2d8a92f20e9cfa75df842a1498a86d1b496bb6596b13fa8c985f2af7c4d7df824a4f282589cb6d3650ba6cd01fc63fd7f788f29d5ac6d91a80bdbe92d62131477d19bdb8c1203fa4122f31e450f9e9da82a4c0762537ccbf9c4119d8ce00f81d45a84aeee0c8dc1c8c33277844bee5ae33c77f21af17b0a7c6f0b9ebb604a6005c8c150a60958c6d136189bef5d3accdc1ebdbfb4584b9c051088fbc6dfe2b455852a2e6fa729c953cd3667a58a224caee8ec50585443e49c2b40cb64b7a2e9030a5abef946d8fac8ac4e74a1631df022a0cd66e6e055673280b19be1fa06ee5fa24370235db8dbfd9115827471a673aae4b7a62c179343bf3f3f5e0818bbf931f4dd21f2943111a326ddf129343c9d66f89e2a3b3896308c2587e05957d6697f3b603ff5c2f6c92f2bccec6c617462f9363fc228d47a5576e8146aedb8724548d5e571e03ac54a4f905af10830780dec98d7bfbc248726394cac0c048df53b4220e728d10281734b24d039b1aa88f6ab1ac46364a1537f3d63c28db64817bf78749b1944f695368c91ce8a746fabeea3f918854dcec55d8d3f3547a36b4dac664f08f389869ba4a5ad8bc2034a1cfc9de4aa8a64a0775a2a2d7fb4d6912eb5af20cbd451de1fc1dd420bfe4332aa682a25cf27789c260375aa4a47cbd013c7dd9aad4ce5010b94fdabec99de2c145e5b682a4c9dff7384c518379ebd5a2c96ed16f9b34bf1fa1bd9d5d26c662e64773a239bba33c9499a3d8fd664c56280e97e3187f241c21367c6e8a7ea93e0b9b07456acb17f69036eb4bba025e3191036a0955c7d2e360a0cb82ffd416d8d4b7de51fca85f794e2ef37cbdff19018e37752c0c734562f84c6df94ab1031b716aa19600d09b26c1efd15c5e4fbae95c5f299a9a560a14cbcb15380975eeef350b01de131cc565436c8c345f9e0eec9f659a40e8f4f2ec32949774238001efae4155398c27712b1ced596810b86e1d309bd84c5875a9259892949900a8bc9237f7f25e15211caf4424c75ba2548d63cde16ceb35ea0c86c2890131383dff7f2edad74b56449b700f072f29055de27968843fb685cec935cd90cf38ec34022e336ab8fe3d1a9153b7557b7dd281337f545411a841f3aff8eb275e96e1b9901751502d1c2d8f1dd68d158960f50a96ebd6db45054b9475925213cbe051c2ec14bf75c1e6e9435e40fd7c1a05853afd1969f6b535a709d00b7210b354145004b0fa7bacb87f9a0a647c75b6656d7f689826fb40e437793175f949e55768ce673d1ed291ff51c4f67463b97a96a94f38257f43162badccb4dca43514b652445fb249d9a05239cb72cb82e5b3a2eabdc63b1f21f7a0daccf7ec0db46c0b94bb8a08bdeea83f45be6d2744438566a003c4febb135397c9ddf0b736e29061e8fad91631b963af7b2bb0a28773c8fe40c6054eeadf895b10dd0d9160bcef23ba11fefe0d18169504a0cccc4fad087a3a6e4ecb06fbd285d9ea00851cc38487c96502694923986dd4f961edfb69262ce27c7f64577acf8ac54ab5ea13ab312042de54389b246748fe8114a299ba941c15d47ea8dc42830ba8d4aaf4c3a07b9a7295415ec367456f0f0682328b8c3da72e09530fdf13bb82b713ccf2ea90524eb9d2643bacc8da07cc959458cd93dfba87dcb3d1ef2fc7d6e622535a6e410de95eca8d8c673f656b6faaf83270f5687cda5dfc46ddaa0c7a42ef2c9ea51e512c753b18b1d89d5ef7dbce5afad5deb770a1e9c47475330d52d47b76a84cf2eb9b7ee96b1f59be5ef01b0b27105e159c45df992f44ddaa404a569a0737a694b201865194d9360f1b40b628d02f50deba63de2300a927594a1fcd77575d9bd6a84f0cf1dca282360ba74bc761078d6c0f7e4b5b61bf47b3dd2237da7b732017553f586010f90d5c5326e7b36db79bd8a0a9dcd86116e723afc1627e22e8c3dd567daac0007aafa05fe05f2afe21d97b1d69ad8a2d042b9ce0fd2314ecedd171d0e0964603c3c335f0cd946a1acd94f7227bef07a756d8e60f2d73f1988acc8c1f32b6a54e7547e77abaca896dbadc7f8d1ffc8839d2f0920f5359f347701918e864ad90c8a516b99a871ceff95206a29fa0f0908c8e4d1b91a8d6a3502b76ac6cd9d8a74dd5ae901fc9ea7aa7556836bfc64a6a9452505eedf8d25e583f4a54a38d4e84df4cb50c417f32fb1dc0093efb2607a3b1f619e70a1eca6415e673dc8ed0b440869afb1e95e7dadd91e5fa1f0cc54be0ccd69e60edc196f0394357040c76e8106b57404246a911359f6a5b93863cfd4b5bad7f01305a28bb8104d90ab403548645d0eae942664b9c22075d04198d92eb2cc64f6eb22d1e1d9707d43002ac68b46d029fe42f6b4b8a13963e90ca93bb255051dc11f9a2c0daabf982f323a3172280985b136d5237308ddb924521dbae97d44e8b6f7fff537c0fe54f216218c91895a31b9146cf902306d7848409bd2b5b37280ec914867edafb627e0538ad47d808b242b10c15a807802e967f481338b57d2248e0bceb85621a75fa398eaa0c94829ddd907de6acf4f0072fdce2d4bdc13c66875a5862d2974577e2ef55d7622163a6509491d71ea13abae531880ba20c9af3d1e476ff85cd86cbc93da25e3b45a5172bc9a56884d245953868356ee11099af3ca16fa9ccfc93645a8b34bc9f733eaa4da2241f11657c215bea392eb619d03b88f672d3e30b64ed52f5f441d0c4f14abc63ee91214f42b561087e459aeb665ee35bc0aa28bbe3397f0204426ee70f73154d618a2113666d4327026863f59729901740a233678fbb1aeeb4332e0f11bfb6546db25d5e8ec6ceac7d64eb33bd5de6b71239e8bcca4e26b7701f427beb98385c1425d28cae5d09beb28016a462cce17489930dee466300c0ef294d90e7860df930630df1b77686a5c68cbc222e5fae94498062f92d2c7bd201738e0c26b024b4a847bfc6fe6fcfcf2a6c13bfa5e7f65bbbff9e4deb59cd1747c88c1bf8d275aeccddedabc4d1654555e2ab50975be74f2cc3757785e5f8d168bc75d0e2e278b4e2da451609d23a593c5bd349b8eb23f735333d33be986538645803b985a423d099ef453392bceffc2831930833fd2419018d6e6c84f3526c1ad71b5e6d46e7e169f2984c5bba332692e07e2869e4572e84b97d5bcf942b5f2e26e778698c01738b4b9df8bd77b1ee2233f2dc352e647ed04d075694e4a9048666a927dc9e7847ea06cca3a0135e2437a3f948d272b8cd340dab377340187c8536c5943684b3059f4eb6447b07f1bb416e0908c0e8ed521fa051768580d473e02684c0d25a94cfaa955c88714d1643dd80d73d27e53d10655b029fb7e8197bf78ce7e01c9cfbc1439c0900d582ae80b481bdd315af68a6b71098f506e6318186be1215c3c5ca739efd5f86e4a554ff88149eaef14bbeacafdec3440ca3d19852147e3ed5a4a49d940ebb0f74ddfcb3d02beccd980f5445ed81de606b9e16e211dfe74510b575d83731ddba8a39c07ada3888599fbecfce8792d6c15f5f2996b6b196d4ccaec419b1b481a1a181bd2b1fd6572bed8097f0b533fbfde8c928dfd78c3cd2f74bb615b5dd8f71e259c6ceb5666e304976e8aa212350f4519aede9cc31e19fb6c289df50f9c33610b65d2cf3b5c7c8ef1e68c57f9f7f6ed0f5e717b1df4ada785f72c92af52286d4b49262adfda17edee550cc418fbc48ade2ff94f97d66b36ef4b284cc07a6880abfc37f4b15519ae31c8012c83d12206f9ed27417c6774f171481b08349ad5434cacdd08a7da38d35559d193485858fe47a14920fecc150c692d5e98ce6253f010c4d2c93ce94aeb7aac1edf40dd7f637eebac8e8d272613a625453fe63355fb5011597f888378722d5b61dbd58f0fcf4f24b0e0be40110059250356656b4b8d6e86bbc48c09c5f52b854f37700ff21b54bb0b8aa77cacb14a63df30a0c7b3fd7257b587d2ee57888c4478a1ece3789826bb7dba22a45d39f54bf08f755dee14a1cd9f1da31de61dd0e2924d9449210ac163d4fbf72e303d301558ff74eb597b43c74ed08c08ed6df1f3481053fb61667802d4e4465329c6134f94ef9913d1e1652105fab79df9dd8b35f6020b01201f1b58b4f519bfd8a4b367196e84ccbf74d6a8c0130b416454023d228ddb6a065078a9bc60cf28d2a2f0f0e5b1ceeddf05ba67b3e160c8d3004590bb6b9ad68b6f69bf38acaa11bd9f90dc28327a999175154a6f097c02d8aedc1a335da40da0a239d07ef046e62791b2d75269146d0ed3d3503f9e6b181985d9304b4c9f9df2324c476ead5047f9d5ce0bdb5a8441fece9185075792dc9026819e95f95979af2ed8a82875768dcf5972b19a9a21fa192b0aec0c5257085e34986910c5fd0cf511c47657054fee8d62122cb2d592ffc0d91cd71bb0eafaab7e79c9effca8ca22d6c508a37f853ffe5fc624aefbec844500af5c6ee1f04a842fcdc792f2c38e12235c52e6dc1913c71e9a543fdce90a835a673d2b420e14b2611c0354491d7de94613b15c5d20e1bbd5b3deac6911047b6e42c03fa2b1c6f05fd4b1c339f0eaa143697efdb395dfced628e11813f44d44c01182dc9171b54b24a5bb22a9d761619ccdf0beb0711e02fe15ba3171ce344bae35873d5adc1657634548cc32c236782227e1e2dd3d01e220398dbe936d38127925cfa5d973b62813ccb3a1f9c7e29139e6ad29ff3f95899dc7dadbc36337b61f3a40396973429aaa281a45bdabd9c849198dd30b5b5a52f6379c37176ab2023af6f05fbf399773b748c94877155e7c8537d89edea386cc529f7f31fcb51f30421802684f2237459ec5b9d92992fc565580a97b2a1e8736d984d7a02c4705e27ae56e130d9cbbbd5b5a3cc025e36b675f10e2b32765b0102ddce8d5a9fc493dba9bb040976f5b087f76008416f92bc2e17bbed8bc17933b2727bfec304d94ce7c8742e9624ce41bdcd379d5591bcd1e718aa1fb1bdf0c6376a5680f36ce7730fcc338530682cf9adac56005d69f614bffc26c7868decb98be4e52355730df29ca85a67de3173b4d446c01016021d550cf11c9bfb94e2ef9f1c28005ef6757e852d338c8df0117d2220b8f847edcb5f42a75813c5c926af84417779784ebf9c58b847202da6d79c75380498db6b7677cec6dc8f7c59a06b045fab9200d1614efe721573366d7b923ee1fb9c979603a167bf397841266e56977f4a52df7ed58fe39a6a95eb814fdc8c30e43e5a2f80940ccd13f45ca1a1219f26648b6011b406e236b3e7bdf73b2faf33a421bfc3f6ec870f13cd503b0d9ff1d1910dff277ceac747bb2150a5752fb6fcb38bd00e56640c5ccb0aace54023112a6c9520bf0a848e0295011e7bf20d251686c0393f8de277de38b160bf87c8ceec8b050946b2e71f25b82533facd5f784b5c24afa8720bad6541daf59cafb82b5b4a5769cd5b448a34908e7b8cb353a0c1c25fb7c7a3efd3bfedcab8bff77203f8d28c90894e2b7345b60b49cf32910693f619d7c688a53db6c69961a3dc5fb3768bc7a5f0eff01d260a408259a5eb107b8272814b89d5e5c6e57a697dfea850ee6e939e23fe5d67d1f5a7930b0c81e3d2589c54fb86ee71cf1a10725235dc668d69cd2246962203e5a94aacb5b248e991b621e43ce2743e460ed272281ee842be274beba32af8c399a88fb77bbd92a9b4e4fe39fbd76edb0aba54b4e36890a63b631ff66adacf2219d2d59af580eb331e065164e7741d6302c4c4da1abb9f690421cf0c7fc2309890fca9c68210224f73ebd8b6368d53c2b5494d4abea990c54708c0dafe8fda0ae98803ef3935963e58431f87e91249740f97376e0e1494c16e08069b457731a0e38e4e856647b867eae1a34df43aab087a6733eb81fe6b3c5454ac662bacbb07e2fedcf60baa6c5e4bd3b5f74b19beaed72fcdf23d4aede6e1ae82a0603b3c5ca1b08878fdcd71f638897792afbf997dfeca09911271d4853895c34464f1fb893c96e28757c59e545877980b24d1afb02078cab5fa34408eb88ec203817916b6a6a435be12748c241117d341d323ea3d6911a06a77e2f0c0854c2488220155d40f3f5516211e574f5a933448c03595f1be291a4e3ccde6c747dd104cf434d229cad91708cdd123d23bf7893d82afc496fe03f1ac60f6fbe5e5a8511f80a9d2bcb255d2c9cdc84683d51c14fcf5c63b18cdc55ec2db12883fc84cc3e3730f4db50c0188d42f0d457c31e5c4e852001fdb2346d1b8055648c9fa4c1635a64f6de9b9542d5465fad4a8f1a89bc0167c2fda7101a29ff818bffed34e1372972e5ca08c0fec5a50ac03192c793b7984d20941f40f021563e180ef526c3a0f1551d370eb129dbdbefc54a0b92c65dd37580a7793b88d1d36517ab223bf74594dc84193b74714f215e091efc35571a6bb7c39950906ba4cd78bf7e119d2b9698375fedcca948bcf787fabf0797b898f5bdcd875911933b7fe346c29d3f7560261ef0ab5115c1d7f4141f104680ff31c800e123f0710e8c1aa8f5eb07d65c54d7405c6d68294dc0853391c43480885332c06d9e72bcff6c9b2629ceb7e3fb9b54ee3ca5d582d6bcfa7f7b74314fc19911dcbe305a6b2b78ee635a528c5537685b0834bb1f64702b56e0160b22574d0fb55eedc2c741ae640c87f48aa8efc6fa7ccd9815857a5ec316d12ec7058d6b8099519c3c1db81a8893efc6cc4f9f9fbfb7281caac7a69045ee7502fb77a52363a79af03c1e9d6f854cfa35808b8f518b36b3ca656d28ed5eea471d878bb8a29fa0acfcc987994833c02e4ccf451c32354d6f403ae0eee6c3459bb81120e4091f5735506eec4799014321976c5b8c726898b9841cf7ea72d3628ad799436e7a72225a094759d46acb8f4692d2258bb584555897d76fdaf5feaa58bd329b6073742e4d5ff38f616a21b04d9f0368d68bb10cf3a9b301bb04877ed26c917d49a7e9791ff3ee4c130d2b0d0061d4d3e3222839bf557d371a92f1ebe9d1f6efc2faac971528453e0710b22fc693ac832689bb8b15a26c61c7f106a68435384a669507a532fd49327532b70d40c82144e777668d04e162372ab50d9169fffa4f348ce37ce0a7adda78d4d6994b459b2937eb65ead9f58a3deb506816c35d06474afa66470bd9c62b041ff2c2c9a366328a8ab27f49c2981fa987428d67e4d4171bbbac7f471066a9a2291f7f902f50cbe57c7826ff5fd777b7e727c7bf8407de13cc9e9c7a0275fd1684a2ee2d1b283693e8249925f53fe0d5429d9fdb31543237ed033c69a6f0d562beedaafa4e4a68a4a0269b88fddf101a3c49ab9bb83cd4c4079fa0ad62c01d090b41e287526a1d12bb5a53725a6d8fe21826eed9b2a8368cdf16f1774558fc65eb4ba6031550e1d2dc0032e642dcae3cda6f2b003f9985e78890295fade3d8935db1265b898740c0b0ad1d7fb4d67e2c7c14dccc4484a504f6372a29fd3bc99a14f35a85a14b0df0ee5b1f0c7a7853856c2290796572cbdd8f3f24497b6f14d33506c2136d71a72351a2375b609d4cf755f5598b2d557b6a093091a2dc2c2b65c5a50bdf80b72f99f2a17132f83c6506774f0dad1a52061bb03a539c103d57d20cbac34b027a6af0b52dd3776e80c288eaa222a94508b2f13dd959b209c0bfd22367feb5d5f2916d4dcf984c04b9fb0e80dd0dca8a1b22c391aaccd35b3e94c915462aca77fc32833fb9467c963f289047ba4d4e8e6cdbf47bed8313add3eb8ec5cc6472ecf44c90512bd4c9776775c5fe6d949b518917c5c93de700aa285be9c5e13014b558de88477c489654c9893fd7e40abc0d8bcca12bfbb25f669f4ab59d474a8e76e1af814c176571841f663f09351edb3780548ce80810cd1d3426f67f728ed3d3c69bdc2bcfa5de25374fdfad4521a5008e20e42c2d8152251981b65585464a54c91ab2671cab9011bcc4768d96717b1d0fb925ede40f9fa717ab2ddd125e682a1cc17afb397eb9645682797c4a1d55b77b4fb0ff40fdb5b1025d4f88de9381cf6552ea8237ad8f056444938584c6a56097ca7d52673b34e92d9b70925f37a7bf5739519f3fd2e07c6589ed9af82cf453b86dacc8fca885f32234bec2a721a603be12b43fee43d2bae6f16c1863915e00a13dd6b8aa512909ef3c2653224d0d023a0141d195318367f0ef9d55ca087d23a0fc7745551a5df8b40a8a66c753dcefdb81d0d9398084e42f1a91c41f1883bbdfec6408b62c5611e95b976da189728743917d27350204c01135972c42e2d69338f3b703022e1e1c1c440a6e2ba465ccaf55d416b4bd776f8cf1132a6d490e5ab4dc80f491f6ad14ad32017b897e8e7198b7ad707e0001f2eecf6679e393ab2c52f55ebcad078b8d1f7cdf49d3b71d69e774d43067f1bb338ceee01f75d055b27d7da37ffe36fb275fc9a7bacd88285e5735a48969f43a3b011527ee4fcd01c6ed7bb0dcef1bd599b08293a58883f2584468daf6e880153853c363a5e6dc4bea6642a6c27496fb4c64e44814ee1b832d6f0434bbfe70d624aae59985a2fdeb981317c54753c1cfac790c236e40f4be3aa90fcde64aa100bff0a8676edd2475f503f67586d55722f0416601ca87dc85a0517dc8c0391a506c87ffe515f40a5c042cec7fdc03d65a06303f6b022c57e51095ebc5c6cc02727951cfecdbbb41354feb3348de1723d710fa99add8a7834862e62986e7338d41411f29a887158a8ece6e83366b1f980808b7464ce516b7c8dbcc32275f79574ed0e52fe4791775b283adeffd444ef2365cb8ac2b5dec1242992d6dd1355a43998d784d5dd309f8d1330216b9c1d281f34f3b5dc45702671a832dd0f167554c0fd4ecf345f9bf79c687b44a54a678cabe359d81c91a092dc473a9fb320fca69a26c692b09d1c539ea8959a137578deb1456280b59b564d2261a6f81e67a8c887a9a0dae7e11a04b919da8814d26047347138f4739b6a4d40e19c0529a581751165da411dd0cdf80d4e5bb7fe7a3a78a15eda4d251c63e956b034a5d1aa361e530e32a4c37cc1471c62b5f1d05b6e781a79fe9acb179ead36e153a7fde7812b206cff2e41497016d1af95f575b56b2f2b41c72ff017ad8dc417a5d16b7844a5286c8b9c663e1885918db7f789e4c8d2d216fc0bd5fbb178407f365ca8e5ab1547dcdacd4d366cb4cddcfb143d35c09c086aa8f8c2b9bc963307b179247691ac69f24a91d33bd45bd4e11602c206740c0a83cf51c90db3e0f26c236d32048318ba04cafdfd5822c33c6ee137210f1cb4d2084370e245ba59ccfa1185db47c9779b718b82dfd4059a11588b4da356e92f5a249282d09fab6711e58c578bc21181d18817c3e70590a8e6ea9d721ee4377a67a738002dc17f6f10f5322a854464fa767667968096cadfd5a73a8cb13364283c609385dc901fb104d16df0467943282003db379a92457808ea541ea37ab65546474b2e4afa038d6b9ce24ee88fe2d8e46d7b5eb055e725da3f8de86e60b6682674a562fba64574107679cd132fc4106955db46c2ab172ca50b75ac861d4cafc43460d1b106bf7d1e69f509d828b053c1f77a8a3eb87bc01d93907e2004f96ca84f3e57c3189b89a1607e0f0e217e00c41a6f9c204359a69b32dbfdaff58e11e235edf3168a2ce9003e4082a2d5db63d6c4f815b163e360e7ea9f1c7c105636d444435bb3a6b1ed76ca68f6be321afcf8e45424713ed94a64c1e64c62d2d5ec0c25b463ec26e4996d3a2393e7f15cae8982bd17c0d595f70f051dd133bea3a337d7415d6dfbda5057a868d4d87ea03101e9939a87332da6573726cf0e7cbf45bd50d5fe31cba8e922f7d43aa25f7dcd47c88d84f0d156a430aabc8bfd1a986b74b76ffb90b0a85de3c57620bb5748e1461f46ffb84fba944393f68aca968c95978867f9531b7606117304ffa8b2152a3c84badf913f31195ca3f39711207726c0ef023024019fedc8f65b2015104fc4e06d856d95d1c5943b4f0bfa38d046b0300511289ceb5da6ae1e66e1dc05e648494f573ebc12281a74723025ec402aaf114cee666da8c0f73e90a9d8583b506b018c4258a721161cd522ca11357cbd9f57f3c6b27888561138731b1c79cc8f30bc6cc584cac52e04ba5ad799936e0c568b4e582a0e9003045ea8b58d20cb8f4049a91f15af6b4349b612ef334da4fe8f8391297e465ca4ab354dba99faa01818427896ca14126a5a2126e84781738f5ff60b832bfbee23a1c589a3c343f46966fb3d20b2e0888e5eb2041626168b4ac6ded28409da2e96610c2ca9f2bc72253f8123c49249eb9240341b4dd5c6b0ea36615f9604fdce4ef3c7fae565ae00a8c79af716e9f6b3fb2c576ddf85de88e00f279a55d45ac4a6f111af04afecb960667bfa357587417adcd5959fb5582597802b4985e2e7572e633c60f3f1e05e906d37a5462c95cf381bb59877bd6beb60d48aa7d8876673631fdd467a4b9bcdd1dc43056251abe6a7f1da0960279207708c1a9f3b91fa831f49d82bc0f9d8cf78e4f5efb8fc68177fe49c9b4c8953e83c44f1a02a8364755e36eb00e525a150bc0c0f7f47129db9229a632ac0576b4855c6a24bff6443ccf962dec39afab6dfe9a0fcbfa298d3c94e86ab140a3e67d5b905e24e1a9d0c751175cf0d79c377275759206a23955c7edfedd8e90d62663fe005dfcf89796c3d103c1f315ede9a053f9cafb9c87ddb97aff5d94455f3f283c6d494d9c73870d5150f78da9e228ef4cf6a82c9f62fff93aa8b5762619379a7b520ae888aca8a36bff7b080f89dc70214bb648ce9063056052d09ffd381224c85128574a958b9dcf43fe21230080aadfe8bb029eb48fb98a0cabab668ca540ce0952bdccaf3b4ff6ad146c0ddf81f7d7dd0f797e4198180aa726a0070f5fdce4035d09f364e539ec26f4627d8c2cb7b7bd1fa3094f10b6006067b1027d182e12c820c3096da5966b5871561ce5e0b60163b45ff53fde416be0aa230e8325b176c71b92189bc700d14c148ad78c3979bc2264ee238c213d2693688886541953abdef920a4bfe6272e65023ff60c31009d69b5a7fabf3a81787a336e2f20d38f6f22818923c909bbb243f1af9a8fff3dfbd5c131992d7fdf30ca6de92b97dcb5ada09f8501ef01e45a09f31501f1d495f120cfc87cd2a97f9ae02476ad3fe27b35073591e5743da153faba0337ec1e2ada2bd5ea1f8845bbd677b07cf71f41a29a100eae60a774e39726614dbad8bdfbbff317fd0e0992a70d6933bc73a8b7589e5cf05673db9848c5f855c9995a266d12365d27f0aeedef2d4ab5fbb1f5a123487a7417c5a387b704bf9bea0e2f3f0689a4ac7c92b9ecb6d8f4aa06a83c58623e9a108d9bcf17d6d62d116b6075dbaa4192fd7fe95bb46c7c81b6f5fb118e1d0dad945b75174748f8d34768c38e6564b81b2440d2a905866c6020552b54ecb9d98d25ff31416d4fa0ff8bf35c101a6a5c2429e2385316e146049f737dcd25deb28f040db198e073d6721fe4b575e62fa620e997bcf62276e44043d7c0092267ec06805f9605be16166f991c0745882a91d6ac876ff80a5d73566377e656cb459d93209940bfb1be56c16ba76f22ae758932e9340bee33d96b03f20c192368c5f94ff61f16f9cdeed47ef3bed6f96102fbfa366c2a966d7b60970a3b8e043002808b0659e6ead08f208923225f24e994d0b02d5c4a98b95e36357eb03fca7a1a34a69485829cca793f6a03499d12db4495690afcf8a0a6b9cc8ce7051a6d00c1300be3d6e2aecc09b1921d888e72d83080814f71c3e4a136f76798f40a920e8b6405ac31b91aaa1cec3fb66c3fdfb9003c0ac9c62710dcc115a85d8005e844c1ac065aada77931852da77418400a0c525570836b5368f6c95f4d7af8dc34f18bae9254a10035cedc226d226f32f13a68e26da6e42fe775056e5e2cdca192fd430c23c3d4dc7d0185e58af25dcee32972e03349da37b6f20bcedfad80c839a0e4c336ccd39176d2ff6d43283172570080635d8aa4533736a94de29e8f35e247752f9aaed80475a5f23db350cf48344a636ff834b4e01cfcd5acdee328fef8d6a4862cf2b814f01cbe8d52d7bc30b04244333677fa6e20e6613fa029060d4dc7ce4a2eb460bb7248865f089f83e42926969f813f93f26e3f1954b71df2e666802b2b7db3648779dee431557ac01b23301778e89a80c2d2d216a2ab8e6d493bb35194c451ce887424ab7aaa36a7cf247221c13a18b35c138d757787d328fb69cdd3fdf99e84dbf904db539b5cd6f1234c5159f30f60fe7b31a5306f34059b0e905cce7b7ef53173686de7efb199dffda46b7cd4b5d5428482e42f72029c96bfb89fb729fb69f16d9c8f624ff8d5fe9ae4a29ed44d4a951b4f8b1f41bf04b030c7bcc04ca1ea5f47ef06e2782ceb668abcdeb157b67246240148b65eed9ef318fe97bfea9b37141f0dcaa26a52cad93e6d383db8ffcc7e3e9f861b78a112aceab0212d50c058deded34b4e290afdbf50cb9707ba969c7de1aeaee424effbd6a1729fc291f3890886ba567d348499ef773df24c74f27b65e05ad2088820984e5759aeca1b233a6d47de732177714961eb2ba55870ffc92c1ed8c83f648083c504ba89159a28a01ad1b556a7bc154b08ebff694106a39fbb1048562326a6724eda523dcac8d4df8f30d4187bf3fbaa04927fcd41b2fddea5ec51bb08f0cbe739adde6db4d5f3926b4ac999570030f4777682e90a0606c4741754c3a42f59c6721af8934c5e1cd48474b1809e4cc5aec20abad80c115984c73fca33ab6f9841a68eae5881b53da1d84d1e3c2b8b03f6e83ad5aa931efed09ebcd34a9d2aa02e3ff80c9311d756917f6c49cefb000643e8806ceaa4ef263e314d0c29f5a5edbc567de74c07ea2b65eb34592e18a1f06254d1d027200616aaed42601e9a69d6b1bf4f72f6c2363c27c9fa80aa36a16f76c5a02e06d8ecaca74f65dddf0ca57aeaa8ccd7c22991a627a369acff9bbca8077e55939b9bdf35d1cbdc32aae4fc19ed869b9799117a612905b400f030bc6fb1ef6e5d5252aa40df7c1352e393b1eb92fc6a271223978e56f2eda8e4e1bbb8e5f092cb59653875bc22f98b76d6bcba3a3509e7db124419c816d1298e3eab93c3320b726e01e9047b0e7ae5b9fb05cc040fc28ed9ce8656669503322cc315ab6dc7d457aba7c7bf7aebe744f5987a65ae4a5b8a716d039b059614e3332794130b9e85a79ae4d3b02b035c03bdf40af95095eb1354dba8b0b3bad9ccc5b3892faba9c4c7cccdfe4f2912d8ede214827300992a105362c0ed5feb1c954cb3691dac539a52d85f535dafeb38ee13fbae4df7f6369b72324b0cacc921167f4ca95a7a0c2f46139433798ae4837a9c2514534bc707ea7a8662db2c7e9297c0bfd2479f03cb0f64bfffc68ed30e68e853316d2c35429c657028b6356262428708fbdbc9b228addc58119999b1823afd1c1b8c44583b52762c3bbeef0cc9a56b9def4500a2f8189747911615ac7edf6b2bd2c8e11770291bfe6afc6d9b2f63ef3360679c4128bce5e58af5f7ff4d5734d362f9e8ee40031c0113fe1be82c31451bc9298dd1a3e3da88a33d9d675cd9329fd2a23add66ab98c6888a6455c5093cc6ae57e027a62878ef20c410f09680ba1debdce234fd076b54dc6a4d7bffd788610a4d46c818c1236fe0716cf9ecf068c3b06908bc32e7d518234a7a1a01b8f88d58538acb30861e37a7fd18f9508c36fc653aab9b9d4ed26f92fa790f80a5bd0654dad9ed78788d91b8779f1743e0c9d0dda5a700915636bb8307bda7e0f7f419ffea4f879c0cce79344b99fb190d774a5464ffe203645289530097536df62d465d66d116b978bf091988db917492bd2319e828100f2b072fe0ae350b132175bf008a02d6354df930cac82f49bdc022cc9b5ac057109561dfdc5093d311dc605714467f918fcc212df86f95ddc5db711ab5d3c33f21bc84b7ef236dc561b960763a865f9509e0b62b3da0e3dace835bdb942776eb6c3c199ed87488b719cd9c27dee36ede5d3abc685ca6f46cb3e60332b8c91a8ba9722bbf8d88adf88cc07a34ff131234dcfd1353b413f3778fb4f756ddfc31a8f8f0e22d11e9ca2ca66e35a3d33731527e5f2a7aa391e98e9c6b3b0be2634a9c6c015ac6cfb2782cb156a1487041b8c4767351549d20b56e8eeef36c43416e46c9a798122cce2d0e33ce9633ad49932c0ad5f66c93b1456aee97b344e0df085120a4600fdeb9c03f5ea0e80166a801a50acdd0883bfd88a792a1e7827f18f7bdd2764416bd3a2651c548c9deba76488a456787ab1af83b8dcb1d7eaea0f5573566f1913909f51debafbcf9df4af49b29755a5c943daf9e7ae246cbf679fe7b19e28bcc646b804ad0f7c71983d91fbf25bd7d15767fd1e83846c7d4a7508080ae95721001a0c162835feecae164d1fc242b9de5e14981f68ef575b75709456219626f4c391110d0777c456d1cef3a2af04d3fb2f4ecdae7550e0588864efe67f106d9693ee6d273c731461134032d4909602df35b7d4cf5bf83c5d55869b84941e0f65541e04ee89ecde5a6e8808d2fc9b958786181c7c2a1bbcd91be75f461bebe7f51ddb6b95675644f40f9efb5fca78c447a7ee063a7b0c457bbf52bbccce43868487f742f4270fcdf66211f1071b7ed5dda14cefd32bcbd198c457cb588d0296b3a7ee3eb6581192e67ef7c496d4c0bea2bfceff1fd7b5d6f28721faecd82e041ea05ba3af97ebcd0dda21addc3bfa23a1808fb2a5b966775fd92c3eab70621e2017cf5d7fc78c98ff8a15c7b7d169d2db3e03b1e553843f3de2dacdfc90739d901eb6d4a117b86dc90ad0529caef2aa4480097ed0ebf8d4adec5383f22e020dedd48e164eee29db1cca0a1a59c769ab9e7a1fe2e72b3f41f936bba84f9df7bd138388af31c4d6471af86fdd47f0b47311c6494796f55ac2eec06e3efd99991159d9f9f3f08ee4b09fa3cd4f15bc819142f030c5ab5e4d1dc006a0b854ecb7c8444b9b0acd1f7033e9a07cfd2a66a78e8c6f883178a774716de465bba1022309b66bf8391bf53389f560da1fe1d5fd2ccd376ad8205e09e9a655861cec29f8415ceacd5167dc7ed52cadbcb090ebe142c6bfd255f5565a0a113cd429f43cdf88cd28935e315024333bc70f7c525a42f899af1dc9da86b4caf5676e06af443f98d25436ebdd3e39bf5a7d4f9e47274fca7c469eb8eac8e2e6f818f701381edd1307f8f484726a313e00c3946872d6e45873aa556baecb63bdd576e023498a2342070eb00867f276821244fdba0ea05130541b851958cf91e5999d25b6e0b0d8b431be66ab3003823b446ed3a49d176386af6cba376f30b2895d49d5e3108b229d41bdba21e8951386ae382dc5704d8e3593292cceeb51f5ea461a85c28fa004c6f6b02acc12c657fee10bd846c325920a254b334771ff6c7f147c1657e7a77bed386b57d5fe492fece6d327900a98d2eb5d18f16746fd48243e3337942d3baeb94f3087d96c03cb9032c06f757b7c0ed41b0d6f92fc2a1114be4ef75d4646087ac8f29298ae649b42810161e272c127a6ab5da579e211d77467028a509e895be537e6d1dc5fae5dbab3f6d400c1407f4bcb9836c3521daf3082c5df8f17f49ae13577d7545da902f8d9110111c29f3dac0d4366b05e60fe089a28684949641ec07d68dea0499dee94d9447c4fb15cc23264a7d207112ad56b8d33585ef1f00e57cc2a25b2b1d601eef83c43ffdb1d046d20e1ef7903a62100f1708e5713159a0a91f9e6558cffa784f38982495301504b2f5f1c40fccf526c9b19d2d1c7bc19c46fb547d932acc7f59e00671575968953b6227502e3b5812b7747536310e65bc8b4d0c003d542e29d36545d78761095b985790dae349611a44c6b5edeebb4ff442fa05e352dd580097976da0ccecb7eb9a47ede6930667e0b9673a4ea1b5b91618b6f471aa6f4fd6e51b78459ce45ef2342e6b43494f262791913e4f64c7e749ed45b675621019e18cc85d098957ef6d5f625b79a0158f66f7207e80665f07e76635acc2b93912d349245859fe77d128181d94cbc677dc36351e879dd77717459d8d30cdad1fd921c98ede4af3a15135bceabe437271a0536d85f30cc05a7d2bc24c49e464bd2294e4b474cfd571ce6432eae0b47cfdf1a777352255b6506f6b37ed819aff6467d26c27e86f5b5fbd8a34a66f5276e4d0a4d750451df5221ee1864a78b74c8050dd89a01a7e8c8e57dcd67e0fb5ff5c2c3ee021e2fd8763914f64b98768a4d994ba44cf45c10efa0da917362848535286e7dfd2f0d93429608d7a02e5c2d3288706daae18b5e471966bd0e7f370ca39b23e74292dcb2f70cb6627aee1b0177f8499823e028e6e0262282ed44bcb2e8fc9ed811150fbe1a39bed23931b1d9e71061061d0bd1088598caa429f4cd44c67c9fd3103b0b8246b54e600b604a06ed6c486c6b5f4d8c4132418ba53cbd0d8fe9112f5c4b396233d4cace748d63dbad77bac94b259dd6a5bf68e04d0d7acd921acce7222e06d0ec2e9b80c9799a4b5c348b74c540f579de462adb7debe103161ee91fe4f6578c27d0cfaed895b1cfb216567f496a6c2769d0b44ee7b873af587f2500d89bfbd981a4e16d5c12ee783074c8459612226efa55f50f01f162f504591ed11148601dd145cb9ca64687bc2a742534cdbbe346206304317d6629fa4dcd9695a9300d9de1ee403d6df46a3d76a69394e198c57b66d3da45b790a9ae8896ca3712d4900c221ed0327673f5f1bd61c2f150fd0f76898b8f3f103af72aae9df60a90c9856f5917aa09a13ee6386516b599fb34f8c14b160f3a41ce13cf61a8b429ae1013e27b822cda90a84cfa7567b528713ffef69a132592d54e652adb9072df2897c361b09163e958fdab84f01037c9b6a6bdbad81df59aa765f2c05e6614df56212aca907159fd08baf899a3c4947935b92ab6eab598ae1abcf58dffef02e051dd0f37f96e3a6dd8d97766c9aee53dd38e9c83ec69b3127880565b9884aaf1cd53b2cea1cf43e9f02968e9b0e9ab1b7b7da5c9cbbdeee7f534b8b6b1bd49f0ce0ae5b9afb9fa7620f1f5817c36adb6c174b1b6359bc33f49bd9fc5eb1775c52b2ccc76256a2df852b95f2bcebe0617b172153e3b61fdbc8ae1940964d448fd39a56289121e0fb99a9594799129a4d7a5d09fc73d0d56e413e804d69ce721011a9fbdb74c017ac878092dbb0e9aaa4a1edd518fe037019af872fbee72e80a5718553898eb0f2ef906e695c128ae2d4145b003949ab948be3d88a05cfbe7278a3fdd860eca3822d54fada722ea981013b9fcb4b9b5d417b4012ebd4e6c5762803677dca7e8855aefe48953518a171d45d00100676b17b50f2b8c56c7d0df926e632094e28aaced7ce106e859c3be20d116409b854a0429ee0a868cca17897d7419ce21fc0ad1b8c1c6d8ca5b093538ef417481d26a8fcdf81827d91870e46b1397bed32f94d3e71880234e32dc43a227f31a28338f78ab17a5eb41ccbd49a4194765727cf1eda2a769e92a2d2836e4c8fcc4837db5208ae68a95b06e7483ad2e395afd317afdcfb84fd15bbb7fc32debac2cd5f64134a2ea14986fbb7c26b21482e4b6739e187a94a2f46dc67eb059d6b4bb5ce083f3cd53f870324696bbd4ecda62a2ba59125d83a793fcdf0c0f03eea4e54499f6a0b77127de6096385c976b3a923d00fb8b2b3ef236bbcff9e76fe6c5f82e7a5029cfa7321a8f19c4e57c57afcfd7960d3fbddc0714642c5c7c02d578129c8e3e1122c50707d3553ee0487c031936c5a1939ca8323234f16a9d15a812e6e73de82c659c1edad386c0d9082f4092f9534ee77fc8f50204b600b1d7236956a5855766cc38d647cfa275d086a65700133125f09b9c605ee1a60a6c8f7012e0c5c364bfa2c496f00fa3aa6920126390792117badd3e725aa2c92ea1cbc4bf8c266b1b580f340af379e21262ac8ce14783abc0ce234bc37a8d64a8c9902144170a4b57df367f6a70c5b794a64f02b2aa1086231ecff41fcb15455a6609a21037585606ed30b9b3f9ac3f5a34f3bdcaf88586ae680758ea0f8cb680e7860362b86967435d72b9ffdd3216b577c459b690e44e8df6fb1d03a25023cd7dd8ca142e40d9770d32f8301a774c524bf49926c2e3ae84a00ae385338ae4d05356ecb077db9f4d72329ffa7ff2ad1e2441aa5ab12f189d030bac2f816ab13cc516bc0ec142b7d0f432ab00b8828233065c6ebd1b7c67753c860dd348249653ee63a86f81508d289a70307b09c8e92a25d4a86d6209a27ea19afd814cbfb6167bcb59ab39299b7c5f92f6de6637d1ada168bd87006d882163684755ad397e8f819a8cfc590ddd1c709976fd3d935824044f5de66fc781ab07e9f5e9fb8420271ad3ff9a19c9501773202d257d30cf247c0b2755df748ef2f12125a664c2da4a1ff96febda7573f1679679f98fbf7b4b78b322a4b117fac0fa9939400af386a75f72e495512081530cb1ff14b0e4030603eae6ff2530d5b2396e5b97ae29df816e7efbbb5b646fa4d194ea389f8f457b329e6762c61929e24cc3947700e98f7be898fc13bd13e69e3ef9cc54da2d07de16303cff67574cf10e81b5449b312ddd2746ffcc452c85e09948ad0afe3bf72f3cf474d76a9185cf7a36ec5929dd7ae0f884e401dbb758959b66be0d482e72fb51bef69394597985a13a137f48c80a0e53adc84040789ad6a204c049b1522dd5c0524a41973b71b169f3ffe4849d350c0402fa1a65193b4afb89a78d31b941c220d3287b5f2049a4ed1313183206199dfb54cfb6ced5cef656598a11a4e00baf52aa6db911830c95a4873e21670e626cbcdcf77c827378797d18e38c43db8660591562aee1a83a18fcb686e6a9bcd29f2b65267eb72cf5b6b0757e6f8c56928bf1d80e031cf45c169df1679d96994da1d3693010e999ec2673199fb9eb63f960063b222c96e0dad7193254db1f077e49656283d5f25be29203089e7c61ed62f0a962f24de8201cc81e61628c66e920e89f9c26c07bd5697da1a3b01db93959a16acabfa31afdd64f9c4023c1d532f423bbd815c6627381e24c040ab87accec01416e21c61abbb502f8e15c368732dbe7cc553f2c57aaa550ad52bec9c3cda2ee6118ad34e3317c20b2cf8841523ce76a79bce4c2d4dbf512634057c4ee3c81fcd060d8a745ab263da2dae5f38162e668a3e1243bb4166f5062c8a24542d871bfccf42423c668a888b8a4d5041fe22a6b195cc0c4483565b38aa10fb3771ad5c01aff79a367e801b53919e2acdd24ce666e7d596d91d1b98eed05cbc92f2ec5d25634728ce8451c95824c34ac44a120af09e484aac0fa93ad0b78389fbc4033187513875f7551a0903fa425e62a518abe3e5c28a3d8007f23e1f6839c55dd394c44b88af5c43246052fc37c21af2eb50c0729ad3918a5062e260a33354fea36d379d6713a618807182375b5ec8b4bfc3d4e512378e82f825280fd02d1561a8eb44c01fb33c69782dd4192c8bfd1c4d0a284635077b300211e477c2ed3a794bb4e727c0bf62c430ea5264b3c6aa84560dc6fbe2abcf17101f0b06a30b7049d8899489032c0470f549606f7f427ebd89e8be2b7f4051966e235946dc011512c78a48a4080ae00717006af4abbfe32d581d9fbceec934239e1e0534ff65886ddd7afb64b705efea9c1186348c81980c73612aa82ae56be3e4d9d13a3e45effc5fec8381712e5a5b7fca6b6b5cb0ca48032f62fe75ac2106ecba9d407423e041fe9d58c951a95b39be90d8a18c1e728a1f0fcb97c3969b07d58e97ad8b38b8e73e7b013c6327b71dc5e618d00db9a5e4877dbeca019cc5b6a0527fa0884cd1411f89aa71040ebb21a6e89643e64a0f64b3593c6d5ed484cce0958f8be45b6dde4aa8d6c7083101ad92d9bab216a93290c8d914c1d6c51149a5b19058615c89eac4c86719f78fec8c3ace678e9be5ac2fbb5550f40750fac941a14428cfac590c77e70e0f61bb7a11211404aab817ca8bc375a1fac588fa637c2aa76f76589a5eb2616bb2986e4c94d73fe3f97350e8acff3ad4bf14874fe5f562d5b9999fb6b1803913e7bc85ce75e3748fc0beecbde1c7bf17643c661042ae6bd646802f346e94169236e2a9d41b5d73bacba67f69f7f93c00f6c1781faec85f99ad47a6f133164572b97765160cc1a424fe98cb4c03416dc461dd137b165da79ce04456d0e7da755a8157f612e52471f04a3cdb4ab9c55332e629bd04cd93fce7b8ac00432f4330cee80b6d7583f8318bce3f939ccfc387f31d6b750ca0861a07fa405feed69acca40103b5059beee1f2ee796e20c9cd00a111ad4ef6dbfb7a85ff194c1f7ec19f67af5a9e4a82e6d3880e052bb340761a8e7d75e03892a58de64d6d3acb3991a445656a92e3f337312cc3952bc0ab6551651282e9a536fddd8270a8e0dccfb19cbfc363e178a684cc344be93e33cf2f072e8fbb9ed5f32492ed4f0335ce2d1a9a7548b8d00e08d5afb29607a9087118d094479cfd12dced316e703d6cb7a8d3b0e4b46f4af3e9dd39b96e46532b4355e50c216bbb184d215eef58ce6e760242885d5bb017ba05590a8b72b3cf610f1b2caad7f16540c032ab3a37c927949d3aa5fb3777382a7949dd115c9d3ad70c9894c708009edc08bbc9a83684646bdc39bc1ac32f2f9ebc67e2574db71bae899a9a9848d4b23905b79835571bbdfd971ce4e633766ac56f09a6eb8fcfe18dfb9e4ef4363e6e70388165026b3e5a4590e63aa4316068ba70304ef7964f14f5a4021e07c6d2e6ddaab1523f840ff86111a2db0edad96a140a00435ad8cf425358d887b8aa935c1a18674471c97f87017f3dc37e6965a86887718557a8b39a6b50f5c90d190a4a304e8bee752952b5a48c468f5d99f5bb1fdf69b90075adb85d96031b9a10881aa9e59715c055b8636e43e391728785f1488456e1a4c419f93a042dd2c980425bc7c75e8de269008b9cdd1f7ceb8c1e7a5747708cf7a4f9266f98cc6b18af52aeb98c0d4bfb88612821f70416176681672b69d338f760e55b407ca354bce60cf04a839a83c6625fe526c5a8be663ec8bc64c1165f2b6be9c916aaf2ea88f41e2ca6568dedd9238596ad151e4b6e51c33f1bc16832c9890ae588e437cf93062eb72dbf376589d2c9685227595331fc76b41c3bd41e208a2aec9469d0e58ab4771e40405ab3fb74b538a20e10b9e3448e5edbec8e3b85b6b8cbcd1d9aeb8375bd719829e91534435fc4573365014b19e7efc396686083b785dc8d44054e310c4fa30f8cc2d49ed2452c3b5d5bd9d2d3d63e651e3f48adc186df6f90a0723c7ae1bb7334822caa76cdb46197b524f2689956e49938b630761a35aee2544f24941ccf565f1f4fec1bfe4d39c8b76afcc801141f3da948d5c8e651dcf1ac7c657ccbddf74bbbb68349ea86368660fd242023a3b1bee7a06cba44801b7f904821fff41c64eddf47a589765dceb8230b07917ce41d4520ca6238eb37576f2f89d971f445b516cd47908c564112f17acc0037e6b60e0bd6aa95305ec2bbec5f69af61522698043853a4184e9a3163acd8db459cd25e470a4624465bc4107f3bf7081d2d7be1cdf4c6e5a24ffdffc0f16da00478962eb4b2fad81c1fcbb9d789497efd8a2ca8c0f904ccd5485d6f9dcc1375de42b9e676beabeb0a32936240ab6c732777b92914390a171e4276ba35c042e69bbc64f67ce4b3e69da63493697217946401cd9e980ad934a13a51cef22189a8e8c70ff1fe210fe690e2d68c3114337b6d1c05b900a37e33acf67065b3e22deec06e94cf0e195a5e4322ab48665737311fee5e3785152b278c497bac7b95674902fe7faf7facc575477bcadd8e4aadec39a052531bf7c13a42d4dc0e1e70aa1eea5d0e40051de08f9aaafc928ecfc3f6b91732835818a41018f5488b43ca5b6124625cf97c1488e8b06f1075e90e88f96708a41d807a0a2321902515a9dd92b487ef2ab418ab2f7c8718e40156f64a0066683a3856aa68f0d6d442046cb3a3ce254ed9c35628d0553a37bf5e7248a6f544556a5a4ba8d016a44e5ec8865d95f7231c5a9d4b741af5f4ea553cc769f2bf70b45ff8e3c8f7260042f0581db33efb34ed82f36be9db3406b84d7b926536f94a531f41c4ea9cf44b3cbb17eab0e938b31051357183b272dbac51c7c433b87744d7a343f77e11a40faacc07aa9598562a6bdfcb02518820f38f3be0fa1882cc3f9eec9606660468f153ce27ae12435af6e8574a2a19bfa962444c4ae0f884f95f4e3e19b20046b0e87999f2b0c209e5ea7bb30ba995a591491fb6e3d8f64311b5dfb2a54f88815e470a64e1112b4a7970ff3d12d421ccd7f56e0ca52dd4d7d7a02b22dd3995253a200e029b5247154a4b816fab80ac7d85defeecace98980fdcdb8f1f82cb965874af5173a1fc1286ebf1b940bec4f4d70b4fcee1f32e11fb6bb6c5ff62fcaddd1061b0bcbab81a7a48fd8032429de06edcb1b7d11a665a0f2acd22ae371458de412048fc611a39fb224a8f4dc976f95e00115f95d25664857be20eb6e8deaf50ec05f82b8a2dcf9941414d660e2fb82eb83b909db5c433c664972d1ce9a45d2e6fdb68bc06322694b08e7bfc2032fddd8e698f9ad567ecd559cee4844449394b3e06ea00b058ec3ce7dc9b03473eb09ebe1c0afe1c6d7c6869d901f3140aea9bd88bc1a3befdc497e9a3f8b8d9fe8fef7d7da7f61f2149fa9370f9ccbff2b39d02aa73a393e094d1966b5ee92e73890906803ee7aa11c9d2831b0f6ad3a5396ddb4fedd0796b89ec4484084c21e8e5b3cdd5418ddd634b535e9037b5b426fbc6976677cbca7b18e1de789b3c7b055ad4f5aa3a08bd05422d37b2407a5f5eb6ffd8e387096100351266a1d9f6d22611dd0853a8d81c7120f55d82d41fafe9f9abb6d8c8e668d705404b071ba7eb5a6e7666019adda81e6aaf64241574c4f8baa3be11497ba8884eb8bbb38bc6677f3d3eae359a69cc2800fee3d7e48a467dd5e5b096e045488dc05cb47a560d341e77482728e206b8cad66f0a220293746f4d077d1677b543a431a6e6d9b944ddbec3d35604780023a9f355adf269a4c190e60d7dd68a029647e1aa3de0ca65db2e952f8de7a0283b0cd7eb8d2a8380f2004d56f4524793c6e0259298608be377fc9a7ceda5b8492a2e368c6a6e3281e7aa23989e10df5246e0fde4c6e44a4a6b34355b189fc33556210659bb9ad3f3e6c0385066f4ae30771b422de40337f99f784e3b24dee419b24f83797c61b4f56e5ce4fa80e26c12dd9d575417db12cb380ed93c9cab1cfce5d633bfbdd56949b3f86921cc432a5c82e5cd7fe715f71ab8861bbc73919a44d8bef61c946830847cfd72d0abd8f73771eabd638ad2fdbf569b9b2b5830c66d97f74af9d2b5ab7c217b0ba520a97a847feb70172d018078d9c8222efeca10feb93cef09e7d69211974db156fe058859315155a4a8aed391e54d98fcd9061a10b74b539275dc5c9dba7af920c73d08c0346e2e42317ec87bd05ffd8dd953f309c4db69c274be457043a7f05263f091a87b052eefd2583835e86010bc918d5259470e7271922996e27bba803ebafa6947930788ca86a8d3544044688f41fbabadae2576165413cf81f672a251dabff118cf5f5ceb1acdd9a304bdb69871056e2b1b32477ae77284158060e3e2f50c470c0a02373376d58e9515d6a1f093d4ee3f082f8c73e121b74d265b40c4442b2650de83157394f0b41d8503004f31a6788e37185b5c4c250e175749c6b983d0b6edc09563ccbab00a4a149c055f3771eb543fddd97c03be509a15ea2ba429cd06154525ea021c4a056933d7b6e1cd62d0b51e6e24d6f01bd9659ae8bdae508ac5a72cde46f778ed6eb7ac60095e323918ce2461c7f4c145a3e31df1241327391cdafc9de9d807aca3767a1ea3cbcd553dbb9451afce656341cf3b82d5803b43d249b9c190d1c1df04244c0e80b7db1b4be3ff734507983d3d2bb56a585e41915f6be80de923b864e4e1ae8a46252f326251bb0c9588276218f3c02ab234a773811f5fd5f11b0963b89a26493f4be4d9e3f13d28c07b35801b956d0d7aacafd9ad315fc59e568dae62336d728fa6d10de3f79c1c86fe990f42031da6ceb52547c19c6bde043705fed6c88f31cc974df7f8db8dda313881a550e7d2e6225a71e5ddbce54eef73f62f4c438c3c92bc0cc4ae46900e353f6de177cdcfefa5cbcfbd6e0f31ad8920954fddd8208a3b3986abac6d7ef6b564b98a2001b4234e414755b2b520d53800b92828f482ae5083bf419b76cd0d34535173e83b2eddea13a4bccd4b1544a3cd4005738eb1be9ddf08c86783ee8c91f86623a01b2ec92e2509af89c78e8440553d875a37f4ea9b1fc68e10a39a0e6401ae6cf3434b22ab15e3134518e363ab694c097cfa2db9eb221f0a1f1284e01c6a8e4be0bf422837041539f37a873ace219f1d629a5c97f4f6a716700c8c246a9dca95617cb6613727c5d7e818abc4a63a3c434716ae6b9c85fd600b94b286786da6ab2fd9a362433ea1e63b7686764a4113cabd52c7834240397be4ec2f5df8946264d05079fcc59cf4d3eb03c9319c5c3332cef953e91f194580dfb1c0eba92132f745eae1f330c4d075b1cc8ba112f73105d8346813bde0ebad37a887c4e4f2e2633c2a60f3a2b55c9be16df6e1d07061b7883395a6b32da30275c009bd5e51bdaceba3d06e894b5aa90c6b39c65e05eb9294749c99d124021523d256c455acee6f28545a9718e4b725c6d94282d0979343fe90686a85f4d90eefeac20592e12c0de136c811fdac1aad96d6c393cd947402a4454cc8b97e6d6cffd092e7eb587ae0403f82a154ecd745c1675a61f9603f3921963a17c35da913382e01c875f64f2449bb906ad1eac29af6ad181e3ad4f6808b4d0543511a5c03aa6cd74b5c3bdc6869ca06d130f58baf89d00cfa98a7e2364e57f2e1044542ef5e0a2a7525ec879bbe2be51b3bf36d90758ee87bbddb3e3c0cb6fad4d5b9e37c10c038310e41b884d4f29e86e38f8bcddb3b4e7ad740dec31ce9fc4c6645e9201e37127721adc66a8d51eeb0516c90f4b8730d67d2764c1e1cd2d49c92ae75b746587bcacfc2e72ece08c7bcdf5da0dee7ed633685b857e26f9cd42a099b251a8bf108bdd8362ab95379379d15be6ff65d542a488d543352b1fbd1b73c2124f6d5d3160d3bd220d24f82c6119fd1a2b57200bd78318f18c1677b4c8358e6a823ff6805e597a1dda6c3426b863e29facfbf0737180958c99ece8b46a2f4b1c33039d92a297b1eee472539b5684063472a8d58300f65308ca6428658e16d908ae11ef712ba17200c31d4d008fc29edef3b1718816e05c71b916574cee069f72a396208781eca7e683e2725689fce5e4df4bf46559600388bd312150abbf145dc31f468bc92eec5b80a9c09c981a87c276ef4dab06f8fe28ff9398450ba9263af6e9aba076926b2451be989db78cfd6edf23171d92648aad06661aca2deaa461cf407cccf900ea483509a9714af9c74fd3e3786acc50c10f55bd480948d826b4fcccbec04d5aead596ecff661d3b7fd7715905ba7ccaa7ea43701345a85a8158f1ea7011dfe398f8e7be78468d33c06278793b1a433bb211f57017c131ba76087b22b181622e13047d350c91e7f13d82bb8c540a9c8b10b0759bd5076d8d932952b9822b041a1bfcb15c7e8fb2d49c403befb355bc8c79862e152e28c862e445b502b4fa6aa60eff06ae6d72a9c26f60f3309db7d2b580fe07bbfb71b76bcbc19d5fa39c74a250840b890d709b75911c54ff7b502a025b959bcb4198b88e5cdf5cbae2be81b7e0f283693a761baa03e5db6cc08ade1a5a57c2e4a2cf1cc1adcad111ed4d14e45aad45d56a51bd76154eced8951e9d986c8e950cd0e090fc4abdd107f6e61410fdc7373b4e31431306ff81f240a3d8d76229885eedf45bdf3e532f35b3cc64c8ad267ca3fad0f80c6a25a392995dbcdc24c9ff9426c51c77c417bea4f85a15800fd21440bfdad270739ab4bf2c583b8c995faae979790c674cf0c982ff7d74ef4693ad2b982d9ab2c2bff497b2a32dde5e2d2f06ead07444e5395aedf374e93c606109fd4992f2ad81520f3873d050a6deda2a11fcb6d9d02867ca163a822272f228f7c787111b62ccee2ddece75233cc6f48603d8241ede9bd49ec4fd2d0a205e3d3630f4003ee4e2061a6d7e27801ffb53064790a700300e8eed8191cbaf4dde110e6b3adfdba91574a580569d661885dbc2f57d3b3e4f60198076540802cbc164187868750b1a5603e8969ab43027bc6d633e7f199ff375fa499d40398b04c4db09d64b7c1969589685717137762f76cfb2ba4e9e53eb36bb8cfe2fed84ffdbd2de2d6336242414577217fc4408412d18a0a47968431bca5d849259a16cfd30dcf38863d88cfe2f1955ff5a82df4a6a064eb05b68ee18bb61b890a31d267982074115f33b108bc252f6754361d946efa8b1dcf7923b5f7ad630bdef634c57d5fea29d7648e68b809fb48afb2bc95b1c0a6fbe7c1af880a55b7d3f296887073ab81ba9234e130f2267ee178fc05d90a4e5c6617b8635f0e76b55c73c16d2bd6cb1468298c2ddacf9c142e2941fedf97bd7411d1d77d2dcea38e5cef109cbb2ad4cb546e117e0dea26633df0a26eb5bdf6cd789a6abec7aa1ebf1c803ea210da330e9542062a14c8523c719dcb4d525c01f9b291bcd0e5d84e8ba04a858e117ad641029ec610d24747c9f4b20d2a8e9167213b2296276899f553946f239f8b3356a378803af4ed09d44bcac3dcdb581fadea54aad8b58ad8fe1021f665ec56ab05d758059adfd4db81f847262ccf79b2a1b2fa8017b775abe6a3b1a2479895d8b02eab21fe43b3c15f9dd932727a9990fdd2d8a0115e71ac71365a451ee8872bf1c8667595d82552b40cbfbe2bf993a6e815f8345103c31e5673d418cf38f9a5e8faa743df755b87aea36b854d9d9a201595e14620899d0c4eb7f14c45435c2c031c92924ad581f02b94ce2cd3a256dbf1fb06936add4e77dd3ddb601620555d6d85ebf09cbd469d0699574499ab15ec4d971205fdbd30aed07ec3d022f54fbc7be436dbf8da79e19832d56612e59e093af5f6353dbee8501cf9b279d5228a9ef61658a4284195f3384dec4d96e31fcd204ba4a373a1311a25ece7a5d017263e46b084dbbcc9651dcb45ee59cb682ea326d0b87ef18b128465a3c2b94a5f66b4ec78a874f68439f1b62b0b5949ad482d346b85abae53096fdf51b3a1aa3eb0591896ec7e498d508dd6be6de96c512a7c830eaa221d8a36d2213af7128b5eb1a7b16e183ab8f1b3a2fbe998c3a1d22d93da68c576e8447d74e0e4e90f709db59e5f5564e03d812450816ebc9c9b70abe002e4d70d73b382d99f76d944a498a362b5f8d87b0fc81ee3876ced77203ff0d9fcbaf30505dada70292b11b5c50b74db1d560c71270cac0e2d09c480e46445564c79029f95195699bbe328994de90cb80fdbb3bbb0e6f59624cf280a5b04fc180e78c604ccec739b857dbb1b2c9bde8a4d66683c8b8321e2ec53aad0db464f448b41a484d7e9b242caf7469d8f35b9c07c78917ef2dec4f7549c48d5c63f26e73e465cc5184add087bdc8ded12d75775ad8549255bc4857a17dd752ba37550538d20bd94b3d40aa868f2274e09885fc1b3494d502a22ed7c1bab0838c4032c5bb6c3d6cc0165c78aadc4b75229f6fc77129daabeb3164dcf0b6013587ffb8725ab8eca16e2457d7bd675f03caa75a7b30afddd2c74a0ffbd6d65d0f96699d76241fd26c64bf1440965c8835ad9d5dfdb3065dcd668daa0bac79f7890bde7a70c33f3353af3c5bc98bf7408d31423a8f01682e07ad82e3334c80eeeda55323536eccd10578562ed172736fd6a84a3f622c5206fc41904a75592fc598a47426e3dae9be27fff5bb6a34add2d297fe3972ae1b764d72616d3a36a21c29e311609d75c63b864851615378bbe1e05b95e3c8950ddb15dda193fb606dd9413d3669e408cd27f01af28a2ddcf5fd21335d3fc5ba240a95141b34ecdde3af15227e51ca93765fda4a71ca75be0ed243580dd25a856e5740c7cd52df6a5e0086859aad4379eab3a51d7602ba6a54060fd340cca02d82e34bb03468bd8a95b00c7df16e364f2ef06dfd2073513595529a284baee054bdc9eef18ab014404e4fa1b0c33160d788db40d4a3a8a358402f7269b682c0facc2cd5b4fe1d6edad7793766303c4da69d11ab7409dee03a8565ad37936313b49a6b7dbebcf0bcfd8aba24931dff5b29da5210619c32f8c3fc426d8e5a32eaa828ea99e9445b48f34fe83379c6fa47e813ad57536e4df6559390121b1555bb09a4554262113fbc1d2a828e0835214029fced2adc8ec8aa0757a57c7a262916f1c65247de5207d34aec7ff1b6703e4c5cdc1c785bb7b2dfcc6098929e30cfe330c56a001cf5b745f8e137f4698e54f1d8648ce94eee2fbfde056796f4dbc0d1cfe75d6601a08b392e254c32449c8f36dd59b65108d752b88550c6e20bcfc37ef932e331441bba727794ff24e4b69290889710c456338d7eff332f93c950333518030b0136ed298e7223ea9cc08e82ab763a75898cbe07462d334ecf34ee495776741d45b50aed4d96486b9cfafd1bea6c619ac388ec422c5da8020cd8a08b9461606e5d64f0746bed4a1ff8c50f0cc5e6d8820d08f40395ac14da8954c84c32fc4568e36cb569d5f45178119b3ba59d4ebd32474466b086e5335103a6654e2a7d28e06ea64e7ae9ef27374df4e294403f0833e1f972d60ec74c13be16fedeb8875e7b2eddf187dda3ea96972e6edfa8f417dc79125bb8f2843e6a48339246bff885e3833653884261501ffb6e933e706b65ce2468f63f8839bd0d895b9f9341fc4ed16a11372051ac83f4ed82b7b06d35a33413c66b24f535b29d26469791799791659ecae8c0ffbad37268defaa7d008f5cb403438195f37a58a5b927f6ecd577a53bced068ac04ff2b94ce4fbd7d70a0af47065467ca2fdba4eb66f29f7ea587ca2ad9c067e2cd0feef3bbaedea286116b4f50f5fa6d2c469c8efdb7500b9f0896721893c5a0547122d32b4229c467d80de4669822ddb9f3a41603eaad6bff1bdb85b6e206726a0af0b2979357d5866e2a854e2bfa65cefb630b756bebc333afcf3dc480c4a233f52379b758780542829d5959bef39a74f9160e50973f9185fd803ee515048e5cc2b20e301af0ca7c64dbc72feb05fcddd753f7f691d09e17c17a45f6302334bf33497814bf530dd80b428c05edbc044614e3fc9d66fdde4f9fa0f58198395e070429ba32af9f102df09a9025564246bb2fb78263670f4eb1496e1aaef8a60f89c64ead6b28b6f1693c7563fe04f2dceeac0db1b9c9c291dc88f0ce8715518af750d7c6a74f1915b4eb65df5505e4e319a949c105d31e258976b47984c63219abacdea6e4a75be002821e4fce14d29d05a330212d718963ba4afabef396143d3851a70a471a5e345a46ae74e2dc8f9219127fd4504a7970b547f6f2e896b3c9491f7d7198486ef671710b9bc249cb1a2c511d3c2c709b28d02d7ef0bd74d7ff0f5f18ba21f2ab216e3f662a54aa31cdc0d4d76f0dd1d8a39d893be0ff36cca1957342e1bc3e371b30f2013ece10de167fe0e99b3e8f7dd66d21519af304887b690956bb3fcf75d084091d4e84e574d1eb1e65a989944e3d68b6e68f2d4ec511817c808cf357884fc7c2b20b9c6577dd7cde48b6d5766110b39a4bb99510802ad008e144f7fcacb5521c10f41952275e60c5bc00927c45fe247a33259293764910f57dc833099b456b60d5b39cd608d497167fb43f2d73e4cbb9461311f2a425bd94215c27e41e52ff1295ed3ca415797edbcea500e670f781bd7005f65fb7a6681c0a7ba9ca6997a4fbe15d8345556bf13ec229c2e885df88c0a8e8ac42b3a1c5394c1b890886ac11e06e20e32063932d0468e4c5faab8241d81f5802769a4c0152e240bfab8fae4d14a66a1d4ed8e8abbcdefaecb5adf5a533ed9344ac1c0219330b9e1496401a754d31422acecb389290ad0351465c030a1606b14924e38b98af2c314dbd55fe3779ed55a1c2cdcd088016885f0482fa54b446508c6b883bd43025e5e17cbfd34c6c28976ebd3ef466664ad3f50ce406a29a0bd48e7f0ad73c5aff5da1642f87570c0596dbddd2f930382c666caecb6f9d100ce209c8032b5a9d7d94a66945024e0e4cd83927d6174499e5678c5fe18f4f2194ee6ff9cee10ef82e80c9c0c6100c22f53c04c52b8b05502dd1f0e7297e4bbfe997c7b969ddda53629d245fc5dfeaed6765eec1659ae4e39c47cf55272b560e2c58b2b49bf318ec48ce77ca80409dcc4dc69882ef26907e445adc1422b28d8a51aa48a9c3191d785bcde86a70beaf59481eca0be51d6d5909790e6734b4a20f68ea4ae5ccf92e9b3c4e4d3ed1fcfbc9e352e351a8d63070aa0b8de02438c14c300f8253a1f6f41e92bf625b8ac1be98aa1f1f492762f66cfeaca0318c370e209cddc1c84488fb9ec388109fd402c6691b08ed8b95921ea76703b0d72d67585d99aa7b4694c27c662e170e724ea6198c36f6e286edb9ab52c5dd1bc071860aacde93232ff8938a4f791c0d9a112c15d0c7a02a448b09b92463f9fc7135ac6c2664fff768cf12f10c1cdad89d1aae9ddbe5cb89243b37d6234a0439db57c3c06a486b6633d0b00f23d808fa65cdfa9ebe4135c6206f103b9178069f7f1da88d599a4db0d6fa68bfb564c127a0be41327926fa5c0f9cbb1dcff7f3ef064c121687315110553c1da1de2d810245a9f60b56b1599d75bcf2726639ac34b203bf8521de411bb133c4ee5b5751377b36d0624cabad448a4882261073a4078a911f7674f418eac3565a2f092a96ff9797944805197830b3f3632c53d67ef8cf1e1b5447db3ab9c273473d92408f98e641db3ea9b6d2fbfffa92ce084e3921d556f4a7bca8f15039532738a01bd4b33ebed3b689b5e0804132bfb2e44d57fd2cec133303b63d762b47d1b388cd81ef95efaeaf9f26ad110b9e35f734827186b5506acea0d4ac57761bc1f13891eb0d481e7d1b12a8eeee58a5e42bceadc2de67bcbbc6d05330a28230b0fba5dbd24f0164bc5623fef1c82eed4e46072807510a37f04b5557ea909cfa27c58f624ad561c7e58817b50f6232f572417ed8c73aac8be2634f33603bee3eb080429108ca2bbc0f531095832ea4176147eefac910aed6a438f7a77e4cb3a7eefe1c41cc3da7d19e5027637a811457052c06de1632fd8330843607aa369014bf94483d83978fc1b6bd33c4b605b05974d37b9b051b85b5f8315e7c6b6f5112c4bfdec89ce7fb464e13bb36813feb7550a2c3bf4e799a0862eb01aa4e47da7677f78fe81342a7f05eb6d2219fe70aa01d89ead9702dd72bdc1a1c28c4f7d7fc2b367bad5181b806719e04de41ad59687ae8fb7ab46fd52d5ee53ededa4ce69d09bc34282a9bf0f3b5106e9aef7ddc477d670b6a10a4c62bc2bb0f4f9156af0d7b7f28e56664a5eea661e8de35bc9c47a06f0b52ed0f4aa16f78938003de5204df90ec76f977431485d683ba92d64a73e040b05ce75af44d5138d23d865c91c1a5580be833f98f5dac93b316f2fbf0d20da561033e654a328d63e52fe1976f490e3ef60afa32ad5c758cfdc14e4b3e7d6bdf3b9b11d6bde98cf1d38e28d1422052e9639719ead006330db1963680bc58ae8f4473155ce44843dfa88dbe045258372b7e38fa39305ca1552543bac1ca60e01e1b0ec2230786e3a7aba12aff68edfe6728261912611689e17f192f5c9fbdaab316eb9d660db10ce135809a906716ed894897ea67601fae9d72e00fdd8f01adbdca034d88083ca65c794983d3ab8ead2ee6f009b065ff3e6812728ac34097273e00a8af32a5638f40369e2c00d928f353db78352cd1ac4c270dd3a2d0ebda138d4191f29f43d55842b9a9386e484a27c3c4113fa8cd4d051dbab16a8bd578bfe7e4a053412f9294b52110e38b0bb5884a6f9a45dc1b89500d2a1569e4397b73b09a08b5f5330935e673eaa5e35284f3cb6cf6ca7e0f6a8cc977902bae6d2942104f33a5b038550373ee0ddc64f11bc358bff8134cb64c130606562400dc219be52a4da52e2b37fdc15ebd853b132cc64c8c56192d22706180c35cff04e94a2d101900f862e71f9aeefeaf9fa26b409c403aa7c00903528afdfb863f741aa614ad7da3521927a99719354c7874abeddbd8515300a6643eab3e04f6684467d64f2f0caa957a5dbbe0faaf0a45d0d93e06606f13c51f69bcb211512240fc4da51a500d7401b50d21cad4cc8a68afa258a57498df6c3eb196fabc8f61ac49204a5d3240cff7b6a2a1dea464908dc7b706e3904787b73382033a21e434a975fb8e56c554dbb044cbcd401022df8b08dc385025807077114bb7ee09b57ada8d1228a4a308b9bc7dbb8de89c2e9e18875623a3b0b8228041a5bf39bf30a793f497e2b859a06614fc2bd07caf5d5d43d76a8b1de63f3ce5e9402ee8b1f5c1bddcb17242d6b64f0718cced16e59212ae9ae4d7e57a654edb0965c57cdc6d46da10a2e1b6c259028c987fdba348f412dfceb11f632846c02f2e7d90d9277dad957bcffc79852d3492c444a6baf9574448ce859b78155018b7a64b5e8196c7a0bd29c1c04774d33a3a2cae2019da505116801858d5e51290887142c80ecf0a687a06c4dec72891f1297d7aef4cbecdef0addea05288578ba36408399e59265022ee65aee28f26bbbfe6ce58ae360d1ee835b7ae70abe6b4031403401a61eb4a4745cf3a27cf76800adc1b16ea6a5656180c306f49aef34b4543de4046ec77df1eb0bfb8f37937183c7391237dcd18b1506bf40214ddc761459bc056ccc9feed6c9052e23c9a71fe902af263b1e2f5d8463bf19ff3ca6360d8558fe63b139507604fd2234aa16db9ed41b25f118631cf26f949e7ce66d3425e19a16838281c653d5020e65ed528e20f935af5923ca8d5ffc62ddf6ec2648765362c3057f237ea78eaded6dadb32e84d3b1869ce10bdab79b186f14c345be20c1e44dc73c7b488c19f22e1b30b527c923f4e83e2b2cdfe7743137be23262225a112a4674ede720b59ef70ccd3f7b304e8777bd32a70d05bf340cf1c8bacd97d9cca00dc3b21fe34e02489bbc6ec136703f126d0b3c0a8e4843079965294a954d04e30e13d6990c889fd5ad9802e869f6b67327a3a89f190a3b308b1ad3abc8c7bd639ebb2c4913627dd401ebd23936cb3f1fc96751a69abe4ac911180f3cbdb65a6888c03e95e2463860e4d967e93338e492eae98ed079288e7ea5f40f10f823ad8e31559585545e2fcf9df947f7d45941eabcd35bd390d80c1c91ac469cb9f89094151b7032d0fe783d0892714e277ce3d1f4c8eac59e6580c3bcecd5202d5e8b230e730b546a0ff4dd325f67ca76dae1ae224a5560dab3f142eb4221344ab072242fcd5f1e1afb1db360e52606f52373ef639446c6dde1ac62ce7a26e246b688b07ae38fb7ee3c3baccc5121f46ca39aa233807b378c0705995486142bab782b18e57f5157c663e01a26a26701fc3da58ddaeafe16e7da1ea94fca8e3821f6840d76699f8b1e7d39c594c0f76ff9a8ef15e86cc983daf8c3d99e04f2026b4eed87d4a1981e45c96a45fa945a0519fdbe583e49af9ecfef00cd9f21358a1490545e42feab50be37d83c60b513d9aa6b8dc8c0c425d3e669e39747c221dfb7dab2a5c212d63c338b0a7228d257ef30ddc6176747f375b8a3c538d48be1349e85bcd279231782ce2f7bdbdead181216b9813373254022160087c9785c6da15a84b613ba3427437509e4c3d343641ddc8364d83e90616a4fdf4973058fea2b7c53d26e5e5573c273b1e784c9c8b902a488cb88077f58bca159b38d1593d65cbb05f9422d020a3afdb06db9f803201c3cdb6419998b338a6f5c4be1682ba70c99774d7a759391bae6aa345535b2c5f0647e3b3c142504a198a84aa85d49b9bf0a0e40e4e15cf1df9b4da4b400c84dead69ad4fbc6d946ef7407c32a7efcf2f282269cf2c59fbeaaa9ddb73f781ab9fa7a54238d45910c51f46aa2724101535050d822d80a7fb16ea874c565acf12871053e8e9fe26b544ba36477c5a612a2daaf8ad953260438f34375bc84b3553e5e6fc195fa47a81fb8c7604854478102a3723e9a5dd5b1a95f582214a2eb300185bff3aaf0435b8f3fa04141f3b56c3482319de895d2c321e3fdc42c5688250e6582bf50383d6f1a45fc2c11c5f1c54249f605d8c6bdb6d69ce967b80cb8a0760b82e34330cac15cd2b03f90e4ddd5f961b10dd21fa00be4bc2186e2e3f0e7023ad0f82ecc5ae30cc1f1ccda6d42f12d74fccc2376fa0bf641a14cc01c4aa9f42cec0ed9903e6e562fbc59b99a7c7faf0eb73ae91f9f4779f81a9b3c25be51ebc7f622803d3b2cae94049a45e1d73e759767f3a7a9a933b8d7397fb71b434369b176f382d8ff55d475f1d5fc79b7c41b432a08d73ddf0cab8ab9a1a64828edfbfe445c6bbe0a12caebed4f09b1eb388d3fc65dc197a9d4713168af849c087e58e1862bd6f4f0ab0fb8ca606a61c59452a751a8c38764869331ad02521e70b40389c70f47ec76ade4e3dfecc644db1a353000bca0c3300faf9e623f57e2d7c8f6729da361b5da7e9aafbd6c1c9501400bdc3e4849462d205ee18f64d9b738a013936755a12c35ad3b490bc5581c1d90ef88d798dde0c004ae067a137b2264998ceda9488ee852ecb451f9f81103cee3377191e7377676d7548e1fec1d21dac7573cca3cdae0b73ec02aca64b15ee45416fd3102745f2b0c1bddbfa44f0d7ba26bd010380714f63cb2b7aac3b4bcbbfe6e01817fe619de8cc661adec412801a77a0fa10137b1921942548033125af2d25f9cc474fb5a624bd6b2bf4e0f22601062068c75f8358ba0d9ea0b0c1856890ac70dc7b954c52b7ea5620b5623f21b1867f7ee1952b17b655d8cc6717e36da31ae2ae829fb10b119df6b68bb9de630ca06b4fd4cd584710de5ac8e61f27a878d4b50c52305340eeeeb1e9d7dfbdea845c60c4e83fca2a40a918f90933aa665a75df8038c8523e7c1031a572328fea9d542d24e7b65ff85470823ae94ad18311c25289013945f7793f33cb5fbb3d6b45c91f9598a8a91e852c4eff19772895fc73981c2cab3e0f945de12e25aaab9f16fe9343d4b4722a568269149bd66078a055b3695ff434ddc014add447800aedd31b7ff58d0a15756d098a385c5aac1828075195336d34cc41403f3db1ac4a09c001ed3c82b7808c945ca4aca7f59a192b93a121a5bb650b39cea8c2ee33cbd75572416096f428bb7ae8dbf44f92b84fd6fac78a8fccf42cf06098f2ad142ccec7dc0719570bcc8a896cef003b2dfdc525a9de2de14fc912d9d7eaccaddbecf77e3841c7bca33d8d9999860f344c8f555a2b9f99c2294e5f08d8b1d9ab3caadbbdfadb8b6f14595cf6bc2ed30994e59ed88517af4d9ad461af0c312e062c18bfc8e56a756981ac3100c511380cf92a7b03234a0c28f42b9983e00937c4e088860c7bfc7bb58c7f9ebfa451092000a6b8e4bcbe9ab0cef01a145c8f20e7927d84c396b7c2d512f51375c570e765a9c9ebb09377a66d027cb806f828313f8ac4fe3101dc25d3c60a25545ef5dcbed53b81facc9b8e0c9613881b7f56ff9132fcf9d85387176e75253afe9d74d3caa3eb50a7476321bdf4ee231fac407129a1c7fff3e953fa78011ba147fa8272765811ac85fcb5c25d1f107c16b675e6d2767b7dfbeda8033c90ff7ab4c59a9caf484ead33e29728bfee3b2bf4de40bfb66e8a5a536cb70614a71d32cea828515e6ec9c95e962c6b672be8fe80a050987ac72550c428314708e331093a92b30b07d8db3f8d1c668e7f20f4aa9769fb843e811c28dd24f558947295220bbb1c22924d3fc179155eecc4d62ff242fc23f9ea367e77d207bcbef9a284e4f9e2847903eb794cce1bfbf5d88581fc958b9be1ef46a1aae4ac65ebbff140d68d07905b90d4ec940f5768784c2b305f55a233c22f05a35f7e037360705750405debb85321705a136288b772e0bf6585b7e1b126d49e7acc0263f9459c300b335ef09f18b346280f6649bd54a5cdf6cd8e160993bb94694e00c35f48ef61f75e25de6151968c2d8695d4ece495592a0edee3aec04a1e0269f131adc41b71b8a281f2e6356cc595cbde73c4f4ad7a7d8e781080bdcbf4346ecc8f190c6029ce983d641385ea241cfbb33c8c54ad44fc683ac04b0df86327c0dbd66fa9243922561d05f308ca58519099394ca27afbf0aecad718c492634b40e2276fb12f35d67339e6aae362b47ae6336996075614fc83e8310d4582523f5d46459c9da900fcc8b2cdcda14be7b74a96ebe171fd114ac4f33eb211d07eaae5cae8113e0f19ec2e96c00fd9343727895976159e4b1972319f339787ef10e49f8886e9c659573f86bfbf6ebfd3440a90e7fd2851cc73ccafcff1ebaec21d8e40c71b9508fec0c9d5a5003423bbd93a9a58b64fdcae786abfa0f93abdeade9b27bd2fe3e5e9bdd18c3cec845a2cc8b6fc02c2e4ac208e3cdb2ba89ffbad51ec726689bbe452c5ba6a3bf320a5d02165b8cc0c1a2e455ec6c79a706ac8fa201d0aecd0a61ea046f01546ce9c8bfda6acdf9fe47da6c9e1456985f5e8fc5a0709490a5e78069267941229c57f243eae8fff2b6a485ca719d7e5fb4bf623040fa82aac691c436952554074baf0f214d3afc7aeaef5d29c6144f0209ac14448258b7bc2f16bc78ac5093ae50ddf550ae09ba4210ccc340c78c7d5dad6e26228e1d196d71fac35fa855ff8503e7d95eb19be80b5e18654a2e523512e1cceb800bad1bc90475da3963c5b7d841fe7385a103950072761595b8995c14d2854a523a4df87b9cf5d0e41a65c65b48d1bea498f60a331962797ccf728705f4d5a10638174e704d3405c05b381d7b11e2c1ff2f35e1e9aaff4158a20befb9f15ac32faf4a0e0b16877f40c5fd6c42cff7298866be3815aff55ef36da0e99d0dd38369616d1efe8722981eda803d53a7a12045890eaf528952ccd51e2e6d65e2e15619ce7af7a9993ba43169dd628b0d7eced44908c6a3ce3c26c452605161ebf4d539c8320a044cd30107fb0f159959ef42bfa301e407c91993fd0046369a8dbf1e5d67d7ff428062ddeae8be134a38b9f63b7492068759d6d41d493aa72d5db918cc10838be7650abf9ca5a9078387dbefd29b7393d34cfc0e55ed101b6f5cf58e658aac45006a8b025c6334bc738aa79238bb8b9d968ca389ceccd09af3d9a15aafe7e0cf4ef234ebc00b055834e0b443713894d5dd8d188c36a31214c7b06b67e1fe36b9ec9f7b2246ddd43ef43175fb6eef8419c2f531b25fc5562fd1423188073b11efbda130700a4d78c4207f1d13942e7c172c370a36dc4e48a324f7728fbee4d51269437b2032594de9fb496d3b0b7f41cd7b8b5e6e14f075b92fbdd39cef673f884f84e425860851c5a539d3d6e6ceb70f0ab3ff2885ce2708274b22ab8a610bb8703f71abee509ccbf71f8b76b812e6504bdb6dcfb787ec71c2e964c429fa070601d6030651d91728436b7175b4863b69cf586931eb5ed38b4ce6a3ed963cd75f4d089eb7dd44bfb21c71888ba6595b02de33ae69cf2e82a203091f9250ebdc9f61750a6d04c41246292c26917775392fee3c3b931a8718090f3a6d164d260f46c27cb2ced92a2b747606cbe9d5372ef8d3b43353d8ce542a3dc2767de8c8480b345a2166db1e158d760ef6213508d5fec43e326c3df8ae60a194da1dfdd22598352d79b9c9ef4f9065f46b305b3709feb163964e8ca66fc07932e60261e167fdbee37a9379d9da48b9c3115b38157a9a5bc2f064c85e4bb230a6e5fc858364f26d0f3ae2e5d5dc17b3b2952684ca3ade77d82d79b9c653fb12c4c6355c45bdbabb49c5d22357b3669e76b751693d6647c948380eba808673ff1bf6976e71f060ac6930315871637da7466521ef2e370292b79dd1c26feb51b4a8e4e7eac007544a3624cdbeb7b8a31a830de1e17129e10013bdc46288180052cee9bf4450c3003fe3b4b00ddf93bcf3e8b7c2cf87b5f1aa19419d7602fe6a58ee560695b4cd99a084e958682a8d387537628d7743e86faa132d005238e2df4600701d77b9ed6a3cc7bb51568957e4ad6bf00f6acc4c92d4e1084e0bd01139e792baec67f8ee49932ad536b2726e4571eab2e3d52bfbe48cec0f7229f675a18ac5d9e23b3af58dcec381afb7aa43c544d852d7ad31f23f6e742ae319ca7061e586c9db05d15708a414ca797279fd5dc1e7f6660f84ef336e4c221057576a5a00b2cc41017c93e0ec3c29e9e66441efab95dc4bde5af5d1b749108cd96b84213873828de087d5b1624498d44bc9cd7f3bf8e51bec2469d3d2e21ef90c26d07e51bbd7b1b908586a73a8b503b6b10b00b8893c141f5d7b6d7784aff41f13a339cef3404ff4b5d4d5090d620cdbf6d69695ebab93fc585fd361d6a835849301ccdf779dc00b03a91981a9c378a7ce22323485da7d38388ed9e06132127165cb9972cff058a5a238649baf21c39415790dddafeb9bf66b74a257efce1582f2bd7977778f9f8c6272a1a15a8c50bd598b0a4f3a0584664d043488a9f5f1984435e405a88f5abdb4f8e2d81ae7cabb8548388b6e2accafee6f8de764ed6dce955ce7e09b108e8d1b3290ebc3a042e18b4aaf0a7e70b73b7ebbf4092e57329828ed8b92226f3a5e3d0a531d62c2649c8233fa94e544b04d2fb016fa3fe0b4e54480210bf95d635898aefe95e0cbf785c54264aa72d6566bb79f4718b335b619ee9d45654dc15b0f6bb137514aa4147f15d2b0edca4ed19fca68de7c3d323b6c14a4268224a79a833151472c2de5e3f9c36466e6ba43afcc3c5bc4354690bcc77348dab4d965857e36b42d93ca594eb06afaea7d2f228e24772739ec81c5868e1aca4ac2240cfeca643ce9fa6f60db9627db3aa1585a80cc300b3318e494f70f4edd1fb178bd6fb62b0a9e4546f834cc5ae2b85fddf68ac32846f930737bb1ad37afc27585911c0ad86c6e7a37beea36ff60c95ba8656d74096085afb19417ce38c0d3780e4c8f901f2cc19bd40f03ab520684680e344dcade5a92411b2d33266476e969d40605892583139ae67eebc0957bef1f8851b7cdd029ad25828b4720d081e3c7a6a3a976cc404d9cacd6227a79f74c1a6a59668b4cc28e3cd5c044d448712dcd16413146a4afd369bfceb3914a84eff2000f0e3f03a4ab3aa5d62b4541bbff7cdc6495f2a046a55944bc3d21edd711bb5d4d251e6c86daf701c2866b114f11e25a5619a55884bcdbd9c4e05bbd3de82dddcb53df27bdb11f666601c64d78f159670905bf96b558ed8c16dc4d32d9e2737803851a8f5c23fed41c389159eb1e229803ac899ba7914f0d40496f62e6f1f076fe1425b8a1a38c7d6d805f22f998cb6b965718062ad651dcb2aa7d77e345b765751c2cccfcd6b1fba7e087de276274cf70837836bb7effaf7454fd02650d5af0f38b751d054b4c45069e86eb4e2d999ecbb5c435e69b5b2bed803bf7408716465f8ba7b1e7a16b57eded8691a2c3b44972db7d9e1ecbadd19d92df2b7f30736f0b95bb8c319c30dd9cd0a22784e8ef8f05ed6accd374e20c13749fc391d03772851e7ede16633918a8bcb7ac71bd76c814de7f903ab42c1d2e13ebd42dbc871aea351b7cb7339fabd8e5bf15eae3a96f3d7bf72148616f57404fdc50075741471ec2ec483b5343ea84001ab38b4b66d4d27bdb17a30bb75ab4fa31d9136c3afea7fb9baf7fad7e2c3fb58671da4bb11d19a51f202404e14c9eec131bed26f9d5157271911c6cae5be7ae780f66317189c4ac4dfd0df48d8eeb3db59750ab7f33a236843f624f4157ad9fd3f0f6a4e5d5d66c524a82b73f4fa6cdc173639817531efd060d8481497c2990546c50f2f169b4c7db7d493a4467fe648c270bd63a228cc95441c26818761c7ab832ef7df798460ac6b3d627d2ca037340051e57606e15634771a8a07a67bc0f6261e7b375582a704dbff8cf93c87491ecde17170301a21a02f66f700601f35352ade1b08f2bb8d7e5b609ccc58885e51a5e432936de0787c4bb10dce32ed6e8d774951b6b58bdd91b34b6d64e6de35c41e470e5e1590c5870586c0d85cc5756d8333fa71e9c0cf15949107b4af4a78c4f31f41eeef7a9f1695c63405ddcdfc160f9050def01d4e0fbf12a15110887e64b1fb7aca7d2d4dbfccf7e08177399ca45a5ef0e1d553a4bcc0c89284fc5f0ec898e04ff8569aeadba353cb7092fb904e5f6a3b2de7d2817e6da6489eef205645e641243979d2ad19216156e8e273aa90d89c4dc71c2a2a92bf7712248dde97fb3b5980e00a1e8d828df39324a7d6314e80bab6b1ff9ee359fd413df1f99df514b29a99b1081cb5d8caf81e27f4fb6ba4870f37b1d7fd73c99365c7667a33970c01757846016909af305d35b09b8c92b6deb9afbb61eb564299d4ee31e2d2a27fa4f0d6487f60d0c6af8556db2bf21a8c3e4e55e22ba6e9ded6f93d9867f850bbc04d8e9aa35abccd30da1959bb8967012df52728dc9a982f6d3ef1cfd0c91068b347f0e8710cb75e1a92b838905daf2efee3d9dba9a043a24e8b1fa16f565815341e9676ea503cf96accde6eece70d8449668c54f589b79c2e1345344239ad29c94815d9415e76cb06c0bd0256e5edb5ad13d108d01a1ee646d045370a1a79309136b58e69ace319e2cadfe8ed0d4d52b0f0b666ecc7f735a265fe61bc41a27ac272d04b079a5cb63876800ffc0cec52bca5f929f68e750cd0b8d6698fc24ee0f4c676db1c0bcd7cba8fef66c6e86de3b803c3989eb5e3e36d1212e162c998c073a372d53ea574f1551f5288a3e2f15779a57ecfb9fe7f153750af6700e2b06ea242c725968eda417c810d5848d5cb5076b4d4399e0b6e6871ab6e7c1b223d0e83e0ee45c7c8b01d7be87d9fd50ffe87e2f0b6e96f3d85b6b90b6d6ec9d0003052ac5d17dea16c4e9be87e1656cbf6b8be8fb921e60838b51cd6f68bceca479b3f6b920e9bce2cee139ec9cf5368efcddf4ca393527c2ce6a952b6a23401938680a12b218c91cac46d0ada3acb512becc883b4379a188ad4868d5e2cb735534d2028e434e3b29a3d84ce498843e1fdd3f8fe656d8e19390341100c4568361ab893db0001356e3d84c8cd9f0d133efdac84b3a7360525a1553b79bdeb5a21e40477045de73d5a1aad03e3b6995a4fda2becb10ad59a9b7ecd1429a81cb2c771396fdbe2268f357c994f20231dc1e47c7804c27048aaa250d28e4d481846b2b58bcdfec101452940ac4170ae46a350214a3979672dd3f49bcdf3633bd1bc7d69e0be91a0e69ef06df2f6212c331d3945ea594e88796c4317d9a97c56981716bbfed3a3f8beceec8be081b47e936f5d343d2df6f4185d559f69ba2b018c2e01e55109c28ce4168da04c548437764b143d972dd902cf17f7bb7ee1f59948bb9a0867013fc983bb0f13c4c5c0112eb0d58072e1248307c0740a319ed9fd592b87f2c62ccfe4601ee7c2596235bc6c4edc8862b131b8019610323337903c896010adaeaf8c9523081876ca2948adbe87645e22bad15d444fa5caae1688e46f503bc1cd03167f2574a366cf3fcf87213cce4852f61acf38cc81a5a80a6a2fc951f8c4ecb9cb76bd749e40bda026156b94d3d18bf37854221ae4256473807514c094fa71fca4dae75404e0d1a3d436f422424dc16f28e609f259df0de4b7b8eb6b6b5a9524aeeadbfb8365ec928fa0e5560ca741d56b4c8da47ee75da43146614f9cf08793cde3d84c5f0ed9b0ec54b2dbccc6273a21893d22dd563e434a6932c22ea0143cca893b20850ec9227622006b79ad03086d21bb1f9d337eb27939d67d38f09a0f56e3c9c5bb8b1ab5bd350dc83e7c1ac2b32a46f43f1bfa2bcd783bc50c725734fd092c81e779fd1e4d8682b724ecb1500d37376a78b143f249e91d9cd5c57ec3871ff7bda4403ec3e7f688d61867ed22dfade3f548b66b3b50a3da650fad22ff839b5d7537b0628c63f707eba3c0bdb5b317b93b1e8505241ffa7159989e23ed45092017f6e5017dbb9ba6e780775b8334b2ccc7fdd9c825276bbbcb35af17ec4775ce52295e78785d9195a3b2c82978be21a8bc3150588c74a32ccd0871b56ba49460683c328dfeb229cc52496d9b3d5536bba86d0caf265d7178fbdeb0af3c18344d9ccd3b01d17d0dfc77096623722891bcccd985b6d10b2a5febe4fb1817db685c427a2fdb99c0f447f97771e986e71d08694c2d55c941d84a7012544569b4ed281a36c7d1ce4335da5d3c1a18c9baf55827ee3a2181ae0d16c195d709c87a02fdb120c5b91cc7896d87a71a3b2207943148f30cfe7ff6504ca9de0f9d5cf3dc4bbaf175060b317e49c8de34ad35e50af4e647e2126ace2feea060e35619972d7fca0a0fdb309f7b76922504ab4774cca12b22b50410adf82b582706d07b5622c4aec7c7eba89c7d8f3f39b5ce86eee27e8905b9f3d654fe28fa7196cb8fc885aa3189648512c501e793a5fa3318d55342e2cd0e4f6f953bb9328c64f3de16be3592a38ad05c0650d4cda78452a571a969eb438f608c90752114afe492a85ae282ac416a017c0ddbf358eb4e72893515abc364a8bdbb0e20373f255ed7272e311f6556a1c3d40ced5fe2847ef170f75c634a1db7ea0a6c78e7752c64d503a149eecb33353e2246bcc0d168096ad2db8b443553c23c9f67e0c7926a85c2c3656175cc7aed8547af39d2707e3a95e7dea24f1cb9983b87f48846a2ba5088e578cbd24cc3c340bea77387faec89aa78370723113bf32c738537ae7a86adfcc54f9c1623144cb98bdc139299437e457e913d5dd6e92c86b90d8d3648d868dca2bbf1107676619df38dec1beddceb68c090cc6284d0798ab8899c98cea3bd1ceae97851d9022291c68bb7da3910222cd0c6a9282924a177cb665632f4592717da72ee8ffbe84adbd075115b5c6761cf92059391435e4ffcef75458fab0350d1772bdba27a708df921542c00cf17383863254da24a649a1e6be5f4b4c52fe761f26bbaf3887bc822dfa6a0d68bea756576db29312a99660e632c9615c00cf6af100bec92772f2b57f6e0459a7a8f68dcfda01bc3d1b98eadc311bf7175890b61cceb4d38760e510fb8833f36fd64a53392c543899fbbb618f8587989c607657fc9760f2e6822ade9a1f84a32981143afb6e4c95387cecb71bc6e3bd528fc2aefbb8ecd70ed5a6ef75362fa5ae8307d1474cc4259f42c6c12ac42d7e44e32942f19c61632c9425b591944095a7d6cb074f2610e665e43b207fb0384a49d43feab5afbf69ce2d8f4156ee6e96ad39bca5b1f41a3317938c5ebc0b895296a7c8e395d3a25b1bd7b45aad87a8f32c321f61709e0fb256a36fac363288e60b03c7c525af54e30ebc0f75cd75dfb9ae34ff3ed2723d7e7f954e7f73ec1cfd5b6d57f33c1f8365448fe0bc2ad00c1ab5e215f7f31b40027bfdd99b06c711e5cac841a1d3ec23662cff6cca4a05a7a4bb444cdf1f5f3172c28b459e51795d0c89679e7b33e1e5bfb4744ab131a4ad173e10b05bab628cbcb79fa63c82d21f9c48b59495cc590608d867b9d7f830a70527193b4c6a9721b4af881fe6f755151f66bf3cc891b6c30a5d27bb68004e3c00f784f95dccc987711aae1c8982ff41ab1503525d82b39589111ea5748bc651fbd9a6d80342598a3c9da1518bccb26dc573902ab5c6427e9a2d3e555b15f7b25fdfd54d586e4e65c750826ecc280e7b75649000433e08222a1a65bbdfd01a74640cec1224911304dc5b4411b9b099c51789a4b54a31528ac1c282db5c060e552f7be7e5231f2afb316933ac08452496e8eb823e67dc7d4621883e57461f071d111796a7f5e6cc58092e5a67dcb557d263eaf7677ba410f8a3a91cffcd08bc529c59ce71097237e092de992dda30786313c5f173a4dd11c90cd9d84993bbaabd9e6743f7af2fe542e0b427d70ace254dba9bfde7cf41e4d8e08f820641afd8012f42ed87f7bed81600a91684dc367760347b31f29206e63ce04a421bd52a08a9a68ac78c9e44933da406d34f85b8544d6f83ed8ec6a435eb1219cec67822d9608a75dc004d07d2cd3eb821bf38bd0ca22934f9e000cb23d256a12ecc79d46a05a3abec3956278d1bf0bc19f26bf12db59a8805c08ccaf8c2d49a65c62d4e8692431cd0556dbdfce8f170387dadc05e38c25dc28d0fa47e8facc7f5b6b6a2f8bdedbd546189a82631ed85578e7253e52f8c8838bc14844d046f7b42a6ef034fbdc4a44fa13d676a0463653e6e1fabd7244ca5d93fc13513aee9737fe4ce4a7e6146887270df8f0454f2b5921dc5e8a4689dc9773c37b6aeb181bc7f80a9277c0aed4dc7ea760a90f33607101a6141b6bbed3faa5d93cdaae4831896c9687dcd80136a61502088cbd04d86b73e29fed21d29dff1c47b94bc1cfe4261afc1eb9e3ec76fadd3e8f49e84171e36cff92067392d83badaa779354f15d9298c4b85cba1f83a17979ee2976817898918c69fb734566fe4720f3ecf99af6655fe1b114057f65210f77cd93e6d551b5294fd0e51823bdc908787ea8b2ba89a875a8fbc58df3b9c4c18266b804e64cb709c5da624d3e6322675a6882d1e9a6c7fad4e53844476570e24f6af70136705cdc35ce275f130eb417f92596e4dd89fd0a50f28eb5d24d8ffa57083e22086f698d53f612bf157413405e7bbbfa8bf189be669069214e1129b459b3d14e3ec663d39ac4b066633bba4cbcbb8bdf3ca55228cad055711cb309e58e1f6f7d6cfbfe18d259b1306bb888365340c39b5badc051201b24a8be5b837284aea7898604cdbe7203c2e107323a0530f7e85ba002ce968f21b50dc368373965cac63c65259d075318d4001e64d0dc9f80ca520f4b4474597e592774d22197c63e151fe05a60dcbb02c2dbf73ccacfecba77bfe2d468d0d3bba15fc7dc65f861e47a8e82d3ab8c18150a8ef41fe058d5c5403fc5bc6fd742db7c120255b782a3a1807e0a60ed22a739038ae4d33f81fda325c52ca12165b715832d35c069ad5320ae5582033b712f9b65e2bae327da8efdc403e490128abd8e12c05e58423355dbfa0ea1990cde16520a7f72ab289030dfb65af3277016d3ced5976da719051cfecbfe1cf0e53c7a09292b4df55c0a911aaf35874c0f8aca169f9bd7f5c05156cf875fe202cc6642c5c355a08b78afc881d630a7e974089cfd5a17bf0851c3c61f5bd3414871161d23374757caa8bfb4c93b4ee698405672f44366e12cc69f00e369782112feb894429fa888f34d71a30b5d35fa5076ed8376568cc416eb783503f3bc0bcf548d81b335553115e1d5e5a2d9e5e526ef632f095b46b42ffeee97cf76c7c72828836cd635f2b069f579de668a96840b7e80bf13f9b670a66048e50fff09115b4ca02d7908af5cbd14347040e877302e3b44ef9c294f05d2c89215648ffc4a1c688841db9845983e1d7076e1d6552bc5bee896d8c4940253d0e95901e866bafd5701558e03982315a3bf05991b86fc44b72f8ee916f565a3d6169d101c8c0ecdc5324742cbdc4f69b0a27717822606f74ffd19bd29142c02c53646e39df51b89d9847b3a7ab146fb808efe4c9a8ace8cc68cc5b3c1f2642a3b1c178660328420a9377337f664630c8bb50729280ea7e1474f309051409be0e41dec1fe46e6fd8a8c8062eef38c7ee874a677a7ede8810ea3e6a756e28f93923b67deabaa62ff33b13ad84c213d7251d4a38d447068dd655aac8317d255fd42ae4761bce8405e1277d958f23b9fd41295a118e0b3517d876b3543ba34cf780594123b50384e0343711ec3dc2420765f98ae84a743ab51cbf3a787b61310703e2393c0cb538f250b0d66dd1f8d2aba75a20054d5b13ec67e7d5e488d406eabf4e3ff548bacfcf10e196f96a904b337c8f1d69d2bf78c1249bf800e718b4ccfb87b9eb3ef4f476d9fdeae5ee83156c00cd3089c15193fea013241da84b1a87c562e56225f6beecb5a85e1da1b0a7bf9a93870148bdea18ad768bd3ec3c9ee5c9c14c80867ede2b9673504f19e8fe6c80e6c60cd5b2500af57dc54dc0df8958a6158a6df79d221683fc086df7ae2935df635575a1c62969d824584665fe3c4b78951919ae96847d36edefa2167b4d54fdf92cba70794da83b07dc2291d761abedd79f83c7eaf4dabaa026a9d66ef3bcec8547e322eb6904c27d2244b9cf4c50eae465f1cbf25c5e66bc2685799591b9c972fcdfa3df61d53f33223271778ba49fd35e20657050c1b7a973015da63b53aa151eadc34661b89d87951dc71c036a58502e48376901c0e3b65138610275afcc468e563ed992ff28e600dc3febc2019dd57ee200de0a3a515053f3d08575b5f5173373a3b56086e70994d2d6ccf18a35172cec0a59496aaa8713c19a37db0eaef73598f5e974c98b36d6fda2b2f785fff70e94fcab4dfbc0fe4cf6ca7cb6ea197bd8651bbafe2c1d918700083fb974ae2855a8c6a8866b10c7c806302ae4078c50ada746d9483518a33d2a56be36fc53b81a85374e6caa5e1a3fa30db1c1220ae48968efbb8a0d7904aafb17ff2f64b2c34814bbf742ad6dd129b6ac480e35602758fa223de8cfe87f763e19358a2ea188b343f75bf82637e91d955efdf2e01d513962d67a242b0f8701ee649a09d62981df08fd5a3af466ea3bb48c59861616fe8a9eafb35d6afda3f9a273e0c5531853f58dd391095d2b9b4cafa7a02343d87653bc4f9f501fb66fef16597c212f516025e6e787aab7940ccd549cc5d2655f925f501b106cf6f95c1304d1c62b45ecba5878a65b878e32c9a40e86bcda6eebfbae67757505bff11070e33543f4ccfbd347b19e3e3ec4c580797f75d3bbe4fd3343d5d371b13a682ba76eeade28f0a342712cbed9d99e4a8a21554de7d1c12a61f8ce2966916cc77c14afbc68b51c9c5a3edbbf70d9e96efd7ea37fcfd14e74805a74cf05760bd889af7a77ae9b571301b21327b16b6fdb07d8f9e064acda6efc210ab1d593f47677cfbf529b1f9a38166ed145f035ac1fe6824523d45b86d565588bb1e57f790adad4440ee2ae36c3b52803b0f8521f38177d47852f485b0f5dd24d048fee29d44c9b628198b4e85a8204a12ba9603a0f932b48613371473a3fb38c258ed235fdd1c3afa5fccdbe4aa5b3234949b1482ab981078f4250f74e00e74170c63bc6f90d8a9ff8652363a0a9c6a7ef699cffb9fca1fae93139aff1c8c6981fa730a7e1b20f0d203f25830bb80eb73a024c53ff90816da2d0938c77115209642d58ceffb04c4c8226e2c7ddc8bc955a53897a4d5a0093b6aea7fb90ba51bcfa8c2115916fe86bb50c58c87c3465275f0b0a31be6cf80a255a6a375a87a9f660ff529d40f2d1c9ae5d5acec23a29584b22ff1b313b1e2cbbbf7d977c582d526f3cd18835e6a83e363cdc80433d3759f9828976b4a27c92088af6c856ea75ab7bb3d7aa1e482833e423c36a2f853cd7faea72b9161c6b87dadfdd5669c1ebeaf8960091880f3c7d7dc92e5db5a715e103f46c386aa8a3329e63fe81e7c2e9a96dc1bbcda5a7a88851e74f8c499f68b407e3c8c5f3e657c0eb2e0427a398a9f209f6e93d4a3b18329d82d34645839849dad746ffc1e921c4e266139dea4110c51e5e410732a0e44bd0f4fbd7dcd86aea33b3cb0eafa43335361a6dbf04f6bde3d0550d7cc7a40493a3abd696bd6b9c5b2d11a6f1d5fc9cb2170663ea0b9243af550e68771084c36b1f0274a34d28db9e0ea602c39efbff9b5b5e8dfac1174f9b05950d1a7543aba0783a04724825408ce4f381c0351461f26e228d4a11f7fbc25901d3ce2f2f04db34bb9359c6afa806ec0cf2da3ed22ee9d01ac43af5b370e90f27b5e4499ac2eefbb7328827f315dd25da1bbf6719370ffe2464dba5e7ab508040953db6eb3460af9a2a65a1e4da783cb8efd315f54aa54a9ae501181f8d413756f31c1c4ccf4fea32738a6ed94ea0ce31d15688fc8f595517c34a9e0399d44398336326c31e25c8edb1fe4cb826b7177a22cfb57f4095e3896faff189caef0f3e21a47fbbb54b92dc295a960b7fe0e01683bf6ab201cca6f0dd825967adabb3472ef02bca16dc23df61bde102a6bfc857e976faa2c0cd4030541c1925831f560f1fdb7873ded1ee0ee84f13bb135469df4a49c1119637604825211b868bdeb4b15673a84eae125af92af30759aab96e5f479f4f947052000c544ea75ccbf4b4ba96d6d7203864afdba38173894b5342fdc7d748c7e9d85baec6bffe9595e8ba24c1f42e48ba3e39832ad24adc7ba592c509c134e8aea2c5d3ff0871701da2099a00b929097513075f8a5913c5bad80dc728ae1dda7082c4a0aab96a605f96228bb818d9960e579b29dc7d9af6eae18c32a94fe784b7463f1a21c3428793cededdd941edc8956ef127911752888684e4f2cfb739fd71e5bcf241f6472e8fd8439a6525ef5c86cfae6a51abbbe2cf21d32a51d73c87523c087109f959fb108541c971a23dffda137e44238bb29c54b30cb9662ae95500949af763f0ee2148b0be39824c330baeb115f02b83cb92a086d4950c66c0b40d28b4b0cad5fe29218041066e6fb9469f826b054ed602d5019f3d82293f13e57779fc4f32f23db5e6c9da0e3460df115e915ca0297efc4d564361fa71002652fe9d8c9fb7e24dc4fcbda85a4edac249f814e3046d3876c555000ad711fb1f25cc0abf794518ae95ea17b69fed3b6d9f2049b53ac4e03d38253c4168500d6516655ba12ce152f573abfdb9f35f3caeff12dba1cf70a3cc74e2bebd8941d8a7ab8671679f690580ab901bfaa48380895a48868d4eb55276305fd3e00f2a03a748d8552005c38fceab1b366f2098ddfeea306f09c132857dfd4420026f07f72a5e803e8f6292fb993d13d7d2434a28ca566d87c18296715a5b8db47a7a39993583b00570ad8c01527a663789fa54179ed5632994c935126efaf3f05a6cd67e1e801202f820f1d6f4f67fd795344e024e9e1a5ec29b72cc973218af84fa978f91669e645b95da1dc8a38b8f9f0e15e5b46b64c35cd534cc977043d01a1ac6b07a929404e37a06adb32add6da9db7763a17a159178e95a0ca31a6b9cdc4ed086ac116841bf46b27232056302c894f245ec0a543ea6457ff9bdd9021df9d5db2dd0552f0ce757324384a2b603857349533c64b61303fd989c6d3778cd31ae4cc94de2ba867e4e29107cd75d8a61af27a3b518b8c60bd323827b18ceb58dfd453d160b5eb05f897287c32d3d29ea8ce017c8617ccccb7fe0f6d03c4783659869c92086510662ab13943f3683abc1bdedb5b8c5b8d3a2e06fc408ca5b95899e2b47411bde35e1550792db056de60bcf8d04d30f5f33fcf082b32543dd418b33a367b504a94fddcfcd57b068b79e7bfac9ed632638d58232d842d02303d8cbc77ba3383940c54d18178e07bf624ae17a6b0a9f2b838c200c88cfceba9b098223dddb8885a3b94aad90b1138b7b4e7424ad601ef3321e7985488a5769decbbfb92e2fb4395eb1d29ea57a1f8c5a3e88b60a587418becbb98d3d0e16d8f6b8f569c6f654c5b97a29a31d60e506d9a316bc7bc9203a80c5a73b60d9c86a90cb5c960287527f0f66ab5a5575ee2df9db3bb68aa7f6f98331f883dd55f2bf1dcf9e4be3b506daa466720244b0fd13988f8fa73e08c2c2ed28adc70fb3bfc4fc7dabeaf443d763f71ef1614abefbf19f1d3d7e3d4861ebb79572fda8126275a0d9bf6e3c68bebce0c227cd8a34f605455e3daf0c9b559463fd925fec81667ca5e7e368d4eb0b20c3512ae9c68379540cafd475bf9620fed753dc2b21bbe7d3081f085ba6f4929a5d8730e9ae06b7000b2e652186e255001f33e2b1f0125891d1e38507337c0bab63de0e206d111feb6a68a8e8d8c13b5fd4258bba853c7131c94bcff2bb5228c7fc87e7165e438ff183a09c7f6dde1835c48d2399334feffeded668383acab295ad87267c9eba64332ce1bd844a8429e655987f0bb576b7ef32956fddef4108ea8610b375288d98d197bddbd5f770b7f238ddddf6338d50afd70b7881626f9f17bdf87eb10c8dcf77bd27710c58b77422bca2fd173825876c5d9fa137060cf8840d4f6916e71849092426d29c5387c5ee7616ebe35e34eb53e2f1ee58eb14d9cf101f68eb17635e5a56faf1329422b778eed556ac259abe6efe03db1449b44f2c012c9c11d8abf2eeb245c9f8c28ef338b36c3f41dbd1b1d3cbd6c311eb35dc894903ac704b539df17eb4757417a22dfbfb41532f73c7c491614b1f3dd34a06c076e14aff7bce3ac20022f8bb2e5d0416c0b61a56ea3387174b9449dce38325edb7eda8e7c0b0f67c14639a8d1d8fc9edd8448e6e9d1e2288df91f561bd77d4723efe4e6a1e1c1a5685de2236e20a4ff017c5a4fa2b70273a1fe43d85ba9afb8d6f626be046c8bffb871e55ab622ef8bea1b26cbff6a5663d807eab362dea582ecf273ddbeb8fefba2041f9aa4ed3b1289518e1d9230db824929f4ac671d42aa9a8966cc9e859254fcb38e48932efc5fe23c1fae41e2a1ee81103850eb1fdda2bb4061beac6bc858eec4eb8dd8966c9b000182ad998f7b87da6cc0833c7a40878c31f637171bb9c81239307b4816ff9517cd89294488242b9481fe04c56afed41abcc22862078b1f434ff0bf2870229c78d9677fc93f0ddaca416966499c8c212f92896eb329ad93699edee329da432347f22fe80f88f569e216e2363cb1a91bc65d9757d42a80e4e2639e02cd4f12c1e6432be9413e5aa905d2056e26133bcb3dc7f8404ee5efdbde44b4d3a15bee49308e3afe461325d56adfb1c9f08288479d7509b8f20b9a5c7bde43af688a2b12a8ea8a8093608d43df6a477bc6b4d45ee2a7ba28b80105a9bc32e25f24f71832ad14ddb38e20707fd835c98abf51c786eaa2b75835b04b04a002be402e15217abdb3bbe83c6d5ffb63a7f1bf12a2384b2dd93a6028cacf29c806ee04098a3510902bf9637ecf409e8684e3b400586293ea84d2da0cb7ae1e420e207ad58f520c8a4f092d98b9ac3f81b6632c23a3556ec52b7169a828e2d3b31dabf3be93fd6d4120df00399e5a335876a6cac387004ff53dbccda001d91a8ed667ae0440876d72e5b93ec8c94a99387b8c06be3d0f2405ad0b49d7cfacf342401c4bed1d49c212cad4acb9a2fc9a3e8f3000be294884b21af84cbe39c0840ecb306209295ca83195dad4bd6e685918d793465696bf9de7a629d80f3e112278dc68f63a4889df44a6dce2cb086da28edbc2fc618068ccfce0ddc619a3c62ab992c48a2540f5e0e9d6449d55b22b8ee9f404bbf3a3f7641c2f3b2e25886af2d321dc6d225a0345aa8acb74e95fb6a8043972f630685c9d49e309f55c2a971878703c1b4fc111b157b356e00bf5dad4cac2093c1837907012a2aa69901d57e4f7aa8ddbd10c555226feeb306f56dfed75df3fa48c14b9b78607b8624fc179fdac7ed1ea09e5f56beedece118a977eee3695dedea05923e32ebb8d6118cb1ba075f856076f3d28ad7da48779233af53a0d21da6e8e2ba56011288a0c1b8208a0e9cf893df80e9f795bc4cded7a530fc0cd5efe7666bbe78e749a33597edb06f18dcd337dea584d18292b640b5f003a8ce353c0dc0830094f573aae42e73efa3b3441413b78bc12c1d0e52f45117af3b1625112f5ae703705ec7a524975944da0cba63d0f3ee07bd4c1fd22a9ca26b9385f2a80d7bd1d67ce0921fc17f0aeb7b404e1c66f37b689ffb4d46354a7b6fe7154ed2eee31f7e716dd126d61edc9bc8bb80bb2b8dd0401210f95a56b5dd846eccb1b4f17d3fc51f52a9633cbece33cfecda0e3bb32f510ef9b47c9b5c7970ae3f9e625c895db31e778c763ce4dbe0cc8fb4962955db071d7ece70b6e42d25fe8bcb76a838e40d839b4db4dcaf22113838adb502a3506a2d4a77a5d1918ec81979365809196bf37a6fc224976d636a9f5718657f734fff9582978f566e459e382c4fca22332db22a514bd4714d66f909a2058ba7c784a9b9be11e74d4346714e98419356e09f2ce5c943cc911a4ef74d6ee6521e579e54acc5ff6714034cb4852e71b2ec8b1b4c88f8c17ce356bf2f94ff6bbf408bff37ac3278a97308c5b4b9d9ad378411641369d50b72a9c0e86a9066166c10c1d1563b1985627fbb86ee041299aa9b54d0f51e3481954b2ab16cc4d61a25c5a75887fbdaba3b381f64fc7d1f7455e2dda61ca4a74e627d003acdb9f3caf73708bcdf04d1db8e322a4363086fb3bf39cbae81502f54f07baf11b0df9baa3b824adee9ec1adc0ca815a0f4928af07219f25029cd744d24421b4e0174cfb0ae6780956c3aaf9b863e9fbdbc742e0ed56730fe302625442e306510ff740273d6039734c4ce4c5db74096a8cd26857669035519f1d2aa0269d58effeaf4e6ed7638778239b2db1d2a089a251bcd5462ec017415585d9b539289a5557ee53d694283320e09a3cced6d89f21b642d05bb1853bb8fbd3c9e1677da7bfc221b45a6202aad45e08ac022b58cf08127191a95f6c2e5c6d0ff906c283f11738bd2aac772dc8b6e3cc94e2f72e82ecbdfa292bf76fd00a2c43b4441a851b71b0cb3abe196a5ab28dc8e096d637279bfe5f04ee0f0794d0dbffa3ae981966ec1074f1b48e405f2b12a0220610f46a611f525298d0d5162de2b3ef70c3f00902ada2f9bc65a119f202a26750735346955aacd6442d36dafb96b5990c799bdaf8d314e844d7bb168b1c33b5abbd9469b40e092345253d2c738140c1d3e4dd1050ea3cf0823a019ccd24f902802d358027871d680cae03f290bab5408121dd79d3ba9f620f69dc21123fc45cde064675555abd1d33bde83188198aeffcea5694830eda019a9bb17ecd79c89e12dc5bd65719dab3c3b9c845258c87619dfdbe1cf7c00eff9009182b2751680c2690b33446563cfde9982f56aff0d45d5847a38e81be52b54184d3e8d7fee2540fb247178bc8a5f533abc4898cc8299a6b835419a174dada1327398b473118ab51ecd5952ba895b94862da9277afd54bc9e3205bf01f8f718499d994de2a29b5d5fe34874ab484638e703e2a2d0b107ba8734005491a37ba07dd63c6e475cddb857c577b1d8f47af109fee76ea14ab01bf422fe84a808905cc79f564e558efc7bb78b4922d553716d00bd800372b2739a499e5c23db74910251f9165863ab16bb86abf3210d9973354b68a943509a6010236673fa100710d162c108ce674c62cf8ee645d45001f163a29fd684986720f471d8b832cf52ee4e111dfbe37b9a0c88b7bea491565a8f7b8b85162ed48feb37d39b25b48ca4d3f0ed006e5b08005c9c1b76ffd983705e72cb9874c47c1abbf8b4612355326ad1f5fafab763f7e1fee3f51f58eb5395a58a787690196f21903ff6e95a3f701f0b0dfb6195a8a9000b934d43e762608055cf23df722f9581714052f2fb7c6df2c03535600601cedb35a1ea73be3754d0ec7ca714ada0387a1dca9267d0cf86b9b409a13cd5c38cb53895c2e7c9f867c6b405e3dbb417f5005db8b04ab2a836d05ad68a17ab0f47e65cf979b57032a1fa1b8659885edd8745a285bbb8616cd891e9670318c0adfc652c06646e0b9987ddedba196691d2456b549284c6b643521b9a4bdfce5dd9aacc2cea1f04cc966789039c7c9bcd3399f7b6958cb136a4ceb6ede8d911c2e503a576df0069a7d6f15b4496d4e7cc9e25859516e6118dc447416863a40155855f950b34c8761f94a755ce71c588ca6f8877cd5b7a50e4bad8784ca0dbee70b101b593fe47446836a261670222be951e06c0c16f03c83cd2bb631e0b14bbca44ba12c712c2c99544319d11b9d4dbdf0f8f5efed33addb5c213d7b6ada1a710681ffa19ae05c4d44ff5ef99eeacbf387fdf046b913da01520a9c9edee48092c50eecac95332ae2b90ebd95f2227d140dda8a9ca4f3e19f76ed2775055b05fb0baf849ff2e9096c72e6e6fb41336d6cf74b10ddb1d054aef1e950d80d1547ee70a1d72beeba1eb33664e231830c9610b82687af96edbd64dad2a93730cb7845c0a812efcf41e5001cb7a235bef43bff578486bbacbff5b92fb4b3bae54b95e2b842b5b031ea2d4adf21168881f57abfca748358ca6decbf52a916edf58c56cec1b7513f55b8c800dd22b1b1f50998515187562b3b007b174263105d68595b93f80d9be6a266783202ddf7b6731ab4fa4c4cfe340bdf0ec820be2cc44d8f051cdb07cc53b1e691f8d809da9e5801f38f900cca59d4e36bc445c3bd2a274e955858e236b5b5379a50d4c8a4016d68148b816eff9ab26f96ab154e93657b72a4153dd1f733ac55871505f7de7d949b74b4ad380ea7e491f53e404d14ad912c27e24d59b396075201871a5df8bd8b5547c5c918230d88566d12049a22e6863d9ad781ea492b993180dc3edf19a5312a66cf1011f5c80c1e7791c67698a0daab2cbd5476f6e3a2e2ace34feff25f3203317d4e01351ca6f4d14f169049b2fecc5b3636ae357bc2cb3840652cb8441f2a0a3c03e8a7d8b0915a0ca2b149db513e728dccb4fd23b00b3c9c806cbfff37564784a2fa6f33a7a7977e0cee1309f08675e94cca91034f6c2845240cb7784b7d092b2ee03a74305655a8ef65ce99116470c03d357d367bd604bbb123ddf75828081b098f667f19479a4c3253969069bc3a05035d69b541fcfa45b516b614245711005e18e2dbdd720709c371def92e04fe4d75ca97ecba5c007cde8884f86df89543df6d53896b100050d433be451270fd47b283220bc70492226b10c39af6c050b681f7fe505bcc0dca87654efa55293c41848ab220b823618705f69fa58094664bde1f9d5c3ba33455ea2bcbe7df6adf5006ce5f94d54561b2222efa141d15b7988e765af5b901d6623a22ff22244beb1ce96a7a9d455db762a8a6894fb6d85b1252a41d3e86a736bd6a2fc3f7a5ac852ea1c51989a84e9d4c9e013593ac91f38defb78ebe5f7c02450a4002074534a555f6233d1ca928c6753f31b05fa4279135591f1676654a0dd3894847f003e391b882adcf1f0476eb8721a8850f0b904e0bcf52c46bee2b532999d96bf9f96e25bde5c02bc3cec4733e91acfb9c857371da71eb7f02b305a07695e8a55530887b73682055fa36b2b232ec795971340373f99cc8846efb69f9981122cdf5fe406953f207d55b9680e73c35dd49932f1b967d097a0b63a38297e46621132210ff1510989b30cf312ab9521b8ec7533d91d816919ac128654fb631bb59cfb6b5f3ff23bd4ad4c06f058438f80aff86c1965056b4a866b6868e71fd55390fc8a846f737f15a14e68de36388261aa49fe2c419e50e2be5eadc55176a5569eb4e01c2163c348a0ebe8909fb4054f345570a42bf3f1928efe428ba5e14007999780b4ea193b7cd8b35aa3177a6f68bb6cb81b761e1e26658d81520b328ff550654055dc3848e577a9c9f10f9afb28f643e0445348d08882dedc6934043b48b01088a4647bbac3feee1bfa5a8327098bf50355ad3da4df2743d81b375c48dd4c00292d1ff542da2ababd8b91ada1efbddcdbcbae3c0e404120814f200875ce02c80cd1e9016bee37f2d036abc4aad97e2f170b3188add5234afa6c850b67d5446c01c6c027e62f4db45ce7c0fdd8f0ce8a43ca893dab768a9bce6209e4b479bc1792b73f6e2ac89556633fbd8d7d47ae3fc724f8dbf9bdfeb2fee4237d3bb6ff368a515e30b8f32a438e301f7bf2ddb9ff3d0cb021611f0b697d819d78236f501807756728cdcf01eb313c816cf3cc1b26ccf7889505a7f3d5f26727b38a3422a11f0d5b4688dc71c4e362a0ee205be93599b2bed0b4d1b08cf947f48de2ba5240e9b3926758abc38ce71e4e872fab3c7dadd1622d5fc061d9bdc9a46019e9e4127a89f559db59f1b5b4b3b1a7203b24e1f4453cbb66411b8b426a5cece1c9468c7961773209ed29087dc8777c50dd128958d380b818dcb6fce3266fbc69f4e349135964db544921863c82922339f425e98c78a509eeb30c5cf7d2003732860d093dd66e447989a08345b6d7e9335e8979a79b4d1b04724e4dee1ca508a89b6e82277614c1942e6eb7815ca2dcb022d643e6292f2feb7ead02aa7f28a2120c4bf35af01d2f6871ff2b3d65e42db102bdb258bd0b3a7183ef8e9eb13f145e0b103c108f1d978ada9b234f56c61711b0ef1d99823dfa5c0101322f61cc30003952eacf40f9df1cca281d64b3f91e847ebd14fe39cc6a5636d865afb48733388eb8f6fbc09ff6ae7d225a71cd7a743b698733d622f5f13f0eafd85ee3926e7b00a17e3a1c31b57162740234a4bd1c29da4767e406cb9bd31b98609af764742d4e7725e96ee24ca0a75a92e6f3d864a8189145be29e241c84b84f6172b4385e71399b568f522f0fc1cc7b48b3504289cb6b89447208413752bf9fd9abd4958a31137c160b6a49d5f92cb8f86a56b938ad01aad8c69527a68a7d624a1fab54bc02c10171dc85ae7ae2cbcbbb41857ded9933ac5b12d98aa06ad3e034d30798b2af8e8b03f9ea90e4517e9119983805c5dbbf934bc41eaae21e7a487a1725dbe65d849a9e7a1b83562c8fdb4b7cd3af7c0ed831496e9af9f740a5fed649cf76c8343b8580a23700558109dcbb2eb74ffc115ab6e08fd7341b18acc5aecc5fac78c03e4ff84a789a018288a5f6194d0e8b15449870ff59c8158feaaa172f4adf53a7af9f960ce27ea3e6f42966a607f06f78cd3dde659c24d5ea35214da94c59f10f049bc76639713e8796482b0fe912bb7ed9dc2bee51d85039778851e2d7678b3c19986ed31c386c245fe269a540c1862f2c9cf26636a9ea4d034f771c40cb4b03415ab3e2d2dce841ae88a571a6b9255e39a921383a29eb0e7f541c0b49bf70112367f42f86083dcea8347bb7d7d50814f68068521e1a994cc86819d7564cbb334c9f2247fe491fecb0cad4096454e334777740e93124dcf6e938e34b8925215ae6d819fa26fb5ad5556716f7eea112469e938d9302d62cefe19fa7213be774ff4add7eb967f6b5bdf166f2794d507e69ed2c1ddc876409db0a7ade511e162ebbfaaf1dca35778a71d50ebacd681018a16b9aad1fcfe61b799e066954ed7d8f98881174795493ca0890e29bba804d5b12c0f9b5dfbffaea3f5c01f9b24f34bda6dde1badb809d580c569c12b3dfa18de6455f7766240e9bab4f842174e2511f1f1d99764d7c0e157a87d0ff814b7b558984f990284068c143a0c87f2c50f201147ab16aa390e5e9624426938e27a9d9c7e09b4d15f59c3b3a03bf1e7ec7c10768e8c40d2e4e0e20bf966f8b8f506cbc23e639f1ca2c11f1e6aefeed9e410a8030d7faec10377a97c31a801e7587b3f0e470a299e4d2edb4477cc97864602b9cd0a893c691aa369b364c86ac99e496a89772f406ee3f21ebe1e2ac3d5a788cb730d6b192e3a1cec4e4bf63cf50dd8ba78eacd5d10b751d7b4bd24112a12894ecf38dae48934da11af1a3ff1a3d23f538b7822b16fe7afb0613715cac73929f704075bf4940a594a3e3aeb005695b1de4fa1600707542d2b493ccad20024d99f4801068945e29c8ecc3dd68212b323c074533607064a67893a0d4f26cb830fc0298849febb6b8dbc5892424c937a85e613fbd56a6fb01d781072a66d204078d749261eb0fc563a2d4bb761135e6fa2f68f0c1a167c33fa7471c8c2db38dc7c8e8635796ed2faf5be27a99c876662071d91123c7a4009001c58957d3b62e7f8cb49290a026ae8e91761fc6eb1cf747453cbc91549a40bb449a25d96c56740b5878815a63d46c3d07566ab39ab9d7c19a0a1577a26cad99f9a00ee5a5159a6ae95102d2657eb466e6d3baa43f20c17e4118f87f3bf355e374fa8c89b8f4a050f5415b938bf6d8def3f4f210c06b3aab6b163ea67aa78481cc9f1a89d8761d5099e73f62ad20433befcf329fc915dd1ee91c74d43d709ff3eac6a5e4e3933cf8103af4cee1196dcae0803354e287af99cf0f2c55f1863845d48c7e5360f83bc0aff80132b20c89365767d0989abf8f0563d02e188ac5046fd7f3ff34289887b9af0c3f8d39927c1e9fbfd3c63b7c3ca1cdb62e654f301fde9b869eabb7ccd8f20a6a02a278974e39dbd176d0bdb4464dc9f0f7136675ee89a225b10f10437d652915d524def685530e6db820714f8035481c2304e58760a11cf2ba99f8dcf75bcb66970e5df98eab0338aaf66f16625f7e003a1d65e016081063f9baad6468eb832dd2cf0cc010d92877c9a2089b05fcb3ce7cac7967d296ff381e41879f5392a2c9276bf3381720dcdfc048907d2d8fc55f903f870850208709481322a40895b7a7e307fa918ee34dfd0ae77c0f242fc32b0e8de8e8059408489e693c68edacc21c09420783bab7d09389fcae2cd334745a3e722c5aae9a925278982d1cd9b117c267bc182bcbe69283fb30b93c07951fc79caf695da60ceac6066839c1215eeba96b43957bbdc1aaed09be074a0aa3e9eb81e4d92f06e8c8856ad05622c2708740bb96262a7a25619c9d4796651e5eeb203b4975b9151b648c00d2216e6b9b736fefd7b814ca5a50153a076691defe74f59ad6231f53fb1bd73bd8f05850f9fec13e30f46a37bb6e7e98943767e51548bfe758a9b94649089aff21152b667e120cf78aa568844732b42b9822516d4c0f43f038a9e4252435fbbd316f3ecd652475b77f3d835f80fb385e05173a1b9cd30fbab7b9eb1fa745fee7e1b0d60a84b0914515a0d9ed19b219ef251e14617941ec7d7b5c7b0c311205c5080b62200474d620401df4282d4d051148ef4273b42ed98c5642626c7acb09a684cde3cb5c29638b88919b5bc3cbf5f811e7d3c1551b2448573f7a6577a2c397e9dd07d003921bc2bc015ae91e20bd53365d30ccd0b715891a018e061f6da236c117f2c1cc9d30be4d8156d1973cb9f7a9706665830a80e2fbd9a4f77ee18b0c9771e0a44768f98f73c6455395b3f9ad74b7accc9da600f0a8f7f87640c42bdcebb38c09ad4e23eb02def9ba14e32e35076d0e9f88e050e7596668377fa82ca8e8335e42533bc0d25ae85a362bcee42f603fa2c6c0e377dec38fb8384d2b5a03631b2f90038586af6edb471e9aced757e8fd4e424478bc9ac26dcbad5d00f49b4118dbccf88aba081d793af2afe4462b7a01804cc2047ac11bc6d79fe3d06b21b6da02d16051204af4ab0ba2c946f61e4e940f143c7cc415d1c402fcd359b4142a230ee90ff6c4d6b6deaf248c758d422cab1175e729045e80b30b5b66dc82a89531a4d5fb320e1ecc844fa6acaa29e3b0792594071c1577c2bc4e39b23c8ec353affdbfca8e02e38745b89ebf3df58887222fa6bcf15ba4e613a68d5d6f286b6b32f0c5ca1aa266adccdb7774b261e377a0a355c2bf244a1c714bd0cdb2ea1679effc8f0f586dc28685e2be6517fa6fb3c0c56dbc3798d1e102d11837428dd630c1bed97813654d55fb5a08688df5156720b7f74657a8e35fa95f77b05f0aaf58bceda38f7414eef205b91311cd5e29bbb2037068ba51e61ba59438015fa6edd512f0a486c468e0c99cd8c76606fe91cbe5d89da97cdb8580b9338e641368aceb932ac72dcef7ecfffd80888bfc9ff7631f47ee064acdfa41485fabf50b415736d269122f0de0a0468b6ef1e11d9e4c9dd66c49b1499b4238f3deb561493463b5f081d668a417667ef4e77ef5304c176c6c1214c1a40ed28c7682b8d730abceb8da85782b3f3a55db7feacc826492988b983c5fc78d76635c7163cd9f6bc5b8b587f1360c3773f1b98d31beecb8ed7f59433e371989e8c21acc81542ab4b6f9d9c7986576ed464c69a04b6cb079e7e30c1de6159aa5924d978b4f95de51bfccaaca9e959f98fce611ffb5f21fb386f4c57a7c8f1ac0c9e54eea01b53191581df490e32538d2c7a4f780d10a232d0dda292e2472c0e909f15bd0d7098ced19f3e349584f037d1abcb3f27a7342fbac1983ebd0164a8f8ad65f75c033956315ecfc7b2d648d49a02c305f0a1fb03047c7b80b3b32aa596c86411438d7838e68196d446971bfef89ab703fb5e4e4b20f1c2ad2d21e889e9140f0d504a7303c9514df29fdba53ad732311ef32f2451c9d93418552f05f86576fcc193a279818acdaad24246b9d04d64f45b15872e5d63b73318010550de3b479a4ef371f5a63fdeaae35650b4970d196fdf73d3e8a8b42d63604af0365f8f591a467b96f8b25ed825645edbab4c040ad469125936d87e9da3106211874cc399259812439e9b89b20e0a579c1bf08f4f683b9d0b2991d166e23544ff4967d341387d1ecbc946358f768e4ba0e68c7f091f3b0e6fd508dc6f5225d3515c09d054d67faec9b04fab832af421ff7a1475564ed3dd7ecdb40c8889bb94b6f6cdefeee372015f1b5c9fb246866dcd26ad632688cd0f59ffea4b352fa91f9ef5d2bfde73a32aa406542972a0466095b3a92da5295a31d83f2e8dd7405484bf17bb97ee580240ce9fd77637d5bb49442fc5bb529cd83b60e1706ae936bcc3db9792a57a1f31742a684b7fdca24f9f588909801781eb254ee52c8e594580d7c84da61b0a4a8feeaf5afba7d6f950966436272508b4c86c28ae2f4e52e6306414d8279f0112eddc9ea949272965810ad046362e7b3ca2b7f490c24ab92a40754beb1fb9dec68313116b076490b19a9ff874c7ad5baf70d942efbb24aef0220f8acfe1750c06bb556bab35e2d3d11c82f1d1b275a602a47ee6f1019e44a9e576c9b891957e5f9a847517f2ee9f4d3bf81c035c190986923a7426196f841d5d2b60d5cf69ba85ab4836fd1f9767994919458e0bc23ecfec6a96a3d62ba0fb52b8ce1cd7bbb522cf6f665a84c4b80cb40880f41efefe71541a5a8ab90ca028b8190573b3648cbd9dfe465a04c82adc34be76cac1a865bc82400a92945a671fc1f696a459e8914ff4350e2ebb0cdeef7df6b53d4f94cee47254ef67f050a0a577a0d0a1c1be05b64eb0d21326e949720b851c34510d05fc1cf7c6653d613f0dcf1d190771192788f7e7ba84ad38aee94977667c3351140ed8691e5cd34fc751218704ddfaccdc298206171200a18db2f9b4397c9001078598700296e7fa9db6293b65ece03ee646239673b7b29c175fa32f6adc9681eac067d5002757ec111ed3da814e79db58a8f44927419f2378473914b2968d05d3908cd4f3c6bd65b581eefd308b852bded06bdc9238c6dbe58c9ddf8571de70ea4ef523654df16b7588e389988d7da012e70492e4837b9c8f3a7897648fc70fbcfba6bcb252349d5bbf5046f128b13a9de59eb9aaff8f8e027dece5e031447bb745f7a786511b55f19caeaae1dc31a175dce0f26afb1b96f6b554a1a177d4e04bb4258e53ad100f223e6dbee90421ad94a97293696257c653dae7a53f116f40ed673a7c67f97a5c8b768e0819bb9e36fd077d7a6700ec901f95f7ef6be05e56a26d089a42fcfc0fd91b783896a0a05a4b13b7c89203ba83432da57c2536afa20756939b827bbac97158da6df14dd3a744e929b67ff945c0c30c4f5dd10dc83c951b1b76531f1fa79a85896d264c53864f83f9eb83b3222db005787be0d8c161ee2abca20a4e150ca20c6ad8f27c5984747c505cc2df85c805b1d33e2919670377945986f14e4f12637cb14fbc9308f501c405964b592575929307fc93a3f18dec00450346ee1901eb863d890752cf267630dc8efa4e19a83987904f0db6225afe3bfc72730ea4b969a64582ea06f6edf1c70cf573dc5b6d7bd8360827b39e5e2538de52875741412e120907934cb209b135d1bf1400597de5288a8fcb0f82b1dd395e164e3e70a3d287756f56d54f57db8a90c63059350724729f0ee142594a1698d4fab6243efba6396d263d557b3be3a55cb77ba507af7337568b963030d48429cdfd40bf70818b747abf5c27d77e21817f624c892c8874612f0828c760a7033e81948d78bf37d1725e52b043be017bd44b53aafc4e634d7565e7ac3baee7dcda0ddbe68bd052f8e1d63bed02937f01b52e58b86f5fff32fda2a6710541f00e95747c86fa967cefc1588c38f958e40757fb713fb911400cb294508eeb402e93a4e44d442d0dc71ffbee5681e91b8001682daca9c08c88261add668ea52b1822966abde4c7ece9ec52e50bc3235f74c056c9c45968d45e842dac0652ee75275aa5fbe676cb3a1f1368c22114046dcb5323b6b35a24ee73647f8595b864488dda36352860b78b74d075f04eebbb1a31dbe2c1c6725f5d1059931e56d0ff5d8b36647521b114cb20d6d4c75595c6ecccb60fbb1df1f7b835274d6cc3dfb1885c25fd4d4ffce77eb86cce6c58da899134ba21c83c5bea81fdfe3efd68c5fc661e2059381d36d0626ae808e879bfb0bc69ef8db662214a2b92e9d62fd0043ba0b5a648f6bab1d307139d178f3b9229edcb5ad9cb525ca1ca36085fc2d776f794db236279ceb36094370c9c963c02a58e97c0081cecf3b49a01298729eb15bf3f61f2155453371248e3659591b02e829a151b69cb4847a71099900481d1fdc813172574abc08b721989edf0200fead65f2a75d802bc3142641ae88f1df3575c30c2b0703d57a561971a1e2f3e2d457d08db84c8ec57c88162a957379449bcd199a96cb77990565b47fdc8dabae9cbbfed36685fa395ab9e42392dae650ffd568b8afd786c8e2d70bab3d049df1d42c22afe6aa7d9c133d4b12719409da17c3877e92be3d08c178663126e76e5db617003b9d3e063248f6ab32a91343d780e05f3f81f59acc2924f7f52ea0e58a1dad0f8411e87d2f76059ef35a8ac9f1299f8b66ee4984bfc2adff8ccaaec46a1187f8adadc2e121a5603d3cc337157f0350cb37c0b95640fd8f35f4b11c2939ed51827ab0bc7f02b0ef9520441223de130911165c4bb94317bbc194ef645214c05a98e264ea0ef943f3f28a51ef3f9718c3d09ebb9ed3be62d9aba8e68070910394544bab64d6d95d18c9b67704cf39c7e0d92d162be14f20b4def9e70a3ecc97defef09959af28fbb410d3291bc4f99b5b2d91285ec67aa03b59b61081792b30afae29aab37e85e858941bca337f0b5f4997212d5199c5bfd89ca3ecdf9d7e84be05682e1956f59b92354191173289e08d05b00ead060f5c7c114b71c7cfdf5b0ec00f9f46d57f8f8774498d91530d488f2a1edb26f94466e349b7639dfe11f563323e3c7c20c39760e5735163d6f8c7911e114c6c853686c20972ad7171319432d4dce5622bb12862de5b28c618b9316189b44da4578921cc479a7b06c38a5590b9d393e475d6e96a12deffe71277869882390cb696c6bbc7c3c11e40b9e95a5e8ad4721625e597ef338903e665343da8d6b14db71aeef7366adf2a3d0c0f341d23bbda8c826989ee37403e6d2f28772e1057b2d657b13efef1fb3e79da46421bd39e17767cbecd77e6dc8142b0811ab80d0349b8681c02cb6d6cbc8a7158c2899c4df35f816d5f614449a0cf9737402dfa19996be710747c0bbed8d50d8b80c73ee51c85337a71a2246f9556b3b862dfedd5f12f15c9cf8364f2267ad32362aca462e2aa386ba155753877847e60ce581f3a395fe7ff6b3d33b98bb414f9b94b36719fc0a086ebb5b6f37096ff22f34d1f0893258bc3a0522f15b377ba115a1cb6eeba555ebafde7613ed5ea374aae2f0fdfb383161e718d5a9d28eaf029ee0c8f442fe9bd13244a282c720128b0251e5e3c1db9f913c21587514c656babc69fe13d22569bf6a291df1b4f67c41222b7619b96b6609dd58cac9605be675ba0f712c014ef60691eaed702b573e8cec5ece321ebb157cc12bf2d283b42d6346d0088005823d7e246fccb4d32d90464e1ee1596c6a6d2ef73f333fe7949279a6158f24e1043d9f9e8f151f9b77beb2a4ae43467b8347e08260c25e66b40812aaf93747d12b76dd609d2d4345f6db5c92f1ba1050123f1ff64c7509162a7a67a207aa9848d6f2096d67330a23fe52f7ed1b8a01171141ef30edc13bf2a179efc182ec0ceff986132d03efbd6ffa1eda72e33677d274705ba5ec42195c8ac92a19276061d96290fd451f78c9deaa21817f76ab2a592e5abe6c8be37b40061a75c48e90cffca0132d70fd624cf1da32f1b2dc0b35080f49fa7fdd382e92dddf03c84e67260f9efbe49c4cc40a12c6ea171d77b688633aef190f3340f318bf1e66eae258dbd1e1d80f5b1ec173bf911c11f064ba646215572bfdd4831d30de9d5c20cbf33ab44dd9180ba785ba0a6aecab66558ec4942161ce93456c3ac8050120a7105cc36789719cfcdfa5f0cf6e8ca759e81d27ef8208fa63b19f3df95fd17d9d642d34870fa5c2a1a9efd502eb97729c3f558d4096bb6b76fc19000fe6e836e9f2e42a5b81af96597a263ab17d19ba84cf26d1f218d889d27ae997edbdd3ab13c6ac62023f6947f9b34e6d772ee279d90dab6f9ce55ed2b8f5fc48db831e791829f8c7a707295960a25c9a6d211b72eac989dd9237fcad65cb0ddb7743f3e28ec3d03641d987b654862c7ebe7707bd46a33f18ef380deaadbd48390f1c6079601295b8689d786f3acee2489c80fbc0594ac4406c93affc4102f804ffa2695b4d2efbb18b4c824c0c32db5d41ba79d773b72241cff0f843bcfa675031b1a979202e4d5dfeabea1d19eec042bc1ea24127cb071794fb5e7c994ad81bc6127d11bbb415bc8fd25aa267f182b0180a52c8f095c047f868e48de92803461165d510ae50440fa48980bd6d492dbc736d9257d29434d83563efb01a4e91da4bf94f581a8b8dd1b07568f5459ca701d40d4243f3065f3f2b8d8a11e4b91423cab4eed3f8459fcf552ba4ed438cd29b258a92fcca7c951d38a5dbdc4d735ae8d4ff9883b76609eb1553a4eb9b140c00beff4716e6c0749d725ac9ad15287655689c0a9685bf70bb1be76016e48d84445bf50fa1f40c55ebd31751dae7e8931d299ca41863b030bb592565fd158f7cc4c7daf51b041f4ccbc8b6765fb2bbc80d537af76962b7b1ba2ff83d4f8b5559fe9600880e15392939f5db31e8a58f7b4eb1f9c142e063d1c1767af4c4bb03e75e73041df77ed5cf88e8146e7b9dc60b6717263f0282aa0532c8284ee586e9d09aada4b35fc539dac5e47899485a2765729366647e45e29de066a2a36e5d8a2d4dd1d57bd50d0bd985800bcf3a792bcb6f2532acecec5704e482c4bb96c1ef51919fa844a9d336be6bd1b0ea9088afc4c5b4d44aa760eba1cc830b60612e9360a331885ce51a355a466aacad8d30ca9762cd214daa6f39b3756f7956665c90c31e03dc2d71585b5e6b886c887350a82154d160b2e73cfcd9852bde91dbdc86b6dd7d37a19d4d14efaea3429773f0dd5ae91f295b2b7203117db68a62e8663f2544bf1cf5ee447189e7e74b8b9742176a01fd4d967c761e84671e769f6f2f7bb0342645e2226d0c94bd3d0a3a540717c49bc6b2f0b11588ee9475676a021d2f07ce88afba6bdd5d2ecaf899b10431913a51de6b426a40f446fc6a73ffb22d036bf7e1119b2196406399b6c67f45013e4435530edc6e26779b30e57afa022818e08d52825f5f5fd2720a2ab52387aaac61bf57b3e3ee9ada98ab57bcf2d8f7626c92da95b1bd7916d38dfb4bcbdf88fcf4b59c28325c852371b929a76c022aefe12dfd52bf3c4442cc365249c6effdd3dfa798091d2260b0e434587fc98c59d840ee215edc69eba84feeeeb0455c3ce0d5b90780381d65ea93a37e1f8e5d144e5263f1694300562dffc795f3415e8176aeba9bc368555a4180d137ff21b33f68c698a869b54370ac01af503871bcabe0120b632386f70ee58f99ceedf6b395bf1acb839d0e6d6867d0d5a2850dfc193cef695568fb8a22f6bb19acb637db4a8da7ba2c4dd723f44cb4a2158acddc07da0e850416f90832ab9f567c54a369cf7f8b72ec601bfcf003a73245aca240ef59759782c1c93762ff44acfd69504c4d706594b2a3da9091a0db0d0adc2aaecdb03d5cf616385bc73d1a0712c793027b93cae2db5331b8cdbf0182d45d7f4cd9fc01354eb93749177a8c0d5fed19a59bd5bfa7488619ff3585a96731d11d970dd286cdd941e215eba537aad2ec05f93b3581850f58ab58012a6921af03b97ea60cee1099a3a18ee63aefcbe1fdf9d93e932221ce8efb47a283aa95ef076e4bacc4532f858ac2bf72ae2fe96c01d6c42db5d8be87fe5be95e0c5210cef7f8e20a8386c93beff240292fab339191b6ea117419d6d58700486b0d1b7b84b40daf113ab07f439658f3928e9ec561858141292113e65a632e060a41c4b17bc4cb58cd89844b1681eb961f509aa83dd150d59dad4bc0873497f6639b1a83ed4c3cfb73c62a7d80a274f2737c16cca755f82ce664341da9653373d15bf2108d821dc891db3ce2b59bded782d61be931c4dcd9147691b73b74c7625050b1f0fec55df49750b89f52a167cdc560a678b3864e7264e24b3114d58ac3fb6ea84451bd74b575a7257024df3823d3720ea66463be012e978c7aef78b939165c942d24479d21f48f947a3d631426eb74a821a2a54a50118349205bd511824585de95d7a71a13b65056dd5130c938e12c7511425706b11066c60eb2f2dd5493653bd57a614e9c21896b032da72105ea974b2f1fcc44a8a9ae27adf61754ba327431f8e778e04e19f19d1382fd9478cb9a60eaac1c524ce00689e311ee30aa60dac5e650dbffc2f9e6c823780f03f5f6bdd6051ec002f1dedd26e691a75cf162b609d816bd2e7f0f244d62073862dd5cdc505b5071c36899e7628d4f702d537c779e96ee962969f7230ab7ba60b3bca69443daaa60eafbb24fde1c3f8ed7c49836f266f8dd3deb07f3f5f4b742a8e48bf8944502fd8f144ddda1274bdeceedf429ed662722d7ccd7c3d1221b5aa7a52e63fa78b874f0de87fcf96e858f8d5ace4e651473e062156d090bd8f8ec2c155d21bd8141edb212e99505d79dd92bdafe7b8bfcf20a4d1dcf9ab24e27302362252bb297973bad4ea2ce1479c1bde459c7784ea3a0832b1a6d671c07204d9b16b2748f8aa76e19e3bd6ac370f1b091fe2514547d0164b5590e79a42b107931a5fa73ec6a3f18820bed15d010e3dcf30f555bef961a686b30cc0ec5d2ad93c2e923cbb68fe8b565c9b09e3e9f4263644a0f723a7c62129960363f69d8b67f9f59db55c64754207118ba2f4b647f90ecd7fb3aba62d88c188cff94dd25fdfe5c34932fd3a318b2e36ca5e2fbb53985511fc2ada35f3c6af9935f3bf72839c07876dc346effdedd7a6cfa11a7e04fa1eaeade4d5e05e4f4ad5150f0ae4e7dccac9b7a31f84b622d6c6e5e5d75288553b504705396a444181050c2fdabe65e507a79c6490a97fe3f3020b1ff07ae228b776878b2589e801cd366d8af065989f795a3e3e9e18d962d0a157106c413473d509906115323340a288b42e9dc820e2b3fb786530c7873fc62d51b5e6d40e5cda9a2098dabf82f6b6dd53fc73a7376e87e98c0c2b5a9ad53856dca2d720a27703a7f9dcab5c80c0ec4bb3320ffbe8089b7f13a5efb64c70638433bf9f83b930901e33c9ffe6b3bd05d5c82261ffed708df7e5b00049b0f32d85254825eb797cdd0f5daea8c7a5168fcb0349d4432fd1c62727bb04a3c56742f8c0c729b505e64e87d536bf28f04ba620117dea1153e4a788e4e0bd1770a48f90fbee1638e1f3b2a10e649140dbc249e0c5e4b485b27f60a7ccf5e7ecae167db46927ea14b023f49be3bfeb6299a049e330d943e1ab380c49d75a009bae6cb1d1b6ca3a565ba90d741c3fcd8a901b1402fcd01019cad404213ca2b84914b84d80a2ab5e2aaed2e2503685010349c1ffe189b0b3b22adf7c51165f93e0d58837b91d96af24c2f50269872f1274185e86d8ad00b2bce4a3476ba6e71f102fb261a8f83c341015310145d30f1e33d265e0c8f8a176acfc5fba67199b26ec14a51d2bdcd34856a59db84845e024dc3cf99bb93141de3b22343fdf560f5daa7fa44fb387519f4b9d533d5f3eee4b06d131dfb029185530a5f17b163d0a21dd76fdbe43abf8f6342e325ecad31702fbb9f727e527191feff7119754530b9f2e24ff7917cd652f60b09ee57a7fff3923d96b57b836ecf32420945d2323899c68da082d57a23333488f836563451c5b19d2efd85b6c3423139133aa983e228a1ee08e52e2797346d71fe03eff69546cd8a7f58c04efc31c585ab51b872393ffdd3289546c2af8d89236109813e217460d6322aeaf9be2e88dbb5a27b0fbf4ac8ec2ca69ab495a37b34b2d7dcbd433f45e6d4be5fa36e9ce91cfc48fc0f018b737e13c1c5abb0f371728299dfbb73ea879a0b6e88a28dbf667378a62ef98cf79776290664fdaac9cefccbde7d6ca89b5830a3ebb783aa42bceb02169dde6f8f43afc1cf4fb621b14e636671069565ee27161316be5459f816a0b1f0c180162a8e6dd8a8630f6fa32f6cb5d12eafc01a97cb38af4ede4bd04a5cf69b0b0d9a644041d1a1ee81a565b01d51374661f4d2f2c552cafaeb3d619fe4d369a0879bfd612b3f2a08cc529caad73d2d5ea9b743370f9ebc7c97e73359ffbd22520c4a54e74e84f850bd983ded89d30a2bebfb08bc246cc653906b9c79e6466aad1aa20905047a5103384e998d2229d296b9c7379daabce76a8fb01442990ea23541125ea5f3d2f10af87320c4faf7c6910997ece60a8a017f95a28dbf6f898546023d474d79be38bcba84750614ba8354f8f170a75da9b16ba927e3f08ac492859bb4239602ca5ca6b8116b30016a54c8e052c2c23ed105c18a0aaa7de7c5bca1402e8dd11102f98580cc2c577fc9378f1285a48dbefdf8ed59325915b523e8a143cb9ac74b6c67163e4b77868c7cc8f3cfea897c05331ffdd57087834ef59ca828c3f02f4db17e79314e6cd06af14eea5225625640fa65670bd2be59abda408743dec40129ebbf4281834a8010968ad89bdc47a4a01893626738104f7fdb8a39cbad9d3c43ff996174811acbef9ee1be1c80980f3f39a74639b7289c37d97fc3808a22cca104411bb6ee703cfc1301aec13898195d241afff50517ae5b46da8434dd20c0c06598c815f78f925472ef06d8f9be8bc60859265ca42b21882a6d8e0e9ef1215db0eeb2ba708e7131ea5b6091f0f8f25f6bd476f5673e1939776ee227fe6052997c941530503470920e4ad0e7bab0175cef8f58fe2beab5473be6619d877772122131071db9774542215ec1526e7af96344f89d192080cd4dbdd6ee5e9069e2a5066ff9f8bf9bb93ea54e6a336d1f1713134275f0b0928249a124e4dab8a6d0a2bdc56a3effe21c88c6bb993248f477980f40ebfd2e0b14ac45bcb0d53eb5c5ab20c38f60967d50ad9c01db59656ee4416c4ba4d2b002bc3a9378db99a86927ec3cd7bccee179accaae3bd139d698130c0fb59f13762e0b8e74d23d33ac49b4a6ce721d2222b054ef66b705aea647d68fd41d13997551eb8b3575762d66880cb095e4dbae798c79bd6b03b052d59c2bcf85b67d36864e5ab0e30c3f1c0a2d5942cda28423f253ef4cd089f1ddbe5239a004acfed33d070efd7036ae26d7ba88abbea0e9fb8de32788baa78a26d2ac0148fc43369a0e53ef66f43b5c6f26aa4ac448e4d33f7c48c0e8134042df15ae2127e856b72f06b5a59ae393d8f0441449c10cac60335557908b7e4822b4af8d40f6fcea06d6a0dec7f11ceb0df28d5aafe0ef26ab9c111aff5136912ae2219c3ce18b01b12e68a2746f1148d366ac6113b30f47db2e3b68635cc24857b885da90258e1549dfa968833be923c6d708b36af1726a370a284a672ae88b839c96117ebb584e35b4855ff3f648c45b8b543ee41bb10ac3f2f19c44b0fabe3050dce89b8f81f6c510f977aecd9cf44d2e25296a280f52278d60580713e9cdef8d7d2180e299ecee1f1b8acaabefb3f0c86d21aece91af65dcd107a9f107496d4b125ddd47bdc78e18754f04efd3eca99dec300c688217596e36d915582c53763ca905c14afcdc8779f92370b9d6d63b59891887f2f31a491aceaae69cd459f276a7756b863f5f12e3455b43f615576b7bae14a16c0a4cedbc8415fb1c605b7a4fa33b8b72ab67ac35f48fd502e9fd9e93eb86bdb226a0c76da621833b74eef144ab36a0761e049f9d47ac5276ea71951ea34eb14c60e4335f206a00fe457a620f90ddc7fa83e33f5d3e33cddea3af8ac448e05eb433781f1a47e64ebfb85c1fdb9dba439fc77109de013c3aac77440c1125f834e1ca4f8abb8fc6b8a925d169e1e85d370c01d6565b2adb6833ceef5dcb2a6544df036ecf424ca8d5adfcc2ccfbdd03391e0a8fd7b3bb802edb7a3112c70d9b9153eb60c3222e4afe4b7f47112626f658577fe705bed14e02d61b4c2af20482eabd87b12757ab110e07c2819ade2751fa92e788e6fe7d4ea08b955caede1b073636070072a827532cb6507b62917e851dd300adf65c7eebd0bc4e7398743ebf86bb671d4af4b1d7af5c79a1644d7f75032bd00b4897c7827419f7975e896f6f3c7ed0dee37c130b6209f8b9f043cf0d3b52fca6d653057e0a19c3f24a167c5521b16cc6123298cb757e20cd2a2373520cefb0625213de2501614bf6519547028dc14a14f95eefa791b9be88ce21c9cebd05adc0513ecaa9ba81686d8b721b26fd17081213acc87f6c69ae28ed00f9d9190b96cbd13f9f53a2704f891e61276be391f203ac237a7f9a35852bf34eee8166bc5e72e18dac21158f9ecf6e4d9dfd609091b4b627dd53041ef87f67c19a2617316f496c19fa7984c0de98955818b876266a5127c1b04880210ebc7548e38dfc669a8d75b49e9bf0d6dde885e533dd7a154944d442c9d4ab7d1aa8813cc6aaf96a72535d931dc9cb515c6f2a1d22b511b22151cbbcca37fed53a18d832dc5ff6d076d6248db24a6ad8ab4e5df0e6db91701a29841be648ba2de9dd9dfb471517630ff205b8ce7e3743f93b72b865906f2b6c7d9a109041a8dc37ffdeb49fa5243ed746b2bfab06a8550fa05f8bbd5ddd02094f93d429e45659f5ac216a259ce477e06d775cd697c0468842885df86cbb69191a07a0b277c081772d94e976151cf82317d802b54ef6b828111213434ae53bab7e753df6c97dd1e5302c618fdb5d66cf37dc88bda414624749deea0e1612fc4efafa7fc252e027d5bf9f4e1a82d92e02f304e7bb4f9a1355852990cc8f100df79dd1a66b9a4fd8f7405d4fb9484faec6c2f47d862722138a26fbe36613ee7865bdbd8b77c6e64181d4de1234de76b96cb79c25d8aec68fa0fe4876b2161f7a08d4179c285ad9b4d0dc0eb5080d1e81688d55f35f267baa270ba33a412fc3533d485ec215860a74ef8b402d379803e5d43f464b442b8b58471aeaef3517ccf9384f5cba4aaf65236e48b7c06bad983f047fdc68d19362bc0acc0367ce14f3a67dab6cd2267c8ac6fef75e1465c379186a092df059d76234b1e19569191b21f02252984f58d0efa52751e201d978dbea8453ab1de9f992399e522f1da1c27c2339c3b53b1b4818d2d5e1318775e537f3ed129cb5d43dbe68e8ecf6f2610002db59dae47483f72172e13e8721a4c32a1ea5e36e033ff0fd8c5b3e82e84b8e69c0e0fe3441fef570a179f3806c9db1c8762121a1712b7022105f5d738b6b93c6fab1a0fd333c4aefe8b006fcb7963db765c01513b2e13e3f3dcb114d190dcebbe352b3f9e60d31a66610ffffd763e2cf7d3e29f38160352fcbec2452361a579147cf8f338edef0d46a1e3e6d6750ce5a98d7c2947713c82f8cf43743e7b963dfda86b35239445bc1fab97d4fdf08e49e3e54b95f33bbbba93408ddb060a46fca8fa1ec0bea6df899d33cf1770160d914b67c66cb2c0a259ffbd6d8c9884b255fa06187aec0c04a00d388681e50dda52d3cca80d619996f063ebad897bb1dd0faa3e990abcabbaa02c7ef2d8bc66c100d42e690a275e182d097e72ce442641c1a3fdd176498cd192c4a1f64d7e014e5d6458075871cee2032c0440c7e599e38b12a4a6a58910d658baa05bedfd3d36b3216d732d1597175986bc23e937be42e40b30316bbacfce6bc784af1f849c35957221f8ac30402dfe820f95fe1b24ad41dc367dc004f6cb038fd3ead0a79baeaa68399b07c1b4bda570c3f0fb75881a7ebfb9f61fa995585c337cd4f3d84d4882b2a3ea340da2456169e4b29020a194c0ad564219b90251c59fc032884f997b199865d509c85828d95fc171dddc0c5faa4e1e3d71d1db0a3064dcd82203d269a53977779e0f424102fb193b477f042eb88b4888fd74900bc7d2d16a32095d3cebae0dbdfb843edbfe83ba1c43255c17c73127793941771e97744ac190a5a0ebcfa8f1fe6144251d28f40c49bf1671f5231395fc50e16d945f0ca9f02486b1aee61cb06998b65ac1086dd7ad0742b65c4c7ba28ae4d2690e33a435d041fd1b322f0389dd1eba63bad00bb9da94be1a1534ccd633e93f4d1bd709a41493ad4959fd0c9ab85d6d45fa2089150df1d8a9099bd7cf3d77fa7e947561f75497acbf73941ab13e42b10da87a6d3d3f0362c2e0dc3b2499e28d61c9f7f5f7cfe2fbc9fbc99479b5b48be1624eaeeb159dcb6c734e075dec051a1225b11657ad85967a9a2d06db7e17bb5e324e421cb13daaf2fdbbf0cb8e75551639684abc38a0fd12b54e05d6bb54ac28995030969fedabd7c8b331f50f2f1a8b6face6a02842faf7c54ca780b42fdd3d35a9d9ac478f64241c35a8d33b053c140d5d7d9e83814a9eb68f5e2a1a9858e1a804e29dfd77b7d7fc58528ae3f0a8d104e84566aacc1036c6ee507800c4ef7a85f9d20e11af561bfe398636c3e56b0869a591e91e8f30f2c90c0c01743c8d72d1719a39b199b48e9bf4844b6068907084b1f9c95be6153c31aec5411ab9f426d2491d3e7766cbd1040f4ea8af86ecbb6930ac2257345f212b80692b72607ce1e10f03905cfe6ddd4ca2008d88112514bd491e88bc45e7bf472414376e29a457f14050875a67cee0242590369ed79e24f695549838e28fcfc7086665912a608b0ccc77bc559766ade934175ccd8d238cd4dab03683e9f33926bf5693e6e70e9407654c0790f7f22f5ba316672ab6355533f9abc0fba85ab705c037bdd5a5e5b9882672288866a1dfa5bf9ca10a05c2492a3ce62552a675f1e1ca1512ffdd735bde73fc9016f492e604f160ddd1e4ec1cffe985197784e041641314221d6f26a915e0300e6a7c50043983230b4feb245aabb1f65d63b10bb7b43284b493665c1ebce423a5b3bd327fabb0ee7e73c3f026e4db97bdb09b31d016a60ae5c8d027eaa1c7411d2b17644112324d8922bd88c1b050ea5a7e2bb2392bf8b8120625fce5b10cccf676ce94dab16ed2a1a4be38f1a2170d662735870123b7c3bd15d243396415a3f11925520d9e92923757358c7b7c2a16011f155f647f16d7447e45fcc206845dcc96aaae06d5f7a1039f052273ace7fa0a406f949cf27fe412eba96652998bf821ff095888d3da2be1084e442aaaaf3035101bb2b0c930c9861abc6f2c65cdaac8f2962ea70bd2c9871ddb64eb08cef79ef736f599c554a7cb242536f54aa3340a32598e084453f42620740554773dca0fd513f56618f2897125a54f3d07fff6dd10bc09324f1d29dad2bc0c060530287c1f50427992f62b4aad8113ac6d15a52dcff6d03690dfa7eb3fe8ecc5a3b5459a31ade40df9362a871af8a93e10bef6998b1b93e0e071b8e12d2f143adcbecf09778dea5f0237ac60a9b0993689f7a4afd48b7faa4f464d39bfacfb4354aa3e889e1c620fa677c845f3baeae5306b8ec070a1132eab375742777486efe574080d94bd32fcda655c0d21527349bd752249c1ee15ae89952f1edcca266ae753ba1637454b76aa8322b97b59764304616065f583ceb2c9b780d239216a03e08e2af561bcf0b6a80ed84ea304ffa8ae2a0b29141c4ab9c9523edd7d8873071c744d9b6b5d8d5f6015934fb653f501dad4912ded76c77ab175bc3ce16782d8e40f9b08ba4dd5adc4235ead4c870e763f49dd0a3356de91245bb17e48cf5018003ec58cbac9321aa078875be3b88f3ba40c8969f8ef648349b11b8fef9bc133a5cffa67b9647025d9dec0fdeff0380ef9a85f78fa079fcb23e5185c0beada9e600842c93d7b55e05b912c665ef4ca55b6d5a63e40d2c301c8411017bd4a1a31ace8c9c97da7305b44dab2b4a0f07c4786ac7057dc427250df4050c81641e1b46b7e134fab270b100e6d6f226f71a5ceb3840a5c9ab4f0aeabd2ad5f3eae4172a09c2fdd6fcd1837f05bc31d6c241e5dd5f014e66d6cc282782966d86933c4a5bad6a2dcecdc2775a055be3b3dd0064b98a323f89877ae5e5b5f7f0ec67104dd79a16efd90663711794fca7169912fe7285d03d297c056ff45e5447100657ee0311155f565ddb37948ef6d12961a87d17bdef188fdb5110db30bd19e8e3f530c4af3bbfd8039a0d53f76bcf6f1c2c7c1f07c23218c0b62863aab94a4a949c39dcc82b0e00e25273c49341300a664f0ae1cc5904d79312f5d20f6302a690e0ed32cc7a0a599f16d1e767858836b64351f5c8197684fa9389012d352d46af586667007cec8d9b5b114c26d1bc9681ef1e0d761d7d2282f30b38d68320b0df8b9907eb7cb1eabbc04cfb781d753c9a7ad2c65f30a6f98e80ef27ecdf02bb4802e7b99bdffc680ed8d5969edb53d717e52deb792877212f271aa8385e52a3160cf2732a69336f2c29cd4d1ab1eb1380890a1a79860e1ed19e1d0279c282628e47f73d3fdfc066b3d14f5150a46562a18fa2ab91e0bdc6db05cdc3406f6d3d929798fc4345ec3bbadc1b547fa819c5d80808cb4a9ce35fb1396a60283d35ace671b0f81965ca4c5835d37fa66ff1ee909e716efa867164bb4020babfda5e8e6a8d74568ba531107385ac227f2e95512213321802a7e53e052d98232290bfa56791dbd6c00397132c4ce499f232a8ef7e40cce45c9f1df9b7136c9c4a1bc997a0eeb749f6bd7541d907b7907c25a9c2dc75f9dc08a3d4c881c9648541ba0450e96ffefde5d2a5238ed9c19bda262d1dcb810aac5f00bb6699c6f067f4dee94e34783d4e8a32a1f7d29f068ad0d421096f6bea451499251123a65f87a39c284e3bc75cb12d9b38f7fcbbeec640ddf732b6346f763ec3e6e09e8f820fb4e7c605dfaf0806d237a77ef79bb0c818ef9e5f96b8c4f2b75b65f5f20a6344890a6e86ec19195f44c47ace149c60ff07548eef23957c779d8025e7ecebfcf47528e9c697d97da38831737fc574debf71491f5b229fe724eb998c2f2d3ddbd70bc24a5b9b9c594c14cdc7fd1465f2a453fbb9a0d5b8484422667c88576cc5dc832239f1c8408ab9e8ec023f993bdc4e54fa12bdeb989917b27e7f52c81265a7fd0ab3782ef69823187d051c44eb3abdb0de37ebbbeb701c27006e1ffdc8b8fd20d69a10e8a966c41e6988023f80449b9be1fa520371a86a0ef91f07727c02eb5b5833f213f6536be4a25fc7ae6d6e625a496f5178de82d61e0c886b56fce8a009125e8cd65b8cbcb609cfd374911e5a0c51720f688bcf24717f4dee1d5fa89ca96a7faca40a278ad183f4ee711a37639cae1d8b14eed94820877e48303409c7ac0864a213359a0368c729374a886501169a23387093dc5793fe0007a09ef7d570fd077ccc8638cfe8a76032482c379683b4f68aad7571cb40d319e60ef8fc0329f5cee16cb9e268b6828f9b853446eb8aa79a8a8cc00941f93338124cd171b1d793f6b1bf13f710ef86be95946a192f98e6cd088190ddea885908086d1c59ef47d7a60224f5151bfa7d6523a9df5c6c282a02a46076c3cc83e310097e975cf6b962a57f8c5d7ca0fe6d5622d692fab1e804a343a298737690fd9dba087b51c20c07b6ff97f55fddfe283d3212b04b52bc39060d511f6047abbd941203528cc9651b7899f7539f2819381478eec9d8c3ad2271d8bf65fe394d8d9d1e4a73adaee395c9cf1bf80cda2141ec25607f9a3a55df0b561289a938149652c18431c0603c295f0942e19d551605a73a287db011d1f1047f052920e39f16fbd25ba03f87c03efb060efe53878a8a94fd6b748b4032d02b4320b76c40a3c0cfe4f22f8e97c487e9c2a484ec2b59912a9a25ef2137faef79d9aa947fa7402ab2d8a91ed2ffb3930c9c56bb0cf1ff4655c120dcdc3b0d12afe1e7f842423473beb7acecbd13941712c04f76204ce68b78458f62e1faa08793329cf530b3b4eaaa24353aa2f8c66e86f1881ab056065092e981448faceef7dc4babb680ac0329e5992c7f647b85758c25ab366ac16670858f298e582e0f6fe532596a54b3a06fe6b043f21f1d8882536c080087a51934bc11713dabf2c5d5c54064e3ef618cd277af42a5c4f0e2c2128ac9d5ff474a2ec6abdf49b9df0265dcef66fedd4ede2c0f75cb3d4b57dbe77e5a3092f4790651342db5bb9a3e79869b8296aec41f17dc182826f13ac66bcf76fa08957d9dccc5f0f80e270791dbe0bf1d9e692eeeede8416e39f04c2a389cc6a972baacab90294be44bd65bacebf06bab79000418bbac94216143aaef499317272601fa0a40d64933dbfb0457e30f3139e6abc3fb1c3a01eb7d64f7ff1882a98fe12198cc34e6c1bc8ecd67458feb155d6f8dacc47fc35b3e1c2784d8254d10663d6486d5bcf20d07923f602c7cd6f61dac45ba1131e81597b2313e5e80fc3f1cb619f4ca2b54fff98ceaa50da6ca565521b645dc313edc9099a368b0f4369a3871f60e978dc03bd46a1074e457376b7d9117d22db5c783d2df8d430f753333cd53bfccb9bdad218859b19acaaf8ca9c3aa92ae5c868f57e2cb6e3b901b73131ae1afbfb03de9f04fed69c07f33f539697e41ae59b617208f43d0187a676b8be60661f31d2122782bd5966664758c471e86f1639c35482fe8ac09816b3c2c27727d9b5adaab6dabebad8a5726c12e7d2e93a38f1469deb2edb1baf58640c58bee0bd7329091c214690ca9eb63c7ada5f9e912dac73903af2341290f297523268ba2a9125cc4e6fd3a77f02344649a88af860a742ebdd7b15ac3d34e5411f94c8aa7df724161bbc3023f66e6e2f8a9a0f445a183fe0d1e419c1b46d938487f6f64abad7c1781c96b386bc9c97e4dec7f2f3805e2fbfb7c5348c3d61c8c8d0d795b872659da39e2d9b1aa621bf13d3211cfa0120879a0c7d0dbbbf629ac4ee78726601fcada31ad2a2730e4b5496d9bf1de6e5a71d9a5c4c983647d47e5935b9e2d11364bf729e03953625dc05772a5207cf84edea7ca557ab89879e667bd85e456ef10dd48a3721e9d26c86905c4794df59d203f7f63300c00bb1e32491991a7508b422c6536fc617fe39612344abb30aa4240f83005531857de602bf03860f9c153da81e0936d174e44366754a0e211ca40575c1c5d859b3e44b3ceb59930db51115ca05e72b0ca1364ca6850c1ad32aab9dee70f0049480585bc7881c80a87a767cb3944176efab40eee590cf427052f64b9c108ce1ee5980965b4302009fe45524331c2bab0e22f97c706e20ebb7c373850733a8c438865b4e0fd7d3df104565521d0ad40b660936b6f490a22ab945c8ca3f482ead2a97881c24c70958070b54d5a2f697a6106785cc5a5c17fae24149596f924ba6d20687f510b3b2069085a7a899e39bf4b0d506d28f8cb967a415af41a520884d215b98a948b296bfabdef0cae72d40dd013d81bbac5018e7e52bad2ed4ab770166df590c47a378c967c9c5bff3523b49ac600a5778e3b5a5f6887628623f82d522b3f4843a00fdcf00ce5dd992e870345d9eccc6446d6047a586befa47bf2e51306b83f528a01cf2522163e353e51a1b22b10fbc61ccf2d99bda19932e22b69ce399a80a7bee440dacaffbab14d18453755579ebc60f949b2eec2827a8b4634127303d7fd12bdd94f130a0a09228c53b7507f55108f8e82fb875be85737547403d0506044a1ea735f8d1b469a4bd3787e9fe8555ff9dbb9dd746ba72dc6ea33f31fd4e74c8f6e85b6074d8f91f06084c72082f3839970a4e855461241e7b065116a82c5a81d6af9dfa4e8e73a5c754c3ee41670c940f7242bd55357d35a9d956dab44ed6a6766ce04dc51b39a0a0c1059f39b18be74c1dadd6d084f46df0790be9b951cb2699e59601e2d45ce2ff32355ba462e44946d582b3f8075724aff2af05ad72c9e6d63423d0474cbeaac105d5afcfaea79d180c31a2bd85a6f5852b6ad0f7d18d5b679e37fff0fc30dc34344fecce290fd5224d787ddbb9d8bdeeab508454a4ef08f9f1473fcaa4b160fb0f0acc9db08bec0e705efa9d46430726b8689a904f6eec0b99ed3d9942a2be55c2f5d47ed1b4b883b195ab1a280022dd8fc1fc05117da8ad8b561067c48b13b50e4f17707e713c0d4faf331ff811c2274b66cfec06ea605be993602f377d706df4f7a52071ab246277ef615d9b8c1a688f0e5980a7b026156d1b4a3675e2157b9c6b81e026dfd5bfcb049da4a652553fcc677affa83e94f0bc27e0f8da1ac79e3631d4b0d0b122b206e75d010c41b361cf2ba66d7eb3263b701c5c21a17f9f0d4025be507ed6ec87d68c36012a26add946d7f16784f335b163b99d1499bd55b41b350e5546b07d56a0dc2fb62e2a34926066b5a0b3f27bb8de7b94d77f38e17ad921d7b7f894d2df19bd3c9d8583a09c7e164baa26602bd7ee91fe5598aeb3398f33242ea27d8f72fbd3d25de3ae6bd08774c4fa0ef1da16cea9eec25c4a4c94a2d0599de1259ec97de5d52b20f78a32848a30d63d90c7a23dcf29eb178cf844d331a2518548f1013ec1baa43e894cca79567964bf56567e82759e87a01ef7a0a31dd9eb20a609ec4ee48f9bb453e88fd9fdefab01b5cd8eeb786adc421be5b7e0db59b072224e54eae2228b8bd05660712b1b2edc92d4fdad87134ff46bcbb8795bd482987d1309260c05138174aed7673491d2f879ae1b5537f4dd8aa57c1b37082d509b603a2c46f23a7ace7ba4c8b49ff6b2da31ae88f51c894d1b194935a8ea3ae5f031c09cae2c389361587738277d28fb7820da9ecbf0c77400096c9a60859c70faadc60a90571b176cddbff0a5e74a1c8a5d164693bf66e38b9fd7a95193a46ee05bff9edab910ac0cd1bdc3e4b1cd7315023541ffaec1838aec4e94fdec7a3627e798bba528d596716fd7742f9f0b048b5deb4ebbf1bb09b99626f0a2cfb7cc22c85b923a69c581fa75d56a4ef190e96a789378297d6cb1e5d35705269ef757d1e8f7f9247d93f90da677a69a51bd253a3069c17a648b571ee62a25371688954f950bf76483e1ae6e8783ee976d6a55e5a9ba30ffe3872de06b30bf51bd38ec05ad360ce92bc62b7fb15193fa9e66b6f33b63be273537a63bc50e2e75f73d814c96d94d284752eb24d82e439dd6942a89e3eda3cbd81eb9998c207f1de379282cc3136d13f7a88a256b113ef21053c353866be1099392c1926a4a80f1aef0530c10a2488abd3bf78af01a9a4d31b2a59b844d082ddd269d7dcb7a807b74ff3ed8036923ade3f98a8c7d30f77cb426a0a67a9f15f048e491dd966d0838da827602158e424956d22b68118904be1a7cc63246f27771a6187ffcc71f83c441b2347e7b22f79cb5889e27ddfa773908fe5c21efe754776f3e5cff273b4d6527f974d6e6f2d176bca0a49a46de9b85fa6c62fc0695f87ed5b16a1b51d608abc22794685de4dfd95d1f1b86688636f45bca5a80d7f96657404c38d9a398865aa607c8171afbffbee2db63a2c98fe3443dca289702f69010772c231460c90081e2a5b2e927f0696508dacdf702bee0c630be53dda24080873e9ab7db9a2c6fd037bd34208652f7df6c712dcea84c980e601478aee9fd3f6a01761d262167fd3d3936a0338f3ef3d275577d611443c8f7f34837e88e36eae55e47ca2c4c85da01172010944a96c268b7f2e09087c620e5c4009c0bda82bb68e33e9a401dd46fb57efd026620429695bca61f56e36f1fc80bcdfeec5f1983c27a77e7e3a7c731176187350539c2a644f857b254a6191cc0b9a1c1d9f13a724882efec29d60548063292829997de4f310a0e780e7d12b548bf075e0ad73d07c1baac49119039474b0bc73d02b9b142ffccd5718533e37a678ab4d521abb23aef8899dd8dafa94785f376d04e0a956c2d324a8b03e039ea8583596c89bf58c72591caca881607d19d58abb5ff0d8633bfeca02a193e66c7ca85ff2c32e06280a1e8fe7f4fd6edcfcc7ad1634341dc8135e79d5d5e380d47f29e2aee6e4cdd3cd854ef0e096edb20115f4f037823c4f1dfdc7a33da1fd031540c39b1c2924da5bfa8f14c46ca9eabe0bc203bf68a87c725b84b9ad478a83e65b4c58c3dae774a91fe586c41679b68404e3fd4b6411339f5c4f00860e50749294b173ab51ecd2607655d71d6c1f90c0d53938ee5a687d172a8c53bd2ece2122f19a4b69576a0af206b2d40400f43c70879dfe7a22fac12423700c9594fa873c475945cfea3f430c618e03b6b2a98a3247bc3b9f21a02359848c4acd896f6fde9142ff1c780492dbb15b00906d729aaab2157ac59f2b7417b09bffd7242ccee10d15aefc0e1fbec3e087b952ca8978c0e452b41df95d35b6f21db150ff03bea22d0213f9d4f0a60995b73c2ab80c055fb115d9b09485444580ceea389db61695b35065c23112320a44130633af332c3ef3c551df13bf97a0a984e86b9d250665e34d164ecd06ef511f8e36fbdd702b4ae4a86b7529c4a8ef01ac7ea9f03aae1aa7082a1d1213047f28d9d670a7b912a57490042fbcc31a4fe4a266eb405537c3594982fa7a86f1597892481c7db6793ffb91cfeb6f723b85aaa9abbf4d898245d23eea136a78d6e5c0d71feb50f55c195569200f0d3c51acde3670dcafdae81702ec4420c8adf63996e17e6a2469bc023c0df7860b36a369d6cfe603271aaa2a228585eed1995018877265437aa1f8e32534f0fd3ba5a022b2577ae747872c68d63647e31748fc7242eca1a3b092c1ac1b2ca9602bc76a5e2e96ebc5481e5f988dd61a798329ae7614796232108df79fbd26fc074c43257b9b500758a8e88d342a935ec1995a3eaf8538fc7cac38a800bd5a6e355dff1d11133eb72390a0662ce03b84ee85b5f5c729bae896a80e10af6e84ca774729a52b099cedb86fb51618b57dc5a4de96c448a6bbd0abfaa615fc4ee36e2a37c768e270554ca23ae6891691cf300385dde57184860f8bb736ae0aac6a5b4bdb471e6e0ecac1cb8ae981bf082e0f3ed56b3b748e92476b68bd9d5bfe6e8140b56232691c44df5340058534ba41a1bdbf9db9f6150968f8efa885163f94ecfda64dd566e792e2a1e196aeed6bcfa46a38d8362e019064480b112f59301870c551e307d158b2a0bde1f92cade3af8e86298622f2fc1a1fecf3f034b01033a7b1a79730abb4396868f71aea2dd888b1591e367cf5dbfea2b1f28fd468b9b2fc867e75ea46fff9053bb69f329c459edd82dcff138dfaf4bc57abbe70f782e1194c82a0c2ae05b1e9d3a35e77b644709e435135b78189dab30e55106eac7a12fd4f6425abe9387172af7367473606997bcfb7e21efdf9bad1eb02b321a826479211a5abc5e8f3d68491bf37edcd77a693266ff769831a25c520e1a0f7cc703c6755a779249b06325ebfb4b065326b21e8f3b50e597ec3c16a9543b8ba5ee1b457f7ad5063b9eb60285c6fe99aea93c8f700b4ab3f97f1ff4d260631b6344cfdfe46dbf6ad4933f1042ba3b23b3b5899601e00e84c45029a43147b899280f50de4c29b3115a2e668fc42b11ff6c00f8ed348f3e6bd133850bcb287708995e1c990b248e2ffbfa7457a5e9bed22ad85540577a086b9888b106ac80427daf3c0fa7a5121227e64412ec0ac20730d2430de3e6d10e9edf645ad16d883405415c122f90ffd9952ddde630f894b5b879816270777fcb0faec144e2ae0cc7a0afb3427c3cdc11b708e7c8b3de98c890544d619a196079a0a0918b21ec5aae917147d15c5480b382e52d67b9aa105231730a7a962ae14dc710caec9fae0596438c46c72c9190a7d564eef39e2482e7a025b013a656945d99768d2d7ff2095571f6a24bd825a73cd46440d237db7c3e766ea6d0dbf25cf1727e1710a124a8cb6553758e4839fc9c73850b64e16a61f2200668bc8774666bf76bbfb2baf9ee03847f223ae7e278a33585cf41eced0cf3cfd09e184f9dae3227dcb99d9684582d6aa1f3f9b353285863b2d944e0fa21c0f116511e5ceef433fdb42046d848b382c383233c0a3e71b9b03153634fbf943f648bbc829449e205b669993fc0c2ba15961134337b06aa2d25f927ff4cb7f17a93bc807b2e7960ce9c158c17a50c6b957835774f01754025cd6b23624d6c0ae5bd8b55f1a2b5b8284be465057cd669f2a78b23686caf238c76319270566112d6eb1251f1faa75c40b98134f9cb34e24ddb12a2770c932bd067919176a3a97c3e96054105b4a907e8cce2d2a5115eba3aae9075f6e86f43141b9b294f02e2f7e0859c53160d3ba7648c669609859576108d5180f745b2b5e80854fd62d5dd94ef5b19e3c4ab632b12ecbeeab8c14216b4fd55d6e1a4b30329389a74e53f9a83be14d534f52b198915f1f1cb38934177fd3e3b6393928c177a66b2dfa0597a1367a2c337cffa5b17044b141016168e8266003027990139d1de8af42ef5094928a0da7552900cf81bcaa4091425cbb3884a691c6eb0616738e37d5c2ad21f0b6a6146990b09b6b08a31cba7ce30507b178f492f36dfc3a0b70dcfd9a43b5e5a8fd47455e2a90f0d0e814f385627848e6b87f1b047429a0d7196529f4ec27b0aee077f34c87f97da507503d33ae9d5af40b2a917305fc15723f510a9ed6bfeedb1c988ca3a7c288fbd2cd0414c08cd7eb48790540932524a0bef4d511fcf0d34f8d0e87f606df3f4e1eb3ed88b678d0265b95046a6deb38d7950a5ce68bbe6fd71e556b20a24cc376614317fcea0cec82ef2cc1cd0bb5f31e45c274c397dc6e1d42b0a77d3ebd3f32c6046994ac1ba0eeadc1e3d845b2145f34e0aa4331bcbe37035cc9060f6eebb418df73e75484c44cf2cdd9cbc8c5c00be58271ee41c62a13858521b8f9175682390dda18260cbe1f42437e9f95d68a765082358e0e4edcf5df39092f1ae615952a5a8795dc17604b1e573e215f1292ba6fae3be84c36440f925eb9cd88fd70a398caa1d49e98c52e0e23c3234905be48ca6b22d528a2c11c514c1a794a7c5f8b294bb7c264d0b60b344f0223939e925cdc76a4fa2123ff0e11333497c7e3247163a80b0ab24c80963e53295aa47746c15bac9690734893335d88acddb97670df7c333026b1e50f5a26f030b4043dd8f59596189dde3d2e36f11c99f20f212c08a7c53016e56fb3501171be0352c98ef95cdbee4915e795810370d7e3fe1b6224c4bf98af30f3848c1e56a1e9f6be8394850f95c3c39215eeeab89fa551fd31ec3d8ffc440e0a2dc8c7e601514e589428ed7d863443475710256c5620557105eca20268a5f8e1d24c6088d23737bce76d1c61e23115fcf26fdea1f0ea1ef8bfc0986ba0c4b93a1ee21d4462df7ca1b48bf1435c6b598eff21a65a3e520c8fed4c86816b89c471d7337ab33d36fbcdd26b19bc5a9d117e1376eec5bebb694b8bf1a7f6950363beae89697956c4a4dc7ee73a25272e9d4734f04bfe42a37afe5759a0e69e22769ee6ff924195c2b935c389677298dfc6a7477451bf5b56fd3ab9199f39fc8b1146c99edb19fe95f830c0dbee0262e3682e4eeead76bca66f0afdc2bd95f5cf5fcfdea97b65a4400657a270c5521323583942068a57f660b99d26ba68c276ac3cc6f4449f6bbd603a42756ea8bcd047a151520c937159c642ecc44ed1f8d53d436db8e5163e685bbaa5ee56f7b849e00b94259cf4c7548eb5d970c90ae2d27a9b3f9b5eb76772a5813e8aa93de040d7ffcef6a6e1fb1288360232ebad02343676af0139cf85c2e00ef35172f63409b2598eddb014926c5d48c9f1fee0feddc06fa638508bfa60c4c2c12d9792eec414be059a6a822c047efe85dc345f1d2c7cbdf5d981184b284c58bedf82d53edb65aa186e35ba397d77d2d7aa19e746a334a79b81f7a0c08dd6a7d0058c1d2b42ed71c06cd07533d12db9c1877cfc4762c8be49ac80b4c4886fd349030ca2afa6047ea5dbf1a6bc61efde6efe5724e6bce3a74b18a1628101a9b297ce0e26b3c66b7ac8c7d2f1309ec4803baf2eeb2c9b6003084177cd9bcf76eb613be7a5ba49d5b3dc55d7f42e6571a1598f7fb3b07215c41c074c00158af2e1ba575ab3fe8455f4a12fc5f23b6f53d8615b096b7942ad26c2ff0b83475b08aedef596e5983efc441b3c9bd211d5447a4413da4e2b827bec3a5794628ea8b07fed432f6eda6bd22029f007c9bd19d7526d6be47995074c298ef8b5ddd8917f6729fa36996087d87b28506e6b6c931b834757956b36da99ded88e0c1201c67c52692ef572abe37af37ce88d3a611e17329effea6db438b7054fe957dd1cff56afc50d75a4d31800e819fc94bc7dff53b44813efffb2368468af33da0e6d2e61bca238c20375d6f8f28577eb6b96043a1dfd919edf8c47affd44568f281a7ec10734a51c660671517d24740a2020980321a98269580ba930cc869d5fb0fa7b0e9b795b1cdcd2cb78cf2519eea6b7b52a078d030e1e589a03ba5dce3dc637cf4de2d1bd43fa19e99aabfe74dee649aa1356b365ecf53ed024e9d870bab8db5f3c136fe3835bc5e978fd7906a3eb1852237e942c9e49cbad0071bd584361ed5f80b1dd4fc08881f51e89b7df21baba7670f0d39bc2d7f086cfa8bc2c862d6a4ee2eedc1b1ebb6d11e63f1c789573e8442039ac158044b097a4e65e3d2b3838a614d80fac5dc007b5da3e0b9dbdcb1517f554889e9899c0bdd4a84a29f8dd89d49044acb83b93769699354a460b5be1f46042c6e5f1c11971a989d00933f093d86e43ab92e47ec99609c39be28bd1956afa803af5cabbb3366780532d3695f13b215b0853835e3ed2cd07be61a15d5591183c872c94fca279fd1618c290348aa5de5392ada3564939b59531e6daa6386f629fd717a9933039708f5c2ab2969e502d2b6d8f264e4adfed5fb8bde9b0e9fbb609c6daaf3eef237df0fcd55beaed0f336e8a3129c1570f7d634ecff1e45bfa80ffa1e8562fe6d5ede26255a0198492bab8a090a808fa120754cdbffffa9736316a509f863b8ff14113d4b80bd50efea71cc6ab64ec841166f2babc7667ee930805e0d83ecd15ccce546cc8c46bf36c3e67e57084da11b378595ea7948733e3620c897df47db2c316057bb6ea516fcfbc9ea7ebfe91e5f46cfeb574d48812ca944474b31df9f91761d7e52ab78d02c2e9cbe3f082f322c0b69cebd1cc5e30d169372f4d6ab20329adb42cbebca39676b79ad9cc9e36abe703bf3558cd2adc0c65acb2b3b511fcc0d27d4f68954af06aa0e66ffdc766e130a33fda54bb6b9dbe3f4a8076cf3ee7912c50da4dc9b36b0964086e4ae86f6b3f609244cc090233d9678f30ffa6068b1b1d886194a43a5c3b8383b0220d71440d063a1e28e0a4a63d47d21dfe67eb9afa5964fa6e6d6165283d664eb1da850259e05006f50c5a40fcd9e76c38f829ca139724ad1d2959989fed9dd89f0c0f86361e306a130726666cfbb4ce5beaea84f2d5ddab53adba5bc7958dbc04fac42f88631fb0b8b0ab530828d4b306942d9392119704779b616666af9b7dc166cb58d12b3211e6a8fd58479160b87a10135079b1aad185a39e77dce2dde045a027f72b6a4e759a0c220ff884d77dd92f8d166f1ec2d8ea65d45474c40fe546bbd8094e390e19566cbabe60766b2b00f69c584184897967d9225557ecad3bb71607b8fff2172d056f6c02f25d81184f6a2cd606f16dfd4446f1e24c66fd174bb7a014efd84999b387569cb5304be847951e7cdf1c585d7f152467911583744b4a758b0b81dbb6bfe3f224e68136a65e2ce4fb45686d7f4d3b86e19f1b731614e90b16fbaa33e4ee99f0127f2fb18408f1b41715eedabc0a0ac29dd6dd729f04f10ee2ced53e897ddee86720eb6a87ae37d5df3b1a7fd25df7a27ffc30a753b681362d23caa85bf82314b8af94fe2e0d2f95b087ec8580872cde76804fd27c583c4199b7fd719fff32cb643b3e373c94a211948951f23d294c4d66fb1bd46aa3f08a23be8e82ab433c5237cd1af1b860ed539b0be11f3f24adbfed7b8f4f094894dd6ddc7187b2f51caaa02331fbb9532a7caae3e8744afc5c0bf4ccdc9d940012094118c724b18af33bcff95c10637de2e7f89f5a41d55eca76274005bbe320a249674f9d3475313ddcf4475092c9145c82e7844213e6e90a9fae66baba02f33a814f54d88fcdf5530772258b4d9f2fad276ff9c50c649fa0afbc0326130ad57df04c381a31f4bde6d8875105007f9813d17f8d3e7fd889abc0ee2ebc545c871a2876bfcebdc4618ad8e4648e3b868dff561f32884431c110e8901f614645cc7a7405cc56aac2c15dd1918e368ca9238c7d4931316befce93b4d6ed0d6c5380dd516746a9c6025174a362e4dc301b51b4beab3033f40cc5f5d7bd156bc99222b48a92efc9c88be66be4f864991751018b275681d83dfa781b423b61b8f90bb7c2289e8fef5a837752e131c3770b25eacd13b9ab5dfc7994c60ed6664f17efbcc9249ae75c49973b70ce0ae8bf90d383a5ecf32e26584ec611847584acb16688d131b9ed433a6b815be61553cc7d88b73786ecd724f7a347d697c2226fa0fcec70fe6b4f915690ba27a8e67fea85e170679ad4820eb0d90b6ece630d26282e85aeb91433321a17581d247c6a4f074ec522cd85520ab51d68c842813b3bbf5395d49d086c7cf4c2d168cad0514a438461da484b10a008c318b6ee924f7eae8eb6011e0201c24170b0947bfe455df53bb188976747e0e28d520402850db7a48235a4076ad4a22e9b06472aedcd782551027670178e83c916b23fd41c7fb01588340fe088c4ff7e3dc345c40a3737454cfa340c3b05fb0b71ccfbb8e15d62b6ac1b097c1b2b10fea55e55ca5b278f2b63bceff8a425e2083c1734002c085611d1aa73a3ea169692b882102a955c6e2589698d39731d024da091108c15bdbcd1ab5d16ac71c4bb2cb801f1c21e7ccb6570d6f2e37a49885c57a63779bc5595a8aabe19e70b6619d3fc587ab3284c3450bd9f573bcda9765b1836bf77b79a8ed1b46a630186f937b37792a159a8c9727da22cace02063c9e810f4a64d05302939bb922a4892e20db6141ed8d5d930adec5941b1c724ecb6cc203b5a08440af5b8df91632962d614daa9d04ce7e1e4170d56fe0323715de3f8c57a3784c57813dca2e5497980694f1b5a06523089a4e4f4744659a68779f2b9fa5592b888cd5604845b69d76381367793fc14d2e0ef4e34e9fb9a40780c9e234322d39c75573aae0bb5701a7dfedba8affe2a738868bc0a4a5c67b71cadeba5819f9bf6942704d4751d246f881818b000e28930449d7c934e387cb875fafcb70b3594c9d97cb9b2796136ea8ab44c10cc9bb2738f08e9e0d4a67ec051375e8ead60f8f100b3db76c616afb7160522cc1cdb3f6a60d0a3d27306f91b94c1f76ce0e4551dfee1df5884e6d3bbd2f35bc2f38ab154cc54565bc7156c5ae021f69544d1f89fe484ac3ebd1da411d785302444865402a5ba43b054b88eb41bb2752766ea6918bc44a326fb0197c3c98e085a69568d9626eeac8f20f7f726c08fafab628558a86573cf972d1ebe32a637c23aebc47d0937a5d410495719e537b83acdbb238ec586d0005f48ff56042807f71838630ea3afa8284c5fdcdc5ef84717749789173a24c1613ce3e4f80b2762a0922f4787914b2b8d6cda50fc9d6abbe1fe0492de5c3d8ded1dac7ecc41608ded31164727fbc3b552f5dca1fb4b297a87373b42d87d6e2a90639d2d58106eaa5889aab771a0efc25ea7af0d9e646e90bf239428b4ddc3b678b086d84646cf34debb50da6c48561b1544732a81d2085bf7a16dd2693b23454e92a41ec3e641e24c80e42a52ce66fd27e572d3e0f83ca3516eaf5b0b081fb013a582bd369be12a15a0c0ab093b87dc2ace01f45e0e1e99d4c012132a9fe110607004731e2a881d7b51e0ccf9ede04994a1eb405316a6768749a84af9886064d541e88adeb7fa65256bdfcc20233f1be1cc963e56827e26dbf7ea106467dd6a04495ffeed3b0adc0e1b4dc8463f48117a9b2a742d904fee44dfcf9b9297eba076a975d6e96e9d19c9295870392403281141bce04f853f18bc487d450483e4bf652c85908deff71f5df78bcd32f7602fcf62f3f64e4bd86f251f56095b4b8fc2c208f247c306726e5e09d6ff333d8968d262029aaf669e5c3b0a5973f36835965eb2aac7240c7ffa4c13d714b805f6fc580371d8cdaa1c710523246a078ed6a6f87746e43f4e1abb3fe721622c4b763d340b816da7437ba6b6278cd4ec94456be633a2c93f5e0d38fbc364d882ae957d87dde1e5328c4a14a696a339620d3b26edbdd0bfc18eed94ef28add4dc7d1bb48fd98f3b449e4c1a3fa83b71e10ab0b832639d82fd5f84ae3e9b75679fee1513b5ca4bd468ab4b656f21f19c1ada23518eda2eeab5a1e9bad5eeac2d0ce948038e424afbdf0f8580ede4a0a13905aa770abeb5b68ed2c1e58a313f5907dce4ece41fe8e345b2e21ffc0bbdd0be50ee4ed1dcf0a3b8bdda8a57855681f5b5e5c36aef0d476496abf65c3df374d2b5810303d260f1cd7838b466ec13eb26ed8b956d94b03b70eb165602ec3a88398d1396aa8c0ac34e47897f6f5a755ec04cebd0d2e181d4d2c8600e1d6dba779c54a75db6debaa463a1e67bc6f7b58ab203ed26810425f1ad820ee95cafcffa5fa0aba3dbe1a57d6e05bf39d1149589e6c89b93bf3bed008a0ac3ef96896b66f81f73b9215d074c45b8365b74d50a845997a3360605aea77ff0b98486b7f90ec5d0d485191420f657ba594783b94bbbd7c56908009a9867271b4637573d27677ff22c6fb00ce4c74e2acd6851bdcc4a667db21ffdea785cf7ae8531731414fd3897de7f6b04e13de14bed9779ed2291b8ce1294c5163616494755b2b735803f64b836648be18b12869b3eb23076966b830a1a97544955471a64a30e6fc15376c476ce573678f6d146594d9ebbe336fd071cfdc682b3e53ab03fa4dea2cd9755da83c994d639f4b283fbfd44b68bcf41ef6dfecd441934f934dfe84564dc8e13250412108250d692f6ec2b540d0e57b35dc103d8d6071d59125d9d3ac3a92bf34d0af45ef5f6059ac31d42bf606fd41ecfc82872593c62def77f4827bc011b7fab95fd3bea2b130534727bea0192c66aef9b62c50ba4fcf09382610399398d52ee85c14f7c9a029d93bf6246c3c0177dcec74dab87573f2d0d15d6e2493101b3dc3d073e72412aaf6199b1b5e075dd19c546bcecb4119e39e3e103d6694c2a1b7bfa0068516eb6b8c09eb022a884188e1f4491e61d57516511deb91ac16bb8c79303c30a332c050b46237b85f0b86752fe978f5b0c2ae79ce0ab839babb64d3461dd328a5c242590411677411546d3bcbdd185d02a51bae9cf9a428fa3c67a304b37eec43f01c0630b2f97a811e58be474986dc8aca85c103c0203fe3319d47a1ac1d1fe11c08a78159b0d43a33309306e4178bf48143b89d1095229c01c64bb3dc0f35f47a64d05ae693a05d0544c5bdc63d5498b6b49586ae97be4fc49cee3c62a44215e2933379aa2e4984804286773018e787ae6eb027b013cfdb275523ed0ddc3ba9c5239df524d57425c036921f3ddb5f6b6014bc4e14dca70331ab8aee9219c427af28aafb819b20d84e363040eeac27a3601d228303fc3b843ae97c684b4c070c4fdeb3c82156b547ba95ab54c263a76a86c8d6cce06112713b690038e0f8d09008384dfaed1469010c6e71181b686208d2e23709eab3034bf427afcef96998e5b9881d57d86990d46a585107a6f675f15e072df21d207163c874621d36c3c5ed29ee42695b72e4ad5f10c43df72c2cd6e9efebf99cef9d75e4a90ebc09d67c27aba2e8e7d3a5a11abbd6b64524d8eff709315969b1b41717e740bb39a8903e92d51c1d779187cbd623c1ba156cea568fd9f4f44038764bce621c89e31670a4283fda8856aac8fb2648a4d7effe13a91e44881855d94211775f8691ebea7ed1af7aae4dd95a11d64af0e0ac5e0a27d5ad53f41624bb2c50f7da4ef24fb4122154f99291a83cea709406584364a031448ecce92bbe3cbb9872059302462d919feb417ae6659f16565ab4c31af58d7b1870f8c27a412710b84a237c63d30c44618222fa800d9175f024eb65991ab39b8520483276324a5c6fa73edee830996d736be6744b251fbf4cbe92e22fc07768e2ab6cbafba812537e15ac73998f33fe299a826ba7cf0812debc7fb2a2a8ea939c6567cc280c2ec449583569381fab4a4b6fef009fdc981bde0b44fc9f704b460903b8370e1902a5813271b2c7c8c6d85e2469746aaff6aba02fabf9e80d09b8c1c59ab2b33ad82c1dd23c72984450b77fa1f92dbe4612195f2ce14a93469eac485045fb52c8522cd35022d5ee183980e5382f8155479ab71521bd059cf94e53a126bfd984f920560b86cd497bfa20162ab8d81dca3a5c220bc3579040265145e8aa3b0c5f441f99a3e6f5a09f8a2ee03ff57ad83abf7b5b7c4f92c9ed9fe5e81041f53dd99bcc5f59ed71e4a5ae2ae875bdb6796c5950231ca6e2926f0a50abdc1899e4fb29e854dcff595501b812005bbcffaa5485b070a31138d71bd53f8a398abb4adb7426c8d1dd030e7ca8e1d880bcce0f337719c9a085c15daaea077200423e5277bc85e557197b6189291927974d9cedd948fabba0e9147aa0ac15bc294718e076f52ed6295a6af7ca8d92d663807645a07090393b65e08f1f6a21bd97415335568b3c7493a6fd3ba47eeaa8b81ea6724fce27f49a04f3000c635ed19ae858060532cf296de8f65d7567d08c0e7e3fd28e2453400cccf089dd388cb98dfaa879672b0add2d3d38d742bab12e6b1147ad4fa35ec22d40c94b1ea63bb71e865f6bd350ff0b156a32706d5c59b687f3141ff4abe9bbdc0bf04137e0099387fc89ac5ca3c77a5916fe8c0425c8c25c927432bfa2cfbe47d751b337d8dcaddafcc2132d88cada9a5b6fc6bce91f1a9f9cd47a3c58b09f9251f79544c3ecccd6c3adf56df2a3f94e4686c08e739267ff029ac6f408f2a3283031924f5ce0408d6463b2d52a82492e55c117e5a465d410889dcc289b640f7950c7b308e879fcbb27a77c4aa7574b3d12734bbc0d2d86576eeaccf603b007e93da71bf1b5973d9cc3590dbb6e09a2750253669027fe15b904e125fea9770e6a96c4a766cfa558c498924d62239e41e53e2c17bf6ad42a5208d679fdbc1177539d4de2023402d3ce5fb17f712f274fc08de70b7b729f8eb015e968658076afba59d351de4f1d6e23c31b0faa89b78aabe8af830831ea4f704e84654057ba2bc87e04832cc4e8748cd0d78a3da39057d876597df5b81a11df7c6d683bf383ac5749791bf1a170b5386ed464efe8dbb5df1671dceb5bb61675dfc3f9f066d8dbec93e811bdd97b3afbda2625a769028fbd7cfa71ec3773fda5ba7094db05e2546763089e776f076d5030d65aaea83fded474683a1aacd03e29c23891b4720323b064d5a4eda956bca9f81f8e858523adbdb7600db2fb9853a16c4f5d0c1dd9a438a0ba84a42a57b45e9a7092f8b9b2bd91fb71528e701abb8af71db18c343e80c60005530e699ed8503f122d21172ba8f71905c09a620c201878bde367c79f86dcdc7f3aab133774f454ffa34f577256036d41d67d88fd207078235e929f9a36242270fb53f06f9008f23905ab5a1a8bb34b445bcedb2652c9c7a4a120e9ee9d09f317a3e2c50860ee4f059d1eeaef8bb525baaf890493265c34545be866162d658ff4dafc1a86a15b039e5ce2345547d9eacb6a20a718293e2119a5e660a8608f9f032a54e0b7375229bf111e84dba1260b921cc17546e82ac81241ae5a60eb60b7438d4823e1dadf531d5a8062f45f87eccc5846a8f5a6b3e48a565bccdc1b216d7beb0c51bb2c395fa14b350fca235052fb8f0c50a8d7e1c23f1a5c6c1ded5838692b06709f9351f6100c73f55ceea4cafb5ee0b3c12b100e7d7ead69782061a047073859e4c05932c2a0374c161d0faacfa842a6bef9953490bcae36aeb2493b055e0d66d0963f96219b4dd727b2f39c83af35999a15d63b1f2825f8e4d8f32c515c3648a186e1e726eb8efca6cb0f66a79f8c8014911d555beafe03ee77cca3d1d6d3ac650e817c80b6d1aa85f81da17c85fb019a4d569c482cf6671840231b3952a167f4381d00edf1e7913cffe6f778fcbf5a5e46a07d517ce624c8b6300e60ad02da0daea53ac086612755dec75036009ced8a7309a1ccd8da52921dc4ca8310d20e0cbb26a0db48350300d16e73f0a5e6ed041cc54a7415a88a50f0c995b406b1153dec20cd3e15eae6710f8418a0288821bf94868bd8b48a074ef10b08bc891e06bedafc67935ac102fa89d5d96e688c5fa7c12d7e97349bbde62678a10063544ba4a19c131b58f11b50c5f0952be66761f3e70db874f13b7a1d32ff23aa641f560ca6e9c59e3dc2963b5be511efd3e13e1c03215636488de42701e4cdeb9ef395d8e38d5154ff23ef3559467b31c42dd1213ae20aac5c4129baaa91acb9526e639751ea0bebcd0cc58ccfddb41cc0aa3c29bb91f1de6cff1e696d0a90fe7f15522896f963ffcba9e59d826b1973a1393dc7e293ae18142718191f2cfae92e06230952d33d1c72085785d25dd78762598cd189885ce62f26647466ea226631876a0d6161651d43cd30d0f9bf575e9c984ff39ec572c6d28020837a49f513da009e6a62a4ed0dc7d2d6d6fbfea24e174bdcf4c0b0e929e327ba4a9e04610001d4f044d42dc50a25446e5ae8e1f6178d26dd9b1dc1ed0a8f171c57598f3f151b3efcac44315fa123a5d1675f7136ae4fd0f7132674915357690a86fffc828cb2ffb5f689ab85a8814eafe9c33a678563ae8cd4711bb5d81b0777d08aa04fe9cb0fbe2dbb3801411074c80930948f97a9207b14835d954b272822cd739fb0654954bf4fd3a7e95d22db443dfcad5079011cb9465efe8c25e127aef1131ba3d0aca9ebfbbbb8c3575cf707373f5de8b1283b1588048500cf7d2c3a0c8e12f8b9f0f26d3d40275f7e510528a95e9407c13f39f332ce727f097bd17cd650b8c1a37d925c139b98a134b9ebdaddeb2e9b954170038f340eab571e999b051d53ade8d6bdf5a38933b7e9ceef0afbcdff0b30f9dcc54a5f10068734675b53bd3c12f98cb3a4e7715f41541263040ddc6f784174b909a28219e95b8d1edbd78dd6e8e2a4b1b316dd97249c39ade220743b8f9e81bb0a5fb5493e7c7cbb2fc90b9b8c3f1964c2d4f42f8806c7ab535c5691615cfcf22e1005fe35c9413a1534a6d23899cff9783db8e1c5e18cb29855ef7092aeca4795ce72c6b2d47ef45e1cc857dcca2e2799ac339a5441382bebd4208ffec4a622286756d6ff819ba15a6854ca6bc150be85025c619b9b44b8ac43e7fbc9a05bc63beffaef348d391d9b8df6fff9631ff6b46dcea13fc16f89c1b27afc981c95cf3b98805188c7412285a7149571d637cc24ee3113ea23037364f54dc8766394a7889bcba2f5bed1b445001d30ad1a61f834652de3abe2b4dbb69bb0847125edf877932f9589f9ab5a67115d0c234c23ff2f437552b5991889bca2747b0af4d8c8d57cdc4a944ae63ab5481026cd85e06900c552e840d758e6465a9d0d19b0887789165d66fd05b96338e09c92f32018add2af22b1e12714f783eb2433a8356d04bd31d53134efdb7f0c94a07c1bcf1dcff065907a6298f098af511ce9646929c70e0910cd44ca9fed68d2073fe8e591e7537c66f24f89c708ea20a0126f5a5f9a9aa0a04ab2d8ba042390841541b398821699e9af9d34644c0dce8058a7bd4a86d31b4770d6a0631fbba6b865d5074b469cb95b7d63381d0424b5f49cc7837bf4104ff5aff52f770cc7a25d7d1a514dfe7afea036399a02d9f4f4c65894ccd4ec622e1cb4028cc84ef163c28ef4f285d2dd2e47d978de031ea7066892acccd3c17267089a96d9439291c7905f8170e05b343e98ea036dfbd683abf9998d5b88018b4c94dccbacd56411728ee867fdd4dc59e01278550671bd67d7f0e81bc1a33550948757809e4aaac4019784b7c7a148a3e0fa67ce92e13ce726aff2e2f2ca46efbe7393ae814719e26466a45dd0211971102e9b46660e19ae302350bac920d243921a3c285c2c538bbdab7ea5e65171526c999bbf604c69588641614eddd04ea068c638776bd1e4d42551d92063b52ac0b41561b5485edc2af55878764ad6d9639c79a8afb89d3d3cc2785267b44889b1d6555b5aef677c63d5e5d955ee28159421a3964aca8717be35ee56d22206d4323d05c818bb5be3a125fd51c03c79c092e40527a90a4930aeaf6de8b55b9c8df68e72f69ee98df45e5809b9ae28da2b5558b752d945f8953b2b917469c9b2caf3b816231e93f764410f7d9e5941870dbce42f459984481eb2af21db9565313923b1f055455aca2362906737e88d9382c9d3a2e774d6b29250ae4f839e0bbb14312abab425802c2475746d0ece0e1777ee360affcdd449aa1edf883a409053637b5bf8b395ffcfb619effe0f8e383f1bef026adf04ee67270c352a71cc6e3edae40e6fc6b9dabc80d806cfabc21dea4a999a20ca43ba5316f18739dfe053ee8ab848e91935a65dd8a6c1118b9ac25d5c8ab0182e4651da19dc5c694acf8f2934e9fce9fbc8d3db4d563feb7c6b8a8a96f655112742ae26b8228f74eb2e0a81b8cc5b230e98a49b548a0d8025727567d95cb06f1b856a3d14b9305728baeb2c2afb4769bb210e4ecfd9a2ac0f29353052d4e3bfc153907942f963f0212a1304c20752dbd4a3c3b4c9b6e76f76863d597b1a258d48bf4fd09f64a863c62639ed80f3364fb886e8784e7e6ed6d774648f38e1938eba52699a62b5286116d675b6c3681d860ff7228b340052f35d15398f5b50cb8cf0c40905b9aa7ead476526d7dafab7fe7ef34179c3f458111f9e33699032a68cb025b04ccdb9a2a2cd9246a489736fca342c72a8cbfa110bdebcaef0e9cb1f8653bbd5d78829e78613d33932f250a9113cc8cb70e3803550dc4d7f6ec55bf6f6064eb7d385d98e5fdd8393c69915e3dba711abc8f205a52870afa33ade050b5a42db930cc21e97b3b565a9847cc2663700b566d1982ebce5de6501605e1fbe7a253db71f83fcdddd8a6ca2a97ae220603cc7ffc5270bcd704b3cd2f8fdfff10facaf268227e7a325aed61dcccde021d4980ad56e2895ff165f167a4dff14bf1bb7688c2381126fabd9017ea067e3161b9433eabf8249b20aca8888c27ca84c3dd1570d4bc23c5d2e6a5096d47ff6e650af5c090e6937aba6a6314a1b7f66143d2609388df6626639f79a6d79b61939fd114c8b51b625bc13e0baebd1e7f1a998a84241f6ed82b054a4f6ade297fce327eb4a67c8057b64ea5074319c167b68e691f3842f60b4836a45a0f0758145e8cfeacf0f4ee0887e6ce41ee3a33b539f9ca59f414cddf07b70cebb61f8f65a5c9f6de7262a216ef630e0e38b8ed1545087f3ca42558a5083770ec587c523b2b8e737460a88f2a70fbb53d1b5e45351b3d47be01ea6eabe75ac60e300c1b31cac760e0d75687ed8a1fe8f104c06cfacbccd212f7d7182409680bd6782573a7721659f4327d118c231252fda873fb56d40afbce5c866056979034d05858fb5293f925f7e0127c5361c4b82a89c1f87553970180710c680c4cf9d8399e8710ea45e12c70a0d58d9af653b0433d79f8e67c0f0a5deb3595d9023c94f7408998db6f028b090ec4e6d690a69b1f83c6f8594d4196cf0f59df5897c6a4c8ecf67a4076aeff7d062ea69b6354bf6b96f09afba91dddaed2a552162206652edb1e488dfa7cda241c306b4f3eec0597d98da53295df1abf4c9cf72de59f297e75a5aed5e51e89ef9d66c18347d09698e684c0cc8bf2508b273f5da019f3e37351eab816f0884d33487c0c0fef157b1db83108a067313b4996d3a081d74bc89e6612c9c90be4f43e5b1472163ec176c0b878b6214a861ea7b728518323dd764b409c62754c86143cb8bbe973ce7958100b51f061438a679f8df6705645e648eb9b4adf3811c426a6b8ce86825edbdbde2973766dcb6b7ec77962d25e4059fc2d53551fadfc65cf63c4322adcfad757da6bfe1163632edcbcb469ec2df066dc404421eec5d8c691f822a7dd83d3c01a361c142195e38fcbafac0c2cdc88f70d8e8c72239933c1395258ed55cfe0f18f3ef87adfd6042c327759b802922fa0329816750cfbdcb368c0ad6f2cf6a9cb5a65f9fe2b9e8f13e753ca05c4f6686eb516c9aef0195a8285795270f193b109a19ad00ddae4f5700855862821131e69bfc6f27c6562376c5e83e2aa50405a2d9ac3e7e5c0a2c6c7c20d7d5c8d6314fd7c660ba3268ae7239dbe5a33fbd2e2b4c3851dab4e618557a50260698c7c85ca730f85091b4c0ffb76f807a945a01fccef741330525cc4d4ff2a83b906d901e014379c497dabe5bcf3e3628c486d955487268345eca74360957f302d8e7168056b1259a70f88e109c26e781084f373fc48f8679aa49647fc1ccdda318bde0df2b59ca241649e94860f085974fba5e26243e8b099c3584073bc1e86b2ae675eab6149384f85e120368567a433e1783541c54fbe916b9832a0d8353035878f99c5b4d78790d739a66493dc8ac2b9461a467db37e52d31dfa5b21a4c965791edb13a5ead8c322bd4fbea1a9727d54b5e77def8224da8b86d8bd200e9f27618fc6355b7d9032d93ee383ba7dc78d2df494a2af4735010c68b10c538a33b25260fdb99190a8e7215eb6453ecb91f35bc385ca00c5c4d6cb8cec0b1934792da40311a5e2bef8ab0ac82f48ea073e833ed29df42b891aaa3e35b20f2ce26e81816f8113b30c85c172a02d818d2a8464767a9647c227d6ed817fb83e43f88c2e985dada20c947cc7e417e9d9c4ccbd0281c823f5ea6fe99816d1a87b37673bb03000700f7aa60e756dec8d5436f4485693ad34d7ec0f1f8b08e5e81cafb5c17ac1629687c62235852f5bad615785f18ad74ade89063fe35d4a19e3a5a977b5eb53048b1e6ea5c335eaf0e77baa0b2ecb42f96f541e1aaea4d7cdf1dbff87b39a5d197f09f840554ad3309ef831682f2973901596096a47855598cbe74285f2d19a99b3bf4d4b31d8bb96d4dd1573e56273f05d14fe30fa0aa3d511cd3ea5704580fc8f80deeb3f632b0b750a4367a09091dadc64aae2c5e3c6bfeddd210cf9cc5b6fccd564dc4a17a590a2ed4b24af34b8e8276c26a51370ee9d899288b92ea5982dea4d7758454123836b32efcc4ca0a611acdbfcf7d7782d691a11b81943adc55612f8c94c5709106d99f23bddd9ef06ed5a0013027b94a38e9a829b1de89a68c9047a9c97d6e55675a0698048f00ed19f5941fb5372dcd6b1cba22557b863381e80118d8c973b5d9fb2835256e4867f3acb71e7d9d351354c67d045120db464ff2c578c66129c9816c126070cddc8c0f85ac934e400f3712d1158cbc09e86103b6f1a1ef6c87f8251257273386eb408ff5a3347d210dc9548ac4d51eafcaaefe45acfc81eddae3555616b66e955a50f6a6421cc9de79c26056c85baaeb47a780dd5b18d7bba41b0cb00493980117ce701451299833b1814c5a6dcdbc434047c3a9c887a3d326d66c6971f78133bbd3fa4d52626e71026b66761f60261d904f2597325144babacc4783108f54444da4e02042a15585d2367b343ea31eb79b125eb11de130962e1a89934c4128a25696214e9322b6736d4888d8a95e5a5fdb6c62c85a3497ab4c3cb2ff81606e5c983afaaccc7a72c1660aeca314c69e47fc9d9a3c3d2300c9de1e5274c2560595379fcbb8b9e49cc3285dfe24ac6de5da150c6eb606ead236fbccfac1629b6f10c29a16699c43cf69a30e63736f81ac494ea57f9f031674c5aa103b7bfcbd62c66aee6be4ea2e9c77e1e5fe104854c278431f52bc4250fb16d286fbd3d31a1d632e5b66db46b2b7a778d82207b22a62555497d22ed7745807ff0588e099a8c42a475578d352ff20f3466e7ed7dc41040b8eaaef38a4c1efdabb5c4d46432afbeeebe4239988852af52387cb3487857b14009648eecdb5c4d0ab445595b805e2076ba39fb9f06471f1555d024a50143f0f653e4eac5c9c426c53bd80fccddf9d92997f4614af26ffcc5212ec7bc9c46f9e6fec415493bde393ef0954ff0443962ade60f12c05da11b5e58859d8f3d66003a8cae0b682d784abe819b13484cfa85648912a8aeb42651b0fbc559bf3e03bd6889c50b02edca89fe11e97b0053054f927fd4b3b905b02fd055d2e8932a68f1602963d61f5c9d1c399e647a016d2d072a20cc227c14cb15ace9da75e9686f0a19e181ef742fa9a130d9f7e972ca81de0df1cbd66f8b24b14d018df7989390c94fa72a09ef0f7b028ef7adfec20ca8adc90b201715d2db029a2c014f4d81931ff593b95316bce7d96c6fda539b11478787a086ce7ac0b4fb85adf35d9c2ae56f8d5f05bf220ea1390bfdc74d46e2fb21237ef9f01045e11d0c55faf50683d9e4c140a86fdc47afb03ffdca2b5f0461dbcc58a728e1f60c0b82162f79aef688164b821f7ae9e5c2f94e67662527756bbc26d91e3f116022d61af2f886f8443b16ac551d1f36ed6304a1d040f6ab18dc5b6e3a7a2dfa82efe1c9bb80243a654e0689e6fddefe4b9d8c4f7253fc162f01eb65a3320b1f4f1c4be0b96b475542e6809b325b72124c98f103a4da2df0b2acaa1da314648fa2a382aaf324804265ad525c8a84c7859d9fe386994fb381c0190da865a865326d760dc3006a0261ebca9de1b74fb7ddd2e79b2e5c25f7917b407b4a726e5bedd1a745b3a6a4922305c9c890e0c5bb5fe877b7820da88c6cbd4c234687b664944aeb0aa986fd630cceb67b33c813d9006e9297f331c2051c38667821c15ab7ffec5774e762bc0fcab246607e72c58495bd9b28a601d4af1e7d866ea65c799bbeb53907f29afc6f12d8f095e06549d01ecf3216f19fdbf77e96ca66b9415452e07513ed8dc9ec9a3b5059a8a3bd3599d73269a034cf819d255c0a04e58a8c953bc073117e08ca3d1ab1ff3f8c899371eca3bbe2ce35c438d6d327019eac0e6584474f6152dc02e9eabe08e6f7163804db2877d57730ca14cdf10978bff4e702c773072fac721073a7a3d34baa4d6538e936366189d1b8f7fbfb0c4bdec26dc4db3b0413f4a1e767f8165b47c05b91b8741dee2a0eda282f130218ae455363a876b0ae7caf965039374ce175938c77c926689414ffc16f192cd3fdeb78dd6c62bb31a0777454ab8954f7d064c698f56f4528579a6bbddb8535619124c6c33ea6a204d3efea1a0d12b364ee72b2313196ea7e3ed20b73cdfb3367f0cd1b47c1b430b4241c23f46610cdda19a5b07e6082872fcb9437e37a31c9514729abf79253a0b5a428c6fc7bed4e021069f57ea61d84b79e4cbff37fd365a2b27376c6d488a3ba67fe5310a13bea370e9fb0aaa3c5c61ff607247b040456bb0c282a278589a3e8188a45b572c10ba507fe8ba1ff9e1d0eb081247de5bdf4c84b49b432bcb485520e31690cf6ddd0f3e3dcbb1446dc2ddd80413be8c6d962d09b10217096e4d9e3f5028810a9ceecabc112deb7cc6a7232aac0c61a8c67d8ea63d17d7268145463f71462500324216651093f6c4f2bfa614f06f12c496939bccd5e7cc8c8985e997156e11c7ec289b5e9ebd1158b6ebf691012537ea1e09de43de486208d538def2c8ca526cda3f04a3da62687189609dcb415dd906625478d692b6da9a25a9689260a4fcf477a5b67187e6738123d6d84561a809390cb3a7d98ef458d739c8ec73fa9034131e9b32fb7a1af4e40e75c16f46c072710cdd4ee4fab728f8af76157dfa7a292d89b3f00e632f9c61b1df3cfef954756711573443423649f93908369b05362e2082292c293cf328e32a2ed26b815345b0417daceb27938ecf8920db2254497156e7d6819aa3480844c183b0891013418641702fbc1d01cb4697d3dc4781f9ae4fb00362c6e19a309ab13174c87f8570d53d4963d15fe6cf2fd9faff7f7b500962629bb6e7d722b09443364f3d5ed95159c5e7e78bd04f1ac6f3a19ad0af250c4bbdba0b8174f8b875240fe5deb58481fbb27c672e1bb0024e954599786917b4ab8806bd39e232d3feb5d6c2dd33914f8c9eed38a9e2e4d1571e455d9bb5e9269ecf5c3e9a77a9e401e5b790245e0a92c948af642cfdb4d903c6ea626876b4dcfe3527883f5e1e49514cd4ef03cbb9ecac2c2a0ca4108c2ed217cc9697d0f4918d7b4c68d38064ded6a6a119511ddaa49c1c040489249e327903e0945e4cd1e403faa4f03383b51888aeffbbac3eef44f424dd27bb160c6a05d7ac69731e7e5d9ca21079f221041a052009d50ad58cadce7dd92a084db5099aeb7b3c1420e49e1d06eb240ef542142e5c8c47e10a0f541c2ab1fadc5c782ec79819426dbff8dd43519da759c81f0202800e38c73b8d4bff4bdd158053fc1b4ed266e97f0ca2b6457658bdc6c979e313312e5e41895ee3927577541644f05482110921ba40b1b81b8a8d5d6d471853a062b393bf7ff403572e9de33218916a5e0b11e41fb2ee043e1a1abfa2f9903b6f7a1c5455dff04e9e66b6a7c3fb87efa53bcab39834b8748cb2a273ef8882959cda971495f2eaff9d51e21876366efe1a093e5652da033704ac47f571186ecc66fe63ebdca7c5232c1b3b077bf8da9e980f83c116ab07e8d37ef0c9731de189a49e071dded30203f1e7acf2fa8201a2cb709289f01bdec1cfbec41fc0873c7c3d2f00bd52272aaf334c63fb88823552f061a294af656162438ebc6d32ca23e28b4f54d312310ecf70e462b0267fb2b72d3733972d03c18890718c3b25f44d271a8720dd928f98a077d25c59629470e7f26c54748043e7552ce5a429c4e3273f5940f599a38477167c1981e3d2d781171121d14d643ebaadf6f78f33095f0f0e9dfaed52717cf5294d6698f17ee4f84498e5861520e9119cd6ac4dfc5a5b08ef331b161e451ab308d0b9f7dd777a5a5e975b62a57e3bbd6b20ea2e7baad253990d5f23866dc1bc9b7e28fdb9bffd61157381bf478e4899eac87d2c60c7839d47cb4d3414b86561e984592840b4710e1ce17c069536349eebcac5f0118318200a29347ea2d0f82689675af80e238a9fc977447c6cd82d890c04150d3c6fea0bb5102e38548f516f75957691c00c583aa2f284b930a02cdff597ca86fa1c5e7d1bf4899c5f90b83a421e2267a9e543e20fabcc558dcc1fb6b33ebd9b1f2b037f3874d618bc82b74e8ed007ee0e6d91a20424b2937de38bd07f084f6049a348a2a599381b9cd62263ed01cf95398fc336bef0363e22db2a973fce465f16d276c1f0735ad6f8e53d22efc7c32282d206c10ddb80d3eece74500b20c3149d77d07b961b4b88a6667ad985d8ff2c7c3f8474f1de359e9305453967e1a193307e0fa7c0eeb992a370ded36872e94f9b6d2871de3810885d8ca00fca3b5987afda48db526b8d387d59237648cfb0c244d9f066198532701da5a01758d2ead9bb291e336e81afa4b8a98b6f8f6cff16d860387d70d04cea55e52fd4163ca96add12b35fb5bc1589cab42c3a4495fc9db7c319f2f806bdd859421f5e632a858c8c1751c82f1bd794411d0fac2ed5b85daf933fc78a48ce6b1611fce8d7e114bbd89744acc3328379a02d14ea3d0087b68e007b7741d20054e50d5308075423ce034975a7f75ed00ad645fef72a8d8ee94fc21e9fe26aa0a56f06aecef8f3aebc09633d1407f0dd582a289e8754512ba9c5ca69ed86fd37f78bb7b4fe82a7eb99d326b916c3bffee89ef974ac48f94499c34ca5efd72f22ccc3731acb0fe7ec88f4e11cb4e91066da034f111ef694047266f3ea59f84daae9d7cd719d822dd9bcb15bcc91dfff0ff35b858178b5e2eb61aade3a040a8152dc724e8af056658b0ebdac4bffe20599d1d39e84451ce9911f964e44837b35a522be52cd631010a262efafee41c69cbe75084f466d31cb6c52f4ecd84a63ffeb821919d6651ace43235e738917cffe0bc59d99916ae80f08615803edf19c1e48791d8ccf9ede0f2640bf5bfe1c79188ef72c67e8d16add0182e027b31c9914d7b64b916ef9f866063549c5757b863ec9a8bbc49ba2fe1116aba08e411ce482757792cf16c1bf6e844441907d7d6addb3c453ee2083dff29276871ba54e907d2ce21c87864765f5c11173b6968d965af25646cb75c2d6d6413e336e6d4d0e7479e1c7c00c730ab912aadcfb2f8e56bb092356ea45596e6b3128ec018d0a9ca250752b61f7cb77eca39b99fb16b5b4cff627de29f4a58b14373d2c9d5377d6079474ef8ba358484c03705665f25ff752e31d0d25a7c59f568c18bfc9e920edb34e5151fadf2dda1bd3f54e3f1a9b060ef5de8c292debe7f9a51fd086fcdc39b95d9993d10145c99e0801752f800577f666757a6c3387fe7d86fe869d0744302597d172b76863e36d71eccb7fd0d330255e34b50efb568d934cb9bea9fde3981a2d4efb8b29574ccfb6258be5082461cf467752957b8fb3370cd966f3324e587a6c6a57d99ccc7b11490887530907239bad5a0fc9e052e8548f9253458c7a3a91eda65d00f3c2a61948643a3307131741f9f16859999042979a330093f88da692bb29a7e8823a963d3352e3a3ed8da7921dfbe9fd564a13374bca9ac76d9717b3fe7ac98da7ca8e031ff44b9d8b453e5f03b3f64060a8cf33d61bbf359f8c3f46c77a08d2c29e319ff8fdf1e3de91dd145ec76bbefe8205a5a0d81b349d4d8a182dc41e28f11ae3e9de31f2cf2ca0ee7c2eded113c9cab1ec4681adf987f1905b87912b4d2d78a86120a5fe5ba702da9b487facfe3afc8294324b433d2b98f8ac88442424681f8f792c17400a095965937b4d4b307a2e56b1b32f53257dd6dc72617dd660219a4a593b3f1435e780c1027812bf7d0d03b1e5e8638738c88297c8a5034eebc223c443d1790ab2963404288954af54f59f756608bfc84ebdff7f88c67a85dfe6f1436b25e89493db81552885849a10eb925fff295a208614aa5734980b19ce55469658c9be09476b01b26ed9d013d758d8f56a4e2bffc34dacb8d00bc8b02e48025f56f0f70e7fa4f30f1497138f4b6134487ffbad77a4c7678ec0e0bbe65a22bc4ef82f658cb84b0fb956902fb6dae5ab764278bfca3186711f2abe032b067fc4cdd7e9d1503fca9749c6a251497d5f326b7547077203ebbaffa028291181970baa53c082c4e2b450d4025f88acb4f1455d800795a4476bd0b0cfa8cad20ab51b501cbcea72d77000995bd4135b72e8bade0502df3d9d0b423f5fafe352273b85b655654a2a1b2c0343b5f376d467b8a66ef804bdce2009d03b22c884008318e48f7ea58a0f40aa00e6c4c232cbb2b71613b7a7140ac5cf8da79d29d0b1a40775eb51636eaabe98001faac46d3ea948938e9bc6d9106663a2406bf0ec035ffcf8aacb48ea5b76a8fcb14aa9120e43bf1bc7ce9fafc14117afe887c36b1f07f82592b277f040e9439734f2694f5ef5555339bbbe096f3de0847ade4138961c1117b2abec5f52406141c3c86846eaf8a6a2f9c8e064f2574c38061fcd46fe09f870239a3925c0f7caa29a07a781c18743f7a1c1f04a0b5c55d56b2529bd564baea82a12c754d909a66f37e163f7b8cad386c923f47387de48ca6ec9af499a93fcabfd24a261b04c593988c574be8be7465cbcbdbe350a8aaf33a6eab58e867073c7d45c8900992b64cb2533b0e732b09000113f373f7751f5eea535c10ca79630ab5e64bd9f438fb7b613e6537789630f8957bd7d2a436768d9a1138f4384bd38583d4061c03166ebbc5cd7a3aa3bfde5ec9be8dc70783ddbfe5a9c4b615d6c292a814434dba9f2588b070e63f5f92a17dd48743e25ca8ea4526de9d46f48089d8b9203c2438904d21c17c5d00f10e5dd82c24922d315c1af0ac30a9f4d32c507a61d7703bf6444ccf8498338af91707575f7ffbc9c509c5ca11c4d73a6bea685295763a3822258a35f5c64f068c59bfd57438b9789b2fa6d98597b1de8f16a4fd2a833c567b5a7b1facf887bee8e9e2637f6e5a636a8cd184ffe79b1a6d5b61d4a718e8c73edb60b304b501d93bf6577509359504b2bea4f0e10e994451842d6813743b8665f2827bfc007e68edec10857cc5ccda8ccfa1088d7fd19372615dfbfd81f8cbbecaf5c6327d51f11e317e07a53724dcc8a7350098bc557895683df965d95cbaa7647a42680abb04d68819e7f60128eb3493e7ba7d54799e1298645ec4baa90195828fb02d9ac0e3bfff5ce78f2c46bb5a36646b5dcca1ad08058c7685ae841bf7e32bfa275d234c91d85a5b0ebac48e90dca56b07dca6a5a38518d476e2bc0a1eabaf26f03304b7c3d2d1cd5bac5db9ffb861fd3c162404b4b93dfbe5349efdb6ab8681df301278d7bc05bf4dff820e62bc4a47a30a8ce1043475b01c60caf4b86b96abb1d92a8fb4383ed367bb849c555b6a512f5e19cbdabb0f2c5e0013106fd13ba6d8ee4a2c048914b06ee679bf24ccfda5ff3a3e4c0d0500a79c56b21243865d68371705a61ebd866509e952f78cd149500ec0dfcc26b13de2729626c991fa8599c3da643e96bcc929595b1de63779b45968fea0376608e35743fc6fd46ef0e7d56d783b86875b9c8a04aa1fb696aec4fba7a003b799271f067adeba6bf9aa08c1fcbc58c7039a0c6ecb9cf1c80f10fdb8bd39210236365ad1d7a35bb8323ae80d4134dc5d259d919ba12c3c83641853a7c95ca5d1f10a7684791a4e28da190aaa813c19ce3dcabc02181be222b1439a3773aebf80d93ac05fe7e4a0b790f71b73bbe42d6fb7f4507a06544f71cfd7812c0bfa16cb23b3be5954d87f64921b900991cb9d08b7cd1de5bad5564eb67c61c9a6c9591f2fe7e3d8e09312db70d32fb8eb9dbc84aea516a9d8d89fa7157c585989658129442f49d3bef5f43be06239299a5c63b858daa448c4d586910a00e7f63ddc8c6f6faa07239f7411b40626539dc329c967c70ff17562217686ade79ceff60d8969769be024dd1ca32350e4fdd292a209f5e3d9feff1f1ebbe6d57c17f8c64f289c90ba97d4d61c3fe5f19b46c983f8f2ddfe5b38ebcdf713c856d855c8f8082abe0c7fca562c15ddf434e4fa43b35031c66e95cf8366f9746cb397f0135bd876cc41c3c7368edc154b91fe61d37101535fefc3fa64c89eb48a2a1acbd0f79e36f2ea7edcc629c3d30a1dabb760cc5d4db0297ea824a0a22c966c07f4daea4df267bb06c792ef15291fef9f10edcdfd025ac9ef295c42114b8bfa94656406e94d6f0727238b465e7efdf2ff58312668f1af4594bbfa6aa969c197b6c163bf90ae5de1fc764b7b13128d236276c34be78a13833d34be41d9edc0727d36c32da9b454c5d4cc063dd0fed109e2e1f27fed0583107044eb58c272bc2a370a02d0203e9f31d82c13fe435e8136d574d90da3a75c9e70d22265d0b6457dab5a12e71b19fe48cb6613cf8d623747e0e4c2de7145fc8edd6f10a24913ff232f4def6e52e81c16809d7708a74af5f2f73bb86f061cf820c9073994cd176dd2d7467d4f5deda1988408fe6909107a1694c76953fedd5269f4069c98c824d23cb2c8f9f1d22c3c971e7cea1b550e88b77a04f3ffd3cc14072f58c7a0829d02bdaaba51f4ca7d09b68aeb229ca8e18be1b1a713cf3968fa81ab394dcd73d8d99ce7259bddc68f0f4e8dc8c6cc779220d46cafca84b12ea35667132a9a45cb31644869dfffabb75e64d05ea9d9780abe090ee006f80a243164e7b80207d6014e25d496bca15074a0e1603098c71ca42c23ea434bdbcfe7021c7465335b9bac38ce3ecca4ae0b778e6ed44aa0cd450f1ce1279f28ec8d9292055567ca64dc078c196fb73867f34bc0bcb95fc2d2669cf77d300d15ad0002deae74be0a89a1d360705274e820ab3743ba5c82aa54421f4c1f823a2fc7175218c1b6e9dc4e242ae4df3ad0ad186cbec6a4bbc8e0fc8b8b3cd69fd7c4d94e246751aed0260d97608dab5e8cae9d9fce3505eff9e461f5718e260a8f1b1cc54089508705874cc4f0e118ad15b0e04c735d83985aa032a3e9aaebfcbf51614f0f773683fbd4b4b05679d8f1e8577adec83c74d747b21df8525975a6069ea9d393868fb395ee23dd599f74142e39946ee71c5d8c5ff58981890a32fdc0e923b79adfd9960ca229ad4eac87e49d9966e0d6d3ee200a4a4ea5ee20674d5b0f306d8cdc316f193f5299b6cabecd64d0bcba206f1ce006f02a900601625e0760ccdedbef993a401b1d8103c99a3b9d2455604739baec47ac1edeb7282bd4a1d914b8c9da2ad9096d1bee5b892a267af94cece411eb5bcb96fec3b42393caa9f597ebe9160bbd3d10e5d4f415db7f8f835984ce9d0bb4a7801fc46aaf45d9d7a6d172c90dce2ff147a4401f4f8a14ce305f900e11b75a1f36f34f60ed6cdf1e72d950bc3becefe03fd35ece2ecb167973793168d944761c26e695a2718048d599d04615cfcd824047096050860a24b9be3c51fd6ad582f82aa3691563bf5d99eadf06276c33694d954c02ff6635b72227f1f90989f29c1200c6e8dca40b53f58f3004136f2ca7af7c29c8908faea2fffc3097449805167a8cc0ce07eff1bc88b0812ad43b484d23a64f4b800a3ad23b0639fbbf151509afb7734c9948782bd28c518f54b94111452898438272b6a3ed9054623ae15923a0cf3c4c196bb7f9d086cbcc2300c009852bf2b9e2d0a41d642b7f97e3ff9c6874ee5a5a564d3652687b97efcd73263a79418f55ab4aa1f94ec6f57e2533685550aac2c576bad5584424bdbd3ce1171c2f62a5d9415d52a62b627480d5c7b51e0dc23a50cfa9f7e398dff64c84a347372c25b8555d2cf7b0ae9e2061eead7dbec00b603a3aa3bcdb6b0f8aaf7abb24f537061de7b7c4b2a2d1b948eac9b425dcc71185ddf14efe2d3dbfad86b76ebf6b5a51aa10a25dd68f2f412a121d1b2816bb38cef20b290e081c79ff13728d123145d52d38ee215e9fd28e63533239cc0a236d47f23db9183aa39a3a50bb6dac6b4c0d196b372a1025ae0aa10a620b8f1b9e23742499b60668efdbe1e17a183bb10bbda3fe7592edad277a71b807cca703b0298aeec097012d3d56c0f67f1a89c4b05bb02a8f4542b27f168068808ac0594cff19a694eec5b36855c89ee22b3a20684c27f85cdae5b1d043f4c9b05b0fb0276162ab92102fa6937525e16411e4bccbeb141ede0b67cb1ed0dc722c400a171666f91e3e76795fcd402d0b002dd3dffacaf26484f14749f94a60fd537f4b2a28232c259816afa55d28f913ca394755c4ab01b824f91cdaf709f735813d4bd1bdde1972079b048d5bfd470eb1b88f295eac8c977f5ea1f296883b51536b5aa26285984eb37765b02012a4bc28f6ef5a11d3d98026f73303ce9027aa7315250bcc6d533860b818bac48c32669ddeed12cce70e6f91ce6a6c78b92301b37517f2b966c35f404e6cd4268d68839e3a0d31c40360b6b2010b73086594081a89066a28daeab05902c360f557088ff937d0fd369387ab46a02f3a1f53b9b5e92a6c83c403835cdaca63cc3f406e0fc271a166d7304126c3084fcf9798c4f36200f6efaa9e6323a7a8155985a36dd97536e833f062fb1f7e67916c1e152f0aec424da322c6accd0941cbad6e85445a69aa7681fb7e2affa48a2728e75c773479e0b8e0c7848bb3b53048920528ddd58f92f8e369de9bb9275a2461b57f83b634ca09fd7110c9be40723c7dda060b871b427bf85fc79ca1d9f9cc5e47cfe2437d43c1592fa8d0d610bf4e21d9b27f366a700f64795872a1d9870c78e86ce37299372ac069a29710427405e5c751a53e9d6ba7ed6ee8ebc525c7626b13f0e866a6096815cc45249a7a0d6020eb57789c4399a9a8da541f8d06a5c814e7a669fdd8a1490fa89c8a6da2d6ad9018acc0ceb126a97c0ac7034882b804d549376b2c1c360a92cf12d5eab578aa0d1e82ccc1e79f4d66e8da5cb39d6540fac1e744e3217ba6e8afec8a00a647fb16d3e668990cec32a22cfce2215b37c30ebf1c12023bbacae3348b3b7e2e4359483f5df972b196fa6d8b9c5102872eb60e3923df4a0e619842eeaa16615a39a37342809f59c9e85b30fb36653d680d0307b9bdebfe11168e9cc586cd83b5479e99f6d39d8a503d0782334a2c26fb78f2648928e6dcd317da97de6af3a4d7d007f5f2a0ceab9c3e3bf5409e273c816b9870a5abbfacab81b7384112b7c96504ed6f354a7a640fe09507ed15c69c86df0f7dc7a04e8eb1803950d2254a7794ad2758dbf65a2ee71ff754b07a16b4c10195682f1d01838193f901ca79a26132643eeb6a85a8bba34416e4f0bf5e51fa1df3b60bf8f262286ae2e10ea9e8fc447267acdbf1ae9b1dac38bc0044a9320cb6964c2a72d175e6c304781950b306030e44bebad1c3a0e7579d0ecd784631e9bd258c46328a8cef4456840b21726152b6d0df1cc92f992555d65cb1d1b72ef3ef6e3d37384973cebf28167ea239f9f2d998af45129fb3ad5363e34f183571d799ee062b61b646eee5fd64f2fc169702da3006507ee024b6d6b7082dc74e3e3174bc871392f883769eada28e9042546028bebad4b3daba858c6464b7f120f48bc26302de1ac38514beca3845f6cd9e7a8f9c3c97b81fd9149a866fa170c8110de16e462cf059fcc0220c5a5988effc58d660532be025cbfd30fdd3efcccff31e375e6bc374375e0cac2fbde4cc7811e5d135c8fd0c5532ba384ed91b6c1f4c8e0b350cc0c07cbaf60aa478b5ed29b3ad5eda4fca8c1bda3c70e755851bce510e1be1ee7d673f3123702ea712b4f58f5e037613e7ab7cf97e8f297e102bcc89ce25df25fa01f79f0922276650d43144c318d6a4b57f949cf73ef6807e89d8f5084eccc393dc6147b34d175fd74d00525ad55fc9d9862a62d0dc8286d4966cc8fce557fce98d032e8ecc64c05a0f5d1ab815df3e5f09821396325b63053d8403eeefa2b72f544c221e7577cbfd39585c014a4746b143d752c0a360635ec5e6726717fe67951e519e669d72b513bdf3e365df7a5d4bda46fc8633e70d971f356d278e9b656e9a244152111d07d3887fb292900c050d69bc2c201de50e4f80dc5efc85625474be6de35bcc14d9effde520a3e55b16f8fe7d0cef17627ca92dcf28ff5111f1c9acd115f3d4db6fca524e2e5dc35e5f5869e33bf433c17c4ac2f2ae8c6512d5338bd46a8e222544b766dd0bdb6ce066e0bd4e88c381400a593607421fecd12f5706c99c899a25ffe8b151337e6b50fac1ec801a17b20206e241496b95a54e358171fe3046a468b9bb64d5bc4a43176f157d8f75eebf42b7df2e0f606c3e6aeed2dc1d23b7991d63d681672c9e20dfbc9a077a2026eb10a4c52c557265735cf781c1898cf103e6dcd5795b59bb9c2ab42022ec78e8fa9a7db26ef80d67d015e12f9a8f0436b18d37bb7194781a68dc94d2a22f87bc707b4603317c72d9b3d7f30fdfdc01eedbd0178802640f0b7ff0cacc223e4c828c98a9320e170ada2285eff1e7c8ffa1c8133d560afe77738bd6e74ea15271ab699bad3e82d17964425b0aad6f34d76a25d1fdb5d7d64fa1ec382d6a20e16a9fceca2847812c82e80681c6b35fd2b7e7d3e9dab564f503278b3f3fd8af11ddfb0c6187d59dd6166bb2b9f13e20e5294e3bf44bb4bfaffec14b0659a9f4b2cae3c3298101a70bb4787b0b0df61959ea321f2947a072162865e82e8c97a9742782e0da39256a06483a4464529caff452399133194442799f19976183e2425a3bef6bbb2e90733daa61437e735e8f11a96e6f792ff5047882df54c67bf10a6d67b7ea3102db8524b49aa82f036fa3c501b085f02e33595530ddc68ed62e1e4eda6377ec7d829eb910a1494a494aa94710d3ec6a01f8b8415f5c802bc03b39260963bab071b5b0513dcf28f5ddf3c5f8fe016be4d0fc9ed69ca70baa3a87af11b8e5aed380110ca43fb568e4824b948c4c27f6c643e264122d7344c234b8c82722610f956ec3679e0251dfcd1a9fc2d0c2803783064d4a8da372f16a86ec14968f133653b7266001874dc1d2a6144a5bede42a12629f9c8db0ed3b63ca9026946eae2721c0df0b023349aeafd748e250b12da9f54cb54e633f94d1d8f8d2ec60c88f4e31771fbedaa334028770ebb6d7db82ae5f25b06e934fa37c1fd2ed04b2f1ee6cb8d6b08a30f2f0fa6e41e5bca1ea86d512f0f3376c3a5afc4a9536fed830f17f67c1323c23decb8c1920fa33d7f308ecec69312bbba1e411334a1819892fb431377eee29c398339c31a3affa31ad782a2a47c4ebc5e2385a3d6153666e69e0c9d358af28c67469b0aa4a2cabbe1399b75e4bc6b39f7d2957ca0ab505c35712638f432ecd1b169e862ec2090fcf3341fe6b09684cfe40812bb53605384002bdd49426f359a9e02752e79dd301f79742bf5a764337f4c70fdc240f541f055beb03dba13a438fc79be1a396e718d6d623cd3a2d53202d5ca32dfb9f37b626daba44f726d659dbe4ab37e6da45cc30adc45eb3b28be6bfdd2f5153b9b493103285b28127d7cf5779f7e4627b1058140cc4b2434e78d357f586a4a65385285b6169a94371c8e5cf3581d50168d6255c895d0dc08994e67a535d5ea6be1bb82b9789ad9ba6723780a5caa9bc966b5ebfb816b8a35f400c4a4c29958d8e5230bf7ab7e466d70dd213b7ecbbbb441c36b15deeb45404d77d182bc6dffd22e318c13a893980e88c51aab491b0f0841bbf3ca31d6be139d10c2e51ec8a04e101f336335b3d632190096950b4c0e5f7898210ad5b3d036a90c9f9618e88b84255fb9308d4a9bbc7e47ac012fe482e8b5cfa8f24cbd83266935e02a994cca9206e09fe8546bdea14c4bb71e31a6b4b5256d040f1d3cf9746e584810f18fe0f877657b62e2d148cca6a13719c9b936cdf5f602d56a986024938a37b20e2706c5e4cdc099b67fde1d69e868c1657da4863c6ec0ec266da322b983a9241899e7db369fb5f269a1f20919cffed3e11dd4e146cb8dd5125613adb6bcd85206128f7a4ce0ae8b456da788e4d809d9310293fb8bda8c7db66d9a38f49081be4494c41fda91b4bc0fd5c5485b81c38ad596c802eadea262fc95d1ce970422c4ad60f35b5f4b057c4eec287d51680c2fe1ee52379ffb288bf5a402106bc8af3abb916f22ae5a82065057a62cd8a9891989e0e069d00106ba4cd9ae1e63e593ce98b00a0e85fe5d925091ad2304ed942983ce619dec4ff6b1f056880f58625ded9a21c622715340e27941e62d12d13810c97c3a95976401fb797c4965580886137909cee2931754e16fb1e882da2460c28ea3f2383ea0b98c51b8a22b5f5b7260c61a815e9c9ff2ada75e1fd2462fa2ddd06999064f9ede61e2b9290f33dfeb64a0d8c5957153d10fbb23dfc89d91eded5288a912756e8c4273fac852d5fd28e19545d79ea077080995505f59ba5a6b3f96b8ea67ae1756e1ad58ef766a6d4fbdd864994951dca76d9fd8379396b2bea8a14d3d14ee7028550c1a6dc0c0231a1057b4187499023f8a8159fa0b62fc546473555d419e74651652434ded3f4877128a6237fddd962a23ae111baf0192d9909bb10346129616a030d010d0f2d29ebef575a4c7283f4d8bcadc982af9dac8f5f05be34d23817ac93aeee1461c24ed56ab23a4b2dbe23c4a5713f948b45736d66b63799a0b90f8f4ab732061133ee5d60580a88eea97465a7670f8431f81c9785d6b1295691739794ef5ef89ca1d6e507bd3e82e3a50efe1c1a5ba57253c29a7ec535c27dbb8b2db4f9c2b78dc4f59a156fc1b878fb55935b203e8ecb26f7eebc506b27aa41b512e7472dd05ebb021b4abc5ef82c71992fce4f307dad65c0e12f8233b6c6e6255286152c784dabfe0c233a0f9a4b3e687db5396e3b18e664333030af8c3e9aeed6ac83d49c03810cb03da159f6f0bc8a9688bd33ed920284fb67511b486e3ace7c1317ebfaf4538f527f4ab4062e7d2b9b5191841e1092be1ca151b6eca5feb4a38d9851b7f6923c866b06d285b7a25bfe53c86cef7378e780043e88354ee5a7018a355d9931766e8333140707f4a4d4b5fb8a469d8b000576774ccb42e33dd473c6f449d6eca34fa8108cc1a87e89285157edb69fab34ed820a6c47fa0c17ee79cf0689a29d40c4a101c258417d8b3e2e8134d75c5148b2e0815b98e85b3e548dba3d1e26e286f3cad93c58bd897dfa9975a96f1173cf9e25b66725e6c7eae7880e68593d8ba8b353ac7b048e3b6fbb165d7dc172988e788adff170afaae7d4f3bbea93b9965661e378911d78a005d3b3edebff0cc35d75d4f6e8bc2b31fb279ec43804ff1d29b120ecf1711501198b50a5a7f0b1d7d5330ff28c02879244d973b17b5d746f5af55b5b8c3faae841137835e3a307ff9642ce1cdcbc5ca2e503b97e748a252bb2ed3f2d4bafcbdb0b57cbeae8f7bf2c19bcd27892ce9e4c9ef15f5ef990930814443f25562b59f918f0e947104e79ef0da9b7ec5744254b5bd1ca2b13a55a3326423b68f8d5f0a915b1148fb907c49c7e410a6791a5ccba0c7ce747d2084e756a17613349d152aa8beb912e10a742b5e16dc1fcaa2d631b17d83c860657a254926b3393096abf206ec40a7e21c20ac56e0c3e05d930ebd4f441b79ce831e988ec68f732aa51a4edfa61da5b02d4a0e9f9b991a462b1681b1eec8a636a5d7f967c813f5b7afdc64aee4a2efd21285a1759acde9308840f2d99d17abb8efa3c71ece95809e97bf513e31f756ada9156c581378aaf5a5badb32230d56ccc3245d3118790be3024bf1ddb52c487d0c2cb98c71cfe6dd88437a6eb5b309cf84e6994528a386a61d6d9dd2e190d84f97359326ba2a4635122c2ab3a264f1c310e9657064319f0ba4c0c217d7df964dc4d962b54b4acb602971c4d62cd4f733df1aa5e698c4d7af6c022883a013bebd1149f58afe956eca4aa17c1c45c1ff2fdb185c96c027c90a1fda25ff174b5fb75c475ee87af06d9ac303c82b2a6928208e94d017dbb3b6466e878083dfae16b354c8cd7b99eb556b09683535f31812ad9e890ea40923233c0857bf73b95037ba441a03412d4be140f9dc508eb2010b22203e5d481a2dcb58c8ed7230e59de1b5d19a1f8b8edd65c738e98962c82dfd7bcffd0b90361e86e8819ae81c0927202d37f8fe4b544a0005379819a138f50d4f25432881d1196f99fa8b8c1d26f9955e5083f2f62376326e5505cc3235a964983af3e0ffa154c6f5f76ecf37fdb4e9175377b730a24d8793ac34a80bcbf068552c64f9a69c5b7b8cf6d22e48ff191c3e3362984977af2ee421c88624555252ed43bb705f390761d24bce545602d196d5744cc3e571bb80059f8a2a5f6b52d57b257d9efd145f817017cea35ee93667e9fb701663cfd85f26e8110c382c63e04dd32579af3d4fd79a403aff0af9ccdd5203bfab8c05ffde6ebe1cba5bbb2342f7b7aef60b9fcf63110325e2e45bf85dfda8d758f50994512579c6ffdfee77cd5237df4df2c8ee3d1839f97d9a24c2c6b866a4513a053210be9253d335b6134c64924b351c502f6e9966ab6b971469f0afcaf6ba280d4d78820aba0199fe2034d9fcbea26da6b9516b75c87c4414f12f517cfb2c48e50d56af8a171fcc4711c38dd16cf116d555bc204a277b3386060265ed05a6e4dac3c08ce990660bfc334f61c63c29761294ea5185cc4411806e2c4ceba060cfe15151025c53bc13f00e8cbe1f9fb9c046dfa29a2c6365d1d5063664097d22c3aa873e475e26fc5946eb19ae1b37788db40cf8445bbce782b0a788af067fb8e9cc2f13a7cafb24186acec183f0af43e4e4f77c5688eb5ff30d91645ac9331e20ff53e659e8bf71d870cbcb578029f5572260dcdf91db696f4d6d0233d973a739c36736703fa6e08993f0971e6e38cd612edbcb8b99324495952fe45f524ef84913bdbcbab18156e6090b1cab1e6dd063bcf973f4445f984da0be73076bbd8234845c89ab9b3293038cda2d46cee086d53775376fbe94357a35f5fd91aa74112d394961d68e956aae28d4e3c816426b7be78cdf386315b3eee31383cf0dbac57d107c88df5f25792209ccb383f120a5e70a0797f8b342a5f413a15daf91e0b4d95c0e42c7a60a0d421bd6a51780856c613d0d063b2624b9a3f258bd7f6eb0268ee646acafa1e388d40fab3cecbc20e71a96c4bf765ae7d0dfdd0cf27742be2201c51a07b9518bdfb723157c4db3fe91ddc7f9e1cac7f6329fd753eddb0215f88b204efada606d630ca1484c2b745e8c0a08d04ec33d73abc6410ef5b0108abce2e7aadc7afd1f2cc2ac3dea1adf07f91ced8c242379524e06d34f0c8371466985a373df0566a43c0ad7e8bb78b64a75c218481c969a5373779179ff6482b95b5663249d54a7c9cd1fbc12c8202b1201add1d8606225cd904ce8859dbdc89d7fd4fbd9aca4ba53681ba4c146abdf132680931b354e1daa3811b60d4cda766696bfd71fcc7306c6144226478ae5f02d0b3f89cb3829b579e1d8dd0f205e878febed9e2467a931229fab0509c8aa243854e072a1bc5ac98995953835a6fa7b8d3875e1d2b663679818ad531caac411228bac73a9a6ed304b8743824d8197621635b92e154058f25fc13dd02d86e8dc172df3e97fd25c64a8c5aab903d556e928b7c486cdac17d15f4e8c5ff1457eec04968cf4b8b40b890bbabd40b1c35cd802aa6d0207d6f6784e6bc68e3f2f74ddad7f8c275eb91882bb460a102cf99fd2293e2c8266549939d905ebbfb93d70effd0153dd2a132be038c5ba6e7ef23899d6251b2001400c640c0d258eff4b6c0e3fcdc2c9cb3769f92bf992a7645656f88a1bb8c3dad3cd184832df3feb3ba93e33fca64016d7fe28c75e5d424272e062535e1eb9335cad474918f3d9e6ce1333e23c8a60bf1cdd1c0d79e04a8918e63f215a03c8a2d12dcde25496a816c44ba8df00cc13c192cee400c21bc69c6753ce1926b581dd9603d60d06621f0c8ee5d556aa554336051bfdafd28f74701daf661ad18f85802a7007d5d0ffda1c4e595a7768df4881e31850b83fb6f9eab8135930fccd1fc74eb004844ca87c4aaedb534b6a719b5f43abb870da2b46802b0201a65f4d6763b4b40d51af293bd92079143dae869622473988b1093a116c4f2779b8ed7c8918788a39cfb1584bbeef5be7f828a4dad1bf504383392358ce32d0c350814eade09faee713ebc40d4e8be3c816099f9704c1d4ae2433b4db4c352c471a6097d327b1f5d4062df7350c081bfbc32d66d426f83ae28602d59fac26bb1991b8e3a5aaa76f4415fac63ed1ee37efe3b9c171f74afa58d6818be1aab371f76874c1c439aaed8d5d5340566aeff6907dee67462159457a6c77f0867d907db23c55b195e2b0ead4b08ed9b2cabac124a7b504a06c57790a484432f2f7bbea60c5fbf6459d6cc0cd422d8883c2122b40445eeff4b604fff1f2d9ffad0c01bf3b2f272ff3dd93603e1b250baf4fd85d540255d3407223914fc1fc24ffc4e0b3d2979fb855218d13ead290cb9b03ad57351d1e6ae7278c4b7275a572f2881b4bb97430bb9912c21e90a10bec503d9961c571f877c18fb1a34d3a1d26208b53a972a0a58bcdbeecb97b0249c8720b10b3d60d185ab89f21edc756dafcd321ef8c8e2cb4bfc7ac005a5abe7c7afac955327c8e0de9bec8e24119a5ee0c5f755d54417de95f55d030b83ee5662ec5f054f61e4df2af2cdb0610d9099ecd65ee40efec455a3c417fe6bd15872b1992678775d476c275eaccaaaff7a33e4da636a92d95458589ea461d72fd6b8f8c9bf2541425b25c6ce940c71d1c535edab454fd1ec056ec2a331d44fdee1af255e4c7f2c916449b79e3fc909d34587d36fce242dc453d5e4c859d15399d01ed2184c0a9c492d03f30e2b8aab1ce192753d55526add440acea9526c73bf7368249339a30acfb0e961abc0f82abee9ae9b5611245713f430d882c2cd48903a4cc38427dd61c2ce2027876469284643607ae3ffa8a67370c52eee50c3f9058105d7fa3524e1893389e2d1ba3352dbf3752f164d4efc4a8ef47e10412e7a431ba37c0c179fbfe9e4439b7bfbc84ecd09e1a6e1be8379b0f29a6b23c7fdfbd51987eab966f6669f716e386a44c483813f36dcc6b815788faedf8768634744eb01627719c4e9e387df596ddd5ec0e306980ef85dcda441c24a5babf98a21959d90a6a57c2afafa59d2e8975c5b3220092682c08afee576704c82c6973445282d193eae564b4845e8ec0c816b9326ea2367772b1b424383346eb98e7ed2fc7017717c4cab4bfe4cb8f801559e032a64f5d9e9442cb728d32e49aaecd342c791444244d3db6c6a233568381a07dc65ab8af17f2554168d2b71139d7d13ba4b5902cdc45250c7f904ebf1b4f515705c98ae729dada4b7bd2883858f1efef8a3c3f59faf53a5a9bca4f26be4aa0b12f6ac48d1fe97c6034f196a211eded90b1cc799d43956f718f5ed3a15d09fd507b8f226693d0115210662c73ffefbecda768c218c4462bb751a700274e13e630cd47075f87a32ae64377c5c4ff9b366e66ede9bd6f6729048f2c65965e524990b404aff902603a162a0d73ac0e66f93fbaca35ba19c2b7b9ddca1c252baadf1e83d80b931a3c22e1e2793f92da3d300d59903ab33a34f0bba8daa9e87c45ae23fc584117a0d27343dda6ae605ead6def98267dc2cd092039ab9dedc69832c61a77747d852cd2fa560d337899c8a27557881c57093df653fef6f9288eb654cab8f1a6c861e83e1a4441bcf36e81540c4d614a93952ac24a5eebe321a14b318d339bc43a684fc9dd19f8e7c4117314893bb64e72d15f144de39775306ccb4286272d926d5333367ab7ebffc6536e8267c26c657e5e69eb5cab97ca9fd19bc5c3b104b9d403644a4f5f486f15110ede893974ad40f4dbae630922ebfb51b8cd27255fa97cd990ae7c431e908d872d89aa8addd6807227e24c04e137f5e66b1d3b2414452d4eeede7f5686019e0be2177fd512bd5f00d2e3e16e12dd60065e919c5274f161cfe6f73b55bfd24fa62260b3c90765e56377fbe53a03d41cafc64cc4d64850464611f015bac498f54be84a6fabab5b165abb049be88f8d13e38a9eb0535698d1307c8e268f8d339caeb01acaa48b42da6768b9d6c4f450d3b70d1abf50595254f9abe54e49c887b795c5e8250bcd89e2212dac3951543b02165e0787bed7df34dc2e7ca265166c736185542bdd18a68439c85a4eaa8de48f07ec15b8fe41751e21983ce8f4418b008906b6f9a1d5dd228dddfbb2d206b3262a6f03a83877be47f3628c2fb20a4630945c1e934e5666d7889c66275661622cbc635e6db10ce076da960330de0f1ccec6f8bcea2abc124879b61ac5f74548455408b02b1b4390a9f8f69be10b30137e19d6bf7f391bca8ac06dacef0a0f16a5af7dc1a8ce5701b65c33eb9593d3de0d06036e09dbeb0599bef46b5d74693c7f2586b76fcdae8cd55b9ebcce88d60c8d8dcee11bea7640392e27a5ce2fb2fabc239d0eabc36d112901face3f302ddee4e73034e2aa7ef9007639480bed8efdf7ba7f350303df796e5148f0b79c8da0a496dfa43c4d639cac2b4ec6ec95f1a58a2f923d1794fa259e751f6db305c944d1fc0e71cc953acb48566b7b7a609b74e3315a0acab806d6c8a71cf0e2cf845c92a2519db6e55cb6007254e9861e74e495354c8d8d50f805eff537b656aef9f886708a5115dcbc8da7a96b33d0ffcbb2a0245b2a0602f189c42631ea6f6df6472130fa9a28808eb3923bd5fe0faa3daa6d1d4548f16964db2d0acdb0e6d596e025da3abda4da08bf32c0b828958f114f27877d396d3f76034c98bc0176c538ffbf536f7cd58b1de0f42ee12c5287c1d434b90c73a042e6ce04cc7e8193d42655e136c1a1bfffd3c7bf131f1fb13a3cce3968555a9cae96aa5e1ef4a24f4af00964ca25bdd9a69a99795fb99d800b104f465336f1e81e11f9b6224756566f9957b371380cea06fb3eac7cfcdc0971b7a22fbd4529ad9bbd6f05f79c6014bbc06dbf5f7745ec4ce4dcb10b3d5e4ba361c7aa8ad82f82d27a9fcb65c613bca67061fe1380cd46f297361bcd7c4f6ad0aaeb508a544c412925159c819390227c3df8bc9c46717a76591cfa257365c750b72ae4232c387b2734dd35cc261ef3ef6711f589f572393fdaadd75d28d4394774030d67b33902dd0bc4ca28dadedb178b51ffe370ce40e07011e057d80c9ec1f7f217ea67774e711478e21c06cd6e15a78e2e43e6e0cc8f3f5fc127f4077450ccf11dbc87a0184cd2ce2ba2263209509622bd8dc33b9c3bc496a11346c849192c9a07c9dabfd4c229050494dfea288dd33f942e73ed2b67330ec2dbf503285a822176f1a9bb30681160dab3d0490af6cce8468ed3b7cae6e7acab2f4201c7c6d9f2e54f1b05925c9d2b66838021cb7d74eab3352f3efcdc6c66761385109a828c68e91e51b6af395358e4c73f1c049850fc38d12da2d125b186d7ea5bd2db02070baee1891efd6da103586c7a73b6ab7d7f7d99fb9e277299997148070c6f0773c48ba7d8ac023966c755c1d11993ba932968c58e3a3b8a1b9f10b5ee4fd8b2ace718e7a90568a86daee1827f290f40abcfe1e5dff595367d652e865e59e9ebd27b4a74e4dbf1067a0713cbc663e019955e2603a40c9b876da76c478921cbb0b1ce85e9cf137d9ff1b1cb981a863839749007f6de627a5245c89ce79766332e6ecfda30f641655d6598cd19bd93c58f10ce3de35327fea69e1b92c2fa6c58b0e7afd53c1d8006c0d4e2d9b78a63505941506845a46fef1687d9701f8bb63be5d080955dd7c327a129770d1bf0c5d45bcc0a3471bd44eff3f61bf47977ffc0c69d0e44736b6879a8d19f0c119ddfea02caffffd5f1b2b28c0e744ff35ca097ab178238fa46f0d637470d1adfb2d9a8ca1344a4dd9c60d176df900ad6e1f4e139470bb20070db674c9e02f1d7b5d4f1040bf22e89df52c4289ee22c1ea5935f11e349944175c3c2409c73a71177bfb977d7ae71d0be2a968cc311e75dc0ffedae5d944ac3f3fcdd34ffe63420d44102ecb09e792f90d3cd16e0325326dda8313b8e5b216b6d8559d81d34cb31ce5426c297ca872a8871209a5dbaf3b2600f55aea7de76445b54e9bcddc9be076bff76b522bc2f0f5128f456be58394596a0b686d0271d3a79ff3a3c5792aae3d2b7665e40428c4157b4d47fc5d9e310bb5d2d4f15c74d698b7c19ca9e41bd27af395e7bbd6403f85de4b4d9e7842784bb8d84dc3b7a71debbeb77e2a0132e464a2dc3c87978e3412956f77d253363bbc76e4afea979f73a2a8933a11293463ea5ea67b468cecd4537d2067212b1754d2b0f9c9a81e3a1beed41254e99eaffd08162e74bc26cfa0b8734d3b4c67437e12f4cf37e4a042b03b05434568bd967ae768d08f8d180799ff724eeef457dd039f4c5bf574dd29c67b84a015af2a6d43508498687ebbcff328f95371b3e2009c85dd14fdd45f83fa632a39efbe5aeac13e9eee5e2281512c244e6d61e55d7bd31b9dc5e0a03fd4c1c2f84eddf27645cd8fd8db4534e5a07ca3353101e356d2d4d22dab4a10526977c4e43c626d925ff6edbe24376e5820aa589159deb9e31e90577cc60b22979af4ecc30077fd453f6272456277d350c51afe2ca66a3d463d40a946658b49a0accafb12e1071dd57919d8caa03abb0f15040a4c42913d2eb0c949c5cb4f91149a2aeeaa33d1db6e489452ca1fe3de3bb67dbdaf90c93b1aedb2f97889145936394694d7c8528c965462c5c6903c043263099396cccfd3d8a0e2665e9a53ab7009a7abac557f4dac52d956d2a5d54b6acfc5e92327eebfbc63f4b9bd9631c1324122b7e0f9414d4c6025cf56601b0012423b00a95eaa3af4b0a87ff9545b102c05fe86ab69a3bcd5eddc32365f5d71e4d7b3af29ae926c6651bc541229fbdab2a4bb3e5ef6929c7c66fb28e4287078e59a5881ffebd1fa1e300138f1e12db484359ede7745e7783939c15251ff5da6a138fdb8e31653f27a778038b5250ee254c6337ffe06a768fb73200c59a9408a3a149ab37626797223aa7a60ef2976bbfe1b0d315a18114fbe16d0e8486e72b86cc8fdaa6ea9cd4a66514fd0c240fec092bae0e290920b990a24ac68078ec870c8f51708a2462f0e56bf8f8f62843c626a1d3f5c6e00e9cb6ad3c89b0c464a1d5a325eb2497e075de27d4b3b22bff61d09e77bca2e7eb11afd6930d901e8f9224891260c18ef36ced13994db467a481648f7948c78de9798bafb5623fb030d95066c35c30854b0058488afff40e633003a2a7a1d7fcbde85c64b5d30a683566255407242abf3d5cfd067e3cae722f2d9589b3bb5de10f6e2b8527be34d2d6c74a0aa4ef69fa8c6554361d3ba7588cde530d141bd4cc9fe82b6967d6120d576f477dcc7fd7e80e0ce2c4ee94b4833d2ebfdad9ea0c4ca44455338d3c27816d0c49a461810510710cb22da16f10d383f3fb1659a541d8d11b5345a8ec1976096f31137c4b80edeb8d176306d23f9e33f85547fee857d84e078ba4f9342901a8e7a6e8b1742b2c1b9f60b6dd3beda909c1533ba80c26d1151a012adf7c0f9777d21c43316743da345aecc75ca139aa79417a7f116231ee54e9936b50a6b67ca2dacfba6a5af4093534e775de421b507efad4451b6d9f08393eb994edb340b392745372b19bbbf1365b58b8c0b1576992cf429d8462d6a5d7ba1e8e294f9a3eb18fae3cf6cf8092d94dedd5a3c9d2b11c7289f4729be61b9c681921e18d5e1a0b01dbdab027d2bfee2d539813f3700b283e01034273c363214c89490103f0088fa77888eec111c0af8879133c7f95e8954c85b32916f5ef950d013462bf4a5524d48910f5def5af0a3b7b4b4666d923e0d541e9e9b7289676c7df5166411bf8641d4f02d75fe7ead22a9c22e73e8bdf2d772604552818cfc60192145620dbb726ab3410e161af7cafcf9390d2aa0f80f20efd6f193dde65d96b439f3a10504dd12fb1125d3d20e3f7af65cabf16a8704cb95c1adc2bdf5c8163fb2ea4902c2f1c3c7a546bb04fc05ab895102ab5aa266cb68afb53d8b7c6a24f4eba2a5d0bdbb70cc4a0e86ee76d681d89362a76f205cb817f63e9f8a88bf70d361a5c0005a06aabd956e5044355de7b59cef80e0109da68e6b79a3a3083d6da0284fc1b4bca1d9e2120f916a55204eee8cca4b977285063735f4d512ae1426fd5f0fef97e682f428ee9c7f6d54c1ae18329eb55f8101340260b2c30299c27c790e1fb966234fc46eb9ede4c919996ab4c057fa2e4ff759b8d585025c32469f8b75f029c892c7545639282355976eb3e312a9bc825db19ad7468166b3a55fecd61f64e1ee8f637fa8f04bf4b79160a9d5a7b61ab08d0780848ccf227e0b737649c7c60a2b57536ec73227a489f6d917e852a13273168dc0e8f5a41224afe43f5f3977ca6654bb198efd065f6a15b626f8c4ef1a9a211e5773d59b85fd5f38d7cec3526dfb42baabb7e3c9226453c4ca037b19801c8ff156fed937836ba21ce6e7d4fafe4a11a2bb0ce9f81693d5ca79b30b0b23dce6c26a2f2caa50825a2f20a0257979ed7a3afd789d721657bd6e337603d800eea6f7d01009df5732c13fda701481975fdf8e3051a1a2d6bd5fab1a6b4dbbb9616486b5670343450ce241a301e9867622187e407b4696911867f471f952339b726825f4a51975e8eadc52851e7176d15f0b822c1cb8a9c82333cfa6684cd02e2fe26609b5209984268a3cabc7527dc26d4c3f2ff4c5bdda7273a15cea2879a675e1b7c8fb523d1743077cb0720c8c8890af8c0b92bc704e897f1d2ec7af9dd44594826ca2601703eaf4dd3dd7b2f7fd169bde91dd32c3f11389b29935e441df431671a72299209d22d110b65bf34e1f07becc68f74ac3f7c6d755d0749e02c078ce3bc3161a276bdd4ab3d71e2e84d08518b6e0f7f9090bc5c95f59b1e701205e6489de0774561c365f28837f252378dc3618caea024e717d9aa902f64f7889edd34190f2056bc5638216f53fb7227dc7621154bece96c8bcfdcbd6be3caf19d731c53ff60fd75709e8711dcd4fbe8663018f76e71f0d7d5b120adfecb1c1aec4c8e651c805c1a0300872eabbcc258372e02bb9bdbaa16ad64c7b258b2aba3c92fac51f18dc79c518a99e5a02b3974fe41764503d940fb7c91ca8bbe01ee38dc33896ee418d88a8021964e9f47699b336310a8757fa7d3ac3e7a042c7c32e974818bb51ee3514dab6918f2cf5917b6ed0e2bb9355274efa42042bb8b72d9f2cd1372b59b4ebd7921dfd4447d1589a95e27b275d5c70393c856f4ee1bf77686fe686dff9d96b33625887b4824211e15b2c404228b420fb05b95f4e79c2d2d31cee49db1d77301cfc8bc66cd9027400a7261bdec47b8066a72c43dffaf488866f34ac135399166b72c2bbf9141d07c17cd4dd8a9eb783a9ac31a5295a5676a248eef69e321db41e59ae904e528a30cb29e906400e4f0db8353a3e743c59c807c8a43c390f59ae72511c8e2d1f4793a4aa3f7a8fcf40f0ea959d4825c2f0dad268f34661d0f0104d330ecd31d84bd90d87eb560b1182f04239d37ca8a367433a24cb0bc4cf9db24021b5ebe4f3fcbcc833890bca02c09a61f5aafef0ec1a32298861812e4944baa15bf6b2fbc8c54682d161c67d095269cf4ca0d6438aa356fb3793abb8b01e786526971c3025cda8aeed139b11d075f5ada33dd0131bc7898844b9de78899b03a4f3680ced60128ac9e2f9744b5e06c6ee7e4ad52ba142bfe2c785ff0a1b610f63e69e0f6cdb38557f7351dabaae569f45ced886b76b7097d19994de8207760dc7db8ca3c90fc902387f4bba5c39f648df9685d71d7b6a1d7b614b050d983912f55f199ffe32d470fb124be0fa3f1e2a94cb53b1a60758a490dfca2c1c37f9401984e2f3a127db4f8a20b715850cf88677aea9bfe4dc8c1ebaea5b3c8acee935f89f51d1ed4d6550f633d52dbf7a6885195ecd8b321c1468d2c79d38ca1851cf77bd149fbb2dacb9adff59d7db7b2e2043223d18f13e9e5ab6ca8a22f6740d38390f4f114996921367c5002aced64fc388d71985bdbb3ee17384f19ef02ec2a75a0dd193f75bbf4a271899474a57138cf8396fa70c54e5c5d404d98c6e80d01b5cdc175dfb82dc6f83f070587bb6c680cc269c82450a86320ae1fec7feab0a2e19beb379bc5e05466dd6ad16145e569b7cff853e095cf00c4e8b033f5b220295bcde66944a3c617f43d59a87c1547a0cea991191b2f3e637bac062376f9df8129d7b269bedc79ad72e748adaa226d43e5d49df43d4f460ea9172d40e7c013038caaeedbecb81a213941b8431bb6f494d78c03f9205824b30e108aefcbe516a26be22f33150e03cd550e966af627c58cf0e38a72512e0106fc0dc58bf3e5ce7d2854e487e44e9cdc3df36b41ab98f81727422dd961006a921a25dd17c730eaa5985b69d30fe2edf0122af5fd6fdfb5360b2eabae0adb173e0f4e7c286aa62726ba02220fb397247bdd16e9f432dea300cd758f7f9bb38b6e92073b90f6a720a85e677f9ad73b05e787b44e32a0568af31eb1499194d8fe54e55b91c56c1a757e7490b295c327d597d7930d8708758f2c88653bcfc81fa9f83751e91674ffae774379cf94b35f8d81bd7d1b7ea853755e01fa151a79e6174b7dac153b45f9b665e3d62cb61d87094e5619b96b4744c05b01429d4a622f0e3f2a7c128278facf9fdf3c0aa77cf44d9e6e0ebc979c39484a95b560339263b04c71a91a59936d8196d217eb3e8b715417c8a542aafda470cc6d6eaa1cb822089ec6c2815df83b3b283fb493147d0411776163f1302cbb12d52cad6f8d5df05daedf6fb5081881dee06ef68c7f15665f279504ae09f4c814f394e3f66bde954803ddc754c6eb5c6b6b22fc007f2c9d6370427e8b84afaf1459303e601c761f5feff80a8a944af2915469e24c8b40c3f72e87503fa5bf7b3fa75ba1561f4e7ddaa700a473c3c891379f09104aba9490dcf90bb9fe43445fce52e7fb16a8569551fd81bcdc569d825ece70afb770312eef82b389fe308994de5df27836a47f5c04b14a394d6d0968aa5817a02e626200d2a6d04da1438fa51260030f2b16bbc6ca43fbf6c98c9174c56d8cd4096ad92d2d1d15438de7bb0ddba952506528d9316d2c7132fcdc7db53393e31474817d2a19f15700a2742edd803c1af293d4e5916d274ea64613fd392421b9c6d709b967cef3a4699b818c9d6793fe3bf43fe37740f37d9d6499ee3d0ab63071e3bc5a02dc16fa34649994f84a7cae99f4e9895e3a07ef542806c4653ee9905aeda99394b585ce2a5057401bcccdf4860233066c87df3cc0ecb81bc437fbcc65ae855e0239df960d144032dac438753fbd8a458dcc68952ae93a15b508cfbd381801077023b94e7f4462d22359506f5e4d212f2c940ef57f0d1b38fd453141fd2e45c46b40345c71736b4ea11364910945d1feb04d08a3b7a7e2841bd42a3f32ba3a78c3ff3b6af8981a2cd69bb2d888edd178a35c1208cdb2c87fbd54ab873a62df2715a7d86f64d15e582e849af5eac04c784ca6bfd0b7fbafcaeb37968dcb96b6ee998f85ddb66391c7136fa1df3adb58b7b171f65eb9e15a34dac74ff1ec19bd35b4c18622f7674ead06dbaf0fa59a12aac51b38b0c881f03351c3a964ae46a3f06563d57fa0bdaf0ec527e8ea0de06df11f7cc7f3ab80188148e18f972137318a86bef72cf8e6e1aaa7fb7beff40ff39d642a81331ea058f2e3e7da2fc49c8b216e0107e9fdc361689d2fabef67513d8fd889da94b3ff4f2c7a3a7b9e9faa16455dd75371f377c9b2e3a529c113fe1f26a56f4eda7b195a1ce78578f1a19fb4557cfbc59c7c6ed1f65d3eef520389e45cd0db8984dfb5c86d257d0c2ccada854737696145e44e63c00f3242d7b60cd788ce77b1a280a64bf346c22df7303dc7bb6c4a9ea81f67021413df777889ad513c54cad337cf135f7ae734ff9fabb3524b20b291d8f59d8847423bfb8f7182cb57596583aa11932b90cc0c09961b958d302ee618369994c1e37f84c2bd3006b0cee785f61d1c94b96f8e8692ea9c41a5df6c21eab16734efd8eed334a9dadf30828a679b4ffde93599d9de36ff5b4b63b5eb35ba1177c29955ee5fe2a80df936ed1aae9b82a65fbc05f627dcafeb7f797ff15550faec91248614ebd3cf9dee7345279682b68f0fc07a6247153e168ad9047781e3276c366cb7b4c479b899526b8d6b76a750f572eaec083e7ffaca405ec124d8f62323afafe4ae4a3d05b55be4577b0e5f38e96045f22cdeab939ac4cc7950307acec749bef511c8ed019a259d08a497a38681d02e1cf578b0030ff7ef5f002a34439d3d59e2c4f04ee5aedbff1f1c3fbb20e9b28f54a3813c2c5f69e06cf712bf2d6cded4e349eeed7a9c91b3cf9295732513b30816e6de872a8bcd57dfd5f4227fc38ec0160575b8a86c625c78fc3e719eed8576334f05da6ac47620be5446368176ac8307ed5e3c616ebce3b5fd6e94cb1a142363436c348e17412d23542f53f1a1d327e6f1af56894c733d4a3de923adb7c2bce1ee044220f2e9ef16492f4333ea63c3f5c49410def6fc409e6951d25691f090bca4bc0b8e8a008ae1d9425fbd37676a739472b2d2e39d75372ff209249809a046217ea29960317fb95a707434d22c2c7d0e2da08e7fcada252674f0b6b1778796bb1354e91774e0de0b0fc94f82cfe3b1891eb361a74a80f8da53b7ee77d1291bcd7a66414cb55c8bde34ebccafa672cdb84a194368b42658740439e36e46d5c7f51943e249f39e5e4421bb7e7dd639cc256e7a1da353da64128b8243b638a1471009dff1d3c74b8f54d56906681c1eb58972f601a1ace4909de109b9088170f2b8039f73dfbc92fc0aedeef7ca16b4dfdca810ea2d24437a234d125cbd19424aa99eabecf351275e39ac7589c8cb187b7cb54be550ddbf6e958e2700ef87777b92f42605f587d3ccd8bbf64133179553380aa45ab4a9ecfacc104b402e9aa6a143d781791533c8ced9e7fd65335b317849f96a64206b91cae96058a8caedc183298a9732f3528a35ce9853b427d2711faec44737c84867c1a73f251033bcc83fed05c01753914e6ac3ecd0f2edc20ad3bff5a04d10c4cff5d2e8463680ef5986f628eaf68a6f936cd60840205014a65309f022e05b51a9421735f47601cbf372b06ab8d2fdcfca2c2b7d94b05dcabf5cdf1e9338732a8df7a9a3fb50e9ef6e5cd9cbfba2c4aff6264a9b73ea4431ec4fe03418da2926b5e58f48a2c76215a17d7c74a03d9ef30a72912158872e5fbc954ff5db9382f5282fe81701c6bb4972a2c96aeca8354f2d6e83761b726823fc5c2b1d8a05fe965fc1b7619effd02ff98a7e745912da1030d32e1c88096eb57ed2a4a44f0f67339f42cd92b0ec2227e000e0f7d394a92ae19ea958670e5c874088aeab661fe004deb46a22e993c07378c5ec08e3f47c541c6b871385f0ce1a66fb5ea8de0d92b30627918a80bbf0a4301d49563eeb8bbd60eff9a8819125b7f3e24328ff76cc4aa1d3dd4092936a9f22ec6ba122262916cf25f0048f4695c30439f9a9b7238ca2af35c6869cee844feef8f0dcd1d08ea0d40f247442ac2a2677a7256f7fb8d8512267d7a9be1d52eba3834ac16fd753ebced59f3809eaa83f545c732453c71d693d3f6cf717416b32378a2136aefedf5e3bd39842a9a5dfb520b7af9ae51cb3855bbc5b44d74e45930757e1d98280b99d4de94d584392347e80771944e81f8ce0df929e07a42db63803c3821371ae749e9f3d40b1571cc270e6fca8c4f47af022d7b3873e8f53a4e3549753116ef065bb8b5c2b181b16655b76334cd44472765165467191555b6cf0248ca70cc4ba725d01e5483f7267962e0327da3d7aee2ac4cbb53211bd350587ee14af2bb6be857c98fbce246222a4ca55a57cf603e64c7f0aeba65c40f14467dbf4757e57decc4dda3d1b891027d8a179ba715a9f43ea6716a69999bec8e54b1ca206918c942a836d21fffcc6faf40dbd5e48896dff35c37976abb20e2639237a3b3c1286cd7ff8166eb579ad1f4c866f2acc36fbb188594dec38e45cf126f6a7c93efc40f741c181e2d86da95abbf907d38e00a09f6015ed85df52079dc538c7a2111f2be448252d3cd013789b1fe1c91edd960eae1b8cc5a5d209fab7f495ba9000252d15630b08b9f684b59721be9d8870a0a8dcef3f57207f13be21d26e50e9f2b1225e3168319f1690cc90d25c79089cd189cac7d156d956d84384f54e545da7ecad00ce981cb7c83776984fdc22e18bd32e59070f7d417383a0960e8f49e63bf63580c876e61d0f05903decd36d1cc91892cf6ffec0bb5d2a4b438478f6915e696c904ef5cc7c242431a28765436304369cc96d92b9d3abe3bf3d01c594cfcf6864beea4be038dc4138acfeedc7811b49769415bc9e586e5593812f0e05bc8d1a98e907bca2b191a6e2a26982c5e74edcf4b2507174f793859a5993fbc6625b3dc2769426449b259477d0248f842493a72eb754b85e06ddcdc59928394bf31cac68f90a4eca2fed0b1b5f6377a4d4bc8dc2353a51e60fa5523e3778d5d0725946422051057c4ad0dcbbf2de37a2154e8c6bbb7a63bcef8603e6ab750e5bd2bbe32a282a8fc4f0feff443fa4b6eb95ff06a422788b5545ca9e41ce7355df2313b5bdcea1f2ba9eb0bf60e427e7adb07bb4217a6c76c98c44ae4049ee5949663f378c3cc4b034e2912e0e4c25390302f1ac791d7446ad0fce70a933cc53a1ce837d13f3e22260c04fc60587b7a7980749e5a606a91926a28390a1ae4fefe38235635ab1696893e111a2cd688cbded6f149bd00a4ab561ef42ade808adadec63abe66ed7d3ddad3766ce508a5605e028fe8719279af47746eedbca5fa3978aea67f8c03a3470e675ee21f58abab8634c3a02476b2070fa0c595ed7e4d2d5c47f5ad5e188e6f87e0c3270f5c9e0cb8cd161407ab314d189d58d7b5f8724736d5daf7e02ce4db9422e32c484d5ac5b2e1ca013b14d2dcdaff89996f047b1fd1af7d2dfc59a4712b69883caf78760020170ba1755f50b561e0c1a4fb059acb429e84579a3964157dd3f0fe3644b51121e50ea0a2419066400f3f53c6e57a85d6514cf1fca7e5f9cd6295a4b2cbcd8129c0c2d5b249ac80013acf4c84ad6f7cf37fede06c0ed4a113f8755f596aa6756e60e085c54379af63c81d2e78d9c7c9eb202df03c098d047170a030cb21c445d4d0cd3d5a6f7254b08eb0c7d3fae56f38a4dd3f37be0fd4bb89ea5dbb088e89fbfd67b96fbbf4f433b19a91c0edc8a2d1579052b3293bc979004789459a2b2a14d8506bf43243e11a7270ad663f9d58d303cb9a42d3630eb5920637e373cda0296139d614650a5a3fed5c2ac5a711a6ecddda56a14480024e9dcb0cb90077216fcf2dd3437098a59a840abb06f1b184b9c29d528a75420ffe52c015aa33318e35e291fa6fbd61207dc69b4e4d718c0a37ff98ce9be37422573e28eac2a814dcc779ff0b6edaf447f3686bf40ff1017206626f50b2421dc55d8cd43dee55b66250fed8102fb75f72b9d11a7cc0406f22ec523f31a531a9d8dd1d87a44924e5a9299a9ca82c795619cff9eaabbd0bba00636afdf9cd9e1e2191d6823170f1203a6a4c9d345e4294601c2ad653b64f712e8da7668d44f065ca9eb0f69a8e59870897282c0295ec6aa5566e97c489f4e55e0b96af8575bab0a847946b7935b61e257da16e1db75096409e98cc7740705bf2b7d3944ee19a8bdea2e9f96c7dbed9d7a0fc858867f0719dece4b824c1405f58c0fb952d0f99a0646b0803f9be720f63710c8c19867f431173fc63184a97e51b176c508651628e542dee1c4c93bce2d0b39a513a8c7b49d58d2434a4bfe19ca5c2c20c47fec9bccf73ebbb18595a68567002516aa5a6b876b42a79fa62d2c1317eb73d0685effae7ef46a0ed4a5ac94e6be7d0f1867070ad54a06824d917f60ab1f80855c4a4075b681cc3cf58d2946a3fb09719dbd43d24e396c506f9d91441b67fbcf9f8572bbaadf2246917d8ac2eb358a62dd0335f69e33efd79629c7580f5bccc71241b058335f2c203b12bda76b10c337190ac981e9eec87719362a9c682d90083799676def9908ba423dfa35071b5662dec2399243c045415782bbd9e2a55683fd958573346de6266ee9818fa7d6c04f18c038af779c30a51e7e33c525d7f9d8c9c9609c7d68a41985d6e90e2276c15c59e560861e37d20b7b933e2b4ff419e5cc98c2c7d29866d0c4d9a831c392649e634f9a139379b68dbff9237f2362359b4bc0bbb1bcae519db8339e49c608cf8dc18c1d355fa23e0028456d2e17f573f4c5694b9197b86243cf7e5f20707b552e11ecbc9d3e12e04c87ff79caaed2e2ba603981b67048942ee8b88f42be11597430d1408ef45672626df083300d7bf2ca444561a93347aafb893d3759c595849b2e8b3bac3d35982acd068689acf2646e63badc9cee6639df357010ce61595389bcf34d45572b72fabefd44206ec880c540ee5d4a3188b8145568c16b6b13a84fd92751a541af4d40f43100ca3dcd04fc6f86711b6f12ee31574f004863680ed51a808bbeb9cf074ba26381e1643c3a245597d0b4693782f6fe1f196d473a41db08527aae5080b916cbd9720929bf21ac1f5b796645282edf298e8c08d52971a7ee954b860052fbf5dfe4836e3200c0795ad5eefbe907ba7c0ae54041e86171af9a44dc5a6dd78494f281e7703e1f340df008694cc609107f6683d77f6ca218dd7fe30f0c627b3b913ae0943fc6d0fca128e347cadf5f7de6048e7cf0f1ca4500df07c8ccff08d3ed3bfca1e3202340e9d47092a7a70bb6e27904422719a5c25a1a7207ea5f5d82d0fd4659f9f27f8d465d83ed34815c42a66db2e99d8f8b30695c32e35e3798c0498fbc257bd3fc736539502f26a348b1054cd07ca0a88b9f7cb520283c2edc9ded5cefcfa3d6b42637015f95238b08a8318efeb56f81cac314c9ef5050976ba073d57d7b27f0a5ab2e3caa695f992ccffc166fe50a67016d00dd4bec814a249de49e1a5e5f2b67e08884e9b799e4857a78f9de64731a389bbf78f883961a3823b3bef83f26f19143a85b5a4f27b44652a061fb9a6e7e1a6f6b2b65e227badd3dff8c344ebc94db419ce654d637dd114815b5b50b058d009b6b1b9e0018ae2f4760ff56fa21a1565171f50d5e70cef4fc94835dfe249d136f5e564115578ac3124fefb456308fc6cece7d8920b5ef19960e1cb04eaffc778d5335adfee6b14ebfe6779e6b91a730b8d115cec01a2108c176b08ba49d679ff4a5fca6cc287d2ca1f13388c5c1418f0995f91563fc9dcece7e10895f71b1b48176731b551a05698f03d285b2ffa06055a782ef32155449faca38226a05cee3de783f5a0368dc34798b03c2040e48e18dac0aaa01501dece1c86aae314a901421c0d4d2a07b81bce7f4facdc2aa9e8127f9c08ad015559f4e9dda3c7da502aa0dd12fbf3018cdfef11b547a1611b8bd43443b3d40c51e427053f6f9fc5a82b3f775a1b0e1d2527a980a84f16393ee77aeeb9ace01ad9b6d0edca603e95e93d8ce00545a865b5ad973787da7e29b108e49a4e1895ac09b47698c823e6f6674c3176aa3f565ada0a12664f76960576aa11397d54304f35fff64e46c7141ac6977ad97ea00cf7d23e810eb1ce47e2cd123678d3392571eda19a8f4600b69b32194364b4c74c0a98ca098666393aa8a8e1a126b7865d5ee8dd804c751b5e6472d8d6af61f697f474961ca833acd3a1d3cd44f9f02d19adf71e9e6dfe28f7e17ed7664ac6d8da74d87bc16ae335527743499a94d88da72fbd08bd10217d1951cbe45a7098ddb7f716913b80a231184b904799ec046e0c1dad96846ba989d348f1085e46af6984ce741c52a07126332d9d43f089a238e126b2a371804a8275da65d0a77278c9e2f32203b62307c42976d75dbae31e5c0e23d663fced61ad967ab872f7b78449d403d765d07b5ea02ecf721079c17071b3dc131ee05541eb93abc6fc030033d6b74e748273aa6c91e15c5148edfa17d69f2efc3158b4ea5dd5b76bab16db1851979ede069b88633a088b0b2110706567e0866f53c00ee842b6a6e8255f6df9f311fc3ed4274a905c6de4d26b41a759dea446fba47fd401ebb7ca65f1c10a0bd71f7d722e029b568a6537c03516baf78b2bba49bc62fd73cdf0b225b3f08b1081019c13f08796d20a67e9bfabd93d8fb515124dee1e5bceb02f67361ffedf89f8f86a6bab345770557b5640daf326079d8b9ba86cfa6e77f2b993ec09d47e1a4daaa505b979a9b9fad043cd7e85956cefe8cfa6895a9a9f47f0a773170d298210464f081cc4d4ea1b7ab455442975a0748e0d589f4b0d1f0ba6e0aff3427fc9cc8ffa6338d4168732f165f4dd116c6c95390157841b83dcd7f664a45654cee8f127330841f69ae9f2c67621d812a468c082f0a02adea85f64448919681a13b98fd340ba108414cccb81aea6d744bd85d958e3ad1c920b741cab4d106842f141d780c2099bd943bcc25809c3afe0e3aa1eed88e5cb76715675e7c7c5c66d5ee3935aabf846cdf1d7d20e64364ad49d2231040e85a8e36523ca009a93688613ba6d252238a0f9bee9eaa89f03c180ea934ed2c1e38e57f5175c3cbbdb3bb36d0a44b101e102c302e754e0a3d51cdb84b4224678388c5590d7a68b55b78012aeda3cd9ce950d7163c2871bc72af7186b286c3ba406664fb3883a7d67727a9d6f1dcb78ffee0960cf01757fd2312b9ba52de582fdb3b77ee511e85f886b469940552b4b0853c223018ec346742bf844cdc06221bb90cc0e55b598f45e2c22d45ee4c0830e0ee59f5bcb1e87ccbe1bfab10ca146a7ae073b9cc554259152e358357816a00d9cae0137f595568ffaf6a99c27edae212c28b7a2b1ac90b7b14e59dba2388f7abcabb0579949533e89d25216880d5171a6082e9d14cd80fee1200642e35c7ab3340fc1f625ce4544fdae289529b60e60de6e5ff1d46c232ed4a2236db9d0bf8e730d1f1a72bbb64c8481b8b8fcd2eb9b313bf32e6bf34c5e20350d38e4f6413b4a6d8c32f0912c7df7d1aff38c7dd4fc4301b6fa59b5c1a6837440e3f88352d0c5a29be2da8acd1048b26fb4409c33f73a4017bf8ef029464a29686ce1644eeb2d818da14e82a48d844837f8d23c91847466b79ad0e278aefe1b33f021d6a1c971db9a21c3651bdd3c87082ae5eb2ef2827d1bdd2a4a6189dc1066817ec8976b412ecc2d7f5de26f75ac2d08ff4fc3ed2884c48a2d40b94df4b2dd04c9f91800cbad68513501787a3c87ffc16aecd3a56104ffd1f9116c7397e770ac4944f00e1f542e3bc97bbac6ba5e5a0a9273323bd90ffb88469c4cf49d1ccd16ff9d161ce9cdffad4ca3366e4001b3399b051349de937b7040d0dbc718cbf0401dd2895decd8a69534c72eaffebfb8f5f5ed54b28ade186e37308480ccff7e5099e96e05e574b15370b286a9041f736d691e909e7dedeead8834523f39d1f1c3a3fc4ae019a9a39cbc3c7d6b214a3c2474aefa1465abfa6520b92bca0558333c56ed27da00f0cf134aeba139ca783bd21b91d0489bdc01730f6e8f18cbd1cc6dcd54e0ad31ae3bca0af9f559638c32ad76451854286130a7e65b96b644430da5e9db67ca3908f4901776145f421bded263da80e2bb66486967302bb2115a93dce77a3c3551871170369721784cd60d9eb8fc1e5444ba29564e99569515ff89587979f5038848e482a8071e425dc50997645cfb000e016cb724aa211ede7ac4374f51a7fb81af7a308e3a803a5ee45ab95c99e664ed24f60c42f4ef85f80ce9f4f1b99274130dc2fcfb9992680a86e6c6255636422b94dc4dea4b9e53ca62748c69709cffcecd957e4ed8352e3191387a56463b0a6c960cf8cb8977b7c41fa9811b8473b37b7245250701c2d9c15c50cc52caa702be6c833eaf689f29a0f2d223e4c127e3cba9316f434dbd34ce2d6bc9daa642323a5ed14a74d761c9dfe60feb53fbda16caa520ab2af43c2e5d7929e024e06febe5253b5c0463d075aa4f21df9bdcb8061332850d14b6e2c54b77825cbb6e5fcf82ef89ee1bb17726f1d7d7829fbb45ad35df4b3c0f31f4f8079da1b06489c55d0e7fa53d6a3d21ed0d1815443b9e1e84ebc3baf2f414cb7c7b014e3ca47624b45422f501e880a23aa1904655f81f0ec0f37dd12ec89eb30ed4bf09464375e1d11edf9676d91604e31f7bff583be87fb1d7e117457b73241281b47d783626dec9fdf416865318dcff4b292a1d610a62d168b3a48acfb129611d3978108e186768bb2c6d9339c73dbb6ba07f7d09814c1bd5b4187b01e164aba4e66615e89674c979714d5e364cd8b54251b78a25732ea994cb261628adba8ecb0d65184cf56594fe4d2856bdca0c8e157124e2db1b671253a0ceaee4db930d936aa5a979bdfcd7d2a85ce6357b7012f244b9089135fbe322d35e3c62bc88293f6f2b5c538dddf23ac53e4ee6d42287ded7522fc7698aee39a69331564ec04f17b34a6537c94db1deef5c6d5976ae597bf15ca96740992926bcc30d1ed52fa4d857d827dabe6c8aa5fd11581ed0dcdf25d07b35264d64fe298feffd96403a56076a7c93f9cc66fc5e5e73665c3a01e2c5485aaf85cc36fbc84a37858aa5adef1f8d39a1fe3f3d83fbb0349f3ba9431cc559f91524b360048d1b9a49aa06ec72a13ccd423d35d2d54e4359b250a79d74f69d4f289c60c636c4a33a0cfb12d61e71c1ce6bd49d2956c02aa8f4934a4319591083da240f6b3181db3b32f829c6b9c29555113de121b72895eab6598968368a9fb90e8a17e86182d72a04fb72e0645bd69004cc7dcdd9d47023736d4f6c86d4d2b89c007a4f53793ed95f27191e84b74977a641044ead918a7521b6d0a1dc951668a47938538d1bfb9bdc684a5d580eedc25bdee82162178c6152370931b041e0092603013ea1153ca5d843e0309496082890beb2f6d675640fdc98d4c3f705ea70140b0a5684492bf3114995e96683c4f8f676b941e6f1f6fa98c9fbafe7795fae75586a1b1de07bb293f5f6d5543f802c58165cc3abcdd062d2d2f73946e6772ce546ae71d0972fccb81a0e76007dc973d0aa98a26417018799c2599343dfbb87155b8d9648b21152332bb074565809f902f8d3c2f7da4a28c71f59dec3af6caa109de00ea1ccf900d267eaee4bd3de08ff80b818c5b3619fe023a3c83da2be525fe8bac2aa3a96602304ca85b4dc9b40a7506d03974514005d14702293b92c75da943ab83c52bf8335bd28a9393831492bdd773f128ae07715ae41cee1b84959ca898c3316180126617936f9a9e193df2c55b74794edbd3e06a5fd40b8442004906710c5a419f5d1b68cb1c61acaa8c1363d863f8028cf53c935178ccd60f6a3f2757c32dabac55c1a7f135e802d7c7236c2065b46a90428cc99af36b28fbdb41d2b74881f6315c43b9794d6bf50d7c1b76e4272d0cb86f3698c2c8707615fe2b336823b5a642c371417cef292fdef4b22d2259ce808de31ee0cb0faccbde919526222407ca4e8ecdf3e34772d18bef03750cda63dbdb2c58d15dd48a9961c6b8d5125629fc1000c6c3cb12a31ef4970d34a956251593d0cb9b98a480ca760860ecd8831a1b328bfd291b245832a2a2b5af95496ce25380941af200dec4232c641cf09b1b834adfc9fa93fbddbe7f5baa4ba4661e023506ad32e1bb5dea31b70805ac9144a8fa78f97164e4cbecbe79e3b75f2e0fd864eb422280d1eda1e40c41eee962fe87c06d5b8c75db51d260999ae80651346fc0fb4dd0f4879ba929a331d7fcb155af89f9605efd19659fa8f35020b3710eea96daa1b1073fa5ccc5377fac990880a1b215159561d0dbef4d623ad1c6a98a6c62571f40b267f149d50c9a677628613014854bfb667579fa78173c2914ad64ca5b22ba1177e0d1876014edfd9764eee0889fb7e31c5f55d85b728750d0212f49fa08cb21b393c1266dceb127962e929e6fb2d7eff023a66b2d0a09baea0dffef85ee4d5bb13a428f714bc063831167e7bb144149f8964d43514fa0a126c8599254bea4e240f384684b420aa3009642040299b83e1c747ca4d0972f1c4e558393c3e640ccc21b6d82ecc71726ce49d3fafa45b359fe1c1176557d37fb49c804251e66a0e36923399db8903c0ee755d53ac774da865b791ff6a1a871912e18f3bcad0d98c7572ee016449bcd9f304b79b48ac1caa84ff9918b7ada1e77cff161e692325a5c2b1a79e81b27dedb4f23d279497e09df31d692bcf316821acafbf52f8b1ac54cd14df0dcf3197555484a50ef97dc868d843251da228fa13f0244e6d0353cd32e3d5807f913276a9a37a3b7fcca9ce84240d3f34fe945d49cf761b5831a9f8e17b12b777ce162539ce09b4824bb78918b6a4f990319e448c71581a6d92d9aae150f4aa5baea75a5a5064e9056230b6792b2ccff88a1b204110f0904100805b8ff2e30f900d5d4f7bc84f7f6f456286c405e134a8ae1a403a346531bf129ff8fa526805f06f9105a2c6e4e0022553bda943f51ab07889fa973efe91a7fa8311a0fc38f2205cf9cf9a9d940e346459b89522a0ef49045616db5d1b048a6be5ad2340db5f6bb9c7213bfd4644c8564b7d350fe21dcfc1f816f386d3dd02732f2e187d8f17a19c75093ba909ce834d8cedfb828f69a1e1dc10068fd6d8c041e4c997170ca24b6fc6783fa15c07ae17e644cc1eb8eafb02c8b882ab5b5bcc8f9b31b86d9d7152fcd807b9b90676b187e900a04e1e0c3d5ec7d2c2d69e181e0c569b54a1bd54fca4f259833b09da1f6f30334bee8322a02671a63ad2d9c37382421c40f89cb98714adc84e53bdaea8d3b7a3f8a8b091f1ba917ad1e8f00d1965bd11823ee1ae8f2741fdfcb5dbc09b40980d51429ad80279ba6484e766d30ff3b5b9356edfbdd2deda97dc86e390a81b919328e7302d9c4209a42477104402cd54a9c52a5ea1fea86e6ff2221e23d5381ac442490fb6bd72df68fb6ccad7aca9d8c8cb864d2943ae7c1ef7c2ef7dd13f414aecbe057edb4a5f78355fb3fd7f2671dd854606b1cc1cda8143539f091c1b2cd9016ac0a6b0ad0ff0ac86b3ed7b87aec3c411253cdc475a0d2a4d0863cb87ddc4210565f3e6bb6bc47dc1b62f5ab62b41b11ab9d27a3a0fdab2919a18821a37ee90f56c2108abef4c69e3ce171cd4e9e575f0e59ff024d828416067496f66971c3deea6420e75b925b34a1f441086e3dcf3130c3b4115bf7d1354cfbc7e995e77699b0f9b9acf6be869a1ad3149c9de2eb5efaf8162296f85acc5a89de4ac0bec6c5fea3299873775e345180f78d992496f748bf75579abb09a4bfe527013b9258c591c09a6271fa004687b8ee6b3d0b96c7811c8d835e5046b075b318869fb8d9c2782844366bb8ac74ead707331baa18481e84e0f0e110e9b39a233fca3fa3d12cf3e7ec9e931f199c251823517fe054a9f6a1110c12981d1d9c66b595bcc7c94ce9e4d5cdc6d7bd451ce6fe4791b7a6528b2e2fcca41fc2f597b69ea5fab5675d09f30fff0cd25464bf84d68365a3492fdeeb83dafa33cb6edf636ecd15f2e4b32c4967b3a9ba335f968017ed7abb82f55c15f39a623920a38f2e48f852798cd83d95bf39ba2b3fce66a000c7151e9814333a1ee1a4797d6cab76a8ada4434e388ab189e915779c8c809199c701e76616115169fe518d2332a1cac26cebe2c4a2480a2e37499c13bb2b1affc5da3552068c14b200989179971b4ead8cc9fc3813a800fefe208e090c6559467cb9707615cb0fc87b4cfb3bfd642c32af78cb2048b72a69cd9f8aef1c2eebd41ac1e6709c01c72dca5f25065e5c606d33d1c9223b94a45855ae9834c788ff2c703c2a605e837deb47107f5ae948c56fa9e90e05c576979a8d062ca1d8f1a0ff05ca9b4397606e8a0c3f08fbd19a2c711d7a834da60914c1c9b777e9f3e0cbb78993181a7bb045896d1bf5e58677d6322afdc7b863cfa90a59c831b6d88e8b6da06f3f588837d14db2bed3337c7d651d6ba39772f48cc1dd72793e9f3d372b56271aeb3f95563c46b440bc8a3440ecca9e7208e9a09fdaf472a9b1551cc4160b77d53fc6a18f5aee64f3a1f4f5a6881ae83b795a4653ad4c369876e7e9a31995d6cfd2aca9a02a4b4d60bc4106311bfe2738346cdedf631f05b4775cbbab7eba945e85e19523b1ad45c8bef3651206e0551620a5bb044962464d9e22f2cf5ba99d371da257e0b4d569aa5df6165521101086d3a9f77813fe6362262dcb72b5b459a046320ba991bdb62bf41ac590462d35968c023397b0cee4237f0208eb1fe1accec136ee4bb0fa439f7fd23a5c5e7f2e3f65c6d853cc9b851b4ecccb1b507ac984b68f76a10f37a3d12643d10806ca58cc150928d1f45c275a8da6c07938900c46a44f2c1f4b594b606e95804c97f7987340fea63b9a6a2a1d7eb461c685b1e30e7f7b067956f9556f74c451ee1e2cdbb38dab7458f79e52d8bb6804092d56d9d90155873b64d58e75daf4ae5dbbe030b9669086f737948fe4c2de1514086de97b174f6aed785bbc2a6864f06bb10b28a023e3810eecb5a929ef4b3bd3a944310b24904113fb658811d2a670d24193a7c679f86de7fff1eefcf7b074eee59456c9ebee0f0f00bfcdc049e0f1c103e60a1ef7f87eeb4a2389c8b39aa85081f2fd63f3732c9bca9fe9806e40e90a4f0733a5348f494d0bf160efe1fd1106e8994174f7ac0807435b24bfd7af2240cd658442300126f5c2bd1491d91925eeeba7f18c4bc107aa07510eced516cb3e028559f99b539393c3e2d0eefc1f468fd81d4866276a82e6022451ed9094d865e05dfe4e88e4c531eb6441106c311f05cd5dc370df7a0ef58b1cc3cf81c1aef9043d39c9a90aa32160df179a6078ecaf8b366af3f076c8d4e53aebe6a26026335be1211391baf373f69c3f57bac1332b0102aa8e1130367d77c82093e09d8ebacfa291c4b65b3315cccf2eb178a66b6a840b79824f815052579ef5265f34c3f0a50d8882744c9d001a95cc075323b0a5096e2c12bd667692b12f8e025d1ffa5b5103193e12d03ca1513a5e7574aeefe2f4aa76ab8df719ecf6de19577aa7f93a794234a522b321bebf6b7636cb88374542b4b84418926b9c2160ecb41b4cf4bc5e1dd00e648aa0560ecba869ac22c19be5ed7928e6242d87351d8f6faee5e01d804911339e75d451630b59bedba8eb6bcdd26a905a55065fab7fe7d735fd2ab5b90f24cb42fd00efa20f075cabfc5d42e503de82a6ae68d143473b6ea302ec3e5120d62350c1855025681f4144e1249b2f566141349cd9e5f7eede740089a4ca6a3b81e833a9bf5ba1492fe9e569688f8276af35676b93c717373380e7e9ad3ed2bfc36ab728f7c065534444e793a7bbaa7f5548a7d9c57ed478d0393f5a478f29cbf98635cca7617ba164f73816e4dc8849195abc0d7fc309d1bd87192e0faa32988fa8ce3b700b9063c136e25dbf522b4c6f2d7a17327a5b80ca114c949432a11d179efa9159ca58abceb424057f62a0a2b849c5516879693e3b67f404b5a608f0ffae999668b8f1af631ccc6c2cdc8bb685d5b358271cfe9187f55a3a26c6292c1d1f14c8f76f00c3a28b256efa47da084e297cb2d5b8a3f4ced44d4851d703f47ed07c9cb9e92684e281b86b0f6da42c85726b771f6dd35b57fb59b25e177ebda471f6e5bd071ce821e9b839fcdfd4f0dce6d35750da7d56b8908d46e5e0d7111acef6a0156d08f532bc832ff5f3f4500c8cc16a2d7c48e026e9d6c16a9e8930fe81a3e0fe1633b5d5299948230085b585f40687bff815bb10a0b481160b21b69e9839edb2b94e085ec87f68011cf8c61146cc9bee340e04fa04afcd0011fc64960bcdedf084e36c1d5489d77b40c63618bfd64fbd7a041dce4add859afaba85730bc439b499f21d38cb1fef438d4f063e18ff3d58a637b7ecd1bf77fa0abc7010df9599d4a51d43ef7af69620f175dc6c18c58f612f80e21a5c610d7b96799ec1d21aff5e875f139d35d8c1bd7b2cc82ae9a3c177c73cf9706dd6bd266ccabe6a94423018e6f9fefc7799529ba4ac9b8433396e3a00052a94fdbc2093dee06551949a41c5b1f69726d3711096f4f08d09120816d8630df56e592141c9c49604efec241758fca8abfe6d09e8434403e79ed7d28a4e0537226cda10d50212704fc142202a697dde2b68b5348200368af1824a92b6a72ce61951900375e22503b80d1fd763513b93a93077cb05c8d7c336246d726091f8b23750800e5e5813feeafce92faf7d6a7f6f0063fd917a075dcca9a2237b800506c69783a8cb7f5371836642c649910dd85c548458729b61f2ec37448c567bc63fc81bea6fbe51ac8a5cc4b690766ead6e019f5756eb435bd2e64d7f066a5f8367109eadd6da9c04b4ea5c48d2f2ca1bce9415f02c63d626965eac2a1b3132e25327b793fbe9eaff6289061ef6f90ab2a24f481ae6d5f7d4f17d67716e2c923121bde8096cda4ba187d3b4b1ad8129bc8bbe5b321d4f2fe37b4f1ae8120772650909c4dfe2a9253f8c196e310a55a84bc880701bc21915b20bb57f5e215465d811fe3212f591b5ab514de1e6f716cce4021738d1ae93e583f6ccc083aeea46711acf1e41975c03c43725f13360084872ab3a089281d3875cc6554e7219ac7747b08aff46b0008cc5b14b3843823236dc08e5c7c5e60347b22ca3a9e9dc1d398b190d3c7250d73c3657f68d715e73939862cf4a9bde25e867d03cf58a93cc89943b93dec8b427bec2473b0c347477e8140395aceebd47446af3b9779f73ae501ed7a254c063041cd46716e79ef599431348483675092b8905d92de94aac5985200683b13785bdb58391c5f7e06e976b967a966c7505480fbff12f054781fdbf84a7cd6cf333fb69a8310026efae1dde3d97bba48b05e1c31dc886a3a4bcaa2b3f374e650eb4f4f93ace028fc909a3ede9d6bbb595d4b28f1041592a2199c5310fc80480771c3135f9a733018b8a6d6559449e5f2e512cc5bb9255715c4192f15e02cacec46b4f8909288c6b475badec70c27206a8c608be95acec4bf13ae4d6cd19b773f98445ff3f348a2724eb30283c550b5a560e692a71b17323bbe1a28f1b65f19ddf84ce95a077115115e9a14cc73bbcc1aacaa4972fb6e12f17824dc064d99d24f762cd4dabe290b18a52ebce38e6b6a1b9bbbee230084c6ecace36046d14b37a63889044076baa17a74d925d83f2010852f475f909606848407e2c255f327c7fe65551173926453a501aae7b573f0ef8350466f354177d4247378bdd90c9ca33b3ee0c589ad15deed719a59e4caef25e8bfb778ed5ef2334bad8cf62d69d1c272e72e2c62d7a4261aab602a4478d78fc442dbb5bdaf2c3f524c9c6572a20d5c4c914d1d054ff424c38991352231eaa5afb3580e3db3eb51d66ae8190c93f492ad2f4ab5cf18aeecaeb39f246c439bcd6277cb477acdc72c7e174c7e3e464443043940ee4a339b1ed0548e39d25b33a09e76656418d55b21aa443dd5e8bebde7f1018ce8eb06d7f9ed1d340711b385d529b51a45979aa2a59bb33c9fa4a2a23973cdeda45e78b5e53a954098cac7cf78fc5f01ca56c1c4ef82225038fb3449607bf94e3301722315a4d45dd006ca8fd52608b1fa88221ffc633e90a2b8990bafd29581b3d1ab5ddd0a70260cb881b25501379a31345f7bdbc3f85a4d2380dcdff1be9f6b12171fb8454fab97bf71008b93ccc5d20c95b112bfb138040827d749db1ecc72bb0a101c6e0188bd40e344700a6d251015d4181693446a56a5f7f146c9ca66f550817c33766626e19a63683914bc201c161d48dcd20fc43467b81ae297e0e969b94ab751e43561f3030a8fed2a7465ea32c71c150804166e3f93725eda8863b1edac35ff91741925034f13b5cca544f4cf38b83684395b4ea35b510eb35c3fc52160d1ccf80b5b82d5644b25b9349f18a234a5f141721875a9111adb450c4cd3922ccff4da6b18639cc3881a866270540757ed2f59eee6ac0527602ac46e4852633d5f84bdf9aa4a6468c7dcf8efa52cbe9b0ac463a02484b9cc04330a50cc92ea51f494031c0c4d7cd33966fa838e9a550a4bf532b4b68c2ddf4e661a706e3a438970a684a99d723414fe5869eb73c73a6a24e3680affe86c9704f0873a7641d4de346e5d4f5d81b2ce36e7873bc58e29afb9eb539347b930f0ec1f8e1fbb1932c8e2125f29cf3f7b3fd23c1ead2f72682eb3382a20933fba9b743e3be805b241b8aa3f4f651e923ac271e6abad73f9b6832912b1f7219beb36d23aed64823198bf01715795fe2e9d4f0c90807b2b3507d31a18c560398b08953335c4307a8a91f41c26d21501dd501a7aca08b314af2c6ce8894a6011218e2d5002056f38f45599873c9de03c75094083bb389672b5af998ab20d68345eaf060e72fce2850a7b33a1494a03bb579d7b85059321096c8d1da16df30ac8c6f5dc2d67059eb345a72a466806d6884be3c8a57613a429a35c626705d1c24ab8d498d7a0105d4bcee4b3b5b0c1bb41c0a38f7f3081ba065c761b6784e99dbdd9d760dc4c9663081e94455ee9a7b3403b6236dbb3b53b3424d4b1a30fb3fc944b011f1c8d71aec34d6db50394a5ae94f24f70370413272535ef7373191b711eb88d2c121306fe5ac552344e11f6a727bc1b608cd9347a9e07dbd1de01683d8fdd212bc1b9dc962c5d7b8b3371b978926008fb18fd82d5ecb01175c3ad04ccb301c1f53c3802c77dbc8453f72b7f826a12d519dbcf3edeecb6c4fb30cd9c96ca624c24f531f8b71748e67a17813e289f501c9afea222bde028389f643e3dc6b0c3c01ebce5c2334156ac6f801b3e660b4830791b4a105bf5601820c9abdbf23f5026404f85af67f3b9efa71c7be678e1738c25d0269493912eb107264ee85dfd6245c798a0eb7e321da8d403aac40df6eb03d44028ebf9dda906e5ffb5dfb127cd6c8303115378bd1af58ff4383431012da121d7e4587da5570f4825449ce642e4fc4608ab874da66e5ce79e6424efbc6e42b571a5086c1224229d3ecac3e0bf992e0104b81243f39442fc1d0cbb6e4064defb8af86552133946dbee5787fd3838a61ff92011be1cf608a2caf345ff49a56a720992879d0c2fd92f72124ac8687224329c8cfbe4ec8b9491c1e82e10e925a9beb0cfed68d5b94d0579b034954746886b3d6bd1b71ef7f4ecf06d65f42359abd9ca8f5b8c560d0e0b573b58ccdff4826b8e4ea6ba33a82e39abfc2e199c4bf90383fc63777865f96b529e68f6fd45197ce2910e5b58299b53318c1b4adbde97eb03d95f643b1e5b2d8c95f7868a5b118197c74bf60caede193ea02e8ce02d57b0309bb67bdca3bd55e63b8f8761c8e0e62d54d363213344c238729e140b7c28b1df3d1cb9848e274be15f761adf2fc5e8aebfcdc597bfeef911d6efc439cd78f7fda515447ba6bdce690c7e1d893ebaaad55fd9e01b0ec7c2e29b03b1031762dfe2d1d3b735f3c5bd5c7ef62f3e8f315c3d609444b0894964f73abec53094965e4e7e2974aad004ab3562015eb91ba16a4b05f493dd59181a9d6954c9dfb01c8308b6b106e3b4d501e6808ff3644fd0d52faa0a21946a35e6dd0c20c731e5fd8f714eac4bc26beb2d250186b857a80d9cc4633be37de68c5903dbc5ebb38d3500dfb6b60359c77f517cf0e91c46f566003b4fce6e57e2c41051e16793b78006457ab7e84a505088b3b777a3c4545c7452cf7928a99c1af4e19e470e7996ae618a01a47c08917b5ccc2bef82f2b07dcf811ba82ca3064ecf851f3737676bb787670d9863202ebdcd90941d3b9dca901c37a685c8b0702ba8818da51dc31ed8db3009e1c890c575e50fb0e191f07a0b1701b7a489e923ab6b827cff3d40be01a52653e9285f4910e116e0a0bf9763c104daf26f24d9035dd19777c15a277ef1d1026bc2743b59ca3293b0fda4c9561d97ad02a1ed3d08d541d0d92b0008974df77b8a2db277f73ec40e38ce01168c6899ea7b7e0b7e7d2050d8ab5c8ed3248c2bfed5bf3087db67c417b66a3c85e837a827492515c1cf52684e3624e9b84828fad25d580f46d5f4a7edfd116e854dfb0d5655036459cabb1f360d9fb62b33f5b166dfb98738bdd08a9e6cc65b7a9a339445a67c5673961b11c2fb68459ce5db7ddf1ce08132fd76620a940dfa9838973f6a7196e713951a1180b434d22c02fa7cf282330f90a9262e04dae0cb89e6d447ee311c86ba409ff222d2e23fd2d54379cb3b5ecff0f20859481e5cf86f7143312d447a9e090eafb8ee250a70cfbb51955e9b72b459d96fefe130396807b5ee991d94bb4f5ab30251b0575c900f5a19ee8b0626abd9af4c8a888241d95b91d0dd8b9b57be058e6443f46fa2e0aff2751b060256ddcf94b3ced801f79fdca8cc7b0a8fa8dc11be902d148d24f8050659e0f7cb0c285625cac43b6a6e293baa9324340213c757c26215ed9489bc02409cbc0b070ad29cc4bb2e1f2988521d6442b8a3e490f68210d1c5e578d7254d1c3de37c3e090647f42d75f338328b8b64c27215928ea0b77c56004e836d3af67df025d94cdb14e903615b06391bac448bc286e80cc57a9b4337e157df4a28d87d11f7b9f4a144f204785a5a76d5b012f75ecd9c09053fda6bdb8b170c39033cc1b144ff5c4e0bbaf9284207669157eb6a719780e789b1fa60c67729879e4c82e5fbce74ac4e6950d6a72e390a3a7c96f926eefdfe499b3f410e51bb2f78c3f084f9b90da638db0dce84533fccaba9162da0b24d32218111bff27888424a94f83b9164b2d3f9419f185332a916d62946ec96fd8c68ca9286d25a4e92e7e09710026331c7927bb412f1d3afeea7b14649b4d7e8d1c9acc4d9b41bbeee175fbda7fd3856d1fce26928eb6675db934fa4b639427716707e1b21f19322c037b437fb2ac4a72a16edaf7f8e1dcee40a9b5e7da3e8ee384b5e139f814bf2d5ee2e739c7fe45e78ef34938136b066047faccbac80555f0af28c1666e8ece003617ae51bf481805f6a39ffc92b557083c8885fd1b8c0e16db713fe8125a3684117ab1564d53e1222e85536f3b7700f86b5957921f9a8914f177a32d990701415de5005fd5c0d896093798c7ae03e3dba503f2c4a424211f10fd9617e5c63ac86955dbe723ca24c60dea6a2b851bb078fd1f7dc022036d9acfc4540e5bcdce46da633be8f37f95dfb87ca7367ad61c57a6ce753542952d25d248aa61867bc4835dc7bcac199f580ed9c9d5b7a201655a43043aae606e60bcbe5d39d7f5389b33c0be7ae20e75d5adcb81bed008ec26941e0bb804c8ba5ddb894264f0a52d2ad10b2f4b4d71892dfce81dcb01f473992bad7abed361645262603d932eec528359d50e5f8138c9a952b46fff9f55625764eaa66163ef23a490ce0f12144ce85f7f756447b0bcabb91032fcaa61f78a3602d138e3df74105efdcab5bfe0307cdcfee2e70b71dbef29a94a0952d0734e9b0f406a4331f613c0604a30e406271c2ab8652063557f4653828eb726ebaff74a145eedc63c38a6317cd290886347a2d312c785a9d35da578187ea59536dc30c1f8004ef21a9297a873d8d2f6b917db722d0b5543bd88a1e0d5ec32f1159f52880119bda98f11bff8f201b3a71cffbddadb525aad9ec4d24b42f98a204d0b3a2ee924b6dd4d79ed4b600c2347a474a4f21b64463d607b74564594211d64ce9fac32dcb413da1d603ac2c286aa1ce0f6444824acd38fd67774993916a470628ffc1c1ca47c80581314730b8fd1e03dd0bbf6ced5acf4995740c543682cca752bc5393fe8f8ded780627b872e5878c1d82333620ad67d3db32c9cdfba4d61aaec8ae83e007290933cc1fabac2235852e9fb89c25deeb3546a3a4c61c3a3f0cadb38785de7411c69fa1be86f2254fc4ecf7a452a8cc473944d318cab82b936851f425850ab143b2fba216e3a5afda9adc921da101ff3a1816203bc11a406345af1c1411c9daedd7209dbe867b0295eb301b907d35b55c3270eb1f8f03c00c8afe89300fedb4806dc86fc52ef5c831e67c742ca7abd0d4eb081f38862fb65256e15e26633d8080c7609da9800f3a8df33d7700517d9833256f6675eb841bf3c855711f64cbdcfca572029456bf54eb71c32e71cd2d1eb83b060f519794cb5dae11a5d91bff98cc22231ecbc2398fb18c9bed2a72b4e7170b05682357e96fdeaebdd9fa31f4a210c599aade6d25cc8478b92bcdaf4d6900d88820a32164e33bab23d16296f0cf2ea269864a1208bb4643cf5cc25602e58a4782972934253c69b7d028cd62ba1c49def7fcd6bd3e5f225adbb43146b5454904861743d8d9add357403e01600b9a8a8fc443651f051de599ee2610a317659d76a08efa4296ef050a2a5c7ce3412f70647b826707df45c0733c6bc22a793bd486144e00a720bf9415fda5a0cf6acebfb997041fb790260a254a833e7553ff7e4278aa9e38c4624eb39404ef1676c473de40d15d6e312919b108ca75cd1fb0f3f73dc5858d47665207be54250fe12ed6d196fabfaf973467624cde39d2ee8fd83d9566103c441bf7f28ffbe321bddc482f96a30c63a2b3f13d11342b31c087faa066bf3e2f82ad4befccd8f60d940e69dfeeb09fb3d3598b6c15df38a22c54c5cdbfb88f0208896b5b404c6ddb0d3f7d28dcbd879d71e679cd2c092d05bb3c9e88dbbb145529e4da0a3cbdf463f520c5c71298e3d739218e380efd539b0c7b30114dd8179989ccd188bb8f5a439ca2b292483d98304a6f7c5d6acf5f0dae5ff6f2bd0b3107e28288d2ce0420d7459adfd7dd59709765742c5bc977d36c143345c77eb96ddc2274db99a1027560463edc0f46018cd05b8581bacda5902a1f03ed0d983beebf7b1deb487284b4c6936d1dbabf8d6d9ac61e1ec1297860d8044dcffbd9110e1645598c3aaad9451b9dea162631a178d9eb315279f3516c856a168eefb6a9c0f5efa3665755dbaaeb542e1dac7d5ec835ed76aa267dd55e108e43652ad4c90f5615a4a2a873a389bce1c32034c30232b4b87aeb03aecd0d3bb3cb8eae3b0b252e6572a85a48db8fb33f88936dd8fee2dd0a46c75e7f1b6c180b2a7d95088a0cb461cba59b66af17f5cb7ebe2e8d27fc40fa620faff43a337794b2511a3610beee15bb1029bd2342fc7bb55d40b01b774bfcc72d757f3fa98539eb6208a8c993a56abea412a3ca87a9967229f6ab0791ddd410f815d9906f60d7af09feccdf04176c9c1fcd851535e2ceef0441091b409e0f438e3b9b3aedcfbe90a74ba69ab429003597f610044967490fafa0ae90fa011b090ca761ff65da2776f74ecd6fdfc532ed051c644a48ffa708a03a2369dbec53e6ee9199b81b1aaa2ace7798c2d8ac359c37b538bfa2fc810e876bc70d344e0e6656b777845a9e2e1d13bc674454ff366af2a827dff7a158a82d01813acb37b610de55d095e51840cce6590163cc5b6c2e25cf7c74705bd0feaf4c31377a466507d2b6066e3262fd565bc55036191209af5a9556369b309bd8f873a23241d5cd19f93fce2c471f49f1a9e3c59a12a79d47da2415818c0f73d09adedbf3b2895bcb9bd5cc82c787ed7b0bf7220cefa7ccd54001e81ff9b6910600b81f3e8a5126361e7c7a78e41e900d0cb6adca80c77e4ba3fc58c4fd365b6de28a5a20e697345b0104e8ded93c21f5dab7674fefcb92283b56d6e93871353052f0a2a2020cc193d000362008394a8ebca7a7c48bc2b0cf8a863d33fe82d53bbf43256db8bfc4905ebd250862e98827c83b906b18eb1b1add03517c7b3740334766eac01fd1a1a5a0e25e90fd404b880a2dbbfd040f3bcd056eda583508cbdb01eb1bdf8ae7f743b28f2f161c9223ce96b2ebaed5e3fc264cf527135c7384b9a96b4c39a5fa3b1ea9f9ca298a2e0e93ddc2b54994d44a00ca1a422b7cd2264c3e002aa9ce9d310136d1069081d5eefd626bc9ef1cd7e29c1268b8db18c0446dd049f95371f6dcebe1d25362304b75a976c2465e23aea5f3107668e252c84a83be1056c190500bcbfdd1c043821d25b9ec8619c6d4cb66d65ff05d096152bf5cb7530f2ef53a24bff07c400f20320a0e6d1052aff05a98fe6a32eaa0a07ae9d5193d21bd24e99957be5f9985342cd2283e168bd2d4546597d8c12d093668a9dee221d82bd23cca5f0c9313e030673fb4f13ed28f992bb59b70d526eea3ff65b71447d3aef6e5921e9db28bcf6fc6e7f11903f95b932719105500fc2aa6fb0950dc6644ba4666ab8ad2faed79e173bc49f1d8a48656addeb599f6be3781b2dad41adc06f3ee5b714e238ed245f058939ff6e7576856ad1226661bc32a539973468244c874021441f622480d47aa5fa8c132b6a871c169a477e8851c2ac3246f1a255d29ea24150c7dae1005aefc8b27be22017f8072d4c385b82d42ed6f89956193c93861f445d5493f9c3ab7cdf9c08ebb3708327b9f327099e50efe2d8388d8b97420e9b217df5620f5e3d7bb7769471860356d598af7e76e4d26dfda9341c29a36a2e02522797adfca62df8869b56a958db8cb25b9bd48a0214844ebe76391e8b2fae75a4ae408225aeacad0c85b81c12a0b9147b8cbf7c8f79f6dc9e5643bb06f4462e5e261b554a81fd0184ff75b1bbc3dda787e10c03cc8d8cd4abfe477d95eeb5fc8899867137389ddbba5857613144e50ed556b6ff86fbceb6771683c2ce2354b590740dd843b2b3ba45194f68306e70964d6308cba4dc61b5c6b38aa691e0c48271f8d478d27fba1c15a2ce388bf73b6e652f9034e5341ee1ca498aa45e68d188beae57b342f85d2deef6ba5196d6485f6dd23c89fe54981567841604a35ca4a5a1c6f6fe08dfe674e894068faa08b92f8f2ee90d22c16f1e2ad0763d0530ac2791437f63b70cc50ae9d030db0f7a6ca8c2d333b941d3cae722be2208f191f9f8a95bc75a6c4b1c35a217d50fbbc65dd7c26d01d88a5eccaa88bbbd153472284ff790ac7aaf69c0545bd0a48bd10045fdf425bff24a1112a3f3c1b3935a8e7ec0c9b5c9ab8b843f828d55e64fd33b603639238b5484511854f5e5ff5c2b2b65223784818cc42eb8701edea689ba7b7ccf1cdabd1b9a340dda03f518867f8d04c7fd36f8ceaf6faebe561da9cfc116d5446fd14798ef7a03697e615c8de2573ffc1db49537e7edef314ae57e432b84cc1cf2fd64b5617bb71108ad19b1a2f7906e95a389b9f2940d37851cdd87ab2a750b78f0e6e890f6e06a8f3c1f6b15547908c3fdea326ffcfabdcf13904f5ea0dcd222ca700118cec95db700600e2adc36e1bcd33626ab092dd740654f2a27bbd5cf67077a97bbcea23da61f9f72d65c4bce7eaf27303e3ba121c321837dbc84c4707e0c4ad2f5a38eba7afd8ead1b0f435d3f7975b0bb33f67b88892e59f9e502d4119c239502eb3a16e118a9e4b6a489b5037c41aea0f5bb14072b8f6b6b12b3e04a6b0892fd65f50557f60351cfb0435d222127acdc42d60555391943ac0c88ca78691604c31d3bfc5a158541cbd65f1dac4c4f6bc675dccc2a680814c562cfbf2197baf99dbd528e57dd57a4d42cd0f84a07113cb09ab72e97bd660aac1eebd61d55a9f0c8b8c95f80183345431ea8cde13a2d069d0109b0bc46a3ac295b7e91c3eb2a6d6b23331934ce2389736908ade514ca9a258c42cfb4dfc1b6ecc117c90da3817e0b8fe0a9c53bf917fcbcb2f05a3fcfec9937037a8bfcb2aead5a792dc0521f17e33b20694c1961ca18c20f3fefb0dbf60a26238bc16e57045d416b63c8b05229c5eaa2a6ea990040d7e4a02a26135ee5b0be045b9cb73e6ddd02fc528c6f4648afa176c7b93fa13509d2421f076236a97a77be210cf48256035863717e441a0471a907b17bacafcca6a007019b9a0345c0ac305ed99e750ec7cf02ea0f4ca3d4eba484c61b0a6d162febf958f9854abe711adeda874ea831f4e941b7071b5ce0a3c8ce8129560c6a6dcda30c8b2a3e01cdabd0741b0c76e81186731ea558f5fffbf0e3978c8ee95402a67068dcbd2f573f6b6cd2357d6a7238331bdc83b136aecc1980188c7389fb01200594066f3859a118ae2d3389471416c4b3761a83f37f9ca23f4868de206aeba0563f91cbf9c8a5a81c6ec51b5542b6037977702bcc2945bdb1a4e2f442c9db698a3b1a2d607296a87caadd5ad1fe64f1e34cbbd7af8dab4c20bd7f30fe3ba39e7de63db012efb3bf9948a83fa3817487da2f21e1d8b947f5f196d3f5f02f8fed001e2be62594661792b16c545f53104416dc804f24beab9730e286df7d88ac98a83596fff20abecf9de4d9867148611c2fa3bcb3210480e0f289370207387b19cf58a8c4d1f2af1d206d35ec3277f6b6615782de1e8820e6d24165a2994654ba18bb0111af08ded805e45ac6387ff69681c34ef3865978b968ef7c55a4873f8f82d77b667c604f8b2d8e7368ab262c0cf99ff573c13950b40a39e5cab8fc277806cb88ff04dbde9a0301445ed488f42e15e1a952970859edfef29dac92370d349f268bc4738e5d7328b7a4b434b2e776b18290efc66dec701b558e09b2bd50388b82dec14e61496071efd32bb4b261d883cb568c9539d07dfb4a806f19b7e41c32eb8f53ce4728b908b0862a6c7173632deb4b1b7285f49190c1a5d8c68be70a0dcbaa1287f8d2daff360bbc12016eca4e5bbe6e3c50e805bf7713ccc1b2262bf73881cb3962f098ef163c1a3c2dbf320d1b404d6879c21df931e37e6c413da5dcefb3f15054c4a55125dea29179a6a2ad720249c28cf317d3af5e2b2cf1b9baf8a4299af3b58b1d60b00fdf19176d774ea41d5d0be41fa0cf83d3d83db777c2fc680b93ccd1b62800f5fe50669e7aabcd0610899c1b7e2099396262af40c23c1dd56ac0c2e72e0ba02f5d589c5d39ae5af8e5f1b92394a2d9864545733df9bf3655bf958c537150a787e5d27b6d1cd3be694be28cf2537645fd72702d450b77fe4d19fb58227b785c74d50f271ada062b901b4abe67096203664fd46e6041669d0bf613de4be32ce2e0f6ca8f1a78e049c9261e73134ff8890d03440b68ad46eba2d0447c9839bfc72d7541b88f11af13a4f77c54dc8b3a67e28b133845722425a338e296fef06ef1ce7629d6e339f95ea1d66a78c69c0e73c1971b69e79689af93c3575a86d3de83e4be31bee0634a18d8027da0552bc1680b91977fe4b77277bbbdb6ae28c53b524ab82d9e7677207e3bf88a2d2b4a7da13fea04fac64b55fb7a7c7d409b5604ec2788372d004f8f5c04b55ab23c3596255717757932c05d66821fb25a26d29f82077ba63feee5bf321f26347693a70c67554f722a643ce928666398b1b1f7bd248157bbfcd7f73ee6d22856bcea0b066c9c2784fca4fd3a2c66297a618bd3be29dde17589642bc9120d2ecfea6b9acb6d2064ff09426ac79958ba7283334c8499ac1a8b29d105d5ed8f956749125f7e4329855cf6b9d50aa2096906fda38056610735ac5e451e7d8cf969b0166f9b3b7a66e577166c813bd7771726cedd7d79a5820d8f0d61eecb3b232b1e606a7301ea9285500876c993fe01ae2c6bd9b103b6d35ad1e60f5e0478aef35a38376177b60e506a4a61580a7ad9a2308212c252682d69d1e5207a9338eda5e6631ff65cd3fdf80a9e50cbcaa3f1ce152031fd28fbd616c19338d4d8c2ed424bc8abac6e413956692f4d1225de1bc426b7547616cbce9d8ef56c94b481450bad92bc72c53774848b9e75a4046c02d1ac8cbc56570a931ce60f3e365d5ef571eb432bdc33817b777533359cbdc015f7aa595edbef417db33a7393f98f6e0a471230d0098ba028a82968469b426f5ceaf69237969affc1cbff12594b2a2046b323ac3aad6f41b28c2bf36a0f1d6bd38f84c93a4f63f830f07da60dbb3544944aa0c1edc5dcf1b1783db196d9a14f45040580fc122b305028a411bd577e96ea7d42a6ae7f352a536356b33bc83b019245a419845b0622320868287ef3717b89516dd0c7b307dfafba48aa70b76b6cd2d20bbead96083bed283621eb683830770796b578c2e30b27fc5e9a195bb58f823cffb6abad7a16643cf5997c164fd297ae304b4e447faae91fbc813ff36571f1abcda2b318817f79aa5d70d4fad8d89e7f610b3961c9c5a2580398150e9c1af51b0310f42b5b8a78b2c3a9de25cf01d1996f57d0a263da43199c289110c3971ba059a69f63aa8679460c1b1fefcacc51e9639c676d4b5ec4334aab6643fd0851e74df79c520ed9cd9676547eeff5ca851df4f30bf742749483c43c6449b64c48819ebffe22237699d0ec3ba8e578e8c5272d7f6aa8258e175269799bedd12c37516d14aa72a65078914630729faf1b40a37058f7aa2deedb82f22aebfe1fcd02640cb0ff2b5e44d5a79bf7b7ff49781a7e77590659723ba9224c28ee1f1cd6ff388108d053a213dfdb76f94906f7d3b91840a222fadb59379abaca73234c41af17675d5e0fc5cfb19c4dc855f130c1a48918cd4e760089afcf8cc0af730ad07c2479bef0b0cf4d4a5050e2abad9cf56b1fb648f9866adf9248863f9d2a17b3e151cd90e34885870a20fa5af38168a9d56b9a8e18f1d5e3c3d7b347081380861a830070e70957297a3f1aa54077272cc3cb948f3da016dbc4ee6104a7170b45295da2d5d808f116e6de55fa40136cef02b5365babb122757bc10e88b63d4d8ada55f68868199ed6848473896f8c05014f47aff4f750963dcbe46307f225eba0931676eb0ad80112ef6b3de4fab406c8ed3e44b1a6de55d19544750bd0919b462f211526f51405304099740feee20e07d3a6253dea01c40cd7aea86263489af743799487d8fe3433f13025e2df326a1f615e2743254c8bb17ac3c5e539e831b5e058dfdf43daed0e7157b05077c60a1e673c1561047b16a4e85b2695b18f9bf01ae6000a5ce89abfb611d7b3e26c882aa3635424f322237f98aa838b19d7ced4442b674f91536f03f4b2fea91152f8d6d70d45ea8408fe85e36e239769a68a8e31ebedb2cf1310883a97d3cf2288f551caad407c8c2f6810f92228e83305e75e390837ecf4a558111ba8bd557daeb45b668cf0b2b574b29826993cef0866a907c774960c440a6b0854531d1497cf318b17df6ac75fbab0147e629555e3a7f16ff8bb7ab44aeb13840f58d77ff67de39db55bc2fdc80e6d9ce491cbb8d095e3091ee139123b7fcee2a7ddd8b6a3fd35f9324e34d2d22d8f26556081eeccca9a659a1d71b5ab311c1829b5aca11fa254eaf580d045fa92a65049993afece5f6aa8c46613b4b7f53bcfc4ecf40edf75f38ed4dbcc25a777bf6e9b5ba48860de4900e7e309f1c28627387b439cb43190095b5c1c8ae8b5795b46d59f10b1b67d660fd5f1e3803e7b61201b93883566d79fe359bfc7c5e0795aa32d4dee55c0b9905425a0a155e55b00cb75a517e974f141057daa7643e50c8a645184bff970f6b2f98cb827fc58dd8c867c6293bdd925824a2a14ca9e2781dec141d9cf5d2d34001a633bfc3c4eddb10c7b900a9f3d10ca6ed04e19bddb61232f396640592ef6f847836326840dad0b969ce9aa46351ff4ec383b3c6521b4b6c059fc1106f1b3831e6547461c1512bf60bcef1a7a36c4102361facce53ed7fd96e4198fb1aaff0cd7a3829caf7465c995c5dc58cf586562574b9e2abe31d7c9d794fdddecd669bcd51f322bf7bdf00a8940c7d2935aa3b56b279b83e0d3f4b364060985c13036945677f24c4da5adba8da0a7805d6c47f9025b22bf928388da7216e1f2b2e530cd079ab5b240a525da25ed3ce1204720430707f7cf2ba4f8c20e81216ae365efbd32735e0d668356e017f23392ab2885102bd15ad4a697865bb21a80d160ac83047ed36a2881ecf768cbef2b8d0e5d807b97ee496abda3da1b93cab84611621b44a7f603c210cd5e8794b64bb1cc9f7ccac7c528e84c093b15a08e31fa5b9b7ac3eb654f6a289846d7bef932bb6a5637837441c3b19bf69ad9ac27994bd0fcda62ba8441754cd1e93268b989bd804b35499b1372f601a9236cbd93fffb2b89446d0d23cafd3a25b204ee2017f59fca4190f2573de5e552d4f85f0b7d134a0b371d43f1ce33e19929f8d8d2dddd8fc338708d4dbb59e7319bc5c1b44795c8f761a6c3d099ed68efff01c4b5d30b568d551c856cb03b97e4a7e23586130c383f1cfb79fefa0e48f6d43b1841b4177d5e192dc378dde6726e3dc1221f199a69f67a0e1ded084c392cafd30af1926c1fecf6731606dec123af5a0038cc327477ecf91c0c1656920ebf89021a3badb2d5d8982f3ec16d1ad2bc6f50666e220fc64598272aa116d547d75b73f9cdf245a3ceed319e3082ae6e19fbb5a64f3593869f607a9702d5f2429629744e8968528d6fcc8090a17441494b0b9397e4e13c72727cecbe2ce87d129fd25ac16c4fe99912419abaa90799d53629ec4092005b3bed0a331ef7d186cf20309529285e5437a66461e8dca0dd36940c31c40c228bbedf938554ca7353b90888cc46f613020a3a6126f126791451578150c4d85e59fc58b3d829e4a2d4392de16450c92247d65ade39043a06123601be50e086b5176a45b788b92cd7ee0a82179fce4e3223284c45a9a9cd8c677720b57f51bbe73f43d250d7c16c43c39f7e6946a1e6fe3a9225c64fdb718ff3e16de655c13e3977e5ed7f843baac6284dfea249e9215ae36f68d315574d1571e2d8dedbe653d8dd38bf81b739bb328c9e1f696c432ad429982ffc5c4c65bb7917fc844dc96451ee9340be4db2c4c44cc350c6bc4c2ffc5a70ee66c99290f4aaa476b4e388b51d591f8d49e055cb92347167095472bf39ed55f5f99a77b08d4a1410a7c77cd00e0aae57307bbf55f635b4c4d458c737cc3d86256a54f5991a8954c54eff8f47aae5de2864a55c8db8e38e851921342beea7b74cdcdae5c38dd3ccf5f13d868cc004d6a7bf819efdc8e9bc5353080dd9ccafe9a2fa6246f4984d9d6ecac31f9b0be98c291d5ada6348bd15450e03da720635a02fa3808b3b7c71a9e8431d4bc421db48cf1b26b1fbb7d8f000f74d62e26bbd282e350c2c6ef45caa3f9dd3d39417f8a517f0dd7da5097177b119423cb3ab4f53c9d1e21f572657307564bc1b9a3411fa077e50f976334b4de62f6e706fbe19469b8e686b64b80ae985b5a1fbd433a9b9023e62153356e4daa637a2ef592c77a6cd6a18ed1af554b65fec07de80c15076bed36279c5b5d69f87e229ac7380900f54e3f8717959a49f411fb8cf18b2bb9f10e4e99d679eff9f514537244b7a3bb310c6e5633563dd4e2cfad3866589db2cf60bb87c15ce6ee5c0ac5a8c267b27b4740951c81d8b4ef03c0842fe4b382ed5b30c07c692a161d1c70ae6175f4ed449599ad4f7ef3f8c7ef42b292e5c58bba1be1f971fe2f5de24c2de094695d77c64f38d3725c68bbb9a495dd9ae356567967770fd4360e12ec18be94d1bbc76f3b3d9a1d0b6d536ec39560581226355caa8ac4ac821b1eb9c5708e3c190236f223b7cc4719bf5454c32e012c574a2d0b9be3741656bb35fbd36558fa6c783ac9b2716f0ad1e6d11991013493b0e66aaff240813466834ca0b8518123e5008f5eafcee4498e32d32d43f4e08df4700bb288c2c7dd2ff8408c3fc959b42c254291f0a971d5fba5ee95e30a23f056e33c9a127de2c1e9c3873d7e331c3f0ec2b6c9b83a60fbd24c6953d9f0babdc0b9699c2e6b8ca7cbbdffa3215024adb89678bbd6d2f7a5350a9cc598d95f5f4a6629a0bc3304ba45769bdf6df6fef009bcc3706a9a832eb87ac83a3bf02f490d9324272099667ee7ab4e47a54dc583c208e7909453745d156cb396a9593db2986a7061d3aef71c07ab2f7a95e8ab3295c84d50e407b8e4111bb9c5cc34e73fe76d9e6547cbb2b5e0b39fb059b3718102ea741ce542c9fd51976a9da050516b7e6bdad776e77e4c5a1ebbf9429bd9641bea76ec39bbb172e7dcc1044da6fb179995d5d124d46517bbf03204eb8170d4fb92b2542bef0aa02760bd0c6c3f51fd76ac4c0c35e22a278ec7219644d26bd0e94f774255e5120647853ab36df799c00302676721e92489a364144620e84c6f7865f20ba12ecc3fbd4b9bd43355309a67acbb7b24827436c30924c8132f39858d721078196412da9d7a2e3bcbd4172247fcf63ae616a4b54badad65a3befc742a16e4ffd60f868e8d40698198665ccdb07291b3f3fe30582dc20d99d9831268de482f1bb4e628526ab08e47bef4059f55e717e1896d74a3ac38b598e0ebc4fedd4412634e4803012011d4a972dac9886108615d51295d83f2345cf609e7d580d49a3b91d9961b009911353c2e8736197c532f15cf2475f1d9e179eefc55b77e6e5f6fb04390b0d480d27e373814f7a797518f532555515b69a3ca114e7d0ee6e1cb28f25ac4a6d18e359bb8acf62dbe184f35b71f7b161357a6ba0a30df63f825fea30f1e6c5caa1c96fb174ed2fedd356d5616b1fc90952ec461c2bb8c2833734091a0aee8cad20cb2ab08988fc652fa04df2b71b735ca16791ed2a967958800152396b2d645d061a60367986716dcec20295fc8ea2d7f8ef7e6aed71e9d595c4ececaca012fc8d637496e02c592c896d9cc7a685b38a040e218c52e611e63632e75daf8a6fb8e96a0a67db728c1bdc894bec373aeeccbd8eea3ac5dda9fe3b117caa5b9316f8244470d70ccfd3e3c1fe558c4a07d4ae5ddae183334a36af929a0d85f43393be9068f5fb85cd94c0c2ee8f18fde608a5f612e506f34aa442adb18e678e33eae8c1dd39e6473985ae8693f07ed3d80ce949103660f32a4159e00e8e7a89947856bb09856d0af20dbb5a1285c4185ebb7544a2d64cb560bbab88039c4d68afec9e59bf7f76dc50ceaf26a5f14e106ec56f48d7734fa75120d67bf036c388b442e7665ecccfef6ace7b1d4a1f24b17b510a1b35c1ba25af144af2121bf80afeeddadf8ecae75d186cbd6c58dc56f6b0f95df218e0a3438a1e549978f8974a41807d90eaba8c2c5f22e89a2a253b9159110bb82e20553f4a656912f5dcc2f9d75c7d7ef196013d6e10af4eb0f8db42b6cc814ab89f510fe957c266d570627b20446d9f4c36dfd7de74f468789b6af62f47bd7e059e4bef728fe31523114be1f692663c226c212fb33ef3f802485e551605c65d50293258fe65bf254e5f65130335ba0d0cc6d6d708dcd3a1061a729a648ff8881a16e025edf2c64e1a26113f9db4be8a6e2fac5a662c4fa2e19b5c404c5e61c4784f2f3486f3d27a50dd494b48473920cfefc03f7a576d14c76f4bf58dc5405bd828809d8df5925e1250e37fda0ad29a9ca98da807ffda1b696252f65c63d625d71e1e29b5281aa8ccfea43c3ebd5246387317a7316c5ac9fb0ecbd05f3482410eef6c8f2fe09738ce7fe25ecb975c3ab1419f07c4d089c66e8fdf2f76dedaca886161c2dcfa01e2eca2f07f304b936bb8b747992d89f9b668d3ea6dae3cfabefcba037f255ba1a8e2420d3ce4989eba02a25c2f7b922a863d1e5b441926be1909750e38d650fd7feb903fe4b61a7597a9e4879ae4935f42f62fea0868ef6c75fa06d4e162decaed292e5005b8047f55f07ed4748cf9574a94302d498acd17d7724e3f0b642f8e16942c8e2e47999668270f84efd9d522784edc9893bf895547925e0195d78f18a14f624301294901b881e0e36038a21e7a566644ca44d4a60e4fd00617cf0a5b136cf0b14b6d4193777847c725ac2040284115a984edc4e96c0b233c1974c362b8496090e71fc5e4fef851ce5fcfe91a8e34278395540d68bea5ad6f3664f95194238415d5130b7c726034a216e091f7bcb8c478502d803a5775acfbc9969861015e67a8f7a74156a331d411e4d2f437b02690c90afb428cd1b5a967c2a8aca8c2cee526c2be2e896bfdabe2025689d90aa74152a455ca04ddbde3db507aabe38a9294fbff6ca4ed8302c5a5cc79bdf32d894552978c16489bc6c7d514440bf91c519dd1c09b141c15b2dd9d2ca3d54b95ae7d2afdaab8502e8ee22d730ab3be305ac7f478be1222e7ddde32b6bc4a677372fd35f6f0c44e0121a749721806e04c70093d3f7370cfdab11ad5c34261128404ee898c3924e1c034f21e92a088262ac456fcbaa17670c7151118d34d6a8cee58518a27da8a8877abe45a3511e69cc4c3f43d5946361655775e54cfbd8304c729452fec9e33cfe858801bc3993fff2c3c6f8714d67675858cf56b8b66674dcf0e4029c5e8bae14686b732ead8a97144b548d3f906d9177594f2ba7233d39f39b569754f035f0f74f50388640625d6f885d2d5e786e2c9472f6058c725d9cc150549a27965bfad00f9a9ac2a9183ddd6bb0e00be66cf02867215b5356f06c08a203df9824f40f57d355a36a7fc56b99d711b3146dc58df8d8dbe71e3973ecf346903d3aedbffed938f85f44fa5451050b395a9ca8df428032643d8a000d0003db04c839352ee8077ca1feb0d26055c6b8eb9006489b47ec638a3c2fc4afd54a8258667755d7a33552e347caf6570ba89b6251567b254b3f82304fcad7923f2afed6bac285fcdce863d4e55a04ffbd015a2f2e70dfbdd76b4b510d97432df1796ba9b6063426667311abb21ee3ec6b01c4f5bf680107f4c758bc55802229ccd28fe8296a470c4ef2f3b9180da0426d82b12b96adb686715e17983c575a6f3b41d78ff6cdae96d8c65e29355fd8a3f99af18d7765ea004188f3e9156cd9a890ac90e6e06416229cd58cd131c48538e097936db78201255256193b21953e24a2f3a1f6a08aa66d9f352d10584e111be093b14e438ad339db880cffa8c1bcede7a3f05363e5d2fd546aea00b0a3edbabc1dfef04b8d08adc9f6f67a48f2b0b007176e752f533e9e03489baf25b0bdffc1f095613170cecf340e47546699f2a484e8910b84159cbde91ac4b4e2cba2249c4b657430c1d0bf517e10b14dd7b5470b8c021921aa8fedc01946289d3c10ab329f3020ccc4951932830f4f50f7b50ee7cc0ce8a611b010d6c75d0308bab7009255b0d55f2bd5841a6903c2725f9ecff4346ca8eaf3bd004f883628fd1d90e9bfe7c6960b6fb2c482174e81ff7663158e9bbf95e9e9528fba412090f53582d76c95aea187da8dc2639d091e89b4fe489a07c43098f8021d4dbb6f8ba11190861fb44d4e804b60c6279f337c54ff459cf305e4e469b9aa49967bd7b850cc8a11eff4fe7d2fd344f6081aeaf24bba12edfec6c872694a17c45ac3d3a4c99e25809fbe29123ec73a8cb45af849e14393c7a93b8d6860b4fe943612d6bda5137f2207b22e4517a00fa825257f96ad2bf79c25465b1492d42315fcf56d4e8f9fac5f3204431a252ffadbc51d7dfae99d55bcb0138e51e98688171b45ad8f3f0fd7ea5c35df4b2755652cd98d7e8248e634f92b4d59be8e0284e282c57005167d7390552926cfdce56bb77672610373f32f72ff9adc68563753f77b7ac98ab991d61a8daf4a58fba92633a87d820ca4f5b44363cefde2b02a2cf105957a4b0c98bfcb1f4f1e57a01bc55301ebf5a7e595c1fcaeb25a442cce4a27568705dc79d393517b8424427d1d3493b5029320b812e6998355ecf74caddfc106d188a4d977f15832c02937f127aacf91e1f2098d94453a46e78ac4bf629d22008a79bc522d205f221b32f4ca4f67aa18424a0c8ff0add49557b42861f4d17cfdd6cf3144bb7b70b4a09e580ddc21d497673c6b87ae8fd70e5e28eba04e724a7b8cc65ce96f08646dbefba66b0b6bcd229faf7af18c1017c7418cb7bc666cf7f66ca3dcddccc8e36ad578a5e4dd1d07d36e563b8501f67421f468f139f90de801172544601c86869894a9e53f09382831fa5444e68cd42f279557cd5d82b97c8d1ee7a1c754f5a9f0de4112633fccc12b549836f2871ad086109a84610f38eadbd6ac9972649607bce7841bc5085217fb10c87074abec4aab73b25fb5e18ef8e8cd3962c53d9a614f1de46801a9b3eeb9238c753095b3e503f8e45ba3d9ac849c2ad8847f100996265fa21b21f372874bc38de82612288e128bf7ba85d026611dd5e0ab27fdba3c47a96b58fba82307fec2cd8a4b5be9203947a8d89bc53b118af60c8786b54061bdcf93bf369ae4f18058b529d06cd33c9deb18fd8d79d386271c3d21fb690977b049a7ed301fff033291253a8914c2739fde651680c788dd22b2903d3e72d8e04aeedd6c78a3934087d6852efaa571fdf16d67845eedb03f5c5836ee29cf79e8b30eb0b64f7b475b45ee0d0d0a367ac64526356277691b2104bad07a527341c62c2ca6116547b2d53cd2be6423d4d3159d3916862c3d4d5d553cb3adb5e444d78b992288a50f952f72ca835b267a83f984cc304b9986e33f3e010f1d8dbc3eb7c93e9d10a8c619dc88b976b8c4d825e0d6c66fac2cb9e10fb166a3bfac047dd086fdaa908105c12877c58d3da3d1486f29b142295f9789f047f81aff388cfaa6b2421cf1ec37a218e50e676db84b7da6c2273ab4d514cbba20d2e28dd3814e826ace762673c44ff7cc83771db53bb754cd5a37f0c7a2a509d866f98a726f05e70965ca932b4a1eaf0e7211b97ed1d6ab0b278d7b5418b8f720095eb36662d70ab88587689be08c43a24728dde9a608505dba3789b3c77fff2e450fe13514876b76cd6608849dda73ce0ac8469608db6b9bab95ac02bfa5e71382eee72865c84597d9cdd5effb91f8d5183f1e3d52ea4984f01d432fdf765ed5b6fd0dff2587735f537f81690cc70f8b192fc9160c97798ca805fe9176d2c92da2b49814b2bb1625e5a4ea3b650597a4c7b05550e81cdc00e752e655cb58c91b98e7c36f820049a5f74567c205aa9bc6f2132e187f10697ef36d25363c69fad59edac39535bc4ae9c777a878501f19e583a6783767bbd55378d56d1bc32442145d1dc556e345777d42cb790d5a13a84803ee6a427599a3c6a1160c73f608388d626021f729e60bb25ae55a697e1ce29ae13a66ca45a596a5b29e184f4a94ccf0acf95912de1ae3632b9b2a4d362279ad1db0bcbbe1e5ffed583490990f3b555c62fc3451c2d16310fe3911762df4ddfd284175e66e86c38d9becb4b1c397c211918639981f36a7d3162f0757e74007a296e2f593ca67f0ab346b268d6b65d477cbcdd213c9aab068333c54e16013b60f15d0ffd46b7855cbd2e9e32bafd3233b356a8ce6cd8ffd49fe2eb07b0db8ab78f04dc5a09875e998f75c389ad8cb46530090220bf4f9f4ea38236e12b514a6fa782f2c3f8e65092e30d7ecc42ab2fa31584397067ce1a5eae1b8bb3735f8bde5491a570cd9d7a8e8aa83364ee6bd11ee14227b42b5cae471680b8f75285f69725252d01da3ddc84d896c00539927108060ecf0433351a2720467a36ff178da1820cd205b9b2eb040e38be521933f91a6194a636137a552dfda802b4c39fafbe0e3d1cc9df9178b089f67dc65f8120dbec08123e3a68147af1b24ac8081833714d5c808c13556eb7bd301b3a7024f231aeb4f7aa86eae4b71d1ac8807bf1c5591a6f57414b657ff5ed3d523b6dd4b68c8bbbd5f92cb900e0a1e6bbceb0aa588729a75a48fcf69d42bbe048a57a4dd2111240ff5ebc7421435ca24fb35b724b14bfd39dced56705d7c322b8d4a372726d97c891da85f9d3b9c51a00408ef6b9672b8eeb8429d383b7b7b6e10ecdc5515169637dbfbf429341b8a2ea37f587164789c1a1641e42f4c5e1839fe78fe5dc034dc49321fab82508881ef6e028caa9bd635ff53614c09aeb578b2cd650d68588fc41f1167e5a72cce72525e5c0ed0c44e84dcc9e9e0e37dcad3e46ae9c7bd337b93bc49924d9f3f9713d72987d5a03729b78e5aa083bebe729c56fe919ae0f879965f0dbff1d1a76b74177bc2638b3b1808521378b51f0d74e63672e90d9c5cb310cd48bd55ae7d91af95e90e71fee7c1961d8fdefbbda4bc51aafd440f84e368a4ce4b61821b690b220cb1b4f2067513476dc331330a8e5dc213fbbc29a3553c539b4b423162ed47f8ca004ca373f824777d70855dc7887d2e65e14fb122ece287d47d8ad899ed88e16280bba5c3e27a7b3dadc617fa57a3a8a6701b8c5ef9292423657e6a68f135086988ba0c060e5d697f371f8f1c15852d43d2a692ff08d13b1f30e3c36cf5bf4d58dfa68a7c00f46fa74a63dd0492d95d0e3ad1b5d1675f73177426d27bd571dc941926158f023c86b15ae16a45fa1d7518baa73a532c1bc84c5658308bad30e3fb5c3a3042419f8958dd69172dd92d446bbf928bff5c25139bbdf8412311915da7db17a89c2c64c55b61868167571efa9515f842b678575fbe0c65bae2c5503e5f9e4ea694a2634b4ef3639fecae6bd08fdc431dee9ace90af4ba2b9323f129fdc54feed1416e530388ce9d34503c27e446318c6abbd7608cfea411bf0d710699e7c41791d2eb5936780b3d472fe29ed8e9ce18416ffc53e40f28a29bea801632fc711f3c6d80cd8a2ec3f5668efc890cb72688e728d8cbb92a1c54a52d53e91dbd575289f18442abe7aa8afa246a3548ca3e2e2630b8e90d8eafd65c214dd7a91dfcf8de90e416fcae603c7ab7fd2edaf527f141d03891d0d061c464589fc12646667b51672ea6f60af8a700322e38bfd826bc1690dfa0ab6278d4e0f34c4cec74ce98dfa11442e86ca5723e2d32f0783261434e2f14fe72eb2ea0c349751d91cd5848d370d32f13e011ee34eeeca24b985b52488752466f32adcbe392070c03fad0debc5d3d5d0e7e49296db148bff6834d9175592f0546fbbbff0676a1a9c44426586654325af759712b50b9df793726aa759847cae75dea1f7eab6a9c2daa8fbf7f7d7ce6b80fd00a3b918e370cc6acac67676de0d9136d19d3b162bbb4d1388886382ed872d8d80ea394ce7761da69cc5c69797a0164cc79f0558771b723a2a764bf6d3846c71f893482c9c16f64cbea92e042766520d2afa0bdb3dada085abe492589d758bf0fef3882ac09433499d19e59d1f08be0d30c41f6c2e472f7692a86fa0dbd3f97ad38d1f6ffd265e245e84b1527d63691134bd5cb93339849a82bb02c842e64186ba63cec2655f36f365b7165a2f91fd0056781e72c83fea5e2ba4ca444ffc9ef956f174fd5ae488f3db3a28d826117cad4ba05da7d213a1c3d15a38847986935fbb8114d40dbbe9e4257b585a0a7e5a90cbb5e74b2084f671aabef776f3700b10342d2e98a6773dc1bbe6be44f75e898f9b1228b9dd8fe8ca0319a9e94ce683a104d78d8c10e3319201e6a5d88ec91a07304f47fd930764a0ed87d01ab073a90be3fa934951efa270aaf18f065e531f2996b6483b94d67b7d7191db3db1cb89c14b4811b46571d3e83ce1e321faf94d4ab85360730597980f49085ad30372e5be7b38c434b3286eb4b5ef3f45fe3b6c7e11b09ac65d7cf6dcbd1f0a136f51942e482e1e3f3690045d654f8d3fcf3ef02cda72ecbcfa742885db759eae1f62214ab67b3f63e21eb1341350111a81b0cf6b54d2c34a8dd30113e4c9de54b55d5a6dd655c22ead232b83254a3ea116cda103160d8c1a42ae4b2b2718851cb2098b16b532757e898d7d81d9b8adf0e9eef3b55f912a02e386c4fd48d636e9502f2b095fd7d4d79a4ccd1c51e13cbaeea4eff3f01338fbc0d9a881e2308f386c1dcb2003740bbd2ef732f31bdc9132dcec977939a0e2f4a2bc1e55ae3e77107f7db4da2b76224e02e4f5da41227640700487df8aa37514171fd3ab028b123fa2e69144243b9ada5b6bef7f79a8929755d155a62b1986b2e228b77760a35e15d76ffff93333cf38f18cf04cc64488e0c8a3dfd342550645e8b24ad83edd128c267a78c4ae9ffe85786fc51dfa667ab31759e78b6574dddd8562f801edefd238b902fd2572d758c420e794000dbdd240ed41c850785394a3a14a1411aa9802d41539c673b0db35444c63da04f8c930c937185572bb30b6b8a1054a3f17045341d55f9b6fa47d9b91eb09b0a4f198494c86922f274cb48eb7a476fd25dcbf2b6b6162b0d24f932b61ccd9a4347e27465d60738fa92af414b8711b8852484cf8eeb9f8e9329aad5bd3f2bae7e1b3bb1970de35950b7c74fbf8dc6f0f38f4bd6bfdde9463001ebb5540db87dfc77d21a419fe6e17232de43bcc40aac1f1890aa66db4868ca3e834952abe157ca122b6d0a70a93a82cd93fcf5ca266275d17b8aa5a77b3353403a79dc995ff80d747e4bb11514d9883648ca90244f3ebbfca17d1b11bef7fc26f3f794dd4422f796891ca4ff27992a71f605a8b39274db125118ff68c0a18db66eb7b49dc422f1c837befa1c4f59b7c4960865aab4cdfea3da9ffa7f13e58c56fabaa426cba57ead9233f416e98bf70d9157d1cd4909d551cde847cea17873af657914e65035ab88d61cb82f42e841a950dd5d1b927cd79bec801d8a6fdcb31228cccf2caf5dac962c7655e18e1c1727b90b4454a37407f6a6be86e24a0f967da5a317855001a147eb8a3cf457ddeb76e86cc4b556ca712d4e8bfa2c4cb53ae0cd2609a445ed5c84e18e178a45a4440afde2286fefbd3b04fc7f06e1112b3a878017c394aa13e5d3bac105604273a782bab22ed5ea1c2527889802560a03b9bb8f2c21e18ef47b8e06cf3208451023a47de5736b2edbdf8fb8257c89110a869b383ec45600ef3b9c3b8adf28e55300243e4cf51470b8c050696d8c2a6dfe1575c98849dfd231906b778762dfd85665f2a9c1773a64a62e39ad3d408f8510d6a09d1c4ee707a920f59370e27fb0540833e52f871e55dfdde87e6f3e82f1b644a033a705462ded1f173af5c08ae3e616e8ffa2338979d8d0494c20d96b5c043eb0d82e5a2e9b75e176fe86772aecfbd37acb478e5596f96a59356a5623581a0780a537ad05478b3025e45756566cf3cfc6fada88871dff98befd1b9bb71333ee21dee33ea37e25df31a519934856e65d660c4907e290b01958bd7ae3e544cf48bba4452c2c0a92076fec2e394612a061b408d0c54850819e40a64c4a800c0c44f5f63e2c083cb3dc85e3718fc03b7a61c58ca213c5f00a2940a47052eefea1664dc025e1239ae93b786ad1c76544847ee6d5f872c3199e8ae7a7fbe3e96b5f44864aab3d39f5151b9ec37ba0c55b8b81f1222948b56168d4c92f7a14126a0d95339d4c3f58122906af0fcd19e2502dc42ff754027902e939457882b6bd48523a7488918f2f4000b8671208fc8f0b32d6618a4898a7e48e50981d2e81889fb4b96f0ba82e514ea0eda277e74165c7a533bc84133c0ac38532c30a0fe05fa29f398e969e3e32e902340828f56b2a6ad3b00723901cad6d84f2854732e8f93bd07801467070936dd980e383603abb34601f1a22d165ba631e12302fcf6f37c5262e85d6a4358c1182eb876454b90e642bb5dd4925d070d718969556dddaef338fe83c09c7e32e6e09423da8092548aa66724dae7ea61311e673d683a97b904c09317281b944f4ed1a7e5941b240aebe40f222f7153741f3575be24c07927da48f11d5d18e65fac71ba2507a6e32ec975a76f234cfde4bdea4d749a84c86b72380867c267672bbca9bc95fad6027ef58e6eabbf2a0f476f5aac304a93872d8598b92a9f6fcab5b2e9d78cc945b66deae2ae6fd043a9782ebecd095eca5ecb46fef95ed454cf9059b6e8716faa91e773e879106175b2951167b1fa4e327eee3f15e1cb8f37474a7e1e888771132c16f464b605abafca4cc8779655af950784c84fcb0af61873245711d4bcb58bb9c551749a747077711ef4f2f7a77dee290f8b00ef787ffdb6103db1796e9ab7ba98c5e6e90b40f28f04ad304eab7293b5665298f7b091330b2a81aba8177bbb36b979ffbf077ff1c297567982c84dc8f8ea5633be912aa4f66d32334876ee66c55e7f142689d57d32d0717fda4db2caf8ea891d66eba23a451066c280ecd47ff5eb697ba93eb775a13f8bdd46287d50616a1426a4c14e1b183b78beffd4852ead5d16cda6dc355b6c6c74f1e459c47eb7f51df63a98a8b3c50bfcc13d13fd1f196a4bd42feeffe95eae7314376b80e06cbfa0f2bd7bc438456dab7375189436793d89135d1e858fb5e538666f2e8ce79d86033d73f5faa5471d7b6e984c5f7bbbfc6496c9bc36ee82a8f307f60d473ba75f3d306e44f874f7f43b67fb5aa7de9da1c41ab2f9d76a7977c28578b26b021c5a9b9e543b9d41e5c30755803fa556f28cf9792e9dd1aa394e98211e13bffd2566fe36f41aae011f290d937dbb87d114a30c95546846f01007979b47c733c93af89c9532e6357d1731b93d5d3c15ede8fcb0d06681a9231555e21c8cf33886588f418108f535bdc07b9a085dd0271927793315623a57462f28eecba07216e7e01f52d5dc4831eb9da842fd40b2f8e9c3155acb4d4326fc7b37fea6ba01bf98860af5d57e3add9ebb30186b762481d6ae1adb3f81f5578c8bf0330e86e387b61817aef566c6ca9743bc65ad6be0dfffd282a4f86edce590c3e34198af4796eebefe958eabbb729fe50eb9198c54bc154d4c52819dedaedcf9a9acedf62d531ce6e72f13a3d0d31063353de7434a71c996e31ec134b9b72ef96b53b032c5a4c6d48636c7126847d5cc5808715992d1ed31104f34f6eb44a00747a407e809002abecd69cff6848924aa402ad135fd0191271367d70161ec692e007ca6b48022e04cda46e73345bada7ff2b3a854555d023cb375fb4e9049f11551e6dd32c70d09c820e321f41f1c5cf44b1bfedfd79301b8d58e1bc1617fef124de750f83aac8c5cad5e45a0f82d14c30a183669385f66bb2cb49f8e8eccef6aa8d967869b80c2504d985aad03f7fbb100154bb79ae2ffbbbe96c75c7a5433de91d273cd257f18b296bda576247b0e351ed346ac51face79efa49f7bfe3015e70bf2a34836e809e390c75cb8d1ee817c6f3ad847e465372ceb0a1667013beb6cd7cda831900c04c8c9267dc3afdd609a32913c7a284a3842adb07bab43d1465da8e280cad980014723aef3c741bb1a55e17bb90a63a7949bfb55f7bd437f9276c9f12ed4203dcfd55d25265b2ec542ecc131487fccdd6b3e52ba384623d464f073df3d8d0592138eb9395e71df7a6a358ae60a7b1672f5d3be1c70a0a8dd17e1a3b36ee430fb0bc99ab421455feb5bb6a40c6977f10e0eb782b924ce026c4ddc1110cfa481b5ad71fa241f2b9665c9d86ac42bdf799e67678998460a608f58d23d585dfc78ad6665a479303bc146eff61371a39807e7cf55b986ab25c6bbaf830b310c76940a34c466b731907b094853e2ea121ac0612bc532eb9e7052be8292ef3555316afbe3070aba03484199b514a56f8ba2a4a723cc85c4447d291ee0fe0579ba04d9ca565e2828576590a3d617b16e792f3ca84fafad9d66a62d1032e693609c1b83c7110a5d3175760eca27274d2aaa1b827c357533088a2b2039cff4748e03f1f70ee7b9ddea73e58b965820154e41373dd14e5e3023aef8d8b169df259fca15fb0b99e76f20a29b3c9568f900aa0548bcb0b37ae4944435c57b0264a9e3f542377caaa2f0e45bbd372e7310172ae5ffadf1abb8e2960197bdfb3e2310f488c565c5c0d84afd5fe4a81e7c72f8eb3e0842afa2d6bc26025ef73097d86652aa46ff6ff687d70375f584ecb6e37d081718c6a56f49d97d15c83df7fe05d26b6e72a95e943d2dcb2eb7954df24a708f5a9707a1d0b3b8903fdbb64055246150324790ebde3419bb70fab5a87ec57559754b21a7568e5fd7061b55a46048e1dd69ab6c5a8cbc574c7d8d61f2bea357fee09eee76275afba7535872e863ace4baf8b8b39333fc49e2ed01b5555b7eedd6f6b8b5c522d75c3c8cb4a05744add0047f245e48c3305cec6abaaf197b57ff3bed14b0fcc11e31690a360527b97d37e2f1d390ba8db73ce4de5e1d1e1e6c06f792cd7ca2342e25d07cc0bf6f09e243799329c591b1a942aa6760695d3cbe4043545a2d78ac237c20cd8885bba1bc8b94eabf1193b9093591cd47c8f81cff630886abfab0c6f0fd03be37005bc2147603767bb0016ff9d4b69ddbd0a1667aa98e875d29938f56f104a48103c1ff9e638a24639897f45c067eb97eedd79a8efc96bd63cffaa1e9aceb475e75f00d9e3deb5722ae8a70438845d0fe9fcb29b55da05379c231e97470d0b81e879a8e178be377c585b30c596264f2ca3ea83e5201c0628f5245ecde137cd6387f515f11ef640a0a6db993dc154a2c95dbe45caaf88249de39679a53fc865de32f8365e483fff3290b4f288ca527b580d26139956892e04958db1da153dba985100f12408cd79ac7ab67f376bd42a0c54cf32581ddebe966647d5c5494c2c264ef79b12e6dcaeea872c2e8bfe63767e356fc73f07477c19df2c6f15c70bc0f29cc8453b1ca398c73b6a19896fe5c2c7ba7958c36db3afe2ec4833cfd1c0db45edaac26922587b4d68eb9e51bc8303bb13e3aea8085671762f61def5c0851523d5933ebd382043bcc13c447fb430b37ed81f8a05e19278e0885a8ccd3a734665c272d9af60493a2ea838a945a91905c0c4de0b9cc70b3a3a135e69dc86319b485be621f342d9d0b759ff420c3bcb885bec1519b7239fa14518bb94e550476f975ef76538a6301cdfdccc80fa488b790c231cd8e621b4ad513a6a67b9b0837cbdf823c02e1836850305aa8e19d6e06a71781c55dea40b3811f7e9fa23660f1da5ed4f284637a1db33f285d956b4c572df8abfe4a4e5ca082a7db2f48900e166601a5da86e73134125e3787d983e089119921db3507abf7ac084d9d198e5d3a000d2eaaa3a9a9d0c5ee56bdfcdcdffb0c02bdba6d482eeff51f00c83643e220b7948024493cc040b7317cfa2f233fc2a1ef38d50e42534e9ce14020daa701bd3ddd8e825de3fdbcdf66329c8908c68c85a1b36217a5468a25af1d1addac3b19a69acff97f55cf46abea37c224fba7708e07b07ed29f82626055ef969089111ffcc890d556b07acbfb38d769410a608916e89b0f325b9484eae5911203acbb763897061442ca851d7e98e97e9907a5c3704ef92d4cb4424ac4da81fd80ec57dc8a8eaa6e0a14fca108266c1ff9d0e52e08ad18629f3112d690762716247fe77cb165217f3854acd0da81ff6ab56378297854c0459d17cbf1a1a421507ea82e12dcfbabb9d6437c2eac4c4a55077e3ce158cf764cc7974f234b64dd1e4a4c4964c9e896917b75884aee78454bd85f6a3dcdc26b47f5b4e4d57f92b25197c6ff44753121f8f77349cd9c982060eb9670199df2a8d222fb873e4734d74e0590105b0731278c54bae4d9676c8b95f58fe3f056b5135f7ba3eef0844ef91ff0b179a447e77b6023dd0f77ffb4bf9a7d1d57b4178d4bcab304f4bd0544d5275a5c2afdb7c722f8eff70434f6af79f975402a87d4984a98d5f8bccc6719aefa54a4f524a81e3344137be16c2e68c6248914db591c72b878aa29aace5cde516a5b7ff1d9242f06771969ae771230334a5663a8becb688de5e45faba7cc7c5d7962b93fd405ae42b998b87afa5be1b4b3edb56ba477ba8e635addee990cbad7c960c23ec8547e338aaaa2f9ae00d2c166717ead785c4421f14d9b570487de6e620280ce3d111ae5575396c29b61388fe6a3c8a5feeadc868a8c41582c7868e8f61e69cbb9c91f2a38a9055009ffe9b21fec1a2a1785ef30ebb165caf0d05a82bddd6ed320659f7e5623ae127af43b4c87ad4642a741fa4b5dbeb1b0b1b40e3da0ef532b496a55abb81cd6a8390c28b5ba7328adb79971c940379780a005b4d8919afcde9f848fac571c4fdd63323c8f22b079d2fc767d26109d2ce73d3291eb004a93efab28017117fffc831f01e12403cdd31036cbcdb7b1d87a2f4df28c5d7fde097206ed6dbc53951ce09a1d46c6abd527d77db30fd1a957aa33e9b2f4f3b4842441bc009e29362ff0f25cb99579f03f8307c62949ae1f38044bb694e8d6381f1fdc7c568b5a5dc3ea070bfb88904b1bc2c6603785c20611f3f9f027026f80fdd43afb95967b2eb5613c13f7e29104100070be205aa4b0e192616bb57d505a3a5e9b8cec65ce556ffecd93d635784647087ddd941fed2f0050498fac83866e15ae085aa31ba8f9663fd4d4465989668003fb946f424b6633bb119874f7176968297a6b91fe1a5c7d9bd8e23bbe2b9eae1011c701e3ab210bceebef745536e39c95cc59752cfa1e4f1f030b13f59aba4afabb954ae60c496e8a7591c75deb436c6d70498d78248e2641eafb2e2ced1d7583f7330de539ec5852787292c263cafe2c88b3cd273357c54062e080035b67794038e90bf91546b897b4eadf60032940165db216352f12861f061163c8865f90acf98369c8d9a042fb93f6ee1700377e5fa9f1522baffb5710119583851dff204cfecf0eb5d103877c9357252d9373674e28b7a7127438d69e46203dc3e6a6baf74c536962acc102f2659b28e6e197ed5b190e6be97207a1daa02e75a12b1cc8c2a52bc4c9f1913c80e5a86bf5e000de01962ae6164c350c0f5585dd969100e4e2bfd688ad9255e606d08dda7b2f994b1b3eaca8c8b95711bb8b0cc66d856cfec38ff9feaa2debb4ae4f3e178075481e087ae32a26e1f79abfb7f9012a5be2d345f60f30fcb3bb9f82a437c7976f2a2259abded8b92d64b590b2d9547384551e392a72d183b870dfca31cd3c46ea57d888c3ce3b2b751b66c5b1cfbc71ddc5550c0f54fd8023966e9265daa2964b7571a17f06b96558ebc77bff558caf0654a3d6563f103882b9c2ff666d88d71e8650365f4477dc53e8853423732dc1327325638ab2ed350f490cae0257627ed98cb1e79230ec3174374a27e19c407ddd919781d3149aecb1c28c4a18eff901cba8fb4e02dfc5c8b0a2c7f91a2dc409c21157849f7adbf3f61ed45d5512bab5bb0cb72e3e8f265e77c74da760289b29e6b94b775792611ee0883abae7e987dc68d8f8f5cb2112dc3aa44124e77156d69b1e97e9f0be6b73fa880c8882a7633afdd39de7c3b6dff0a88bf128b3131f5db46f485ed694ea88abd40ad36a82afc8f24b94b2cad56dc08eedd40ad0a496c3c45a22c1a75585523e1cd077d03d5e89ef27cafda3124c1c63ce8549ba6463767dede000438b7b5bf3dfa80f51d0824facce4b9f164c6e746577f91e44498ee0c3089480fcbd5b89be384237fd3000522e49732e9ac71b91401ac9124cc5922851bd72fac41c0544cb76a7fcadc34eb71cb030cb28b6522aa5715bf1e8ff78bd5252b7f7e4d993a6b57483ab67c5337501c51863047632e4f1e0f79f0416aaa828b7f5fe073da487125d5aebfea31213edebe1ed51e0c88069400a4e887a8ac3d5fe83de0d0144c6112c6aa893de963d2fa45cc2ecec6279b6928ba3a3ae876353b5e8a384f37e3aecc8440296267558cafde9ceed7157f261ddb9b016262848a04f6d650a738d10614aaf89be8415d6416732564653c58edab34191870df315046150ba41e138680ae82fb09394d682ad322e8e739c49f9d28fb81488446cd2bb4912292682f865e6680e8c89e0019b536fa39d4aafaf83bcdbe510d1124f8c50d492810daab77fdd918b212a8ddd351496124f0a9bbf8636be91af610dd659e1998c8965d11dfadcaa1ebacdbe53a8f3f660fa2d2924c2bee9f13975b924f7d4abe86499d9635888b67f58e1efa069a429964bb163dcc9df4a5b4a63ff0bfbe43196e2766334ece218d17289d23465f84033c0f8bf2d7ff694d7e1d5df48f0923fd1ab5dbad8d7762b887fc008921cb83c801d9583e8c019b0a3619ac8229274ba4014aa3847fe18c35c62601695a696a46b8e6927497a3c55a291105d1f574f6e9510d5ff0fb50fd3c2e5ec7356bd2f80886bb9755e8a41b2e645b5205cb23c6ccc10e0a91043428ae262a217fa1f12d81a2f04de949a9d46d6dc66655831283711aec819a2da3b525a7cc704c3ac3b4423a1e9c7b6de64facab78073bc68bcb41ade357b30b8d4f639cc9aa75afc48be8d12d1c91f44d292e0f5dc57ef817c348103ae82ad1945855055f2d8af4e0dcf34193db146674960b3ba6a1be5044b1635d48d86c840731c7a26f3f0225892ca9dd2c7173092d40798b67d3c8b66b31cb41c457b36667faf84d3c197e994c29b743eadbd133dd4a49cf545b1a24d805dd7649ac3eb9e13961a3e4eef35737145a9c03a7296e51b75a164c3f9ac7e27932d39a37746d0df267e16b9f6490103caf85cc74b459bf700a24514010fe44d2d26040d9834e6906f0897e7e70b6b2ad3506b34a4e0d5ff4d3d9dedf5b41ada3512e877480184471a67a396fec3dfaa37a455e238d8f649405fbb926a6ec72058222ee032a46b60b0d2e7f75a64a415c656dea7b8adbf5b9ef933674761e4416bfad2c556c4bc27e398befaa176b2ce37e94c200f5635f54d1f656e3c0c557c170239d0fcfe7f11c039796ddac4b3fcf9ff1cbe16703a00081a71b0487531efd54a18e3927a99489f08803e25861a6c7a406d5bcc03ded43c079c02112dd31d047bd0b426b8eea2bacdb72038dbf59114a1d25ab8eae61e385b42e932b90ece8c7f0aa0ea806dc0019e48b7042000d4982e6dd689c6124eb639deb5f83be101cee93a87cfcf01fa940860f7bd70511efa98ad2211fa3d0028d6451b9fbfdd4fa16ad949d74f2ed24ba947c13a9565287193f8dd7d7cdced6f54fb1aef5bfe6e3e336f4a1032225617462f9b015e2e37303e5a80125c690eb9c94920685db9b87abe6074243fe608fef3ba72bb356ed66127dede307d4556da22bb6aefe0c0870fe09436dcb6b841289614f2c539ef16af7a720ec8a08b68c99a626e49e35382f705793388eb9469caf76925770d9f4efe7c85c8782801a47613baf1a4ab95d4d8c7a76c3ec13eb7748d91b67d0b9711822cc021aaa538297e2bcbdc3dfec298ff283fd87a0a30bde0d639188f382aedea550351ec2430d2a20783e44b218b14a56625da4d45149af5d4bd5c15153fb82fc33aa5529c7a5d89e88372b9c2e32c92f4eedf56276861265e24237a345cb9c70af40dad942742a58dd9a44c65891b15a8018875f174dccd8279ec675c1a652f752b3c40af0713dc2c629ed46846df79e0b64f17db920075db7813c942f06070f0ae1bc8a5497b80a9d4f9334d7b57c340efd8da9576d14e9ea3e2113b68391992fc679915c9be78ffbcc5f913936a6a71ea9709a3fa045c6ee6aa2ed631bac9d2d7d5873e3358a86b1729390ea8ee43b5c203e58a6d19ada1153678695b9613dddc94f95b8f8633397407e90c9cf113d1cb22078a265cbdf748d9ff6d71603b42572d4aec6f5d1b7acb055094629a154b2fca55e1f6048882f2fd33628520257b0019d70c8306083aa127d1c6ea60119396e44e211c01df218e6f894d00c1200041665e81be1d6bf1d221236b0f23fa2d9c6485cafe3dbf3a35c0ec4743e979dfd83fa97c62fbffaee8a75d7fad262d07409faa3ce7f85e22fcf66cd31761a7402d11c144bb2354455d06ce5bad28b2173de8e2827fbcdb8b6b516b86a5ce9efc692ba6993d78583fa5d7a687413c7195154ac46f927c7b8f258e1cedd8fda1a19fa7a02f8a731c39874f878cb0ca5fb4eb3b40e7fc1d5a22b70b194be190e440f164d97a4a09da9c05c9712bf3e55d9394285a98e7d38aa44135d0b0a44b6bf9f8a27b0f08ef62e147f8e92ead656f3b8ec404f6cb4b69f617e69baf07ad6fd1c27e15e60ab4a49b382913a1405aaf014958128ed425887bcc32e7b1232cf281af6d59cb31049d07d69bfa9c5b64da22d55c379c6ae6de64117429996e29956ef7ec5e892b4f57f451bb9ba29caa41367356f9247dd73f80fa0df854079865ca34928c6b474de575bf0b718e096331451a0dacdd6993f95fe47d857d7bc2bc1ad20768a73cdfc4ab00b31333ea9d4aa303bc32a75c6c18c6e9363ceef55d0d33308a1c02dc168ff866044f6a6f95edf7bf3b1360ba2135df9be685322d71030a722a18c8ffa1712cf24f8b87b1002a196221101f9e318feba095d884562fd1766c6a7ebb1e6e9dc92ac6f0f02683f5f3ac55f523e529e5b6de7745c8a5eaf5b4422339475cda49ea55af24f9cd81dc7bd3322e6f492540ea0cb599885b7821cc7f11648d1b5e0d092c9fffe5801205c6872c5bfa2c6a46e9fea54e14b5683134effaf7bbff49cf2998c1767215fb55b58841891a9a240775bd8694793bb57d8c45773c052eadda7bbd3a38792cd3bdb3b231e34cd179ab01aa1304638ccf1416dc906fd05c309be42be67a79229996f850f9ad515dce2e11a5495b519731392a1fd4020fc8d4b985dabe8018e2fd5b0d05c2309cd388d3bbf65355e4fad19d593ffd085f9c461548c27c60db47a0e449582098037cbde3723763a62a53a223cbd3348bd7c8f12517358360a13671ff611a8fe20bd2595846ca16c8362bd7f6f00c92a538aaf411b7e2b1363dcf8dc653b7788dff13a7b80832dd3b06a054b82a52e397283b7f08ee44cad95ea4ea4a562ce396b2e843e298467d0f0792d7b9c515fb7675770f0ad1eac1b96b1c685e35910fde861411dca6b982213b409f555fe0a35a95516b69e687ab808955b9971795cd0c22b485067929bd0b4bb6824d4d07b391bc4e3104559c71d11a5a257d9a233de45bcfac50d6ade46e6b869462fde2610058809328d4a47dd47d10c34187f0995646243ef536679c362d2ea3ba90c1fc2cabb9eeb3b1641a9dce162e52d41f159dc2d626154f754dd76e7f43500e137845b0a1623f9fdeff417af40c90ba237234a7f7e92fe131ea462d12a4bab203c7cfc6c7939dab4ee7042d6ac6427506e10d4650ac84ba46657c453d5f77e0322e59d4e1874ca1c0296a9eb2fa3b102c8c8d2c86475f7ce774d6a05e877dd0c9647ebcaa6856fc2388730db76bb118439baa9903058b6203f613fc3a33d4f6e7825f1535d302224a3b6496b520b4dda38620b16a39f43b999d3ed2cf42b96ca70ab1d3c803a4713b3d9046518c611982c4fcebcdcdf0b4d34392d289b496765674f9c7b7686aea5f3798405fc5ac555410dbba259b1f16c23cd8082930b02f882c6f1dc5149d6d34c26add115b0c8b23b195f4fa5c3bc694a7e44725d3daf96fb1627e34d6d6818a014ececbc9a8a3b8793f11feb78bc21b6a09c16f3dd51b42228c3c56085bbc093381fae007283584ff9cf464ba722775ba4c901d83385e8fc54ceacc9e56e30a9794e7960d3989f1a692538f4abef59e766b7b1b59cc737376ef6a32c4b2b1396dcbec4d2cfbfa81e6cf90c0e1a87d640a5b3adb5a95762d18f5fcc1e4ef5330303593503dd02cfed3376bc70c48d6b24699a45aca480bbce82e28fe2cd8d2c5f5d3031654531ec0cf86647a9e837f1175b344d02dcc43c4a7a591d4132bb1648781ce9888a0886b18a41f1364b53a96e2958bf10405d1fba1ac4d51bd9da281b2635d223f3dc4734747b1e3786e720c610e6aa2455033ddb7a03d6ac4fdebfa039fdd6f501518822129f2f0ce9ad087dadf3b56750a637eea99c5fd831b7939d1f7fabedd461c248d7d24f465a873ae46caff5862e3ae606a0b6b07ad935923c88bd9e2fb9f4d2368b7c1142993d917fe985736263612a7fcb06481317db3cc2ec66bfbb0eb3adf5f5d4890750beea784a1ec470e438f592b1633cad8c2d7790113603af7abc66498b122d9369512372d2efee9e2a2eec4350fed20ed405f58c3295d08dbbf0aed26ad7bac5b4471448cbfe2ab8d36ecc7524afc4bd16195c54d8e7087bf2341cf1600656c0807746b7ca8d6a4d28fc88a6aea24571bcb8d7ed7ae390b712dcf894cb3e296636ca3cd5948fae374c304324cdb0a33252f44034f430b8c807b3c2da471a0e2b7e0198ea189f67a7ff12c983c4e2433e6d01a1c82ccb09f987b3e29ec29c1e753f922c54bdb63421f67f215bee748debab6afa30ee64ab0c2a25da735521ebc7aeea851d4cff01ad5cec586c45d46cfcf9786f178c8a81abd6abd47af9b8de17d791b38ad6851a722c6b3f1896a5534d36e5619e3fc7ca6635dc78008f92ff475b664bc69f90a612ed5f339d20995f9f9b17e6dcb3990f635d745736c3327d276a486ee9c1a74d8dc08554ec3a0c0284c294af7b80746ad4ec8fec7baba63a4e8c1a5d928df534243514b7625239a5e0240feedd0178438ddbdde552d8c8e5f4d0d79ef0c9d29a5ada06c1062e2e15cd5cdf3a50af60d00b0f507d7deefbbadf7074160447992f22be612cdfa4e12268b5710daa3f02f4c29f25087356dd37b9c6326da6b2cc4769fa558c596872943194f900e785e381e2838cbeddde07d730f380cdd6dae27df74d37ed7fcbbdab4efe77415977ea2582aa15e8b4b46b31505c6150508eaf4d801cc57c70c97ece85a1969a885e1ab62b0a5ab2e8e17eca2aab07ffd7bc0bdc781bc941d94c8840a8e1ac8731afd4ce1d9b6f03cc073d502f6b52bf7fa4d9f2733dbecdeabf9138213d4c87b71aa5cb2c0915c37240548fae05623be3270b073312fbaf4c010345e98d64d7c966e363a03cbf8d47943cdd33a8cca5e8edf303b1d3c325410253cc34a411f9382809d7db6b0bb684770cb77fa7a6303985bb2e26d38a3444ea491d9f4d34eacff6d15fe1a940519393f347d07c8a686d04638b8ac5377895642d75402b97e0f9d5ab3393d1c1f80dab4024d81fabccdf4b335df2554068d1edc2bec12c7b5d03a5e7ef26efaf0e840bc3ef1dffb290aa8cff4050fdd1b4173126517af9592fe04087ac0b4eb4fafe26b1f4a680780e122830646a026797120950e756232a4dec61d1c03c10c7994477c99714ca6177a16fca4499a282f659972655153fb4ff1a5bad8c88c7f22f3b122101fc25c4d25c235706d0ec80dabccc1cb5f47883a28b6891bee4f2c8dd7721ba14e374fcf56ae404576217f09b0337cbdcfa70e06dc5849c166ecae8bbc5010cef187b008367739247e861a7ba9cb51354807756fd6fdf20a4476d22e31dac29d1dcdf09b9d71826d42a31db0095d86d2354549e46b491de73c5e29dedc659ff03161ed9f38e1500256bc7692ff8f0800b4fc8a99f6ddd9809a43595bc4a4f6d9d0216dd0793e5467384dcf8506c1bb93d7e1ee1b26e91cc11eb6773d2b1b748c73c539343b8732b33b469b54644bcd6b81ba6aa08afe7f244159c7110570420372a2de0d8382c702491a6a3855121d8004340d558ca83fee8a3c943dc139affb52c499ea3821a6fddd5dcf4dbf580a665846008060bc691b999dd7403867535f33aa6f14df236b5629df865be438b0601a937414a03007de01c1087c5a13d91e17fa117800b9bcfa1815b24b78e2e8e595f9807a791017583bed67916425b7bb251a3da53a74897b5a9308091d18e0680c9ab5f182c4373ab21c92da3009ff59f09d0c6d7b72ea64698935acde83271e686bdd9564f28c91afb1388e4311a0076ffd538b2003f99936677b4730e5b3acc08eb02cd57ac9ddc6ab0147e3d3fa8d10789cb0bb3c1560c11db9eec46ba5ebdd4322f4e4ef5fd1cf2efd5ff338dc6348845e9b2172c491042421bebf64996bdad15858d8f695641b78bd27ee64d61a36cc7a14666c484881bd61c8c020dc2c682833ed535fd096111612a6fe349027e2aafd2cbdbd552e525d763a8dbc74a7087640aad552cee1a7e9c894c0ec89eb56eef95c599badca0c0ec93b467fe1ef438773dd836c75ac7c37074a194b72248bb44e13f2b348a1e512697974bcdaba7f94baebeb6b88d0e4525293431f9dd13687f3e4fe675c8a32226682d7c0ea5737d8cf6066a749c8c61f7a6f7c83d1d41448f49d9ddd0e36f09d98ba07e765a73f81a4a1b40b5fc0dff09c986429338421da5f4087d98269c75f82d921a52fc02ce887579e87aae110ee7d4a99a51445fd5a8304a6da3086d813336c29bcca7af5e8d7af9625ea8c94170ec457e4d2b0b56c3c5a153baefc61b6b2c9ba0d5d1153b831326ed0bc67a6c1e2a63fd0420fd8d76c4c46fa1ee5c9f776e21aff838437311f44e49ef16e9ef86755c86fdf0e182289856f078bb527efb2efd778f24e9d542e95ab1e7d200208b4d2020bc0cc0e54371dc34a9955a539ff186cb7edb3ecbf4d3629c0db0a8ba4e8e837c49699bacfdadf780e49b87952f882ed3dc21d6f4433836d6130f06803f3e5fef96a57ec93464e1d9e6f37846a740868e71f2f3e41bec57593a4a7d6d019b97dfcdd4b2adfe864cd3747afbbdd4e1b9cd6ad13abd600bb524b5ed3057dbb443573d8041fa324173c11766538699412fe7fe1f8b3c22d6cfc1b39c615edfcaa0757debfe71159b69cb335062eab84ad9afc11c1760acaae185e521b491c87f4c1abf43e3279d8cf2e34ebaa7ff1d4429b93beda36a139a684e411e11199ff9966c7cfa845dddcdc789f152e50d4e56ae9689b0e63629e22b84c2edff8a9a9f50048cba9b0cc2860084856422e07436f5dd2186b306273da2f3c329c137b79194b8b00bb40b1c08f61bb6abc6a71c0b0f26c90f330832f423331de6cda937a0a4945960d4962257dfcec7cc9a1ccfae44ee3206e210ae3825a9e32198fdf9c7ecefd19d5d16116c87f8aa7fabd9729b00f6566b90661ff07371dd1624d79f3bb37d4b3f6d8fd1b3dfff9bafd39b19858926c18633a7bc31af11880e373795c3e89998b1c7cb3c7cd5caee0314bdad24a9eff9be94b2bc341ea667db2e6fdb90c4d012ff57389ec730119c956848386aa20d9d8773476be979ea68b32a8b6b18fb7efc8007ec621c84089f16ec929efd8634952e6a083899d4f9920f9ca32311bbc83f9461ce9acd4cab07cc30d74d44213c2aba82cb3d3166a7d50b1871959a976156c94eb19360005d99ffef8cc4bb9625abba74adb6965ca6342f906abb6808e4992934d8a58ed30ee3e716c4efcc735bd37214da6251a1fb6b25ae3c30417d1bf91c5c1b7897987036a7f8f30febe2654f0a634be5cd1ce2024e388d33038a10fddd293398d50c4811a6f010233d54033fe262636a32d2a8ec7627fb27f5e49cd780f63a3613b3ba72fd47a11d238bb98f8da681e824bbbcdb8f40118b9d5517274fc057fefa0ab9728880e92ebb3830a1d3c6881ac6a14f6028a9d3cec2c1870f67352695628f6ff002450ea3210289231e7c03404a55402c032fda23c443f86bde6ae8651bda3fbd6009344e523f1f35e08075ad67dad219ef10dcfd670dc6b041be9e5b21a871ce1c74c81a32ad63af49814c4969e0f395d333b9bd3e897a92d5e91cd4426e336d2b2fa3426b7040677b09e6d8209f4dbb1871830d375c530202bde50dc6234c1ac7ceba2cc4134daa31365d8a5d608275e836799a7345f5f79c3c19b72e80f3b28690f61bff62ce5e98b2251ccc74db9b09da9a936650342365b268861755d5f23e5198ec699c20c8f56867352897d1eca32f89fd9e066c9d3f46fda98cfb8dd0bd9005e293115d091953a7de9b2248a3347310357eea7dd925f81f0d540e8caa6f2cd99c666530f4efb735ee7747eb1fd45d4e3a861b89683113d5d22959934060a7cb8a51331b82ce6ded68b76330bdb515d363ce06537020e43048027d984f60c742afbe7f46193a8bcec7abe7b92ad5326e6ecd5df4d0d42765062528d07c4a452d5d903c7b23ca42e12d0ecbbbf0472f1ba06febdcf62bb8b67c8ff277f7ec7787a66c06efa360d7066e81358ac9732dd67afff08634b1b8f1b6d5d79b88667f8cb91f13a17c00f9a451840bbd4337be6d7372b5a4bd6b930e1258609c89931e91009f1d94fb4e26b9cdee2ba24d629adc51ed1c74720239789d7c2d0f71fddfd94a4aa67b47e880064f40cdfc106a97aa42194042dd308a9bcf7d9550f64b2e4252c23a8695173d404fceb4bd6b20483cf89436be3325d23c93b5f06930c6d78b41f8cd456bc92386d31eabc1ab776dc152ffc70e633a6819ce38ea371a8a316c1a079b391093ca2ac5e52cc1d7650f5f7420d788be539bc70e5e37f62fc296f2cdfd0b55c56d4677e0345a7bdbd4aa0f037ae32144dcc6f338193ac1775e24c7c35905a500193ad9b40097388bdac97ef247359760a2c969e3ae6c3dd0e4324ca1565344481fe7935d7a8fee29839512ef7f0d4770b73611c3a784deffc8089d65a59ffa186f83cf4efa4e22a5e936f26013629c2854d82d95e56f57c666f269b809e7e61dba4ffba57b0501decd029ec90a4f49fa94c43012a0bc71abc908c38834261b0ba6af8b4103ed7edfb4d865c4f9467949eff97bc242088a817baa3c6ad549c39c04caa9532d03f445028d093c217f1450d72fdf756a9693d146b7a3dea7fa7a116945d01eded2765fb61853f1a9556d3366fd7bcfbb91e50a87fcf378626658b010928a00e7ff1444686c2070f320c0fc76cf5bfe9e28f5face204377d55a2a717297698ae4ef50bfeb9d56fd73b9266188ab519a642f1ffda023425100fbd7baf03d57a53b5616350624063b9502306d84628b1b2d196709fb2252c5b86f9e3a10d6f3e35fe6b5d2dc2d8468f3cd782004de6e23213664a44258fe735b3a471d6faf3d4419a79a5ea04ded9e07317b52e12013a3762c7f8e05cc81135a1390f6baf1a0e916f0a80a6002229f2ed8f11bb5378f5ba552712a8d7a3684e6c9b544f01418f6f97451369701b3017530aed2d798cf6c0a7e1d5ba6919a1dc0b21ea80143bf9a41688cfe4b08bf0e21458f26db0a1cd0223ad4b31c752cdec913e67bf31fd997f231925fc3bc581eed163556a419da14c7f2c2176e5c91fdcb34ecc8c4b3edc1cfeb3396e24979eb0124182dfd2f9205d40ea5159b131b094e81f7316d0fbfc0fa84b1745571be4584b1d7223bdda3d8e47ac77fb960c1fed9000825051eebbd47ef51f379816fc3617a998dd0a12c8e67c92434886b7e8f47fd083185fa3699ca13c50af5aaac95b5f27a3b4bfb1c0f5e20b06a41be7e64c800ab59aa68f1d6e1abb57615f57f1720a245b6875b1d409d6fee216f78c6c693ee9b918f6ecfb777e99fad1e371ac9cc4d3385f6bf414c8a3f807af3a2bbf354fab38b75e28a2497cd30c212cde307a572249a3c97fc465a7800bb1d624f5719a5d35e82bc9e555b51d47006225a8481ef0e6119433b33e65c70f4708870f4e549ec65b401929267deb9d07d49262cdc8c7f3a070430b69fd52ed1946323211268f293e5a3ee1f95231f7f98b29fc9e3fa0c0d8beb55bd608ff86c06fec428ea861f8fbc393bdd9c12557339eb2641cfd7de1681faf04b847254ea588b20e239e40d8b7363d431aae87472497d6ada2ee6e53d8d61b21178baabdb1c09e4deb1b14fa3f1d46554f8fbbbd8451e06480923252390efe0b7e59072f49b692050c29be7739e49dd4078f6f91ad625ad54d2fb2893a3b14809ecbe3a9b1b89d4575d312a51a7ac40c2756cb89f3d0584651132a334a013adc456d1402759c770f63d9f08ff1c90c745dc848c5c7afe169d4711b0cb3c0006f3f32412f9fab553eabd6bd157b2ecc3ca25ba8b241343173785b08ac8c3342fd250c8a6f8afe1ab42aa339eeedc98cb7a8a65e9e363db21b4d52440accd94d62580ae3b8054227b2cf9c522086f9f906f60406b934aab520e71fc6599f805e4674947fb1b6dc8601b075b191a52c9452f90c0327cc8a7365973008d68ff6c634172b68108bfe384b113b272a02c6422e1d6b1ffc34d4b6fae3fa286b11f883326ea020f86a41e77925413239c8e9efb9c72b1868c87c225a0ee07139523c5abb1bbbbecb2822076b7f9b1b4844d2011682225af8f9c944886f24ee0ffc269cf91571b6e50edb97034da870d85ec7050b547301b97e2e21166819a2875de1cd70044553072a1af3927f9b51839f8bd3dfe6bce39591339af526d07c3f9415df6fcdca0830941ca4b3df54da467bd7564c8f3da0ed7ae940c093daa1e4ec25f5f6d9061d9a5aff7b0751f375212a5cd2c8d44434bb6cafdfe9f4a6b135e48c5ba0f0b9ae3833cbb74197cf87643974d3c1c914947ddef1f79d2d5efed2e308d1a9f402f14f90777368ef1773a95d51707a54037aaae345c05ea715c70ae3c2e4ef7df6807b320a4da27e9d4ddc8b48d550397e277ec2242f401d8b762da4b44318fb40c100122b1f60207b0ca55e4eb701984be5726b11b04d8e465f8f92c146f7e2ad1062fda65dab5d086920b9fce531b66d260560b5322575aedef13a2fbe7c60620040d8e99f145a1e843d02ccd27e7de762af60fe67dbf12b551a769ea945d0edbb5333817135591959bc05dd3d7c3bf128a8d728d2f45891d2792dcba9a78ac773e83212cb40c0c0a9722e14d988aaf4c236c9465647bb51c4f7ad14b0a04f5a4fb13c8c1cb72b9300bdd7edaac7aa84b936034aab7c95beca6abafc50b8ebd2f7999bad5deac324e4ad944aeae7481b1aaa299f7f8ad059d724a3d94e31fb74f433cec39f77e3108fd9bb184b223e3472ad01fd390e05e41fad8312d7bf2468722f044be05f7b48728c5e0f0b9d10f63bfb74926355955fc9079bea6ee32a1793d713db0147e6859428c4dfabe18831cb5ea5ea8931afaac9bf635782aefa5cab9d0671a2ff1ffb371782bbfbc3ad422647ae233b12aac60fb4cc1206024d12a804f68d133fd790fc6e79c1da44b8949ff255bcfc341478b61482f24bca7469a94c01069bb84dc859df3ad9c65e9be05319cf9d36019983ba54bdc4f41ba7e0c867e6d8def778e5bd5fd55014cc1982282847e89f939d25c37bf43e34081c426557928737d1335f3c70d78c30be07ceaf04ce4d304dbd6923b2600a41202684ab8bcb9b840afe7dbe9dc6bd8ee49aff444b9fd9c15e799638e828221f66a00df9fdee1af728e9a2f8221849aa8ebc3a4814ef2e973ff91de8c7db4e94d65da15181dd2bf62867459c19e447e7a19fdf56b396065e99df3b81d3aac0994b66085ed8f13eb711f8c8236ee1790336c3594594789d23a1fc80c114047c5ad4e913a132154de44b687bf5346dc7dc98a335b76440341beb5016d9b30f4a9ca1c7499b6d4be32f325f1c7d1c2d42e80c8c72dcc78ac98ab9f614a45e3ae4e3dbbd5085e6a69694b0a2cdc3a7721f73bf6dfc18db598b5dce90f891e341c56940dc052249668b454669289de539dd512bf495ba75511e83e958f96dce6442ddfae608f45196990bedb951d75bfc9aee8aecd425a5fa8ae84c9ea58454cd1976465eadca96ff355e8676f38ea6acfeffa2ad29926bd1fe55e9723cc958a608c071699b975649037f4e14fa78bc546b69d7b59f9b0e987d956c16b2e5f6e3464217ebc94e454f32a4f4a20917607d83c53ea05f5006d1b3ddd59bcd1bbaa20f6b7f2de6f8b02ee43c0efc821a95614ebf31a9bb0b48140005762815290ce26e129cd46605072d5b9cd0a7353a9ea84eef584a9f41a429bb695c1c64636bf71d059b881c5f77687e7d6bd5b375aaa18f76a1a26bf6a499e0680725d094f4f6383749419a14e4a9e32f678bf18167e8dbab0da345b6db406a9b86e6e8a393b80729d78720526a531f3a6ec08ab688e4086eb4758491298835e01b629ea0bdb9ac390df5864dbb772de2f658cec2cbdd1c2a89d933b9b0cc26293c222c50c32a9dbce21dddff72034e2daa5ccb203d85dd118d12e70594b92425bebb3ced6b273287feabf194d3ffa27158e645f11adf567b896a76775e5d4af6fcd71854d8ced127cd0c862d10993dd190476ed91c9f90132aec8cfe351800a321ff46ec035191627207bf023db00c4b9cb8dc0bd7a810ba8cef8014848f854f1674d05bc19d2d559b1118e13b451aef364a70df072002621248321fc261f9a177836a48a394a6453f96f5fde69a63103e37eb7d6532d0fc25736a6bde0b9c6b7fc8c606158284f2a3f699768ea9784e2c70e9558d923cd8a60a4c7b5530c516bed07b5adf8f1a59ffc98bc1cb4827832faf3a986b3f1585f8b7c34bbcf7717a9bc672938a19d338e35413c0a51812d90f3b81938380d14eb2273e5a35b37ce3ae128fc9ab25fb583ee430f9eaf0784c01091ef4c06eca730727ef0d288bf84b63dbd95585c240fb9630a08f28efe967bb910421cc4711b09a1f1947451d50b7acd57dd5f0241ffa04ac3631ae54509747500ddccdd934b4a3ca5917bc8aa60ad82a70beb61e2a8230fc2247f42ea241b316ea1dde94b37977ec526bd9d2e4af36430c470b7e4ae1ffa276dcb0ad49f8d4e43308fd75b6b07717630d85c67abdcecc6345e97d322acdff26ca9bcfa46ef39b34c55346de55bc418dd50e83a501b23557d9566e8b141048f2c54433f5e4cd77603d83a8a2ba3870ed28c37569ecf4705e75e8c56d7bb00cc7bbf082b1619c72d62aa79504f7cc00c0ba1b3b7c549f0bb5c4a69d83d9a9adf21aa6e15286ae15555ba43879a9c308440c66b2f0dc4355d27719634125cdaeadb1c32fb13729d6d34483a8d1c25afa4aecc576a82795b2776067d971ade08c0508a74745e533baadb9be300dfcaa6e91fab85575db77b848d9623efe11b40f85e6037f7765c9b02ac3f8d9d119a34feeb2944bdfc16dbf215a1c72d4223a397c693fc2d4c05a1a6d402fee78dcf8a8781750d1879e1c85c4107fb57f549e24836cbe366c6cf9be80b3f38bd365db86b6299f799a03f5dcc6bef8915fc1795eca19b55e79b51e40945be1b4572d052bf6ded0f86a430275016c4b4e9a41262151e587963be7709e78e72cce88050b4217cae2f3365deac942f28b27f0cca3903a1817c27b60fe50b4b79bb516c1929bcb4011e3212e66553c87b0953008cac055159bf52b0ca7fad42009bdeb6881bc905d1a8c1b0feb7588d67046162efa1acd4ddaf06204fdf9e4a1c9d60a0bcad190867225b21e4f31f9e58b93f262ee988afa76235b1f2828bcba002f032e3554c74f13498a16ec6b6154150eecca2f1628cbd2702ce69336cb7b06be3ab238c749adb93a86e1f8aa774160144c9fc853ba01f076538799155cd662bef655afa001224642e02c4c6a823a80157efd2c54d9bbe791c337049a80be8e1a6c376b68165a090b2bd05d21fb5f14c926c778bb99a466b8791b9a404b400c2a13ed32fdae7ab972a4308bf8eff3009bfbdce27bcf19386c8f5b604ca13622f08aafdcd07f006dcd11ab193ba36921181440a19d71b729f06ff02a47d998d4795d6dfe194b2ba8dad26b08d00d969905d971ff1162ba3f1d0d56246c3e059236f08e5d5a035c4e4255c63f64950efc136085281c405b3f8c921202e39feac9c7e65ed90c215e7569ff7cc1df15854de6dcc669be3f8b73a494fa36dbca6243d3bf74b1332428006520b1c4856fdc9695d21b20796a5ad5135b860cc6207c95700d17e0ab57469da069c0e2320293277ac17c2a6fc03223c8cc0e760a7bc2462d67da8f760c31f7556195cb6bf8b818197fec4468546ffa37b95b129a3c3783724f94aabce64f835a9bda6a8c4f95f627b329952626d52790968b465de2c5e41615517d83b1d1c503e4a493b2d8cef8d23de0f73c394fce67ceb7219c3982abdc7375b5725d64bfea5debc342d4ddade973b6c803ed92377b1b26557ae41ff625114fcb11d82c5da3b0c783526806a8db548ce9595662bdf9b9d4e60e0399eef42bbc67e1534f5a6f9bb2ed4539e93b17e60f9459c7141955285d9f5c8e60bdaa11ada8b951ae21890307680e5deecb2bca01645bd52720094a18e9b8e152fe864a4935a03038dfa95271127bdb8da3b2417f547e1179ae913369155c53b5e0600963e90df08c937a055255b752fb9d1eff8f97a39c12c9df6c569299706e69c6686f89697352996c3460b79fe49f3748f46bd0486028b0118b70df60dfb6faf1d13ba7fc09db97f8e7468d38e4be691c9aecc6c935f9d227a4c469084b1ba7d498ffe25f509225a300a5e412875b2aa83d99bf0edeff11d856edde1eb3bdd1e2b7564d5ed383ec6a4d5682b4c772acc6ba4a75a5463da5c3b7a542ced3639af4699b60381f8b3a72eaceca2edb856854461cef4330be3c6be573f0bbb57520b06d87b1c30ca8696a58cfc713aed2a31009ab33e527eab6e55a29c3510473573075f2c33607fcd7ef86c2d33c69583b8c2f742cabeed5c1a90f5dfd9229bb26592476348e3af861f6e6485e68f9178fa5ca65a267beb7e1f4defaf7aa6735d628cd9fbb4f1275a4086bdc09ebe1d823864b105462a98cd990e5d45c2c99947610a810fe47157b73e5cd8555b785e10838ce23c588737ea0429214be668fee853455cb35473119e3792a42af5819126f056496c4a8e5031336e2eb3a489526d9e01254c2d4c19b0bd1694f246d496a8aa2a21e204add29fec6d823c915da2d691b8139a8aa63c46dd1827c23d31d566e2e6a055372349ea8eeec9cf6db54f686b85c2243df1172a3882ed5003d5aaacf9ec60058b95d0084e130aaa6186b3a12916327743e6064d02ffd1ee5d068130e082928da2b4bee619bf10b586ab5204a8538048e8d1353450790c6b61ccacf96c87c51fa97dd6812321ea0054bdb2902639b241424631eda9afa8e08e1d07b675265e4584834596a0be8328ba81bfad8284453d0ac5ca87c11b8ee2ec00dbb50cf64b4c53795f9029ba6f8a994e2da588d97cf1b5e36d1dfeb129100a016fc3048b9ad58d7f31a931be595e76a3af4b3a5bb51ff886ebe8710302e4cbed89b80f79a4ed2741ea018d1139723bc775efcf8abb208dbf4d8f07d1dc97d2af3fa88fa9a2d08b2ddc8a53b3c0edf8f7cabf5a44dd94a994de8e19da50ae1de04a948eb03f86154a359db2f184a27e2b7c6aeb4baaeaa034bc00503ed043cf782cedf85c8f66f181284d835839624aef41e4065e8231f83fe5ba87dc3358453da9e5ba2821c27415034ac94e30f94b2dcea887eb205de9973a5561ddcd144c0949628755ab1870362d0b48aac75aba0ff9193bd90bfbe5cfd26ddf99fc91555baa87fefd9aa05d14f20406f3119fbeaeace7decc8642a907c9cac067bb4ca5b83c90287122fe060ac59efeb32ba962e97f6be1e0c2ff916351477ec4db3efa59e4aebeb42b9ede1bec93bf639e62523eaebb8afdbf1c5fadfc05c420a8590761377598a87225483605ff2d93b15013600a239b95cd95ab762362d6e269f23c4a4e5d0526ee71958c50aa6fba44d4f915d421ec7f6443a3bda66f9bbc834da3ee7718b82ee10db1217494b256d1814223acfb19bf0fb7e2fb113bc392ca84210d6b8d7aa0e1692afcf4e0d21d0d03db54db0405720bf331de974db75f78c52dd8be3dde9fda27d84f35d701d1e2f81492832f772df38c92524fab018c3120118edad6fc4b11d2397bc5634364b0230d794722d860f37fe4b4f9d4bfc743db8e933d435511c6c42aa585b14e821038ff04624c35ba6ba29c0d6d0460710321dea45ae8e9306298e91e41f331bc74884741812462c081805faf3871e8e9d888f10bf468b4581c0febd3d353d6b5802a0f2792aa5120127ae91ac0b733e71ef107608b01c6db6c9d6b66c54a958fb1b23f565b92da2e29c3bc7659a504dd6e4e906ace9ef5a780e198c1c9dd399c9e41e6a20b6079a6aea48ed31b4e50762b255e1fa4e2f4630dbaf364a2633ebdb2f517cc1ab35cc9c20c00de0e81d44d8a32d42c2566a0e6ac9b1443bc5c8a3f76329a69508807582d6b1e6b59b695e6631d178d493d7154f3ee949be352ab770f0fac35ec6f5fba408db1b2a667c87ce2f5e16ccd236d823985e4e76e99f621115323f87a9d8d9e9db1a3a70eefbe0f9bdc392954a25f30ba9bb5bd510d5717ba4d53899ff9b464010f606357b1816fc32ac268b0c164be0b603d495e84c51088963a576cb39a9ad7553038d5cea827d8ef92e03084726e94ad3232506a0870cc365e6f68084778d9e7a9e0d8b9d82a5b18f646636d680f0bd409d99415510315cf0af8947424a5c3abaad399b4ed1b50b3e0628a9cd42c46441f8bbac974f28623f66d27eed05bde516261d8664c6c729c6d45bcf33e6efbe1afcebe7b87f0d9d3765116092a8fe3ec137e825698ec8fa9240ac13eadbfe0817df20179ddbf207c2ae4fa15dc4be191877ac4d375d2d6e9fec44d334e73678ad70ea9c914453e422fa5d460ce0c104676960e978378b1ff2d9abeab0434ab56401ca7707b5c11c13cbf85a62005d8b3056a611abd4b79f487d4c38f4806389229b8f0f9339122081b42efb55565d9c9734a92520f9c50db0ef0c278709b6e12b33ccecfc046566aa4d45f7160accf6ee9192eebc003d8eac6ce63c5cba0983b39205adf6a5845e5701045daa7dd830bafd2508e0529fb7d897f4643d05b891e5974ba3ad54cdf59605bee72ab9b28029bd3e128f842caef0040a2807a2f3a794c3a914c4bba978588aab744210df440a2943b66538cd00a75d53f2d63f9ef53eeacedec809de4b8f1bef98abbc82bf714fc14142c4a6f44ff6b7a3d4dff9f29768ed4fb975ed9260172f9efecf903a0d0138bfbfae4e638e100c5701d28310da7360fea653239ba8be0aa997a69e42167ece7dcce874cfef5ae97132f276638f6c5d29d40ea9533301cab256a2ee869f5a7f512c78f276213975c1e2bd8c677e02a4270af42cde7ccc1df397feba9cfc474252dc737cc5dc7fa275b8208a9e7286c107884413f328d4d7b05b88482df23af3cf069e7dc95c5a2120d9b144f7f4f7421fe47ec7da7cccaf78b8e15e1abe0f03d0296b8ffcd9d801028143bda5f1be7967c2453ba5263f15f5cb3477937aed200b3b05d187178c2846fb44e348367ebbb665658b6ef75ca7d259746511d28a83ac71e427ef32385a12bbb69b7f30fd8e4e91c667b7fa8886b3a1543a1af80d25ca0ac3ada5cd871305da14cf4b676c4200b4335f665881cb8c4aaf8e4ad7b72c359ab1f9726b0ce1159be4b53258c88a57a74e4b49040749c37ce885f23175f1d2489f4bffec8c008ca9e489ee752a63a9aef51a777e4c486e64d294a4f7b69e42ed0c95bc9efb43bd647f0d2cad0025209fb005ff4ab5bbbf5bc2df82c17edb5685b9b1833a3628691a714bd3e4853e6e6b73ef5a6c77f5c15207fc1e6b7d56dc2a562521e89b658bda968dd0110511d39817a9d844630a166e64ecf14d7106786d059e9f1817fd67764ec9d639b5f79e883fd0796a38acb702c450dda9fc32aa61f8760188470543e03beb451ba8658bc07358df3abf83b0be887eb73e5c0013459f5948f39f822ff3e4b30d76c743b701f0e0f1e868279c0852b37a9d9f1543674b66cfd5e98b4f9b5ee2b8749df9ff6d2e07a705125cdcdcacf5ff93e93beb00be42addde0a1b07b76ed7d08cac15513972e3f0c37aae123235358901ac65087b28a10158c2d7b49db324cdc8e236c92fae1e37c369538d620de4a99761646d05368cb10eb69d35bba8df14f8f6528df1dd9463797d57b4da82780804db93119a1b8b95116a058e9d2496d417f57d391d4af18ba099b24a22858f54c116249489a2c0046c233cdad328dfaed6de51e90fd2ededd6bece5a0edb6fd23843c843689e637b37dfc23d0de10ee62f03174501dea7cc3af9ecf21c680db04ee4cae6ecd7ae3fcc2e5cc81f457e4402b589d8663d8cc4d785d83328d20458801da8d29d007452a9e871203842d861bea139dd7fdf5494951e0992823d260d708e922d03543b8174c1f3651f257f989c72925e9eb745bde38c7cc393b01fac5174a0617df63e9b48a2b41d432bb7ae906133c43f8a3b3354b34d387bb33fd783611fe6cc531d6b82607726cf0291451c4ae8eed27823ae43389d7321b011fc43f64f3b777430865155f2215e65bd4f4ab42647ecb2112cdf605ee4a8bf78ab1afc6f2945adf99a379885edeec396434a373a2e606b99dc094fb10d556160b511f9f9e5c59152d54a054db7a8698ce18cd82c04c11dc20ccc4987a673446b2263b49dd03b0f5d1e1ce9e09aa37920ccf92fbcb6f0f43fc2d00c36efb63eec0e99352d01294ed18d5aab8c17e4a534b8e47da9af9c2387b05dbedfd8f596c777db83afc3778788e012d036d829bbd97ef665a0a37ddca0adf1cbad991a18ac9a1eb6b5f5c65675368e234525334b8f034fb3f8d28e1cd39c1be9904be2e7e07a24b0c60c211652e22fa4a25c4a81576c335b6001fddf13d73cf49669c53daa880b54c68c5b5b0d14cc3886f2d761c6b32e5ff20c740b66c4610f2642cedf8240b7d0818cd97b73b67089867244016da628e65c4fc3d57804c353d5ea2026606262c3f44eae3545e172e1ec65c7aae62a132307b517a0898eedf78c488b587eb51deb5567af1d96ef6e70a0f493d5779201d1da77675bfc42fc3edfa80c20293fad36871130ce37a7bb131fe83251a6221b7f6872b2058e5e3c27bd0fc7999fb3b435d0ed4962ad81ebc8272683e28dd6ffe3e2aa215f782f120ad2702d3d74fb67d4140c1c87f468df78a28b4058a62fb4f138b1275dc226eb30217fe87d7ceb033f4b61c7669caf524b3ab2f3c29e606264e089c1014adb40e4d257a83cdd0b9f44b5d906fd12e333a4f319cb1bdb06439a05e35ddc29d898bb807027a9d007d9693d46fa49347125af035d4379b581e1b7b8ee7ab264bcf96c0d86b84ade4279e3cc0a8c0b4a2a2345f7a59315da7499909453174ec6badeaab3193521a12121b669b23921c7174876f51014bca43ff3f8da9bf611e69e8bc6a944217176382bc0ed4a236e617db5c00f79ec10596c6abd072d1a1bd16b1cc2e1edeab8ab099af4dbf95192b0ccf69218b7e56aadcb3c50f7b60a305b17a439356c99686752ad3b5a03e6970890773e119ff6f244c5f42594354177e93406b470a7dfd641ece0140f21d67215d299116a1ddb9d79522ed9a7eb74fef06df496e20255f6bfc753b88ad2f1403668b665b093bbb17c8ad4eacf88219b48632db97fbf2c310b002be6fefe8fbb254ada71539c392c3596096e687d8767094eb50d25328d864fca3f83b55da8a4d548ae9eda04acc95b93b265a3923681661d5fec644f821275eec02476be7c8db9ddbd4f15bed548c78b26c3bafab4a6e0cefb4e9dfedc1ab297f79d3f88307c7f648125199426fb14559682c022deb015906e74186aad546fbe8b46994f765bf655d89080b37b716939853bede14b1f0f00511f7ffdbce04f2d76315189486bbb7fb902c1b85370e0aaa93ce8432d58150001dc7c91bd36d3dc7d0370d351426647297cc1b8ca4c3a1c21389b3d087e1500d34ff14557332785e1401f9457af65373310f8b7bfcc42513b1105a7feb0b6cb20d42f9dfe9900455393a14755fbdb6bc3186c81a25872aa3b2586ac8caca0b87697b79586da59af8e07c2e38e3bd21124e7fd7322f4609db83d0d62af4d92c59eed79fae1c6565101fd25cefe1fb5ec49276ce4a6d723cf2766919176cf7accec2b67980b8cb4b3a27704dc639a11d77570e8c491080c0732c55068a602beffd36aa41dfc0daf628bb8009b6f004e0dccb4b2b5494be3ce7781de8900ffb1e292d38ad0a9be422af45904dd299e5eeee11a79a8c4d0dde0bcba00e270ea77dc2082c464c3a3d65eb03a5dac4f5a980b511f50a89bfbdf6d6c2f27b148173a510406e56db409adca51431ed208348697c056662ac49336385ea5814c4f875da91e6f5f9939138906dffab924d116997925e58b1b8b73ebd17beef7302ebc7a3c0e5baaeb68e127bc5181519e2b000a244f39d180693a3acda370d4367c59b564ba6d781296e6ed3668edfe43a1bab6591529c2c51333f79e4af164a24e4e09c74bccd9080285140a39545b35f1759cb326db7b6f7da61a153406214b0654cebf8693dae6bc463f52ea227d928d2fd1e91aaffd4000eb97b0c719781a6d0d7af49858358aac2d9324cf52b788db7cc2a8b86f7613b65d411de1c3fb6ed0627fa17e91067bbcddd2da0184a21dd895ad84e2aeebc9b6b29be8ea546575fae6916500d603cc3eb9b95d3a580f685df98049e50460216f8b43d504fd5c4093b904493b384450f81e5b5318b1830bf4425b399eb3dc49fc58eb878a9fd3004b620808d537dc0f6d150acaaf6aeec2ed7973e2411079ca4aaf9a24d45f900e6c45a9ab914f7bef33945d447febb884fd2bbee61bc3a0ba297e35d46701dd6a7930590087e65b001bb4761bcd16d10cec780a649c94cd90e33f43c312928b71658103b90c428481a3148875ae28e177a3cb4be2e2d0a935cc651bc872161895f8bcf7e5a9a304c7d8257882b054441d65abf106dc0663d28e7c75d1f7e85843033e4844e204eee49b864340a88229ead66cd641818a3023bc13876aee13afa2fbc55bc0a31b444712002298ddd92c7813b58697e999035ebd0cb9a2a5965f064c43888dd595c6e49f45312661d90af3a3b201d4e4737a3b681810f15683db5e4c5e07355aed520ba3f34ba998259b603067c88afc54d5764f2f537af2c65b3bfe272d6984d8fcca50ad35d658c071ed313959b3041e9c2f0fe9169d4e90e32ea361282dec10f791bb63febadb53de34035906a4f80b6a6a57b91087926d51fbec3caf4bdf422145bc80a54387a14d3ab76da22e4e1832b9f393fc5915af3d30f5d3e2bd978785ad781f5df9334e544e93c07c8efee64a0be757055223cf16cee5f364b17e0938ef5beba92278ae1e618f606f4eb6663492f93a8f8fd3dafa526e4c1ea8dda811bca3176f23d43f55b2f98af4fb075ad416517489b99913b52054a8500ce4a22a0c4ff96c1fad6341bd033b0c362551c3cc41600bf0bfb45f0275a808c8b497289069f5b6b0f886eb2c25cebea1a9c0f6e0733b1b30505430d4af0e0c5952ff37bd6164a116d8f036a311d460b9bcf3f468e25ff8b4be0178d11374c1e4164b6310935bf18bfe44caea4bd77c323f3fb6e24c4e4dbd839d5dd1584ec697585def4c27c1756eb09005f06440e57503531b4223436e4cd2330afc716556d0fa2b99a2f64eb2d58f8fb581aeb2760a4c0ad4daa86f957d4551ca058f12e3d96b65b4fcf157ca6590118cd7851a43b63ef1d5caf9258f1a6135ada6f4567ac87efd9324d0fda73eb971f78dbcf2ff7965ca91107914f45490db9a9f5d4c75ace404a496e87e4a5ec0ffe091f360cf1052ab4a26952b6b629a50cb4940441f6bf150a361c4f46037c9fd1902213f26431331fe4198e61d74e50dba0b489bc43deb55f090ee3e9e16724a062eb8d83fe4bb74c8eae62377c6bd3d3099c05145dcfd8b34818953beb7bba053a815a3efa2c0ac283d1cdb6ef4fb55ce01581755000e1ff94afc4b1f5d107263b863b054e574f1a282ae6864d74a6f7e8116fe2c3ed98c1e32b6e92f00d1766baf16e5b2d80cd03a4777c0db1f894523a4a2b9f968a8005b8ce4341bb28f4e2fb29ef73c3658a2aa4fd978671a678ef9ddffccec3342db2fe5f183117607d3bc861f803a91075dd7b59e7e714a8a19242f8b77f6af6c885b9414426b2d8dfbfc61c1815b2706c652be8fe0247212ea5e7307eecab6a3f8e4eb1ea1d6f168f19ae3f0b6f0738bcb11feb92763ca7557e748d0dc5da46e91bdbf5409e84b44c54ee9da0bb262bb6a9421835abb2ab162c27712d52e79cdfafd666e0794c7813c0d2cf0da270aba652d99807c9ad6ef16dbc0cc5f1c53c79f7cc79c037e7243e0e67ff6e42927052e5c6e55537df0458ac4188129da4ae9db49ef69f891b047e4add6ed6ac927f6a39f6819a0c49ee49a509af4ba543f8b831562742a3e7772a977c4f9ea4444dfe453dd0288b985d2e649d416f4b152f4cd5cd620a366b67a0c6002c04c206cf03ee4f9a9a86cb4dc3ac1d6a6a0ada2cccde3d02958c9aae9ddb82d0ddf5c0dfc4d3b06dba71bc9389ff3150920b9e92794c066c1647d4ffdfb6aca62077e87f235719354685abf2d6b9f02623e52ef08209667d821ddced4a13f199244ec87d53d77d69548644b92db5c486cd7e74c4e18db0c847b3a03562cd8909bfe67c683d66f63e322831a8db2624a50b9c22bab3fe4a8606c3c35cce8a3caa3f7498d2433decb35185feb9140389d43b507a0ad122ce7a74b989485561e8b101cfdfd9c21b78ea5ebc5a7a6d9504a64e4eeabd43a90d8b754f2f49c91863df95db8cff22349a9532a9e3703c5f934991069e052efc8856bcb326add773834cac9cca7a3acea294a3dcbf0945d649503e2f34e6dfbff1b70cdacde9d277e2f112aed73e0220e008ad55ec2ffce1dbd58c2073ad2fa39c15ed9d1b224b3e9bab223d666bb312ce5e3f370ba226e79c4e7b66f0187eebaed6a5d31c59958d0750c78c50fdec2ff67929186e06a106ed603a718384944ab93db43dfbd39d930ba2d83f160b07f402cd9f8d8037f017a222dc6c5b5d5d763df57ccf27638a06c9fcbcba459f98cbc7467a782d4e62f2c6c59d13f366ac395e94b5e903bea843cbdd180c7e845dd550e7351800365b734261a94996210fea99fb4a3a5613d58861e83e45683f42835d66ba04a8692f042b9c69b752790511fe289da0701582ee0decf36df675f07cf379588a97b76d761345a9c3e0377e1a4648cf7616d50a791ba3f19ae44b855b54f2d9fcbce6474fdb8ea289938fa31b9e33ad411a36aa42b792e1f782d695334238011c9cdc6e5aa1cea7293741f1232973400c29a24308deae5a1833469669aef8caac5ab22b75dc42333693bd3275aaf9278705ee7a2e63e270d75b3afd275fd6b2dc8f09432a7b0090eae3ede9775a9e9bb9662c2773f5b60159a897d8b04cd14f13daa6b6e69adb54786030a136334e836504656dd03dfce30c89cc8d2577f79fc8fbb6d52d3fe46a7260140172117e9efa3f95c7a2a9675b8a1b98b772e560a443a98a4d8647b757cb9544d19eb202c04859c1d0599ee52d0ccef1f20850f3a3884c57de8ed284d5b77633ca60033531056122d3a51703eeab59370f7c94a4324db466072a5578c720fe2860aa70b3a488ebbbb63c911b40cd0fe49d3dfa40f4412dc767b1d62318febc93bea2bba5fee5f55f5dd41b3e6a99611d3606f756735402b1376affca3520b6e43a7bf7edffabef96713464e8e437df1361c55ffb025da3f9e243a4ab016756c2b20ab069d4e3677438fe2dc87f44d42733192bb9b742412fbe8752b49a2ef3fab866df6a7039902edd6bcd990a020538bb49ab8628c5c7bd00da7fb54d22f2c65b7940c0ba25cadfe871dfb3b2eccac9da4e5aa9924227cfa7541ab317d21c4933eb5f0d79bc55df36bbe97345f5c93c571ace1342a424d7f9f84789a6e1ec0ad9e27472dbe8ccb83ee6663b2a6c1d886763f848b84e32f505ad9522c094bad70a7dee1938b29da9ae7486746a9279be825343bf4f6273e6cbc062603de681dc5f1d9dc459e6284960b9c817d0deb85ed97bd4fe099c7eaba60a26422046fbce9f1abc1546ac4a9f01a1b1c8333c4809298213d5c29d0bec29bca72b71b430dd877239959bf38a533f21e3da98fd8b215adb578af916fac5f84d4df685ee1cc66d8bb07aff83b042ce554ba90f37b889dacb99006a1533e7ac70bfb3651778704eb56dfeebe7f063ff152224794f6e0abae3a65c8ef5bc9e9bb1b20c1b67fd0ffe732b488626b607c729b1bac8365be530e7d42513b48b2204c554bb87e3fc33372b63cf25cfda3ad464a1e5427d8efe1b7c3f5be92879c1dbf788f94ab7b3ca669943436188a623f702af8e8fcc2dc5d5b8510a849dd757b38323d92230a1d84424f6af6ac2fb05c14d97851338808ef10f4f1df8e9ba2d655cf8ef990ceb9d0f258acbfb720be6a52fff7123658b0fac4227fb0f07bc174598cfd10016d917db917d1d639247922c4abc490a12905fc990552321a92b80868e077040403a77a71bf36d606897671e4106bb794809fd0c792c0ed732d94a6f4a2db38d411844ae97ca09e99282bdb5e1f7a859dbd64eaa4731ceba0581e58d9b71053e6876935cf3caacf2c108f0537b6830b966c0c68a041b4da9c9e57fa023fe28bdd5c99621302eac91657b4ade330b845eb7e30e17d92e6e78d3ed34b054e14357be2bf22b30131c8b5ea8adc458b1d6de52afec313f42cc021570ed3b23eeb2c9e500ba3c3373640dde04f0765699e3fe16ac1449a1c1ee8a1a0985b903823ae916123b9cba39086a2f4d36d88eb7c10ade0b592b78078b0964863cecae83e4296e578c6b972a99e83598bf60f7ca6657373d1e9757d597d5353724d9bc10b8da7b8cfd6d708e9230160273870b1173dd8433b442b9dbf70c2ce08773b96abf2510e6a247f9fc4f2cb66c49c15ab498c701371fc64460e7b24e7f299887da8103e56c72c47b49fe6e48e0ec59a5e00dc68396422e6b0528e45239ec8362134a2743f824ee887086dc4484dfb1d1706371d2120e91ef6c1c9742fd85169e202231f1a209c8d5dfd7653d1922f853bc6f6b65fe663e855a9beb27e1d1039edd8fc2dc730990f7193446f61fb4e8e0c523cbd5c71638302e7f6b25d4be203115b3d05c68fa67bf796c97fd4911f4e2887de0011b9fe9ead7f3da716db827bd06fff4b7ba3ba540b0ea928f9968eb6fee2d281bb306c5e832f88f36ef90558ad8d95efcf5f7f1b07db51e4d61c5618bb9e1c9ab1ca78272fc770f5eefc4977fcd4b028568493810e0f513f7550624ea10804f7b0134c0d81d60e3e215bfbd0b1356f373222e54bde2e5ac7b34d0ce2fc535b68dd424a6da4439e9ae129b7d5821df87f2c4245fcc162861e046f989a3ba51f63416c00c74bca144ae601eab5dec5c46837e17fa4e9b2e937b87a745ce34c1fcd72585b8f640870982bec09e5f3d0b1eeb7c0e0db5714a8d6aa35e3065c4f1a1a93c55bc2aa1f38d9ac173479b271c22bcdec2be9d44f8bb300a9ab7d21332edbbabc983a499f2ab66979d136791a77672147d1d4b5085edcb9d00d1cbf1971c1332924e46d54394eeef94b4610c715c611f85536c2c17ea59713c8997eddf8910a49fce15dae312440cc2a2b8205cbac0a372cff6aabd433dd6a7fd472c33d569fe46f21064d04850919131af3c9a172a10b6b35e9faec25fa869df0a21b114703cc9b4a0f46fdc99daa68732610f30f794f6b648187d8e6e37f912ed8dd907f84d4d40c1e68204180b28e4adeff744929f02995cd5f72c2a2b720f3a53487b52db74239e6b1ab63a9f1fe679782eb23ac50c04c6a1b6126d7389dab61a7735ec159a56661dde1bf203cc1463bf590640fedbbeb3144d02d10cbb84aead36d7f115ee071885cce2c18a965c17f756427790a4e11663f86f979f1fa909895ac12a3a8476545ad335b042fbc25df5b77392976d376f9d744abd2a98787dd613368a2c0094324edf1d340895e60aabe45a6824df460be132e50ddec3dee6431db5db7f05a61f5c6a14f98cdf3939892f5d9df5a08f14137bef3614f35b61d98a82abc53c7ef25d48ca409290ded98676fabcb664e0dc870d58a204f4119a792f028229f271f40f217bf4eec289448ba6186347e4f65b4ff5cc8040776c3cdd58e3a5b0eb606bf320186584819c1082bf531805b21e9821120057d93f71aafc5c9ab3fe95c8983ab9d1402cd9ffa28105229ebb78597a80e7d816e2c74dd7b9294b082d8f431d716c5452572e0d3fc81587d14b9a07a66fd59c2ed5b7770adb5e3369a355b1e69f10427c5396f3247165abd6ca18ccb3fec4aff6f87316d97a656f5ceb38eea0ef539dc1a09e28d697d7692319353a549728be61d6ecb70b57f9e27abfbdf65c547758883b782a0712026cfc1995a71cf242dd40d04e93d1f59a586e9608562ecc60a50a5a1a61a5a3d31f3e578b67cc427ab72a74b74b3bc434a195a5b0daa15a15aad629aa9656d25683dcff2224f669f776f78cc9bf03a3f7d8ac191242afdb5e8158215e2590ce5ca2aeffe62ffa79b7756b04703ea7ef28a9ef539ec6ecfaf79b4a21e19d5843609d034a72002367cf837cd6b05484ec5cca20c39be0c57d0dc1ee92526fb6b298b6b3ed73531ca70fea81104c1b2b7955d4be749e40046a9f177b2b518bd0773fc2cb339d4d0541652271350b7efffc5fb8c293feb641ebdc15420a364f6e3a03e74e23f9248ea74aadb5acfd04156b9aad531d2ff8c2c64dbbb34c0d7ad33e3aa699f0639842cb4319fbde7a0d4d7e87e11546b41e85af602aba39e4f7772b9f3c23705ac1cfef572a4eb6c86e8279a7d3640c373ebb46a37c0a7d2816b152e954e5b5b9c7cf2e014b79faa5ac75f03f014f593845a54d15f600400169952bfd3cdb6f1b37865fa1bfb3f0ba101d6e240ca5b7d07a52e80679ee3fcd2aa166a5814a2a769182f76bea739d7242ce9d4a02edd3b4a1fc47e079a0bfc3dd0a947a4c563eb3551e311c29fc1683d7bff69100db700224b75c0fab393e58cc4cd10bfc5608324842b3cab0ebae58c956842516763fdb15e1d1f1bf4051b4e7bf88235f04071caa5db65a55f97a73e193942f52962f3b265a85ceaed21b8443bf634aa5fa337bfcb0aabc59ebd2a002081a7c752c27c89015251080f3821e2b2320f3f068dd923816fb31f2d3ef343ad44e676bc5b7d9c9a090868d9959d00024686bf3fb6dd9b5db96111921bdb8c79a118e3a00a9d54104ad3f49c6d28f13c6c05300eec85d923a41e3efa562786d422df4bb76917ec365b9cf7ac1691284572d04cfea95af598c079990d534172809afc809f8f8375d46b95cf40796ff94e7201b79f62c7a767d5181ffda9c90d75047c96cabf0db17972be63221dda397f72c76bc25162fe9d4c66b6897507bc975e2ceac3f0233c80a45e11ea22e865f0b8118b12b7854a74d54247eb1e2ffcfcea6535a407d739448be87e096e7b9a366735f28bfaec1e9f136c2ba01635c572d5062b1e2cf7c60429855841fa426864e0da63ac6926c258c9f7cfe010c042ad26d92b74ada69c253b2bbcac24d13d2fe10c17f13da4355897621abf55e1d7d64099ead1d733c75e56aaf851589346c1061014819f58445671e94b228a71ad0d2921f4a1f4e12d60a07ae00eb1ec221ee8beb18684462c6d72972d2a17ee34609cfc336b5b1774e33bb5624d45a5322f5b2c22615673d6bb0711f421db2fcbeba54345423bac4e55627d5066fb0dec273ee9fcd73a1ce539ed8b835ae003f8da2b0c10ddeab281687534284e3d6b954154c330e4f670b091ce206aadb5d7ee5d0ff71d937c3bc7e048ef25138ac829938d8051fe3fd701a72c18b1b62e1fb91de13e6ca85122a30c223690cfae96fd323873e460aa9927a8dd697b16726e2f087248f59aac15a1dfd5e9c2cfac0f9903b300257a1eff20b56e76ec3ab7f1e61868b5809246aa9d134750e8f016f86debb88dafc95175b3ba61e31a7d82cb8cdb17b597d455983ed434cd3395d1a55681902f234817d6379f06e4146408e576bd9e972e69e274ab56809dee80ca86d4160438765617a6f2d8c64b976a54509817dbe8dcd9d045b0b2a29efe08eb50b1ed87259381ab61771068531dd412ab923c41e2ae1bea859fab021c51f66345a1a6c71e96191eae323fccac7473b42bf32685afc78aa02f2ff15a37bbb38a8256ed90b8fdbe04974f201d6183fb671298a802e4d5a67c84cc757678bcabae89a57a48887276a66493f6cfb76ab1194fc8e538bd2eb57fbae00e30f888533b2f6d88b03e174d963bd89e52c81d93d6dae31eadeed6956f4699a52c5221bb5d3f1c7ecccb1beb7a05fa74844e982dcdd94ce8a82bed230d247576142cb2c832623c8ac76a584315ed8262cef5d1e6b530143957aa5eb54f837f7ef06c74116969b68664d8239a3e70208d1615fda7e30f7a644ee1d3133ff684515798f7cf2cec03feb0be281a111f7eddcfd4adaade597058e5c7ed6e60db4822c563ddc4dbb3f6b1559800e755fc56cd15c33b591da9f8c05cc77e596cf2d24e89a8ea4bd1291199c7d285fc62db1c90e5ae3f48d71ced21a150375fc144779d648a55e2cb3352a76fd218f6ccae4fb549daae6c577504ac89a223ce43f7e2d6df8bec8902830871716e602d291d85d72331fa122185d384565fa0a6f576d49646dc019ea7962400cdc2309ebcb6f1446aa5e9b8273612a875e79a6ca30cbbbc65c88253f022fd88281e23d95fecf01ac58b02a72f39a13a6086dcfbebfebec7840cd9e2a90f7d1657ce6df5aed7b44d331d26398b69996107034efca6ef3e87f179c54a7652d9a1b50ecc4937573db27a09f21b59b6669cd9f352a8541eda1ed7caafebac0cc8c4b8d6c30daae6fbb4b7db65ba81e875cb7835b3f6e4e4e8a31d429be170c1df2dc812c655ac36e4f31f070d401bea9881cbede0c47dcaa3080c7529daf4c22af075f912dd75571ef0c34cf8003410c585c3efd9ff0bd265caa62db9ff2a4752e8a54df78e5c843f11505ccc7f3d9617b6e59cdafc2bd4ee1bc778168a22d7fd3515c63472ef127f7d04cd12ba85b949df017a9ed29557b21d2beb4c70e75c3cbaa29bc5a74336cd868bf06a362bf9032be06a23303f19501aec590029a837dac50bb2c3c8e502ae7e3fd1243ea9d2bf04d718b803e40de934590cd25a7913709bf7a4704166388598df125b5eba883a507245f49dac7cbb18ef3dbad55e47c7c70490a9261777ed4e86dce90d1a848c558a7852b3f3c84d7bb094dea34d730dd332d0616c1870d3499da4e2d5ae4bddc326f39214b225dfb603597e5c97d352dd4100699a288821baeb91b1b3018dd35417efa19a18c286a3e1a76152878636c7d38d74045fdd2b286f676baca0481a53e4c5b405c90a3c06d4228dd6c0423a2a77c39ae5eed7944fb56b41c0f4f0a49a00daeadab76c434713c24a1b3153e1b0b909c3077dbe52924d2cdc8897ea7fb5384e0f65546e3227dd65274eff3f88455a163d2d6613a865867b6d4e17fb09c3206d0ab8e7d6409da1c68eb771443d36f50553c3caa1480d84272358e5da0816727fe09a88e69717d7c6ceeaf67e8d9d4dc7237b7d64450c7ff57a06e464f7df3bd26c8bad9d3b5f8ad9b5edaf25d6177c2f421526861e27e2069a04b437c594b667ab246bf40399fd3a056430742bd513d1123e40157338778fa368ed3f893e31813306719f58e33943c017462cd5ae30795b2327574476e0d3a990100bf789591c1e64dad74c0de92c8beefec3a58c84912b119fb576434c9c95378e9b75fcbfd77c5b040d83abeb66014cec6a579d0123e13bf1e0f6cb95fb43c5ba2c062d7e7dce9486b321fb35183870547ec65f0f82e1c38098347168af46f94accc202bf57e2a7589e2e54be3fee6b6f21727b6c461b8c112a5b393bfa05c46e6b3040dbd2e58dfe1d0dd27bf2c3712da7cdb630c86f8fa1b7117f37feb07bd988dc181ead4bff8630696f0db8fbc92353d88656a03fd15884b860c40efd60631d395be1d4adfc620486f507efd807593e151e431f4b8a3b682484dcb3dbf5a949d1b9bd26f852b6c46716315fec27923d23252473b3537ed58efc041f51ece065907097ee1a54a544a510f43009636c342af65345e2fb0c629804c539d7e8166bcc53c07c625668a90290ba144f0ef911f255a7e79d9db631e2b710c53ef5f479a9482bd6325de9068dde681252d255f78214ffec08d4128f20c4f5367ce07f8d538087dcf5fcc4bdfe944de287e4ee3a46da4b06e3285f7d6bf659548801d266fa1c4224e49b4f83d70714734f9ea6f1e3171e0c24183495f57298a8a46b4e4581b6df3c9801655da29c3a3c9e5edd43e448da93132dbe4bc4060131bfc520286920b15a66a245caf32ff3febbeeec780044d9464c42afff252d55448d1ba8e02faac8afd70d9fc3027c828b9fa47aa8eb297babecabec8cd574277d9db6e2fe44b7f064871434de1279bd5efa3591da994764962be5eb816a183e5b69a1de2d700f01b02642ba77d5b899e38bddedf90fdaab66f4172bfcde3dc6b1ffc5e7df487c74eede5b24df6d33264aa8529871e5a1b71f688c326c08af9a068eb0c207de14e6e90bbc96173da2b8ce756cf3088d3436907b0a1b95158a791702ef040f90190278d56a4e778641152449383989e6100b3888533c1d551b209478cb5b3a28abc983fc9c2ccd66ca3a02c4481be680a1a9cd21206f5c8d38e0373c53371ec0b6d1b6c381d0ba41ccc52e4633d6ecd05838a15d8900a8c523cac08ec754844dcdf80c0157e6e744c367aa46c6d0720a6f02676ebb2ed0b16d8239cae02a03642096d0c9e6152df95f2c7a07486f2f7a9f86146dd1167382cedffb2f4d2d7c6553505639dafd94f7d88623052503d95b46f9fb32b98d126277b3da489f57514cd5c2cc08818c150291cc2f1268c678c03634412d18dc04bee5a2ef2b0da2725206d2ee0871879eaf3799c24d603c19de4e4975e91f0aa11663024a3f7acdbd7b8cc7f26bf4b1a315ee19d3cb577320b64a35ae4cd009d036834a8cc6ac92857581114ecd116103bad1205ef6685216a2d6b24e89cbe2fdbb6b0e76e610392d9c34be57801f882e20e231567f1a8cb4d4e9a6cc5f610c9b5b446d891d4abc7f7d9797add0b76b2ff39ff491b940fd579231ff0c43688717a5bd39ebe729e2b6094589179bcbec3cf95f34d25cc97fe5273db4b6229295f5ae7191583891a72d21725eba499b8b9754396e273edc6fcb51770c48ac22cb5a28c659eba76600429bd05d3328e686b07a61fb7c1f86312ea86f0a220703dca178ab5507413852d3641e2a404776c85842d2cabd1dd3e45f01163a27d5bdfec6759584a59bde1a66acc6a7bc2200725351b9469060c2f1010df26d486183c916874d4b7bf0c9756eb5203e35aa03a35d25b1abe2f3c73478e0af6a9303f54b47f21d46d8b9c68a84a644af45ae7b57caee97fdcf2a31826b01a5e90b83259e755e96f03797d36059cf02613c477d791ba085941193ca6ef794f262bddcc2fe65437d5183845c74684541d7af42f8b0cc3dd4c77ea80ea009fa174bfe5c3989c7bfe6d3c59f689280ea3fcd6211429033ffdbc449f2bdcfd7eda529949cb0dfe8580347003776108e8d4baae457923f4196d03b9027eed975568580b864a0fb860360e2f8f9e21910af7cf38abae5a2f8fceb8b2b3a595281dfa5b5ce0d0e79ca78b19f0a2ddfa7ab308fad1460450e112ed2c2546ef5547be29d9afd98b26e0d6e7bd4d1351e4b35146cf3e288d35ed05385f9bdafdde550832efa5319faca4abb3337e5e2f87509d30737737b553870f26d60da5a28b0129464a42cdfca357c9f7940e4c929c7c1b28c3201ad8bf5aba645a54446214ee07b5b72260280878ba4a4ea277a06fa8a2295942647bef4fb32ee05aceedb5bd6efe60040dd945aca819d6bc4c633241798039e8d047b7e45f69291fb8bf68082d838e0c406cd2a7bd84280eee66f3b1af3230c31e03d1d1b3ec8fa5c9d6bdc3b6e6cd78fd3aa101e606acc1ad4c7d3bfe4877b8fa82bd9d8c58e0d35a999c625d57a1f170d497dcf803df790dee2490a8f78684cd3bfee00fe11ac4c3c94e1be980b298874697b669d9e2bf978c382a52e8b963bf2bba737558157b30aa3b57fedd718f6dda47d1af893dc62bfd8348f35a3682cf3fd92fab29ec32e79cd5ce486f6980d4b679d6c2871705bb8c2200f27bc0c806c9f1c08806273197921ebd3e43df8b838f3d7f17de4783d9ffecac0cb498f6efc42a6be4baa3a31147471848845fe642e531ca7c8e3b092c775cf55c6d154b861bc99f8ec79ec8914ecc7f2a8ea632227498d33a3732b7a06097a083c0847c345b00c942918eb65df16f659c7c116d9da5e41019e816b73f4bd3f8da9a51701b83d3be5314c8acc9268b6218028befc41f24c6a96cec9f711d518f382de82e0b4c7a181ed3e0b50a2c1f9576d006cf9070e0af78bb3c688cc1d79262987b69d34cb192e4d485c8fe9b4a32079fd60b0de717990cdb1d3f89f52c62b82d34556c2b25f601e7c21e2fa5e38222a4b5cf176550f5a1f7e543ee6426828db57fa6a905ccbd8fbc6e685aa97f4907654b9c78df37b064130af52f8ffc0a4dd8b2d5e2e822a1b0f8136cfd72c665b1a61bc2fdb903fe08e6035b7f73f834cbfd256dbea9269ffa27be8d18ca374efc36a78b894b4d0cdeba1784298e40f58c0303e2ac3c23cb6fa7e3bb4c76f0246c5e02dc948cd3a47c807ad25b2e1a64dbe691ab550d189823c539f299e4dc7950ccde537227f44c18c9b7df212a890ef04a6662248e7955c7d7e8d99d83073b96b3e25303df7a862ea81612963e139ca676dad938ea30e93d43e461a7d083d42b86fe551a8d2fa1ea9030a5831ad18eba60dfc49a639c95942042e8b43306c31e3f19d7a20bde2349276fed277a72ad31112d0f243233654d06a23019825bb018d2aed8237181071a7dbb17e54301826345f16c93036b58e7f4493c0636d0ac965d5f2b49e5588085c08dcc7c920555a69face18201ef9ca52dd0a718616466a6cca05d1e808c0c96fbbb9ae6067ee4e94a9929869541a95edf4f1db0396b5159afa50473c43b2b7f61d1cf869b9e081ef182be230dc5eb9344136f8c637e79d0c814458eb5b53e8275b66c7c2f4c6d9a9190f3512d2c5b9c8e70c0472ed9b62d9a26f30cc8d72f96913a6e5570ef63f432f164f9eb21ebb7d6ff22caffa2e7d64ace550bc42ccac9cc6a647e4128eb9b3973a426b1f58c73717ece40e0dce2fc3780b466630f2b67e5dbc7b7e58678c5668eb40476b074a7633c9274e9f79867914abe67ee20f2ef437b1f90aece9fb3dd376481edd1ad4cc4b00d95949ff8310df4010cf6967e6770a0a16b580c99d7bcc6385e927ed79fef918a5c288a4cd808e56865a5242cf85a969bf4e92607a310d947bded6961b8f824817241af7532703b3a09b1fdc37a72caaefa0941d75a9e9d8b50344ebef00bc1f873e824f14b0d2bd3b712326185b46e490a3339b861f5158418911f7f81b5a90095288a11225c011157e446747118d22cb8f3c7008b0bb77ea038dbe0ad0b72e189128c35281bea7791cb0a8cd486aae3edf78c3ffb6ed75f42a985e16d50181199e60e747ded4f99ac1478b4ae44d3c434206d02cf13a1302db2f5e4b47db413293a1105858b6ddfbb2f94e8b8a30332289473c27e729bba515366ed0194417306188ce86e585b2ddd5c7b07b7bb0197070dfa4c07554786208a9c790f9cfaa5a23cc8c0275d7a8be23aec3f4766e357c39d88c2c025e120f01ec5ddd2e0c152886c9e678a09b881cf96acaa2152a94c36404d2738119bf269b235b6fc290d825505ca522f90b222010b8515cca895b103faa869850ff19612e41a377d82b7af54eadd4ad5f531dbcddc62d3e136d9d07308c83065c674cc65b839468e60591a5c883b1b946f8c00edc01e08cb90db48c5df62075da837519d55d8099201eeb3cef4728357e67121c8604901f6f2e27d92373413277ca52f8aef5cd41f4775fc38984c597fdb52a41291547d3f63a41c1cbf58ee317acdb33177a020ee3edcb1b222b356285a5d9aa9237693bef6c42e978364b4f46830ba3fdf346b5eb9025a28a638459bbae512a1abc394b9ff3d93b58d76c7f33ceb48db590bdcf712d9738d7b24fec94907a3ea0450eac0b797dab9ae15bd6469560dac1efb568853c4f977de96aeb8f8c0a326ef3dd695b7feb53effb8ea5a2bb5ee0d8413c578b2f5705c07203f3530d5891555dd964902d9afe7a2afcda8bf56b05d7035cc4457fa86a177cf5d5b2f6e2f0e3e74bd514b422e1a6c24ffa173ac6cfafe092cd635530f911950684f22bd11d44a9a5a0e47a374c306481e4ec4bc744d2789bf21b7a812d4c361769058d5a8fe7153c59241b7453f7bdc631390810cf4c1c29f621f2bed412975ed31d079b53259a901638569025f2137f63fe9f4bc5a34a58edb0215e9413da4f8b5b3f888c84cb9e2e4875f4a49b91b4e9c30bf3192b423e87a67c7904bab908089f02528b440fa4430ea90f04720d2df7885f15384bb90e7d26f2e5bd8ae22f311ae4902862f546ca08950f71b048cc17634ab6914d6d3b052ced9c61d7d16ad907be49ff91c76edbe5e795790f6106c4db880818786c246e3f5c8b8e4fefe2a2855916a93a608d2b5fef174502c6e4e005c5f662375b9e9fbbb353fb474644f7b85c13197c071bb175e8610becea47c2fbf45790b6cea62c9d40ccf4e89f957cd76d00155a442749c3400a4bb27f2064bd2e998a71d33a4cfd784fd059fde799b8c00afbb47527cc660c59cf4265285e1ad7a88c0702c45eadfc1662b3ee04b7dc3c2d5daf4c8d90ddfbdba1bf0eeb813472d19f29500c272b32fb461a2ba642425b5eb441465617c120180b33275dcb392eb412fd0929cb4467ee65e9d17ea78935b5b69af3f3812aa3ee4d8f6b6971f3ef7bd8578c3e2ab1df8d8606e9f8777d00546ce5669def31b8d9cafba40da6509a5879af8978e0da130f3b4e14b27eb003fc324d8903991e5e68bc0432a472a6ed526ef5afc3fe64a9d84bb420df12926ba6402092c015d22bbf0a65a48817fd28553a45b3a55b216d43baaed813851ab5e371aad04385cf8403e39fc12638fea4019359276e328785c770b440c9f0fe6815134f04403738e328bcc84ce5ad1811128d281b2c493e8077d02f9f0d7433e9564c0dcdb931ed6abf432f77a4bddf661f0d0bd5ecfa1eb9e9e9db0adfa291c54f12cc7ebed36f34d10a51f7a1349f9dd8e2cf08d5ff3a674a997ed25a7f12eed9fc587f7f44ab9370c92a6493c7530c81c381672ef28df19fb9f5e4238e07bf9bc169c77cca675c22ccfa4bfe7045509fc8d18104965e671326a52daa02abd35b036029067bdb7e047cb418e1b2bd3d020d10b9e0f704d116ce5c1a6bf3577e1e35c4ac8858e8990883dff2cddbd9e95a9221d8ae69a2fda2284f9847e97032cfa47c28b8a623bcf030337f18083471375343765676b77282ac1c132c843ef300a92cc59b71fc4cb85ba103957ea6932dce1a86b111a114c7f77184c4c06bb6b1f10b644df4384baa9eccc5dee8945852e763316ed96b1b8938a8f111827f6a4d177cbbe2792e33abf17e28cc96400939f476a7d8da19c161c1e7a98794bf3e02cf72c86c339e48622069138545d0987417d0cb7dbd09db52e9193e7dbeefd45b2b3323f601956a24b61818414c104bf2d436fafa8417a963a5469da00313331e10254bdfac198de80e5cac20c2dd8d0e5b6a19eb2fed7161bc57ef35af994ae35e7428048ee53062c3fb98e143dd787e23933576e7779fe3255e8364d5d8f39adac2280fbd874c5ef2b2564b1cc96c9b0d77259270acdae744c7b1bb02ef02e50bc50b5272c421b1ae09711a6c659959739cb7c91b6df5e380ffaf4f9d1b41c069146a2d8947480fd1dc54dd4ca70eca6dbbb92e91a390b2661dc6ddff574bd96efb6f128d50bab329fd542745e1da4c31d7452777794275951c661ecfb656dc0156f4e0ff0541d04ccf3b114eb9b28c67945dc4d6eda3910c6de49023d10dbce11bf4c61609aa7a57ea053960f743597997f8e68c36680a9a913de646a667acad5d54ab2c8918c59372046230571f9fc7b915aecf9feea79d757cb65f3ce8a5b4b946cba02ff3df48834732460985b2d7f3ba76d55f27390f0e03532a50eb64e053fde9a79f3c8fc9ac7ba111d49abdc37cf3b559d1bdd5baea3963236df8e9c71e659105e94ac68aad594b7373284a04a5f750c3116fb9a69dcdfef41fb1d573845c8e177ce809e4640a6af1982045c656d0ad88b5f0cb364db758b3d2b7c73207ea603229d7c8f6cedd577c2aa1a3118140c3bdab8169c89ef0cd1b182a45f5a43191ec8e03448327879f3a542318f49d395a6bad575c87350f91fdd8009dcec4a27348d687930aa95edb34063bb72c23c667ca05892b2f0e6ca33bc85973dd8663045931e233b8029106594888e62835da6dc37ef32b4b48dae85631f0d6aa20e10e8d6675480b0658829ea1696168582de0b94d44dc24baca2a53000c83f9c9103ea4d5e1b60436bf28571bd629b6a481e4b74a92144b41f0302ad93779a90d014831a5f7a6170aa011dee9bed8eb95c28929e5a8a666020eb69cf39401ea982420a14442cbcb3e0536da1259c983e3ad46bffe8552d7fc833a42a4180e3bde3c87eb9c19298fbe520bef6abe8ebb02459ac37d06522f2d17d42a805f064c2235a3f390130c02fe6c72dd22edf6d2b9d1a9945d275995b97c9eca579c2a6d1ae8ae252529245cb46d4bff388ea0ac6a0f662388348077b90362fe71dc533f621982aa6e5b54a89937d431ef4dfb2241abb4a180914ea3d33c3dad716fe0ffda5fe0e4f16185a93e97776d6b5a324734f01296f484ee28b4201bdbd3d7a5a21f5fabfc9c1acae1589c69f7056545d4b66fe39651388ae1ea127ea9c53fac65255874ea14195fdf0cee39b594172f9be65852afca90a218ca516e0329ae08da4f63931aaf926a5097adc767e7e8f6a7d6eb7cea27610f3aef7d27dc904197d8b0f50f9d80cca3a5db6124ed10bbbb3b6c48726f20277600c624e88ced88b3023eb89686390dd10bbee131019ddbf430251b402fd8969d4d4943638ebaf14ffcc031b45fc11ba7196e20337216f796ce7995d50d491f72d9755246b17f77292567ac3d312939c77a694df679e3538fad8e2016ada8abbbcb47757d3e3ad7ece785aaffc3af281f5eb66e4797c6b7a5de8df3ec2a0fdb9bcd476c40586d4a7a9ffc60af9516b6f8de343c4d5986ece3ea9beb552f3587a4dde0f791be5ae9225b08793fc68c7aeac507680e79aa59b7d62d8dde6f0d1f01e5b79dea0a565532e549f281776d6d86be32b699a55d9ed5f658592514aeb2bd24cad07732638dbd2de149402d512deb31ace3bf78d4799f66aa16feb72474684aad12cfbfbe3703e7233f81188e5c151ca2d9b9f66b03fc626c6c9f65e8f257e6d82e26952aeb3d90abf44914c12f6fdf5767aa4e450d6a4c5bab98f7d7cd7cca6ab8b9dea7940e2a0bbfb219133e8c7cd811c726705b6435ca064701bbefaab76dca97c0ccf578906319c69ccab3dee7df63141aaac90877ac7ff3af7408c2738f02069f93ea6b3183802cf895ff87897d3ba28ea924e05bdde2fd2945d526f37d31c6b85ac82a85fc0c5ce844c44dcd128a122c5f8b96cfebeda2edee451a2beb5a24fa98a37665a1808a3372e8e219aa97dcbc35cb72f32dc0ed10f833a3d808b423b8c9fcf00d06a1f364492ca6065db47ce0d471dd5d6e1954c05e2be2ace249e7ca14e0a906a10dff7ec5ad04451635feebe0703eb31210ab1af4f874059518907d6fe4336a9aa0a2854e5c8169f74c38f8136d75b27d5f713ca86fa0084c0f5ee7a20955b08603f51dc74392f4040a44d8cda673121bce6881b92fef7c5d9e1fdeb62ff9b6c85a66c831a3e08583a44670fb51b3d069698f3486c31689140c49c03fda37d93a3f60fedd77368c1eee53c089064ff157ba27c8b54d9dc70e380faca32c3f31bd9a88a9b50ca78b8f675c3ee661b9b04753ef941c307718e02c06e7a394dcc2ad2f8431da0e68f0c00ed2d0b122fc969e7aee0e5ad1d45cf5cfa733de76b03929dfbb95a54923d01ae59c70cd396f036072dedca22e91494ca274f6eb91d5ea59eef71cd0f9234a5d96167c97383681580f0b77671c42ff1eb4f5ae58dce6fd4b82974ef1eeb4ebf574835361725a4b3a6d6d73518f37353f679b25b396327a8324a9fe27227d1d30d3d82aeea16b806fd17c2d677ed193e1cedf0945c1ba7927ca8ea54eb066eb6c797e4e5af6d525ca74dd0aef458177767ec36c527f3d1fdb1cd47cea23ed8acacc0c19dc982331be4119f3d220f1e6e73586e43e5bc03aa37b149a11cfc54a870c67aa8fe8e80e8719a5a9338d23757dbb5a336f656a91264ab4f71c9507be3169b81aff68a2c7b54e54b7410a5a4878fc229e7e2b9dbcbd7d9f0074b097b04b547b041990152d20f61acabc9a17801cfe0dafee2deb13787707030b522341f1eac7ff7baf83ebbf2ab56c940a665e687205f8673e73b6651649ca6f2b4f0ddb4e4ff3806fd1e5ef5409e7f452cdeb0a0986ad3bdcbda5c1d8a6665b0a1c97b6dd1f2107cf86aee4d749a231bee0c58ce2b9bd51f10b67884eab122843963886eefcc0d9ffe8db9c06bd0540f9749defcc5556f960f4dbeaa791ba1c1f3a961736f190ff794dcc18ccf4f07a25f9806f8a3f4fa7a29ba328762bd56e0b850dd18351f7a4354d525518fbd4381387a8a6a935f9961539ba0e7fe48f78a0dd1e6d8acda0bfe95185584babc85cbe130ff12373e745df656d1e513b4272d9e694a8fe0ab2892851655503c33c4211f5a82cbd650e5f59a66a9da1e743cb45b58cdeb20175881094abea0b6aaf7ee627fcdbaeae45108d67c1d34f7cfea01161717b88c60bfc99701180d0304e4b0b6cda97a185e87162a18a58d65e2cc6b6318af342399b1c4f97c75429e3015e9d347bc99693f5b0a641309f3656c488001393d39a203ab7a9b82e86d4b155b6d28cdd1dd48f7bc509026769ec0c005d9f8a45e5b8c690fcffd3eb49e379d57cda3f2f1f00ff3a4b003d69badace042dec3e1b87ceec16947b352f34ef276b1e03803bcc2f3f1e59c83dff607c102edfebb76dcacdab7534df73071729e70492b44399ee65e5b1c6e4dfde7d491dea705b145d378ad1294fb7c9d48db9f65ba9a0d68cb057aed17565bc5d6a18d6b8d5c52b84a1b389efba3e02c178a2cd3b92e9f9f18eba98fab96b8ca2213e3f641610bc34e1b5d82177121856d62f38674371784ee7193aa41c7e94466f0fc3315668662e1a81ca45e7bb7e10c3038d9488aec4f025e2d89f30f67b2e5ac2b7caedd403a7740b8a1dac13352378e4cf4cbb283a3e07be49a3fd90b550606c989011072d24ec209d8a2c4cba8646338fd4fb79c7140cf4ef9fc67ba262276e2c39cfacb871c46ee7a01e6c7f052d2dd0fc59b47af32f17bb4bab60fab62076176be2ae96692c28b5c85cc0928ba2cee72676587c66225b065cf0184150a110bced64a945ff33d3b9ecc946c10b708fbc0be80997a10411aa67c6ba8ea63d728c659e59515b3b353fc0cc7ed979ecb2c30f5bf07fe418d495001d621bf5369cdaac39f95c380e794643c26710d42ddb9bfd9213d42c168d000ab96167a06148625bf61ec69cc3b0da8989e42487e121c610549667d3a341726be53d5de335f7dd5082781e4a59f0ba86bc7609b1cf042cb75e162ec040e618420937201d6aba9c1342e90af2d73093b067554053b7023ba3ec8b44f1775907cd769801c8be928586b32e924d5fad9a3a2054b9cd267c100a69a7b3bbd9167a54faa54dc720532735165882ffb4732b507fc6fbc52bcf4a9a1b5e2b5adb62c51031eb97ce65fdb9a403adc3ce719bea253ad873536afe895d97dc2805e33d6d6777fe061ec5141d67acca36401a31499da3f81555e41a3b9b6edb50a071fbb6484aa6e1f51aca7d46247faae112f92f51db5e1883a5794b4d764c311e5d3b42d693dc29746e5c4eb3b0e0bb58cc3b1a335cee8c4b115c8e8bc0e71e0ffd51c662688825d5812334ff0c17657ce706b30f6df09b7dbc6702c2943e485adc25213c74b0c8671fface98bb47f95ad0535bb9267531cf043c07a37b2652dde59c1802217916cf0eadce17b3ad8c2f0bbb14acc4a8cd841d8db82687576482213441ce9b39aef31ec006afa5a280fc8633dd760c7bbf937a87f04b7b57ab9e0d34faadf7b7202e8b558aee0fa3fa54fe723e66ecf4a60bde90a9d56be3ce40fe805eb1e435dba12b88cf47f2867bb3468742aec163a96ca9428b3f9462dc5834f897914214c7105836988450a5cc963c4b4de4cf78a4b7d2e7522ccdffbc4652679ce216047b5b4d4e6cb1d78da0dd5795bce4fa57b94dcfe3a732dc01364ed11e2f3ae5ceee729974090873c20883da59f0c0f49c341505ffd757813e4f5ea5fcc0e167489ef107849314f5cc4e84d7e457186fdda83941a4bcf093ad924f656afe9f0dc30f7478afbe9a9b31da94eb332da1f50b9f0c8da8779f99fe45f24b31942d47d1bee9bde42d8334faf7d3aeda400488c4046cba4e5eee58e18678b9622811b1fe6f8b98e89366691a94e6ac1d037798b6e0d7767aaaf4c279126f38686621b82949204f2cabcb253e9f85aa8c12eaec04bd6d0f3022be0470cd43ee6fa30fdceb2338ad7a80c9b97ae148e787e74a1187c9bcbf2ada7f35ce6ad16732beb44a47cc2c61b947be1f99534148a70319754e8e56f378dcab3a5bd6c0b9aa69e19b23b51dfa543ec54685966ba57550c601ce7db526f1a1d86754fb7b67752e0e832d4d80a1acac8c326848d73d52bf0bbd178291e297259edb5e02755038a15ac73012407014828fce2f3091e9039b51a5a9829debad6e38f8dfdb5575faa088397f2ecd3e1e673870d8ea2b0bd0e03c764af99c4b7d19b8382136d0b46aec9e40ee14dd4b255290c14536f1a1ee2501ec9641997e03ac4ecb0a3f23017f532a52f83278c8a24844c4247db154be1f56e77e8d018e8df53d665eadca22f98b8f00d68a6eb3440e3956a9f86e11c26b15923682df720ab03d922fbfabe0695a34ddeb209ec7a505792357e1f8d9670a2c05d2847f08088573fbea853a3d7d4062e7a8c0429b266eefafbec4dcf90a488993103c0585879dd600d8f01f3da275cb2ef20280ef1512d26cbc12dc856a72f231d891ee71d9d9bb4d979a134e1175a82f225f1e2a35c87c14f77bdb25e46df785492dcf42ba1abe6b1997a5aa3ea9e17a415597691b6dfd9c636575ea8056257524883cacad0181a5e3025f1c968fd5afc16b948db3f8b7dcc400acba72467d14ad0e369817a37ae9a1412469ffc504b77a1ed9ab7d0829c3ece06a2df31215641daf9452bfcfdb5128cb26a3de4c49b08ad3e8b8ecbf9330cddc62b2ad81e167acf6c64ff07b76fd1d0d252c03c328579df6b61d2d40fa9857595590eb03e0b6d61e67f92120e89e8340804f886b2147f29a1af37c0e29af51ead04d4b0350b6dc76e96f20c0cf29d9c3f9313471a296a3cf5bbfad9baa04e44646b7927266405d76331e9e5b65d720b301992c4de9a69d71db9f6201b1a507f492dc5b9d20b49d9ea0ba43c18f7839e377a4e7461f0f833336378239b4a58945ef21a8dffe6b8b8511ac02ce35b09f7b2f79d00bbec1833388ab20793ff20ba14731f2f821c382ba9c22acc72459b7c9eb11a0ffb410ca384536079f26b32bc7399bc27565ac1286c61d86f16cac3e52242302b2d5d363115a0a90f73c2e69313db2502bec0ed94965499002a60efb499270005adc4ba77e087c014ad7053fe10d42cc0550d04b8e7314b1417296e5caf33d48d68f03fc391dbaf4340583195105f0a0567851ce56fc0438e0ef118c6b683e762f1f9bb57e274dc540d1be09492b41a38a9a768d6eb5b239c8628fad5f7ad729d8b46506c41dfc8b83f226bbda1fd70628c7e3b9d80a2fe34f451a4571bf560ad39f93b23931db3df8ff8a24d7f8bbd9ca7d677399c619578a3db5c33f3f500dc3cc43ae172b9dc2674343001b41395fefe2b5057df6d01489f54f3053d9516be9d0066ae416ef7c75c4c8b2e48cf7ec65ee7bb4c4fa26cd13d6aa513d13f577e7019c7c82d4acd6c723b4c617a8182efc3efa086d315156367fd092845584e618481eaa09c5e01d0d0716cdc9e54369be0c424daf9e94143c28f290e793ad713e3ba709e88d806bebae0b58ae30e6d83633db800c949de8a569ac5e4b26061993735399ffb5e0be56cc92d153fce9a1efddb38f36a3d5a5af77c9ae971f53a0841daaa6ecca1f9454d86373705dfed76857e49f1ac51220c4579ab9c61e27210e5ab688ecf6d978741a839727fcc7b47932146f567c98d819078e1e6dbc1978672a4e46dc6df8e1bc4514433e627fd4715c3fa084a58e003632acdc2c3bd4723c486794008d63fdf954235a2beb40e0bda1f2a43818d8470ff83c2a62e447ef4792db313a65cb6dc2167603ef7f23b987f2b0288add341a94fd9f12a517a0b9c34fb96291da9fa03ff5fd7577c9b0c8072095f6b2a8b76965a4ce8b53e740e48f73d561a60805d6b67d84ca2884484b09fd45f1c238696af57abe6c3a41d8805e6d9c99f69ae7e2d18ce38abcf8409d38bd77a0d1003a63dc63dab4c4af9940fe048d576d990361b00a086450393a60b3e5af57a5aeaa5d340d357f578255332a46d1dc2623655217d2b742aede469386f41d4ab9ab0e902956e0f0fa06ec04909b2f33dd8898e8ac158ab34d4b5f552c5a3273293129d11ced6831afa2b1bd954496484d159ce38f559846ce11e657a5af0824ed3657fb8319796816dd8ccc7d3543f1e4f6f2fb64258f9c323aae4899de092689f6dd817edce65693a0b119ef230396f9427dd3ab40de8a78d179232a264e2432c12721b3198b6df6d1228210d05c8551fe74b2f3aa660e9aa6ab3756eb83efaf33211d6ad09d0555c058e6aaf35c3df0cd9e1742f1af3bb825b6e357c5f7ddf6a8a49043af015428e129166609fcbc6a70f91e44759594269e2bd35bc63668d9d511eba5f808ea1bc7bb2663f2fdf650d7e97e0efe474541352a879204169337cc2c68e7bd9b0708178483d454bd61ad5446d5fc0b1464525d83281e2f0d363df0eeb21af470153a9d3b36b4c5686fa6285df25b8b9169dbaec07b82d904184d0c93ac103e5d5463fad7e2819f3fbcf015aee30fafabd89773847fa9c6ad7abb346a6e308aaccae6142ed61b5ec058973e943a052993a3a4c1167ad595e2f0d57aa03f0308d9e2b547a8626b391449e94ffcd10d71414b4c8857a1cb8361b2134879793ac907f14cffe48d40e02f5ad14669565af61fa09791a4b0f32fd971b3ab853e1c473a0de2207ac99d684116933ec61063835b490ffbe76ee8337881f2ed62db8218fd61b9c145eb39975a923e1db9077353e2bafa6497265f859faa7fda40a48b9a13b32f9dbeac2a75036da29d3d1d7222cc4d93a7acca5ca2c8dcafa4f9c708eba774fe03d76dcd0ea200989f9716d77fc9bae2e35fa30942a72fa9198c18d185beba3384467c4983c4c21e6cab055d5ad45964818aa2ae5acb33c2f7d4ef437e74b172f9e2ff8c023c3d1c2837ef2c90caa7eb80a35ff056b74efb53cb75b0c08623fe347be3c93bb47eb10a9aa4ab482708b0331ee4f42e19382849c85afb84ed87b0a0881928ea7279101f87e1f6295908aeb2df1341433a9fdc5be074a3588217d1f4462bd0faaf36ba5609818e2f44997f2bc7bbf1f9ab2c5f33e2186acdcf1799ac3180f1d8219e00a03c6c6b9b227774647cc5dd0cc31ad74ab45f61dc7385e18fecf8ae3a2c319a0cbf0900177bd2e0ac01ed8fc3b7ad082e0c7ddaf5ed7128c0f47387480c1ddb18834f93208a1f35e5b1c5992c881e578ddc34741d1219db90c6092fae8dd3e980a1a370ad12a9836cfff3f9d864d63c45aa4bb18f1916641c40d8a7397470cde6380982715e6a0c04fd2f7a60240e77f8af86d73905c633ff39a311c84ee6d472141a8c64aa1b2a0a32c3c457f8236136244e76428324a0789c1198ae0a646bec622518adadc020b53d4e4b8371ab92567f80ab7a0332c3d9e239a90a8f8b471d9027c1d33b6ee2f1a622987671e8f87f9f87b9d0e230cbd8711d1e4283d79659ff32a7f0ecad4ec603edf002093a7f1fa10c02462ff94f2b4030a43b4bd082ec0bf40ce6e01b2614483742d64441a5e3fc2b09c7df9202a8c01257f12795c025f633cae8158ea59750c07a13cf16944ff1ccc86ef0fc133bb471dbf22eaec92c1ab5ab25358b3f8f9e9503a4774448e683f1f235f9f475d8149b899b3b327ed255e6a1df7b2428e90adff686ddf21bb661a409755466748fabce5617d70cdcc37600173b7a6a3b55f725a2d93984d5c92f1057299aa9c608ecc1a4e84aaf1244e45e499788728631b4f5c8f03b53893a43b4f44bfb7c6be86304707a16c6cb4d6946045d9500b145d743419fa530f2e8083e76bc99b42b07944e4352bb46ec3608f0037ea2cc526e2581f2ef1921d0459c3e4be5cdc01ca3f5ac2a2228433c82f27a44c8a61f13e165d0410544578f1afb6eade40c9891633b8f3e67cfed196252113dafc1dc9a1ee0108d76e7371c816eb278c5985a82de487fc5fcf67e51768c02a6f1d43f207c6eda827889309c0462bf25d5cf4a594ed4bf927e5ac056e8c8f23c44f9e3d651ef169105e4afee3ed4be3fabd7a3be573790e1c9fb3b0f9a001f86da9451220c4dd3cedcf4644cedfcc65ab1ca679c16eeb2e14759dd4116e526ba9e0ff87128ed893fba3fc3ee41af1a7a18add17743f27f0096b10d8c576b8f1f791d9e6821d9256eadcd115d521e19147b42e53cc99acdb096f4a0770059ae85f37a6a3ba57a874925e16b1424258cde2ee2f145d6ac8697f9d09c3830d0cf2b775028259a8a637590b6308713d726137a84523fb11cc2c1f19f35a1372ec231a7bc12f57e3ecc4e2517ceba10e5b497cfe0ad5805226f42dc6278e596921e54dde3fcccbdf9725387c5d2788dfea52689669fabc3aeac66037885a73365c4cfa37f49a34942a4a52d4a90005124854ffb304107cdaa459578ee463a20b2cf0d4565266fe6df1fdcfd2cc993b24fe22572128cb260f5f7d13cffacd847344b6e35520dc074b5dc1f5227a1bce2c246a84e9e5ef5869126ca0a59f4a98a5822896fdfd73804f4a771aadc75f559f343b3553579eddebcc4a391485a35a7fd72dc939ee0689064f0e6efda35bdde2a8e359cc9ec9a3d16dd76a3c0f8b109c477cb6d7145a7b793afe2607d9a3970795a5aab187900cca70863a83228b9c16c7f37a2a35425588d03b5b2f608d0e706d259115755fe96547ad398777fbca731af57074cc84e062c9235e5e70bc1087b0f89fc32ac87684a22dbf5e34a117e4f970db4a4a36d0dcd64eeaa132c36dff49f78ef050e4ebebc00a9567deabae410c395b0f5bfabe5db2b222533a6a490dabaadbaf8f1bfe233cdaa6c1a0d2b75a5d802abe8d453d5bb789a5cfbf1da43564bf6d9509ffa82b797ebea170288837c8cdde56bb05ae37bfab6e8afa447deb5f37d173b256fd15601e0ae797b28b6458fc1baea3af30b1bbb813ebdb5f3918e24a930141fbac13dffbe4c28d7770fe8f2dcdaa180f9ea6ad874b5fbf933701f3bcf625eb63ba11bb071fafd8aff0450378be226de80165929ef08730108959abdce60629c1a131988a04d664cff5b97d2fb87ee000630f91ae46f2fab5977d4ae06581ffd0f586a1d28c15e09cf96b51afe78253ba56bfd923fb62c1661838af728063ed1ac1854cf380a9585b82d4787a8357f9debe7692564cf67a74623234e3db3c4e88fba5d1907df367196aa98e6973dfe5b9521f3aba945e105605270da27ab22206091dd157dd9107f88c1b563c589060932da1af8d16119c75a4d41c7453a68dec8c8ecd29c1d3086385b9cd451c86ecfe1615326b99719a96b27e3f7cf76d874ba10326a92e5dfd93f5f2df2caf10064b232be80228652dff603e715f15c96795540db4796e79bef7f351ce20c6f1c1da20e0e0943c120f5bb52dac952ce237f12a25f2eaf7f0c6afff66a81aec97329a3a8e9c18cb8854b23f6698522cc94d6d548edd6f0b031778240cb357a6052371eb9be2468e934fa753ffc07ab97530882408d394039f9b3e6846ba25d7de8bb3f9f36ac5e048c7ef04f2496122a10e3daf2fd02e7294c982f8acd6fb8b89a3b98f46183b3a84fb760a8b13fdad8c03ca7baaf7a9a9da78a9974b540a526f52fc9ec174eb8f8ced563033faff7003ef16159af62fdf63f39b4d90fca106c3f9bd81d296d008884908687a82d8021840eec0bf6df4dec6467ed6c891e963dee737d51a5dc01e3177e06b99d6ea7a185666451073472659e720ee612836b250f9335606dca288fb3d5bbbc43d19988117ec9fa8037a02d15aba49ee825afedd9d5952075c01fd5365908b3efc48bd6cfb360a96511d65c40635278fc2015bf1546bf14da3bf067d3dd694b2cf6c2421186b626986bed916498359edc0fb530d145111224374e10e815d089c4227aa1fce51bb23b8c5a784a9e904656b961fa8e608f064befce60ba2d4c42837915ffd232816c90810557630110bf05e1306eae71d884fd6dafed36c63859e9b7c67243f841975a6e9dd6f4913f25660494b5c2844123e8f6f830a4337e0c1d8cd4ff57ce46f14f21ab8b0964f2799cb0ed69d3f6a7d33bd224b649e844d2a34390a3b81c1361a705de05506e199f35a6388ec88dfee82488741af5123cfc7aca9fb2210815ecbb63a37fcd8f7c45f58daa358515a692b2e8886158820b53cd74e06d1d88dc1edc6d767cd51cad9a825ee547a58b54f56f779bf91f6908f4916c88140e75bf46896ca548bff7de2263ba7aa72d87357f74d487c7dce017535305ad80b1087160390b35056e228251665ac7f0eea5ea495da4171ec883363f22fd6a67c5069b20bcef4e866d145611cd4e98fd0f88425a7b2a74f423b13d214f566001fc7f67da3d78a9d4ab96b7202cd1f237fe2257a0f80c12dfa9cbebfb4c371ea7e19add722b337c446c98cdaa578c493c0db35de7a95499b08aa74234a4370a116f6b7026494561a654f79f42bca865bcc35838ecadddb8b257711bd2e6615a1ff6621e3931235b105cf742fe45d55522654d8a8db9c518089ab76039a663ba8fcac00f9b2c2972516da051e43f5f1b6b4d5fd82e1880f4b4002543a50bdfd4512ff763234ee48b4a5d50deaa20a96e39c73931e821ee6c963637e6daaf333369d0734d69f54f7a86172f4c8ac249e7ffa717e6750c7a693be53a6c084a1f843e1043dc9da49e7e3867095c338f7ec8fd4c803ab43ebc4926d665cba16c4f9af203e48835447a3f017e2154c0e9a5e739c5966c7747eb10f75ad75ea5de7701ce8448d5a6132e520a52858ca4a02b76ae1dc1cbc17c379c9b355f22bf7da0a38270dc35cf56976afc47cbffd6c90dc731286ed960b89915dc85c83bf44343d4eaaa5670a3a5f8ad7ed4d2e12fd7e7e9e42a37689bb3e6d35b2b9a0c472adaa171f3939da75a491cd36a00ab7f96cf817b6e427fc067ea6f1783c702b74073daced0820dfb19b2fbb00ceff59b0e7b1884e88abee6f0737f6d895ed58004328aab2012bcc8f126758ebb915056f8878bfc948e9fa9dd9ad637ec39da5a4c5409367a92c73ec10a5b9780141d03a72ae7899737ddfc3852c55a89b18680ab78ea677c16d5a0bca51c5b54a2edf29e9ce833799a516b1b3ce76af28c3bfa026fd3bea2bf77119436cc4c4fd8b43707542890e270311168aa9cb14a632193a1e7a500072e35286870c6ed83150a1da13365e16fe7bdef63f87443ac141fd3573d2aad56c05ae01a56964ee381668244fb12444f452d986d98348dd48716061d464c3fbffd1c4550061f003f53e7d2940e415bcb2baa0754dddc6d5794f0c85c7d8963ea03b5cc05556b4dd6db0e6e629185cf8c78d9dc27ce9464b62f57b283da50ada6f5bcf66715dabd7ad68ce48cc70569b9d573c47b7f9e99d9a243f862123f918e52784c34fdbe73b1cc6f25ebd09c7d3be5c86b78c07b37fe7f9a1e6dd39cf4f807760fcd1508402807808c7d30eacfe8d5b4eb4f877f89146861d5ecb9575a2b82b8191645167b116e098bdf1853371358b1be79c2840a99be3682ad0e7ff3c0800e6bf970d097daedebc832397642b621df397582c7e5e7992c0bcdf8c291fb8058d3d33dd167b76c25cb4c0530ce8a87179a20737030a608ed1549c94b1bfecc0436ce1dbc15f21d63a7838cca9d1eca5ab4e55d8a1961a0796b8c95390bf57c4a4d16836a22615b408f650390237a0f68fb14f035eed8d0715a0024cfbe009a99aa6c34157e2629f7a79d26f440534d985f2802804f3d257b4e82fbce9f94be64239ec41e8c745f8ea3539db46da6cc1e83eb55eb8baab7b86fd967595b1b4f6848b7e7043037930873d3a659542b45ed5f14a2b4edc665b5085f9a56efbaee0a22f3709b53d86d223ed38a113d6ad8cbf1c07f83288256b52d5e266d6db84cde25fc7de0ee640fd016dcc85cf151fe451b5d2609aaa38c6d8a0428d1cc9391d8a4d6f129b364c8ace116bc706bf95aa216ddf70e1b1384ba6f5e506553db4434bb5080474d06f4e9bcf3b9f967a7c9718dd05cf5b9a94344c1c23694a255f32c43f546b27b6baa549e49426480a99f81ba1f01286191a4894735b62b771ff6a27266f0b55657def54542035f6a1267193b4c1844c02ecde2af1f9b845b24f5df97c333b3a196cd12926da7b6106c071a9866db56a378df0c34415a18a7997b25354ef24ad7598f27da9f5fc90f330228a1ba87eb03585488629fe0b8ac8954ccea198b22a5605e8fd2ae82a67f54052d84dc85b30efdaa3faf9a75e26b61d27c0289dc9c9c64c3afba570f08453c679a19ea40f5a229e4fb61bd83be8c96ce9e3ab839d3d30748f970341019b821aca550ea24fa9d63ccda82f11fd6205191ab13c3083368ea369b8ad442cae1429fe8310a3ee5966044fb3ddce4c4669b18645d87696f6c7082fda500cc7f002be653b1a9a16d855efd126cff4a29226852d0b164839d8917a0616bace9c85b6255e092659731fe26e47bbc73206f30d01dcf6a0d5f40f9419fd64edfaa44e852677f4971b5fa803c885a3349a4a97ee910839d13172b9f9ba9651bbbcfca277cfb25692f430f19e1fd2a7edd37879bdc069f688330b54e59d0ce9ce3392b886d295d741c797447ecb54267a2afd2d0b89f1400bce532dae9b67d06d67412d20cf674ce3ea616f2d719458a7fdebbbcd935433c90a1f0fe01f49bafe8bc96b005669ce4bbaa122a476c9f10d8028524618e84b4e14b1c5f285694947c7d202b38f48ee81200d083aa40b92595927a1f9ad9e43a20f705e26109a7e40e5b30c28fc1b30a69a4a96b2c63982cb6db02ffc5a4ca9d917b46d7f3a28b6940b06e90ae88b3c4e3a6488001b76e5c8ec2da6ad02e5b83c473e6de7f5c4ee356090968b145ffd87305ef4df632b469b8ffb2cf80561ef856e7e4b91278d2490a569b51be8dcf84308140e427cf6df331437956ca732781ad4ee45a1d670f439ca858393c0235e3979e7c94641e712892b8294d5ee9d16563dd8a73efef94ecf59a96d71e4862f03cdadd00548734e80b35c662871d2f246f600b724d5fbb1c67af1338c6df2a13ee1180f69e7d97888f747a9fae5514974923ef6e15094fcd13616624ee3e5d809437ffe637846907193fbdb14839b1998992321d7ea5e792f4b309ae02dfb72e32e66523d1e30e941968b1e2b00d41dae4a574b3caf5b3268a187fc55e0f87955a4690bb7f0dd35aee6f3a9ee3d768c0fcdb4ecff4f4dc59f265e2e0df9a5aafd0a0c0e7986794689a371f99cf5ed50cd81c0523e4106c02ac4da11309e3afd58f51dc0ccf564133e21c440e797b300ce5b0e54ef80c9502ab9a96245df543a55f1b11f604f23cef6f1e1d8ec27a98a1f54b8b5770ddaf337caa15efc12149823775f999a8d00a294fd5dab4f7305f0cdafde0b39a2f7241bf6de1d4bc9d43f923a83e6f570d361fa622fc22df4984f5bb5fc1809b9ace5923c3e381108f8fa5720895c56a0b971c9b44e614d75e9deca22e719e71fcaec94411157350a50aa34338014bcd476d2b6da68f3167748f46e374f0ba5571226d638f015536d0c39ed51da7078122b200d8ab55ba6dcb636908c381758d09a8087828891128ef4220c4d5bf965488cc9869b8f8e9f6077638108b5b66c54e4df8c16451480cba91b46d61162c2fafab3aa35b2698fca889e6cd06a57f8e484da60776698bc3047a712c71ea404cdb6f7558130f4fe12ce29806d5f3cf79261b7ade79e97bf813b8bfa94801b9fa568da3c67587158fdb4001ef9e67a2612fde98269de7414da2c4d4dc51cef63c18fb3dcb11fb53fdaddb75f9f25f06348464c6e9674cb3af826385b376680d7262f11a929088f399c0a8b5bfa45cf2abfc98b006e682704793649df84daa1326e405ee641dfa30bfcbe41d0c94b36dc4614ddec6d1e61e88ec31ae32c7b1629174630015a7e4cc6d768c930487c7a441654403e95ff88277ceb29b9e7ccd376142801d01245311520646f84aef783fcbda8ecdd08d7b44b134753c35dd2df1ef68529ba4e722b059ba61a3e033d85d83db5d8301d1eed37dfd46c3c3a1b874984c848503ad51278cd8cd9665c5fc9798508c3b33348ae8a54c62db616ee17afe1f3706b519b6c0b6b39de51af1e6abeca1aa7d0d527a6cb1f44cb261cc897af58cc60f488df244c2bf80c9c4faa7149f0a2d0b2a206af7562edaf0ef5c307e4982023dafb07a70e72583003d72f853fad5b27cfcc50e6fb3d6f5b68d17646e548b8de359ab572e46c9bcf4224c63502a7405b087f14b87cd829182a86872bb91e5161bde1a9afcc69cab9d358b43ec91029d19b8e2949da4a0c5597461e8c2f79f5086893561230dda13102710069357874f8f6ecad7918ca9af7c222feb0e69c3a81d3534790876f08ed3f44dce66d10296a336a6786ffc6928fc6a8eecd971d12687d103834a7ad42a059ba51badd91ca311569e9d3d7113ce51cf81995b22cf3f065520496c83c61b74156f12cd3a3e20b20f703cc26681deea68e560a0d15f49eb6d56cf8b7ea0b7130d8d7751f97bffd06e7235d80caf5d72b607c67e2bce7a85c975751ed711ac5f3a9396fc32edc5a8a3b7bbeece2c5a55fd6b2496b42abfeaecb961acadb404977ab79452625111f083c32b95028cec018c1aa27fb622d01312a20151d60d31cebd103816dcc0ca99a9ba39557bf019a3c08912cf5eaa2a82f8aa6e0f16793e387783b401b0a1941466ad6a0f5655b9113d9dcef967fc30d6dd4f736bfaca5dddeea5e6b50760d583d9a598fbc04f9ea0c7ee0fa3a74cfe941767453378d75d69659feb45e004d7328c81000cde95b17cc6bc2a7974f87dc51753d2b1d9f4df5caa498581065b6dd353a8f4686e11403e03420a8718fb8d8c4936082481b7be924c0a70fd6d044b9ee7263893e14ae7d11127693df81a275bf8d24da026cc1d76a8e21ac7716561c889e8345992d1d0bc52bd382a51c08276665097b5fb1c8d2fd92fbd1bb1204e306ad8691afcb75e9f5af529d2e2eb06cacb422914e1b9eda2b0ee121eed20229be62d5b08d833a893aef7afb16db8468a654db7efc4b9e527e48e909a396a7183e3b7d3018f837aaa4c171891e84ed0f8e9a59eba76e93e59e3797835deec57c52bc735fefb427d1e9c40354fbd40c190d277d2017a28415baf91fc9251a144f1331bd85cbc5a4dd428030e12ae8b805d49f7d11f506e1bc5b61ed972f458af162716d4968c4d7b745e9045750b4479fea58109386dd201a9b3b44b7aabfb130bd9cab1f59e2fdbc61ca8cc189fe66e641a49250ff8c0dd12d2088798263720450f8cdf0de8c10ce95755e9468f4d988c7dbfbf857fbebef9c4c2d6e466877f9345a9cb99cc9a17e70d25c47925f0de31177b56c78ffd4d1988f383fd5ba242cc42fac83a75b609e897d61f1d753dcf9ae253240d28090bb50c224fa1018c83fcae2ce4bd32418ee841003ff45ac80b1b9e0281c826d1c1f1cd0ece014fbd5c46a74fac603d4fe331a4bd24101ea001bf6bd520753ab9f87cf5f32f19c4c4fecf54209598ba27754b140aa58323af157fefd7bd6b8258b884ba366d4c73d0cce05c48463be23aef73df8e4c577dae134a41c33abd8a280f0c5f6397149a2ae77c81e62f9e576538124d55e29e8d9861ca8d8f0fb7f9984bbb7de85d3222b5f13f834e88d39be18afd55874b6c4d478d035b8689e0dc4dc5dfe4eb44153340d12d4172784f2e3fc92e66f626b186414091f728da48612f06bd75e397976db426f93518b640a6ff2a52ece3727f452218b85768d3e1aa1e726886a561d21866b5d9a40511aaee904e69a9e89970df2293c53baf6f5c026c3b4c4364c8835cb6d753dd17f3fcc7c834dcdb83e16814dedbf3c8206eaf12bf421362f91517f2ba92dc7eecbcc2d41908824fa26caec8ee2e2a85c1f9d0839db1e067fc06917061a037c4291cff1bc839bd2c81f3f80d24f93b27659ca1a2dc0b65dc92bff5e2b0cfec888c35024a4286f028e9d8cf7ccb9278cca117e0005312e4d36ab90de359bd77979d55ccdd2980603da0b90c2f64f2d56fba6844811ea20cb9359117e06afcea37a3a5150d016b641bc4eca33d1d516910d7b0dc27cc02cd9862719120a12fc4b337b9473cd502e9ba2ba7d90349cf22c70cc636cb413be46bbbb9bddacd51ee440d269f45af4fdf24917462e3bf367c7364ac4c52c93479400d32c9df273ad5f9ccecfcdc09c536995badcddf3e20545e6c55ca26d93d7042996f3dc788e25b0322c104a973359c4c38d997a4af71989bf2105c2949833f3342975995cfb300622111e050786adc6d1b34ce3bcc52f9c72c92f48bf17a701c51530ad9ac9555286336277a6fd12a0bf81b1fb1bb2e97fccf6029e1d6c10a16e5a8985267a7c36922200b6199c0cfe232f2fbf7889ddb4c66addc5f89acee48597c1399c2a5bae0de4d2d931ba7cea160d8a5ceff3a83c899ef2747f553fb7ee256c8402ff0044ca19351312fadbc9b49915be0b647665988bdb8dc06350335307c9cdcdc1ff99711d298e78025f0d806f6d45645431f81d158cd6b704701ff862f08ae48335690e539ef618e675b023bc47559cd4b5c7cf2b4c95b62a2d823322dd021d65832fb57c6e6bee16a6f3db0a3d95cbd3a0199883422e264e12c0070bd5ce822a6f367d0081e446d1ad9b022e1cb48b420571c941a245261ebd8aaebe67b4bba1d95581915f5318c3bd35221307a477044391567537bf01349562caf2a3aaa05a1b93e2ad2f8e1e2dc7046e688530ad088e3766dcf6ef25972be2c475cf3ef8cc51d3e55a6f86c1062ac351ab6b5d07e21e50367d163ece955ded8bc3f4fcad85daecb14a22e5743aabc7f83c8bf7deb1147591b26d60701c52fdd4c25091c258315c0ef07dbcc77a152ca089468369f0643697dc78bf09073be0a04feeea0dfede7794bb690d1af840b5f53bae536d410025a92d4e2c65343462526545a3852a252ad077a641fe62ea0b5eac95a7961e884bd38b6264d6a7a1f0b48a8f928babe3ef499c0a4e05a3a5d62371045bf31d78e1dc357abb94f6a3827e37254bc24c377ea6cf640158d86970e88b5145e1eed68db9c433e1451af0853440ff57b62c85a950ccd4db3dbc70d6a9df689142661c6eb4928e4bb7b4ca9815ee858e01c6163cdd8ecc99bf3b24de0fd7799e557f5206d80d39bef9e84618869f70581fd7699dbb23aeaf7d99c74c5f0e4dc6e028799c3481b06ad49c7376f3ae9de899d62dc50f650fa31c9829b86e49f7b98ee7c081b5bae8a9eb78dee3f4e93d5c70ae8cf934c3b2ac10d1941460b4b5049986d87afae0b4e500cca3c769c024f8d8cae812354a5e81d74d64fd10e705ffc909c233f50ce8ff14d0af2a9bed567d48f55e9992b3040ff7d111cce1550a524d859421af954d54e66f1c426bff9d79aac430793a8505e58457db0c841fccebcdf63c95829e0ec6261d692943115ad7554fa883759e2d8544b097d7984f96684baa3eaa2a27916a97c35bb178e996d7cdbab2e715656cec2bdf2175ff5a7c9e0ac6a01d5760fc10536341134da708626790ee540562c70ebbb46d019a16c9d8de090621d4c5bf71a61de10cdc79ec99896234f5334fda57cbb6fee0eb59aa63055b39e7a966b5ab8a5a4d01668d493d1b96661d0b49de9c7c503a650ee3419bdd4be59d6cb59ebfc747d46419f0eda967ddaad3a77b276e82fc034933753b86649f451517c081ed9d8736b44e9d903b818019bbb9fd16958dc18317937a1841a569ad707de934b82f1c7b5e8dc773e4752006a6e378fd81eeb55f396812dda9ca471bb947f6e5647c0a94f8067f2cf418490a97da9efe5cfa7174fd6b3f038660d5d79e41a6a4ac57c2590b3ab7b7d05ab2ec7a605b7b8b79aa1ca88b7250fe7e99c003118477696eaaaace066c39c4d7de947c1758340ddda90f7f18e8a676cf8bc9715a87097b423da064e31a5a80bdafef423f254fbd7b22830c311a074b17f5dfe46748db13bad841747109b5da8f3a04f78e8cec43e71aa4eecc82c4f0165fc76218859003429e2aaf94afe63dab37aa202ae9f46ebe7b12812429b99aa7797e1cc1ea120300fa6b3b8409e48e1c43108c9f2adc68a2f93e8a2e53a358b9b47a8b2f4ff14abca79877f821076e50c6de47c710587a6f3cff343a50c7ea4f9f4dd96d180f59aa23d6f9348081e701aa7e7f7260371fbed030991cee360f847ecfe8a0370476cac2873ef8198d5756ad9b02a60af84b409f7a38d082bf43b8934007eb9d04c9ed2c0b91b798a0e07177a79d5b7730c1c80bb8db8826232bddf408de9ce06eb8ea261ab5b5208f18956cd0c993fe53e4dc3ce05062190a0f273053f93dc31c8288a530ff0485cb06a30fc90191003edb9b03361a43bf235f167f073dc9126135e179f5e4e382353571f40e752ab68fc185cc5412412c02ca02fa67b92a4199f6160615c39399999b62081e3d088c51552bf4fab714b40e937e0547ab789929e1262e5a5fe09dec721dfe4d300f2aca793da72ffffb13571a61f9149bc475290d33182f98241e6199ca592eace908e80a7e8b93bcdfa7c9175f05cc3d62c0ea1d95bf3d772d725de29cad81b79754876b61ff0b193836b3c88a49f9e664b23d1d490da119777211f4f0d53aa60927d373dc1621b1806824aa1d270fa9f8760cab2cbf66de3c9ad9843c63129b46c03d539c332f5d2b0e2b4d92ef004b24896283395e965d31dc1ada0a99bb74212849ee4d04ed04787d2102265f09574ff9f314a2fd621cbe3c16f2a26b2832081e3ef072ea6804ce09b654ea507dacd8a2e1163e20c252668b7e57c054d3aa8979aaaad1ad7375ea77cfe8f7e08fcb7b827854c22982fefcca6c6ced2710ace490db96c2742fe34f0f97fb858e57cfb000ee4cd2fe654fc52e8bf5980b10bc6e8e4cd362f8a5ed005731834e0cc96f256bd23612d4b15cdb3aca8ea9d3b0ed968c5269f1d3474a8c4ef0c6fef134c17ff35f44b5cc4d771dda2fe620309de0945aec5952ad16ca6a32d58bb80490f9cb2a801acd5db93f1996f893c3e24c0d9f27f8abb509b180ecaf8e735d3c8a4373dadc29303142653abd33ac314967f09a10625c4567ff3ebb2bcad44b9312f56fc38f9ca35ec16fb3524be7751effaadbd2b8c43753e7f6eb18d71d7ed67e93495e8b9ac22d6e2a9b8d3c14cc513ac6c54598388d2a2cd2a5e7728a80d5878c1dbaa753daeb78f442a738b3f93ffb11e27401597248c6631be86f5d3e49c5f83c691c5de41b12194ceeabc8f7ac0433545d82fa132fb6c46f0c0a32d0b15bafbacf317c41c87163165f968ff86a3139bb51fc8f37ec2fe43fbb0b0e4013eaa9a8d3413648c9d5b7e315ab9030913e5dfb1c959c7b6ca9140e3b4219a9fcc74363223b677119ccca9237fa29b4ebf7fc7748345d31f97fdb570ff714df63b517fe9bed027445036a22a6aca6c2d5fa5282ff4a960629390b345725fe3b15b22e2293339f3fb9467f31e391e98560991a942bf9b0ce80e7477bb66fdce7098692554b3abea1f346bcbb2f06e251c9131774b5b1b217033d40fe1ac797edf0c40a214798cbc21336ecfb090f4b6e7effc1ae69392d5d4abb30cab24aaea2e110232a30121250a86647c67aeb12a16523ad04e5e7b10fb7f488d67e181a464b592289ec9689a4fedcc91aa9ab261c72515cfe8c945077809ba555917983ebc9692f32455395db6e4e366305a2ab4528ddc364d1bf0da7f081281a7a44566137d73ab8cef061b1c6d8a54eb6ecb9774f494226ad20a76df399406e671f118207548b8a91b24f30eb8297098db7a2b1efa2757bb2152e63707d570b5144855d9d42b09d38f6bb1015048f56f81b9f52ab8bbc2f45c8c2da3e8d05b55764f94820af0f9dd5c19ba5873bab997f4862722d7d96558a6e3f8e6720df7d5a112af78192b7f1ff7d99408e5952a258597f0e3e89be6a610570137ed3fabea03c7041232cdfe64940dd5296eb0b2aa48f67690ee41ab8dec922bcafb1c62d0602680b73cb6b564560da9d456e0587a2c218e2f1d7295ed7505f1907313cb7d64a8ccf228b390d26771c17dc23d1eb8b6579fcab96cfec0e4a9448bedcb04f0088dcadaa3797ea2acab291e8067ec2c811737e7d4c68ea3a44316f8ff58264506866a584bb20f680414adbe0ffb902a731c701a3067a4ec9cb8b76a5b24c2b51764bf4e23c6f73342d91acbf4a2a169d35f29b519b5ae6e73b8914e5d1ce4cc5790537fda7973da4492e0207dc58b13aa938de36df1c0f2c948814bce037af2fcf82b5abd492a110ffd28d80d6b4d10c1a373efd33a957231c7892f3201b652e52563aa66e3b8ef75f86ca69fcc64c887e219ad163f274d4241cc0fe56dcf914bbb0097f6b18fe10ae7cf832b1ece5fb0dc94d4f446a6930e46112a600b43dd239002d9651cb5d54e4e30be4fcf07cb126b2aad87a460bd3baf81f12b1dfc0790a136a867fb71332f347a84f011f71759b7ae8f5c809951f28dfd09bab959a6b7c1f29b7365cf247cf3e945e08dc097b8c807160062f394042e9742ae2d28fe354c54e052e469a1c1053d3387c761f66ee208689f004e8ed9250cb84ad7ccf6e60e549854394c5f60f20d26857be25174230e6994935f9e53e4b513894f5be96b9bc85aa39ca235ace9788b6e81d9bc5e890d2a67f0c1d98ee202ec86078626e67ea25fcc71345c0603a631fcf95d18e5424a98c65fbc3052354f5ea756965129b0d22d990ab3ce3d814d899c7542c9f9490f85310214c12022aa5996602593164d517d3073e5828645fe35840bab12020f8703fae78e095fc490cae743a07ffbc2dec235377f05ab39c97e065b42d80415c51161a80d8f70ec71c8135d9a5ceb26ded1be3b9bb28a0adce9621a788045734cb911ff6cc17930faf2eab1f5ffa60dd83f54b2d6e9732b7127d5a18f5b49260eb84995e08439920ff13be7ee15206061f08752d92776a69c2ba65ed47a44bcb725200d5c34868bbfd2947a8b255308874f2ebad64c3db7b41413f76c9cfaefdfb37061c742cbc397b39c37e568dd99302a06fcf6dc53bf49a41eaf147852673381aa1a3e638d306fe33a147793a4dbc67d4bde72a5fd79526c559a0c3fd01e72f1a0688debe1f827b4ffd4c512da3427f04477421d49d9380c13a2bd1926918df1caa40824aed2e31555e0105131a109eb73c4db653b22211e67713b87426a748468aae6b5abcbcc236e08e0189dedd77c41a3ed01953ccecd30e9f2aad3f66da03846419a118decc8782dbbede546dc9780a69dabcd9f2446d405c6b8f3ea4a6e4ebdd017455637e6f4e68acde4607bf812903c4b929983952ec8b3e840b0771ce1dfc4d9b338665859419b99fe6e85747c9c8ea8ecf896a617ec39d2beb0be218ec5979e24acef19122fecf9eeb65a9158578aff9b839873462404cef667438fb466425c296f202f684ab015a2f7c7e2ad69ac47e5986e62c1fe915def52d801b758a3f82f14a82f337958aaffdac7b959b24802f3faf1905f02b3850c4aee9cc97849428a56f2f9e4997881d2dbbbebc426c0a57287830f967ef8d759be35df8cbaa3aba6768f4b6d95c379e29354d62a24209306be911c3c94823e4df4dbdf51a6ee3c0be9d9472358d3a1a76b5822e6144915ac92d2cb5f43ab03010bac764550bea0215eacd8af2dd846a3177e17a3ffe6ae709c424709b7d0f6e74ab02e6b8378d33e9d938f7d46ecb84984c39edeb11cd91544ec568311836bc22cb438e1bee17c67c9a8134cd88d17ab72406b271f41baf26a5eef9dadb0e344dd9d4f2dfd9ac2a1aeb9681b5d6c418d6cd0a5ab648c8a971143e3ad14dac1f71c5d8954a1cc36001347fd21c6bd8d9f5a2b50a5a24ba61b469cdcc4dd414d9e182c57a7ec60abb534c39718c089521a024a99b395bfe79af903eb036087f12f1abffc9acbdd8ff5781226a6e8c4b3284eed4485ab56698200c58b2910093ba37e82780a4342dcf56b99162e36ee27249c33775ac0bb452f58429efbf77ee633936c61bac6a9ec10df022ff1659d1b778bf0da4273309cb16f784ac20c0714cdb689f83839492263c5ff986214d37c75294911b3ea1887d595c31d87989ad363c2679e8db37374d7f865744bddc7536793994e83715cddfbce2b5a9a6412744c2c35d3c494609e48c6e02feb533e10549cc048c2e5e5d569c4665c0a22fb68d127c37679cc9f820834fccbfa61398713fc6f89144f08aafe20983cff890c0d991c027fcf9adf1e9f2e21c7e872701d10eab69d561d971715c6d382a828ad57b032892562763a8d8c19dfc117c92da4368a661fc42330b7e6fde21bdef411eb543de0db59e101fbc7fc55b85e7dab3e7f9e9fb825f3d2e9d788423bbe6a454e508282b021c5adfb19aab61a8654377e4701c3fa2c865c65f2b9bcfbb49cf0a55cc4765e1cb59cce65cf1fcd62bbcbcdd6e00126dc5a340174a5b9e158e4d631091ebb28def11e3027fd4d225bf294510a42a48babd3c1e843d723089c2895b294e3ee1e26b40db68c5d4b42c2c93997b26b3995f24091ac41cab6bf881783b5b2ff1f1cfc8a49463b65df198642f4e19e1ae80d1e9984c8fbc35e24e6afbe8bfb406fe99eda9a34bc4d5b0b8bf2a061a33f0d0c840455d47a91ba0d1b41d169be9017e45a9ba93f37d8a6e7cb7e910d25ba3924e5d650d72c81e8cdf4208267735fcbc90a7af7495012b08946ec960d665b804db5f8cf3536a85784d3f22536a0ed9b07e37d3dbd7415093ff75320b563e1ac41cadc0e21b711039704da6f76617b6768f8d6dc9c03eba6fd352687b8577687b3128132016db64b620ae08779c54b8705f3eae5488be5b4a716d20db8375d8bd0b453824f9c4c5e49a14d1296d8bad95b37a55a4dfa3a479b0c8797a3e5a95f85f5e452feb30f10fc464c217872c54d4243407c2fc90082ce7bd52db3f897419ab132b4e07cbc126e66bded89282611c6043ee97322b0ad560a802965ddc9e062a0e1c89359c9d7f3d996c2bd3f6aef2f9e789ed79821da0454b95d298eac4a1f66aaf2704d486a76e7a89fe9a3e11995cbd9ef992513f7ad406e58469d7b8d7675ca064bf8ea0534da7e555a49b853b9922e36911a7a8bb7068624f87e8b7448adc612a52e2d0b65149965b5905e44b7bae6ce92b2a4f7c7d1727387454c301829be1924091ec7d40cc1ac38ebf418f8d32a4dcf99a420d841ee65049313a7e2139be6efc3a35d8ec7621f72c3336712fd7c41d4d6fc4ffb6f429d22b9a7dbf6438dfff18c961391d3182434ef15dba1a5387b254d53cdff2e60a512e3d87abd4b77388d785dc76c97d82382f96242145ade37c65945344bcdec04b7c7e79953c55ae0e0a7ac60507c58fbd1ea0691f9a7757d2fb1bfe43d21b6a003b449499704dc65274070b6297101a1428f54bf16193609629c19e2873fff4dd96570d36c9ba2a56655fd04fd4a729a2e942463f9829b0b60539199ed0edccb4814061997721c4eaee0cc74d629b2f675053259eb791f29ad2d638172952b879e0637b8dfb4d2a03b1899c384b6f92cba937c1b4f9280962dd927160257864933afacaa2e2d1284f5ef9e2cc05833791900e0f0b41234ccb006f86f94e733a593080609e016071b76d26794792b0f1798e6c1b2c038613089244c63acdf876f37e11ce1486dd8e64ee3eb645af3d63e7e59190a9b618c0d857d3425e6bf3b0ef16b6a947b4848204fca3c9f8d40338d03800d563df27ad2388e5157d7fd0061cc64606a5577ae51cd5e73585bb312c482e1647ee387b0f26dfd7d1e32e7cf9929c22ddd011b5a0714f3f3e6b9a9e915a20aee7126652cc264d6d3d17d8b7731cc30b1635df6e7be5a7adf65d3d370fc3d02ab7e3f36bc98882241f3f25c0fddb776bcb83fc73e6e287239adc5e66a605b2a68e835e053d038b476480adaf4c70cd6d1bad923829f7148b579481f2b4c30154f633f9bbaebbc8fedad7183df0e22effec12027ad3a61d9be9400c7011e4048abc4d38d620c74533629ac70b304e19c1b852b801041e48183d3575e268a7e1c48c91e8afe45fd4b9bb9f94efd8db6bb243f0bd602abcc5e3a8aaf88e95adb536b30ec93ebabc6e3c7a4d697ddd1b336153f64e83db1c5d65cf5db0fca42139bae6ceac8a1697155c088d9355317f61cb1d31937db530f92f7b0077ae5f065c96bc9b4a0cdce98ae0c1ec913eb2d634a038c0af702d33febfb5209b8290da5a34353075fd96bc4e0fe749de9d990a26c571d0b06cdf37580a538c9df1d9ac49178eb18e79765e460bb66685f7849b9ab6bae586cfc69747eb39b6a86cc2282b83ed719aef9b26beaf52857909112be587589006634351729fafb1410494c8ff78a1713ecd11364a54df6dacea3b1e99ed671636f3f2e3f0bb5620380ef417b6f0dd9a2a51f6341ac5991b914173c825924f36fbb447d3c068c45f5d037a1230b40ea5679468a29db2ecb30b2dc6addf0baa05e6e23673999c0502616ec57c1a0d67d9f68c106f6a9716b806563f71a58439bc965cb932fe647a7ebe655460848fc9bc359b4b3686f5791694ea14a869ea1efde8af591816c03e3e9a92167eb1db4d85ef9645dc254570662d88ce74fd384514752db55e13a4459b209e590901ac0324dde08097205eeabe6d5578a72aa148c0f4ae956f7db51fd25f670c33a59cd7c8eef017c9b5879b7bae31d266515db7bb78eb26670079936dd902d3cc5dde4f462f7b1334e33efdd960bebb94d31264c6c4dcc0b74b415d9d22b345e090569dc8a0a816fd90c0a61daf628c8f8a135ba5da0afff7f32ac5e5f4284e07fb91d12bcdba08adf29918807cb171e0dee6728b637d718e82810d1fe8eb4ecfe6469218e537f6a64048185d54d7cb2d07ae5d12448361141e0189b8e9747fcc3ee2bdf648e6d3e0c79a71c48cec2bce69ae2c1eb9bb8de356d1086230dba346e54e4ccba8047180174d62bef323b88b668dfe025014b3658bc6e2d4dcd391b9d7fd1a57b0bd6f17ad02553be6800437a066e7ee0a607662d76448cd0471eeee07920c57145b8a8469b40ce59cf1917d5232554529b43d6b76fe938b5a313cc287953acf9b301b091510ada90558a27a01e2855e93e714d052712e94284845659723a094bbe87934d14956eef37a4fc1b71595e304334c08c610b0e36ff1acae57dcf30e6819564db21174003eb95cfb7fadffd7c7e9bd6c5a18d6881c5c109837580d1f0eff0614c966957f45a098c76883fe03ee19bc6fe34da825ae8d250bd33f4ac9333460dfbb7b97dbaa4bac0e7307268aeecd6e4b60a9f20720a6deb47dc88163b084db1c94b1230f0d27ba3e223bab2edb9f978efceaedebc2ef041219125519d52c3c2ed94f741e6534afe4ad8a98610cb65ba0f4bedeb940f87a41e8f10982041fbb1cd41c337fa0f0b2fa30dbc377e5763b5b97887dd9db75b4392d360305b89c4c8ce80e687833e1e23f233096f5e60a8970c6592ba5c19721dcc5ba9a4273f70a8df0a06f7c7bededd1ab82f72e46bd29db3b2989b9ec1f502a3561b8d18b6c0773cf9b874ea4bb4a3211576814f4d2f814cd2a83b5ba50dba469d777c1078fbba34dc5f45772c6346d82a03f205746f8daa240db467683bd418e47d48d6dae94de1bc6325d58c73fcd6d6d2cd7bad2ad14d5395267edb6d543abd7c5d4bbaecc4c69ef8eb08b704a6d6a06d7958e05e2cc22322210d51a0e8ae9b4318efc3f1dc99f49264ba70c81832a80efdc12ab6b55b395dceb430445039dd64449d2983fc80c796fb39e4f807dd873ec81bf5a915a4f1c682cc713dc6add4cf134616cc6b76190d5159d23c0891bff75ea3fee68034d6d92f809e3b91b86383525a19bd968afa3ad360cf10bdccea9e535e893fe491fe3094d0309707c946f29ced42a4ce755a7ff38c1f581160d65fa56f8189dfb86456a29980d81161e486dc94de2a163b090b2f9f98d31c9c1d2e7e0185f3c6fe4c913451340601078106eb686390eb57aa1e984ded9fe0030f681cad8bdf75cb30f46e8e4d3129714f1916a9cc55b0df74f9a9bab722841000cbffb255b3fe0e6f781ab9522b359e3ce86c35b033e9d32ff30194343d2c8ee3b0d15855cf6c7a1896cd7cae39283215800e5e5381e4d81250825bb8e1ffb412c334ddec0f55877a9a5582bc7dc8495d60d58aaf504baccb7e31ea53690fe7ee837379e7662cf5dab250f0b461b9a8b856eed6c1fc66c1d0ffb3b9dae70537c42bf8b595264c34ff274a82b5d86784bd2b5ec90f52da2e87115cef8a8d9b61c05f25f5b13e0873955379b0aaa32f15459df3c7bbc68ffde795c7738c066e70132343945fcac6eb707e42df9acd84d8b67ddd547f4325415648ef38a9f8c96b79a2553b87f62c98cb122d9c77534687e0edbdd9f96d9761975af2465a3f7bc8773a13de2d9b282f2a2376ccd6ed50b7aafc3b2ab49ef298288d4c779a3e8e44e963097d9a264a903a0715599dd83af4684aad1e6965ef8abc961de6ffc514b2ec7235cf222344e121d97e8c9c346e610f8b1377b9729e1014ec9e5641136b72420ab18f4f21f698054990e23f69843ef13111c087cae0c2035204b81bbd15599df64950f7b3e06e8f756a365db6809d9cc6fd9e5a635eaa092ec04e10185142b1afe4c35b2d10173601b0dfb5c9a2a10721b8da036a1120493c2608c4849353c055f63cf63d8c5b36c9af996ff74e30241f3d6cc173358a5e46a80a3f7121711fc0b9f93ef5ae30f1e93c279b3440003555fce0af99ddd444952fae3c32e9af5c0575d0b3c445a4fe1e32b2d2c9b4e78c90ab854b0fe4e85877e2b090d7e729ab4e11b358fcfa7220c6574f6e619ccc63563e20e32851cdab645ae9525fd2ff29f49ec9783c8518e05e67d60ebc3c312652d94b0bff1af795006e4eebeddd14de9a4d868fef0848ad2df5810986937c67211ceaead87b145a7042d5f1a79b264b6d5e053e1cf4bc0c77c9e1fdc4ee923b0b5f9ec0df55229b634275bac7b5c145a0aab99d79d07b161f1779dad0d447489312f23ac5111d0e6c1e64251d1109f7e5d2a0f71b40d9aeeb1d949d95814b617ad1a70955a412f7b472b16e4b41f5a7a8a5932c17120913b3bd105f067e52dc09af8b53ee4b244da54213c4cdd10f95bcb15f5a1a543bc6c3c6c717201c75c0e1a7fb3342af314f3ecb32b1d282672eeda7bdcb82f86d4b92bbef1c23b63c60a929474e19ab3ade88fd45eeccef31a0ff488b6f28bdf647e6431e6c915eb455f09692994ee5efacd80d2dbb6d2c84c2f5cebb9d9d7d20c467df4ade29f5b3453dd901e95609870aea6d62f65e5b46d222d27e05bb462790fe6a4dc69bc5d4052097a6f965018bf8f213288555ea5bd314962a4d44befd31ae6d5472ea2a3a8d8389624e79b18a0703d5c5ea417fd19da28dbd457cca59ad66e9d32c5cf12faaaae702687efe82ee7030778c9d643e0116cb26f226433aebd80a462fb204b0dde03af86e018e9dbcbf57549201488be8553ab081e53b14ae17a716efbfa82272a9f866971e172c532ecf7764dc150b3c9f320a33f73a43d8bc7b792fcfa5daad8104a04252965682b07cdd47a013c270acd3edce76342197f4ec1064f3b1b1ae9a544fc1983c2ea3b50ce0555b5db2afc46254aab3c4026513811f16ed190548456ead9012095bdf01c6696e1dd7dffd8e80df17e48f612125120211e843d3f15858f114134ec9df6b199de6498917e89221216328afc2e1131eed8e43c601621b182224edb661b9daa59405f1b8c04b3fd04222848177637659671c90ce913728caf94b3681f542032de41cd8ef1dd4ecbfdc4df6662589f85e4c980bf4c3ca666f21cc7380d6d19983fc97cf57976a29363425644e32b9a697814656e75c877f12ba02b0c8dfd71987e9162e0990c8ce2c32a02f7634edf19a3199473cec7cb0d1da16ab840ff47925f84d8faf2786682f7d7d1e681c3c6191fd63fc70bc7ce706b26d7b9da1e60d51800effe289319df8ba9c08a9bd2ec21f3a375400161b2e1e5601b0ca52a5537de18ce791ffd48dcb2ffeacbf68bfd1b41f9864c1a87005b8f3d9adc540766ae7de57ef6eb39bbfb695af1746beec97e8ba17d5a22ceb0ebca4d29f617df59eab141ab83a5be03284de7dda6f0951115fc8ca95bed024bdf16dc0607f662ee9ec01821b8f4c9db04e052fa2730d47634fa5c02463fda33cf103993d24b82b6cee8fcc45ec7b046e65304fe39c62a6421f5c381b7bfb25c8d84e41b2dd0135d1669a60721d5167de80853c04dd154d838f556d248f6388c76652d58cfde6680847bd16e1d5d8f39fdd8eca18c93c038b6069263b109e4ed6637907bd1e675fb1b0502d8fe1601bb64a03fb6f292347fbabf6e46c6338408d9aec5a69836c6fd7672e8b610e07452dfae150a9f29336366fdbac55d84ebded23754854494053d094fb7bfe442ca77e649ffe229835fbcf9ad36f3e46d20c9091a25e5a23edff33a6ce0b911780b4b3797a09367ceb1dd521d84fe433403cf392cec03ae57c56206c4e38e31b54aacdabc09214ed7cf3f148a6a9383666b491f0831b9a4ff726dda4a98aa41538f4669446599e7da88bd0cc1065df6dce33cbb7f48eef9cf704364fc5949fa0ea6c1207b59ff103bb6c4e5a07a5bd6e45e250e96d7a3507591d5559a1d49183642f0d0175f535cc92c9916281de7fef662da949b7c78869b01ffb03bac80bd021a7b6c37dbd2cda388b1353665d8a1a08c1da435a66f180df07982ea7f19d288dcadef279cefe842d13105d752aee105277e81ace2de661b6089cc3500fb2a58e78ea4cad9079c6f74b4e2d53ffd59acd1c4df81842e0f04d3f9c35044f3976657f29864088132bea6ddd3833005e7da46eaa9f51bdebeb01feca67630e2fdf4c699ee98fc24c37593018fd04761ee1890383028190bc2eea3857747fb865c7a76144607cd82bfd64fb260e8ab5b46dcab6071058fbac95994a79043e109b57b7da3d0880d0c12ed176f6a7526a6e0d4003f8cc01ba0dd47ab0d55e94f67ef1abb59b0e81266f54969cf1fd215d5bf12222c449d0c2b4569659b603fd95150cb1407dd43a1ab2690fe28316efbd55b1eef9c21604d9a5e4641c3956e5f0d843625c834e170c1884c1de50028ee6078c2b2bed57f9ec7f8479aa7d7a8153c6acd501180f41fae335748de28a677eb6182820a32bf10959734e1e34f78617c87fa4fabc163e6f32072675e26db5c642a13707c236a7ed00d61eb958484627b8ccc7e1c65f9feb8aa27a457cdac3b80b667e42b6a562052871ac4266dc71243707b523d793d09b3e05a27dcf8e5dd5447bb570c575fdaf7c75d3d4853f1b46f09a696d7da14ca1e522eaffcd521d6a1c77b4359c02d2a5ae57b11c7aa96b46e61e42f2f9c1c97e80a05c3365dee57b5c434de4814a19cad78d178081e9599847f9f6422e30f7bcf3a58822b8d0ee90c09e312217843c88ab5c19217d518662726ebf45660c3ccd2cfbdde93085a4cb5ffb0d3a73cf6b287b50a98f3d81a14c78df8a5c069ff6d4f55eaa8033c0d528a0be3ea76e836165b3c1cf4f9f15b240befe4376e4b2f265adbaa9aa2d961eb60592ebd412cb48079405ffe4d0e9d46658ff1f2ef14ef231c944081e4dc3f6d8b605113b0ff21174ce0d6499e74dbd41343a03346214dab6d6807c581a3232139508049d65fbac4875bcb095ee6c8ce5f334efa7dc5f255bd6668fc3d2309c275cf697035a56386c04c1834da13dbb4971c6f682b51bd744c45b4353b28dd29fd1358e40e506222dc3be1f75ba978aaefc5ca83b6666197ee0d3762972402d3cf9044cbd6216ae7087fccb9484f45c20abc1000d4b87077901a7abf469a3a304a3ba4781b5f187668ca7ef3818080da78edc54d507eaa360c68c54cf752a7740295428b11a5c0ae770e323b435cbdb5e2db25fcab6c506625be6e73d64869d0add18e059870ac996b95a12abdb3994e77ebd719bbc6097255d08b320d7ca41e68120326faf1f171e0fef301a590675e40f3733bd1852b75e1802c8685281c256866068481ca8e8618735377b91c4206598e6c3888614aca59149825d3b82031cd29dfa66fb590c85714ddb10a6d27046102ff97fc3dd517fcb817e42bdaf262360c22b0ce97d42ed5176f05389744f32f5caa8ddb8be444dc463a5044bd7c84f7639733ca002b04e51158030b6a1d8befd866ae07b2e48a3ac8a293ace602180ab54b5eaacda39238a7cb8c8802f0baa1d8fffda8ec276b08f30e500d20c798d73768256ca53487ad8b6959e5cf4dd2277574a073dca25b29f81218e57d27c20fe5e32ea9fa88b5c3e0708032f7b45d2cb4e4005c091bc8c8194ff1bb433d61d39f5f059b164740612fa80e367d48c3ebbb3b6294d2dcb6b1aebb7581a1d1bfcaae17ea3ae83cf311ccc53702eddba50a18c481d911450e92b665b30966b879e1a0b7b96ed5706ad37493cfe882eac7d0c6cf2a6a55e1ff086cdcf39a64e08eceb6107d9c92cb99dfa3ee0074a5f3952b562cbf5c8b6bf4c6a99708b60bbbcd1d0d49c0e496386387fd65e699535895f65381cf3d98912f0b996af89f1601df0943325992f242e74eadcb8c9f9a5e183657ebff9226af283270decc609fc18f34f84b94bfff98535ab9af1c96e5e034abfbde91300f20a62a5c0462a8ef6751577cf2498281c125a251fe60c1ba1319b581d22b60fd66a8a83a0013bcd367589076374e5fdbdef02a939b9c85dde16dbdbcd413bc8b96ae4232c3745abc97ea8f63e7a40584b2edec0d7b463c75a9780830d07e97933f28c3773beec6d993d4139271678799217fec7e3050a2f6ecc2d3ba1e74d7e6da1a3d0b70a681d8d8a59a0bb718c58ecff0d8846556cfdab16f58db9d5bd782f30f87b97170845e5cdd9c56c0ae44b93078cfc5eec02c2fca94b41fde63e0d65c1496abd5d0cb9f378295738c810a174e1ac5b77a54afac9dca9733d7c4325cadb5c48f7483b64655ba29c33fd791f010953c699fa608b7cec6c8dcd7cf0cb203399dc2d5d1b9bdc5eac3b57df59ad4239745302ada843ead224b2f8cac150d87608bfe0992b97fed78b290793922a4d7291d408e3facc9a87b01548b4e03fbc6fb80a2a7fc549fd773b1229ba4c0dc20268b5d7891fb13b1adc14e6dc0f1459a4316e350f1ef4cacd594054a5aeb0dc5c857e9c9122e4bd83115d8e261046f32d00c00ca224313f5b3bc4b169eb65cf3eb15f859f0a82e53706271af43e44a0e1e27b17fa855823fbe33bc46e71f39404ae7c5096410c0aa28f4ec7fc5fed90f337d31abe3eb774322da680a6dd167368ba88a7cd923a844b83075d85059cbccbcd5a2b9cd0d9883f3b7c5c5f611b2483fe33e146eb04e83993ea615c4fe69cb9df7f975eda9aa0c82c62d4c51a13eb047dfbb725758db88aad4f52fb7e460c50424981569de8f4b398fdb011b9f84e7ed9ca82da505236ee916dbdd8e3218fe403135574c42cc4e19b1ff8d78f9ec8ddc9095c27561e33c43204598944d0b66a1c3e4ccb8f8f229a6ff9406877423be1e9c5bdadf54f43564e26b7eb5b0c2ce24b0579ec07b3f591955b4d28db2f8b4d75fa06e3d93dc1a08e00c707d04bf35af1f715ddf562a59c94ced5167eba465a9d6cfd88d78aa873a43ea341b52cc1dddb8d13e142423e6cdfb59722cb02ca8fa891ba91b0d6fae02c2bc38e972904a248408c2898a6fb6339a6b6abad3cf9bae6481e9eb380ef5b13e3d7c125b2bcb934ac0a0693b640b937932bfb561e7aa95f1f051e02418b7451c1e9ce2ce339ac7da8f22fbf205a06657b27a640b5e413ed60976f4478e5d365a2d1d51844b697e7099f679c46e0a73dccdf5e7bb1e990455ee1da2f45e54de2fdd6ba142b39fde00381976d5da49b61420bd0d0b8025fc13e3d9214970a451d9b9fa66ed5f3117b940d7d7da4f02e3dabaa41186367b2e13f7e4303400443d6cde7849badfa32e72b9d9078faf04a4dbbb1abd1d2fac136ab4c1427cbb376f19350dac7fa362505489eb8041381f6405cc36039bc60b8824e430bf5ec494ac760f27b99187d4c14f8fc0a5a7cf0797f5ca9e0d370faf419ca5bb9fa1c069bf6b166af63fc964ab0205eb3065afcced3ea91de2c91ae34c68c0baf03675e1f26a0b39b367c4ad099a04946306dd0f2556051da16841e736838cfbd66acfeb75e61ab7591c61a6bc06335528e8765d82ff29a804607e43163a33a630b43937fc7b21b3fa89b1f292d5bd02c96fd66a999c91d39f86c1953002cd95322de799b3d6f8e14fb41418e4ec781c8ab44490959c73ef33c857ccd36fe9b9c1e3f2df21bd36751f81480a3516c7fee1b9e905bbbcb88010483685b487737a727abe5a695b4c487dc92e212120e70d093644192103ac59d50c8c14d59da444bd873bcc09ad6d4ea7868eaa38acac017d7a61d97336ebc0237952631389b3d31eb4739b3cac67e0c1bb35928106ccbc485b399ac9782c6b6ce95e2eca823e97db15293a8c7a581b969c30617f6f6431a1363e2db3a7f9777b5365aa0a241f5b964baeb99d6a14dee37f238d12e67270b3ee2b93dcc5fc3a5ac7177f7502dd703cf26590c9d2800bbe45075b55739e4d03f5a0cfd1b92c5eecdd7027789409831bbbd0dd3cef13ed1aa65f46d6abfaa7d34cb59c59040bdfe0e18012e70657fba91d01d558bc01acce8a655bc4e1176ec65b160c3c3569b620b1aad3ad46ca23829131c00139f7741ad8695961d9854464559ea210cd7ead502a9dfdb8218a20d0bd452df634160418752c7a8f826c94a5edb10277bee861d835bb93237645404f983ebd022bc07481911d8f8503e87fe0f7505120caad77bf0a7d7dfe651a4c2b878f707a4c58ea0c888ef835f9a2cf28c8256db5458760471ba3d9fd6817cabe310ecfb158d1396c79c574892227f9a0a24e11394ae4fbe373c3afa6b3973fd6ed7ca8d6501fbb35925d83f583936ae728797c8a422854ef5cfb0cccfbb9ce6dd7d38ef642fcad31d22edd56dcc7443fe5881a7cba1db9433b5f69718d7566db22bc238f41c69d8ed6be4fe33d6e67a43aaf6b7b2572eef23fe17c24ecb80ec6ff74da56a312bd20eb8d965209996ab23e038cc91b6e085808c4a94d35d77b0fac31fd64442fe593f22982a1bdf1c4a83b54cd25f80ed83d1ebf9e67caf0b0fb2d728f10ceab80c75d766669f0ad9f12757e8bed6463841e6cce5cbca1075104471c8b0652f4e0674f3c645ea2ffca7a4fc6919b1a7f6c4e5cb6f859a8ac738f5398e29e5beada9e8f381bd5084b3ebe3d94a5e75d87b7cfaae7c8a9e71e92bed0543f2ba88db2ccac86e31eb9eba2f11e8f2c6e23bf4c25f02a217ef4f19f2235cc840467dc643fe8be86925b888c00b6f6c41d6f55d5488de009b2fa9861603375fa8b6454180150e299a1eac3717d7f38bde774d022a619d45d434ef29e93719bfc62e71df230595893dcd09b9a42075ef06db93b1916cf554611bc27a226634ad55e582f7403037bfd0f516588e86e0aeba101617c969e99fb5902987228167d119bdfe5cc27c252cf9876584a049d53857f2195b40f333c3bac600e63c6f71807b2172200ce83b5653f244e82b698539cb5d86fba81bd3387b4b57c90ebf1a37ede7537b15b4e7fc7c1a51b0f7709e9a643d9667183062fa39b200adde2064659ddd366a1dcb05bdf5eb73b11420ffff136f70c7480bc81e492d18d2a805d6ed724eb4691f7aaf59694ab7e23fadcc30364f79e00f24642f2e3cb4f3f7d66d4405236473ab250d096c82c2ee34b9364ca120db277f40d15a04e8c3702a3c66290e0d172ee371a085184395732531ca465d955f00c50f0f8d7a41a62960d8adee44c6e13613862de222705f0532f59a5fc1d0cd96e6844b4c1479ce125e9c0ced74fb9eda906d2e9d0aa8dfe4f094b5676a3a6c4015c8b21e250c2a25009882851e2cb9b846884d09819a3a5c99086f1c8b87853e598420ceddfc381d5db893b4f0485c2cee909d066a8ed4120ccb942bf5424344f706997c185e6e8d685b8672cd326bc93efac49209eb1a487f999c081fc12eee7bb33a50d38b57065f4b04672d90333157ac806a7720405f2f887a651361b05e635913d8d56cb223aee94a50f64a432c88a9019221b3bd331d4160d91a86e5118e29b314573cb53b0fc44bdb99a22bfee9dad98bdc5450c78134d7b757f179e9bc1959a38841b3d460781d7648136621608c617d07bbe32bbd1cefb449093e3efbf253b422201dd0760b0aceec7578fd0b7132422a5e627f3eace2286495061b39a5429626056a51a2f95849965dad0dad6b97c5ad124b0540fcc13f394234f88b9cb9dc009cffb3054d084c4d419f912d1c2dddd9a70efa425685cbdfe50476d54b101c7beb18c2a12535e712572fbefdd99f8e523511da7a866be2e5b9a50fa83988a0a522a09b724b65776659462638d4c1fe42e265ecdd7aa5ab0fdcb2588312b856626087caa46d3b68470cdbfd05f551e02370cfb24a530e5735445f3eb0995c1b4224478e726668cd5855b1fc8d3913a5e0ef03fcb309c1c3d6226f0081a5c185d84326c98cd209cda37996a3063b6325c62d1873db603130f359d95b70eba57ec79fe3d95b9fc537e3e2330a5235873df6bc9da42cc1ba3cad7fc3974c89bf3791509f88a06ccb62c07604edb9da47f4bc64010cae64f0aff0de9554427ba58881779657949385037600141bf5e7cebdd3a7508fcd1e2480c4f1b70253e43b4bd16ccf07b27e647813ce75d0facd71738a37ce3f205b5c3a01888da28956eb8ae2753dc72bf001a0e514230e0c8a526bc8f03c667c44f2f50cee15390c6e4b7afa451639d351932f8395f1d23a51a05e21584ad1e885c51dc7736a24482e3323ef7e3337946ff596b5001b8654a0f0b3b77b025d6e12b8ae978445da1c6f5eb836289aa45a3faeffe5c3cc9a1b732c0ab183d582122bead38d09ab5504b659cab2c2bddd954db0fe593d6297f748fdc2b5c50c5d89e8dfc4cfea737c01c79f940ebfbcb8d8395bb7d7bd4774bafcfe3f59e4985c6d653318d857d8364a33d57d682fe422941ccf5768266e36e29ed8d2ee89e380c38eccf0942c5922017abcfcefe4fc4af7444f709a3c4060faf93dad159e423cad8ccc527c5246e54d1c718099e2a9d4dc562a0389be33db372489489c815c5a7ee36543cc5078a5e02b822e39d3576eddd6bd613008e127e29b6f8c76d92511f854d1b66b9af8c5dafae7f9df951fc64f310fdc259a1c953ae5b91382500cbfaf681a1c76828dd6838780619e19db3a9099c09a8fc33fffa3ec68a3e6463aba63e810bb4c22c28e17faab272a095eb097127a49c24357d3d1ed81eb765c99a2ded1f8c4fbf98fefbce9228932cd055a3a35d7cf5d90fa4048a4d99d32a1dcbb9549ab461b855ea6b3601e4f536e8c65e2c055992179de03d5233f4512982c8292b610d5fbe30ee8b2ba1788e5a2e67e7d5fdaac3585cb377293be991eb1cb5b4d44f16fc44c06613862a79c325cde40078187c117e059cf5cb99f3a8c588f26d74b32c3e8c1bc9b1eb22d8bc172cb3491ee54d33da2bff4d4c38bafcd24e8be00b9c3c279d9ad2d5ac8f6994595b04320acecd5a87afa7d90fa8c01e6d6e18289b06a36b2e5341d5670cd6a889e256a2e24e8a010d585ae7389b2214100639ee141801e895cd478f2cfed744d530b11abebba4c4f80b7c317310d78aae183ebc0a2d99e5c34df77ca3921d4099778ea731c31f45acba650a2c0057b1f19bf0adce18fc2d85783828758a09d35fd8896e192461be7edc96a92880e630e8f5cdf27c10962a7d6db06053536083e456b886b2574a8938a20f3d9ddf5151ee101209efacf0114d404fdc94b8a8b2d87ed02be888c8fdb66dc4978411459825d0baab41eb4ff1493f5fcf625be2705b9ef16352b11f20db9500be08fc395b809553bba0ad1de9b5b16299841ded827c6cd1bd6350bd3a19a0cc63c317741cee2aba0f9a0e4db18174cb50708a2eba3dc0dcc24d8adae368e6c8afbd8ac5ca9bbf31ec32001cbc691751181882684e8b4c934b252c1dd2c185fdfc521041d9e32c23cdc0fc24824aa2d15cbd300166048bc1c2c687d7fca746cdb8ea7c609ca998abcbba46c90387052521283049e35ab9534e90184502196b7957bf3741ff09b35d14f8c6ac92bbc9d336b0eb990fc02e0d5e1c34c9c8ed29a3ca873d1e33844e90cf4548bdc4ad3a9e7a746d67c067bf3f008d09876bab4df21d0212b2ac3b7150b69344e1504b6617865e1cd4f331eda6bf0f06b097773d9307c52ce861df258223680fcfc1d2343cf39162cb5555987dd0ad5dd320288f07ea60e07d66e25513a8efd4e7ec521452ed66ccc94cf2dac7235c833b94bd4358e0a85cdb30db4318b576cd4a28ee85f46a9e54e7f138dc679b8cea5e5894ae933d766246e0c07f541802c753fa2370de8dbc5028cd66407bda3e35bca06501125025dc9ae4587c1f1c11193fd30f3a4b8d61ba22b246c838ae7bd214da4c115cc5fffd32c00d367eedf67e52bce8d47808e9e2c0a433f5813783cd760293e2aba87a0ff351f697821d91ae6783694dd4e3d412ae5ddb2c20730f372110b6bb91e02ed257dc33bfd0a0a70d437675a4f95a40044d7a1a570cdc11e937b410009e22c041d8a9d8aeeabef6a286640f038490d1b2337ab0f59d4f7dc17753378158f431e1aec708013eb205d7c956b223431649e15be665dbe61c15b4bd8cc856f1732c749561fa0be5d0a50107ca52af27fbdcd4f32dcf1bd95086387b759a632f71a5b5601f58576ffdb11309c39f7023e09b0626c269e52f760ea22255519f36014e649e0f010b99d80043482ca8b0bb066eea73023eb706906ab8be18c643261dbb166b453191f4f2970842ffa81a018489e00d70ef1dcb29c55ec12bdb6828f9e69a25ba663d7b18d7e76760305ec71d000281fb4e1c9fda32811061432d5108478922ac8842418f813f0dd3903a538e3402ff2007e9d764f80c52b9c1bf57d9ef967ffa21ee4c8245bd2f11e013635a5e4b4ef6d30cfd219534444a1c7cfab8850e8661b1761c0dbd77950f94b2b3b5df60f51cf68481b04b863b74e69a51cf2f29a36d59ea7555df0a817f5559926c52cdc8cdfcd70b39ab58a708b7f41164de943f4660c22f1a6fe2a5a9726c0dfb1c7526ac30a8b930a3f3718d5bf082cf7f83395147336e32bdb227120c4011ce28f1859573f70d6d8fe504b0f3e4091074460154912380e702da98a731f9003600f967b38dbba3bb97601d063e7f6c749b340b5881a0610452c92f042566473833de5448f05e1931cdb67ebfcba092f5cb27d2617b9bc9e60c812499d096070f4c197d4bac73156a7699cbe62e7dd3a23cae7c80f186d5f48c9b6d80aa3fa59b8fe4ac5e61652382511a61192cf19e959a9cfddc247481c2924718809f62381ad44044fe70ab3b55c4dc8e0606b5fd4c81c355c90225b574aa28a49376aee0065e6985d10d0703d04b30698e335840b59959d6e04ffe1fd8a1eccf0e392494a9882cbfbd9155d017e6d78e7c012e9252fdf21076ddf237f08cdb7b670ed4baa4d6111104264a1490390cc1a98f7c3245161df9eecea378fcdc65eec37a841c2ff214e25c8b879fd14377fde4d77eea37a1816848e5d7b82d594e0114bbf391aa8812c9a8955f4a275cc54f86c74e0f6f3a7e24b94d142d9bd79e332a6b07aeed1c7effbb7b16d7bb1beb789c36c93f0ba2a7492ca59f3d5a8eb11b5a5d9e3c29aacefdd76410c01bbd3517e2eae3e5841e3921c995f3982f1da158313667f39e302b412c2ff42edade79ebbe3929aa314c9fe1e30a13a6697fa0890f5834a43953ff54e77683b4edfd0ea3a92bc3f8193edb6df44d6a0f581f1e7fa7b3a53f875b41ae15a16c696f82dc345dc92aed23d3b8dc9bdd5789a2dcd26a19bce6f8a71f675649060dd95640ac5340793bf930cf8f8c3d2c55f0ae7eabb6a16d7ea550a56c65a44afc58f77c47015f0b18b67665818c4333446d01d0ce96b68456cfa0da1b4c4d9c0cfed7d3b5ce6de7d2c0fc777488bcc566ec0b533c34afde78719470889f3b1e6c0ab927a2d11e6e7a309f39bc93e09dac77a91e88c03b9437928dfd2084632a9fda93eb11f8604f5ef505a156f4be576a7a181a04e5d937c783724cf80a2bd5d5f8474122c477d155b80642d45db158914d1c34f208ffa510490fe6927895b4395605f8a423f8b2fb9cbd8d091f44f79bf9557e6c33bfdb8c2a0ebd76844c655ed1eab0a5e72a9e4abb7129ba506f0fc56b558e8ea5924fefc544cab32c7b2210c9eeb5296a4eae89425fab80e6842ee240922f63e6b20b4e0eb4cb0db6f47e11f07c9213873c39e108e83efed3d32a85c0bdf37809fe4c8ee111a26baead1e69fa56b8c204701d88c24239535ddfdeaf887835cd8db9a9efca8b37a61a8c687a92f4f471913598edfd9795fd1cd586227827b94d25bee8bc6ab5cad69e49df49b34fa7f03bc4b2b4739857b63ee4a32067770bd185bd06569cec1207a90acdfba6c4bdf9f8e7522caf6acf600f5bd3b6660a3c4c325f0e7e0a37987cce590876bf048a84c0f551c4b2b1e15fcfd46f6020677c8b3cf00168030f09f5c5025e5cf1c982f2b1f9be7352c108fa0f5ae29481d6b0378b6954408a9ff4f9453030f2b53a5faa1e1a5ea250a822c4f13eb29033b0c18ea6a2b8ae1d29b86f0e26eea3166a6243d3eb2079ca8f81a1b3ee6774152fa51733d22f74bf0d56266d427e8f8b730904c50233ad0e0085a8fc7d85a08a0903d78b42ceda60837938180f7d8777af707971aa0adf8306668cc0cf0e09ce451e1bb5509d3bde6d43abea9a1e5cf77fe2e7f872289b44f017b2a2bde9fceaa0fc0559032e1a4715a430722af09b2462dff3f2290d1a2d569ba735165c412f9238f2444ed070c693715f10bcb20730dcfb6ef6fa544a532575c79ccef5fc0c0d764141f6e35aac0edc07773bd9d4e4930d31505f5e1ddacd20289daf7dcf1c8d0e2ba65e698a7c149242aae02c26724fc63f39867a994d34a241a6ebbc93a765a7650769e6c12529168c7bdc8a1517016ff41dbb51061d8d6366ca875ed82e0959d9e5404dd95ee13eef2be3d9e51c7b14555911c27137d3615156b1244bae922086a9698416efeddd9ce9225d0ee51c77728b4a942c72461c8ec6bd29ad0b3d408540cde4253e3ad07eb0c6fd17292f48684f3edea6c5d3f2aa8ecb7f72ca929f84f6ce97b4dc70774d23ed60ea8c18f73f684a5d45f6872f0c70e972f6ccedf37190be93c89d6113fcd647310e9f6a5d8ad33f67c9e164d3cfdf52ff8bb851ae034fe6e9974a42f41d90c77dd8bede4a0b0e83513b5c65e7f77c72f133de41ece7a2aadbfe4f0e7dd9126232909e3055f26d550123bd843ac29b7fdbc7c92805d0391f7062f2078bc8ba39236a8e5041def977a3ae9b5fb3d42b63549e5748f1a544d18106b62527e8f90f096cc7cf0a3d9f5e609ee5bf2303ece67b89e30b0f464b4adca5e71fe6432109606c938c0c907cfefa5304525d06ab3db6fcf113009618d786bc6f555ae43d0096b668d8231b4e38bac4f37b4fdc56833d71c385cbb409f930b298800f0fcc50d9228571c60f03bbdee52c48298579852a0e8760e91ba03b8e1a8d8b0f2e2b6d9eb0a68f8a720771b8343342ca32f16f543e6db6ad38caea270b5b28645a966d0109df2276541bbb43cf93f2f788ff6c7e6a5e50806a61867073f5d851667fe573a9439e1d6f9ab976bcc7289447ca6faf4bfaa2fa66b2dbf5bd106906941f0d2dac8e0042cf728f2512772186e461b1761e418399b26483a3a47c820513d600092c08edf55b40f40b73e0a6c44d65344ac4c6af694d398d803130b4f36765b45439d05263a1d0759f4d8948e032c2fe57f7aed4dae138ff0c2419d9c3c2528539776161782415f6421fc6c5152f073104d0f4435a882220939e8b38b6ef571a73b6685ae0bf3fa0491c300e52007e7f2e5bf6d4bcb00bb4cee99d2326e3e24012cb0eb39a14f85abde78f5f2d086fae16a65355f901dc7bcbfe41cbafbc0bcbb88098cc08312511eaa2dd9fb7b88bf67db937cbd8cafe561e01ee35b0fb4d0158569545841510770423dbe10066ea8ffbe915565b5333648ecabbfc602821c18d7d96c5e12999460c9a060a0ff384fe7e36359654b9326203ffb98b9c4f37969df1c8f182c36c4f0262ef6d1075b0f6adaf9457c6ada8f5837a50e02bd1f2daa7ef990efe84151a71a59562a47cee60784bedf069780e079fea67bdd6acc953f570223073ffbec995dc0307fd0cb3a0648f1567118e9ba69c7b2854f479e8de5a1e236c0db6c100b550f39d59fcc186aa634852dd740531b44f86f60bfb71bae70286ee5ddacef8c696d736a28dfc357bf2889c9b23b27b14b9772ebee9c3836146c687e34c33cef078c22f1945b3af1b8906c62cf5b3e0a26f2fa1c9d0500d845e6fbcb13762c3dec47d283fe869f1a0c2dc3c405682e026935c27fd32f06942ad932993928d0b136b25575b717c591c6e7f200818d7f3ae9367f633f76653c9df9e4c66713d762afe090d312effff9eab6e900c29d33619222e30f48a1b0b7498c847d3f048e651193674a60f8e26c2b9906dd289776799a69ca0e4ca72caa5dfc1ecdb27e3a140d1e0652a0dcbffc1bc5a03031f5564fa121bb0fdcfb1ebc34e946df903f46deb39766d25180a3658bf4723d114c5cf5428364db6c75fc7164153bb8ee8cd72199df413aeec8974bbd479e03d0745058a78f1f48fb309ff6980a211f7e9440188451cf2d1f643273ffdb659efc8dc44841e84387057a876df3ad1b9551414d9d3c7057b36ade268869abfbcb91fcc6cf927f1cacb5799ffc40eb93ec0c7f60ef135d1dc3605509f00188772a6008135f6afe3d67f3d5a65fe5ead5176a5767966d44500fae0d4ce052c62bfdf02a199ad038e65180dbb3c503b2c6334fdb0fd94c7d2b2fcad922ed4cbcb2fe0fd3fff28f512a0e046fe45c3a094a5a321c808faba993628f6f973c5622d4b53ab1d129e362543ff107032156826933eacbe32562baf14a3004b67c67aaa57d35521ce259c5e413ca412934c53655d5bb63be9ebe681c245cc7729fe1618e6a82a19a66f8bdcee21e2dbb13170f8883591468e52f2cf95f4ff077b798d2597d9142a0b3327a876f68e8be9a125cb7c5358f807ca8466b80a6183455a1ba71e91d70eb9be639c9e07a8151f8a5f1df70b022c40672f6c18e99b99bd1a167a13a75c50450a5573f0ef0ba5cea449d8736e61163b035e0ca68195cd1cfca42760d7ad6fae13ddada6b052e4f3cf033f2bdfe8a660b21e60f316d04a220f519b4ab92c26c7c34eeef926bd51084d51ef56b38d9f1bcec905a74bf42276f3a7c6a83b6ccfa7fc84ad9452d6572ddf58fc065b5ccd6107d3cfbf925826db2285c0fff28e1026027692d2c5cf2303091539e2566b6d46a0053f77c43b512870a82395fb2ac43d359b0e22d79001d63f18f4da7e72a4e5f3f43967e0c3e51ab90fece40508418bd6875696137fdd196c4ea5f8a318dabd58853e6198264606899ec3c75c50f684c627c0a6274722286606234c1ceef6b482ab2798f0cc6596c64701a76483c4418f282f548c26b89162c388618759bb969dbd39bc3443ecfd8af7b1cf5770462679da92358996e557253d2fd296f5085256aea837e5aaf1dd16aa5df5c32a4216099994b9b614a875dcf074264ddb67bfd34d68c96f05ee2a77bd7cfa66e3a9174a45d2e762891e4fcc2c875a3e016427094d3b4d51328203b3558af7a7b4042c680ad8e9943bab5b456fa7e7e096e2c29d087a7430fe5edc700c5296523f69dd0d04b87c6f73838762060b1cb11fde2f0750cd650a792690acf4e61fa011b7090f2d0a7f5e83438d60728a3011a9d392b1d0507b38f514ad5911df3f64882f806f7c92357be90d3c8122c14694d532716b556b60a4ba9c63e812ba771680e33dd34c582f57173b056cd0a894fb2ef39d42df7ebf2ed31232174dd974cd2dd46606951413f41e74d90087bc1cd74f179dbb211303151da1a8a771def3cc84bea11eafaca668a46bf591732456b0df6f9c9fa44b38384462c92fa1b617f0ab2a7a7216fb72b4520a60214dc2fcb74e3a90fa408224be09f663c22f54d76f3fee30f8c19e62e45aee3a55b325f9e4358a6712969511780348f3d1ba3f01f0ae255d5e2df117a978e309d5ebe2f057a95f037846e3dfe8e29466b51b4d077ab68848ad413075e6ca612b70d8a9c97050a47aa6b8b11e0b313098924f132d78ccc95caaae087f291ad00fc25d3a9afde3228b9e97b43bf667930ff20ff07ab751e82e786096e88d7ad42d2ab57ca4b92a0d4e688d1e28a9ef9a8bfb0e682276127c0647bf63db883bc79e7c9455b7c3e3a99d23910aa811aad70a6d7d5f65a3d0bc54fd3347fc6c8dc3f92174697242b33c4212becff8b823be841cb04df2a9f7e666530aef650bb741c1051ee1b7f04aae50bd8eb0411cad8f24409c8f9bbe65b678be09ab3cf51c469943d639f71d5a1acedc1719969a3d44afa00ad60f546230ae1d14e65cb2caebec06828a47cfadcf2a7e54220c980e4c0a074134f1e040a46bdff896c7eb23d1534dc7944160f4c1d5dc23bd3ed104e376a362b4829e097c22f189057dc8300f8a9bef52b584f7e83dc19967ab29a6b35ea1b10e3cdd56242c487a88a1d556059f80b17a32c77e765d05c357a704b48cdd0ce2de577af9529725ecfc3cc94d4238d63a80f7b2c827fe209c8b181b7137a4b18367d3a2cbd2d4a27dae8817c8344841c2390b06dd2fea93e04a82dab013bda2dbc2885d79dc6571f4a372efc7e916d49d347f40dd232b3d59291f31d083e4b1916fb3f17eaf2bdb0c17c7474f1db35d0083483877a404904c8a66d9a32b49712ff7658ce36985efb06debec655303f02d5e1d6d448539c2509c714ac53341d3950e8d3edcaf5212c2d7eba39713f74126e5855f51488b89b9875854146ccf62ca47ef50c17431a3309ebeb61930ccde7cacaccee7f9f5a88c5e4dbfae981539c0c5275ca0b11716ff49558d54c15af1e485b2b4e60d03f283f24b7bdda66cd68d5a9a3c87ef5fdc9c2b61e0d82e991bc6e9ecc0dfae389f55bb449c1b3fe9f59d9d500c70fa072739c93de017aa5c363cdb05ca072e5ef9e761d217b07e5348afb66c58d611bf47d079f5df37d7a6323ba397fcf8b705c6dc4967938d1a4447d3793ae1ff8a0108db840a54f47e9cf36388d869fd900d68a418b03f33d8c175cc59e74ca1f4e33be0cd1a992e50cf93ae227c0dabc1047d61692ab63b7788f6bde544f50b892e9ba7f7a1f7f11d9ec9ed3ef75dc9184c7bdb929c8f31176719ddafae37a6e888ec18d2d9e5476c90afc72bcd82d18ad0d3231ebc47a722e1f353ed46953bcc09b03ddd5174e27eef8eafdf511499c0674be5973ece245d874225b5856ee4df3f4422f2b910f545f01ed0f5d8b3b7e22f3ccc7fe803e26f2008c2580488c4b5ccc3b5767adf8c20eb05a9fa97d0dedc31732c7fa2b51166f713df90af688805b2dcd4eccdb179488f8d14275429d46ceeb15c592d802efa3cf9265024b687e21c76519d109bc389977c3002b9dbff187f00464e13269ddd9920d1f26be7f110aeba8d23adf234a83feee5ae5bea42de78e49986c7b03579402213cce6d190544a1fbe428a4e73f281e7acc3ceed234dba732ae00f3bb6d05565e5e40b8b82b54f218f22c3d22041e54c0a00064c03c1ed5fd6a7a813c39fd496aca7f6389708e926323825a9e0b590087389637dce9459086510f66802c716e2c80faf0847949ab3938ccd18629bcb88a025c683a2a8387eaec5249dd4583fd2261877a65ca9b32e90412ab6f625d28be6fe4d83eb9f30c9972eb966aa35b4e5c073fc7d72138ba0c4621ef52fe5f7a65860dd8924d68aa725f5880679397d880d29569007492860341d773e9e89c043075a8acbf26ebca397c9d58b872b8fa866b6889f300f4ab78a04c01d56d6e3cdcf5d597dd726acccad49661536f35c82f1243f76aac13c384daf5639460a4bf1a9a93f99d819f4a3eaa7c30da18814dc1bb7ccc4791d317b27c098f5e9d3083127cc8e5d76ca69802aa4a866daf704b2255a801e87aad5127304889328cb65fe9b803600efc729fd179f93694d4f0c164ba35500f1ee43279ef5f5c508cc08fd887bc037180a2241098671f7e309056a790463bf28201f3827bf371c8bfd6aacb1540232f497672508343c7c6522738d82610200c5f13283bdd66667f2162bd97e17e9ff8ec698653dbe50e091a8571a29bbce6240e79dc62015a0f38145850b0b6dcc74e191eeb2401de0134cd61820e814dc60c5c17de57ffc74cd47f0ccef4bfcfa6bc0af58efe77e988ab0b69ca787bfb36501d3f87c61da4c1a84c22bbab13cdafad1a98be07a0dbe6b4c85d6e58da95edfda3ac274a10adf429f96664a53b085702a93d72b1a666a93e226738a28afa3f4ca9def238d49a1a46b173af4145e9c886f9e4b998a2557359cdc87c9c1adc0b5a2d935f2f75790270ea6206e7e174801a779b0dde1bd3ee5fd675fbc3d273c5821fd7fdd3e1d3ff6d5efb0e6565bd67581b1ee83213135eaff5006bc975c3ced2b941d3c960b5f0ff2b9ecfe1b3c9f8dde98667f8460e49a213aab083c28fbc21c0470deb2af127441c531241ba17e615ca07e26b687d73be94b70977c5715752b4a0de071a95a501a30e5d48d9883b19f2123206cddf1dd08a6db03ba5dc7dda2b98970dfd509f8edecd75941795b83f27143164eb88a18b9b11afcb4dffe250da5022347a96371a97600b6f3a23012d5a739f340ea94e0f07e3d86d54eaed5f784ea6bc10d3923f56ef756fad790cfe7033dc0bf5f45b091ec990c39bdfcf54d6a4d28bea4480325943f62a13c057269c95d023c4a365d0ef35acc0b317385cb0e98df0984926aebff70df6cb1559024b04846b6b1546d181284592b509c46180782db9c43ade906034ddf58aebcce2a4fcbde8027bc30213abb6363cbd68cb27f0f34c6c3cc92cbafc940cbacdc0a30a1b10eb8ed7cbc2d02c4b8d21d48339046c8d646a00cf72c246f95755e15b76d770171c26d3fca1f2da102d471404d6aa2046200c700609706daea5f2ceeeac8a12dd8db97444aad8f13829d86b0c0aef9a3b14604fcd9cb7d31d95ab0a216309bc1a6bcb98934f335db668236170340c1c37efd4f2d5db5322db6cee5ad66b6221759b5264b649f54c412ad30759d7419e10f401c284de067bc0bd3e3c1b2e2b3291d18dbeaeba6874cf12d0723f3882e8c29861253646cbf463c4240a83189ef16eb68777cbb6972546aa8589c53932d89c43b8052637f3a9e7c89da667b22b1c355ac4986ef8fb32f7f45ef94f231a72b472ea8e72da07f6eb3c9837b5a8664fa9ae0ca77f7c80e99515d516c038c689b11a28ddc394a62221428395f0d9d54a666389c694db50254e5cb3a797072ae581067933b65873d02ba3d788980ebf52f4379d3377e695e584d35b56c6a2da5050255bf5769eb3df78aa8d386c7bfb4febeaf0f41b83124ac3af8e6ea86b4f630dcfe42cc2692c35180a1d87cb8b055edb7b0c4251ad35b1b870594d58d053a87fff7767ecb8ecc8c178e00754e266750908d72256d391e3a0315fc08f5a88bd91741e68a80450d93b499eed8aa5b477b3992e703db99c1a6f8c7f47c9041edd55d587efd1ddaadae2beedb8f49d9cd452e6fb764d045c772c21152678f0f5203acde6d579496ceea8b5828177284766230c374af4f514b8839349f16a023d9b9a1f7d9a8c94ad9c02a3fd12d4dc1614c1362db69228235f7c2c3f44e558aa79d07580c883ebc7f72d7b35ee1386c7d62159fead597cb8dbda2b36dd7ac0a63686e87052f59f094c798f6726c9f2b8b8d52eedc2f581315ea0c1ff7fa2497490794fa151c84b16b99e2fa9693176019189fa153e620cb3ac1f00dc46f787030923795e3e2fd6f055b82a1177914a15c8982878fb3398ce6b7116efa0e568aa80d826e65d8b4e06f240265b4d9e57a198491e48741e83016f65e807547aa3d567df21935205bb06c23b45797bb84d9f616df93098a58c6f5001f60ade25775604a5763bd3b2b659738772a578692c4d2f5c3f8a65a37bd5c54f128900ba3ea80b468d175f2994f246ddcae908565957970f36fe00ba5e1a29b7e8784419929dd0685b35c8a70a3a97f06e04bd1b1bd4a94655dee3842ae1dcfc21e0e75cf29438ae7212f6f1d87e610b2216934497a16e71e189c0a03fe346a920577114a0c9c38cf2f7712c07c417abf29c21253cebb86012bd87efd0eb7c2516667a896a55d02a3de3cfb85d33db54cedfd8716f1dfaa3adbc4c6821bdef6260757087d7b49176aa091ff4d197401dfc148f390af60ad6b81d2d153fe1f19e2a303b435f44d3b68b10612f9fa2450c7dc742673947899dac8ab57246601216fcfbac723e902c75bc669096bbf8adc772b20e3ca610b49d65a79197583feea45e19a364fdcaaa81575d98422a92c54133736d85802037c60e91b1d27e092a2d768f8327aea78a3824f0e9e210c09fbfcbb28dd159ccba89eda52c9bacfc817d6e567d9f687d540cd790150d335e07c36a8d29954aba5ac1f9c3a891cf6de4ab0e3e4819da1990096c8553c6a871c4ae9c2b48c00dcf80a7503fc3ee8c236d485c83f963a4cfcf6d7bc6b1bbac67c32bd206bcde60e134a5d54a08d2d89138b8feb5b2940d2c623b473c310d12098384f7d1ff6cd7399c64beaa27e80dc8f85ce2350f4f52a508ff6ebd0c271f80a370b339e85d83e24ab0894a7b782bce6d966a4904c8685b1640645bbd6fb0ae2e33fc83c6d2048a1bd8ca02c7c71f263c8706ea911ffa407957497a5b2d7930ad8c1d0607b57b02b2e4943491bfb8b92a3d238811ed2878aaca3d73d588fda5eee0f5b8bb724bfb36b52faf0e92a5123511a53602b777c511137519c3dd57c5c47dea06a536f339f561885ef91adc22909564b437daa6f53b23f6016250b6cd326f53b3c8f8df1c5b381246b0cc3487ab546f555905840f04ecd0ede2731028f78678e9720f585e8b4732702f8384aadf04db2e5b82cdb96f7ba130f3401097ec481e67925c1a6c53590438f43ab3e0ee423b441eb6ef8dc65a12368ecadfa5274ba56fa73c57b38f9d374b01080dbf481d413ce3bb9c99436070775fe364fb6a3997f25d50c97b78bf6b3a24402072652442a7d309001300930e7597ca1e509f52eef55d8a9c94735c562f0b832c51ec490638e6f22f4c8d254da252b8fadc8d433e375c0ebf7ebe06d1e5710d1b6e552528f8cdaaeabeb15ac88b6dce415b7c93e6b9449e82aee447b8fc5562270b19d295540ee4c18f7688e78ab1618f1fe1ff7bc8cf9663b9f4a159dc35bd7dfa0ca78814737f73baea784b68d98d4cd9202657bcc54f232acb3c952877fdd304c9da149b0bda14848f8d8292af4edad8290309bf4dc6873f07503098571d39c87c482d5423e5ecfaac389230a5c3be7ccbd0ede86ea68a5570d176103c3a0f0ec7123496638d49392d3739619c5bf5b0b191defe3c4148cf04d414485db8a4368abe5dd20ddc4550670605ce74e66dd37a1f730677658a09db06dc599b2f47d320986c9b1d4c7503be321957c61760ea67c1a0566882f53855561881ef5ff64d9c5f7573cc9f3d752a162e38183d78ae30d9b22e5c8f0a3946f05de2487a0e8a9a4b6c8189b82d8a1aeffb2c804611fe72534a3b7d93b0a9f1ff6c05e0bb2f67ed36fd9dcd021be9c8d98eb69f4d6acd1b912e634fc21852e30f88dc8cf0dc3759969524323d8622e6741234e8438fbe7e2ca11cb9240724097bc46a00700f867bf6f52292fb5995289deec0a582dddf4dd1278697e641d323208946ec949d164f09c1539282efae2673e40ea7b3afe858c78cb6361fde03f8e005649781219475125c86f07ec268e016f91e2e113a6b712268fc0a951f343f04c6fc67364903bd6940901317c9e7e16ce011e9b695dd89464f87ddfdec82761924e1f76f63ddc64bb780bb18501c6b6be8d89cca1d2c9715ec57b7d521ff7505d3d8bb67df92b5c3ba2688665a7874d9d94746c78fe4551759852a5c15fa94721384987f9662e6d62ac0c730051830dc7d9fe9373a47d04500132247e7c816472150d69b5b2dc6ad080b866c75997a14fa47327957d26aa246478ab2c9d088b8a26c1867c80acb4d2060be9c7f78f3af98397fd1faad1c8abd10f4c442036b5a8974772de35bdde89957f55f9d66286da522a9e5b84c8add3c3c402047deff816236bc1d0eb8fdc0cc67a2bab4034874152a95ff309e80b802ffe35a04a630cad4ac51ebc39e8f2b7f5c147d78d4718ef91e6de04a2d11010b3297aaeadcf9f600fdd31736ac602d4af0d9b6e6225004fc5f6844d56fd4337fde567d9acb9a0f8f0bbbd1b46c7019e88e8a463753ad9b9d4b3123840dba4421e334b7cd7e7a274a998642f75c625240434d8573ae8f1c90ea508917e9ac0cb4366122f1c30393349049e9013c4d70e8ef3f834e05750812a96a20d5787c1d61206f3e283fe9743d1e559afca80248ba9aaed729e09cfd55067bf558eb94324f472737b490ab4de3613a7458474d37f8d0a7862763872f180925156614bc23694b0de09314cbd35f62f12ab43e79351687410aab0225fe9543087c0a53b9cb12751b7ba97c424a6ef77317121359e49b2d0521f3d1f100c2e50fe03fd1e1b2e9c01699d7b7ba9fa04e95179eb83b7ea53780e75f795eb80290840a88eb90e7a384e479a5b8e8389d4bb0d54107e94f22a67481b1102f571e65a9c1742157871aba6b0477216a19c8021fbd31107ea4be5510f253ec6e2fccba6a63fbea6c14b1a86d5a5e3c088cbf3971293a835b69ad92791d5310796b727058588dae9468675d16e00ef708c21ab733998eba8321534913e8746808c40294388d7220475f79cdc705209c563d7cbbd481cc97c90cca5b5f137b2d3ba341d2b5b975b02d474771d41e57a372be9154d0748020dba835635e25cee6eda8cfcd8c2e17336a4114a6eb1a6765b3b376abf5a72bceed4618bf75b398941f6a7c1b9661d08343bdecec6e5c6849f49e79967e24e4055542b52e9ece4cab68dde9799edc70122306a928d5961ba962366b15a6efac5b12c36d5cbb88f850720eaf73ade3758003c04d54c1e84a4914876c918497b4f8bd3a4c3853845b865c0b03bcc2fe8820833caf3f050245251b00a775d8af986b266d5a3f1120ce9af0567081ad6c28f8d57bc880f884ac3b8b5b00feab969c218dd1ba65110e08a531c7291e3f07745df2b017cf4cd1e3d9d37bd700a8d23b3d8f1f89c3f29ee4fe226b59059b546f801f0afc0ae54c8e3ac546d114ffb3a10d420d4e36f4df69e62835de0e8f7f2f9571944965037dbefa52c8135f524d08d6c3e9bcdc8f41a612667403b5fe4f2253e7ae39d86ca41d262212937754ffe3efbe0b28b605db7f52d336c71d8996b7332900ee3a3cec14c32ed0729bf86b03f79e522cc247922b6610319582a750b7dda4673ad0ac0cb3f574f09f42536c6b7477956b777500fdfbd212e16de6405a4402cbfaf7b74439d53ac1f7f2e8ddd18495d914c14f9346802a929fb11581e52440cf05fa4baeb5ad2eece898de6a528f57ae4476efa8f0fc53a5ae9766d5b6fdba2b22b10310b14cbf8bac4631223f0346cb509c7e492ae5e4000d97060051fccaaabd20ae6de4c6d9bf079e2d2cf8e4c99f83b3c76d60fa518adb266d8dbd8e010134a5a28f3437a232f1980ef5da0638e105d467b19c112b969f9568469033182d8d32313070cd67c161577ab4f24808ab1e6add5d20ad02484fe8e821cda9f34c58842fd81d92d71440ad1eb1f42b2be4153a7da9dbd53705018545f8b63197cbef79441afe07300a702622312509ad4d7341ac39caf265e50756e165edf250d19310e5ff0906f672902be718e509e35583bf4119ed634b6bd287ea305c4c7f976deddbacdcb0721807e4d61cfcfbf924bebf042e9cf8904ade0cdfd880b3b88ac287482ee4b42ab536de77bca53854f860ef502ec17013fce1886f71ccd16f50da2628e95cd5da2facc5981ab5278b8f938a28d825903896fbaa848c7e21490ea8dc9f70313f3103843bec91405e7156d717a51b1dd7ca06f24d0eda05e6866dd3b079f62d48d18887b767728194fb684e7ae4a36079bfb250fd032de522b32833d5757acee1dd9302c78131d5e89890dbc3c39092a57b915c7c08a5c071a63f8a43084ed00e0be6f2ae1691bb510b8169c193e7cd4c105f0faa4de374923adf5382f06d4150d8c788548696861defb484da003ffaaec3f2f48c2ebf5fc46fc64a1c0211eaa7f11b4edc6b0e538ada9b5ecc394b27bb63eb53e9240f9337f9de0692288881a383d23fc20192ed53a5be4463c07db5612b7adc73d4d88e506df877efa11109d90e6e7c3e9145d0c3b0ca35ce44e2c6082c73fc78c85fa5239e54ef5d98a88870734eaa72710ac0ef290152855f604344530469977795714c373dd124dabda3050e9eba5cbaf096bf4abb39e184a4cfc0b7182dd5ac1f5c28bf9117383de9e1b95b1c9ed947f532c7836865afa0dcdf9b028c155f21df3e89ccb552ed54a78a87d0bbe26e01a4df1663b64608dd627b69fe8d40b632041eb64470a36243cf895cf8c1c82697bf81d74432559195ff97d30dacf9228063304af25c3598d4a14be10f7f823af90a7d70802c6ce8efe98f5c6a25438d44d7a1ce4baefbd7e20f92075b477f91a4b6416c348dfb9e964c97163d0bf982d75fcbab56fe28464df22ac9badf5e06c1366696406291820d7aa309d53588e212a595885b4caedfeb7ecf5e87997e28c7a5ae503495e84ad461dd8f1f2c739133d0d854e3195881f04e3cce15ced6be5449ad1598649c4a82a3aa80b39d9508d35829f2438b1413c59202518ef0c72cb407e2cca7f6f1e5628647bbf364c8b185c37fc6f7e3ffcbb1befa44b1d9e7928753a6d2bfa19bcd98b2704e7a234c3a070fcffb6c30655785626e25d57fbdf03335ee82061f425139d640b29c910a014e4b010e3eefce96d541a06f6ce26021ca703b39583c14d9dc7d2b7f46e9138b3b1da700e3efa74d21a00117ebe0e718f2e86b778d531c9fd6560135eca712408f98a547c733903c98dc07884c4e2050119eeb3bfe80e4f8332d2a434161aeab36f93aa0cc835468fc0bf12b6ff4b62d25b54e7f01ad484eae67fc926c4dbde2df3b44e1e4ca830d51d335113e322cd65586077072fab74c66655be888fa67a2eb091bd1af1f2b05c49d4099539d647cced9c5cf579a722a599ec084016438ca88c91e7c004a0b10b4421e2eb456067e0fe9d1f11767dea1c36cf717875624018d0a40545834f4aab3ad5e907e799a32945e8371274d081f19a7e9ff582e069fe2cf9d036efc630601640a082b7b1cbd3e6232323da794ff55a9cde4536b2ab3faa5886ad8693b4b06b88436b250f2355584860ca109b1a1ce8eab0ad861c69998366bad7273fb19f4d7374caaf16555552939ce9095d24fb52a68f53bc7e0c7e7750e7f89b04e19632e0ec7ce8b7206cba392ac596d8abba045656e2929f41a3e2c0aa1b2a504dbdcd070b55953433e9c50feb5cdc74d0798d802bf99506432f42566574177a401cd6af133742178be84cfb6b6f2b647a46d797eb3eb72e7f0dfdccdc5799915de38335989eaafe0f3a43cbdcbffe96a9419ba1e0ac97b9f8f884156d568023f954acc14cea0fa99990a47fe04163955d988de7b3ee888883ae5239c68dac71540d60b6251392d2fbcdaccb5b111fae6da00bf1f6dca5344af32131d113562d68ed850d6bd6de7d1543b65178cb6273285fe0c955ef4caffedf1834e590b8fdb631f5c7d632a2dd7d75f785a70a12136df8cabd0952d1ab3d4cc389b502769a1ac20b86b28da5124b482cd627fe946cd2928dd0951f4fbfa5d9dd2a33b436e953b4a93c33c42c118a425f4d13fb2826364d3b28dea89717cfd4cbe64899e2e588f9ad182978680c6f68648df16dd13dac2eb22a35ece4908ab7bc06a9aa1cd31d187083e413c7b97bd221be7ad5609243b04f979929e5b2ba7e61383fa20cb7b526c9a5f0ce9897cf3a55c68a876bf9ddc4aad64d928e779e4ff62d1dab51ae533ce27281065430e2533fde8f6e183eec1127fd53366aa1b11cb743344bd1b8fd97f811ea248a5d39a5efb993dfb25acbbb10f68877bddd3c8dc39f8f7bbe7c719eee3bfd45e5ed29f6b88fd7a92658506dd18b0720ab7bf1dff7e18afc292323bc6e6f735290d29446a7b8b6f8ddbc3f5d60c73512aefdac5690f52021528f0aa54caec75fce7abdb911705e481dd7472b77539eaf18ee0bbed0278473251e500edd14ed79a62404bdaa3944f6bb7ea49969b8bc2611b40cb6cb928a799a5f921472b781eb80d82f5ac2869ebf64add789fcf93805cb7fb4e53e9a340fc412fbcfc9aa4a568416637e94dde8f2f5e72d0d8f98e487a8ff79deb7c5bdc1a1306c42500509aac4be4ec8a94e1d14dbf22049b6c51311d756333133e53c0d8688942ec185fd33d261055510ba3f6f7f02c715bf1f1cc12f2e66fdd9e6f38572778a2074e5c004d94e0800bf9e43551d646e95c8726c11f10f9b4128ce287940016c8d8baa3012813d2b42fe753eb67ff351c95a1a37a32665dd85041871ecef2067e057084eeaa692c143fc5d55876d5e7f2d939d4a530bd76a08d519382bb0133cc9bf234cf73066d7494a64611463a55fcd8e20610e1be630460ff4c52d2a952a0193340e61527a457903041342ef28af437180818ee9ffae086914604c2618d8bcf9531179e6b9c98eb2f7619bf679686fd6984369df5fbdbb1e8d71bb9bf3f812867c3bf68b865c5cad55b99fdb081efc3d202001df5d65c6260f514a7f3e159e5c650b962a4cc49ce268dff5a9999545be311b9105e640fbe2ff1b0171739baa1e9a8ac815f774a888d82169e728de14958b850adfab5062cf059971a945f89ad583ae5ac4d39d26d667a37c11850e05bb8863832782e2caf5601e55b822131176a15a78ff49103f54557633ec407f1f3395daa054e162fa115bd0b998cf6122339947e24067fdf70f0de868d9696d1e7c711ce92144be1c4105ae810f4abbf1af8bdeb6f7575473aeee90e678e275cef534f8942810135aa0ba22a7436311a48fbd31819a7bb994c4034126db49dd5276850dda10f60f4304c6f5b4c862cdbd6c0cde3eafbe03e431dd1fe7e30ca1d9440de2481010804aa464ea3f4c2222c4e4927bfe60e0d9befa0ed7d4e9b8568f51d7ac73a9e6e3b590fc8a4e5d25de55252e5399efb944f7398e700e95b4df911c0b7141fcb16915294ae3915a2c32a22c8493a5726731594b95deae05342149b2d8ccd5b078985c1d1df6fd9272fd4181688301096101712be859957e2ed148f937808d7315008e9e8179a45d78e34bf3ef27fe6e307e49a6dab9d92b7010ffdfaf41452dbac28ee1ee71e02ef9fe8ce0bb407fa9110fe9408504a6efa47eaf796d823682bf7e716633cc4e33350616b6c3072593f4445ce67aeba8f9b886b2ab4594e8ebb127f96c5ff9fe45c9192700ae2350e04c668ec4698f096a0bad7c8a31387118c39be314e193fe65a5895c7bfe84a6dc9ca386ec2b9c092ae86226444eebf0c3785e85a5187b8eaa32d78363f5c9185db405028260d5d39cdb471457b58a473915acc0e6e05194d1cb88db7433800546d2a7ad8fd3612f41b4aee8f056f981ba2a34a2821d5ecf5e6136c45e7958fa4a9e395d9bcc9a9cc9d0d6614948b340c6ca572d990fae8cae51c73a387efa1b780542c63a4c5bf3600e1aab7f9816dc82b435c9f4b57cf4b6bcb69195fb838129c4e5a0acdff9e601ac7dae4cde09ff47332440a4a60ceae8ca3df16a25b4d26f3f53a1d1bdd1e68821590715790c5a6645efc84ac375774ffab55c4a5e4b2d47d27e6726e220738d751405f61815ca57b7c3abc75ccbb096515d0e925c4babfc628c4052dfe0498eb737ffa67c7290d85c3f29b97e7072206dee2889e4a848532d8e47b80f37e6d39f5a800aa6db10fdb4ea8703574be3b38879423e03c56ecec408a7470afeab912613dc6592f90b2cae52cf488dba10f6cde63686253ddfd7cd9a2afb009dbfdf5283255b9fc73c9e5261db29971c1f82e845929fff3b727054513536ac0973b01c4d1890406a048277ef90fe99487eef60b04f382b4381c6a9d365a52cf155e3c7c1eb61d6342cfec6e4834732aae2ee50ec389f20788fc19cb485ac62b91ef8a0af9ded758eda3f8a8b19b658f7238145765c8f75b2c5d27aa3d1892b2c2bba6c77f7765b82bf576ea1fcbbf7738f7899f5410546ae3215c02eadaf9a9eaf7ca8c021147be3cf2299cef7868ba4317d8f7708e6a5d775716fab36d5c073d3cf9262d3db53ee6516334111896a18a3d6839ebdb177f0c29ff42dc2211c81b4b599e016ec396c7007035655b9fd1498ebacbf5df15bf601f18bc2ede1cf5748f0bede1d8b18a57389943b7311f6ba56f3b1d4eb11eeedb9f69552ef6af9635cbe4352325702c77a7e044bc5400237cd537097f971e4844868cdfc4f4394c1c3e3f9ee4bac6c30c74bfe889325b87c0a2b82148fceba5e46571910d93d7dabcdd3842675609c471ef9191eb1b9345420b834c35661ddb8d5108c807d58c86d888ec7305f8f2f26ba1a0bb9edbb79734989d03967c6d78ea790b10138b4d4cbba551cd6a992c8a70307c86fa514d3dccbc7476d68d51d165b3441355bcd8ae3a5be0e401a1c01c5f5dbb0968e8f0dea22c7ca6fee439c4699a7e3df66d3ce437f0ebc759e83b7dbaa15ba65cde8ea202978fddb6c70de1818cbd7376e2a98584ec380879ec280fc3df0012c6d6ded676100f6cc98af2fc9a9a821bcf5bf5487f1ea9c45157ff2d0348c375af75f25ea6d7117ea961fa287075add411d95381e5bb41731ba9a273784a668d482b0d1601d92edbae3708f687a6faccc0df2d4636d196c878fe9367dfe8d34efe54e59b405b52d41556afc9c44609dbc12e7978f24261defa283f27f72225e854c28ed1ff7f0119d5970b5a0fdf432eba5c3488697e2ae8fef2cea8c6920a48bc79f0607befb58a0cad96b1d73472df910fadd4aa70b1d10d581d89e02740a0af7c422964a2b702fd6107bd01790e7c13423fe4377c03fe438a653d796b55d404a9014751b8d870c058511bb9c4c026a7a9ecb81e5ccae7823842a24890a67996958ea11dcb3279c416f7fe1dc780877f6c7eca7958ab62f71c071d60773ca12eaa64a6bae440741230ce5eef4df64aa454135283fd3479141befa95f23e2fe4196bb37b098b4d22dc17dc063d74d5671ff8f5d3101947cd35dafceaedef8add99cc17a0c7205c9dcbbdc1244c0ba7dc22589364e8159880651f09fd026b69ba8afa448e6d07d25c53d150de42823d8211d423fe6feeaa1cf6a759e2d83bd3c230a40508bc9ade122269a6c47856c80da64955e7bf61df60236fd7df303066461220f5758ff04291f4c955c51adb6d3bf843115ff8482dbedd7d6df0229b1a50c2b0bc9ce6bbd07de9519f644a9c4b1b4c718eebc2bab1efb43c366748f294e23b68d10950f969d962d12bcf111875fe005ed6e9b12d6c43329e2da79493962e7342fddaa1bcce02d60c44342ac60ffc33a9528b56bbdf2fd5420d0710160fd8b8857f47a6c20d22ceed83df332112ac2de432b02951ca1fbc027467d2fffe7876039fac858ee2e3bddff4976b397f33967967ae0fe5f39eccb7a86b4b2e51c136e101d18a9887d43b2734fa675a8517aada94b3e2e8ca5546950ec8dead3a2d9eb5711508e75b46f02f4ed889682ab88bcaa2ccbc265c83b56b651d03d3762bd06a79a89e88423083cc175c5505a3dde3a428f43c1c64d72f2cf95ff9c70bcfcc6a87a135a88d7c4d60a141ccb8cc9b55f1f46dce856b096d082ef9bdeb97832db1adcbc99d1de7f26377b50617d176eef55d27b33d94fab4ddae5b5362d4c732ea5ab5357f5507951861ec028ee0e81c753cbf42ff70e1b29a5184437a1717b9645f26acaaada40941a54653779bd250d3924fbf450bc9258a04ac43f10d6e6d15a2b60d09260d561723f16459e28ee214c43b6e7500c6eb65812da8d3622fd5113067a16ba0ce73ae2ad29be36fdd76724390f8132018866176410e3f74d53fcf2cff80e8a1164d83643ebda73852b62529f0a88c20550505d0827c1ccb2002937ab5b822b7d6797cd52d659e84e0cda8b308016ea18b37f9fceddb05f0306290cdbbeb1e7368a2c56420ce58f3ea27e14555afeb0997cb15c7061c169a92b6b2da9d1f88ca2ba0012ce9ba03db6f7f2a3a64d4df843c268849676bd0eb602724b92f672d5bed89029e50fc737fe129893777d799e983e06f0895cf8b0c20a81a56faba4b4fa1f4db3b2558f3456df365ebddfbd373ac62324e956454a603988283c9607da16221ec7518d2ac9b51c22c39d5f1831ad37d2dc99c4a1e58bc438538baa0cfaa0830301d90debe93dc86145a6950e0e5c126b7f52b8f39f54fdf0ec83d1a5fc0971e954242293ee1365573705a875df93e7e349282e238ffdcaf10b02b262d0a83b1060bc68d2feb86f5915f4785f5674f351b7be1055ec753a37d239ccf877bd870770d36d5e3f2e0d0255664ea036eaf37524318cb3e0892223dd2860069ae9c86a9fa043feccf02b85123499cb261c0f1cbed4fc4374040ca4b19857a6eb8a466df9456afd6df6245f1eb018843917be0cb6c2ce6892d237420c1410c83b16f59e9b3f978252d7f5cc2b70744a6dbdcc683f5af03e9d2f9d3d0a1416aa621c29da51083a853de71b826dffdcc81154b1fb489a1b4dffa7ba27237226a50c0c3e0249efdbefc80f30c5c2e7cbd0037b5302181f81f78f699963d0047c5511752c8eb3b15979c1a068779deb69b12ba150df2657db7f4149b68261e5186e7b376207a741c0d230e61839d9be6fa4b45295ba3963167441c6eb676fceecd3c276b3c52f19ce3a25029eaa2f436b82c0671f57948c6795dc066caa795f2712490f376f86ba36402cc49b0db501a44429c33e93733ccf9ee14df14b837741ba8b37b896dd7d1dad5610003daae71b14ca2ce3f5ece5d62a80c6850cdea3bffca5ae87a5c43b7fbda656dad5e3d16e826709a54a4d5163b1909372fb7ca931a07b4389ba162a39dd5430cd8dca6a6782b9bd42670dda74fa6433b11f926fea2e94988a92999a3bd522af4f221a5deb81c6f682f0012e302472d65a3f391b2b5ee15a9787d74ea55940bba5a0ce0767d3f1be70c4999cd828725f8742436d315e0bc95c5ace20494d0c8f3d9814fac9a5fb58c17a2c430039a2cfeca3a7cb0c778a7ba8c64521f2627b657e8453be8804abb8d3a77dd09f88a9c9f600eed9e32616f7c6b6bc6e172f222085c172c8e7961c1db728382c93a4e8f1d483be5bb9ea3975d4c0f163466fb46d86f361643721009f94e09fe547b7f1554ccfdca69e1128e77694c9623c2b184d590b3df12289b28520507e5852071d9d456d975150c83f4abc92f2a03758ef6a64f8edd55bcc05d1901f91064b6e66b5678d9f1492800fbdc1bee4a48dfcfdc6549b028c2548e04810ce431ac228d445481d183c57215ba73b5cf365f41ef91752824dbfbfb7b8c5d729bf69c42212a75bf85558046666ce4ac06dad4ecbc4baeb12858f120ff6f65d54c884916c62cf3612f221590c466a91de1b25edacca1c3c4cde3743e78ae0a94088889d4e1a8bf7b81a132504a5452726da9cb182a5b812f10a8423484e9253f05b1802fcbe536ce434f728ad01ba50e82abd48782c9a644618d0e0685f3e41a99ad32d5a31e3a9d6f36eb015ace52ab5c27d268a1f521853beac1a94120a27e07c0806c3f624a3e302c8b05e6dd0b60cd7f0a4c5a22498dab79a3f7c27040f2aa807398c75e187fa4816db122ac13ffb9bb4981168f875cef4b126a07e1588b9adbb1ccbf7622a06f14df12ba9a3eccc11aea23c27ee6e72528267776fb57cf4ad1b94245e630406427fe4c4929166ac6e6a488e78da9918496f7e57407f408008df4699dcc80c8798f974525975f82bb8739ef68476549851874561741c24315d20d553b11ad288c4bdd020f135b4dc5324dd4e0c44481661dd2e78594f62150a17fe362b4b5c6097ed6ccdd3e83a739159b67f23e2c1c2a0361f2e9cfdc37190e64ef5cc70380ae5cedec5742132734716eedaa53e451710f34523730949a134c43d045feaf42b7118924b50dbc3de438f3b184fe1b9bd1eb8dfbf4d830d6b898cdfd43e96754669447c40cc696df77dd284614d1b9d8fed30152b25d89c35a682c03b95daa841cd20df9e6585679778dfca1bda37b918fcbbe12b5ea60257d30e5fe36b27a73fe2c3f1026eee1a820a4179df3495a209d4e4e675ac58e97008b1f7e6b6e588e62bb5f3ce4bd9fb5b4366a322c0590bf7d31596f0a958f8b0193901cd578c69f804dd10fba413047f71714f35e44ca9094c223c00139902c16f9cea966eb8ce197db50c7b35399b10d66f19d776c86a214dcfb9491ce34ad0df4c096a19535b1fc85b53528c1cbeca87977d3ff795c157f7f6c9fbb2b02314a5341ad19a009cbd95812ec7aa6d1a76721d8ede2f5184a66e78a72ce63d671f6b901cf7a2857b954c8dd2d0634460c4bbd70264f705d5a9d0880bd9b2f6d6b209cef6097d8fc9bc4b0ba841fcf9775bc4988857bf1ca7699f9ae06f07f462967e1fb7097277839c0eeb5ac9ce33d5a582fc4c4ccf386fe4dd5f0c8ddb7458765d9d9fd3678019221c30672826e4f93f1e0b8c49f65a53a25b796cb1979dd39d5f92263fd433df5dc75fc1574980e03860b5b5571c2babe99c03d3b07e8b0b4ed3f5ffa8421dcacfa8e9ea1598596b4c15729c1da83b98c54855cdfd198cae44ff2eec3c78baee44198c661db4764171a1c551a79a826604374f160bea3dbe72048bbe0fa890d94a9bac25c95c4cc5609c3dfed23b9be5df4181f42ad3e12d195fb5cb3d647e916f7569959fc0d61b8c894340a58af9c88ab94754297308d7687fde5e638c2ce52220c2a06ad6aae921958a5765fb0f3a80e2ee2f8c017841e312fe938b755b551872646f57a1142373ef546dcbd9722da4a408e8e14979e4d5d5f258168be89f9ac7a8e24420323450e992bfbae9a508e49613507036100b5b364b0ce559d9d59443b8284932bfae7c17efc97a423285b689650d96abc1c06a8445f8496e94cb09fe4cc465589ce48ce4ba37ad2e0dc13245d1c5b4177d980d0746e9f8daa9e9c6af6f4663b4ffa6f2e6758e469779251d295e6105f8d7a01039f76564018f4f8eafb571f86b712a213bd510617b9333658dee252f6af042b823228b126e41174eaf02cb4029fa4385451ebd6a8c24a865bd5143025294e5cea0121a09b312e6415fa422ef907c2b931ad8123eb20b0488c5815fa4063ab70e6ae1a0e967ca50384f42e4c175177b02f5c82b4ae6669f53da0fa245f236e961289ed68c84a28ff90ed144b83b9e25db4bcaf15893b47abde4a0075037c7f037b20ccbe0017691c9462f26fef842b1503e9f836fc68bd83df21f857659f48423086e10425fcae1c6783fe78d1ae977942d48c81793b66e219fbfa071600e94864350cd658785e383ae41a22d92cb08b5e247e6b3de4fe59eb97653dd527a04797769a5e3626f0b9b40606852516f1e3bb1bb13b79723ae19f5228fa16ac01f61607400f3cf0fd7d3c46b1e7573b77081b38c5d59d0c5b5deb90b8451e55ee73514b80fd082c62d89463eec5601f4e995a9a2b26c586323338514dffcf5d2195cb0b847e17843f2a3714d3abb404b4af5ed3b0cb9530ac535c5a301d80fac438ab603ea43367d3d870f7b347753878f2468b2f1f2ae0f614ced78201aad8382ea3850d2678b8fdb619bb302998c39eceb58c2b905e3433684cd3f4cca7ee6866596583a810b36675d49151606460d62eb1d1dd66c168d1b7c3ef8e1595da8009ca00f63bfc42a7bf920adeb3987c907b0cc789abca41556348ebe2f85ed0ff6ce60a04a883c4cb968678d85b58c26d8f9bc410fa8904f3c5ef74c2e35e16dad150e6d2abfc2ff75f62d67f932e38c6e6dc11136b9ff8d1b2d7aad78cd27f6b87a811eba5049d58bf4731d2c6e134192f37583aa412ec5f1b9fd31a4f90b404e9d421cbb546129bd556755f79453e5a592d70956703a1ac13292ad61643020099216deb8ab85e1db4b1182bcfaf52a211943ce2481c93e7fd9dfa11d666bc038ce1f03258fdfce07e37970baa66b2d609ee948a6485e38985c04e9236a69bfc8e17774de248e6143225a867d262409eceb1cf95f1120f14afe14730afd9ad0061d4e079d1443135cc97418a2d2386bf5324afb683bf107fe4f5f6e88e6362b29a7afa2d33aeb2e33522e9f2d1d84da08cba074e54613bdb1caea7b6f00c993e31542c98515b0782c037e7bcf858e61bd88adf64ecd143958d5a4641dec8e265fb189b4878f80c261fda209f2141186bd72a2cca77950cc08abfacf398ca97d6ea64ab0b32c4cb3e4d0ced2bcb50715492547ffbd7958df3bb9d9a61a5317872a72a02c08d900158ea55f95146bcbda5a1a32ce0ace5b2ab004fcd26205d6181320677894a1742798210742d522ea859491a3714752c022b430057d7e84911d501c4c6c7496b10b82dd12da1e8798c52986b4e12711e248fea7fe3068752584148fea79b97549363f14521b8186b765869e40b304bd9efb02360c904b036df3199a0116cbde8b5e85382ba86cec6ac11004191dce18130e2696a41c7bc1c271ad514808d94c795362756f0c830259fdf9c93c7a48206e1f2fa362023d39de4e35791404e3c57554783b070a83306b3d7816bd067e52ea39cb3c841d3397d2564ee57061633040cf291c8b153b304c616f7705abf8ef9ec85237a379be55a7546bd17ef04fa92b9509eed786837e082afa34e480d9843360fbccee26cc577734597f38f5a01d987ea0a2c6336b9f106051a6b059d78f85a7c5853a7e5dfcd8da8bcf51fa8776c4373fdf783a8bc9f86550be9e895c1e5a02ac7ffef42bd8203f238fbf598dd1755dea848a799a804bc197a4b01fd556be7e76db16c39e6687e6c438ae68b0270857f4131b35c090ed1e02cc00586a77fb7219bad27e78e656cb5efa29074bc6ec4b5a5faa97b1b3badadd93458b1b8df00291f816cf0333eff651aaae7535e26e7242251eed18511469833d7f2fa7188ffa809e92ebaa0c491069f0042d250d722e03f55fa3ef929f43293093898e187f892665cba1886773c47ef487dcedd551804008a980c0c2dc034767610f21f68dd4843609896f0debd10dff70e877fba77701954b4a797a0ff164790ee1ae8ff665cf93bfa3eacc33f5a02e74287defa3cb6f4dce0108129e8ba882c22c0fec168bb7ff00cffc0d7ae351872f91c532689180db163bd7a1cb1100a46ec26ba7d51763ec3cb32c7ae8ab9f05e630fcbcc5c1cb3d393abcd0e35c08b0567002d7ae8ef285c34954bc8a690df9fe7aba82992d105087253b81af2f872183974c36350a33efbfb5d7121601c94b700e58a907a17a44edd632d2d75bbe5ed090d20e5aad1cccbfdea8415eb9edebf8b75b8152bf10409d57224d9cca71330a085bd1984c2297de6a5725234b8581e763c776e930d1d87a4ef47d0ab6409494c0fd58002395da6bd241f9d6dd03dd1715a317d39a005222bc7b0afbee3caa273df6e6300d70314d32d907abd062adfc3b5bf183435c73c9954f670d9c0478f9066c70c5e5cf26633d9f6e59b9e186186a1448ab9da176c6dbb1b78ccce696eb772d9f463cd658459eb12d8da6efa2d1ef2e013cc5a8f94f9a90978cd9ffb955d7567b95bc1d95f29e114784b4c67b344e55fc331e701dfb9a54632ee422ee938bf404aa9a611f0d623c893e6e5b9b80cf3225c5d9d6359b6b692ea2a11e9199a3bf084fc68271976024a2ffa8e0811c7c709f03132a122d737175a16726850c7d8d9cf85575df62a0b73640fe6750987567341e43007eb997537651e111d54030ea805834eff15761842adf10bb2946264a4fd247a0efc258ed632a1f941baba258d8666172f8693d4fa42968230972d6d020db2c8a4a9ed1564f94e78f23c773e8b56f8f4fc356cd2077982133e7e0151fd01f356951113a15310e3c08fdbcb3d9535aa8d31cbfa46983a405119cbf825f2462ac73af883514c351d030026be66c67a2ed8046750998a1a272c0639f51f4774aa09a1a01623c695b1721ff5cfdae3575319536582d64b84bb6879daa6d9d0251f392e62a8d65562404968e4f6269a5cbe911e62d951d6394f2176d557ce7c7427bab30ec653361e4dcbdad6f174d455426c2b8c030d1ec7e6f90cdeb7deb8e391cfd1e89f3a8616f8d805ea982eeac2686e62f361702b3687fcac4259855762fd5aae93e626e422ee0cea7e6e6b2376ff08dc2259066384862a709233c6ec49c834443e03865fa48401c507ac49be17ef93799f3fd6a58b47e2110a243ab56b43fa698b497fd2d3b0d6d9ae006658f336d59563cefc4a5b7d22985ff99881f10908b7e3b13e17ccb7842ea99a98ba1bf788aa6899e4d162b2f82e468e89d9ea441f6534d3475faa1cd6f272a5bf56878823eee3920288a2e12fee1f8f0b28f62f10e5faa4efb35826b14da7bbf6e29653a5ac0ec8e8a1ae3edc3246174a5249ebfb5ed46b252426f0ad2086c487673f2488d2687c558f91462e5459c5c6d1267d58e0437ee70d820d9f5ffc6d7d0d15c258559cc437f9e52bb99a5f49e74eb1dd3bebceb259240b4f6e02190b6663e54a1d4a70f6df7b7efb55133fae7b930ebaea034c7f7e704c4311ab189f729a856f5d0b4b5f8d533b5412befd0f4f75aec3bc41f535bc2dbd0cb7e6e5b02fb5e5ca86b14ec0ecc49c72423a01cc6c18f179522e7757e83374862627a53dfcf00d91b16e89b81907a0d050675be6762a5f092bcc4d5c6881dfcf78c47ca3560850b12ccbe53dd79ca31dc22560fc86b58a73ed1fd1be51575e4f5f1c314794f1670c3df3f3c4fe262d539592a9b8586d28edc0c2a0aaf5f92da1f9c9e39b810a5820a206f55494f3294aaaee2c13c1e425925e5178ca7f140733d0af81cb33886218c17c8d184853065fa612692005b7ec1ef6b7367505221844a1c1baafbb3a8cd7aac2e21ca36f4ce431d3d7c5435c156a51521083447080ab5a0bca0a141f90fc15aa13e7aa7c793f4e422f3337d65c880845687605dae1a11773eded0eccbdb0446690f6626a2272a9d4b534d610275524e36d1d88ca69154252d78371c8928086902b586ab6f92c817b87fbf4d823200a93b1cd74fab4ece18590cb4df4587c70522137da88f3a3773083950cbda6e324516f2bfa0364bcf4dcfd6a671a9a33999d8881dde17921a15b52e39cd977b6355c3625a8279a3dbab655346aa3580930c5af02fdf9e6f9a783b5cae1fdc918a114edfac1a6d1ea6768de8da37cf43672e1f8f6d12fc8a3accaabf985b6cfa8d936aa5737880e4aff1123fb9c4413f55a2b56160e65109a6993b633233d1745edeadf07e9124de97508d9a4eae86c4af6b2ea97be1e5ad7692ce5c731476b0bb38e8c5cb1b975950d835196106cf1f84f6d6802123a2a565e366a7a89fbcf94de778b1b378651e967865b4db9cc6709ade182d39d679f8540aae730c3a3a6b6bcc3b564ce455e9a94b87ec8d6fb21e87d395a5272e1a0664ea9b9629cba31f9699e40f0ece760d35a5b914a8a2bbdc42969db10700812ef1b8b2ac52eac680eb2472091c7afbf99f7893a9482150ef56fe79fdb5ff291a1d9e57d11e947e10610ae2438c07d811889ebae391cde862328293b5a088b871f0c34a9a3c8eaa5b1d3b7d58db80003633fa174593012010eaaf4d707f6af83a2c7cfc58085d9eea8dd5354cff9bbadb82c08cd18f28a67e1bee597d69058ca88e865c9e032e9170ae7896670cfb5e60869b0a751871c834e32278cd220bf23a4fe47673c99ff250a4924257fdffe4176831e4e9e79c9daeb3113780609848e3e842446d69e2ed2e91e97a4fcc1ce40d7bc144fa8506348097073669545314e94b48f352a21693d2b67b6d24c0fe63b65408c0c1f70af8b5e4356a58ced970234b78b9d6e7d6fd242cff88970dd153481195a9630b02a64a370881e9b15773795276a1f1307bcda36f9d471fab8e9a315cf89be530fbe00167ee147cc5ca3262a30bb27549a960cd6bf9cee7e235852883c62dcb8d403407122c13ea6570e76dbaeb98ad3c9e7dc9320c700dd84deaaf1d4272a4ef7aa995d4207d816a59315ca24ab7ff12ee868d93e4ae487442f8e149ed750f2ba1b9525404fcb8cfcb565e32188b197a9c5cbf2a024d16540538bc64b20ebfd1f88add8573f3034e3f540604fdec8252ebef3fe168da423d214cf0a5b7081b9226f2da3a22f053fe4b9025681eb223f3aaff1f35f92ae501d8526753082fefb0b5d8ad4402e606d076c911709b04ed3aa34248e9b22fcf960f1b998a3b3e3524896f803a7ae4e295000d64b38383de01d5b9d89385a196e500d412ebe607cd535b9aab5735b810fc451e0976f4c411dfe400d09655df7b7a383649dc0e1e67826a52c512351c5627334530c38e4ebd3505168d747e629bcbbcd5bd23a11c0b0ec833651aea42be5e3c51779d7813716811d253e6cb2e8c04a35d266c3c6658a35835b9954021f03c72aaeccba7f61406dd233de37bc1348f2467cba55bfad3acec083d177391066e2199df9a098f45c9decdf524fb7d873702b52f771957d8848728b559c1cb8f088a1004f247f7e5e2f7c12024208a7849e141285f5c8afaee2b18e8ec23fe065484a9d5235d0a326ac79c313727143a4ce46aec4f7a561f3aebc83abca5e968b89f50e7d946157f77228782a56832fea24245e25c3b88d31ec379b2510d41156fa90499031bf4c3ff543c180660020cd37486066e467451b3d60e09a6a8f788d386d480ae08bd9f34998b61ba4d671ef730843f653c2db9982b9e6baed3e2b9f49c6986d5d970b54954be5728de1dc9bf820f57fcc7cdff98752ca45eb341fbf2a396849f91993810b99a1c375b14b8074fe417a0e677f119786c63c7c8535642356b0be38f22c5370d297889fa85ad4d96c5c499ab4e5984bad8cc5bd56a12c9e65b3f2421d9995482806e21e65a39c9507de4ff994e0e8ed97c6fbe29533528a78a5be80d3b9b679bff552e50c1dab98ca1071ab116e3fc13c262011f96b7206c6e30464a11975468fe0b69a46b5754b823892ed2c7967f66a4ebdda3d7cba3ed8c5cf85a288f45b9f9cfb94799daddda5892423e9578ce090175a4bd8cd800100a9b558f2d04c9fd34eacb46b5a9f134f4221e671fd63a868fd718479820ed96672ec2874b9228567d658dce3cbf8c9895d04a98c49b3cbde071edf9e0c80a94795e314b829186361581fd71a63c0307fb583674c82d727a372aa5587dc0592bd4cb081a0dba3cb4d1c003652506b22e05c9f0234f84568f6a5f27ba3a07e2067a0e1eeb2ab654dfab5d9a9d8167e0c4c0714744f2374eaf19bbf07a0d2471ca68311356181087dd31ace6c5813f2038f7ac0d54d2db2f908b1251081032da33bdf329131ad6f412048eaad1229b432a9f1464aae3c06c6ac1bdb3adaa079c606911e75a37286bf48cc41ccd1a7057124313aa49a02cd467885f9f1d6860c61908d0af6d6ae1e8c0a25d8ae8b30f887414e066b69f751d1c8771cd7ff46d2f2acc5fdb51eb11b81965afca50ca5924351cd300ed34ada613b36973fe25efea46ec1e9e4d5332dab5fb45ce21c0b43f565334e746edba9146c02a612f037f2daee7da96c543fe76dd985a90d4ff8ffcf5d4fa2b635cea2b4b2c4fda76ddd5db267471fa2dea81cc17e3b7d49639b3b11dcd2ff8aa27e42505beb0578c0311b63a664bf1a9d70327b6b8a0c9d8ed2085e6839d4a3c6db988b3f953e12879e98a2b071b3326ebc7869e03ebcfd36ac2b12119c75429075901c918679b3f7cae2139460d3d5f977a36312f02b0c0627cc5e91e2e3872413dfc419d85f4fc61ca9f3e4de33142a50bb346242afa018b4377637b847da29eccf95d302a0768c8f2bcd1222059dff249203890165fbf183630443a765d0b414e847480fbef4c5029e9b0172f1c3a0c100fa958eabe1d6abfcd04ac18f4c3281681da3c8e10d057cec4b260fad8583e527ed8648a95d52856b1f1bf35e2fff77250ef83464a849482792ab1e5ea620f614abaab2edc6746f0e242db1636abf3c553433649a055b47f4e2642422dea4125fbaa4500c28087dca50ece8fc4dc59c28a6ddf5ab1c1de60ae2314a886a2fa792fe5da03fa787c7d0109e28315732cf82271c0137cf4cdaddbda388312860af570203c795bf60f08a8274637edd270ff1b63a4e6058fece916a9864c7283363c08c2abf87a150b984489b98185640df014aa699453c2fc1b027e046f16b61d118b7680d20e4fdbc4d89bc85bed7ad5003ddb49605afa7f4065e92db8795f28fc3809e15517328f9ecced116d4a94e87cd4afc1b163f8a356ccb869c57b836c557aa0791e8f345d69fb992f4052911fdc3dda93231ca6c6e252e9436f968cbe73d7ef05215934bdc44f04450daa6bafe272730ae2114ff80226ac695b48c64c004fd17181cf211609f78e26689b80157ad8bddd5fedb5fccbebc2c9337b55645888c6e067775054a64c624ec39dedec14003b409ac6a4c4f572a7ce6965031b512c28650e086ae18116f858cabb11ae39ea3c42290011febe27cd32984853cd403ebea6a960f6ff02dd38c251fe99d8f7067e31873e3fea65ecdbdf4b809f1d51bea1b1e7043b417da6bd8b65392239efb18751a67e3ec8f2b354d92cf6f21c55e4bee75842953f43c8a858fc3cd12e324a1273424a9d2f3df6b67543c55915bce4a3a8e5a429923a6f0643ce9df96da3959bd9884311d1739526cc461fc4dc22c0e732e75aafe14d9bdd175fa77772aee9daf9470f1199a382cf4380bfeaef893c8892fabbea4cc4f8b231b488ce64d1c91fcba4cbe73e06e36dc1632c0e91976f93c84c3cd27383b2c3bf54567048e92cf2cbb0eae8e8c666dd39a9e8ede55d4140540f0498b996b215dbca48f4fb6c3e30085bfc44a7d62749cc3b907c6251ecea5c101310c59965492736674ff0f6f68a30aa1902307942f10b4ea04c674a7c34c5384df9c05e1ad0c03c1921459d951c19d9622840212428b46ef79117684a6bf618579a09dc2389fab07da0274748f9c9e7d6a0544449833b3872e19776258f89d42e52b29eceac559f24f68228a5fb7096e369c98e94747d856600e3f515fc4524c8d7b25affbd0211043ab9eada1a462ce9c0c078c70694c1751341cba44b52e4bd46dff53f9cd832b3baafdcb6a0130c79e91a74b122517bff39e2c2c1b0d65e68218302e8c4c37f5e2e108fa453e091d205fc7f5d72704cadeba3ccbef1f67ca5f99554442e013fa255a148ab40005252d6fe5db33bb95b4896db8fa81947b12005f58b54ae757b215743a11cba4b37cbe900995736ccef9e1a4b91903eec99ea1159e983ce1cfb87e4023c93b2751acc586b29e6ee2faacaa33df66494964e88aca97d5b626b05b8e8faaf308f8259bee6c9ad4ae57196ae4c73d194bd4067cf03907b716305b6cc545d157a1ee4b6c1273daa67a0733efdd36428cdb2afb8c3923da59772b3b3cdeae065ef6bce6b060442b4b4774fe3461cc1f54e067ef7d68427df7cd15df33347fe616b1a2161a71fd629c0cedf7b8f697b2e069cce18dbd0e225ffc78f5e45d193b7ee085b615e25c838f84325ba06941c738119c01587ed720f317599d0200218e1d9d4be665053d11bf787654ddcadedcd726ae71a4d2b59a3da6302276b4ce0cb1139e53b3b028b43ed51d7d2b1684fdd5e940c5adfa85fdfe00a9afc94be166dab25be9dc2851a5897d882e5650d31eb9c088c4862b6c174f55fa6ed93a9bc6b5d996751c0819d0b817ec8605b172e9f5b207be93787f9e63b580e7911090f0ab11adacd511a0c8d4e2a816a7af9693137c18a1a4c8e3396a987b514cdcd6af5923a8ae8cca840139f25e5714ed47049e867c9f450a4f2cd8f06f0f312f709f8c3b643904e295980caef1be9e70025e25680e79c6ed2217a5b6f8f257f89ec03fc948ccce3846c6c82feb20affa9cd40e6aa3610549a8156ce441c236d20f0dcf80ad45d1ed173dcca106bd0ec07937a1214c52c55e791a4916ee4ac8fed073b38f078f6aa4920623a7f650a2b5a88243d61fe063e1c87f270d4eda5ba41e342d69c889f2cc681ee02a2da392012bb76055d176fc0dc523342137b0eea938cd173aae98cd136c3f8d016962710070fb42b3b7d204007a70433280d98a6c1ce6066caa8e2e04036fba557615b586d24141149471a8b4a651a148848ebb9533c311ddd1904051a2a16ac38198308d1e2581bb6edfa54b689b95aab2866cadcf35e35ce5514337f9f135b0754d91e3e2b5bfb1cf0b3694691f591b0729ef45bb89e3fb517ac4df12ddc799f0eaf1566c4a240d9756fddff1aba68597e0447871cd9a052f1bcfefb95d9fc5973526589e55146c83aad90f0e690ac58ff2200f6d3f9bbfbb2826b659776b7c992ac7457b08945807ee22966618fd83718246a22783760eb59a2682d9f66ea453c2524f891401ad6f791ad6d2f167c523f79b687d82ce870abb5fb03e74a5c3fc2ff6a6af02b69e7fede620a1240cb0276788576490d328818a4dc411b602945b9b8a23d257a85f33d0bb3aa47c265f7b0d111debc54834b68962fd6708bf89d0a8312246d3fda5c306df3c54f12d07b2a01c09cf1cf7b3432d90c8b4fcd7add6cabd3e040e9ab5bbc4520f2a0c561013a6e5798cb6a75f396f8ce2e7415cdbd17b85feb3b1d42102a579428f68cb31f0eafe5b793cfe8ed6c3c4823a5bdb39cd0e92dce16879d92d7a4fcad10ec3b97bb978ea8cf4ef3ac52af9b217f8d6f20c49230d912fb5b27087402dd9ed39195b795f335a71f776b06a86a367b6c5ea880f8838197679f2cc3e660130ebc0d8f46542cf3af475a82b637f4113bb2831d5bcaa2a6ccf64151f70f195d4edd1834d17627aefd869519bbbdc34bc5a74600f4e73ef308e20e40cae5c6c00232f9d895067a26d505c98dcd393891f2831e484be336c4d2b76865dba85c79a1bc8266f8608c2b69bab60353efe0fa310093a9344832fc4e903260af844f3d690ac8ddf73ec43f98abd0c6794bd662c9576ed0eb2920b17e069c46cc682496b3a163fd1b27aa38be0cd1f2e891275cefaf96d3f355b7bb7530078c290d3619136793c13fc00d8ae1093cd53af0eabe86e132df4e5f3f106599b61213b671af4bdf8727fd12a880d659c2a7e11601dba84708236d64b7afbfd8c83991a03fbba4e0abd8e98ba8e2b814ea3f5d29a02a82134afec7cee0397e1c7736170263e313247a01c8a8ce4c79850aa4c101f4370b124449cb82adaa6c8a0d815b6550391b31c60db3bcf688cbd2ad6d782cd5c9e7cabc9894f296dcc3fb9ee038dd5479b9098d42c4d0000d38762c8ed92d08c3029509414ef4bfad00c9f5925a69ba75ed4bfbbc551f1a962afb3d69ebfe1fcb24ecacaba4b04ca52705819481665f6f8929c53099558d640747549c3cb0de6e92e0eb67ba1898164074281870db1d7b0cf564d5e8d3a116a870167a722556cb99a4017575613fbe59de53412c1ee8f00ded9fc5fe91320b45faeefac6e190236bbc0607d09543f707c8254009fdf93f47f922b5b9b1616b47de2640f4b93f901822b893486293d8b2c720a45e118969746a25cecfded9bb646a48d989d536653e140ea3962496de2272cc08b91e187af04331fdd807dbf27e2274eea350a41b4970b2d5bf7183405fcb9fed12f3e6be788ed772fd8d00af31fbf47b796ffbd82a0c554400983630efaa4faffd5b4ea3324d59a2cce7a4be12b5a05534729f295da687ec07d19079cb2f88c1e00cd914837faba43b35afddc2e5a7cad442cbdd5ef77e29b74b2ec840a443858dd4c254f836fbba7329404b3b2384021b62027738550b1f6cd1d849723003d789550a2e4028a3385da83c706a531671a575010181191d217cf9cab4b2ebdac939b57a31c4254d9590162c6be188e4f117092b5ef93a373c112b9eadc3ce5a05a135ebdd67b2d95d5b17343c92578c4c0b47f1bbf2b2df880375c7caf86ac986cf1d46cc2bdaa38100830f8a6a5b2a759628ad8e41fabe2d6893ccbac4d7e33a7f6bbccad3e620759e629bebbcc9212c116d920bb8e1ef4720decc6767b2a00ee160d0f61b37f49b575ea2b26908e806d4db2434d3d38f62d58e3d44ac3ffeddb3e71f4f84f8d376709cdb276c0e768cefbdf7d8db5dd4d2a9e27291d1dd184d3fb467706580a1672c00c5de31c740fd8d5fc82fbde18e3ac0c709811a08d2ada6ffe1294ec888860947c6efe5491cb427de0bf987bdda71c0efb124044ea6b8375ce10acaa03d6163f6013a3ca7d3dc8d9ee79ff428a1cf6df5e7c74adac00656b9a972e0f7b826672ca2f3c266cffb78cc13438fcf5e5f5cad2406b433f0da95ea5ec8c7857927385b1e3088237f3a728144698ecaaaa41c4a986aa63f205a6da3d7b3180ac53f2fea2c0ec968f967cc8552d9df43cd58df37f7a7dd378d08b3b364769e3d431702c82ab18cf56c6ecdc8723496cb3d0cd9cf44fe8203907082f07eb6888cc0168dfa6298d723db5cf2d57c1503e370a5f7e1297054d05f698f2066d7f8803de34de928c1ed0b3a51ef59522308ef371a48f76569db9a2b180042600f25337fb3995851b2c33a37a5aacfa93b0ab1e360c872b614f506ba1b18660ef2ac49b705b7929cf8cb1f555ed4134e8cf1289d268ab6078c7b580c643e7583c232c39446bd42a8dce4fba458dcd477bd08c7b987e885986d138b15746235d6c3755aca4f1c6ad6e30ac44ef5d22a9552d63dba0442b514a922a70af1e1f2c2c1b2074869380cd74ff026fe5c83f1316e5d35cb3682a79988660153aef885c89f7142374f6b4326a1104d453abdbbdc52c87f0d96954ba6587da3d62f2569679c0f12d22a1a27e88a9a4b9eb3c1dd0054d88c7435a99433dd776e61a000dd7a55bae0af83c5872a4918afa0e775dadecaf2db49ea2bf876ecdf05bef73c14d38481e6fb4bbae5af223e3cdb136e4313bfdbd63369f09e1dd39c600544b1253c9c700bb9be612867a851ebb36e451afa70da9ccdc3b5e7b013b89e531612c4ee755e6be8052cff18676d7fd1a340f03209905afe0b1805715fddd980a69b85a93840b1a98e8c6c51eb436a1932fbf4d97b8a204c71f0614f02e4acd4cfaaf41ea3b2cde23de62747423d856173776766a0cf6a5d0745046ce73a7b5c9955a02ac68497314a45af47f3b3f661a730abe1228dc80b7794e3f1d0cb123c65eb29b934d2914984f6f6e01e5c5876b2a80a7fad0e01c02a2b14f4f972d5bc02d5b102eced879bdc5f024101cab77a61ced9189e9ac69a1474534da51381eedd517b5b11f04d2848ee21af990364841483c849891cb4c81c28ba20632605e4e17579c3629cea391959670370c8410a3c0d441830a47a85cceeb7b6d76232263573020160165e42b67449a347e902c94a45ffc83e6f80743ed2ddad39f820073c12277a9c45e1c0f08ee5c205ef92c7862a99a929973c9ddb764c5cba4de22ead5f079ef77cab6c5aa9b2fe0a0c5fb1396e9a95f7b4a2385a4f1521b87d6a8aa6e64bc0535fee11f4558ab1b1b91085d1672bab874fc197964eea4878364c18db27eb7b1782448e2a0d859bad1454e6773cd0f69ecb573a78a00784ddb44d02de7f406d8e2ed538f81c2029fd92821d46978f01a7498d8209af9f0afed4e5c4ae165effb2f6a33f0718e5d49306e36012e31e2dcf5eab93181bae541c04857b3be6b6c3bbcb92e8a537c24e109181e099f3fd73ba1170188737a40e2cfb6285a37461eb290ac87b6d77f251fb89ef99639e7bf78e0eab97dda11e0c2115eea08a2839df315480df37f748ddaf77a9888351b8213dc1e2db134cd0f449f89ee7c334e8ab3eeec8077907e3af55ca787d27f3d5e4b75aacf6be66676e5f6600d6624851904ee35211a1bf21dd022dc81210fcca10ef721dad591a705eb2c146aa5dc2ec1b2d275d624b869ab75aca1d93fed9c53b3f28336eb90ccfdc3fec71c7dc56e805fd56f6121cb9a0a1c57026acf083a825996fc4eee05c733dd61819116681edd1a0bf3eeccbade8ea940f1ffc49f33e994250d92baca78d84f0793c066e937196102fb6fec99992b2155a38555628beaf11c949df24d350d42dc301d71e5086e279297566be46e7acf9628470755c808a0d546b1445e05ade59d16813b7eebf6f98564c2b47ff0b0587b9b69b6bdc13da2f2d226516688e69c233b959ebbd7e13578e3dcf68285153d996751c1d7fc809471153bac1026f7e981c8205443ae09f7d50b34fd1135bd0140370f8f7c02166d0e2498943ce5ef128114892f77a6e1d80bbf0698d27f600e7e359b0aef4482af7d3f9c7ec0096f0d1f6c98ce4ac472eeacd7d6627fae6bedc68f55d2ea7ede4bada3fb005a5463fecde4cd6810912da7f299e0e331ddd888ea373de5325984ea08871c114c778642e94a8b4f49cc38fc05d7e55cbfbd8bfb00218a810dd65ab430e38d4dbb1f1125cbd2c8684b27bc44612591ea4ab454a8bdbd3fabbecab54e8ec632f0097c96f7adfcacb0e8de79dbddd6aa8b53cb469553eb3c6d1d87ee688c848b790d57a8c1ca7eff95fb8b7633ea2157be213deff1854638a5bb75c2408d847e777281dcfefe3a9b366f39892cbb2abc6aa25c9b19d092712dbe63279a63e8e78dd0ce84f1dbef96c1f67a04e2962eb61ce5f3078d38f2307719bdb2dea5f0c233b03ca9f1d8ab0a11db215736c255b4ffa239647c2f9bb3ecd49939cec37e355025b69602d5198dd5fbd10c1018601702d99c803d5ffd42552cb207003263afd9ba9f631cac583d08d2a9496dba5e3f31d0cd2d26048b5223037340af5ac9395199b0438f41f7345c8b5611836756687b52f1c6f491656c0b8ddbf9a9ccc1f0192122b5ae258698901dbf1eb17052796799ec1802e7513c75ed8527017c124cd225091129f54a1223e9b6a9c008725cc2d4c7462651288ec82471490e3693ae28f5881011c040560ad3478ecdb99207d814f92f44a749cfaa770bb80a710b64ef3a2b11b0cd8cbbeab2e2ac55bffbe093fc2fc835347b22ac430004cde10fdd97453815a8fab0f8d775f4d382e7829bb1c6dcfac742260e1c3da9720ce2c71ae4f72b7c97159a4c6e811cfee2d9e6711cea62c2f62a2835aaaef180bd52aff4e355dfcba8ddbd940e624d3a4e15088c62b9fcca3e6863f53b21490d9e21dc1153f29ab1994a1bff9c3acc0a663a493a4f3e62d197812bb093b8e90302fa6b7ab35f2262b7feed9bde0e7bed0a23250a59566afceb37937aaa96064366ea4470c61376cd63a7660f984e5f7ae7ac606ecc618fd33ecceb5769cee6f3af058d31cbb39bc92fc13fe34e656c9bbe6ebbb17d4e7f52624b767f25ba130fa0f243b94efcec99548e602de6c346d70bc19888b816709b7bfd9a82bcb5c0d215733f11a78c4ad16d825445c0da89d0bd2c9d95171939463cddc127b6cf85b05f04e3a0a6f6adc1f52b3ebb7fe9ac04b10d372ecfe31e41be61df87d81382008169236bb09a4c3ce920d378f60f07b2e74d2c29afdd453dda91cdc56327f48364e862be23e609026825db5897113a878981a6d9df164438a874d4844d711ddb525f3a7b90cc559276c0976f6341698c59e501e124f41ade649f60f87f25e0bd296be1bfc47bdebd29f90cf08c637131636a92f22451fb58daf41eea360e123fc898470b2075d396c5db2a5aecbacefda53f7fada2d998ae9d4b8dedc377a8f7c21ca1562629b4211a9aebf77fd485dc2fd57b1cfa5c6dffb1816fc8c578c8c8ad6e124d88aba079190750f493f27a80feaeed6ef37380346ae59af2c6a44e5943d4acfdc1a0fec8fb5366a9c9c4d8b89b136daec415a0d7a806aa7552c9bc913e16584e977a0f5c80d670affc99fc92dbf91ee0c54357672e13575394b4c580d48440e91621f429019ef3dffa345fb782dc01863d82c545a1ba6301527550aa8c1ade7d862f48b96d15bc431107beea4e18331117847fa0ae473b20644d91dbd1bc50521453116a876e22a62b37a4c6320ca3aa23bd537e8c11d5f7e8995d0bf6d14e69907f7022569e9e9dea165b3913884c4ee0796500f3bf06ad078c987c2b5496d9d5c601248742cf0ff7b5d6f308071d8b75c53f878ede110b1fe2e268bcb6b2a85f7a82aeabda9aa4257c1ef356e440e7b0a3fd38b7c87565ae63de55d4ead9776839b0a6d1ec2e9e082b2954413d3585c7373d488731b362eac556732abe055d0d003e6df7211644a5c603979eeec652c074cfba7bb8d5d9321b8e2af06134dde1231af365c10ea2d2de7a787d997808e614baf0c99d274f34662dcd11450d15d9684bae0b08af4f84dc885b2ec6b83725114a9002f7a1985179946ca915b69ba51f4df4969f783062fa575d60a559b3940c3bda4bfa33155cfa2529ecb9d38985c509079e14305195cc018dc0e72ec01e7eb27afe53ca56071cf785ed9a7c01fd83974a4199257e6545fa3ead3dd08f1a79535a4b3c058b1f6c5ce99b99e3d769d1ce80677eb8b543472b9de0aed670dd83041bd5d8269ee67bb65925a97b9f10632286895351eba0bdb8635ece0044a28a3dffac7ed1ee4972471202929693cba6495d9545c974c2522a17fd2a88531e1e148233eae6ff73b12e0cab221a10d74e90bb67a67ecc6de5a1b24e75577c407ac08473232a6a8d19407f7e6dc6e8931c1bd4da3f4af8bc92a021ae319a2401245614fdd7cfa11573d946ea4dc05325a6f88a19a5c1102e78666ffe6ae9c636f011ff27ae8e3a805d5117c61e8ce4289859975eaca73bd93fb1aa8b1ffbc930b0bc1ac40e9cb86715ca396150d9f3cf44995687bdaeb75f7b7b031c1be655a9927bb45cbba70cd4d6d00bb040b39b543cb204f693b380b7394ff3bbd323b4b6e57b17e9c359d0c1b6ab5ed6e59a90c6f74a494a7eb8eccb6c355f2dbf502237f533d5a08da70b7088ea4c51aaada630fcc564ea392c4b77e8af8ca7a742f33ed5fa373e646c934af47e085bdb1e30ddd85f4c0f1e144cbfdeead17ec63f2ef9a07c445341106dc61b1d439aafcf9a523ba5dbea0bc1d2506ecfaf82a67cb33d03fa746c498cbcdae2c4238b0ebac163cb213e8ffdbcfa833067413cc1f2f37d79c2ef2734ef10acac78c1b9e04536ca3beb880d681e508db4d770d187199736e5ada3590f906b4b0fad4f53c231bc56753b01fd930e2caa70803a1e84b9eb6c860019c88fa4accaf2946b3f4067cd386daaf567b68619595e5d79ccef945f81798d11ae48078699c411fd8cfce17556da2a7699377d0b71b0e1c67d67ee6829ecf9b2eaf8c0304a75677fac044579fecd75e25adff2aca80fe755255489c198749519b0a5882a1df0c11caa5a6024e008f40b8e4eb27c24d2b50aaa348b675a72fbb9e0ef551532947378115a183cfefbca919888e331bde1f40fe5f067d9f1a2d933a657e4022d899ab07341ecb50b8b34204c80aff52be407a2df87bf768b6381e45a5687e1a76f5e9d9c526df4a07c18a3a43970b920630c32fe929d9448eb7062c8bec24e3d297ebe3f9f0fa03464f7aad5f58cf402a1aa0c959db1415be933ceee80b97a5da4c216e88abd0684c15e680947816076bc1b85bc0495b24eb6a8a1f92cf8b163cffbd56e51627f49b3d489b10481342dcec5726569e771013253c05db7975fbd63d56fc729e30612d846a0bd1542db1639178ad83a17015a153544fb15ce58afc751e50a7c13b7d1eb34397c0c995625aa78c0a03b554aea60ea363909b9b7e1246ce85d20216988f5029b30da0bfb95961d82d7e746c91c9863ed5b9f0ebed6722e566ba48f6fbcbb602c64a5d4c63a48b54ecd983f49908a5f8bc05b5376d6614150fec5d7760321cefd3d3c30d09752ba6d98cf4b4e9109487887122122ec7e8a59a5607e52160d7a81bf887d2f4f4ae73af55bc584c34d81eef41ff138322dff32bb3084801ab4848b8821a9bb85d2a935a8df2973f015c7aed7107811e300dbcb2007903e3521b2f9d0f0ced54753e7cbc0f416bd160c793f3079a6599c3bfd763065b5ebc68fedd5e8726ac0d7e0b6434e03aa50992508c035aadd715d8f92151c529cb8f217e96b18c6ed8a905654b572a4c1834af7517192288946eaf7a53acc5d2fec8b409828fde89f332955848c02505a32c715b50de9b49aa80793ec331ee3b109209bce137fbf89d991de8b5383b57fabded7e28079182bd54b6eff0c8f249a826811887c459b42cdef5509085fdaf674f40032c39ced118c16e26ca9ac3558e7408b50d967c172c50598e16d89725951194041685fe85a53bff4f8ed80313d0545c01ba9cac3850355581647c1e0fd08d2981a6965f0999a4b0042e669b8f702686f6ac13902d07854d4d817f39a77b4ce8f48cd50db4facca8f68b621cdd633eabc73caa7d5216dfba2e894a2eb9deb17022e3e4f3f6aa3baf615b1c358e6082886702229cd2dca8cdf0b41c5c985f9d813d50ccf58a104432b46e413f5e13556cf95e1cec4f3336e9ab8d9668b442364464d0915a72379db10b2f6186c5caf24852e24f2c22c11699198c451d44c8562d77c14feb8d6ca7ae46b6e9568e7be3ee629d61d02e082873b615849b1d45ab9039e4126e693755c896761375ea594b56db6f3b8c87fb925a52ebc24925fe7dba5d57061a124470f69d42e11eb096a90b416bd8a36d79a68dbef4614b6d958f5e5fc348b6becc4d5fd5fd5068947ad61e0f3f6d0628d23ab4e8f264303911320e28b2dcfaf4e0d7c7cfd024a5cd020ef48cc5d7c95bf7e1d716a804b921ed3baf2341e600d41e40751d76a62ac6c8f47a9acecbaf8d80fa95b1a3cd1803c8bb13372397bc611f86e0aabb262f2a814c2ebd936d69bbfae54987d06afa42e8b77a771e92f902ff9dc9d35870909dc4bd4d08e535be2e2e074faba619590a4592d2e13dbf92256dd64d4a119137530f525c4b01b3ad37c3804476a0b5a31b09776b995a80b86</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">您好, 这里需要密码.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["随笔小记"],"tags":["技巧","笔记","私有"]},{"title":"实战 - 分析 Java 项目线上内存泄漏、频繁GC、CPU飙升的原因","url":"/2022/11/02/5c089f9f.html","content":"<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>我们的 Java 服务都是封装在 Docker 容器里运行的，今天早上到公司发现有个服务内存跑满，<code>CPU 100%~500%</code> 之间跳动，第一时间想到的是 dump 快照到本地进行分析。</p>\n<blockquote>\n<p>这是本人首次在容器内分析线上问题，遇到几个坑，特此记录下来！</p>\n</blockquote>\n<h2 id=\"分析过程\"><a href=\"#分析过程\" class=\"headerlink\" title=\"分析过程\"></a>分析过程</h2><p>通过容器监控工具发现 A 容器内存和 CPU 占用都不正常：</p>\n<blockquote>\n<p><a href=\"https://www.portainer.io/\">Portainer | Docker 图形化管理工具</a></p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103105726.png\" alt=\"image-20221102113101648\"></p>\n<h3 id=\"安装-Arthas\"><a href=\"#安装-Arthas\" class=\"headerlink\" title=\"安装 Arthas\"></a>安装 Arthas</h3><p>本来选择使用 jvm 自带的分析工具进行内存分析，但是我们所有的 Java 服务镜像都是基于 <code>anapsix/alpine-java:8_server-jre_unlimited</code> 构建的，此镜像默认是没有 jvm 分析工具，故选择阿里的 Arthas 线上监控诊断产品进行分析：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载 arthas-boot 启动包</span></span><br><span class=\"line\">curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br><span class=\"line\"><span class=\"comment\"># 直接启动（使用和目标进程一致的用户启动，否则可能 attach 失败）</span></span><br><span class=\"line\">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103105737.png\" alt=\"image-20221102155819797\"></p>\n<h4 id=\"坑-1：提示无法找到可用的-Java-进程\"><a href=\"#坑-1：提示无法找到可用的-Java-进程\" class=\"headerlink\" title=\"坑 1：提示无法找到可用的 Java 进程\"></a>坑 1：提示无法找到可用的 Java 进程</h4><p>主要是因为基础镜像是 jre，arthas 无法 attach 目标进程，只需要安装一个 openjdk8 即可解决问题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 openjdk</span></span><br><span class=\"line\">apk add openjdk8</span><br><span class=\"line\"><span class=\"comment\"># 再次尝试 attach 目标进程（注意：要进入到 openjdk8 的安装 bin 目录中，默认是 /usr/lib/jvm/java-8-openjdk 下）</span></span><br><span class=\"line\">/usr/lib/jvm/java-8-openjdk/bin/java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103105741.png\" alt=\"image-20221102160738482\"></p>\n<h4 id=\"坑-2：提示无法获取-LinuxThreads-管理器线程\"><a href=\"#坑-2：提示无法获取-LinuxThreads-管理器线程\" class=\"headerlink\" title=\"坑 2：提示无法获取 LinuxThreads 管理器线程\"></a>坑 2：提示无法获取 LinuxThreads 管理器线程</h4><p>arthas 无法获取 PID 1 的线程，原因及解决方案如下：</p>\n<blockquote>\n<p><strong>为什么 Docker 中运行的 Java 进程 PID 为 1？</strong></p>\n<p>在 Linux 上有了容器的概念之后，一旦容器建立了自己的 Pid Namespace（进程命名空间），这个 Namespace 里的进程号也是从 1 开始标记的。所以，容器的 init 进程也被称为 1 号进程。你只需要记住：1 号进程是第一个用户态的进程，由它直接或者间接创建了 Namespace 中的其他进程。</p>\n<p>每个 Docker 容器都是一个 PID 命名空间，这意味着容器中的进程与主机上的其他进程是隔离的。PID 命名空间是一棵树，从 PID 1 开始，通常称为 init。</p>\n<p><strong>注意：当你运行一个 Docker 容器时，镜像的 ENTRYPOINT 就是你的根进程，即 PID 1（如果你没有 ENTRYPOINT，那么 CMD 就会作为根进程）。</strong></p>\n</blockquote>\n<p>可以看到，启动 arthas 之后，提示没有找到可用的 java 进程 PID，这是因为容器内只有 Java 一个进程，通过 ps 查看 PID 为 1，而 PID 1 是特殊的进程号，不会处理任何信号。所以我们要让 Java 进程的 PID 不为 1。可以使用 <code>tini</code> 占用 PID 1，我们在容器中启动 init 系统有很多种，这里推荐使用 <code>tini</code>，它是专用于容器的轻量级 init 系统，用起来也很简单，只需要在原来的 Dockerfile 中添加一段 <code>ENTRYPOINT</code>，用于启动 <code>tini</code> 进程即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM anapsix/alpine-java:8_server-jre_unlimited</span><br><span class=\"line\">...</span><br><span class=\"line\">RUN apk add --no-cache tini</span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">&quot;/sbin/tini&quot;</span>, <span class=\"string\">&quot;--&quot;</span>]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>添加之后重新启动容器，可以发现 PID 1 已经是 tini 进程了，而 Java 进程变成了 PID 7！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103105746.png\" alt=\"image-20221102153345994\"></p>\n<p>再重复之前的操作，使用 arthas 进行 attach 目标进程，成功进入到 arthas 的命令行：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103105750.png\" alt=\"image-20221102161204036\"></p>\n<h2 id=\"使用-Arthas-诊断问题\"><a href=\"#使用-Arthas-诊断问题\" class=\"headerlink\" title=\"使用 Arthas 诊断问题\"></a>使用 Arthas 诊断问题</h2><h3 id=\"诊断内存问题\"><a href=\"#诊断内存问题\" class=\"headerlink\" title=\"诊断内存问题\"></a>诊断内存问题</h3><p>使用 arthas 的 <code>dashboard</code> 命令查看当前系统的实时数据（默认 5s 刷新一次，可以通过 -n 参数设置）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103105802.png\" alt=\"image-20221102163552087\"></p>\n<blockquote>\n<p>此处截图只是正常情况下的，今天出现问题时<strong>老年代内存占比</strong>达到 <strong>百分之 90</strong> 以上，<strong>Full GC</strong> 次数也多得恐怖，说明有大量的 GC 线程在运行，这么多次 GC 的情况下，那些垃圾还没被清理掉，说明系统已经出现了内存泄漏，接下来的工作就是找到那些还未被清理的垃圾究竟是什么对象，然后解决掉！</p>\n</blockquote>\n<p>要分析堆内存中有那些对象，需要使用到 arthas 的一个工具（<code>heapdump</code>），这个工具的作用类似于 jdk 的 jmap，都是转储堆内存快照，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dump 堆内存到指定文件中，--live 表示只 dump live 对象</span></span><br><span class=\"line\">[arthas@6]$ heapdump --live /opt/dump.hprof</span><br><span class=\"line\"><span class=\"comment\"># 通过 docker cp 命令将容器内的 hprof 文件复制到宿主机，再从服务器上传输到本地机器上</span></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> 容器ID:/opt/dump.hprof ./</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103105807.png\" alt=\"image-20221102164606224\"></p>\n<p>导出的 dump.hprof 是 Java 的内存快照文件（Heap Profile）,咱们可以借助一些工具分析内存快照，比如：<code>JProfiler</code>、JDK 自带的 <code>jhat</code> 和 <code>jvisualVM</code>。我这里选择使用 <code>JProfiler</code>。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103133248.png\" alt=\"image-20221102165919594\"></p>\n<p>由此结果可以看到，<code>Date</code> 对象一直无法回收，个数达到了 <code>2亿</code> 多，代码里可能出现了死循环，不停地创建 <code>Date</code> 对象，只增不减，导致内存泄漏！</p>\n<h3 id=\"诊断-CPU-问题\"><a href=\"#诊断-CPU-问题\" class=\"headerlink\" title=\"诊断 CPU 问题\"></a>诊断 CPU 问题</h3><p>通过分析内存快照，猜测可能是死循环导致的内存泄漏，死循环导致 CPU 居高不下，通过 Arthas 分析占用 CPU 高的线程，定位到具体代码片段，结合上面内存分析结果针对性地解决问题。</p>\n<p>通过 arthas 的 <code>thread</code> 命令，查看当前系统的线程（默认查看第一页，按 CPU 增量时间降序排序）</p>\n<blockquote>\n<p><a href=\"https://arthas.aliyun.com/doc/thread.html\">thread | arthas (阿尔萨斯-线上监控诊断)</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前系统的线程信息</span></span><br><span class=\"line\">[arthas@6]$ thread</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此处截图是正常情况下的线程信息</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103105811.png\" alt=\"image-20221103104908660\"></p>\n<p>找出 CPU 占用前列的线程 ID，通过 <code>thread id</code> 命令, 显示指定线程的运行堆栈，排查堆栈上方法的代码，解决问题！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[arthas@6]$ thread 64</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103105814.png\" alt=\"image-20221103105238315\"></p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>本文记录了真实工作中的一次线上问题诊断过程，代码中因 while 循坏条件设置不合理导致死循环，不停地创建 <code>Date</code> 对象，导致内存泄漏和 CPU 飙升…</p>\n<p>借助 Arthas 这款线上问题诊断神器，能够快速地定位到问题，在容器中可能会踩几个坑，好在最终还是解决了问题！</p>\n","categories":["后端开发"],"tags":["笔记","实战"]},{"title":"Java 常见面试题","url":"/2022/10/31/e5210e5c.html","content":"<blockquote>\n<p>面试题节选自：<a href=\"https://javaguide.cn/\">Java 面试指南 | JavaGuide</a>、<a href=\"https://r2coding.com/#/\">Road 2 Coding | 编程自学之路</a></p>\n<p>每天一记，始终如一…</p>\n</blockquote>\n<h2 id=\"基础概念与常识\"><a href=\"#基础概念与常识\" class=\"headerlink\" title=\"基础概念与常识\"></a>基础概念与常识</h2><h3 id=\"Java-语言有哪些特点\"><a href=\"#Java-语言有哪些特点\" class=\"headerlink\" title=\"Java 语言有哪些特点?\"></a>Java 语言有哪些特点?</h3><ol>\n<li>简单易学；</li>\n<li>面向对象（封装，继承，多态）；</li>\n<li>平台无关性（Java 虚拟机实现平台无关性）；</li>\n<li>支持多线程</li>\n<li>可靠性；</li>\n<li>安全性；</li>\n<li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li>\n<li>编译与解释并存；</li>\n</ol>\n<blockquote>\n<p><code>一次编写，随处运行</code> 是 Java 经典的跨平台口号。</p>\n<p>但是目前市面上虚拟化技术已经非常成熟，通过 Docker 容器化技术就很容易实现跨平台。</p>\n<p>Java 最大的优势应该是强大的生态！</p>\n</blockquote>\n<h3 id=\"JVM-vs-JDK-vs-JRE\"><a href=\"#JVM-vs-JDK-vs-JRE\" class=\"headerlink\" title=\"JVM vs JDK vs JRE\"></a>JVM vs JDK vs JRE</h3><h4 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h4><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p>\n<p><strong>JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。</strong> 也就是说我们平时接触到的 HotSpot VM 仅仅是是 JVM 规范的一种实现而已。</p>\n<p>除了我们平时最常用的 HotSpot VM 外，还有 J9 VM、Zing VM、JRockit VM 等 JVM 。维基百科上就有常见 JVM 的对比：<a href=\"https://en.wikipedia.org/wiki/Comparison_of_Java_virtual_machines\">Comparison of Java virtual machinesopen in new window</a> ，感兴趣的可以去看看。并且，你可以在 <a href=\"https://docs.oracle.com/javase/specs/index.html\">Java SE Specificationsopen in new window</a> 上找到各个版本的 JDK 对应的 JVM 规范。</p>\n<h4 id=\"JDK-和-JRE\"><a href=\"#JDK-和-JRE\" class=\"headerlink\" title=\"JDK 和 JRE\"></a>JDK 和 JRE</h4><p>JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p>\n<p>JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p>\n<p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p>\n<h3 id=\"什么是字节码？采用字节码的好处是什么？\"><a href=\"#什么是字节码？采用字节码的好处是什么？\" class=\"headerlink\" title=\"什么是字节码？采用字节码的好处是什么？\"></a>什么是字节码？采用字节码的好处是什么？</h3><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以， Java 程序运行时相对来说还是高效的（不过，和 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p>\n<p><strong>Java 程序从源代码到运行的过程如下所示：</strong></p>\n<p><code>.java -&gt; javac 编译 -&gt; .class -&gt; 解释器&amp;JIT -&gt; 机器可理解的代码 -&gt; 机器运行</code></p>\n<p>我们需要格外注意的是 <code>.class-&gt;机器码</code> 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 <strong>Java 是编译与解释共存的语言</strong> 。</p>\n<blockquote>\n<p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。</p>\n</blockquote>\n<h3 id=\"AIT-和-AOT-的区别？为什么不全部使用-AOT-呢？\"><a href=\"#AIT-和-AOT-的区别？为什么不全部使用-AOT-呢？\" class=\"headerlink\" title=\"AIT 和 AOT 的区别？为什么不全部使用 AOT 呢？\"></a>AIT 和 AOT 的区别？为什么不全部使用 AOT 呢？</h3><ul>\n<li><p><strong>JIT（Just-in-Time，即时编译）</strong></p>\n</li>\n<li><p><strong>AOT（Ahead-of-Time，预编译）</strong></p>\n</li>\n</ul>\n<p>AOT 可以提前编译节省启动时间，那为什么不全部使用这种编译方式呢？</p>\n<p>长话短说，这和 Java 语言的动态特性有千丝万缕的联系了。举个例子，CGLIB 动态代理使用的是 ASM 技术，而这种技术大致原理是运行时直接在内存中生成并加载修改后的字节码文件也就是 <code>.class</code> 文件，如果全部使用 AOT 提前编译，也就不能使用 ASM 技术了。为了支持类似的动态特性，所以选择使用 JIT 即时编译器。</p>\n<h3 id=\"为什么说-Java-语言“编译与解释并存”？\"><a href=\"#为什么说-Java-语言“编译与解释并存”？\" class=\"headerlink\" title=\"为什么说 Java 语言“编译与解释并存”？\"></a>为什么说 Java 语言“编译与解释并存”？</h3><ul>\n<li><strong>编译型：</strong><a href=\"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80\">编译型语言</a>会通过<a href=\"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8\">编译器</a>将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译型语言有 C、C++、Go、Rust 等等。</li>\n<li><strong>解释型：</strong><a href=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80\">解释型语言</a>会通过<a href=\"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8\">解释器</a>一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释型语言有 Python、JavaScript、PHP 等等。</li>\n</ul>\n<blockquote>\n<p><strong>维基百科中介绍：</strong></p>\n<p>为了改善编译语言的效率而发展出的<a href=\"https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF\">即时编译</a>技术，已经缩小了这两种语言间的差距。这种技术混合了编译语言与解释型语言的优点，它像编译语言一样，先把程序源代码编译成<a href=\"https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E7%A0%81\">字节码</a>。到执行期时，再将字节码直译，之后执行。<a href=\"https://zh.wikipedia.org/wiki/Java\">Java</a>与<a href=\"https://zh.wikipedia.org/wiki/LLVM\">LLVM</a>是这种技术的代表产物。</p>\n<p><strong>相关阅读：</strong><a href=\"https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html\">基本功 | Java 即时编译器原理解析及实践</a></p>\n</blockquote>\n<p><strong>为什么说 Java 语言“编译与解释并存”？</strong></p>\n<p>这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>.class</code> 文件），这种字节码必须由 Java 解释器来解释执行。</p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h3 id=\"标识符和关键字的区别是什么？\"><a href=\"#标识符和关键字的区别是什么？\" class=\"headerlink\" title=\"标识符和关键字的区别是什么？\"></a>标识符和关键字的区别是什么？</h3><p>在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了 <strong>标识符</strong> 。简单来说， <strong>标识符就是一个名字</strong> 。</p>\n<p>有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是 <strong>关键字</strong> 。简单来说，<strong>关键字是被赋予特殊含义的标识</strong>符 。比如，在我们的日常生活中，如果我们想要开一家店，则要给这个店起一个名字，起的这个“名字”就叫标识符。但是我们店的名字不能叫“警察局”，因为“警察局”这个名字已经被赋予了特殊的含义，而“警察局”就是我们日常生活中的关键字。</p>\n<h3 id=\"Java-语言关键字有哪些？true、false-和-null-是关键字吗？\"><a href=\"#Java-语言关键字有哪些？true、false-和-null-是关键字吗？\" class=\"headerlink\" title=\"Java 语言关键字有哪些？true、false 和 null 是关键字吗？\"></a>Java 语言关键字有哪些？true、false 和 null 是关键字吗？</h3><blockquote>\n<p>官方文档：<a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html\">Java 语言关键字 | (oracle.com)</a></p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221103173519.png\" alt=\"image-20221103173508830\"></p>\n<blockquote>\n<p>Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。</p>\n<p><code>default</code> 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。</p>\n<ul>\n<li>在程序控制中，当在 <code>switch</code> 中匹配不到任何情况时，可以使用 <code>default</code> 来编写默认匹配的情况。</li>\n<li>在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 <code>default</code> 关键字来定义一个方法的默认实现。</li>\n<li>在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 <code>default</code>，但是这个修饰符加上了就会报错。</li>\n</ul>\n</blockquote>\n<p><strong>虽然 <code>true</code>, <code>false</code>, 和 <code>null</code> 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用</strong></p>\n<h3 id=\"continue、break-和-return-的区别是什么？\"><a href=\"#continue、break-和-return-的区别是什么？\" class=\"headerlink\" title=\"continue、break 和 return 的区别是什么？\"></a>continue、break 和 return 的区别是什么？</h3><p>在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后，提前终止循环，这就需要用到下面几个关键词：</p>\n<ol>\n<li><code>continue</code>：指跳出当前的这一次循环，继续下一次循环。</li>\n<li><code>break</code>：指跳出整个循环体，继续执行循环下面的语句。</li>\n</ol>\n<p><code>return</code> 用于跳出所在的方法，结束该方法的运行。return 一般有两种用法：</p>\n<ol>\n<li><code>return;</code>：直接使用 return 结束方法执行，用于没有返回值函数的方法</li>\n<li><code>return value;</code>：return 一个特定值，用于有返回值函数的方法</li>\n</ol>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><h4 id=\"成员变量与局部变量的区别？\"><a href=\"#成员变量与局部变量的区别？\" class=\"headerlink\" title=\"成员变量与局部变量的区别？\"></a>成员变量与局部变量的区别？</h4><ul>\n<li><strong>语法形式</strong>：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 <code>public</code>、<code>private</code>、<code>static</code> 等修饰符所修饰，而局部变量不能被访问控制符及 <code>static</code> 所修饰；但是，成员变量和局部变量都能被 <code>final</code> 所修饰。</li>\n<li><strong>存储方式</strong>：从变量在内存中的存储方式来看，如果成员变量是使用 <code>static</code> 修饰的，那么这个成员变量是属于类的，如果没有使用 <code>static</code> 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量存在于栈内存。</li>\n<li><strong>生存时间</strong>：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。</li>\n<li><strong>默认值</strong>：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外：被 <code>final</code> 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li>\n</ul>\n<h4 id=\"静态变量有什么作用？\"><a href=\"#静态变量有什么作用？\" class=\"headerlink\" title=\"静态变量有什么作用？\"></a>静态变量有什么作用？</h4><p>静态变量可以被类的所有实例共享。无论一个类创建了多少个对象，他们都共享同一份静态变量。</p>\n<p>通常情况下，静态变量会被 <code>final</code> 关键字修饰成为常量。</p>\n<h4 id=\"字符型常量和字符串常量的区别？\"><a href=\"#字符型常量和字符串常量的区别？\" class=\"headerlink\" title=\"字符型常量和字符串常量的区别？\"></a>字符型常量和字符串常量的区别？</h4><ol>\n<li><p><strong>形式</strong>：字符常量是单引号引起的一个字符，字符串常量是双引号引起的 0 个或若干个字符。</p>\n</li>\n<li><p><strong>含义</strong>：字符常量相当于一个整型值(ASCII 值)，可以参加表达式运算；字符串常量代表一个地址值(该字符串在内存中存放的位置)。</p>\n</li>\n<li><p><strong>占内存大小</strong>：字符常量只占 2 个字节；字符串常量占若干个字节。</p>\n</li>\n</ol>\n<p><strong>(注意：<code>char</code> 在 Java 中占两个字节)</strong></p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"静态方法为什么不能调用非静态成员？\"><a href=\"#静态方法为什么不能调用非静态成员？\" class=\"headerlink\" title=\"静态方法为什么不能调用非静态成员？\"></a>静态方法为什么不能调用非静态成员？</h4><ol>\n<li>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。</li>\n<li>在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</li>\n</ol>\n<h4 id=\"静态方法和实例方法有何不同？\"><a href=\"#静态方法和实例方法有何不同？\" class=\"headerlink\" title=\"静态方法和实例方法有何不同？\"></a>静态方法和实例方法有何不同？</h4><p><strong>1、调用方式</strong></p>\n<p>在外部调用静态方法时，可以使用 <code>类名.方法名</code> 的方式，也可以使用 <code>对象.方法名</code> 的方式，而实例方法只有后面这种方式。也就是说，<strong>调用静态方法可以无需创建对象</strong>。</p>\n<p><strong>2、访问类成员是否存在限制</strong></p>\n<p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。</p>\n<h4 id=\"重载和重写有什么区别？\"><a href=\"#重载和重写有什么区别？\" class=\"headerlink\" title=\"重载和重写有什么区别？\"></a>重载和重写有什么区别？</h4><blockquote>\n<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p>\n<p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>\n</blockquote>\n<p><strong>重载</strong></p>\n<p>发生在同一个类中（或者父类与之类之间），方法名必须相同，参数类型不同、个数不同，顺序不同，方法返回值和访问修饰符可以不同。</p>\n<p>综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</p>\n<p><strong>重写</strong></p>\n<p>重写发生在运行期，是子类对付类的允许访问的方法的实现过程进行重新编写。</p>\n<ol>\n<li>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</li>\n<li>如果父类方法访问修饰符为 <code>private/final/static</code> 则子类就不能重写该方法，但是被 <code>static</code> 修饰的方法能够被再次声明。</li>\n<li>构造方法无法被重写</li>\n</ol>\n<p>综上：<strong>重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">区别点</th>\n<th align=\"left\">重载方法</th>\n<th align=\"left\">重写方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">发生范围</td>\n<td align=\"left\">同一个类</td>\n<td align=\"left\">子类</td>\n</tr>\n<tr>\n<td align=\"left\">参数列表</td>\n<td align=\"left\">必须修改</td>\n<td align=\"left\">一定不能修改</td>\n</tr>\n<tr>\n<td align=\"left\">返回类型</td>\n<td align=\"left\">可修改</td>\n<td align=\"left\">子类方法返回值类型应比父类方法返回值类型更小或相等</td>\n</tr>\n<tr>\n<td align=\"left\">异常</td>\n<td align=\"left\">可修改</td>\n<td align=\"left\">子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</td>\n</tr>\n<tr>\n<td align=\"left\">访问修饰符</td>\n<td align=\"left\">可修改</td>\n<td align=\"left\">一定不能做更严格的限制（可以降低限制）</td>\n</tr>\n<tr>\n<td align=\"left\">发生阶段</td>\n<td align=\"left\">编译期</td>\n<td align=\"left\">运行期</td>\n</tr>\n</tbody></table>\n<p><strong>方法的重写要遵循“两同两小一大”</strong></p>\n<ul>\n<li>”两同“即方法名相同、形参列表相同；</li>\n<li>”两小“指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类型应比父类方法抛出的异常类型更小或相等；</li>\n<li>”一大“指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</li>\n</ul>\n<blockquote>\n<p>关于 <strong>重写的返回值类型</strong> 这里需要额外说明一下：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。</p>\n</blockquote>\n<h4 id=\"什么是可变长参数？\"><a href=\"#什么是可变长参数？\" class=\"headerlink\" title=\"什么是可变长参数？\"></a>什么是可变长参数？</h4><p>从 Java5 开始，Java 支持定义可变长参数，所谓可变长参数就是允许在调用方法时传入不定长度的参数。就比如下面的这个方法就可以接受 0 个或者多个参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外，可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">(String arg1,String... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>遇到方法重载的情况怎么办呢？会优先匹配固定参数还是可变参数的方法呢？</strong></p>\n<p>会优先匹配固定参数的方法，因为固定参数的方法匹配度更高！</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"Java-中的几种基本数据类型了解吗？\"><a href=\"#Java-中的几种基本数据类型了解吗？\" class=\"headerlink\" title=\"Java 中的几种基本数据类型了解吗？\"></a>Java 中的几种基本数据类型了解吗？</h3><p>Java 中有 8 种基本数据类型，分别为：</p>\n<ul>\n<li>6 种数字类型：<ul>\n<li>4 种整数型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li>\n<li>2 种浮点型：<code>float</code>、<code>double</code></li>\n</ul>\n</li>\n<li>1 种字符类型：<code>char</code></li>\n<li>1 种布尔型：<code>boolean</code></li>\n</ul>\n<p>这 8 种基本数据类型的默认值以及所占空间的大小如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">基本类型</th>\n<th align=\"left\">位数</th>\n<th align=\"left\">字节</th>\n<th align=\"left\">默认值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>byte</code></td>\n<td align=\"left\">8</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0</td>\n<td>-128 ~ 127</td>\n</tr>\n<tr>\n<td align=\"left\"><code>short</code></td>\n<td align=\"left\">16</td>\n<td align=\"left\">2</td>\n<td align=\"left\">0</td>\n<td>-32768 ~ 32767</td>\n</tr>\n<tr>\n<td align=\"left\"><code>int</code></td>\n<td align=\"left\">32</td>\n<td align=\"left\">4</td>\n<td align=\"left\">0</td>\n<td>-2147483648 ~ 2147483647</td>\n</tr>\n<tr>\n<td align=\"left\"><code>long</code></td>\n<td align=\"left\">64</td>\n<td align=\"left\">8</td>\n<td align=\"left\">0L</td>\n<td>-9223372036854775808 ~ 9223372036854775807</td>\n</tr>\n<tr>\n<td align=\"left\"><code>char</code></td>\n<td align=\"left\">16</td>\n<td align=\"left\">2</td>\n<td align=\"left\">‘u0000’</td>\n<td>0 ~ 65535</td>\n</tr>\n<tr>\n<td align=\"left\"><code>float</code></td>\n<td align=\"left\">32</td>\n<td align=\"left\">4</td>\n<td align=\"left\">0f</td>\n<td>1.4E-45 ~ 3.4028235E38</td>\n</tr>\n<tr>\n<td align=\"left\"><code>double</code></td>\n<td align=\"left\">64</td>\n<td align=\"left\">8</td>\n<td align=\"left\">0d</td>\n<td>4.9E-324 ~ 1.7976931348623157E308</td>\n</tr>\n<tr>\n<td align=\"left\"><code>boolean</code></td>\n<td align=\"left\">1</td>\n<td align=\"left\"></td>\n<td align=\"left\">false</td>\n<td>true、false</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>对于 <code>boolean</code>，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p>\n<p>另外，Java 的每种基本数据类型所占存储空间的大小不会像其他大多数语言那样随机器硬件架构的变化而变化。这种所占存储空间大小的不变性是 Java 程序比用其他大多数语言编写的程序更具可移植性的原因之一（《Jav··a 编程思想》2.2 节有提到）。</p>\n</blockquote>\n<p><strong>注意</strong>：</p>\n<ol>\n<li>Java 里使用 <code>long</code> 类型的数据一定要在数值后面加上 <strong>L</strong>，否则将作为整型解析；</li>\n<li><code>char a = &#39;h&#39;</code> 字符：单引号，<code>String a = &quot;hello&quot;</code> 字符串：双引号。</li>\n</ol>\n<p>这八种基本类型都有对应的包装类分别为：<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code>。</p>\n<h3 id=\"基本类型和包装类型的区别？\"><a href=\"#基本类型和包装类型的区别？\" class=\"headerlink\" title=\"基本类型和包装类型的区别？\"></a>基本类型和包装类型的区别？</h3><ul>\n<li>成员变量包装类型不赋值就是 <code>null</code>，而基本类型有默认值且不是 <code>null</code>；</li>\n<li>包装类型可用于泛型，而基本类型不可以；</li>\n<li>基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，而基本数据类型的成员变量（未被 <code>static</code> 修饰）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有的对象实例都存在于堆中；</li>\n<li>相比于对象类型，基本数据类型占用的空间非常小。</li>\n</ul>\n<p><strong>为什么说是几乎所有对象实例呢？</strong> 这是因为 HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行 <code>逃逸分析</code>，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存。</p>\n<blockquote>\n<p><a href=\"https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html\">基本功 | Java即时编译器原理解析及实践 - 逃逸分析</a></p>\n</blockquote>\n<p><strong>注意：基本数据类型存放在栈中是一个常见的误区！</strong>基本数据类型的成员变量如果没有被 <code>static</code> 修饰的话（不建议这么使用，应该给要使用基本数据类型对应的包装类型），就存放在堆中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BasicTypeVar</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包装类型的缓存机制了解吗？\"><a href=\"#包装类型的缓存机制了解吗？\" class=\"headerlink\" title=\"包装类型的缓存机制了解吗？\"></a>包装类型的缓存机制了解吗？</h3><p>Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。</p>\n<p><code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code> 这 4 种包装类默认创建了数值 <strong>[-128,127]</strong> 的相应类型的缓存数据，<code>Character</code> 创建了数值在 <strong>[0,127]</strong> 范围的缓存数据，<code>Boolean</code> 直接返回 <code>Ture</code> or <code>False</code>。</p>\n<p><strong><code>Integer</code> 缓存源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IntegerCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">low</span> <span class=\"operator\">=</span> -<span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> high;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// high value may be configured by property</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"number\">127</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>Character</code> 缓存源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Character <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// must cache</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> CharacterCache.cache[(<span class=\"type\">int</span>)c];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CharacterCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">CharacterCache</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Character cache[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>[<span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>((<span class=\"type\">char</span>)i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>Boolean</code> 缓存源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Boolean</span> <span class=\"variable\">TRUE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Boolean</span> <span class=\"variable\">FALSE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">boolean</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果超过对应范围仍然回去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。</p>\n<p>两种浮点数类型的包装类 <code>Fload</code>、<code>Double</code> 并没有实现缓存机制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">33</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">33</span>;</span><br><span class=\"line\">System.out.println(i1 == i2);<span class=\"comment\">// 输出 true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Float</span> <span class=\"variable\">i11</span> <span class=\"operator\">=</span> <span class=\"number\">333f</span>;</span><br><span class=\"line\"><span class=\"type\">Float</span> <span class=\"variable\">i22</span> <span class=\"operator\">=</span> <span class=\"number\">333f</span>;</span><br><span class=\"line\">System.out.println(i11 == i22);<span class=\"comment\">// 输出 false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Double</span> <span class=\"variable\">i3</span> <span class=\"operator\">=</span> <span class=\"number\">1.2</span>;</span><br><span class=\"line\"><span class=\"type\">Double</span> <span class=\"variable\">i4</span> <span class=\"operator\">=</span> <span class=\"number\">1.2</span>;</span><br><span class=\"line\">System.out.println(i3 == i4);<span class=\"comment\">// 输出 false</span></span><br></pre></td></tr></table></figure>\n\n<p>下面我们来看一下问题：下面的代码的输出结果是 <code>true</code> 还是 <code>false</code> 呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">System.out.println(i1 == i2);</span><br></pre></td></tr></table></figure>\n\n<p><code>Integer i1 = 40</code> 这一行代码会发生装箱，也就是说这行代码等价于 <code>Integer i1 = Integer.valueOf(40)</code>。因此，<code>i1</code> 直接使用的是缓存中的对象。而 <code>Integer i2 = new Integer(40)</code> 会直接创建新的对象。</p>\n<p>因此，答案是 <code>false</code>。</p>\n<p><strong>记住：所有整型包装类对象之间值的比较，全部使用 <code>equals</code> 方法比较。</strong></p>\n<h3 id=\"自动装箱与拆箱了解吗？原理是什么？\"><a href=\"#自动装箱与拆箱了解吗？原理是什么？\" class=\"headerlink\" title=\"自动装箱与拆箱了解吗？原理是什么？\"></a>自动装箱与拆箱了解吗？原理是什么？</h3><p><strong>什么是自动拆装箱？</strong></p>\n<ul>\n<li><strong>装箱：</strong>将基本类型用它们对应的引用类型包装起来；</li>\n<li><strong>拆箱：</strong>将包装类型转换为基本数据类型</li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; <span class=\"comment\">// 装箱</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> i; <span class=\"comment\">// 拆箱</span></span><br></pre></td></tr></table></figure>\n\n<p>上面这两行代码对应的字节码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">L1</span><br><span class=\"line\"></span><br><span class=\"line\"> LINENUMBER <span class=\"number\">8</span> L1</span><br><span class=\"line\"></span><br><span class=\"line\"> ALOAD <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"> BIPUSH <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"> INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class=\"line\"></span><br><span class=\"line\"> PUTFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class=\"line\"></span><br><span class=\"line\">L2</span><br><span class=\"line\"></span><br><span class=\"line\"> LINENUMBER <span class=\"number\">9</span> L2</span><br><span class=\"line\"></span><br><span class=\"line\"> ALOAD <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"> ALOAD <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"> GETFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class=\"line\"></span><br><span class=\"line\"> INVOKEVIRTUAL java/lang/Integer.intValue ()I</span><br><span class=\"line\"></span><br><span class=\"line\"> PUTFIELD AutoBoxTest.n : I</span><br><span class=\"line\"></span><br><span class=\"line\"> RETURN</span><br></pre></td></tr></table></figure>\n\n<p>从字节码中，我们发现装箱其实就是调用了包装类的 <code>valueOf</code> 方法，拆箱其实就是调用了 <code>xxxValue()</code> 方法。</p>\n<p>因此：</p>\n<ul>\n<li><code>Integer i = 10</code> 等价于 <code>Integer i = Integer.valueOf(10)</code></li>\n<li><code>int n = i</code> 等价于 <code>int n = i.intValue()</code>；</li>\n</ul>\n<p>注意：<strong>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。</strong></p>\n<h3 id=\"为什么浮点数运算的时候会有精度丢失的风险？\"><a href=\"#为什么浮点数运算的时候会有精度丢失的风险？\" class=\"headerlink\" title=\"为什么浮点数运算的时候会有精度丢失的风险？\"></a>为什么浮点数运算的时候会有精度丢失的风险？</h3><p>浮点数运算精度丢失代码演示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">2.0f</span> - <span class=\"number\">1.9f</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">1.8f</span> - <span class=\"number\">1.7f</span>;</span><br><span class=\"line\">System.out.println(a); <span class=\"comment\">// 0.100000024</span></span><br><span class=\"line\">System.out.println(b);<span class=\"comment\">// 0.099999905</span></span><br><span class=\"line\">System.out.println(a == b); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么会出现这个问题呢？</p>\n<p>这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储再计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。</p>\n<p>就比如说十进制下的 0.2 就没办法精确转换为二进制小数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止，</span></span><br><span class=\"line\"><span class=\"comment\">// 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。</span></span><br><span class=\"line\"><span class=\"number\">0.2</span> * <span class=\"number\">2</span> = <span class=\"number\">0.4</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0.4</span> * <span class=\"number\">2</span> = <span class=\"number\">0.8</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0.8</span> * <span class=\"number\">2</span> = <span class=\"number\">1.6</span> -&gt; <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0.6</span> * <span class=\"number\">2</span> = <span class=\"number\">1.2</span> -&gt; <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0.2</span> * <span class=\"number\">2</span> = <span class=\"number\">0.4</span> -&gt; <span class=\"number\">0</span>（发生循环）</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>关于浮点数的更多内容，建议看一下<a href=\"http://kaito-kidd.com/2018/08/08/computer-system-float-point/\">计算机系统基础（四）浮点数</a>这篇文章。</p>\n<h3 id=\"如何解决浮点数运算的精度丢失问题？\"><a href=\"#如何解决浮点数运算的精度丢失问题？\" class=\"headerlink\" title=\"如何解决浮点数运算的精度丢失问题？\"></a>如何解决浮点数运算的精度丢失问题？</h3><p><code>BigDecimal</code> 可以实现对浮点数的运算，不会造成精度丢失。通常情况下，大部门需要将浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 <code>BigDecimal</code> 来做的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;1.0&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.9&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;0.8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> a.subtract(b);</span><br><span class=\"line\"><span class=\"type\">BigDecimal</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> b.subtract(c);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(x); <span class=\"comment\">/* 0.1 */</span></span><br><span class=\"line\">System.out.println(y); <span class=\"comment\">/* 0.1 */</span></span><br><span class=\"line\">System.out.println(Objects.equals(x, y)); <span class=\"comment\">/* true */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"超过-long-整型的数据应该如何表示？\"><a href=\"#超过-long-整型的数据应该如何表示？\" class=\"headerlink\" title=\"超过 long 整型的数据应该如何表示？\"></a>超过 long 整型的数据应该如何表示？</h3><p>基本数值类型都有一个表达范围，如果超过这个范围就会有数值溢出的风险。</p>\n<p>在 Java 中，64 位 long 整型是最大的整数类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> Long.MAX_VALUE;</span><br><span class=\"line\">System.out.println(l + <span class=\"number\">1</span>); <span class=\"comment\">// -9223372036854775808</span></span><br><span class=\"line\">System.out.println(l + <span class=\"number\">1</span> == Long.MIN_VALUE); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>BigInteger</code> 内部使用 <code>int[]</code> 数组来存储任意大小的整型数据。</p>\n<p>相对于常规整数类型的运算来说，<code>BigInteger</code> 运算的效率会相对较低。</p>\n<h2 id=\"面向对象基础\"><a href=\"#面向对象基础\" class=\"headerlink\" title=\"面向对象基础\"></a>面向对象基础</h2><h3 id=\"面向对象和面向过程的区别？\"><a href=\"#面向对象和面向过程的区别？\" class=\"headerlink\" title=\"面向对象和面向过程的区别？\"></a>面向对象和面向过程的区别？</h3><p>两者的主要区别在于解决问题的方式不同：</p>\n<ul>\n<li>面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题；</li>\n<li>面向对象会先抽象出对象，然后用对象执行方法的方式解决问题；</li>\n</ul>\n<p>另外，面向对象开发的程序一般更易维护、易复用、易扩展。</p>\n<h3 id=\"面向对象的三大特征\"><a href=\"#面向对象的三大特征\" class=\"headerlink\" title=\"面向对象的三大特征\"></a>面向对象的三大特征</h3><h4 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h4><p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供外界访问的方法，那么这个类也没有什么意义了。</p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>不同类型的对象，相互之间经常有一定数量的共同点。继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码地重用，程序的可维护性，节省大量创建新类的时间，提高我们的开发效率。</p>\n<p><strong>关于继承如下 3 点请记住：</strong></p>\n<ol>\n<li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问的，<strong>只是拥有</strong></li>\n<li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展</li>\n<li>子类可以用自己的方式实现父类的方法（以后介绍）  </li>\n</ol>\n<h4 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h4><p>多态，顾名思义，表示一个对象具有多种的状态，具体表现为父类打得引用指向子类的实例。</p>\n<p><strong>多态的特点：</strong></p>\n<ul>\n<li>对象类型和引用类型之间具有继承（类）/实现（接口）的关系；</li>\n<li>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；</li>\n<li>多态不能调用“只在子类存在但在父类不存在”的方法</li>\n<li>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</li>\n</ul>\n<h3 id=\"接口和抽象类有什么共同点和区别？\"><a href=\"#接口和抽象类有什么共同点和区别？\" class=\"headerlink\" title=\"接口和抽象类有什么共同点和区别？\"></a>接口和抽象类有什么共同点和区别？</h3><p><strong>共同点：</strong></p>\n<ul>\n<li>都不能被实例化</li>\n<li>都可以包含抽象方法</li>\n<li>都可以有默认实现方法（Java 8 可以用 <code>default</code> 关键字在接口中定义默认方法）</li>\n</ul>\n<p><strong>区别：</strong></p>\n<ul>\n<li>接口主要用于对类的行为进行约束，你是实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系</li>\n<li>一个类只能继承一个类，但是可以实现多个接口</li>\n<li>接口中成员变量只能是 <code>public static final</code> 类型的，不能被修改且必须有初始值，而抽象类的成员变量默认是 <code>default</code>，可在子类中被重新定义，也可被重新赋值</li>\n</ul>\n<h3 id=\"深拷贝和浅拷贝区别了解吗？什么是引用拷贝？\"><a href=\"#深拷贝和浅拷贝区别了解吗？什么是引用拷贝？\" class=\"headerlink\" title=\"深拷贝和浅拷贝区别了解吗？什么是引用拷贝？\"></a>深拷贝和浅拷贝区别了解吗？什么是引用拷贝？</h3><p>结论：</p>\n<ul>\n<li><p><strong>浅拷贝：</strong>浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是拷贝对象和原对象共用同一个内部对象</p>\n</li>\n<li><p><strong>浅拷贝：</strong>深拷贝会完全复制整个对象，包括这个对象所包含的内部对象</p>\n</li>\n</ul>\n<p>案例：</p>\n<p><strong>浅拷贝</strong></p>\n<p>浅拷贝的示例代码如下，我们这里实现了 <code>Cloneable</code> 接口，并重写了 <code>clone()</code> 方法。</p>\n<p><code>clone()</code> 方法的实现很简单，直接调用的是父类 <code>Object</code> 的 <code>clone()</code> 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Address <span class=\"title function_\">clone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Address) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AssertionError</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    <span class=\"comment\">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Person <span class=\"title function_\">clone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (Person) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AssertionError</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Address</span>(<span class=\"string\">&quot;武汉&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person1Copy</span> <span class=\"operator\">=</span> person1.clone();</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(person1.getAddress() == person1Copy.getAddress());</span><br></pre></td></tr></table></figure>\n\n<p>从输出结构就可以看出，<code>person1</code> 的克隆对象和 <code>person1</code> 使用的仍然是同一个 <code>Address</code> 对象。</p>\n<p><strong>深拷贝</strong></p>\n<p>这里我们简单对 <code>Person</code> 类的 <code>clone()</code> 方法进行修改，连带着要把 <code>Person</code> 对象内部的 <code>Address</code> 对象一起复制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Person <span class=\"title function_\">clone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (Person) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        person.setAddress(person.getAddress().clone());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AssertionError</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Address</span>(<span class=\"string\">&quot;武汉&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person1Copy</span> <span class=\"operator\">=</span> person1.clone();</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(person1.getAddress() == person1Copy.getAddress());</span><br></pre></td></tr></table></figure>\n\n<p>从输出结果就可以看出，虽然 <code>person1</code> 的克隆对象和 <code>person1</code> 包含的 <code>Address</code> 对象已经是不同的了。</p>\n<p><strong>那什么是引用拷贝呢？</strong>简单来说，引用拷贝就是两个不同的引用指向同一个对象。</p>\n<p>下图可以描述浅拷贝、深拷贝、引用拷贝：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221122165417.png\" alt=\"浅拷贝、深拷贝、引用拷贝示意图\"></p>\n<h2 id=\"Java-常见类\"><a href=\"#Java-常见类\" class=\"headerlink\" title=\"Java 常见类\"></a>Java 常见类</h2><h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><h4 id=\"Object-类的常见方法有哪些？\"><a href=\"#Object-类的常见方法有哪些？\" class=\"headerlink\" title=\"Object 类的常见方法有哪些？\"></a>Object 类的常见方法有哪些？</h4><p>Object 类是一个特殊的类，是所有类的父类。主要提供有以下 11 个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> Class&lt;?&gt; getClass();</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * naitive 方法，用于创建并返回当前对象的一份拷贝。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">native</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyAll</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wait</span><span class=\"params\">(<span class=\"type\">long</span> timeout)</span> <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒。。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wait</span><span class=\"params\">(<span class=\"type\">long</span> timeout, <span class=\"type\">int</span> nanos)</span> <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wait</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实例被垃圾回收器回收的时候触发的操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"和-equals-的区别？\"><a href=\"#和-equals-的区别？\" class=\"headerlink\" title=\"== 和 equals() 的区别？\"></a>== 和 equals() 的区别？</h4><p><code>==</code> 对于基本类型来和引用类型的作用效果是不同的：</p>\n<ul>\n<li>对于基本数据类型来说，<code>==</code> 比较的是值</li>\n<li>对于引用类型来说，<code>==</code> 比较的是对象的内存地址</li>\n</ul>\n<blockquote>\n<p>因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。</p>\n</blockquote>\n<p><code>equals()</code> 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<code>equals()</code> 方法存在于 <code>Object</code> 类中，而 <code>Object</code> 类是所有类的直接或间接父类，因此所有的类都有 <code>equals()</code> 方法。 </p>\n<p><code>Object</code> 类 <code>equals()</code> 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (<span class=\"built_in\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>equals()</code> 方法存在两种使用情况：</p>\n<ul>\n<li><strong>类没有重写 <code>equals()</code> 方法</strong>：通过 <code>equals()</code> 方法比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 <code>Object</code> 类 <code>equals()</code> 方法。</li>\n<li><strong>类重写了 <code>equals()</code> 方法</strong>：一般我们都重写 <code>equals()</code> 方法来比较两个对象中属性是否相等；若它们的属性相等，则返回 <code>true</code>（即认为这两个对象相等）。</li>\n</ul>\n<p><code>String</code> 类 <code>equals()</code> 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object anObject)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">anotherString</span> <span class=\"operator\">=</span> (String)anObject;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"type\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"hashCode-有什么用？\"><a href=\"#hashCode-有什么用？\" class=\"headerlink\" title=\"hashCode() 有什么用？\"></a>hashCode() 有什么用？</h4><p><code>hashCode()</code> 的作用是获取哈希码（<code>int</code> 整数）</p>\n","categories":["面试指北"],"tags":["Java","面试"]},{"title":"基于 GitLab 的代码审查","url":"/2022/10/28/328074fd.html","content":"<h2 id=\"Code-Review-流程\"><a href=\"#Code-Review-流程\" class=\"headerlink\" title=\"Code Review 流程\"></a>Code Review 流程</h2><p>根据 <code>Git Flow</code> 工作流，开发人员在 <code>feature</code> 分支进行开发，开发完成之后 <code>Merge</code> 到 <code>develop</code> 分支进行测试。</p>\n<p>那么最适合做 <code>Code Review</code> 就是 <code>featrue</code> 分支合并到 <code>develop</code> 分支的环节</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028112809.png\" alt=\"img\"></p>\n<blockquote>\n<p>注：为了保证必须以 Merge 的方式变更 develop 分支、release 分支、以及 master 分支，我们对 Push 以及 Merge 权限进行限制</p>\n<p><code>项目仓库 -&gt; 设置 -&gt; 仓库设置 -&gt; Protected Branches</code></p>\n<p><strong>Protected Branches 配置</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028112923.png\" alt=\"img\"></p>\n<p>这里，我们限制分支，所有的开发人员对 <code>develop</code> 分支、<code>release</code> 分支、以及 <code>master</code> 分支均无 <code>Push</code> 权限，只能以 <code>Merge</code> 方式合并到对应分支，而且只有 <code>Maintainers（Masters）</code> 组的用户有 <code>Merge</code> 权限。</p>\n</blockquote>\n<h2 id=\"Code-View-示例\"><a href=\"#Code-View-示例\" class=\"headerlink\" title=\"Code View 示例\"></a>Code View 示例</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>变更 <code>feature 分支</code> 分支 <code>README.md</code> 文件，为 <code>Merge Request</code> 提供基础</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028112941.png\" alt=\"img\"></p>\n<p>随意更改一行内容，然后 <code>Commit Changes</code> 即可</p>\n<h3 id=\"创建-Merge-Request\"><a href=\"#创建-Merge-Request\" class=\"headerlink\" title=\"创建 Merge Request\"></a>创建 <code>Merge Request</code></h3><p><code>左侧菜单 -&gt; Merge Request -&gt; 点击 New Merge Request</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028112952.png\" alt=\"img\"></p>\n<p>Source branch 选择：<code>feature/test</code></p>\n<p>Target branch 选择：<code>develop</code></p>\n<p>然后：<code>Compare branches and continue</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028113007.png\" alt=\"img\"></p>\n<p>操作项/填写项说明：</p>\n<table>\n<thead>\n<tr>\n<th>操作项/填写项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Title</td>\n<td>标题，没有特殊要求保持默认即可</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>描述，需要将变更的需求描述清楚，最好附件 Code Review 要点</td>\n</tr>\n<tr>\n<td>Assignee</td>\n<td>分配到的人，被分配到的人将会收到邮件通知，跟 Merge 权限没有必然关系，仍然是项目的 Maintainers（Masters）角色拥有 Merge 权限</td>\n</tr>\n<tr>\n<td>Milestone</td>\n<td>里程碑，如果没有可不选</td>\n</tr>\n<tr>\n<td>Label</td>\n<td>标签，如果没有可不选</td>\n</tr>\n<tr>\n<td>Merge options</td>\n<td>合并选项，可以勾选当合并请求被接受时，删除源分支或压缩请求</td>\n</tr>\n</tbody></table>\n<h3 id=\"Merge-Request-操作\"><a href=\"#Merge-Request-操作\" class=\"headerlink\" title=\"Merge Request 操作\"></a><code>Merge Request</code> 操作</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028113020.png\" alt=\"img\"></p>\n<p><code>Merge Request</code> 创建之后就会转到该页面，被分配到的人（Assignee）会收到邮件提醒，如果需要多个人进行 <code>Code Review</code>，只要将该页面的链接发给其他项目成员即可。项目成员可以查看变更并评论，只不过按照之前的配置，只有 <code>Maintainers（Masters）</code>角色的成员才有 <code>Merge</code> 的权限。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028113030.png\" alt=\"img\"></p>\n<p>在 <code>变更（Changes）</code> 选项卡中，我们可以看到所有的变更。将光标移动到行号处会出现评论按钮，我们可以点击评论按钮发起评论，这个评论是对项目成员可见的，大家可在讨论区进行讨论。最终讨论发起者有权将讨论标记为已解决 <code>resolved</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028113036.png\" alt=\"img\"></p>\n<p>当所有的问题已解决之后（如果选择了审批人也需要审批通过），<code>Maintainers（Masters）</code>成员点击 <code>合并（Merge）</code> 完成合并即可。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028113040.png\" alt=\"img\"></p>\n<p><code>Merge</code> 完成之后，可以选择 <code>删除源分支（Remove Source Branch）</code> 等操作。</p>\n<p><code>develop</code> 分支合并到 <code>release</code> 分支，以及 <code>release</code> 分支合并到 <code>master</code> 是不需要经过 <code>Code Review</code> 的，直接 <code>Merge</code> 即可。这里就省略了…</p>\n","categories":["DevOps"],"tags":["Git","开发规范"]},{"title":"Git 分支管理规范","url":"/2022/10/26/3c24a376.html","content":"<h2 id=\"分支分类\"><a href=\"#分支分类\" class=\"headerlink\" title=\"分支分类\"></a>分支分类</h2><ol>\n<li><strong>根据生命周期区分</strong></li>\n</ol>\n<ul>\n<li><strong>主分支：</strong>master，develop；</li>\n<li><strong>临时分支：</strong>feature/_，release/_，hotfix/*；</li>\n</ul>\n<ol start=\"2\">\n<li><strong>根据用途区分</strong></li>\n</ol>\n<ul>\n<li><strong>发布/预发布分支：</strong>master，release/*；</li>\n<li><strong>开发分支：</strong>develop；</li>\n<li><strong>功能分支：</strong>feature/*；<ul>\n<li><strong>热修复分支：</strong>hotfix/*；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分支用途\"><a href=\"#分支用途\" class=\"headerlink\" title=\"分支用途\"></a>分支用途</h2><h3 id=\"master-分支\"><a href=\"#master-分支\" class=\"headerlink\" title=\"master 分支\"></a>master 分支</h3><p>master 分支主要放稳定、随时可上线的版本。这个分支只能从别的分支上合并过来，一般来讲，从 develop 上合并，或者从 bugfix 分支上合并过来。不能直接在 master 分支上进行 commit 文件。因为是稳定的版本，所以每次版本发布都要在这个分支上添加<code>标签</code>(tag)。</p>\n<h3 id=\"develop-分支\"><a href=\"#develop-分支\" class=\"headerlink\" title=\"develop 分支\"></a>develop 分支</h3><p>develop 分支是所有开发分支的母体，所有的开发分支都要从 develop 上切出来，开发完成之后最后都要合并到 develop 上。</p>\n<h3 id=\"hotfix-分支\"><a href=\"#hotfix-分支\" class=\"headerlink\" title=\"hotfix 分支\"></a>hotfix 分支</h3><p>命名规则：<code>hotfix/*</code> –&gt; <code>hotfix/v+bug修复的版本号</code></p>\n<p>hotfix 分支用来修复生产中的紧急 bug，由于 develop 分支尚处于开发过程中，代码不稳定，不能直接应用于生产。所以从 master 分支上切出一个分支，修复完成之后合并到 master 分支，并且合并到 develop 上。</p>\n<h3 id=\"release-分支\"><a href=\"#release-分支\" class=\"headerlink\" title=\"release 分支\"></a>release 分支</h3><p>命名规则：<code>release/*</code> –&gt; <code>release/v+发布的版本号</code></p>\n<p>release 分支可以称之为预发布的版本。当我们认为 develop 版本的代码已经趋于成熟，我们可以打一个 release 分支。在 release 分支上测试完成之后，要将代码合并到 master 分支和 develop 上。master 分支是线上版本，而合并到 develop 版本是因为，在测试过程中，一些细节的东西可能会修改，因此这些优化的内容也应该合并到最终版本以及开发版本中。</p>\n<h3 id=\"feature-分支\"><a href=\"#feature-分支\" class=\"headerlink\" title=\"feature 分支\"></a>feature 分支</h3><p>命名规则：<code>feature/*</code> –&gt; <code>feature/功能名称</code></p>\n<p>feature 分支是最经常使用的分支了。当我们收到一个新的开发功能时，应该在 develop 分支上切出一个 feature 分支。用来完成新功能的开发，开发完成之后，要合并进 develop 分支上。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20221028110813.png\" alt=\"img\"></p>\n<blockquote>\n<p><a href=\"https://blog.kyire.site/2022/08/05/c7bea606.html\">Git Flow 工作流 | Kyire の Blog</a></p>\n</blockquote>\n","categories":["DevOps"],"tags":["Git","开发规范"]},{"title":"Docker 部署的微服务注册到 Nacos 的 IP 为私网无法访问","url":"/2022/08/11/e8458f8e.html","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>使用 docker 集群部署微服务时，注册到 nacos 上的 ip 会使用 docker 容器的虚拟内网 ip 作为注册地址，这会导致集群部署服务时，nacos 无法解析对应服务的 ip。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><blockquote>\n<p>参考：<a href=\"https://github.com/alibaba/nacos/issues/310\">注册服务获取 IP 的问题 · Issue #310 · alibaba/nacos (github.com)</a></p>\n</blockquote>\n<h3 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h3><p>docker compose 配置文件中设置网络模式为 host</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br></pre></td></tr></table></figure>\n\n<p>host 网络模式是直接使用宿主机的 IP 地址与外界进行通信</p>\n<h3 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h3><p>nacos 配置指定注册 ip/host</p>\n<p>application.yml 配置文件中添加如下配置即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"comment\"># 配置host，避免docker部署nacos注册服务ip为内网地址</span></span><br><span class=\"line\">        <span class=\"attr\">ip:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n","categories":["Linux"],"tags":["技巧","开发工具"]},{"title":"MapStruct 对象转换","url":"/2022/08/07/2e504595.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着微服务和分布式应用程序迅速占领开发领域，数据完整性和安全性比以往任何时候都更加重要。在这些松散耦合的系统之间，安全的通信渠道和有限的数据传输是最重要的。大多数时候，终端用户或服务不需要访问模型中的全部数据，而只需要访问某些特定的部分。</p>\n<p>数据传输对象(Data Transfer Objects, DTO)经常被用于这些应用中。DTO 只是持有另一个对象中被请求的信息的对象。通常情况下，这些信息是有限的一部分。例如，在持久化层定义的实体和发往客户端的 DTO 之间经常会出现相互之间的转换。由于 DTO 是原始对象的反映，因此这些类之间的映射器在转换过程中扮演着关键角色。</p>\n<p>这就是 MapStruct 解决的问题：手动创建 bean 映射器非常耗时。 但是该库可以自动生成 Bean 映射器类。</p>\n<h2 id=\"简介-MapStruct\"><a href=\"#简介-MapStruct\" class=\"headerlink\" title=\"简介 MapStruct\"></a>简介 MapStruct</h2><p>MapStruct 是一个开源的基于 Java 的代码生成器，用于创建实现 Java Bean 之间转换的扩展映射器。使用 MapStruct，我们只需要创建接口，而该库会通过注解在编译过程中自动创建具体的映射实现，大大减少了通常需要手工编写的样板代码的数量。</p>\n<h2 id=\"MapStruct-依赖\"><a href=\"#MapStruct-依赖\" class=\"headerlink\" title=\"MapStruct 依赖\"></a><strong>MapStruct 依赖</strong></h2><p><strong>如果你使用</strong><code>**Maven**</code><strong>的话，可以通过引入依赖安装</strong><code>**MapStruct**</code>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mapstruct<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mapstruct<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个依赖项会导入<code>MapStruct</code>的核心注释。由于<code>MapStruct</code>在编译时工作，并且会集成到像<code>Maven</code>和<code>Gradle</code>这样的构建工具上，我们还必须在<build/>标签中添加一个插件<code>maven-compiler-plugin</code>，并在其配置中添加<code>annotationProcessorPaths</code>，该插件会在构建时生成对应的代码。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mapstruct<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mapstruct-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>**[MapStruct](<a href=\"https://link.zhihu.com/?target=https://search.maven.org/classic/#search|ga|1|g%3A&quot;org.mapstruct&quot;\">https://link.zhihu.com/?target=https://search.maven.org/classic/#search|ga|1|g%3A&quot;org.mapstruct&quot;</a> AND a%3A”mapstruct”)<strong>及其</strong>[处理器](<a href=\"https://link.zhihu.com/?target=https://search.maven.org/classic/#search|ga|1|g%3A&quot;org.mapstruct&quot;\">https://link.zhihu.com/?target=https://search.maven.org/classic/#search|ga|1|g%3A&quot;org.mapstruct&quot;</a> AND a%3A”mapstruct-processor”)<strong>的最新稳定版本都可以从</strong><a href=\"https://link.zhihu.com/?target=https://search.maven.org/search?q=g:org.mapstruct\">Maven 中央仓库</a>**中获得。</p>\n<h2 id=\"映射\"><a href=\"#映射\" class=\"headerlink\" title=\"映射\"></a><strong>映射</strong></h2><h3 id=\"基本映射\"><a href=\"#基本映射\" class=\"headerlink\" title=\"基本映射\"></a><strong>基本映射</strong></h3><p>我们先从一些基本的映射开始。我们会创建一个<code>Doctor</code>对象和一个<code>DoctorDto</code>。为了方便起见，它们的属性字段都使用相同的名称：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Doctor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DoctorDto</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，为了在这两者之间进行映射，我们要创建一个<code>DoctorMapper</code>接口。对该接口使用<code>@Mapper</code>注解，<code>MapStruct</code>就会知道这是两个类之间的映射器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DoctorMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">DoctorMapper</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> Mappers.getMapper(DoctorMapper.class);</span><br><span class=\"line\">    DoctorDto <span class=\"title function_\">toDto</span><span class=\"params\">(Doctor doctor)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码中创建了一个<code>DoctorMapper</code>类型的实例<code>INSTANCE</code>，在生成对应的实现代码后，这就是我们调用的“入口”。</p>\n<p>我们在接口中定义了<code>toDto()</code>方法，该方法接收一个<code>Doctor</code>实例为参数，并返回一个<code>DoctorDto</code>实例。这足以让 MapStruct 知道我们想把一个<code>Doctor</code>实例映射到一个<code>DoctorDto</code>实例。</p>\n<p>当我们构建/编译应用程序时，<code>MapStruct</code>注解处理器插件会识别出<code>DoctorMapper</code>接口并为其生成一个实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DoctorMapperImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DoctorMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DoctorDto <span class=\"title function_\">toDto</span><span class=\"params\">(Doctor doctor)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( doctor == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">DoctorDtoBuilder</span> <span class=\"variable\">doctorDto</span> <span class=\"operator\">=</span> DoctorDto.builder();</span><br><span class=\"line\"></span><br><span class=\"line\">        doctorDto.id(doctor.getId());</span><br><span class=\"line\">        doctorDto.name(doctor.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> doctorDto.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>DoctorMapperImpl</code>类中包含一个<code>toDto()</code>方法，将我们的<code>Doctor</code>属性值映射到<code>DoctorDto</code>的属性字段中。如果要将<code>Doctor</code>实例映射到一个<code>DoctorDto</code>实例，可以这样写</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">DoctorDto</span> doctorDto = DoctorMapper.INSTANCE.toDto(doctor);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：你可能也注意到了上面实现代码中的<code>DoctorDtoBuilder</code>。因为 builder 代码往往比较长，为了简洁起见，这里省略了 builder 模式的实现代码。如果你的类中包含 Builder，MapStruct 会尝试使用它来创建实例；如果没有的话，MapStruct 将通过<code>new</code>关键字进行实例化。</p>\n<ul>\n<li><h5 id=\"不同字段间映射\"><a href=\"#不同字段间映射\" class=\"headerlink\" title=\"不同字段间映射\"></a><strong>不同字段间映射</strong></h5></li>\n</ul>\n<p>通常，模型和<code>DTO</code>的字段名不会完全相同。由于团队成员各自指定命名，以及针对不同的调用服务，开发者对返回信息的打包方式选择不同，名称可能会有轻微的变化。</p>\n<p><code>MapStruct</code>通过<code>@Mapping</code>注解对这类情况提供了支持。</p>\n<p>我们先更新<code>Doctor</code>类，添加一个属性<code>specialty</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Doctor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String specialty;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>DoctorDto</code>类中添加一个<code>specialization</code>属性：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoctorDto</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String specialization;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们需要让 <code>DoctorMapper</code> 知道这里的不一致。我们可以使用 <code>@Mapping</code> 注解，并设置其内部的 <code>source</code> 和 <code>target</code> 标记分别指向不一致的两个字段。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoctorMapper</span> </span>&#123;</span><br><span class=\"line\">    DoctorMapper INSTANCE = Mappers.getMapper(DoctorMapper.<span class=\"keyword\">class</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping(source = <span class=\"string\">&quot;doctor.specialty&quot;</span>, target = <span class=\"string\">&quot;specialization&quot;</span>)</span></span><br><span class=\"line\">    DoctorDto toDto(Doctor doctor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Mapping</span>`这个注解代码的含义是：`Doctor`中的`specialty`字段对应于`DoctorDto`类的 `specialization</span><br></pre></td></tr></table></figure>\n\n<p>编译之后，会生成如下实现代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DoctorMapperImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DoctorMapper</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DoctorDto <span class=\"title function_\">toDto</span><span class=\"params\">(Doctor doctor)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (doctor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">DoctorDtoBuilder</span> <span class=\"variable\">doctorDto</span> <span class=\"operator\">=</span> DoctorDto.builder();</span><br><span class=\"line\"></span><br><span class=\"line\">        doctorDto.specialization(doctor.getSpecialty());</span><br><span class=\"line\">        doctorDto.id(doctor.getId());</span><br><span class=\"line\">        doctorDto.name(doctor.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> doctorDto.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"多个源类\"><a href=\"#多个源类\" class=\"headerlink\" title=\"多个源类\"></a><strong>多个源类</strong></h5></li>\n</ul>\n<p>有时，单个类不足以构建<code>DTO</code>，我们可能希望将多个类中的值聚合为一个<code>DTO</code>，供终端用户使用。这也可以通过在<code>@Mapping</code>注解中设置适当的标志来完成。</p>\n<p>我们先新建另一个对象 <code>Education</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Education</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String degreeName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String institute;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer yearOfPassing;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后向 <code>DoctorDto</code>中添加一个新的字段：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoctorDto</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String degree;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String specialization;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，将 <code>DoctorMapper</code> 接口更新为如下代码：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoctorMapper</span> </span>&#123;</span><br><span class=\"line\">    DoctorMapper INSTANCE = Mappers.getMapper(DoctorMapper.<span class=\"keyword\">class</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping(source = <span class=\"string\">&quot;doctor.specialty&quot;</span>, target = <span class=\"string\">&quot;specialization&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@Mapping(source = <span class=\"string\">&quot;education.degreeName&quot;</span>, target = <span class=\"string\">&quot;degree&quot;</span>)</span></span><br><span class=\"line\">    DoctorDto toDto(Doctor doctor, Education education);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们添加了另一个<code>@Mapping</code>注解，并将其<code>source</code>设置为<code>Education</code>类的<code>degreeName</code>，将<code>target</code>设置为<code>DoctorDto</code>类的<code>degree</code>字段。</p>\n<p>如果 <code>Education</code> 类和 <code>Doctor</code> 类包含同名的字段，我们必须让映射器知道使用哪一个，否则它会抛出一个异常。举例来说，如果两个模型都包含一个<code>id</code>字段，我们就要选择将哪个类中的<code>id</code>映射到 DTO 属性中。</p>\n<ul>\n<li><h5 id=\"子对象映射\"><a href=\"#子对象映射\" class=\"headerlink\" title=\"子对象映射\"></a><strong>子对象映射</strong></h5></li>\n</ul>\n<p>多数情况下，POJO 中不会<em>只</em>包含基本数据类型，其中往往会包含其它类。比如说，一个<code>Doctor</code>类中会有多个患者类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Patient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Doctor 中添加一个患者列表<code>List</code>:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Doctor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String specialty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Patient&gt; patientList;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Patient</code>需要转换，为其创建一个对应的 DTO</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PatientDto</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，在 <code>DoctorDto</code> 中新增一个存储 <code>PatientDto</code>的列表：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoctorDto</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String degree;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String specialization;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;PatientDto&gt; patientDtoList;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters or builder</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在修改 <code>DoctorMapper</code>之前，我们先创建一个支持 <code>Patient</code> 和 <code>PatientDto</code> 转换的映射器接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PatientMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PatientMapper</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> Mappers.getMapper(PatientMapper.class);</span><br><span class=\"line\">    PatientDto <span class=\"title function_\">toDto</span><span class=\"params\">(Patient patient)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个基本映射器，只会处理几个基本数据类型。</p>\n<p>然后，我们再来修改 <code>DoctorMapper</code> 处理一下患者列表：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper(uses = &#123;PatientMapper.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoctorMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    DoctorMapper INSTANCE = Mappers.getMapper(DoctorMapper.<span class=\"keyword\">class</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping(source = <span class=\"string\">&quot;doctor.patientList&quot;</span>, target = <span class=\"string\">&quot;patientDtoList&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@Mapping(source = <span class=\"string\">&quot;doctor.specialty&quot;</span>, target = <span class=\"string\">&quot;specialization&quot;</span>)</span></span><br><span class=\"line\">    DoctorDto toDto(Doctor doctor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为我们要处理另一个需要映射的类，所以这里设置了<code>@Mapper</code>注解的<code>uses</code>标志，这样现在的 <code>@Mapper</code> 就可以使用另一个 <code>@Mapper</code>映射器。我们这里只加了一个，但你想在这里添加多少 class/mapper 都可以。</p>\n<p>我们已经添加了<code>uses</code>标志，所以在为<code>DoctorMapper</code>接口生成映射器实现时，MapStruct 也会把 <code>Patient</code> 模型转换成 <code>PatientDto</code> ——因为我们已经为这个任务注册了 <code>PatientMapper</code>。</p>\n<p>编译查看最新想实现代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DoctorMapperImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DoctorMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> final <span class=\"title class_\">PatientMapper</span> patientMapper = <span class=\"title class_\">Mappers</span>.<span class=\"title function_\">getMapper</span>( <span class=\"title class_\">PatientMapper</span>.<span class=\"property\">class</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title class_\">DoctorDto</span> <span class=\"title function_\">toDto</span>(<span class=\"params\">Doctor doctor</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( doctor == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">DoctorDtoBuilder</span> doctorDto = <span class=\"title class_\">DoctorDto</span>.<span class=\"title function_\">builder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        doctorDto.<span class=\"title function_\">patientDtoList</span>( <span class=\"title function_\">patientListToPatientDtoList</span>(doctor.<span class=\"title function_\">getPatientList</span>()));</span><br><span class=\"line\">        doctorDto.<span class=\"title function_\">specialization</span>( doctor.<span class=\"title function_\">getSpecialty</span>() );</span><br><span class=\"line\">        doctorDto.<span class=\"title function_\">id</span>( doctor.<span class=\"title function_\">getId</span>() );</span><br><span class=\"line\">        doctorDto.<span class=\"title function_\">name</span>( doctor.<span class=\"title function_\">getName</span>() );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> doctorDto.<span class=\"title function_\">build</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"title class_\">List</span>&lt;<span class=\"title class_\">PatientDto</span>&gt; <span class=\"title function_\">patientListToPatientDtoList</span>(<span class=\"params\">List&lt;Patient&gt; list</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( list == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">List</span>&lt;<span class=\"title class_\">PatientDto</span>&gt; list1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;<span class=\"title class_\">PatientDto</span>&gt;( list.<span class=\"title function_\">size</span>() );</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"title class_\">Patient</span> patient : list ) &#123;</span><br><span class=\"line\">            list1.<span class=\"title function_\">add</span>( patientMapper.<span class=\"title function_\">toDto</span>( patient ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显然，除了<code>toDto()</code>映射方法外，最终实现中还添加了一个新的映射方法——&gt;<code>patientListToPatientDtoList()</code>。这个方法是在没有显式定义的情况下添加的，只是因为我们把<code>PatientMapper</code>添加到了<code>DoctorMapper</code>中。</p>\n<p>该方法会遍历一个<code>Patient</code>列表，将每个元素转换为<code>PatientDto</code>，并将转换后的对象添加到<code>DoctorDto</code>对象内中的列表中。</p>\n<h3 id=\"更新现有实例\"><a href=\"#更新现有实例\" class=\"headerlink\" title=\"更新现有实例\"></a><strong>更新现有实例</strong></h3><p>有时，我们希望用 DTO 的最新值更新一个模型中的属性，对目标对象(我们的例子中是<code>DoctorDto</code>)使用<code>@MappingTarget</code>注解，就可以更新现有的实例.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(uses = &#123;PatientMapper.class&#125;)</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    DoctorMapper INSTANCE = Mappers.getMapper(DoctorMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;doctorDto.patientDtoList&quot;, target = &quot;patientList&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctorDto.specialization&quot;, target = &quot;specialty&quot;)</span><br><span class=\"line\">    void updateModel(DoctorDto doctorDto, @MappingTarget Doctor doctor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新生成实现代码，就可以得到<code>updateModel()</code>方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class DoctorMapperImpl implements DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void updateModel(DoctorDto doctorDto, Doctor doctor) &#123;</span><br><span class=\"line\">        if (doctorDto == null) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (doctor.getPatientList() != null) &#123;</span><br><span class=\"line\">            List&lt;Patient&gt; list = patientDtoListToPatientList(doctorDto.getPatientDtoList());</span><br><span class=\"line\">            if (list != null) &#123;</span><br><span class=\"line\">                doctor.getPatientList().clear();</span><br><span class=\"line\">                doctor.getPatientList().addAll(list);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                doctor.setPatientList(null);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            List&lt;Patient&gt; list = patientDtoListToPatientList(doctorDto.getPatientDtoList());</span><br><span class=\"line\">            if (list != null) &#123;</span><br><span class=\"line\">                doctor.setPatientList(list);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        doctor.setSpecialty(doctorDto.getSpecialization());</span><br><span class=\"line\">        doctor.setId(doctorDto.getId());</span><br><span class=\"line\">        doctor.setName(doctorDto.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，由于患者列表是该模型中的子实体，因此患者列表也会进行更新。</p>\n<h3 id=\"数据类型映射\"><a href=\"#数据类型映射\" class=\"headerlink\" title=\"数据类型映射\"></a><strong>数据类型映射</strong></h3><p>MapStruct 支持<code>source</code>和<code>target</code>属性之间的数据类型转换。它还提供了基本类型及其相应的包装类之间的自动转换。</p>\n<p>自动类型转换适用于：</p>\n<ul>\n<li>基本类型及其对应的包装类之间。比如， <code>int</code> 和 <code>Integer</code>， <code>float</code> 和 <code>Float</code>， <code>long</code> 和 <code>Long</code>，<code>boolean</code> 和 <code>Boolean</code> 等。</li>\n<li>任意基本类型与任意包装类之间。如 <code>int</code> 和 <code>long</code>， <code>byte</code> 和 <code>Integer</code> 等。</li>\n<li>所有基本类型及包装类与<code>String</code>之间。如 <code>boolean</code> 和 <code>String</code>， <code>Integer</code> 和 <code>String</code>， <code>float</code> 和 <code>String</code> 等。</li>\n<li>枚举和<code>String</code>之间。</li>\n<li>Java 大数类型(<code>java.math.BigInteger</code>， <code>java.math.BigDecimal</code>) 和 Java 基本类型(包括其包装类)与<code>String</code>之间。</li>\n<li>其它情况详见 **<a href=\"https://link.zhihu.com/?target=https://mapstruct.org/documentation/stable/reference/html/#implicit-type-conversions\">MapStruct 官方文档</a>**。</li>\n</ul>\n<p>因此，在生成映射器代码的过程中，如果源字段和目标字段之间属于上述任何一种情况，则 MapStrcut 会自行处理类型转换。</p>\n<p>我们修改 <code>PatientDto</code> ，新增一个 <code>dateofBirth</code>字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class PatientDto &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private LocalDate dateOfBirth;</span><br><span class=\"line\">    // getters and setters or builder</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一方面，加入 <code>Patient</code> 对象中有一个<code>String</code> 类型的 <code>dateOfBirth</code> ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Patient &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private String dateOfBirth;</span><br><span class=\"line\">    // getters and setters or builder</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在两者之间创建一个映射器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper</span><br><span class=\"line\">public interface PatientMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;dateOfBirth&quot;, target = &quot;dateOfBirth&quot;, dateFormat = &quot;dd/MMM/yyyy&quot;)</span><br><span class=\"line\">    Patient toModel(PatientDto patientDto);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当对日期进行转换时，我们也可以使用 <code>dateFormat</code> 设置格式声明。生成的实现代码形式大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class PatientMapperImpl implements PatientMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Patient toModel(PatientDto patientDto) &#123;</span><br><span class=\"line\">        if (patientDto == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        PatientBuilder patient = Patient.builder();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (patientDto.getDateOfBirth() != null) &#123;</span><br><span class=\"line\">            patient.dateOfBirth(DateTimeFormatter.ofPattern(&quot;dd/MMM/yyyy&quot;)</span><br><span class=\"line\">                                .format(patientDto.getDateOfBirth()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        patient.id(patientDto.getId());</span><br><span class=\"line\">        patient.name(patientDto.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        return patient.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这里使用了 <code>dateFormat</code> 声明的日期格式。如果我们没有声明格式的话，MapStruct 会使用 <code>LocalDate</code>的默认格式，大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (patientDto.getDateOfBirth() != null) &#123;</span><br><span class=\"line\">    patient.dateOfBirth(DateTimeFormatter.ISO_LOCAL_DATE</span><br><span class=\"line\">                        .format(patientDto.getDateOfBirth()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"数字格式转换\"><a href=\"#数字格式转换\" class=\"headerlink\" title=\"数字格式转换\"></a><strong>数字格式转换</strong></h5></li>\n</ul>\n<p>上面的例子中可以看到，在进行日期转换的时候，可以通过<code>dateFormat</code>标志指定日期的格式。</p>\n<p>除此之外，对于数字的转换，也可以使用<code>numberFormat</code>指定显示格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 数字格式转换示例</span><br><span class=\"line\">   @Mapping(source = &quot;price&quot;, target = &quot;price&quot;, numberFormat = &quot;$#.00&quot;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"枚举映射\"><a href=\"#枚举映射\" class=\"headerlink\" title=\"枚举映射\"></a><strong>枚举映射</strong></h3><p>枚举映射的工作方式与字段映射相同。MapStruct 会对具有相同名称的枚举进行映射，这一点没有问题。但是，对于具有不同名称的枚举项，我们需要使用<code>@ValueMapping</code>注解。同样，这与普通类型的<code>@Mapping</code>注解也相似。</p>\n<p>我们先创建两个枚举。第一个是 <code>PaymentType</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public enum PaymentType &#123;</span><br><span class=\"line\">    CASH,</span><br><span class=\"line\">    CHEQUE,</span><br><span class=\"line\">    CARD_VISA,</span><br><span class=\"line\">    CARD_MASTER,</span><br><span class=\"line\">    CARD_CREDIT</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比如说，这是一个应用内可用的支付方式，现在我们要根据这些选项创建一个更一般、有限的识图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public enum PaymentTypeView &#123;</span><br><span class=\"line\">    CASH,</span><br><span class=\"line\">    CHEQUE,</span><br><span class=\"line\">    CARD</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们创建这两个<code>enum</code>之间的映射器接口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper</span><br><span class=\"line\">public interface PaymentTypeMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    PaymentTypeMapper INSTANCE = Mappers.getMapper(PaymentTypeMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @ValueMappings(&#123;</span><br><span class=\"line\">            @ValueMapping(source = &quot;CARD_VISA&quot;, target = &quot;CARD&quot;),</span><br><span class=\"line\">            @ValueMapping(source = &quot;CARD_MASTER&quot;, target = &quot;CARD&quot;),</span><br><span class=\"line\">            @ValueMapping(source = &quot;CARD_CREDIT&quot;, target = &quot;CARD&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    PaymentTypeView paymentTypeToPaymentTypeView(PaymentType paymentType);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中，我们设置了一般性的<code>CARD</code>值，和更具体的 <code>CARD_VISA</code>, <code>CARD_MASTER</code> 和 <code>CARD_CREDIT</code> 。两个枚举间的枚举项数量不匹配—— <code>PaymentType</code> 有 5 个值，而 <code>PaymentTypeView</code> 只有 3 个。</p>\n<p>为了在这些枚举项之间建立桥梁，我们可以使用<code>@ValueMappings</code>注解，该注解中可以包含多个<code>@ValueMapping</code>注解。这里，我们将<code>source</code>设置为三个具体枚举项之一，并将<code>target</code>设置为<code>CARD</code>。</p>\n<p>MapStruct 自然会处理这些情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class PaymentTypeMapperImpl implements PaymentTypeMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public PaymentTypeView paymentTypeToPaymentTypeView(PaymentType paymentType) &#123;</span><br><span class=\"line\">        if (paymentType == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        PaymentTypeView paymentTypeView;</span><br><span class=\"line\"></span><br><span class=\"line\">        switch (paymentType) &#123;</span><br><span class=\"line\">            case CARD_VISA: paymentTypeView = PaymentTypeView.CARD;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">            case CARD_MASTER: paymentTypeView = PaymentTypeView.CARD;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">            case CARD_CREDIT: paymentTypeView = PaymentTypeView.CARD;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">            case CASH: paymentTypeView = PaymentTypeView.CASH;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">            case CHEQUE: paymentTypeView = PaymentTypeView.CHEQUE;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">            default: throw new IllegalArgumentException( &quot;Unexpected enum constant: &quot; + paymentType );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return paymentTypeView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>CASH</code>和<code>CHEQUE</code>默认转换为对应值，特殊的 <code>CARD</code> 值通过<code>switch</code>循环处理。</p>\n<p>但是，如果你要将很多值转换为一个更一般的值，这种方式就有些不切实际了。其实我们不必手动分配每一个值，只需要让 MapStruct 将所有剩余的可用枚举项（在目标枚举中找不到相同名称的枚举项），直接转换为对应的另一个枚举项。</p>\n<p>可以通过 <code>MappingConstants</code>实现这一点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@ValueMapping(source = MappingConstants.ANY_REMAINING, target = &quot;CARD&quot;)</span><br><span class=\"line\">PaymentTypeView paymentTypeToPaymentTypeView(PaymentType paymentType);</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，完成默认映射之后，所有剩余（未匹配）的枚举项都会映射为<code>CARD</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public PaymentTypeView paymentTypeToPaymentTypeView(PaymentType paymentType) &#123;</span><br><span class=\"line\">    if ( paymentType == null ) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    PaymentTypeView paymentTypeView;</span><br><span class=\"line\"></span><br><span class=\"line\">    switch ( paymentType ) &#123;</span><br><span class=\"line\">        case CASH: paymentTypeView = PaymentTypeView.CASH;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">        case CHEQUE: paymentTypeView = PaymentTypeView.CHEQUE;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">        default: paymentTypeView = PaymentTypeView.CARD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return paymentTypeView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一种选择是使用<code>ANY UNMAPPED</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@ValueMapping(source = MappingConstants.ANY_UNMAPPED, target = &quot;CARD&quot;)</span><br><span class=\"line\">PaymentTypeView paymentTypeToPaymentTypeView(PaymentType paymentType);</span><br></pre></td></tr></table></figure>\n\n<p>采用这种方式时，MapStruct 不会像前面那样先处理默认映射，再将剩余的枚举项映射到<code>target</code>值。而是，直接将<em>所有</em>未通过<code>@ValueMapping</code>注解做显式映射的值都转换为<code>target</code>值。</p>\n<h3 id=\"集合映射\"><a href=\"#集合映射\" class=\"headerlink\" title=\"集合映射\"></a><strong>集合映射</strong></h3><p>简单来说，使用 MapStruct 处理集合映射的方式与处理简单类型相同。</p>\n<p>我们创建一个简单的接口或抽象类并声明映射方法。 MapStruct 将根据我们的声明自动生成映射代码。 通常，生成的代码会遍历源集合，将每个元素转换为目标类型，并将每个转换后元素添加到目标集合中。</p>\n<ul>\n<li><h5 id=\"List-映射\"><a href=\"#List-映射\" class=\"headerlink\" title=\"List 映射\"></a><strong>List 映射</strong></h5></li>\n</ul>\n<p>我们先定义一个新的映射方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\">    List&lt;DoctorDto&gt; map(List&lt;Doctor&gt; doctor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的代码大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class DoctorMapperImpl implements DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;DoctorDto&gt; map(List&lt;Doctor&gt; doctor) &#123;</span><br><span class=\"line\">        if ( doctor == null ) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;DoctorDto&gt; list = new ArrayList&lt;DoctorDto&gt;( doctor.size() );</span><br><span class=\"line\">        for ( Doctor doctor1 : doctor ) &#123;</span><br><span class=\"line\">            list.add( doctorToDoctorDto( doctor1 ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected DoctorDto doctorToDoctorDto(Doctor doctor) &#123;</span><br><span class=\"line\">        if ( doctor == null ) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        DoctorDto doctorDto = new DoctorDto();</span><br><span class=\"line\"></span><br><span class=\"line\">        doctorDto.setId( doctor.getId() );</span><br><span class=\"line\">        doctorDto.setName( doctor.getName() );</span><br><span class=\"line\">        doctorDto.setSpecialization( doctor.getSpecialization() );</span><br><span class=\"line\"></span><br><span class=\"line\">        return doctorDto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，MapStruct 为我们自动生成了从<code>Doctor</code>到<code>DoctorDto</code>的映射方法。</p>\n<p>但是需要注意，如果我们在 DTO 中新增一个字段<code>fullName</code>，生成代码时会出现错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">警告: Unmapped target property: &quot;fullName&quot;.</span><br></pre></td></tr></table></figure>\n\n<p>基本上，这意味着 MapStruct 在当前情况下无法为我们自动生成映射方法。因此，我们需要手动定义<code>Doctor</code>和<code>DoctorDto</code>之间的映射方法。具体参考之前的小节。</p>\n<ul>\n<li><h5 id=\"Set-和-Map-映射\"><a href=\"#Set-和-Map-映射\" class=\"headerlink\" title=\"Set 和 Map 映射\"></a><strong>Set 和 Map 映射</strong></h5></li>\n</ul>\n<p>Set 与 Map 型数据的处理方式与 List 相似。按照以下方式修改<code>DoctorMapper</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Set&lt;DoctorDto&gt; setConvert(Set&lt;Doctor&gt; doctor);</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, DoctorDto&gt; mapConvert(Map&lt;String, Doctor&gt; doctor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的最终实现代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class DoctorMapperImpl implements DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Set&lt;DoctorDto&gt; setConvert(Set&lt;Doctor&gt; doctor) &#123;</span><br><span class=\"line\">        if ( doctor == null ) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;DoctorDto&gt; set = new HashSet&lt;DoctorDto&gt;( Math.max( (int) ( doctor.size() / .75f ) + 1, 16 ) );</span><br><span class=\"line\">        for ( Doctor doctor1 : doctor ) &#123;</span><br><span class=\"line\">            set.add( doctorToDoctorDto( doctor1 ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return set;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Map&lt;String, DoctorDto&gt; mapConvert(Map&lt;String, Doctor&gt; doctor) &#123;</span><br><span class=\"line\">        if ( doctor == null ) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, DoctorDto&gt; map = new HashMap&lt;String, DoctorDto&gt;( Math.max( (int) ( doctor.size() / .75f ) + 1, 16 ) );</span><br><span class=\"line\"></span><br><span class=\"line\">        for ( java.util.Map.Entry&lt;String, Doctor&gt; entry : doctor.entrySet() ) &#123;</span><br><span class=\"line\">            String key = entry.getKey();</span><br><span class=\"line\">            DoctorDto value = doctorToDoctorDto( entry.getValue() );</span><br><span class=\"line\">            map.put( key, value );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected DoctorDto doctorToDoctorDto(Doctor doctor) &#123;</span><br><span class=\"line\">        if ( doctor == null ) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        DoctorDto doctorDto = new DoctorDto();</span><br><span class=\"line\"></span><br><span class=\"line\">        doctorDto.setId( doctor.getId() );</span><br><span class=\"line\">        doctorDto.setName( doctor.getName() );</span><br><span class=\"line\">        doctorDto.setSpecialization( doctor.getSpecialization() );</span><br><span class=\"line\"></span><br><span class=\"line\">        return doctorDto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与 List 映射类似，MapStruct 自动生成了<code>Doctor</code>转换为<code>DoctorDto</code>的映射方法。</p>\n<ul>\n<li><h5 id=\"集合映射策略\"><a href=\"#集合映射策略\" class=\"headerlink\" title=\"集合映射策略\"></a><strong>集合映射策略</strong></h5></li>\n</ul>\n<p>很多场景中，我们需要对具有父子关系的数据类型进行转换。通常来说，会有一个数据类型（父），其字段是另一个数据类型（子）的集合。</p>\n<p>对于这种情况，MapStruct 提供了一种方法来选择如何将子类型设置或添加到父类型中。具体来说，就是<code>@Mapper</code>注解中的<code>collectionMappingStrategy</code>属性，该属性可以取值为<code>ACCESSOR_ONLY</code>， <code>SETTER_PREFERRED</code>， <code>ADDER_PREFERRED</code> 或<code>TARGET_IMMUTABLE</code>。</p>\n<p>这些值分别表示不同的为子类型集合赋值的方式。默认值是<code>ACCESSOR_ONLY</code>，这意味着只能使用访问器来设置子集合。</p>\n<p>当父类型中的<em>Collection</em>字段<code>setter</code>方法不可用，但我们有一个子类型<code>add</code>方法时，这个选项就派上用场了；另一种有用的情况是父类型中的<em>Collection</em>字段是不可变的。</p>\n<p>我们新建一个类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Hospital &#123;</span><br><span class=\"line\">    private List&lt;Doctor&gt; doctors;</span><br><span class=\"line\">    // getters and setters or builder</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时定义一个映射目标 DTO 类，同时定义子类型集合字段的 getter、setter 和 adder：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class HospitalDto &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;DoctorDto&gt; doctors;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 子类型集合字段getter</span><br><span class=\"line\">    public List&lt;DoctorDto&gt; getDoctors() &#123;</span><br><span class=\"line\">        return doctors;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  // 子类型集合字段setter</span><br><span class=\"line\">    public void setDoctors(List&lt;DoctorDto&gt; doctors) &#123;</span><br><span class=\"line\">        this.doctors = doctors;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  // 子类型数据adder</span><br><span class=\"line\">    public void addDoctor(DoctorDto doctorDTO) &#123;</span><br><span class=\"line\">        if (doctors == null) &#123;</span><br><span class=\"line\">            doctors = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        doctors.add(doctorDTO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的映射器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(uses = DoctorMapper.class)</span><br><span class=\"line\">public interface HospitalMapper &#123;</span><br><span class=\"line\">    HospitalMapper INSTANCE = Mappers.getMapper(HospitalMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    HospitalDto toDto(Hospital hospital);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的最终实现代码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class HospitalMapperImpl implements HospitalMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HospitalDto toDto(Hospital hospital) &#123;</span><br><span class=\"line\">        if ( hospital == null ) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        HospitalDto hospitalDto = new HospitalDto();</span><br><span class=\"line\"></span><br><span class=\"line\">        hospitalDto.setDoctors( doctorListToDoctorDtoList( hospital.getDoctors() ) );</span><br><span class=\"line\"></span><br><span class=\"line\">        return hospitalDto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在默认情况下采用的策略是<code>ACCESSOR_ONLY</code>，使用 setter 方法<code>setDoctors()</code>向<code>HospitalDto</code>对象中写入列表数据。</p>\n<p>相对的，如果使用 <code>ADDER_PREFERRED</code> 作为映射策略：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(collectionMappingStrategy = CollectionMappingStrategy.ADDER_PREFERRED,</span><br><span class=\"line\">        uses = DoctorMapper.class)</span><br><span class=\"line\">public interface HospitalMapper &#123;</span><br><span class=\"line\">    HospitalMapper INSTANCE = Mappers.getMapper(HospitalMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    HospitalDto toDto(Hospital hospital);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，会使用 adder 方法逐个将转换后的子类型 DTO 对象加入父类型的集合字段中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class CompanyMapperAdderPreferredImpl implements CompanyMapperAdderPreferred &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final EmployeeMapper employeeMapper = Mappers.getMapper( EmployeeMapper.class );</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public CompanyDTO map(Company company) &#123;</span><br><span class=\"line\">        if ( company == null ) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        CompanyDTO companyDTO = new CompanyDTO();</span><br><span class=\"line\"></span><br><span class=\"line\">        if ( company.getEmployees() != null ) &#123;</span><br><span class=\"line\">            for ( Employee employee : company.getEmployees() ) &#123;</span><br><span class=\"line\">                companyDTO.addEmployee( employeeMapper.map( employee ) );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return companyDTO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果目标 DTO 中既没有<code>setter</code>方法也没有<code>adder</code>方法，会先通过<code>getter</code>方法获取子类型集合，再调用集合的对应接口添加子类型对象。</p>\n<p>可以在**<a href=\"https://link.zhihu.com/?target=https://mapstruct.org/documentation/stable/reference/html/#collection-mapping-strategies\">参考文档</a>**中看到不同类型的 DTO 定义（是否包含 setter 方法或 adder 方法），采用不同的映射策略时，所使用的添加子类型到集合中的方式。</p>\n<ul>\n<li><h5 id=\"目标集合实现类型\"><a href=\"#目标集合实现类型\" class=\"headerlink\" title=\"目标集合实现类型\"></a><strong>目标集合实现类型</strong></h5></li>\n</ul>\n<p>MapStruct 支持将集合接口作为映射方法的目标类型。</p>\n<p>在这种情况下，在生成的代码中会使用一些集合接口默认实现。 例如，上面的示例中，<code>List</code>的默认实现是<code>ArrayList</code>。</p>\n<p>常见接口及其对应的默认实现如下：</p>\n<p>无法复制加载中的内容</p>\n<p>你可以在**<a href=\"https://link.zhihu.com/?target=https://mapstruct.org/documentation/stable/reference/html/#implementation-types-for-collection-mappings\">参考文档</a>**中找到 MapStruct 支持的所有接口列表，以及每个接口对应的默认实现类型。</p>\n<h2 id=\"进阶操作\"><a href=\"#进阶操作\" class=\"headerlink\" title=\"进阶操作\"></a><strong>进阶操作</strong></h2><h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a><strong>依赖注入</strong></h3><p>到目前为止，我们一直在通过<code>getMapper()</code>方法访问生成的映射器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DoctorMapper INSTANCE = Mappers.getMapper(DoctorMapper.class);</span><br></pre></td></tr></table></figure>\n\n<p>但是，如果你使用的是 Spring，只需要简单修改映射器配置，就可以像常规依赖项一样注入映射器。</p>\n<p>修改 <code>DoctorMapper</code> 以支持 Spring 框架：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(componentModel = &quot;spring&quot;)</span><br><span class=\"line\">public interface DoctorMapper &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>@Mapper</code>注解中添加<code>（componentModel = &quot;spring&quot;）</code>，是为了告诉 MapStruct，在生成映射器实现类时，我们希望它能支持通过 Spring 的依赖注入来创建。现在，就不需要在接口中添加 <code>INSTANCE</code> 字段了。</p>\n<p>这次生成的 <code>DoctorMapperImpl</code> 会带有 <code>@Component</code> 注解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class DoctorMapperImpl implements DoctorMapper &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只要被标记为<code>@Component</code>，Spring 就可以把它作为一个 bean 来处理，你就可以在其它类（如控制器）中通过<code>@Autowire</code>注解来使用它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class DoctorController() &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private DoctorMapper doctorMapper;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你不使用 Spring, MapStruct 也支持**<a href=\"https://link.zhihu.com/?target=https://docs.oracle.com/javaee/6/tutorial/doc/giwhl.html\">Java CDI</a>**：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(componentModel = &quot;cdi&quot;)</span><br><span class=\"line\">public interface DoctorMapper &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加默认值\"><a href=\"#添加默认值\" class=\"headerlink\" title=\"添加默认值\"></a><strong>添加默认值</strong></h3><p><code>@Mapping</code> 注解有两个很实用的标志就是常量 <code>constant</code> 和默认值 <code>defaultValue</code> 。无论<code>source</code>如何取值，都将始终使用常量值； 如果<code>source</code>取值为<code>null</code>，则会使用默认值。</p>\n<p>修改一下 <code>DoctorMapper</code> ，添加一个 <code>constant</code> 和一个 <code>defaultValue</code> ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(uses = &#123;PatientMapper.class&#125;, componentModel = &quot;spring&quot;)</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\">    @Mapping(target = &quot;id&quot;, constant = &quot;-1&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctor.patientList&quot;, target = &quot;patientDtoList&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctor.specialty&quot;, target = &quot;specialization&quot;, defaultValue = &quot;Information Not Available&quot;)</span><br><span class=\"line\">    DoctorDto toDto(Doctor doctor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果<code>specialty</code>不可用，我们会替换为<code>&quot;Information Not Available&quot;</code>字符串，此外，我们将<code>id</code>硬编码为<code>-1</code>。</p>\n<p>生成代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class DoctorMapperImpl implements DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private PatientMapper patientMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public DoctorDto toDto(Doctor doctor) &#123;</span><br><span class=\"line\">        if (doctor == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        DoctorDto doctorDto = new DoctorDto();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (doctor.getSpecialty() != null) &#123;</span><br><span class=\"line\">            doctorDto.setSpecialization(doctor.getSpecialty());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            doctorDto.setSpecialization(&quot;Information Not Available&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        doctorDto.setPatientDtoList(patientListToPatientDtoList(doctor.getPatientList()));</span><br><span class=\"line\">        doctorDto.setName(doctor.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        doctorDto.setId(-1);</span><br><span class=\"line\"></span><br><span class=\"line\">        return doctorDto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，如果 <code>doctor.getSpecialty()</code> 返回值为<code>null</code>，则将<code>specialization</code>设置为我们的默认信息。无论任何情况，都会对 <code>id</code>赋值，因为这是一个<code>constant</code>。</p>\n<h3 id=\"添加表达式\"><a href=\"#添加表达式\" class=\"headerlink\" title=\"添加表达式\"></a><strong>添加表达式</strong></h3><p>MapStruct 甚至允许在<code>@Mapping</code>注解中输入 Java 表达式。你可以设置 <code>defaultExpression</code> （ <code>source</code> 取值为 <code>null</code>时生效），或者一个<code>expression</code>（类似常量，永久生效）。</p>\n<p>在 <code>Doctor</code> 和 <code>DoctorDto</code>两个类中都加了两个新属性，一个是 <code>String</code> 类型的 <code>externalId</code> ，另一个是<code>LocalDateTime</code>类型的 <code>appointment</code> ，两个类大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Doctor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private String externalId;</span><br><span class=\"line\">    private String specialty;</span><br><span class=\"line\">    private LocalDateTime availability;</span><br><span class=\"line\">    private List&lt;Patient&gt; patientList;</span><br><span class=\"line\">    // getters and setters or builder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DoctorDto &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private String externalId;</span><br><span class=\"line\">    private String specialization;</span><br><span class=\"line\">    private LocalDateTime availability;</span><br><span class=\"line\">    private List&lt;PatientDto&gt; patientDtoList;</span><br><span class=\"line\">    // getters and setters or builder</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>DoctorMapper</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(uses = &#123;PatientMapper.class&#125;, componentModel = &quot;spring&quot;, imports = &#123;LocalDateTime.class, UUID.class&#125;)</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(target = &quot;externalId&quot;, expression = &quot;java(UUID.randomUUID().toString())&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctor.availability&quot;, target = &quot;availability&quot;, defaultExpression = &quot;java(LocalDateTime.now())&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctor.patientList&quot;, target = &quot;patientDtoList&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctor.specialty&quot;, target = &quot;specialization&quot;)</span><br><span class=\"line\">    DoctorDto toDtoWithExpression(Doctor doctor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这里将 <code>externalId</code>的值设置为 <code>java(UUID.randomUUID().toString())</code> ，如果源对象中没有 <code>availability</code> 属性，则会把目标对象中的 <code>availability</code> 设置为一个新的 <code>LocalDateTime</code>对象。</p>\n<p>由于表达式只是字符串，我们必须在表达式中指定使用的类。但是这里的表达式并不是最终执行的代码，只是一个字母的文本值。因此，我们要在 <code>@Mapper</code> 中添加 <code>imports = &#123;LocalDateTime.class, UUID.class&#125;</code> 。</p>\n<h3 id=\"添加自定义方法\"><a href=\"#添加自定义方法\" class=\"headerlink\" title=\"添加自定义方法\"></a><strong>添加自定义方法</strong></h3><p>到目前为止，我们一直使用的策略是添加一个“占位符”方法，并期望 MapStruct 能为我们实现它。其实我们还可以向接口中添加自定义的<code>default</code>方法，也可以通过<code>default</code>方法直接实现一个映射。然后我们可以通过实例直接调用该方法，没有任何问题。</p>\n<p>为此，我们创建一个 <code>DoctorPatientSummary</code>类，其中包含一个 <code>Doctor</code> 及其 <code>Patient</code>列表的汇总信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class DoctorPatientSummary &#123;</span><br><span class=\"line\">    private int doctorId;</span><br><span class=\"line\">    private int patientCount;</span><br><span class=\"line\">    private String doctorName;</span><br><span class=\"line\">    private String specialization;</span><br><span class=\"line\">    private String institute;</span><br><span class=\"line\">    private List&lt;Integer&gt; patientIds;</span><br><span class=\"line\">    // getters and setters or builder</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们在 <code>DoctorMapper</code>中添加一个<code>default</code>方法，该方法会将 <code>Doctor</code> 和 <code>Education</code> 对象转换为一个 <code>DoctorPatientSummary</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    default DoctorPatientSummary toDoctorPatientSummary(Doctor doctor, Education education) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return DoctorPatientSummary.builder()</span><br><span class=\"line\">                .doctorId(doctor.getId())</span><br><span class=\"line\">                .doctorName(doctor.getName())</span><br><span class=\"line\">                .patientCount(doctor.getPatientList().size())</span><br><span class=\"line\">        .patientIds(doctor.getPatientList()</span><br><span class=\"line\">                     .stream()</span><br><span class=\"line\">                      .map(Patient::getId)</span><br><span class=\"line\">                     .collect(Collectors.toList()))</span><br><span class=\"line\">              .institute(education.getInstitute())</span><br><span class=\"line\">                .specialization(education.getDegreeName())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用了 Builder 模式创建<code>DoctorPatientSummary</code>对象。</p>\n<p>在 MapStruct 生成映射器实现类之后，你就可以使用这个实现方法，就像访问任何其它映射器方法一样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DoctorPatientSummary summary = doctorMapper.toDoctorPatientSummary(dotor, education);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建自定义映射器\"><a href=\"#创建自定义映射器\" class=\"headerlink\" title=\"创建自定义映射器\"></a><strong>创建自定义映射器</strong></h3><p>前面我们一直是通过接口来设计映射器功能，其实我们也可以通过一个带 <code>@Mapper</code> 的 <code>abstract</code> 类来实现一个映射器。MapStruct 也会为这个类创建一个实现，类似于创建一个接口实现。</p>\n<p>我们重写一下前面的示例，这一次，我们将它修改为一个抽象类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper</span><br><span class=\"line\">public abstract class DoctorCustomMapper &#123;</span><br><span class=\"line\">    public DoctorPatientSummary toDoctorPatientSummary(Doctor doctor, Education education) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return DoctorPatientSummary.builder()</span><br><span class=\"line\">                .doctorId(doctor.getId())</span><br><span class=\"line\">                .doctorName(doctor.getName())</span><br><span class=\"line\">                .patientCount(doctor.getPatientList().size())</span><br><span class=\"line\">                .patientIds(doctor.getPatientList()</span><br><span class=\"line\">                        .stream()</span><br><span class=\"line\">                        .map(Patient::getId)</span><br><span class=\"line\">                        .collect(Collectors.toList()))</span><br><span class=\"line\">                .institute(education.getInstitute())</span><br><span class=\"line\">                .specialization(education.getDegreeName())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以用同样的方式使用这个映射器。由于限制较少，使用抽象类可以在创建自定义实现时给我们更多的控制和选择。另一个好处是可以添加<code>@BeforeMapping</code>和<code>@AfterMapping</code>方法。</p>\n<h3 id=\"BeforeMapping-和-AfterMapping\"><a href=\"#BeforeMapping-和-AfterMapping\" class=\"headerlink\" title=\"@BeforeMapping 和 @AfterMapping\"></a><strong>@BeforeMapping 和 @AfterMapping</strong></h3><p>为了进一步控制和定制化，我们可以定义 <code>@BeforeMapping</code> 和 <code>@AfterMapping</code>方法。显然，这两个方法是在每次映射之前和之后执行的。也就是说，在最终的实现代码中，会在两个对象真正映射之前和之后添加并执行这两个方法。</p>\n<p>可以在 <code>DoctorCustomMapper</code>中添加两个方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(uses = &#123;PatientMapper.class&#125;, componentModel = &quot;spring&quot;)</span><br><span class=\"line\">public abstract class DoctorCustomMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @BeforeMapping</span><br><span class=\"line\">    protected void validate(Doctor doctor) &#123;</span><br><span class=\"line\">        if(doctor.getPatientList() == null)&#123;</span><br><span class=\"line\">            doctor.setPatientList(new ArrayList&lt;&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @AfterMapping</span><br><span class=\"line\">    protected void updateResult(@MappingTarget DoctorDto doctorDto) &#123;</span><br><span class=\"line\">        doctorDto.setName(doctorDto.getName().toUpperCase());</span><br><span class=\"line\">        doctorDto.setDegree(doctorDto.getDegree().toUpperCase());</span><br><span class=\"line\">        doctorDto.setSpecialization(doctorDto.getSpecialization().toUpperCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;doctor.patientList&quot;, target = &quot;patientDtoList&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctor.specialty&quot;, target = &quot;specialization&quot;)</span><br><span class=\"line\">    public abstract DoctorDto toDoctorDto(Doctor doctor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>基于该抽象类生成一个映射器实现类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class DoctorCustomMapperImpl extends DoctorCustomMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private PatientMapper patientMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public DoctorDto toDoctorDto(Doctor doctor) &#123;</span><br><span class=\"line\">        validate(doctor);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (doctor == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        DoctorDto doctorDto = new DoctorDto();</span><br><span class=\"line\"></span><br><span class=\"line\">        doctorDto.setPatientDtoList(patientListToPatientDtoList(doctor</span><br><span class=\"line\">            .getPatientList()));</span><br><span class=\"line\">        doctorDto.setSpecialization(doctor.getSpecialty());</span><br><span class=\"line\">        doctorDto.setId(doctor.getId());</span><br><span class=\"line\">        doctorDto.setName(doctor.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        updateResult(doctorDto);</span><br><span class=\"line\"></span><br><span class=\"line\">        return doctorDto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到， <code>validate()</code> 方法会在 <code>DoctorDto</code> 对象实例化之前执行，而<code>updateResult()</code>方法会在映射结束之后执行。</p>\n<h3 id=\"映射异常处理\"><a href=\"#映射异常处理\" class=\"headerlink\" title=\"映射异常处理\"></a><strong>映射异常处理</strong></h3><p>异常处理是不可避免的，应用程序随时会产生异常状态。MapStruct 提供了对异常处理的支持，可以简化开发者的工作。</p>\n<p>考虑这样一个场景，我们想在 <code>Doctor</code> 映射为<code>DoctorDto</code>之前校验一下 <code>Doctor</code> 的数据。我们新建一个独立的 <code>Validator</code> 类进行校验：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Validator &#123;</span><br><span class=\"line\">    public int validateId(int id) throws ValidationException &#123;</span><br><span class=\"line\">        if(id == -1)&#123;</span><br><span class=\"line\">            throw new ValidationException(&quot;Invalid value in ID&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们修改一下 <code>DoctorMapper</code> 以使用 <code>Validator</code> 类，无需指定实现。跟之前一样， 在<code>@Mapper</code>使用的类列表中添加该类。我们还需要做的就是告诉 MapStruct 我们的 <code>toDto()</code> 会抛出 <code>throws ValidationException</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(uses = &#123;PatientMapper.class, Validator.class&#125;, componentModel = &quot;spring&quot;)</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;doctor.patientList&quot;, target = &quot;patientDtoList&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctor.specialty&quot;, target = &quot;specialization&quot;)</span><br><span class=\"line\">    DoctorDto toDto(Doctor doctor) throws ValidationException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终生成的映射器代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class DoctorMapperImpl implements DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private PatientMapper patientMapper;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private Validator validator;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public DoctorDto toDto(Doctor doctor) throws ValidationException &#123;</span><br><span class=\"line\">        if (doctor == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        DoctorDto doctorDto = new DoctorDto();</span><br><span class=\"line\"></span><br><span class=\"line\">        doctorDto.setPatientDtoList(patientListToPatientDtoList(doctor</span><br><span class=\"line\">            .getPatientList()));</span><br><span class=\"line\">        doctorDto.setSpecialization(doctor.getSpecialty());</span><br><span class=\"line\">        doctorDto.setId(validator.validateId(doctor.getId()));</span><br><span class=\"line\">        doctorDto.setName(doctor.getName());</span><br><span class=\"line\">        doctorDto.setExternalId(doctor.getExternalId());</span><br><span class=\"line\">        doctorDto.setAvailability(doctor.getAvailability());</span><br><span class=\"line\"></span><br><span class=\"line\">        return doctorDto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>MapStruct 自动将<code>doctorDto</code>的<code>id</code>设置为<code>Validator</code>实例的方法返回值。它还在该方法签名中添加了一个 throws 子句。</p>\n<p>注意，如果映射前后的一对属性的类型与<code>Validator</code>中的方法出入参类型一致，那该字段映射时就会调用<code>Validator</code>中的方法，所以该方式请谨慎使用。</p>\n<h3 id=\"映射配置\"><a href=\"#映射配置\" class=\"headerlink\" title=\"映射配置\"></a><strong>映射配置</strong></h3><p>MapStruct 为编写映射器方法提供了一些非常有用的配置。多数情况下，如果我们已经定义了两个类型之间的映射方法，当我们要添加相同类型之间的另一个映射方法时，我们往往会直接复制已有方法的映射配置。</p>\n<p>其实我们不必手动复制这些注解，只需要简单的配置就可以创建一个相同/相似的映射方法。</p>\n<h5 id=\"继承配置\"><a href=\"#继承配置\" class=\"headerlink\" title=\"继承配置\"></a><strong>继承配置</strong></h5><p>我们回顾一下“**<a href=\"https://zhuanlan.zhihu.com/p/368731266/edit#%E6%9B%B4%E6%96%B0%E7%8E%B0%E6%9C%89%E5%AE%9E%E4%BE%8B\">更新现有实例</a>**”，在该场景中，我们创建了一个映射器，根据 DoctorDto 对象的属性更新现有的 Doctor 对象的属性值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(uses = &#123;PatientMapper.class&#125;)</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    DoctorMapper INSTANCE = Mappers.getMapper(DoctorMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;doctorDto.patientDtoList&quot;, target = &quot;patientList&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctorDto.specialization&quot;, target = &quot;specialty&quot;)</span><br><span class=\"line\">    void updateModel(DoctorDto doctorDto, @MappingTarget Doctor doctor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设我们还有另一个映射器，将 <code>DoctorDto</code>转换为 <code>Doctor</code> ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(uses = &#123;PatientMapper.class, Validator.class&#125;)</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;doctorDto.patientDtoList&quot;, target = &quot;patientList&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctorDto.specialization&quot;, target = &quot;specialty&quot;)</span><br><span class=\"line\">    Doctor toModel(DoctorDto doctorDto);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个映射方法使用了相同的注解配置， <code>source</code>和 <code>target</code>都是相同的。其实我们可以使用<code>@InheritConfiguration</code>注释，从而避免这两个映射器方法的重复配置。</p>\n<p>如果对一个方法添加 <code>@InheritConfiguration</code> 注解，MapStruct 会检索其它的已配置方法，寻找可用于当前方法的注解配置。一般来说，这个注解都用于<code>mapping</code>方法后面的<code>update</code>方法，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(uses = &#123;PatientMapper.class, Validator.class&#125;, componentModel = &quot;spring&quot;)</span><br><span class=\"line\">public interface DoctorMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;doctorDto.specialization&quot;, target = &quot;specialty&quot;)</span><br><span class=\"line\">    @Mapping(source = &quot;doctorDto.patientDtoList&quot;, target = &quot;patientList&quot;)</span><br><span class=\"line\">    Doctor toModel(DoctorDto doctorDto);</span><br><span class=\"line\"></span><br><span class=\"line\">    @InheritConfiguration</span><br><span class=\"line\">    void updateModel(DoctorDto doctorDto, @MappingTarget Doctor doctor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"继承逆向配置\"><a href=\"#继承逆向配置\" class=\"headerlink\" title=\"继承逆向配置\"></a><strong>继承逆向配置</strong></h5><p>还有另外一个类似的场景，就是编写映射函数将**<em>Model</em>** 转为 **<em>DTO</em>**，以及将 <strong><em>DTO</em></strong> 转为 **<em>Model</em>**。如下面的代码所示，我们必须在两个函数上添加相同的注释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(componentModel = &quot;spring&quot;)</span><br><span class=\"line\">public interface PatientMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;dateOfBirth&quot;, target = &quot;dateOfBirth&quot;, dateFormat = &quot;dd/MMM/yyyy&quot;)</span><br><span class=\"line\">    Patient toModel(PatientDto patientDto);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;dateOfBirth&quot;, target = &quot;dateOfBirth&quot;, dateFormat = &quot;dd/MMM/yyyy&quot;)</span><br><span class=\"line\">    PatientDto toDto(Patient patient);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两个方法的配置不会是完全相同的，实际上，它们应该是相反的。将 <strong>Model</strong> 转为 **<em>DTO</em>**，以及将 <strong><em>DTO</em></strong> 转为 **<em>Model</em>**——映射前后的字段相同，但是源属性字段与目标属性字段是相反的。</p>\n<p>我们可以在第二个方法上使用<code>@InheritInverseConfiguration</code>注解，避免写两遍映射配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Mapper(componentModel = &quot;spring&quot;)</span><br><span class=\"line\">public interface PatientMapper &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mapping(source = &quot;dateOfBirth&quot;, target = &quot;dateOfBirth&quot;, dateFormat = &quot;dd/MMM/yyyy&quot;)</span><br><span class=\"line\">    Patient toModel(PatientDto patientDto);</span><br><span class=\"line\"></span><br><span class=\"line\">    @InheritInverseConfiguration</span><br><span class=\"line\">    PatientDto toDto(Patient patient);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个 Mapper 生成的代码是相同的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>在本文中，我们探讨了 MapStruct——一个用于创建映射器类的库。从基本映射到自定义方法和自定义映射器，此外， 我们还介绍了 MapStruct 提供的一些高级操作选项，包括依赖注入，数据类型映射、枚举映射和表达式使用。</p>\n<p>MapStruct 提供了一个功能强大的集成插件，可减少开发人员编写模板代码的工作量，使创建映射器的过程变得简单快捷。</p>\n","categories":["后端开发"],"tags":["技巧","开发工具"]},{"title":"Git Flow 工作流","url":"/2022/08/05/c7bea606.html","content":"<h2 id=\"Git-Flow-简介\"><a href=\"#Git-Flow-简介\" class=\"headerlink\" title=\"Git Flow 简介\"></a><strong>Git Flow 简介</strong></h2><p><a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">Git Flow</a> 是构建在 Git 之上的一个组织软件开发活动的模型，是在 Git 之上构建的一项软件开发最佳实践。Git Flow 是一套使用 Git 进行源代码管理时的一套行为规范和简化部分 Git 操作的工具。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173721.png\" alt=\"img\"></p>\n<h2 id=\"分支约定\"><a href=\"#分支约定\" class=\"headerlink\" title=\"分支约定\"></a><strong>分支约定</strong></h2><p>Git Flow 有主分支和辅助分支两类分支。其中主分支用于组织与软件开发、部署相关的活动；辅助分支组织为了解决特定的问题而进行的各种开发活动。</p>\n<p><strong>主分支（长期分支）</strong></p>\n<ul>\n<li><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#JjEuXU\">master </a>可执行版本记录分支，上面的每个节点都是发布到线上的一个版本，具体的版本号由 tag 确定</li>\n<li><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#jmNw5a\">develop </a>代码开发分支，所有开发</li>\n</ul>\n<p><strong>辅助分支（短期分支）</strong></p>\n<ul>\n<li><p><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#BglFMs\">feature </a>详细功能分支，每个功能分支应该尽可能的小（最好一天以内），开发完成之后尽快移入仓库中</p>\n</li>\n<li><p><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#sUtR3F\">release </a>测试版本发布分支，同时接收该版本的 bugfix，直到稳定之后再发布到 master，并合并到 develop 中。</p>\n</li>\n<li><p><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#Vq3QKh\">hotfix </a>紧急修复线上 bug 分支，直接从 master 的版本分出，同时最小版本号加 1。修复完成后发布一个最新版本，同时合并到 develop 中。</p>\n</li>\n<li><h3 id=\"主分支\"><a href=\"#主分支\" class=\"headerlink\" title=\"主分支\"></a><strong>主分支</strong></h3></li>\n</ul>\n<p>主分支是所有开发活动的核心分支。所有的开发活动产生的输出物最终都会反映到主分支的代码中。主分支分为<strong>master</strong>分支和<strong>develop</strong>分支。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173731.png\" alt=\"img\"></p>\n<h3 id=\"master-分支\"><a href=\"#master-分支\" class=\"headerlink\" title=\"master 分支\"></a>master 分支</h3><ul>\n<li>master 分支存放的是随时可供在生产环境中部署的稳定版本代码</li>\n<li>master 分支保存官方发布版本历史，release tag 标识不同的发布版本</li>\n<li>一个项目只能有一个 master 分支</li>\n<li>仅在发布新的可供部署的代码时才更新 master 分支上的代码</li>\n<li>每次更新 master，都需对 master 添加指定格式的 tag，用于发布或回滚</li>\n<li>master 分支是保护分支，不可直接 push 到远程仓 master 分支</li>\n<li>master 分支代码只能被 release 分支或 hotfix 分支合并</li>\n</ul>\n<h3 id=\"develop-分支\"><a href=\"#develop-分支\" class=\"headerlink\" title=\"develop 分支\"></a>develop 分支</h3><ul>\n<li><p>develop 分支是保存当前最新开发成果的分支</p>\n</li>\n<li><p>一个项目只能有一个 develop 分支</p>\n</li>\n<li><p>develop 分支衍生出各个 feature 分支</p>\n</li>\n<li><p>develop 分支是保护分支，不可直接 push 到远程仓库 develop 分支</p>\n</li>\n<li><p>develop 分支不能与 master 分支直接交互</p>\n</li>\n<li><h3 id=\"辅助分支\"><a href=\"#辅助分支\" class=\"headerlink\" title=\"辅助分支\"></a><strong>辅助分支</strong></h3></li>\n</ul>\n<p>辅助分支是用于组织解决特定问题的各种软件开发活动的分支。辅助分支主要用于组织软件新功能的并行开发、简化新功能开发代码的跟踪、辅助完成版本发布工作以及对生产代码的缺陷进行紧急修复工作。这些分支与主分支不同，通常只会在有限的时间范围内存在。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173734.png\" alt=\"img\"></p>\n<p><strong>辅助分支包括</strong>：</p>\n<ul>\n<li>用于开发新功能时所使用的<code>feature</code>分支</li>\n<li>用于辅助版本发布的<code>release</code>分支</li>\n<li>用于修正生产代码中的缺陷的<code>hotfix</code>分支</li>\n</ul>\n<p>以上这些分支都有固定的使用目的和分支操作限制。从单纯技术的角度说，这些分支与 Git 其他分支并 没有什么区别，但通过命名，我们定义了使用这些分支的方法。</p>\n<h3 id=\"feature-分支\"><a href=\"#feature-分支\" class=\"headerlink\" title=\"feature 分支\"></a>feature 分支</h3><p>使用规范：</p>\n<ul>\n<li>命名规则：<code>feature/*</code></li>\n<li><code>develop</code>分支的功能分支</li>\n<li>feature 分支使用<code>develop</code>分支作为它们的父类分支</li>\n<li>以功能为单位从<code>develop</code>拉一个<code>feature</code>分支</li>\n<li>每个<code>feature</code>分支颗粒要尽量小，以利于快速迭代和避免冲突</li>\n<li>当其中一个 feature 分支完成后，它会合并回<code>develop</code>分支</li>\n<li>当一个功能因为各种原因不开发了或者放弃了，这个分支直接废弃不影响<code>develop</code>分支</li>\n<li>feature 分支代码可以保存在开发者自己的代码库中而不强制提交到主代码库里</li>\n<li>feature 分支只与 develop 分支交互，不能与 master 分支直接交互</li>\n</ul>\n<p>如有几个同事同时开发，需要分割成几个小功能，每个人都需要从<code>develop</code>中拉出一个<code>feature</code>分支，但是每个<code>feature</code>颗粒要尽量小，因为它需要我们能尽早<code>merge</code>回<code>develop</code>分支，否则冲突解决起来就没完没了。同时，当一个功能因为各种原因不开发了或者放弃了，这个分支直接废弃，不影响<code>develop</code>分支。</p>\n<h3 id=\"release-分支\"><a href=\"#release-分支\" class=\"headerlink\" title=\"release 分支\"></a>release 分支</h3><p>使用规范：</p>\n<ul>\n<li>命名规则：<code>release/*</code>，“*”以本次发布的版本号为标识</li>\n<li><code>release</code>分支主要用来为发布新版的测试、修复做准备</li>\n<li>当需要为发布新版做准备时，从 develop 衍生出一个<code>release</code>分支</li>\n<li><code>release</code>分支可以从<code>develop</code>分支上指定<code>commit</code>派生出</li>\n<li><code>release</code>分支测试通过后，合并到<code>master</code>分支并且给 master 标记一个版本号</li>\n<li><code>release</code>分支一旦建立就将独立，不可再从其他分支 pull 代码</li>\n<li>必须合并回<code>develop</code>分支和<code>master</code>分支</li>\n</ul>\n<p><code>release</code>分支是为发布新的产品版本而设计的。在这个分支上的代码允许做小的缺陷修正、准备发布版本所需的各项说明信息（版本号、发布时间、编译时间等）。通过在<code>release</code>分支上进行这些工作可以让<code>develop</code>分支空闲出来以接受新的<code>feature</code>分支上的代码提交，进入新的软件开发迭代周期。</p>\n<p>当<code>develop</code>分支上的代码已经包含了所有即将发布的版本中所计划包含的软件功能，并且已通过所有测试时，我们就可以考虑准备创建<code>release</code>分支了。而所有在当前即将发布的版本之外的业务需求一定要确保不能混到<code>release</code>分支之内（避免由此引入一些不可控的系统缺陷）。</p>\n<p>成功的派生了<code>release</code>分支，并被赋予版本号之后，<code>develop</code>分支就可以为“下一个版本”服务了。所谓的“下一个版本”是在当前即将发布的版本之后发布的版本。版本号的命名可以依据项目定义的版本号命名规则进行。</p>\n<h3 id=\"hotfix-分支\"><a href=\"#hotfix-分支\" class=\"headerlink\" title=\"hotfix 分支\"></a>hotfix 分支</h3><p>使用规范：</p>\n<ul>\n<li>命名规则：<code>hotfix/*</code></li>\n<li><code>hotfix</code>分支用来快速给已发布产品修复 bug 或微调功能</li>\n<li>只能从<code>master</code>分支指定 tag 版本衍生出来</li>\n<li>一旦完成修复<code>bug</code>，必须合并回<code>master</code>分支和<code>develop</code>分支</li>\n<li><code>master</code>被合并后，应该被标记一个新的版本号</li>\n<li><code>hotfix</code>分支一旦建立就将独立，不可再从其他分支<code>pull</code>代码</li>\n</ul>\n<p>除了是计划外创建的以外，<code>hotfix</code>分支与<code>release</code>分支十分相似：都可以产生一个新的可供在生产环境部署的软件版本。</p>\n<p>当生产环境中的软件遇到了异常情况或者发现了严重到必须立即修复的软件缺陷的时候，就需要从<code>master</code>分支上指定的<code>TAG</code>版本派生<code>hotfix</code>分支来组织代码的紧急修复工作。</p>\n<p>这样做的显而易见的好处是不会打断正在进行的 develop 分支的开发工作，能够让团队中负责新功能开发的人与负责代码紧急修复的人并行的开展工作。</p>\n<h2 id=\"IDEA-安装-gitflow-插件\"><a href=\"#IDEA-安装-gitflow-插件\" class=\"headerlink\" title=\"IDEA 安装 gitflow 插件\"></a>IDEA 安装 gitflow 插件</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>前提你的电脑上需要安装了 git</p>\n<p><code>idea -&gt; file-settings -&gt; Plugins -&gt; marketplace</code>- 搜索 <code>Git Flow Integretion</code> 安装重启 <code>idea</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173738.png\" alt=\"img\"></p>\n<p>点击<code>IDEA</code>右下角的<code>No flow</code>初始化分支</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173742.png\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173944.png\" alt=\"img\"></p>\n<p>果出现 <code>Gitflow</code> 了，就表示完成了，可以使用</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173948.png\" alt=\"img\"></p>\n<p>初始化插件设置建议勾选的设置</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174004.png\" alt=\"img\"></p>\n<blockquote>\n<p>勾选配置说明：</p>\n</blockquote>\n<ul>\n<li><p>Fetch from Origin （开启从远程拉取）</p>\n</li>\n<li><p>Push on finish feature（完成时自动推送）</p>\n</li>\n<li><p>Use custom tag commit message（使用自定义的打标签 commit message）</p>\n</li>\n</ul>\n<h3 id=\"各工作流的执行样例\"><a href=\"#各工作流的执行样例\" class=\"headerlink\" title=\"各工作流的执行样例\"></a><strong>各工作流的执行样例</strong></h3><h4 id=\"新功能开发-feature\"><a href=\"#新功能开发-feature\" class=\"headerlink\" title=\"新功能开发 feature\"></a>新功能开发 <code>feature</code></h4><ol>\n<li>点击 idea 右下角的 <code>Gitflow -&gt; Start Feature -&gt; 填写新需求的简单描述 — ok</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174052.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>新生成的 <code>feature</code> 分支上编辑代码 -&gt; 提交到本地（或者同时推送到远程）</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174108.png\" alt=\"img\"></p>\n<ol start=\"3\">\n<li>新需求开发完成且提交到本地完成 -&gt; 点击 <code>Finish Feature</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174120.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>提测过程进行缺陷修改 -&gt; 在该 <code>release</code> 分支上进行修改</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174132.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li><code>Gitflow</code> 插件会自动将该 <code>release</code> 分支的代码合并到 <code>master</code> 和 <code>develop</code> 分支（本地和远程），并自动删除 <code>release</code> 分支，与此同时会自动触发打 <code>tag</code> 的操作</li>\n</ol>\n<p><strong><code>tag</code> 即表示一个版本，也就是合并一个分支到 <code>master</code> 都需要打一个 tag。</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174217.png\" alt=\"img\"></p>\n<ol start=\"6\">\n<li>提测过程完成——由管理员操作执行点击<code>Finish Releasea</code></li>\n</ol>\n<p><strong>注意：在提测未完成之前，严禁执行<code>Finish Releasea</code>！因为该操作会自动执行分支合并和删除的操作影响其他开发人员的工作</strong></p>\n<h4 id=\"常规缺陷修复-bugfix\"><a href=\"#常规缺陷修复-bugfix\" class=\"headerlink\" title=\"常规缺陷修复 bugfix\"></a><strong>常规缺陷修复</strong> <code>bugfix</code></h4><p><strong>本地自测 bug 修复</strong></p>\n<ol>\n<li>点击 idea 右下角的 <code>Gitflow -&gt; Start Bugfix -&gt; 填写bug信息并选择需要修复的develop分支</code></li>\n</ol>\n<p>以 <code>develop</code> 分支自测发现了 <code>bug</code>，现在要对其进行修复为例</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174314.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li><p>在 <code>Bugfix</code> 分支上 <code>bug</code> 修复完成后 -&gt; 点击 <code>Finish Bugfix</code> 推送修改到本地 <code>develop</code> 分支</p>\n</li>\n<li><p>将本地 <code>develop</code> 分支推送到远程</p>\n</li>\n</ol>\n<p><strong>注意：</strong><code>release</code><strong>分支上的缺陷修复也可以按照该流程执行</strong></p>\n<h4 id=\"线上-bug-修复\"><a href=\"#线上-bug-修复\" class=\"headerlink\" title=\"线上 bug 修复\"></a>线上 bug 修复</h4><ol>\n<li>修改线上 <code>bug</code> 的 <code>hotfix</code> 以 <code>master</code> 分支在运行时，出现了一个之前没有发现的 <code>bug</code>，现在要对其进行修复为例</li>\n<li>点击 idea 右下角的 <code>Gitflow -&gt; Start hotfix</code></li>\n<li>在 <code>hotfix</code> 分支上进行 <code>bug</code> 修复，提交到本地（可以一同推送到远程）</li>\n<li>修复完成之后——点击 <code>Finish hotfix gitflow</code> 插件会自动将该 <code>hotfix</code> 分支的代码合并 <code>master</code> 和 <code>develop</code> 分支（本地和远程），并自动删除 <code>hotfix</code> 分支，与此同时会自动触发打 <code>tag</code> 的操作</li>\n</ol>\n","categories":["DevOps"],"tags":["Git","开发规范"]},{"title":"Git 提交规约","url":"/2022/08/02/8dc61f7f.html","content":"<h2 id=\"通用规约\"><a href=\"#通用规约\" class=\"headerlink\" title=\"通用规约\"></a>通用规约</h2><ul>\n<li><strong>【强制】</strong>开发环境的配置文件严禁提交到远程库（前后端都适用）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地修改配置文件之后不让git跟踪文件修改状态</span></span><br><span class=\"line\"><span class=\"comment\"># git关闭跟踪文件修改提交</span></span><br><span class=\"line\">git update-index --assume-unchanged <span class=\"string\">&quot;application-dev.yml&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># git打开跟踪文件修改提交</span></span><br><span class=\"line\">git update-index --no-assume-unchanged <span class=\"string\">&quot;application-dev.yml&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>【强制】</strong>必须设置 git 提交用户信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git生成ssh密钥</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;xxx@vanxsoft.net&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 查看git的配置</span></span><br><span class=\"line\">git config --list</span><br><span class=\"line\"><span class=\"comment\"># 配置git用户信息，username必须为公司档案中文姓名，email必须为公司企业邮箱</span></span><br><span class=\"line\">git config --global user.name  <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\">git config --global user.email  <span class=\"string\">&quot;email&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 若出现中文乱码，请设置git的字符编码为utf-8</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一、提交信息格式\"><a href=\"#一、提交信息格式\" class=\"headerlink\" title=\"一、提交信息格式\"></a>一、提交信息格式</h2><p>提交信息需保持统一的格式，每次提交的 commit message 必须包括 type、scope 和 subject 三部分。</p>\n<p><strong>组成部分：</strong></p>\n<p>主要分为下面三个部分： Header，Body，Footer。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>(<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>): <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面详细解释下个个部分的含义。</p>\n<h3 id=\"1-Header\"><a href=\"#1-Header\" class=\"headerlink\" title=\"1. Header\"></a>1. Header</h3><p>Header 的部分只有一行,包括三个字段: type(必需), scope(可选), subject(必需)</p>\n<p>对应到 idea 插件上图的配置分别为 Header 部分的:</p>\n<table>\n<thead>\n<tr>\n<th><strong>type(必需)</strong></th>\n<th><strong>Type of change</strong></th>\n<th><strong>commit 类别</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>scope(可选)</td>\n<td>Scope of this change</td>\n<td>commint 影响的范围</td>\n</tr>\n<tr>\n<td><strong>subject(必需)</strong></td>\n<td><strong>Short description</strong></td>\n<td><strong>简短的描述</strong></td>\n</tr>\n</tbody></table>\n<ol>\n<li><h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a><strong>type</strong></h5></li>\n</ol>\n<p>type 用于说明 commit 的类别，只允许使用下面标识</p>\n<ul>\n<li><code>feat</code>：新功能（feature）</li>\n<li><code>fix</code>：修补 bug</li>\n<li><code>docs</code>：文档（documentation）</li>\n<li><code>style</code>： 格式（不影响代码运行的变动,空格,格式化,等等）</li>\n<li><code>refactor</code>：重构（即不是新增功能，也不是修改 bug 的代码变动）</li>\n<li><code>perf</code>: 性能 (提高代码性能的改变)</li>\n<li><code>test</code>：增加测试或者修改测试</li>\n<li><code>build</code>: 影响构建系统或外部依赖项的更改(maven,gradle,npm 等等)</li>\n<li><code>ci</code>: 对 CI 配置文件和脚本的更改</li>\n<li><code>chore</code>：对非 src 和 test 目录的修改</li>\n<li><code>revert</code>: Revert a commit</li>\n</ul>\n<ol>\n<li><h5 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a><strong>scope</strong></h5></li>\n</ol>\n<p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<ol>\n<li><h5 id=\"subject\"><a href=\"#subject\" class=\"headerlink\" title=\"subject\"></a><strong>subject</strong></h5></li>\n</ol>\n<p><code>subject</code>是 commit 目的的简短描述，不超过 50 个字符。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">以动词开头，使用第一人称现在时，比如change，而不是changed或changes</span><br><span class=\"line\">第一个字母小写</span><br><span class=\"line\">结尾不加句号（.）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Body\"><a href=\"#2-Body\" class=\"headerlink\" title=\"2. Body\"></a>2. Body</h3><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">如有必要，更详细的说明文本。包装它</span><br><span class=\"line\">大概72个字左右。</span><br><span class=\"line\"></span><br><span class=\"line\">后面的段落在空行之后。</span><br><span class=\"line\"></span><br><span class=\"line\">-要点也可以</span><br><span class=\"line\">-使用悬挂缩进</span><br></pre></td></tr></table></figure>\n\n<p>有一个注意点。</p>\n<p>（1）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h3 id=\"3-Footer\"><a href=\"#3-Footer\" class=\"headerlink\" title=\"3. Footer\"></a>3. Footer</h3><p>Footer 部分只用于两种情况。</p>\n<h4 id=\"（1）不兼容变动\"><a href=\"#（1）不兼容变动\" class=\"headerlink\" title=\"（1）不兼容变动\"></a><strong>（1）不兼容变动</strong></h4><p>如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<h4 id=\"（2）关闭-Issue\"><a href=\"#（2）关闭-Issue\" class=\"headerlink\" title=\"（2）关闭 Issue\"></a><strong>（2）关闭 Issue</strong></h4><blockquote>\n<p>这里填写 Jira 的 Issue ID，可以关联 Jira 问题</p>\n</blockquote>\n<blockquote>\n<p>这里的关闭 Issue 并不能改变 Jira Issue 的状态，Gitlab 与 Jira 的插件支持不稳定。但是可以将 Git Commit 关联到 Jira Issue</p>\n</blockquote>\n<p>如果当前 commit 针对某个 issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Closes</span> <span class=\"comment\">#234</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以一次关闭多个 issue 。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Closes</span> #<span class=\"number\">123</span>, #<span class=\"number\">245</span>, #<span class=\"number\">992</span></span><br></pre></td></tr></table></figure>\n\n<p>最后一个完整的 <code>commit message</code> 示例如下：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"code\"><pre><span class=\"line\">feature(流程管理): 流程管理</span><br><span class=\"line\"></span><br><span class=\"line\">-流程模型</span><br><span class=\"line\">-人员分组</span><br><span class=\"line\">-流程表单</span><br><span class=\"line\"></span><br><span class=\"line\">BREAKING CHANGE: 不兼容老版本</span><br><span class=\"line\"></span><br><span class=\"line\">Closes #101</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、提交信息生成方式\"><a href=\"#二、提交信息生成方式\" class=\"headerlink\" title=\"二、提交信息生成方式\"></a>二、提交信息生成方式</h2><h3 id=\"JetBrains-系列-IDE\"><a href=\"#JetBrains-系列-IDE\" class=\"headerlink\" title=\"JetBrains 系列 IDE\"></a>JetBrains 系列 IDE</h3><p><code>JetBrains</code> 公司的 <code>IDEA</code>、<code>WebStrom</code> 可以安装 <code>Git Commit Message Plugins</code> 插件</p>\n<p>安装步骤如下：</p>\n<h4 id=\"（1）安装-Git-Commit-Message-Plugins-插件\"><a href=\"#（1）安装-Git-Commit-Message-Plugins-插件\" class=\"headerlink\" title=\"（1）安装 Git Commit Message Plugins 插件\"></a>（1）安装 Git Commit Message Plugins 插件</h4><figure class=\"highlight xl\"><table><tr><td class=\"code\"><pre><span class=\"line\">F<span class=\"function\"><span class=\"title\">ile</span> -&gt;</span> S<span class=\"function\"><span class=\"title\">ettings</span> -&gt;</span> P<span class=\"function\"><span class=\"title\">lugins</span> -&gt;</span> M<span class=\"function\"><span class=\"title\">arketplace</span> -&gt;</span> 搜索 <span class=\"string\">&quot;Git Commit Message Plugins&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807172601.png\" alt=\"image-20220807172600964\"></p>\n<h4 id=\"（2）使用插件规范提交信息\"><a href=\"#（2）使用插件规范提交信息\" class=\"headerlink\" title=\"（2）使用插件规范提交信息\"></a>（2）使用插件规范提交信息</h4><p>在 Commit 代码处，选择使用<strong>Git Commit Message Plugins</strong>插件，如下图所示</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807172616.png\" alt=\"image-20220807172616778\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807172624.png\" alt=\"image-20220807172624828\"></p>\n<h3 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h3><h4 id=\"（1）安装插件\"><a href=\"#（1）安装插件\" class=\"headerlink\" title=\"（1）安装插件\"></a>（1）安装插件</h4><p>扩展商店搜索 -&gt; <code>git-commit-plugin</code> -&gt; <code>安装</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807172714.png\" alt=\"image-20220807172714708\"></p>\n<h4 id=\"（2）使用插件生成提交信息\"><a href=\"#（2）使用插件生成提交信息\" class=\"headerlink\" title=\"（2）使用插件生成提交信息\"></a>（2）使用插件生成提交信息</h4><p>选择对应的部分进行填写，回车确认到下一步</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807171912.png\" alt=\"img\"></p>\n<p>填写好提交信息之后正常提交即可</p>\n<h3 id=\"命令行提交\"><a href=\"#命令行提交\" class=\"headerlink\" title=\"命令行提交\"></a>命令行提交</h3><blockquote>\n<p>通过多个 -m 做到多行注释提交，每个 -m 代表一行</p>\n</blockquote>\n<p>通过多行注释提交命令，将上面说到的 <code>提交注释模板</code> 分块填写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;header&quot;</span> -m <span class=\"string\">&quot;body&quot;</span> -m <span class=\"string\">&quot;footer&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>例子如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> commit -m <span class=\"string\">&quot;feature(流程管理): 流程管理&quot;</span> -m <span class=\"string\">&quot;-流程模型&quot;</span> -m <span class=\"string\">&quot;Closes #101&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SoureTree\"><a href=\"#SoureTree\" class=\"headerlink\" title=\"SoureTree\"></a>SoureTree</h3><p>直接在提交注释输入框内编辑注释信息即可（支持多行编辑）</p>\n","categories":["DevOps"],"tags":["Git","开发规范"]},{"title":"Lombok 消除冗余代码","url":"/2022/08/01/e55146c8.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p><code>Lombok</code> 是一款 Java 开发插件，使得 <code>Java</code> 开发者可以通过其定义的一些注解来消除业务过程中冗余的代码，尤其是简单的 <code>Java</code> 模型对象（<code>POJO</code>）。而当我们如果在开发环境中使用 <code>Lombok</code> 开发插件后，可以省出重复构建，诸如 <code>hashCode</code> 和 <code>equals</code> 这样的方法以及各种业务对象模型的 <code>accessor</code> 和 <code>ToString</code> 等方法的大量时间。对于这些方法，它能够在编译源代码期间自动帮我们生产这些方法，并没有如反射那样降低程序的性能。</p>\n<p>可以用来帮助开发人员消除冗余的代码，对于一些简单的 <code>Java</code> 对象（<code>POJO</code>），它通过注释实现这一目的。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>Lombok 的实现原理，基于 <a href=\"https://jcp.org/en/jsr/detail?id=269\">JSR269(Pluggable Annotation Processing API)</a> 规范，自定义编译器注解处理器，用于在 Javac 编译阶段时，扫描使用到 Lombok 定义的注解的类，进行自定义的代码生成。</p>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><p>在 IDEA 中，已经提供了 <a href=\"https://plugins.jetbrains.com/plugin/6317-lombok\">IntelliJ Lombok plugin</a> 插件，方便我们使用 Lombok。安装方式很简单，只需要在 IDEA Plugins 功能中，搜索 Lombok 关键字即可。如下图所示：</p>\n<p>IDEA 2020.3 版本以上已经内置 Lombok Plugin 插件，无需手动安装</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807160143.png\" alt=\"img\"></p>\n<h2 id=\"Lombok-常用注解说明\"><a href=\"#Lombok-常用注解说明\" class=\"headerlink\" title=\"Lombok 常用注解说明\"></a><strong>Lombok 常用注解说明</strong></h2><table>\n<thead>\n<tr>\n<th>@NonNull</th>\n<th>给方法参数增加这个注解会自动在方法内对该参数进行是否为空的校验，如果为空，则抛出 NPE （<code>NullPointerException</code>）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Cleanup</td>\n<td>自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成 <code>try-finally</code>这样的代码来关闭流</td>\n</tr>\n<tr>\n<td>@Getter/@Setter</td>\n<td>用在属性上，再也不用自己手写 setter 和 getter 方法了，还可以指定访问范围</td>\n</tr>\n<tr>\n<td>@ToString</td>\n<td>用在类上，可以自动覆写 toString 方法，当然还可以加其他参数，例如@ <code>ToString</code>(<code>exclude</code>=”<code>id</code>”)排除 id 属性，或者<code>@ToString</code>(<code>callSuper</code>=<code>true</code>,<code>includeFieldNames</code>=<code>true</code>)调用父类的 toString 方法，包含所有属性</td>\n</tr>\n<tr>\n<td>@EqualsAndHashCode</td>\n<td>用在类上，自动生成<code>equals</code>方法和<code>hashCode</code>方法</td>\n</tr>\n<tr>\n<td>@NoArgsConstructor</td>\n<td><code>@RequiredArgsConstructor</code> <code>and @AllArgsConstructor</code>：用在类上，自动生成无参构造和使用所有参数的构造函数以及把所有@NonNull 属性作为参数的构造函数，如果指定<code>staticName</code>= <code>“of”</code>参数，同时还会生成一个返回类对象的静态工厂方法，比使用构造函数方便很多</td>\n</tr>\n<tr>\n<td>@Data</td>\n<td>注解在类上，相当于同时使用了<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Gette</code>r、<code>@Setter</code>和<code>@RequiredArgsConstrutor</code>这些注解，对于<code>POJO</code>类十分有用</td>\n</tr>\n<tr>\n<td>@Value</td>\n<td>用在类上，是<code>@Data</code>的不可变形式，相当于为属性添加 final 声明，只提供<code>getter</code>方法，而不提供<code>setter</code>方法</td>\n</tr>\n<tr>\n<td>@Builder</td>\n<td>用在类、构造器、方法上，为你提供复杂的<code>builder APIs</code>，让你可以像如下方式一样调用<code>Person.builder().name(&quot;Adam Savage&quot;).city(&quot;San Francisco&quot;).job(&quot;Mythbusters&quot;).job(&quot;Unchained Reaction&quot;).build();</code>更多说明参考<code>Builder</code></td>\n</tr>\n<tr>\n<td>@SneakyThrows</td>\n<td>自动抛受检异常，而无需显式在方法上使用 throws 语句</td>\n</tr>\n<tr>\n<td>@Synchronized</td>\n<td>用在方法上，将方法声明为同步的，并自动加锁，而锁对象是一个私有的属性<code>$lock</code>或$<code>LOCK，</code>而<code>java</code>中的<code>synchronized</code>关键字锁对象是<code>this</code>，锁在<code>this</code>或者自己的类对象上存在副作用，就是你不能阻止非受控代码去锁 this 或者类对象，这可能会导致竞争条件或者其它线程错误</td>\n</tr>\n<tr>\n<td>@Getter(lazy=true)</td>\n<td>可以替代经典的<code>Double Check Lock</code>样板代码</td>\n</tr>\n<tr>\n<td>@Log</td>\n<td>根据不同的注解生成不同类型的<code>log</code>对象，但是实例名称都是<code>log</code>，有六种可选实现类</td>\n</tr>\n<tr>\n<td>val</td>\n<td>用在局部变量前面，相当于将变量声明为 final</td>\n</tr>\n</tbody></table>\n<h2 id=\"Lombok-代码示范\"><a href=\"#Lombok-代码示范\" class=\"headerlink\" title=\"Lombok 代码示范\"></a><strong>Lombok 代码示范</strong></h2><ul>\n<li><h6 id=\"Nonnull-为方法和构造函数的参数提供非空检查\"><a href=\"#Nonnull-为方法和构造函数的参数提供非空检查\" class=\"headerlink\" title=\"@Nonnull 为方法和构造函数的参数提供非空检查\"></a>@Nonnull 为方法和构造函数的参数提供非空检查</h6></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">void</span> <span class=\"title function_\">notNullExample</span>(<span class=\"params\"><span class=\"meta\">@NonNull</span> <span class=\"built_in\">String</span> <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span>.<span class=\"title function_\">length</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//=&gt;相当于</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">void</span> <span class=\"title function_\">notNullExample</span>(<span class=\"params\"><span class=\"built_in\">String</span> <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span>.<span class=\"title function_\">length</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>(<span class=\"string\">&quot;null&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"Cleanup-自动释放资源\"><a href=\"#Cleanup-自动释放资源\" class=\"headerlink\" title=\"@Cleanup 自动释放资源\"></a>@Cleanup 自动释放资源</h6></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> <span class=\"title function_\">main</span>(<span class=\"params\"><span class=\"built_in\">String</span>[] args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Cleanup</span> <span class=\"title class_\">InputStream</span> inputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"title class_\">FileNotFoundException</span> e) &#123;</span><br><span class=\"line\">        e.<span class=\"title function_\">printStackTrace</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//=&gt;相当于</span></span><br><span class=\"line\">    <span class=\"title class_\">InputStream</span> inputStream = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        inputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"title class_\">FileNotFoundException</span> e) &#123;</span><br><span class=\"line\">        e.<span class=\"title function_\">printStackTrace</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inputStream != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                inputStream.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (<span class=\"title class_\">IOException</span> e) &#123;</span><br><span class=\"line\">                e.<span class=\"title function_\">printStackTrace</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"Getter-Setter-对类的属性字段自动生成-Get-Set-方法\"><a href=\"#Getter-Setter-对类的属性字段自动生成-Get-Set-方法\" class=\"headerlink\" title=\"@Getter/@Setter 对类的属性字段自动生成 Get/Set 方法\"></a>@Getter/@Setter 对类的属性字段自动生成 Get/Set 方法</h6></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Setter(AccessLevel.PUBLIC)</span></span><br><span class=\"line\"><span class=\"meta\">@Getter(AccessLevel.PROTECTED)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String shap;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"ToString-为类生成一个-toString-方法\"><a href=\"#ToString-为类生成一个-toString-方法\" class=\"headerlink\" title=\"@ToString 为类生成一个 toString 方法\"></a>@ToString 为类生成一个 toString 方法</h6></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ToString</span>(exclude = <span class=\"string\">&quot;id&quot;</span>, callSuper = <span class=\"literal\">true</span>, includeFieldNames = <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LombokDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> int id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title class_\">String</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> int age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> <span class=\"title function_\">main</span>(<span class=\"params\"><span class=\"built_in\">String</span>[] args</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//输出LombokDemo(super=LombokDemo@48524010, name=null, age=0)</span></span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">LombokDemo</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"EqualsAndHashCode-为类生成-equals-和-hasCode-方法\"><a href=\"#EqualsAndHashCode-为类生成-equals-和-hasCode-方法\" class=\"headerlink\" title=\"@EqualsAndHashCode 为类生成 equals 和 hasCode 方法\"></a>@EqualsAndHashCode 为类生成 equals 和 hasCode 方法</h6></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode</span>(exclude = &#123;<span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;shape&quot;</span>&#125;, callSuper = <span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LombokDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> int id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title class_\">String</span> shap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"NoArgsConstructor，-RequiredArgsConstructor-and-AllArgsConstructor，分别为类自动生成无参构造，指定参数构造器和包含所有参数构造器\"><a href=\"#NoArgsConstructor，-RequiredArgsConstructor-and-AllArgsConstructor，分别为类自动生成无参构造，指定参数构造器和包含所有参数构造器\" class=\"headerlink\" title=\"@NoArgsConstructor，@RequiredArgsConstructor and @AllArgsConstructor，分别为类自动生成无参构造，指定参数构造器和包含所有参数构造器\"></a>@NoArgsConstructor，@RequiredArgsConstructor and @AllArgsConstructor，分别为类自动生成无参构造，指定参数构造器和包含所有参数构造器</h6></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@RequiredArgsConstructor</span>(staticName = <span class=\"string\">&quot;of&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LombokDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> int id;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title class_\">String</span> shap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> int age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> <span class=\"title function_\">main</span>(<span class=\"params\"><span class=\"built_in\">String</span>[] args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">LombokDemo</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;circle&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//使用静态工厂方法</span></span><br><span class=\"line\">        <span class=\"title class_\">LombokDemo</span>.<span class=\"title function_\">of</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;circle&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//无参构造</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">LombokDemo</span>();</span><br><span class=\"line\">        <span class=\"comment\">//包含所有参数</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">LombokDemo</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;circle&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"Data-在类上使用，相当于同时使用-ToString、-EqualsAndHashCode、-Getter、-Setter-和-RequiredArgsConstructor-这些注解\"><a href=\"#Data-在类上使用，相当于同时使用-ToString、-EqualsAndHashCode、-Getter、-Setter-和-RequiredArgsConstructor-这些注解\" class=\"headerlink\" title=\"@Data 在类上使用，相当于同时使用@ToString、@EqualsAndHashCode、@Getter、@Setter 和@RequiredArgsConstructor 这些注解\"></a>@Data 在类上使用，相当于同时使用@ToString、@EqualsAndHashCode、@Getter、@Setter 和@RequiredArgsConstructor 这些注解</h6></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Menu</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String shopId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String skuMenuId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String skuName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String normalizeSkuName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dishMenuId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dishName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dishNum;</span><br><span class=\"line\">    <span class=\"comment\">//默认阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> <span class=\"variable\">thresHold</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//新阈值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> <span class=\"variable\">newThresHold</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//总得分</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">float</span> <span class=\"variable\">totalScore</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"Value-为属性添加-final-声明\"><a href=\"#Value-为属性添加-final-声明\" class=\"headerlink\" title=\"@Value 为属性添加 final 声明\"></a>@Value 为属性添加 final 声明</h6></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LombokDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String shap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"comment\">//相当于</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"Builder-提供构建值对象方式\"><a href=\"#Builder-提供构建值对象方式\" class=\"headerlink\" title=\"@Builder 提供构建值对象方式\"></a>@Builder 提供构建值对象方式</h6></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BuilderExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title class_\">String</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> int age;</span><br><span class=\"line\">    <span class=\"meta\">@Singular</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">String</span>&gt; occupations;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> <span class=\"title function_\">main</span>(<span class=\"params\"><span class=\"built_in\">String</span>[] args</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">BuilderExample</span> test = <span class=\"title class_\">BuilderExample</span>.<span class=\"title function_\">builder</span>().<span class=\"title function_\">age</span>(<span class=\"number\">11</span>).<span class=\"title function_\">name</span>(<span class=\"string\">&quot;test&quot;</span>).<span class=\"title function_\">build</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"SneakyThrows-自动抛受检异常\"><a href=\"#SneakyThrows-自动抛受检异常\" class=\"headerlink\" title=\"@SneakyThrows 自动抛受检异常\"></a>@SneakyThrows 自动抛受检异常</h6></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.SneakyThrows;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows()</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedEncodingException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//相当于</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedEncodingException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"Synchronized-将方法声明同步并自动加锁\"><a href=\"#Synchronized-将方法声明同步并自动加锁\" class=\"headerlink\" title=\"@Synchronized 将方法声明同步并自动加锁\"></a>@Synchronized 将方法声明同步并自动加锁</h6></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SynchronizedDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Synchronized</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> <span class=\"title function_\">hello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//相当于</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> final <span class=\"title class_\">Object</span> $LOCK = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">void</span> <span class=\"title function_\">hello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        synchronized ($LOCK) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">System</span>.<span class=\"property\">out</span>.<span class=\"title function_\">println</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"Getter-lazy-true-可以替代经典的-Double-check-Lock-样板代码\"><a href=\"#Getter-lazy-true-可以替代经典的-Double-check-Lock-样板代码\" class=\"headerlink\" title=\"@Getter(lazy=true)可以替代经典的 Double check Lock 样板代码\"></a>@Getter(lazy=true)可以替代经典的 Double check Lock 样板代码</h6></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GetterLazyExample</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Getter(lazy = true)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span>[] cached = expensive();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span>[] expensive() &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[<span class=\"number\">1000000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; result.length; i++) &#123;</span><br><span class=\"line\">            result[i] = Math.asin(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于如下所示:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GetterLazyExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicReference&lt;java.lang.Object&gt; cached = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicReference</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span>[] getCached() &#123;</span><br><span class=\"line\">        java.lang.<span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.cached.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.cached) &#123;</span><br><span class=\"line\">                value = <span class=\"built_in\">this</span>.cached.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"type\">double</span>[] actualValue = expensive();</span><br><span class=\"line\">                    value = actualValue == <span class=\"literal\">null</span> ? <span class=\"built_in\">this</span>.cached : actualValue;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.cached.set(value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">double</span>[]) (value == <span class=\"built_in\">this</span>.cached ? <span class=\"literal\">null</span> : value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span>[] expensive() &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[<span class=\"number\">1000000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; result.length; i++) &#123;</span><br><span class=\"line\">            result[i] = Math.asin(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"Log-根据不同的注解生成不同类型的-log-对象\"><a href=\"#Log-根据不同的注解生成不同类型的-log-对象\" class=\"headerlink\" title=\"@Log 根据不同的注解生成不同类型的 log 对象\"></a>@Log 根据不同的注解生成不同类型的 log 对象</h6></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CommonsLog</span> <span class=\"type\">Creates</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> org.apache.commons.logging.LogFactory.getLog(LogExample.class);</span><br><span class=\"line\"><span class=\"meta\">@Log</span> <span class=\"type\">Creates</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> java.util.logging.Logger.getLogger(LogExample.class.getName());</span><br><span class=\"line\"><span class=\"meta\">@Log4j</span> <span class=\"type\">Creates</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> org.apache.log4j.Logger.getLogger(LogExample.class);</span><br><span class=\"line\"><span class=\"meta\">@Log4j2</span> <span class=\"type\">Creates</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span> <span class=\"type\">Creates</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> org.slf4j.LoggerFactory.getLogger(LogExample.class);</span><br><span class=\"line\"><span class=\"meta\">@XSlf4j</span> <span class=\"type\">Creates</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"val-将变量声明-final-类型\"><a href=\"#val-将变量声明-final-类型\" class=\"headerlink\" title=\"val 将变量声明 final 类型\"></a>val 将变量声明 final 类型</h6></li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args) &#123;</span><br><span class=\"line\">    val sets = <span class=\"keyword\">new</span> HashSet&lt;<span class=\"built_in\">String</span>&gt;();</span><br><span class=\"line\">    val lists = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"built_in\">String</span>&gt;();</span><br><span class=\"line\">    val maps = <span class=\"keyword\">new</span> HashMap&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//=&gt;相当于如下</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">String</span>&gt; sets2 = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; lists2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; maps2 = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["后端开发"],"tags":["技巧","开发工具"]},{"title":"Floccus bookmark sync 自动同步书签","url":"/2022/06/19/6deb50f5.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本人平常工作生活中主要用到两款浏览器：Chrome、Edge。</p>\n<p>Chrome 主要工作中开发调试页面情况下使用较多，Edge 装了比较多的插件，主要是生活中作为搜索工具、娱乐工具使用。</p>\n<p>同时用两个浏览器，最让我头疼的就是浏览器书签同步的问题，最近发现 <a href=\"https://floccus.org/\">Floccus bookmarks sync</a> 这款浏览器插件，搭配坚果云可以实现跨浏览器之间书签同步！</p>\n<h2 id=\"Floccus-介绍\"><a href=\"#Floccus-介绍\" class=\"headerlink\" title=\"Floccus 介绍\"></a>Floccus 介绍</h2><p>Floccus 是一款浏览器扩展，iOS 和 Android 应用程序，可在所有浏览器和设备上同步您的书签</p>\n<p>通过可选的自托管 Nextcloud 或 WebDAV 服务器，或通过 Google 云端硬盘进行可选的端到端加密</p>\n<h2 id=\"Floccus-搭配坚果云同步书签\"><a href=\"#Floccus-搭配坚果云同步书签\" class=\"headerlink\" title=\"Floccus 搭配坚果云同步书签\"></a>Floccus 搭配坚果云同步书签</h2><p>Floccus 支持 WebDAV、Nextcloud Bookmarks 和本地文件网盘同步，我这里采用的是 WebDAV 方案，配合坚果云实现。</p>\n<h3 id=\"准备坚果云\"><a href=\"#准备坚果云\" class=\"headerlink\" title=\"准备坚果云\"></a>准备坚果云</h3><blockquote>\n<p>官网：<a href=\"https://www.jianguoyun.com/\">坚果云官网(jianguoyun.com)</a></p>\n</blockquote>\n<p>登录坚果云官网，选择个人版（没有账号使用邮箱直接注册就行了）</p>\n<p>在同步文件夹根目录下创建一个文件夹，选择默认不同步到本地，需要同步到本地也可以，名字自定义即可，我这里是 floccus</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619220803.png\" alt=\"image-20220619220802997\"></p>\n<p>然后上传一个 bookmarks.xbel 文件到刚才新建的文件夹里面，文件内容是：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">xbel</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;+//IDN python.org//DTD XML Bookmark Exchange Language 1.0//EN//XML&quot;</span> <span class=\"string\">&quot;http://pyxml.sourceforge.net/topics/dtds/xbel.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xbel</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bookmark</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://blog.kyire.site/&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Kyire の Blog | 记录美好生活<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bookmark</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xbel</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接着在坚果云 <code>账户信息 -&gt; 安全选项 -&gt; 第三方应用管理 -&gt; 创建一个 WebDAV 应用</code>，获取应用密码</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619221328.png\" alt=\"image-20220619221328398\"></p>\n<h3 id=\"Floccus-插件安装和设置\"><a href=\"#Floccus-插件安装和设置\" class=\"headerlink\" title=\"Floccus 插件安装和设置\"></a>Floccus 插件安装和设置</h3><p><a href=\"https://microsoftedge.microsoft.com/addons/detail/floccus-bookmarks-sync/gjkddcofhiifldbllobcamllmanombji\">Edge 扩展下载地址</a>、<a href=\"https://www.extfans.com/productivity/fnaicdffflnofjppbagibeoednhnbjhg/\">Chrome 扩展下载地址</a></p>\n<p>安装好 Floccus 插件后，点击图标，新建账户：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619221912.png\" alt=\"image-20220619221912865\"></p>\n<p>选择 WebDAV 共享中的 XBEL 文件，点击继续</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619221958.png\" alt=\"image-20220619221958514\"></p>\n<p>填写服务器地址（坚果云）、账号、应用密码</p>\n<blockquote>\n<p><strong>这里的信息在坚果云第三方应用管理界面可以看到</strong></p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619222305.png\" alt=\"image-20220619222305268\"></p>\n<p>填写坚果云上的书签路径，<code>文件夹/bookmarks.xbel</code>，本地文件夹就选根路径</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619222635.png\" alt=\"image-20220619222635483\"></p>\n<p>设置自动同步、同步间隔，选择同步策略等，按需配置即可</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619222747.png\" alt=\"image-20220619222747381\"></p>\n<h3 id=\"同步操作\"><a href=\"#同步操作\" class=\"headerlink\" title=\"同步操作\"></a>同步操作</h3><p>配置完成之后，点击扩展图标呼出面板，也可以<strong>手动点击同步按钮</strong>进行同步，同步完成之后，会<strong>将本浏览器上的所有书签同步到坚果云</strong>，然后你只需在另一个浏览器上再<strong>将坚果云上的书签和本地的书签合并</strong>，这样就实现了<strong>跨浏览器之间的书签同步</strong>！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619222835.png\" alt=\"image-20220619222835048\"></p>\n","categories":["随笔小记"],"tags":["技巧","笔记"]},{"title":"Docker 安装 Nexus3 并搭建 Docker 私有镜像仓库","url":"/2022/06/17/79ad3306.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Nexus 是 Sonatype 公司发布的一款仓库（Repository）管理软件，常用来搭建 Maven 私服，所以也有人将 Nexus 称为“Maven 仓库管理器”。</p>\n<p>Nexus Repository 提供多种包格式的仓库：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220617133124.png\" alt=\"image-20220617133124634\"></p>\n<blockquote>\n<p>官方文档：<a href=\"https://help.sonatype.com/repomanager3\">https://help.sonatype.com/repomanager3</a></p>\n</blockquote>\n<h2 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h2><p>这里采用 Docker 进行安装</p>\n<h3 id=\"安装-nexus3\"><a href=\"#安装-nexus3\" class=\"headerlink\" title=\"安装 nexus3\"></a>安装 nexus3</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -itd \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> --name=nexus3 \\</span><br><span class=\"line\">-p 8081:8081 \\</span><br><span class=\"line\">-p 8082:8082 \\</span><br><span class=\"line\">-p 8083:8083 \\</span><br><span class=\"line\">-p 8084:8084 \\</span><br><span class=\"line\">-v /u01/cicd/nexus3/data:/nexus-data \\</span><br><span class=\"line\">sonatype/nexus3:3.30.0</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<p><code>8081</code>：可以通过 http 访问 nexus 应用</p>\n<p><code>8082</code>：docker(hosted)私有仓库，可以 pull 和 push</p>\n<p><code>8083</code>：docker(proxy)代理远程仓库，只能 pull</p>\n<p><code>8084</code>：docker(group)私有仓库和代理的组，只能 pull</p>\n<p><code>-v</code>：建立容器与宿主机的连接，将容器中的数据持久化到宿主机上</p>\n<p><code>/nexus-data</code>：容器内 nexus 存放数据的目录</p>\n<p><code>/u01/cicd/nexus3/data</code>：宿主机映射容器内数据目录</p>\n<h3 id=\"访问网页端\"><a href=\"#访问网页端\" class=\"headerlink\" title=\"访问网页端\"></a>访问网页端</h3><p>容器启动成功后访问：<a href=\"http://192.168.88.236:8081/\">http://192.168.88.236:8081/</a></p>\n<p>默认用户/密码：admin/admin123</p>\n<h2 id=\"创建-Docker-镜像仓库\"><a href=\"#创建-Docker-镜像仓库\" class=\"headerlink\" title=\"创建 Docker 镜像仓库\"></a>创建 Docker 镜像仓库</h2><p><code>Repository -&gt; Repositories -&gt; Create repository</code></p>\n<p><strong>repository 的类型</strong></p>\n<ol>\n<li><code>hosted</code>，本地仓库，通常我们会部署自己的构件到这一类型的仓库。比如公司的第二方库。</li>\n<li><code>proxy</code>，代理仓库，它们被用来代理远程的公共仓库，如 maven 中央仓库。</li>\n<li><code>group</code>，仓库组，用来合并多个 hosted/proxy 仓库，当你的项目希望在多个 repository 使用资源时就不需要多次引用了，只需要引用一个 group 即可。</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220617134246.png\" alt=\"image-20220617134246522\"></p>\n<h3 id=\"创建-docker-hosted-类型的仓库\"><a href=\"#创建-docker-hosted-类型的仓库\" class=\"headerlink\" title=\"创建 docker(hosted)类型的仓库\"></a>创建 docker(hosted)类型的仓库</h3><p>hosted 类型的仓库主要用于将自己的镜像上传至私库。</p>\n<p>在创建镜像仓库的页面中，设置镜像仓库的相关信息（名称、HTTP 端口、是否允许匿名拉取镜像等）。</p>\n<p><strong>注意：这里设置的 HTTP 端口（8082）是后续拉取/推送镜像的端口</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220617135103.png\" alt=\"image-20220617135103754\"></p>\n<h3 id=\"创建-docker-proxy-类型的仓库\"><a href=\"#创建-docker-proxy-类型的仓库\" class=\"headerlink\" title=\"创建 docker(proxy)类型的仓库\"></a>创建 docker(proxy)类型的仓库</h3><p>proxy 类型的仓库主要是用于代理中央镜像仓库，从外网将镜像拉取至本地仓库中。</p>\n<p>这里用的是阿里云的镜像地址，国内访问比较快。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220617141027.png\" alt=\"image-20220617141027757\"></p>\n<h3 id=\"创建-docker-group-类型的仓库\"><a href=\"#创建-docker-group-类型的仓库\" class=\"headerlink\" title=\"创建 docker(group)类型的仓库\"></a>创建 docker(group)类型的仓库</h3><p>用于拉取镜像到本地使用，集成代理仓库和本地仓库的镜像。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220617141322.png\" alt=\"image-20220617141322000\"></p>\n<h3 id=\"配置-Docker-Realm\"><a href=\"#配置-Docker-Realm\" class=\"headerlink\" title=\"配置 Docker Realm\"></a>配置 Docker Realm</h3><p>将 Docker Bearer Token Realm 配置到右边，保存</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220617141707.png\" alt=\"image-20220617141707436\"></p>\n<h3 id=\"修改-docker-配置\"><a href=\"#修改-docker-配置\" class=\"headerlink\" title=\"修改 docker 配置\"></a>修改 docker 配置</h3><p>在 <code>/etc/docker/daemon.json</code> 文件中添加下面的内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;insecure-registries&quot;</span>: [<span class=\"string\">&quot;192.168.88.236:8082&quot;</span>,<span class=\"string\">&quot;192.168.88.236:8084&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>8082</code>：<code>docker-hosted</code> 仓库端口</li>\n<li><code>8084</code>：<code>docker-group</code> 仓库端口</li>\n</ul>\n<p>重启 <code>docker</code> 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ service docker restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看是否生效</span></span><br><span class=\"line\">$ docker info</span><br><span class=\"line\">Insecure Registries:</span><br><span class=\"line\"> 192.168.88.236:8082</span><br><span class=\"line\"> 192.168.88.236:8084</span><br><span class=\"line\"> 127.0.0.0/8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传-拉取镜像\"><a href=\"#上传-拉取镜像\" class=\"headerlink\" title=\"上传/拉取镜像\"></a>上传/拉取镜像</h3><h4 id=\"登录私服\"><a href=\"#登录私服\" class=\"headerlink\" title=\"登录私服\"></a>登录私服</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker login -u admin -p wx123\\!@<span class=\"comment\"># 192.168.88.236:8082</span></span><br><span class=\"line\">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted <span class=\"keyword\">in</span> /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/<span class=\"comment\">#credentials-store</span></span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded <span class=\"comment\"># 登录成功</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"上传镜像\"><a href=\"#上传镜像\" class=\"headerlink\" title=\"上传镜像\"></a>上传镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取 hello-wrold 镜像</span></span><br><span class=\"line\">$ docker pull hello-world</span><br><span class=\"line\">Using default tag: latest</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">2db29710123e: Pull complete</span><br><span class=\"line\">Digest: sha256:13e367d31ae85359f42d637adf6da428f76d75dc9afeb3c21faea0d976f5c651</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> hello-world:latest</span><br><span class=\"line\">docker.io/library/hello-world:latest</span><br><span class=\"line\"><span class=\"comment\"># 创建 tag（仓库地址/镜像名称:TAG）</span></span><br><span class=\"line\">$ docker tag hello-world 192.168.88.236:8082/myhello-world:1.0</span><br><span class=\"line\"><span class=\"comment\"># push 镜像</span></span><br><span class=\"line\">$ docker push 192.168.88.236:8082/myhello-world:1.0</span><br><span class=\"line\">The push refers to repository [192.168.88.236:8082/myhello-world]</span><br><span class=\"line\">e07ee1baac5f: Pushed</span><br><span class=\"line\">1.0: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525</span><br></pre></td></tr></table></figure>\n\n<p><strong>上传私库成功！</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220624120037.png\" alt=\"image-20220624120029872\"></p>\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker pull 192.168.88.236:8082/myhello-world:1.0</span><br><span class=\"line\">1.0: Pulling from myhello-world</span><br><span class=\"line\">Digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4</span><br><span class=\"line\">Status: Image is up to <span class=\"built_in\">date</span> <span class=\"keyword\">for</span> 192.168.88.236:8082/myhello-world:1.0</span><br><span class=\"line\">192.168.88.236:8082/myhello-world:1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h3><p>默认是使用 <code>admin</code> 用户登录的，权限太高，可以创建一个 <code>docker</code> 账号，并创建对应的角色，分配 <code>nx-repository-view-docker-*-*</code> 权限</p>\n<p><strong>创建角色</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220624131513.png\" alt=\"image-20220624131513867\"></p>\n<p><strong>创建用户</strong></p>\n<p>创建用户，并加入对应的角色组</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220624131705.png\" alt=\"image-20220624131705122\"></p>\n","categories":["Linux"],"tags":["Docker","容器"]},{"title":"使用 GitHub Actions 自动发布 Hexo 博客","url":"/2022/06/16/47488464.html","content":"<h2 id=\"GitHub-Actions-简介\"><a href=\"#GitHub-Actions-简介\" class=\"headerlink\" title=\"GitHub Actions 简介\"></a>GitHub Actions 简介</h2><p><code>GitHub Actions</code> 是一个持续集成和持续交付 (<code>CI/CD</code>) 平台，可用于自动执行构建、测试和部署管道。 您可以创建工作流程来构建和测试存储库的每个拉取请求，或将合并的拉取请求部署到生产环境。</p>\n<p><code>GitHub Actions</code> 不仅仅是 <code>DevOps</code>，还允许您在存储库中发生其他事件时运行工作流程。 例如，您可以运行工作流程，以便在有人在您的存储库中创建新问题时自动添加相应的标签。</p>\n<p><code>GitHub Actions</code> 有一些自己的术语。</p>\n<p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p>\n<p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p>\n<p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p>\n<p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>我的个人站点 <a href=\"https://blog.kyire.site/\">Kyire の Blog - 记录美好生活</a> 是通过 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 框架搭建的。</p>\n<blockquote>\n<p>搭建方法可参考：<a href=\"https://blog.kyire.site/2021/02/06/8fe2b6a8.html\">Hexo+Gitee 搭建个人博客 | Kyire の Blog</a></p>\n</blockquote>\n<p>准备三个仓库：</p>\n<ul>\n<li>私有<code>Hexo</code>源码仓库（<code>Blog</code>）：博客文章以及<code>Hexo</code>源代码</li>\n<li><code>GitHub</code>公共静态页面仓库（<code>Kyire6.github.io</code>）：<code>Hexo</code>源码编译后生成的静态页面</li>\n<li><code>Gitee</code>公共静态页面仓库（<code>Kyire6</code>）：内容跟 <code>Kyire6.github.io</code> 一样，只是使用的服务不同</li>\n</ul>\n<p>自动部署的流程如下：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220615223549.png\" alt=\"image-20220615223542331\"></p>\n<h2 id=\"GitHub-密钥配置\"><a href=\"#GitHub-密钥配置\" class=\"headerlink\" title=\"GitHub 密钥配置\"></a>GitHub 密钥配置</h2><p>生成 <code>ssh密钥对</code>，用于部署静态文件，以及更新 <code>Gitee Pages</code> 服务：</p>\n<ol>\n<li><strong>生成密钥</strong></li>\n</ol>\n<p>执行如下命令生成 <code>ssh密钥对</code>，替换邮件地址为你的<strong>GitHub 邮箱</strong>地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f hexo-deploy-key -t rsa -C <span class=\"string\">&quot;username@example.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>命令执行后会生成两个文件：<code>hexo-deploy-key</code>（私钥） 和 <code>hexo-deploy-key.pub</code>（公钥）</p>\n<ol start=\"2\">\n<li><strong>将公钥添加到 Github Pages 仓库中</strong></li>\n</ol>\n<p><code>Kyire6.github.io仓库 -&gt; Settings -&gt; Deploy keys -&gt; Add deploy key</code></p>\n<ul>\n<li><code>Title</code> 设置为 <code>HEXO_DEPLOY_PUB</code></li>\n<li><code>Key</code> 填写 <code>hexo-deploy-key.pub</code> 文件内容</li>\n<li>勾选 <code>Allow write access</code> 选项</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220615231127.png\" alt=\"image-20220615231127446\"></p>\n<ol start=\"3\">\n<li><strong>将私钥添加到博客源码仓库中</strong></li>\n</ol>\n<p><code>Blog仓库 -&gt; Settings -&gt; Secrets -&gt; Actions -&gt; New repository secret</code></p>\n<ul>\n<li><code>Name</code> 填写 <code>HEXO_DEPLOY_KEY</code></li>\n<li><code>Value</code> 填写 <code>github-deploy-key</code> 文件内容</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220615231916.png\" alt=\"image-20220615231916597\"></p>\n<ol start=\"4\">\n<li><strong>将 Gitee 账号密码添加到博客源码仓库中</strong></li>\n</ol>\n<p><code>Blog仓库 -&gt; Settings -&gt; Secrets -&gt; Actions -&gt; New repository secret</code></p>\n<ul>\n<li><code>Name</code> 填写 <code>GITEE_PASSWORD</code></li>\n<li><code>Value</code> 填写 <code>Gitee账号的密码</code></li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220615233124.png\" alt=\"image-20220615233124815\"></p>\n<h2 id=\"Gitee-密钥配置\"><a href=\"#Gitee-密钥配置\" class=\"headerlink\" title=\"Gitee 密钥配置\"></a>Gitee 密钥配置</h2><blockquote>\n<p>直接使用之前生成的密钥</p>\n</blockquote>\n<ol>\n<li><strong>将公钥添加到 Gitee Pages 仓库中</strong></li>\n</ol>\n<p><code>Kyire6仓库 -&gt; 管理 -&gt; 部署公钥管理 -&gt; 添加公钥</code></p>\n<p>和 <code>GitHub</code> 一样需要对仓库有写权限，点击<code>【添加个人公钥】</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220615232742.png\" alt=\"image-20220615232742168\"></p>\n<ul>\n<li><code>标题</code> 设置为 <code>HEXO_DEPLOY_PUB</code></li>\n<li><code>公钥</code> 填写 <code>hexo-deploy-key.pub</code> 文件内容</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220615232822.png\" alt=\"image-20220615232822304\"></p>\n<h2 id=\"配置-GitHub-Actions\"><a href=\"#配置-GitHub-Actions\" class=\"headerlink\" title=\"配置 GitHub Actions\"></a>配置 GitHub Actions</h2><p>在博客源码仓库（Blog）中，编写 <code>workflow</code> 文件</p>\n<p>在仓库的根目录下创建 <code>.github/workflow/deploy.yml</code> 文件，yaml 文件名可以自定义。</p>\n<p>下面是结合 <a href=\"https://github.com/marketplace/actions/hexo-action#%F0%9F%8D%8Cexample-workflow---hexo-deploy\">Hexo Action</a>和<a href=\"https://github.com/marketplace/actions/gitee-pages-action\">Gitee Pages Action </a>的 <code>workflow</code> 文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">paths-ignore:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;source/_drafts/**&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;.github/**&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">A</span> <span class=\"string\">job</span> <span class=\"string\">to</span> <span class=\"string\">deploy</span> <span class=\"string\">blog.</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v1</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">submodules:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">node</span> <span class=\"string\">modules</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v1</span></span><br><span class=\"line\">      <span class=\"attr\">id:</span> <span class=\"string\">cache</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">        <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.os</span> <span class=\"string\">&#125;&#125;-node-$&#123;&#123;</span> <span class=\"string\">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class=\"line\"><span class=\"string\"></span>    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">      <span class=\"attr\">if:</span> <span class=\"string\">steps.cache.outputs.cache-hit</span> <span class=\"type\">!=</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">ci</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Deploy hexo blog website.</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">      <span class=\"attr\">id:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">sma11black/hexo-action@v1.0.4</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于访问 GitHub 静态页面仓库的部署密钥（私钥）。</span></span><br><span class=\"line\">        <span class=\"attr\">deploy_key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.HEXO_DEPLOY_KEY</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于部署的 github 帐户的用户名。</span></span><br><span class=\"line\">        <span class=\"attr\">user_name:</span> <span class=\"string\">Kyire6</span></span><br><span class=\"line\">        <span class=\"comment\"># 用于部署的 github 帐户的用户电子邮件。</span></span><br><span class=\"line\">        <span class=\"attr\">user_email:</span> <span class=\"string\">kyire666@outlook.com</span></span><br><span class=\"line\">        <span class=\"attr\">commit_msg:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.event.head_commit.message</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Get</span> <span class=\"string\">the</span> <span class=\"string\">output</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        echo &quot;$&#123;&#123; steps.deploy.outputs.notify &#125;&#125;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span>  <span class=\"attr\">sync:</span></span><br><span class=\"line\">    <span class=\"attr\">needs:</span> <span class=\"string\">build</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Sync</span> <span class=\"string\">to</span> <span class=\"string\">Gitee</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">wearerequired/git-mirror-action@master</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"comment\"># 用于访问 GitHub 静态页面仓库的部署密钥（私钥）。</span></span><br><span class=\"line\">          <span class=\"attr\">SSH_PRIVATE_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.HEXO_DEPLOY_KEY</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"comment\"># 源仓库</span></span><br><span class=\"line\">          <span class=\"attr\">source-repo:</span> <span class=\"string\">git@github.com:Kyire6/Kyire6.github.io.git</span></span><br><span class=\"line\">          <span class=\"comment\"># 目标仓库</span></span><br><span class=\"line\">          <span class=\"attr\">destination-repo:</span> <span class=\"string\">git@gitee.com:Kyire6/Kyire6.git</span></span><br><span class=\"line\">  <span class=\"attr\">reload-pages:</span></span><br><span class=\"line\">    <span class=\"attr\">needs:</span> <span class=\"string\">sync</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span> <span class=\"string\">Gitee</span> <span class=\"string\">Pages</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">yanglbme/gitee-pages-action@main</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"comment\"># Gitee登录用户名</span></span><br><span class=\"line\">          <span class=\"attr\">gitee-username:</span> <span class=\"string\">Kyire6</span></span><br><span class=\"line\">          <span class=\"comment\"># Gitee账号密码</span></span><br><span class=\"line\">          <span class=\"attr\">gitee-password:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITEE_PASSWORD</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"comment\"># Gitee仓库名称，注意大小写</span></span><br><span class=\"line\">          <span class=\"attr\">gitee-repo:</span> <span class=\"string\">Kyire6/Kyire6</span></span><br><span class=\"line\">          <span class=\"comment\"># 仓库分支名，根据实际情况填写</span></span><br><span class=\"line\">          <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>部分字段解释：</strong></p>\n<ol>\n<li><p><code>name</code>：workflow 名称</p>\n</li>\n<li><p><code>on</code>：触发 workflow 的事件</p>\n<ul>\n<li><code>push</code>：push 事件</li>\n<li><code>paths-ignore</code>：忽略指定的目录，也就是在忽略路径外的其它目录文件改动时才触发</li>\n<li>还可以设置多种触发条件，比如支持 cron 语法实现定时触发，参考<a href=\"https://docs.github.com/cn/actions/reference/events-that-trigger-workflows\">这里</a></li>\n</ul>\n</li>\n<li><p><code>jobs</code>：执行任务</p>\n<ul>\n<li><code>build</code>：博客编译和发布，发布到 Github Pages</li>\n<li><code>sync</code>：将更新后的 hiyongz.github.io 仓库同步到 Gitee</li>\n<li><code>reload-pages</code>：自动更新 Pages，因为 Gitee Pages 不像 GitHub Pages 那样提交代码就自动更新。</li>\n<li><code>runs-on</code>：运行环境，支持 windows，Ubuntu 和 macOS</li>\n<li><code>steps</code>：指定每个 Job 的运行步骤</li>\n<li><code>sma11black/hexo-action@v1.0.4</code>：博客构建发布，引用了 Hexo Action：</li>\n<li><code>wearerequired/git-mirror-action@master</code>：仓库同步，引用了 git-mirror-action</li>\n<li><code>yanglbme/gitee-pages-action@main</code>：自动更新 Gitee Pages，引用了 Gitee Pages Action</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>参考资料：<a href=\"https://docs.github.com/cn/actions/using-workflows/workflow-syntax-for-github-actions\">GitHub Actions 的工作流程语法 - GitHub Docs</a></p>\n</blockquote>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>更新文章之后，提交博客源码到 <code>Blog</code> 仓库，满足 <code>GitHub Actions</code> 条件，触发 <code>deploy.yml</code> 中的编写的流水线：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220615235619.png\" alt=\"image-20220615235619570\"></p>\n<p>流水线运行成功，查看 <code>Kyire6.github.io</code> 和 Gitee 的 <code>Kyire6</code> 仓库可以发现都有更新（静态页面公共仓库），并且 <code>Gitee Pages</code> 服务也自动触发更新了，这样就通过 <code>GitHub Actions</code> 实现 <code>Hexo</code> 博客的自动发布。</p>\n<blockquote>\n<p><strong>以后只需要将文章写好之后，push 到博客源码仓库后，触发流水线自动编译并部署，实现 CI/CD 操作，提升效率，避免重复的人工操作！</strong></p>\n</blockquote>\n","categories":["随笔小记"],"tags":["笔记","Git","Hexo","GitHub"]},{"title":"Redis 集群部署案例设计","url":"/2022/06/06/11eee9b8.html","content":"<h2 id=\"面试题：1-2-亿条数据需要缓存，请问如何设计这个存储案例？\"><a href=\"#面试题：1-2-亿条数据需要缓存，请问如何设计这个存储案例？\" class=\"headerlink\" title=\"面试题：1~2 亿条数据需要缓存，请问如何设计这个存储案例？\"></a>面试题：1~2 亿条数据需要缓存，请问如何设计这个存储案例？</h2><p>单机单台 100%不可能，肯定是分布式存储，用 redis 如何落地？</p>\n<h3 id=\"哈希取余分区\"><a href=\"#哈希取余分区\" class=\"headerlink\" title=\"哈希取余分区\"></a>哈希取余分区</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606231141.png\" alt=\"image-20220606231134623\" style=\"zoom:50%;\" />\n\n<p>2 亿条记录就是 2 亿个 k,v，我们单机不行必须要分布式多机，假设有 3 台机器构成一个集群，用户每次读写操作都是根据公式：</p>\n<p>hash(key) % N 个机器台数，计算出哈希值，用来决定数据映射到哪一个节点上。</p>\n<ul>\n<li>优点</li>\n</ul>\n<p>简单粗暴，直接有效，只需要预估好数据规划好节点，例如 3 台、8 台、10 台，就能保证一段时间的数据支撑。使用 Hash 算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡+分而治之的作用。</p>\n<ul>\n<li>缺点</li>\n</ul>\n<p>原来规划好的节点，进行扩容或者缩容就比较麻烦了，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash(key)/3 会变成 Hash(key) /?。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。某个 redis 机器宕机了，由于台数数量变化，会导致 hash 取余全部数据重新洗牌。</p>\n<h3 id=\"一致性-Hash-算法分区\"><a href=\"#一致性-Hash-算法分区\" class=\"headerlink\" title=\"一致性 Hash 算法分区\"></a>一致性 Hash 算法分区</h3><blockquote>\n<p>一致性 Hash 算法背景</p>\n<p>一致性哈希算法在 1997 年由麻省理工学院中提出的，设计目标是为了解决分布式缓存数据变动和映射问题，某个机器宕机了，分母数量改变了，自然取余数不 OK 了。</p>\n</blockquote>\n<ol>\n<li>算法构建一致性哈希环</li>\n</ol>\n<p>一致性哈希环</p>\n<p>一致性哈希算法必然有个 hash 函数并按照算法产生 hash 值，这个算法的所有可能哈希值会构成一个全量集，这个集合可以成为一个 hash 空间[0,2^32-1]，这个是一个线性空间，但是在算法中，我们通过适当的逻辑控制将它首尾相连(0 = 2^32),这样让它逻辑上形成了一个环形空间。</p>\n<p>它也是按照使用取模的方法，前面笔记介绍的节点取模法是对节点（服务器）的数量进行取模。而一致性 Hash 算法是对 2^32 取模，简单来说，一致性 Hash 算法将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数 H 的值空间为 0-2^32-1（即哈希值是一个 32 位无符号整形），整个哈希环如下图：整个空间按顺时针方向组织，圆环的正上方的点代表 0，0 点右侧的第一个点代表 1，以此类推，2、3、4、……直到 2^32-1，也就是说 0 点左侧的第一个点代表 2^32-1， 0 和 2^32-1 在零点中方向重合，我们把这个由 2^32 个点组成的圆环称为 Hash 环。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606231532.png\" alt=\"image-20220606231532166\" style=\"zoom:50%;\" />\n\n<ol start=\"2\">\n<li>服务器 IP 节点映射</li>\n</ol>\n<p>节点映射</p>\n<p>将集群中各个 IP 节点映射到环上的某一个位置。将各个服务器使用 Hash 进行一个哈希，具体可以选择服务器的 IP 或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置。假如 4 个节点 NodeA、B、C、D，经过 IP 地址的哈希函数计算(hash(ip))，使用 IP 地址哈希后在环空间的位置如下：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606231612.png\" alt=\"image-20220606231612002\" style=\"zoom:50%;\" />\n\n<ol start=\"3\">\n<li>key 落到服务器的落键规则</li>\n</ol>\n<p>当我们需要存储一个 kv 键值对时，首先计算 key 的 hash 值，hash(key)，将这个 key 使用相同的函数 Hash 计算出哈希值并确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器，并将该键值对存储在该节点上。</p>\n<p>如我们有 Object A、Object B、Object C、Object D 四个数据对象，经过哈希计算后，在环空间上的位置如下：根据一致性 Hash 算法，数据 A 会被定为到 Node A 上，B 被定为到 Node B 上，C 被定为到 Node C 上，D 被定为到 Node D 上。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606231644.png\" alt=\"image-20220606231644182\" style=\"zoom:50%;\" />\n\n<ul>\n<li>优点</li>\n</ul>\n<p><strong>容错性</strong></p>\n<p>假设 Node C 宕机，可以看到此时对象 A、B、D 不会受到影响，只有 C 对象被重定位到 Node D。一般的，在一致性 Hash 算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。简单说，就是 C 挂了，受到影响的只是 B、C 之间的数据，并且这些数据会转移到 D 进行存储。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606231817.png\" alt=\"image-20220606231816969\" style=\"zoom:50%;\" />\n\n<p><strong>扩展性</strong></p>\n<p>数据量增加了，需要增加一台节点 NodeX，X 的位置在 A 和 B 之间，那收到影响的也就是 A 到 X 之间的数据，重新把 A 到 X 的数据录入到 X 上即可，不会导致 hash 取余全部数据重新洗牌。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606231839.png\" alt=\"image-20220606231839770\" style=\"zoom:50%;\" />\n\n<ul>\n<li>缺点</li>\n</ul>\n<p>Hash 环的数据倾斜问题</p>\n<p>一致性 Hash 算法在服务<strong>节点太少时</strong>，容易因为节点分布不均匀而造成<strong>数据倾斜</strong>（被缓存的对象大部分集中缓存在某一台服务器上）问题，例如系统中只有两台服务器：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606231915.png\" alt=\"image-20220606231915547\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p><strong>总结</strong></p>\n<p>为了在节点数目发生改变时尽可能少的迁移数据</p>\n<p>将所有的存储节点排列在收尾相接的 Hash 环上，每个 key 在计算 Hash 后会==顺时针==找到临近的存储节点存放。</p>\n<p>而当有节点加入或退出时仅影响该节点在 Hash 环上==顺时针相邻的后续节点==。</p>\n<ul>\n<li><strong>优点</strong></li>\n</ul>\n<p>加入和删除节点只影响哈希环中顺时针方向的相邻的节点，对其他节点无影响。</p>\n<ul>\n<li><strong>缺点</strong></li>\n</ul>\n<p>数据的分布和节点的位置有关，因为这些节点不是均匀的分布在哈希环上的，所以数据在进行存储时达不到均匀分布的效果。</p>\n</blockquote>\n<h3 id=\"哈希槽分区\"><a href=\"#哈希槽分区\" class=\"headerlink\" title=\"哈希槽分区\"></a>哈希槽分区</h3><blockquote>\n<p>==为什么出现？==</p>\n<p>解决一致性哈希算法出现的数据倾斜问题</p>\n<p>哈希槽实质就是一个数组，数组[0,2^14 -1]形成 hash slot 空间。</p>\n<p>==能干什么？==</p>\n<p>解决均匀分配的问题，在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系，现在就相当于节点上放的是槽，槽里放的是数据。</p>\n<p>槽解决的是粒度问题，相当于把粒度变大了，这样便于数据移动。</p>\n<p>哈希解决的是映射问题，使用 key 的哈希值来计算所在的槽，便于数据分配。</p>\n<p>==多少个哈希槽？==</p>\n<p>一个集群只能有 16384 个槽，编号 0-16383（0-2^14-1）。这些槽会分配给集群中的所有主节点，分配策略没有要求。可以指定哪些编号的槽分配给哪个主节点。集群会记录节点和槽的对应关系。解决了节点和槽的关系后，接下来就需要对 key 求哈希值，然后对 16384 取余，余数是几 key 就落入对应的槽里。slot = CRC16(key) % 16384。以槽为单位移动数据，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就解决了。</p>\n</blockquote>\n<p><strong>哈希槽计算</strong></p>\n<p>Redis 集群中内置了 16384 个哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点。当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，也就是映射到某个节点上。如下代码，key 之 A 、B 在 Node2， key 之 C 落在 Node3 上。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606232459.png\" alt=\"image-20220606232459710\" style=\"zoom:50%;\" />\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606232446.png\" alt=\"image-20220606232446308\" style=\"zoom:50%;\" />\n","categories":["中间件"],"tags":["笔记","面试","Redis"]},{"title":"SpringBoot2 核心技术","url":"/2022/05/18/5862bae2.html","content":"<h2 id=\"基础入门\"><a href=\"#基础入门\" class=\"headerlink\" title=\"基础入门\"></a>基础入门</h2><h3 id=\"1、Spring-生态圈\"><a href=\"#1、Spring-生态圈\" class=\"headerlink\" title=\"1、Spring 生态圈\"></a>1、Spring 生态圈</h3><blockquote>\n<p>Spring 官网：<a href=\"https://spring.io/\">https://spring.io</a></p>\n</blockquote>\n<p><strong>Spring 能做什么？</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220515171610.png\" alt=\"image-20220515171609895\"></p>\n<p><strong>Spring 的生态：</strong></p>\n<ul>\n<li>web 开发</li>\n<li>数据访问</li>\n<li>安全控制</li>\n<li>分布式</li>\n<li>消息服务</li>\n<li>移动开发</li>\n<li>批处理</li>\n<li>…</li>\n</ul>\n<h3 id=\"2、为什么使用-SpringBoot？\"><a href=\"#2、为什么使用-SpringBoot？\" class=\"headerlink\" title=\"2、为什么使用 SpringBoot？\"></a>2、为什么使用 SpringBoot？</h3><blockquote>\n<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>\n<p>能快速创建出生产级别的 Spring 应用。</p>\n</blockquote>\n<p><strong>SpringBoot 的优点：</strong></p>\n<ul>\n<li>创建独立 Spring 应用</li>\n<li>内嵌 web 服务器</li>\n<li>自动 starter 依赖，简化构建配置</li>\n<li>自动配置 Spring 以及第三方功能</li>\n<li>提供生产级别的监控、健康检查及外部化配置</li>\n<li>无代码生成、无需编写 XML</li>\n<li>SpringBoot 是整合 Spring 技术栈的一站式框架</li>\n<li>SpringBoot 是简化 Spring 技术栈的快速开发脚手架</li>\n</ul>\n<p><strong>SpringBoot 的缺点：</strong></p>\n<ul>\n<li>人称版本帝，社区活跃，迭代快，需要时刻关注版本变化</li>\n<li>封装太深，内部原理复杂，不容易精通</li>\n</ul>\n<h3 id=\"3、时代背景\"><a href=\"#3、时代背景\" class=\"headerlink\" title=\"3、时代背景\"></a>3、时代背景</h3><p>SpringBoot 诞生的时代背景，为了解决什么样的应用场景？</p>\n<h4 id=\"3-1、微服务\"><a href=\"#3-1、微服务\" class=\"headerlink\" title=\"3.1、微服务\"></a>3.1、微服务</h4><p><a href=\"https://martinfowler.com/articles/microservices.html\">James Lewis and Martin Fowler (2014)</a> 提出微服务完整概念。</p>\n<blockquote>\n<p>In short, the <strong>microservice architectural style</strong> is an approach to developing a single application as a <strong>suite of small services</strong>, each <strong>running in its own process</strong> and communicating with <strong>lightweight</strong> mechanisms, often an <strong>HTTP</strong> resource API. These services are <strong>built around business capabilities</strong> and <strong>independently deployable</strong> by fully <strong>automated deployment</strong> machinery. There is a <strong>bare minimum of centralized management</strong> of these services, which may be <strong>written in different programming languages</strong> and use different data storage technologies.– <a href=\"https://martinfowler.com/articles/microservices.html\">James Lewis and Martin Fowler (2014)</a></p>\n</blockquote>\n<p><strong>主要提出：</strong></p>\n<ul>\n<li>微服务是一种架构风格</li>\n<li>一个应用拆分为一组小型服务</li>\n<li>每个服务运行在自己的进程内，也就是可独立部署和升级</li>\n<li>服务之间使用轻量级 HTTP 交互</li>\n<li>服务围绕业务功能拆分</li>\n<li>可以由全自动部署机制独立部署</li>\n<li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li>\n</ul>\n<h4 id=\"3-2、分布式\"><a href=\"#3-2、分布式\" class=\"headerlink\" title=\"3.2、分布式\"></a>3.2、分布式</h4><p>分布式架构，讲得是系统服务分布在多个物理隔离的节点上运行，统一对外提供服务。从用户层面来看，就是一组服务节点组成一个系统。</p>\n<p><strong>分布式有哪些困难：</strong></p>\n<ul>\n<li>远程调用</li>\n<li>服务发现</li>\n<li>负载均衡</li>\n<li>服务容错</li>\n<li>配置管理</li>\n<li>服务监控</li>\n<li>链路追踪</li>\n<li>日志管理</li>\n<li>任务调度</li>\n<li>…</li>\n</ul>\n<p><strong>分布式的解决方案：</strong></p>\n<p>==SpringBoot + SpringCloud==</p>\n<h3 id=\"4、如何学习-SpringBoot？\"><a href=\"#4、如何学习-SpringBoot？\" class=\"headerlink\" title=\"4、如何学习 SpringBoot？\"></a>4、如何学习 SpringBoot？</h3><blockquote>\n<p>官方文档：<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/\">https://docs.spring.io/spring-boot/docs/current/reference/html/</a></p>\n<p>版本更新日志：<a href=\"https://github.com/spring-projects/spring-boot/wiki#release-notes\">https://github.com/spring-projects/spring-boot/wiki#release-notes</a></p>\n</blockquote>\n<h3 id=\"5、SpringBoot-特点\"><a href=\"#5、SpringBoot-特点\" class=\"headerlink\" title=\"5、SpringBoot 特点\"></a>5、SpringBoot 特点</h3><p>首先快速搭建一个<code>SpringBoot</code>应用</p>\n<h4 id=\"5-1、准备工作\"><a href=\"#5-1、准备工作\" class=\"headerlink\" title=\"5.1、准备工作\"></a>5.1、准备工作</h4><p><strong>系统要求</strong></p>\n<ul>\n<li><a href=\"https://www.java.com/\">Java 8</a> &amp; 兼容 java14 .</li>\n<li>Maven 3.3+</li>\n<li>idea 2022.1</li>\n</ul>\n<h5 id=\"maven-设置\"><a href=\"#maven-设置\" class=\"headerlink\" title=\"maven 设置\"></a>maven 设置</h5><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.8<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建一个-maven-项目\"><a href=\"#创建一个-maven-项目\" class=\"headerlink\" title=\"创建一个 maven 项目\"></a>创建一个 maven 项目</h5><ul>\n<li>创建工程</li>\n</ul>\n<p>过程略，使用 idea 创建即可</p>\n<ul>\n<li>引入依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建主程序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 主程序类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SpringBootApplication</span>：这是一个SpringBoot应用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(MainApplication.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编写接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">handle01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, Spring Boot 2!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>简化配置</li>\n</ul>\n<p><code>application.properties</code></p>\n<figure class=\"highlight elm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">server</span>.<span class=\"keyword\">port</span>=8888</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试</li>\n</ul>\n<p>运行启动类中的 main 方法，访问接口测试：localhost:8888/hello</p>\n<h4 id=\"5-2、依赖管理\"><a href=\"#5-2、依赖管理\" class=\"headerlink\" title=\"5.2、依赖管理\"></a>5.2、依赖管理</h4><ul>\n<li><strong>父项目做依赖管理</strong></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父项目 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- spring-boot-starter-parent的父项目 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 几乎声明了所有开发中常用的依赖的版本号，自动版本仲裁机制 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>开发导入 starter 场景启动器</strong></li>\n</ul>\n<p>官方支持的的 starter 列表：<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using-boot-starter\">Spring Boot Starters</a></p>\n<p><code>spring-boot-starter-*</code>：这个 <code>*</code> 代表的就是某种场景，引入场景启动器可以帮助我们简化开发，依赖管理</p>\n<p>第三方场景启动器：<code>*-spring-boot-starter</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 所有的场景启动器最底层的依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>无需关注版本号，自动根据场景启动器版本仲裁（父项目）</strong></p>\n<ol>\n<li>引入依赖默认都可以不写版本</li>\n<li>引入非版本仲裁的 jar，要写版本号。</li>\n</ol>\n</li>\n<li><p><strong>可以修改默认版本号</strong></p>\n<ol>\n<li>查看 spring-boot-dependencies 里面规定当前依赖的版本 用的 key</li>\n<li>在当前项目里面重写配置</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">&lt;properties&gt;</span></span><br><span class=\"line\">\t<span class=\"section\">&lt;mysql.version&gt;</span><span class=\"attribute\">5</span>.<span class=\"number\">1</span>.<span class=\"number\">43</span>&lt;/mysql.version&gt;</span><br><span class=\"line\"><span class=\"section\">&lt;/properties&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3、自动配置\"><a href=\"#5-3、自动配置\" class=\"headerlink\" title=\"5.3、自动配置\"></a>5.3、自动配置</h4><p><code>spring-boot-starter-web</code> 这个场景启动器会帮助我们做好很多配置</p>\n<ul>\n<li><p>自动配置好 Tomcat</p>\n<ul>\n<li>引入 Tomcat 依赖</li>\n<li>配置 Tomcat</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>自动配好 SpringMVC</p>\n</li>\n<li><ul>\n<li>引入 SpringMVC 全套组件</li>\n<li>自动配置好 SpringMVC 常用组件（功能）</li>\n</ul>\n</li>\n<li><p>自动配好 Web 常用功能，如：字符编码问题</p>\n<ul>\n<li>SpringBoot 帮我们配置好了所有 web 开发的常用场景</li>\n</ul>\n</li>\n<li><p>默认的包结构</p>\n<ul>\n<li>主程序所在的包及其下面的所有子包里面的组件都会被扫描进来</li>\n<li>无需以前的包扫描配置</li>\n<li>想要改变扫描路径，@SpringBootApplication(scanBasePackages=”com.vansys”)<ul>\n<li>或者使用@ComponentScan 指定扫描路径</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@SpringBootApplication</span></span><br><span class=\"line\">等同于</span><br><span class=\"line\"><span class=\"variable\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"variable\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"variable\">@ComponentScan</span>(<span class=\"string\">&quot;com.vansys&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>各种配置拥有默认值<ul>\n<li>默认配置最终都是映射到某个类上，如：MultipartProperties</li>\n<li>配置文件的值最终会绑定在每个类上，这个类会在容器中创建对象</li>\n</ul>\n</li>\n<li>按需加载所有自动配置项<ul>\n<li>非常多的 starter</li>\n<li>引入了哪些场景，相对应的场景才会开启</li>\n<li>SprongBoot 所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li>\n</ul>\n</li>\n<li>…</li>\n</ul>\n<h3 id=\"6、容器功能\"><a href=\"#6、容器功能\" class=\"headerlink\" title=\"6、容器功能\"></a>6、容器功能</h3><h4 id=\"6-1、组件添加\"><a href=\"#6-1、组件添加\" class=\"headerlink\" title=\"6.1、组件添加\"></a>6.1、组件添加</h4><h5 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h5><ul>\n<li><p>基本使用</p>\n</li>\n<li><p>Full 模式与 Lite 模式</p>\n<ul>\n<li><p>配置类组件之间无依赖关系用 Lite 模式，加速容器的启动过程，减少判断</p>\n</li>\n<li><p>配置类组件之间有依赖关系，方法会被调用得到之前的单实例组件，用 Full 模式</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">#############################Configuration使用示例######################################</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、配置类里面使用<span class=\"doctag\">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、配置类本身也是组件</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、proxyBeanMethods：代理bean的方法</span></span><br><span class=\"line\"><span class=\"comment\"> *      Full(proxyBeanMethods = true)、【保证每个<span class=\"doctag\">@Bean</span>方法被调用多少次返回的组件都是单实例的】</span></span><br><span class=\"line\"><span class=\"comment\"> *      Lite(proxyBeanMethods = false)【每个<span class=\"doctag\">@Bean</span>方法被调用多少次返回的组件都是新创建的】</span></span><br><span class=\"line\"><span class=\"comment\"> *      组件依赖必须使用Full模式默认。其他默认是否Lite模式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span> <span class=\"comment\">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"comment\">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">zhangsan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//user组件依赖了Pet组件</span></span><br><span class=\"line\">        zhangsan.setPet(tomcatPet());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zhangsan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;tom&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">tomcatPet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>(<span class=\"string\">&quot;tomcat&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#########################<span class=\"meta\">@Configuration</span>测试代码如下###################################</span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1、返回我们IOC容器</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2、查看容器里面的组件</span></span><br><span class=\"line\">        String[] names = run.getBeanDefinitionNames();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3、从容器中获取组件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Pet</span> <span class=\"variable\">tom01</span> <span class=\"operator\">=</span> run.getBean(<span class=\"string\">&quot;tom&quot;</span>, Pet.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Pet</span> <span class=\"variable\">tom02</span> <span class=\"operator\">=</span> run.getBean(<span class=\"string\">&quot;tom&quot;</span>, Pet.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;组件：&quot;</span>+(tom01 == tom02));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4、com.vansys.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class=\"line\">        <span class=\"type\">MyConfig</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> run.getBean(MyConfig.class);</span><br><span class=\"line\">        System.out.println(bean);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span></span><br><span class=\"line\">        <span class=\"comment\">//保持组件单实例</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> bean.user01();</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user1</span> <span class=\"operator\">=</span> bean.user01();</span><br><span class=\"line\">        System.out.println(user == user1);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user01</span> <span class=\"operator\">=</span> run.getBean(<span class=\"string\">&quot;user01&quot;</span>, User.class);</span><br><span class=\"line\">        <span class=\"type\">Pet</span> <span class=\"variable\">tom</span> <span class=\"operator\">=</span> run.getBean(<span class=\"string\">&quot;tom&quot;</span>, Pet.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Bean、-Component、-Controller、-Service、-Repository\"><a href=\"#Bean、-Component、-Controller、-Service、-Repository\" class=\"headerlink\" title=\"@Bean、@Component、@Controller、@Service、@Repository\"></a>@Bean、@Component、@Controller、@Service、@Repository</h5><p>在类上使用这些这些注解也可以实现往容器里添加组件</p>\n<h5 id=\"ComponentScan、-Import\"><a href=\"#ComponentScan、-Import\" class=\"headerlink\" title=\"@ComponentScan、@Import\"></a>@ComponentScan、@Import</h5><figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span></span><br><span class=\"line\"><span class=\"keyword\">@Import</span>(&#123;User.class, DBHelper.class&#125;)</span><br><span class=\"line\"><span class=\"variable\">@Configuration</span>(proxyBeanMethods = false) <span class=\"comment\">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class=\"line\">public class MyConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Conditional\"><a href=\"#Conditional\" class=\"headerlink\" title=\"@Conditional\"></a>@Conditional</h5><p>条件装配：满足@Conditional 指定的条件，则进行组件注入</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220515224340.png\" alt=\"image-20220515224340380\"></p>\n<h5 id=\"ImportResource\"><a href=\"#ImportResource\" class=\"headerlink\" title=\"@ImportResource\"></a>@ImportResource</h5><p>原生配置文件引入，可以引入一个 <code>beans.xml</code> 配置文件</p>\n<h4 id=\"6-2、配置绑定\"><a href=\"#6-2、配置绑定\" class=\"headerlink\" title=\"6.2、配置绑定\"></a>6.2、配置绑定</h4><h5 id=\"Component-ConfigurationProperties\"><a href=\"#Component-ConfigurationProperties\" class=\"headerlink\" title=\"@Component + @ConfigurationProperties\"></a>@Component + @ConfigurationProperties</h5><p>通过 <code>prefix</code> 匹配 <code>application.properties</code> 核心配置文件的配置，并指定注入到容器中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String brand;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getBrand</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBrand</span><span class=\"params\">(String brand)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getPrice</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPrice</span><span class=\"params\">(Integer price)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Car&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;brand=&#x27;&quot;</span> + brand + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, price=&quot;</span> + price +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"EnableConfigurationProperties-ConfigurationProperties\"><a href=\"#EnableConfigurationProperties-ConfigurationProperties\" class=\"headerlink\" title=\"@EnableConfigurationProperties + @ConfigurationProperties\"></a>@EnableConfigurationProperties + @ConfigurationProperties</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(Car.class)</span></span><br><span class=\"line\"><span class=\"comment\">//1、开启Car配置绑定功能</span></span><br><span class=\"line\"><span class=\"comment\">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Spring 注解详解：<a href=\"https://www.bilibili.com/video/BV1gW411W7wy\">https://www.bilibili.com/video/BV1gW411W7wy</a></p>\n</blockquote>\n<h3 id=\"7、自动配置原理入门\"><a href=\"#7、自动配置原理入门\" class=\"headerlink\" title=\"7、自动配置原理入门\"></a>7、自动配置原理入门</h3><h4 id=\"7-1、引导加载自动配置类\"><a href=\"#7-1、引导加载自动配置类\" class=\"headerlink\" title=\"7.1、引导加载自动配置类\"></a>7.1、引导加载自动配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(</span></span><br><span class=\"line\"><span class=\"meta\">    excludeFilters = &#123;@Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">), @Filter(</span></span><br><span class=\"line\"><span class=\"meta\">    type = FilterType.CUSTOM,</span></span><br><span class=\"line\"><span class=\"meta\">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(MainApplication.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>SpringBootConfiguration</p>\n<ul>\n<li>@Configuration：表明当前是一个配置类</li>\n</ul>\n</li>\n<li><p>@ComponentScan</p>\n<ul>\n<li>指定扫描哪些包下的组件</li>\n</ul>\n</li>\n<li><p>@EnableAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableAutoConfiguration &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">ENABLED_OVERRIDE_PROPERTY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] exclude() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] excludeName() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@AutoConfigurationPackage</li>\n</ul>\n<p>自动配置包？指定了默认的包规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用Registrar给容器中导入一系列组件</span></span><br><span class=\"line\"><span class=\"comment\">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationPackages.Registrar.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoConfigurationPackage &#123;</span><br><span class=\"line\">    String[] basePackages() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] basePackageClasses() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@Import(AutoConfigurationImportSelector.class)</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、利用get<span class=\"constructor\">AutoConfigurationEntry(<span class=\"params\">annotationMetadata</span>)</span>;给容器中批量导入一些组件</span><br><span class=\"line\"><span class=\"number\">2</span>、调用List&lt;String&gt; configurations = get<span class=\"constructor\">CandidateConfigurations(<span class=\"params\">annotationMetadata</span>, <span class=\"params\">attributes</span>)</span>获取到所有需要导入到容器中的配置类</span><br><span class=\"line\"><span class=\"number\">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; load<span class=\"constructor\">SpringFactories(@Nullable ClassLoader <span class=\"params\">classLoader</span>)</span>；得到所有的组件</span><br><span class=\"line\"><span class=\"number\">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class=\"line\">\t默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class=\"line\">    spring-boot-autoconfigure-<span class=\"number\">2.6</span>.<span class=\"number\">7.</span><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">RELEASE</span>.</span></span>jar包里面也有META-INF/spring.factories</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220515232710.png\" alt=\"image-20220515232710021\"></p>\n<blockquote>\n<p>spring-boot-autoconfigure-2.6.7.RELEASE.jar/META-INF/spring.factories 文件里面写死了 spring-boot 一启动就要给容器中加载的所有配置类</p>\n</blockquote>\n<figure class=\"highlight livescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Auto Configure</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.<span class=\"keyword\">function</span>.client.ClientHttpConnectorAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.<span class=\"keyword\">function</span>.client.WebClientAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,<span class=\"string\">\\</span></span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-2、按需开启自动配置项\"><a href=\"#7-2、按需开启自动配置项\" class=\"headerlink\" title=\"7.2、按需开启自动配置项\"></a>7.2、按需开启自动配置项</h4><p><code>spring-boot-2.6.7.RELEASE</code> 版本默认提供了 133 个自动配置项，全为 <code>xxxAutoConfiguration</code> 的自动配置类，但是根据 Spring 的 <code>@Conditional</code> 注解，最终会按需配置。</p>\n<h4 id=\"7-3、修改默认配置\"><a href=\"#7-3、修改默认配置\" class=\"headerlink\" title=\"7.3、修改默认配置\"></a>7.3、修改默认配置</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给容器中加入了文件上传解析器；</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"comment\">//容器中有这个类型组件</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class=\"line\"><span class=\"comment\">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MultipartResolver <span class=\"title function_\">multipartResolver</span><span class=\"params\">(MultipartResolver resolver)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class=\"line\">    <span class=\"comment\">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class=\"line\">    <span class=\"comment\">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>==SpringBoot 默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先==</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CharacterEncodingFilter <span class=\"title function_\">characterEncodingFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li><p>SpringBoot 先加载所有的自动配置类 xxxxxAutoConfiguration</p>\n</li>\n<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties 里面拿。xxxProperties 和配置文件进行了绑定</p>\n</li>\n<li><p>生效的配置类就会给容器中装配很多组件</p>\n</li>\n<li><p>只要容器中有这些组件，相当于这些功能就有了</p>\n</li>\n<li><p>定制化配置</p>\n</li>\n<li><ul>\n<li>用户直接自己使用@Bean 替换底层的组件</li>\n<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>xxxxxAutoConfiguration —&gt; 组件 —&gt;** **xxxxProperties 里面拿值 —-&gt; application.properties</p>\n</blockquote>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><h3 id=\"1、配置文件\"><a href=\"#1、配置文件\" class=\"headerlink\" title=\"1、配置文件\"></a>1、配置文件</h3><h4 id=\"1-1、文件类型\"><a href=\"#1-1、文件类型\" class=\"headerlink\" title=\"1.1、文件类型\"></a>1.1、文件类型</h4><ul>\n<li>properties</li>\n</ul>\n<p>同以前的 properties 用法</p>\n<ul>\n<li>yaml</li>\n</ul>\n<p>YAML 是 <code>YAML Ain&#39;t Markup Language</code>（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：<code>Yet Another Markup Language</code>（仍是一种标记语言）。</p>\n<p>非常适合用来做以数据为中心的配置文件</p>\n<p><strong>基本语法</strong></p>\n<ul>\n<li><code>key: value</code>；kv 之间有空格</li>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进不允许使用 tab，只允许空格</li>\n<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>\n<li><code>#</code> 表示注释</li>\n<li>‘’ 与 “” 表示字符串内容，会被 转义/不转义</li>\n</ul>\n<p><strong>数据类型</strong></p>\n<ul>\n<li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">k:</span> <span class=\"string\">v</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对象：键值对的集合。map、hash、set、object</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">行内写法：k:</span> &#123;<span class=\"string\">k1:v1</span>,<span class=\"string\">k2:v2</span>,<span class=\"string\">k3:v3</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\"><span class=\"attr\">k:</span></span><br><span class=\"line\">  <span class=\"attr\">k1:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">k2:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">  <span class=\"attr\">K3:</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组：一组按次序排列的值。array、list、queue</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">行内写法：k:</span> [<span class=\"string\">v1</span>,<span class=\"string\">v2</span>,<span class=\"string\">v3</span>]</span><br><span class=\"line\"><span class=\"comment\">#或</span></span><br><span class=\"line\"><span class=\"attr\">k:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">v1</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">v2</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Pet pet;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String[] interests;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; animal;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Object&gt; score;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Set&lt;Double&gt; salarys;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Double weight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yaml表示以上对象</span></span><br><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">userName:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">  <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2019</span><span class=\"string\">/12/12</span> <span class=\"number\">20</span><span class=\"string\">:12:33</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">pet:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">    <span class=\"attr\">weight:</span> <span class=\"number\">23.4</span></span><br><span class=\"line\">  <span class=\"attr\">interests:</span> [<span class=\"string\">篮球</span>,<span class=\"string\">游泳</span>]</span><br><span class=\"line\">  <span class=\"attr\">animal:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">jerry</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mario</span></span><br><span class=\"line\">  <span class=\"attr\">score:</span></span><br><span class=\"line\">    <span class=\"attr\">english:</span></span><br><span class=\"line\">      <span class=\"attr\">first:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">second:</span> <span class=\"number\">40</span></span><br><span class=\"line\">      <span class=\"attr\">third:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"attr\">math:</span> [<span class=\"number\">131</span>,<span class=\"number\">140</span>,<span class=\"number\">148</span>]</span><br><span class=\"line\">    <span class=\"attr\">chinese:</span> &#123;<span class=\"attr\">first:</span> <span class=\"number\">128</span>,<span class=\"attr\">second:</span> <span class=\"number\">136</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">salarys:</span> [<span class=\"number\">3999</span>,<span class=\"number\">4999.98</span>,<span class=\"number\">5999.99</span>]</span><br><span class=\"line\">  <span class=\"attr\">allPets:</span></span><br><span class=\"line\">    <span class=\"attr\">sick:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">tom</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">jerry</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;</span><br><span class=\"line\">    <span class=\"attr\">health:</span> [&#123;<span class=\"attr\">name:</span> <span class=\"string\">mario</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2、配置提示\"><a href=\"#1-2、配置提示\" class=\"headerlink\" title=\"1.2、配置提示\"></a>1.2、配置提示</h4><p>==自定义的类和配置文件绑定一般没有提示==</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 如果在项目中使用 AspectJ，则需要确保注释处理器仅运行一次。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">proc</span>&gt;</span>none<span class=\"tag\">&lt;/<span class=\"name\">proc</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Web-开发\"><a href=\"#2、Web-开发\" class=\"headerlink\" title=\"2、Web 开发\"></a>2、Web 开发</h3><h4 id=\"2-1、SpringMVC-自动配置概览\"><a href=\"#2-1、SpringMVC-自动配置概览\" class=\"headerlink\" title=\"2.1、SpringMVC 自动配置概览\"></a>2.1、SpringMVC 自动配置概览</h4><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>\n<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>\n<ul>\n<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>\n</li>\n<li><ul>\n<li>内容协商视图解析器和 BeanName 视图解析器</li>\n</ul>\n</li>\n<li><p>Support for serving static resources, including support for WebJars (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content\">later in this document</a>)).</p>\n</li>\n<li><ul>\n<li>静态资源（包括 webjars）</li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>\n</li>\n<li><ul>\n<li>自动注册 <code>Converter，GenericConverter，Formatter</code></li>\n</ul>\n</li>\n<li><p>Support for <code>HttpMessageConverters</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>\n</ul>\n</li>\n<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>\n</ul>\n</li>\n<li><p>Static <code>index.html</code> support.</p>\n</li>\n<li><ul>\n<li>静态 index.html 页支持</li>\n</ul>\n</li>\n<li><p>Custom <code>Favicon</code> support (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自定义 <code>Favicon</code></li>\n</ul>\n</li>\n<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer\">later in this document</a>).</p>\n</li>\n<li><ul>\n<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder 负责将请求数据绑定到 JavaBean 上）</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>If you want to keep those Spring Boot MVC customizations and make more <a href=\"https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc\">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>\n<p><strong>不用@EnableWebMvc 注解。使用</strong> <code>@Configuration**</code> <strong>+</strong> <code>WebMvcConfigurer</code> <strong>自定义规则</strong></p>\n</blockquote>\n<blockquote>\n<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>\n<p><strong>声明</strong> <code>WebMvcRegistrations</code> <strong>改变默认底层组件</strong></p>\n</blockquote>\n<blockquote>\n<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>\n<p><strong>使用</strong> ==@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管 SpringMVC==</p>\n</blockquote>\n","categories":["后端开发"],"tags":["技巧","笔记","微服务"]},{"title":"Nginx 从入门到实战","url":"/2022/04/24/3db3af36.html","content":"<h2 id=\"Nginx-的安装\"><a href=\"#Nginx-的安装\" class=\"headerlink\" title=\"Nginx 的安装\"></a>Nginx 的安装</h2><p>本文 Linux 环境基于 <code>centos7</code></p>\n<h3 id=\"版本区别\"><a href=\"#版本区别\" class=\"headerlink\" title=\"版本区别\"></a>版本区别</h3><p>常用版本分为四大阵营</p>\n<ul>\n<li>Nginx 开源版 <a href=\"http://nginx.org/\">http://nginx.org/</a></li>\n<li>Nginx plus 商业版 <a href=\"https://www.nginx.com/\">https://www.nginx.com</a></li>\n<li>openresty <a href=\"http://openresty.org/cn/\">http://openresty.org/cn/</a></li>\n<li>Tengine <a href=\"http://tengine.taobao.org/\">http://tengine.taobao.org/</a></li>\n</ul>\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><p>这里下载的是 <code>nginx-1.21.6.tar.gz</code> ，解压后编译安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar zxvf nginx-1.21.6.tar.gz -C ./</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.21.6</span><br><span class=\"line\"><span class=\"comment\"># 执行配置脚本</span></span><br><span class=\"line\">./configure --prefix=/usr/local/nginx</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果出现警告或报错\"><a href=\"#如果出现警告或报错\" class=\"headerlink\" title=\"如果出现警告或报错\"></a>如果出现警告或报错</h3><p>一般是缺少依赖的问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装gcc</span></span><br><span class=\"line\">yum install -y gcc</span><br><span class=\"line\"><span class=\"comment\"># 安装perl库</span></span><br><span class=\"line\">yum install -y pcre pcre-devel</span><br><span class=\"line\"><span class=\"comment\"># 安装zlib库</span></span><br><span class=\"line\">yum install -y zlib zlib-devel</span><br><span class=\"line\"><span class=\"comment\"># 重新执行安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装成系统服务\"><a href=\"#安装成系统服务\" class=\"headerlink\" title=\"安装成系统服务\"></a>安装成系统服务</h3><ol>\n<li>创建服务脚本</li>\n</ol>\n<p><code>vi /usr/lib/systemd/system/nginx.service</code></p>\n<ol start=\"2\">\n<li>服务脚本内容</li>\n</ol>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"keyword\">Description</span>=nginx - web server</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>logs/nginx.pid</span><br><span class=\"line\">ExecStartPre=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -t -c /u</span>sr<span class=\"regexp\">/local/</span>nginx<span class=\"regexp\">/conf/</span>nginx.conf</span><br><span class=\"line\">ExecStart=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -c /u</span>sr<span class=\"regexp\">/local/</span>nginx<span class=\"regexp\">/conf/</span>nginx.conf</span><br><span class=\"line\">ExecReload=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reload</span><br><span class=\"line\">ExecStop=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s stop</span><br><span class=\"line\">ExecQuit=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s quit</span><br><span class=\"line\">PrivateTmp=<span class=\"keyword\">true</span></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>重新加载系统服务</li>\n</ol>\n<p><code>systemctl daemon-reload</code></p>\n<ol start=\"4\">\n<li>启动服务</li>\n</ol>\n<p><code>systemctl start nginx.service</code></p>\n<ol start=\"5\">\n<li>开机自启</li>\n</ol>\n<p><code>systemctl enable nginx.service</code></p>\n<h2 id=\"Nginx-基础使用\"><a href=\"#Nginx-基础使用\" class=\"headerlink\" title=\"Nginx 基础使用\"></a>Nginx 基础使用</h2><h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><p>进入<code>Nginx</code>的主目录可以看到这些文件夹</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">client_body_temp conf fastcgi_temp html logs proxy_temp <span class=\"keyword\">sbin </span><span class=\"keyword\">scgi_temp </span>uwsgi_temp</span><br></pre></td></tr></table></figure>\n\n<p>其中这几个文件夹在刚安装时是没有的， 主要用来存放运行过程中的临时文件</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">client_body_temp fastcgi_temp proxy_temp scgi_temp</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>conf：用来存放配置文件</li>\n<li>html：用来存放静态文件的默认目录 html、css 等</li>\n<li>sbin：nginx 的主程序</li>\n<li>logs：nginx 运行日志</li>\n</ul>\n<h3 id=\"基本运行原理\"><a href=\"#基本运行原理\" class=\"headerlink\" title=\"基本运行原理\"></a>基本运行原理</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220424022100.png\" alt=\"image-20220424022053512\"></p>\n<h2 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h2><h3 id=\"最小配置\"><a href=\"#最小配置\" class=\"headerlink\" title=\"最小配置\"></a>最小配置</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  默认为1，表示开启一个业务进程</span></span><br><span class=\"line\">worker_processes  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">\t<span class=\"comment\"># 单个业务进程可接受连接数</span></span><br><span class=\"line\">    worker_connections  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">\t<span class=\"comment\"># 引入http mime类型</span></span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    <span class=\"comment\"># 如果mime类型没匹配上，默认使用二进制流的方式传输。</span></span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">\t使用linux的 sendfile(socket, file, len) 高效网络传输，也就是数据<span class=\"number\">0</span>拷贝。</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># 虚拟主机 vhost</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">    \t<span class=\"comment\"># 监听端口号</span></span><br><span class=\"line\">        listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"comment\"># 域名、主机名</span></span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\"># 匹配路径</span></span><br><span class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/ &#123;</span></span><br><span class=\"line\"><span class=\"title\">            root</span>   html; <span class=\"comment\"># 文件根目录</span></span><br><span class=\"line\">            index  index.html index.htm; <span class=\"comment\"># 默认页名称</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\"># 报错编码对应页面</span></span><br><span class=\"line\">        error_page   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /<span class=\"number\">50</span>x.html;</span><br><span class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">= /50x</span>.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"虚拟主机\"><a href=\"#虚拟主机\" class=\"headerlink\" title=\"虚拟主机\"></a>虚拟主机</h3><p>原本一台服务器只能对应一个站点，通过虚拟主机技术可以虚拟化成多个站点同时对外提供服务</p>\n<p><strong>server_name 匹配规则</strong></p>\n<p>我们需要注意的是 <code>server_name</code> 匹配分先后顺序，写在前面的匹配上就不会继续往下匹配了。</p>\n<ul>\n<li>完整匹配</li>\n</ul>\n<p>可以在同一个 <code>server_name</code> 中配置多个域名</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">server_name abc.com abc123.com<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通配符匹配</li>\n</ul>\n<p>可以通过 <code>*</code> 通配符来模糊匹配多个域名，可以在开始和结尾使用</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">server_name</span> <span class=\"regexp\">*.abc.com</span> <span class=\"regexp\">abc.*</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>正则匹配</li>\n</ul>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">server_name</span> ~^[<span class=\"number\">0</span>-<span class=\"number\">9</span>]+\\.abc\\.com$</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>通过关键字 <code>proxy_pass</code> 关键字来指定一个服务器地址（ip/域名）</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">proxy_pass</span> http://www.baidu.com/;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h4><ul>\n<li>基于反向代理的负载均衡配置</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> app &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">192.168.88.102:80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">192.168.88.103:80</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">proxy_pass</span> http://app;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h4><ul>\n<li><strong>轮询</strong></li>\n</ul>\n<p>默认情况下使用轮询方式，逐一转发，这种方式适用于无状态请求</p>\n<ul>\n<li><strong>权重（weight）</strong><ul>\n<li>down：表示当前的主机暂时不参与负载</li>\n<li>weight：默认为 1，weight 越大，负载的权重就越大</li>\n<li>backup： 其它所有的非 backup 机器 down 或者忙的时候，请求 backup 机器</li>\n</ul>\n</li>\n</ul>\n<p>指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> app &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">192.168.88.102:80</span> weight=<span class=\"number\">10</span> down;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">192.168.88.103:80</span> weight=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:8060</span> weight=<span class=\"number\">1</span> backup;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ip_hash</strong></li>\n</ul>\n<p>根据客户端的 ip 地址转发同一台服务器，可以保持回话</p>\n<ul>\n<li><strong>least_conn</strong></li>\n</ul>\n<p>最少连接数访问</p>\n<ul>\n<li><strong>url_hash</strong></li>\n</ul>\n<p>根据用户访问的 url 定向转发请求</p>\n<ul>\n<li><strong>fair</strong></li>\n</ul>\n<p>根据后端服务器响应时间转发请求</p>\n<h3 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h3><ul>\n<li>配置后端服务的反向代理</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置前端静态资源</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> /css &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/local/nginx/static;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">location</span> /images &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/local/nginx/static;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">location</span> /js &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/local/nginx/static;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正则匹配</span></span><br><span class=\"line\"><span class=\"section\">location</span> ~*/(css|img|js) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/local/nginx/static;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-配置规则\"><a href=\"#location-配置规则\" class=\"headerlink\" title=\"location 配置规则\"></a>location 配置规则</h3><h4 id=\"location-前缀\"><a href=\"#location-前缀\" class=\"headerlink\" title=\"location 前缀\"></a>location 前缀</h4><ul>\n<li><p>/ 通用匹配，任何请求都会匹配到</p>\n</li>\n<li><p>= 精准匹配，不是以指定模式开头</p>\n</li>\n<li><p>~ 正则匹配，区分大小写</p>\n</li>\n<li><p>~* 正则匹配，不区分大小写</p>\n</li>\n<li><p>^~ 非正则匹配，匹配以指定模式开头的 location</p>\n</li>\n</ul>\n<h4 id=\"location-匹配规则\"><a href=\"#location-匹配规则\" class=\"headerlink\" title=\"location 匹配规则\"></a>location 匹配规则</h4><ul>\n<li>多个正则 <code>location</code> 直接按书写顺序匹配，匹配成功后就不会往下匹配</li>\n<li>普通（非正则）<code>location</code> 会一直往下，直到找到匹配度最高的（最大前缀匹配）</li>\n<li>当普通 <code>location</code> 与正则 <code>location</code> 同时存在，如果正则匹配成功,则不会再执行普通匹配</li>\n<li>所有类型 <code>location</code> 存在时，<code>=匹配</code> &gt; <code>^~匹配</code> &gt; <code>正则匹配</code> &gt; <code>普通（最大前缀匹配）</code></li>\n</ul>\n<h4 id=\"alias-与-root\"><a href=\"#alias-与-root\" class=\"headerlink\" title=\"alias 与 root\"></a>alias 与 root</h4><p><code>root</code> 用来设置根目录，而 <code>alias</code> 在接受请求的时候在路径上不会加上 <code>location</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> /css &#123;</span><br><span class=\"line\">    <span class=\"attribute\">alias</span> /usr/local/nginx/static/css;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>alias 指定的目录是准确的，即 location 匹配访问的 path 目录下的文件直接是在 alias 目录下查找的；</li>\n<li>root 指定 的目录是 location 匹配访问的 path 目录的上一级目录,这个 path 目录一定要是真实存在 root 指定目录下的；</li>\n<li>使用 alias 标签的目录块中不能使用 rewrite 的 break（具体原因不明）；另外，alias 指定的目录后面必须要加上”/“符 号！！</li>\n<li>alias 虚拟目录配置中，location 匹配的 path 目录如果后面不带”/“，那么访问的 url 地址中这个 path 目录后 面加不加”/“不影响访问，访问时它会自动加上”/“； 但是如果 location 匹配的 path 目录后面加上”/“，那么访问的 url 地 址中这个 path 目录必须要加上”/“，访问时它不会自动加上”/“。如果不加上”/“，访问就会失败！</li>\n<li>root 目录配置中，location 匹配的 path 目录后面带不带”/“，都不会影响访问。</li>\n</ul>\n<h3 id=\"URLRewrite\"><a href=\"#URLRewrite\" class=\"headerlink\" title=\"URLRewrite\"></a>URLRewrite</h3><p>rewirte 语法格式及参数语法：</p>\n<p><code>rewrite</code> 是实现 URL 重写的关键指令，根据 <code>regex (正则表达式)</code> 部分内容，重定向到 <code>replacement</code>，结尾是 <code>flag</code> 标记。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">rewrite   <span class=\"tag\">&lt;<span class=\"name\">regex</span>&gt;</span>   <span class=\"tag\">&lt;<span class=\"name\">replacement</span>&gt;</span>   [flag];</span><br><span class=\"line\">关键字     正则       替代内容         flag标记</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>关键字</strong>：其中关键字 <code>rewrite</code> 不能改变</li>\n<li><strong>正则</strong>：正则表达式语句进行规则匹配</li>\n<li><strong>替代内容</strong>：将正则匹配的内容替换成 <code>replacement</code></li>\n<li><strong>flag 标记</strong>：<code>rewrite</code> 支持的 <code>flag</code> 标记</li>\n</ul>\n<blockquote>\n<p>rewrite 参数的标签段位置：server、location、if</p>\n</blockquote>\n<p><strong>flag 标记说明：</strong></p>\n<ul>\n<li>last：本条规则匹配完成后，继续向下匹配新的 location URI 规则</li>\n<li>break：本条规则匹配完成即终止，不再匹配后面的任何规则</li>\n<li>redirect：返回 302 临时重定向，浏览器地址会显示跳转后的 URL 地址</li>\n<li>permanent：返回 301 永久重定向，浏览器地址栏会显示跳转后的 URL 地址</li>\n</ul>\n<h3 id=\"防盗链配置\"><a href=\"#防盗链配置\" class=\"headerlink\" title=\"防盗链配置\"></a>防盗链配置</h3><figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">valid_referers</span> <span class=\"literal\">none</span> | <span class=\"literal\">blocked</span> | server_names | strings ....;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>none：检测 <code>Referer</code> 头域不存在的情况</li>\n<li>blocked：检测 <code>Referer</code> 头域的值被防火墙或者代理服务器删除或伪装的情况。这种情况该头域的值不以 <code>http://</code> 或 <code>https://</code> 开头</li>\n<li>server_names：设置一个或多个 <code>URL</code> ，检测 <code>Referer</code> 头域的值是否是这些 <code>URL</code> 中的某一个。</li>\n</ul>\n<p><strong>使用 curl 测试</strong></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -I http:<span class=\"regexp\">//</span><span class=\"number\">192.168</span>.<span class=\"number\">44.101</span><span class=\"regexp\">/img/</span>logo.png</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -I 表示只显示响应的头信息</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>带引用</strong></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -e <span class=\"string\">&quot;http://baidu.com&quot;</span> -I http:<span class=\"regexp\">//</span><span class=\"number\">192.168</span>.<span class=\"number\">44.101</span><span class=\"regexp\">/img/</span>logo.png</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高可用配置\"><a href=\"#高可用配置\" class=\"headerlink\" title=\"高可用配置\"></a>高可用配置</h3><h4 id=\"安装-Keepalived\"><a href=\"#安装-Keepalived\" class=\"headerlink\" title=\"安装 Keepalived\"></a>安装 Keepalived</h4><ul>\n<li>编译安装</li>\n</ul>\n<p>下载地址：<a href=\"https://www.keepalived.org/download.html#\">https://www.keepalived.org/download.html#</a></p>\n<figure class=\"highlight erlang-repl\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 解压之后通过命令安装</span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\"># 如遇报错提示</span><br><span class=\"line\">configure: error:</span><br><span class=\"line\">!!! OpenSSL is not properly installed on your system. !!!</span><br><span class=\"line\">!!! Can not include OpenSSL headers files. !!!</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">yum install openssl-devel</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>yum 安装</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> keepalived</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>使用 <code>yum</code> 安装后的配置文件在 <code>/etc/keepalived/keepalived.conf</code></p>\n<p><strong>最小配置</strong></p>\n<p>主机：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">\trouter_id lb101</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance vansys &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    <span class=\"keyword\">interface</span> <span class=\"symbol\">ens33</span></span><br><span class=\"line\">    <span class=\"symbol\">virtual_router_id</span> <span class=\"symbol\">51</span></span><br><span class=\"line\">    <span class=\"symbol\">priority</span> <span class=\"symbol\">100</span></span><br><span class=\"line\">    <span class=\"symbol\">advert_int</span> <span class=\"symbol\">1</span></span><br><span class=\"line\">    <span class=\"symbol\">authentication</span> &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass <span class=\"number\">1111</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">    \t<span class=\"number\">192.168</span><span class=\"number\">.44</span><span class=\"number\">.200</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从机：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">\trouter_id lb100</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance vansys &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    <span class=\"keyword\">interface</span> <span class=\"symbol\">ens33</span></span><br><span class=\"line\">    <span class=\"symbol\">virtual_router_id</span> <span class=\"symbol\">51</span></span><br><span class=\"line\">    <span class=\"symbol\">priority</span> <span class=\"symbol\">100</span></span><br><span class=\"line\">    <span class=\"symbol\">advert_int</span> <span class=\"symbol\">1</span></span><br><span class=\"line\">    <span class=\"symbol\">authentication</span> &#123;</span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass <span class=\"number\">1111</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">    \t<span class=\"number\">192.168</span><span class=\"number\">.44</span><span class=\"number\">.200</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动服务</strong></p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"literal\">start</span> keepalived</span><br></pre></td></tr></table></figure>\n","categories":["中间件"],"tags":["技巧","笔记","Nginx"]},{"title":"错误码及全局异常处理","url":"/2022/04/07/816ad4bd.html","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>在软件开发过程中，不可避免的是需要处理各种异常，在 Java 中，处理异常的方式一般就是采用<code>try&#123;...&#125;catch&#123;...&#125;finally&#123;...&#125;</code>代码块。在业务系统中，可能会有大量的异常处理代码块，这样不仅有大量的冗余代码，而且还影响代码的可读性。比较下面两张图：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220328132128.png\" alt=\"image-20220328132128521\" style=\"zoom:67%;\" />\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220328132228.png\" alt=\"image-20220328132228437\" style=\"zoom:67%;\" />\n\n<p>可以看到，明显第二种的代码简洁，可读性高！此处的代码是在 Controller 层中的，在 Service 层中会有更多的异常处理代码块。</p>\n<p>那么我们应该如何优雅的进行异常处理呢？</p>\n<h2 id=\"什么是统一异常处理\"><a href=\"#什么是统一异常处理\" class=\"headerlink\" title=\"什么是统一异常处理\"></a>什么是统一异常处理</h2><p>在 Spring 里，我们可以使用@ControllerAdvice 来处理一些全局性的东西，最常见的是结合@ExceptionHandler 注解用于全局异常的处理。</p>\n<p>@ControllerAdvice 是在类上声明的注解，其用法主要有三点：</p>\n<ul>\n<li><code>@ExceptionHandler</code>注解标注的方法：用于捕获 Controller 中抛出的不同类型的异常，从而达到异常全局处理的目的</li>\n<li><code>@InitBinder</code>注解标注的方法：用于请求中注册自定义参数的解析，从而达到自定义请求参数格式的目的</li>\n<li><code>@ModelAttribute</code>注解标注的方法：表示此方法会在执行目标 Controller 方法之前执行</li>\n</ul>\n<p>跟异常处理有关的只有<code>@ExceptionHandler</code>注解，从字面意思上理解，就是<code>异常处理器</code>的意思，其实际作用也正是如此：若在某个<code>Controller</code>类定义一个异常处理方法，并在方法上添加该注解，那么当出现指定的异常时，会执行该处理异常的方法，其可以使用<code>SpringMVC</code>提供的数据绑定，比如接受一个当前抛出的<code>Throwable</code>对象。</p>\n<p>但是，这样一来，就必须在每一个<code>Controller</code>类都定义一套这样的异常处理方法，因为异常可以是各种各样。这样一来，就会造成大量的冗余代码，而且若需要新增一种异常的处理逻辑，就必须修改所有<code>Controller</code>类了，很不优雅。</p>\n<p>当然你可能会说，那就定义个类似<code>BaseController</code>的基类，这样总行了吧。</p>\n<p>这种做法虽然没错，但仍不尽善尽美，因为这样的代码有一定的侵入性和耦合性。简简单单的<code>Controller</code>，我为啥非得继承这样一个类呢，万一已经继承其他基类了呢。大家都知道<code>Java</code>只能继承一个类。</p>\n<p>那有没有一种方案，既不需要跟<code>Controller</code>耦合，也可以将定义的 <strong>异常处理器</strong> 应用到所有控制器呢？所以注解<code>@ControllerAdvice</code>出现了，简单的说，该注解可以把异常处理器应用到所有控制器，而不是单个控制器。借助该注解，我们可以实现：在独立的某个地方，比如单独一个类，定义一套对各种异常的处理机制，然后在类的签名加上注解<code>@ControllerAdvice</code>，统一对 <code>不同阶段的</code>、<code>不同异常</code> 进行处理。这就是统一异常处理的原理。</p>\n<blockquote>\n<p>注意到上面对异常按阶段进行分类，大体可以分成：进入<code>Controller</code>前的异常 和 <code>Service</code> 层异常，具体可以参考下图：</p>\n</blockquote>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220328135114.png\" alt=\"image-20220328135114123\" style=\"zoom:67%;\" />\n\n<h2 id=\"统一异常处理实战\"><a href=\"#统一异常处理实战\" class=\"headerlink\" title=\"统一异常处理实战\"></a>统一异常处理实战</h2><p>通过全局统一的异常处理将自定义的错误码以 json 的格式返回给前端。</p>\n<h3 id=\"统一返回结果类\"><a href=\"#统一返回结果类\" class=\"headerlink\" title=\"统一返回结果类\"></a>统一返回结果类</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.jeecg.common.api.vo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.<span class=\"keyword\">annotation</span>.JsonIgnore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jeecg.common.constant.CommonConstant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jeecg.common.constant.enums.ErrorCodeEnum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 接口返回对象 -更新</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: luo_Jj</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2022/3/24 17:58</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModel(value=<span class=\"string\">&quot;接口返回对象&quot;</span>, description=<span class=\"string\">&quot;接口返回对象&quot;</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span>&lt;<span class=\"type\">T</span>&gt; <span class=\"title\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> long serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 成功标志</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@ApiModelProperty(value = <span class=\"string\">&quot;成功标志&quot;</span>)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> boolean success = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 返回处理消息</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@ApiModelProperty(value = <span class=\"string\">&quot;返回处理消息&quot;</span>)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String message = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 返回代码</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@ApiModelProperty(value = <span class=\"string\">&quot;返回代码&quot;</span>)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String code = <span class=\"string\">&quot;000000&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 返回数据对象 data</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@ApiModelProperty(value = <span class=\"string\">&quot;返回数据对象&quot;</span>)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> T result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 时间戳</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@ApiModelProperty(value = <span class=\"string\">&quot;时间戳&quot;</span>)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> long timestamp = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Result() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Result(String code,String message) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Result&lt;T&gt; success(String message) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.code = CommonConstant.SC_OK_200;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.success = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> static&lt;T&gt; Result&lt;T&gt; OK() &#123;</span><br><span class=\"line\">\t\tResult&lt;T&gt; r = new Result&lt;T&gt;();</span><br><span class=\"line\">\t\tr.setSuccess(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\tr.setCode(CommonConstant.SC_OK_200);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> static&lt;T&gt; Result&lt;T&gt; OK(T <span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">\t\tResult&lt;T&gt; r = new Result&lt;T&gt;();</span><br><span class=\"line\">\t\tr.setSuccess(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\tr.setCode(CommonConstant.SC_OK_200);</span><br><span class=\"line\">\t\tr.setResult(<span class=\"keyword\">data</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> static&lt;T&gt; Result&lt;T&gt; OK(String msg, T <span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">\t\tResult&lt;T&gt; r = new Result&lt;T&gt;();</span><br><span class=\"line\">\t\tr.setSuccess(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\tr.setCode(CommonConstant.SC_OK_200);</span><br><span class=\"line\">\t\tr.setMessage(msg);</span><br><span class=\"line\">\t\tr.setResult(<span class=\"keyword\">data</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> static&lt;T&gt; Result&lt;T&gt; error(String msg, T <span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">\t\tResult&lt;T&gt; r = new Result&lt;T&gt;();</span><br><span class=\"line\">\t\tr.setSuccess(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\tr.setCode(CommonConstant.SC_INTERNAL_SERVER_ERROR_500);</span><br><span class=\"line\">\t\tr.setMessage(msg);</span><br><span class=\"line\">\t\tr.setResult(<span class=\"keyword\">data</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> static&lt;T&gt; Result&lt;T&gt; error(String msg) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> error(CommonConstant.SC_INTERNAL_SERVER_ERROR_500, msg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@description</span>: 传递一个错误码枚举</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@author</span>: luo_jj</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@date</span>: 2022/3/28 14:55</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> errorCodeEnum:</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span>: org.jeecg.common.api.vo.Result&lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> static&lt;T&gt; Result&lt;T&gt; error(ErrorCodeEnum errorCodeEnum) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> error(errorCodeEnum.getCode(), errorCodeEnum.getMessage());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> static&lt;T&gt; Result&lt;T&gt; error(String code, String msg) &#123;</span><br><span class=\"line\">\t\tResult&lt;T&gt; r = new Result&lt;T&gt;();</span><br><span class=\"line\">\t\tr.setCode(code);</span><br><span class=\"line\">\t\tr.setMessage(msg);</span><br><span class=\"line\">\t\tr.setSuccess(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Result&lt;T&gt; error500(String message) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.code = CommonConstant.SC_INTERNAL_SERVER_ERROR_500;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.success = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误码枚举类\"><a href=\"#错误码枚举类\" class=\"headerlink\" title=\"错误码枚举类\"></a>错误码枚举类</h3><p>需要定义一个枚举类，包含所有的自定义的结果码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">package org.<span class=\"property\">jeecg</span>.<span class=\"property\">common</span>.<span class=\"property\">constant</span>.<span class=\"property\">enums</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.<span class=\"property\">AllArgsConstructor</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.<span class=\"property\">Getter</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.<span class=\"property\">NoArgsConstructor</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 错误码枚举</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: luo_jj</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2022年03月24日 17:15</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ResultCodeEnum</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 错误产生来源分为 A/B/C</span></span><br><span class=\"line\"><span class=\"comment\">    * A 表示错误来源于用户，比如参数错误，用户安装版本过低，用户支付超时等问题；</span></span><br><span class=\"line\"><span class=\"comment\">    * B 表示错误来源于当前系统，往往是业务逻辑出错，或程序健壮性差等问题；</span></span><br><span class=\"line\"><span class=\"comment\">    * C 表示错误来源于第三方服务，比如 CDN 服务出错，消息投递超时等问题；</span></span><br><span class=\"line\"><span class=\"comment\">    * 四位数字编号从 0001 到 9999，大类之间的步长间距预留 100</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * 错误码分为一级宏观错误码、二级宏观错误码、三级宏观错误码。</span></span><br><span class=\"line\"><span class=\"comment\">    * 调用第三方服务出错是一级，中间件错误是二级，消息服务出错是三级。</span></span><br><span class=\"line\"><span class=\"comment\">    * 说明：在无法更加具体确定的错误场景中，可以直接使用一级宏观错误码，分别是：A0001（用户端错误）、B0001（系统执行出错）、C0001（调用第三方服务出错）。</span></span><br><span class=\"line\"><span class=\"comment\">    * 错误码表：http://192.168.88.211:8090/pages/viewpage.action?pageId=5473234</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*一切ok*/</span></span><br><span class=\"line\">    <span class=\"title function_\">SUCCESS_ERROR</span>(<span class=\"string\">&quot;000000&quot;</span>,<span class=\"string\">&quot;成功&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*用户端错误码*/</span></span><br><span class=\"line\">    <span class=\"title function_\">CLIENT_ERROR</span>(<span class=\"string\">&quot;A0001&quot;</span>,<span class=\"string\">&quot;用户端错误&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*服务端错误码*/</span></span><br><span class=\"line\">    <span class=\"title function_\">SYSTEM_ERROR</span>(<span class=\"string\">&quot;B0001&quot;</span>,<span class=\"string\">&quot;系统执行出错&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*第三方服务错误码*/</span></span><br><span class=\"line\">    <span class=\"title function_\">TPA_ERROR</span>(<span class=\"string\">&quot;C0001&quot;</span>,<span class=\"string\">&quot;调用第三方服务出错&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 错误码 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title class_\">String</span> code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 错误描述 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title class_\">String</span> message;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义业务异常类\"><a href=\"#自定义业务异常类\" class=\"headerlink\" title=\"自定义业务异常类\"></a>自定义业务异常类</h3><p>自定义一个业务异常类，以后和业务有关的异常通通抛出这个异常类，只需将定义好的错误枚举传入即可。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.jeecg.common.exception;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.<span class=\"type\">Getter</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.<span class=\"type\">Setter</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jeecg.common.constant.enums.<span class=\"type\">ResultCodeEnum</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @description: 万序自定义异常</span></span><br><span class=\"line\"><span class=\"comment\">* @author: luo_Jj</span></span><br><span class=\"line\"><span class=\"comment\">* @date: 2022/3/24 18:15</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VanxSoftException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> long serialVersionUID = <span class=\"number\">1</span>L;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">ResultCodeEnum</span> resultCodeEnum;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic <span class=\"type\">VanxSoftException</span>(<span class=\"type\">ResultCodeEnum</span> resultCodeEnum)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(resultCodeEnum.getMessage());</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.resultCodeEnum = resultCodeEnum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全局异常处理类\"><a href=\"#全局异常处理类\" class=\"headerlink\" title=\"全局异常处理类\"></a>全局异常处理类</h3><p>定义一个全局异常处理类</p>\n<ol>\n<li>通过 <code>@RestControllerAdvice</code> 指定该类为 <code>Controller</code> 增强类并返回 <code>json</code> 到前端</li>\n<li>通过 <code>@ExceptionHandler</code> 自定义捕获的异常类型</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">package org.jeecg.common.<span class=\"keyword\">exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\">import org.apache.shiro.authz.AuthorizationException;</span><br><span class=\"line\">import org.apache.shiro.authz.UnauthorizedException;</span><br><span class=\"line\">import org.jeecg.common.api.vo.Result;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.dao.DataIntegrityViolationException;</span><br><span class=\"line\">import org.springframework.dao.DuplicateKeyException;</span><br><span class=\"line\">import org.springframework.data.redis.connection.PoolException;</span><br><span class=\"line\">import org.springframework.http.HttpStatus;</span><br><span class=\"line\">import org.springframework.web.HttpRequestMethodNotSupportedException;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class=\"line\">import org.springframework.web.multipart.MaxUploadSizeExceededException;</span><br><span class=\"line\">import org.springframework.web.servlet.NoHandlerFoundException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 异常处理器</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author scott</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date 2019</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">@RestControllerAdvice</span><br><span class=\"line\">@Slf4j</span><br><span class=\"line\">public <span class=\"keyword\">class</span> JeecgBootExceptionHandler &#123;</span><br><span class=\"line\">    @<span class=\"constructor\">Value(<span class=\"string\">&quot;$&#123;spring.servlet.multipart.max-file-size&#125;&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String maxFileSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理自定义异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(JeecgBootException.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">JeecgBootException(JeecgBootException <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>error(e.get<span class=\"constructor\">Message()</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理自定义异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(JeecgBoot401Exception.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    @<span class=\"constructor\">ResponseStatus(HttpStatus.UNAUTHORIZED)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">JeecgBoot401Exception(JeecgBoot401Exception <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"keyword\">new</span> <span class=\"constructor\">Result(<span class=\"string\">&quot;401&quot;</span>, <span class=\"params\">e</span>.<span class=\"params\">getMessage</span>()</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * @description: 处理自定义异常-万序系统异常</span></span><br><span class=\"line\"><span class=\"comment\">    * @author: luo_jj</span></span><br><span class=\"line\"><span class=\"comment\">    * @date: 2022/3/25 11:33</span></span><br><span class=\"line\"><span class=\"comment\">    * @param e:</span></span><br><span class=\"line\"><span class=\"comment\">    * @return: org.jeecg.common.api.vo.Result&lt;?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(VanxSoftException.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">VanxSoftException(VanxSoftException <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>error(e.get<span class=\"constructor\">ResultCodeEnum()</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(NoHandlerFoundException.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handler<span class=\"constructor\">NoFoundException(Exception <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>error(<span class=\"string\">&quot;404&quot;</span>, <span class=\"string\">&quot;路径不存在，请检查路径是否正确&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(DuplicateKeyException.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">DuplicateKeyException(DuplicateKeyException <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>error(<span class=\"string\">&quot;数据库中已存在该记录&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(&#123;UnauthorizedException.<span class=\"params\">class</span>, AuthorizationException.<span class=\"params\">class</span>&#125;)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">AuthorizationException(AuthorizationException <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>noauth(<span class=\"string\">&quot;没有权限，请联系管理员授权&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(Exception.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">Exception(Exception <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>error(<span class=\"string\">&quot;操作失败，&quot;</span> + e.get<span class=\"constructor\">Message()</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @param e</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     * @Author 政辉</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(HttpRequestMethodNotSupportedException.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">HttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> <span class=\"constructor\">StringBuffer()</span>;</span><br><span class=\"line\">        sb.append(<span class=\"string\">&quot;不支持&quot;</span>);</span><br><span class=\"line\">        sb.append(e.get<span class=\"constructor\">Method()</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">&quot;请求方法，&quot;</span>);</span><br><span class=\"line\">        sb.append(<span class=\"string\">&quot;支持以下&quot;</span>);</span><br><span class=\"line\">        String<span class=\"literal\">[]</span> methods = e.get<span class=\"constructor\">SupportedMethods()</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (methods != null) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String str : methods) &#123;</span><br><span class=\"line\">                sb.append(str);</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;、&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.error(sb.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>error(<span class=\"string\">&quot;405&quot;</span>, sb.<span class=\"keyword\">to</span><span class=\"constructor\">String()</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * spring默认上传大小100MB 超出大小捕获异常MaxUploadSizeExceededException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(MaxUploadSizeExceededException.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">MaxUploadSizeExceededException(MaxUploadSizeExceededException <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>error(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">String</span>.</span></span>format(<span class=\"string\">&quot;文件大小超出%s限制, 请压缩或降低文件质量! &quot;</span>, maxFileSize));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(DataIntegrityViolationException.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">DataIntegrityViolationException(DataIntegrityViolationException <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>error(<span class=\"string\">&quot;字段太长,超出数据库字段的长度&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"constructor\">ExceptionHandler(PoolException.<span class=\"params\">class</span>)</span></span><br><span class=\"line\">    public Result&lt;?&gt; handle<span class=\"constructor\">PoolException(PoolException <span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">        log.error(e.get<span class=\"constructor\">Message()</span>, e);</span><br><span class=\"line\">        return <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Result</span>.</span></span>error(<span class=\"string\">&quot;Redis 连接异常!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"编写-TestController-测试\"><a href=\"#编写-TestController-测试\" class=\"headerlink\" title=\"编写 TestController 测试\"></a>编写 TestController 测试</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.jeecg.modules.exception.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.Api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.ApiOperation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jeecg.common.api.vo.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jeecg.common.constant.enums.ResultCodeEnum;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jeecg.common.exception.VanxSoftException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.<span class=\"keyword\">annotation</span>.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.<span class=\"keyword\">annotation</span>.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.<span class=\"keyword\">annotation</span>.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 全局异常处理</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: luo_jj</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 2022年03月24日 17:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"string\">&quot;/exception&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@Api(tags=<span class=\"string\">&quot;全局异常处理&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(<span class=\"string\">&quot;测试请求&quot;</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = <span class=\"string\">&quot;/test&quot;</span>, method = RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result&lt;JSONObject&gt; testClientError()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> new VanxSoftException(ResultCodeEnum.SYSTEM_ERROR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220328151505.png\" alt=\"image-20220328151505665\"></p>\n","categories":["后端开发"],"tags":["技巧","笔记"]},{"title":"持续集成工具之 Jenkins","url":"/2022/04/03/1509bf9.html","content":"<h2 id=\"持续集成及-Jenkins-介绍\"><a href=\"#持续集成及-Jenkins-介绍\" class=\"headerlink\" title=\"持续集成及 Jenkins 介绍\"></a>持续集成及 Jenkins 介绍</h2><h3 id=\"软件开发生命周期\"><a href=\"#软件开发生命周期\" class=\"headerlink\" title=\"软件开发生命周期\"></a>软件开发生命周期</h3><p>软件开发生命周期又叫做<strong>SDLC</strong>（Software Development Life Cycle），它是集合了计划、开发、测试 和部署过程的集合。如下图所示 ：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309153101.png\" alt=\"image-20220309153101326\" style=\"zoom:67%;\" />\n\n<ul>\n<li>需求分析</li>\n</ul>\n<p>这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部 或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。 还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。</p>\n<ul>\n<li>设计</li>\n</ul>\n<p>第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目 计划。计划可以使用图表，布局设计或者文者的方式呈现。</p>\n<ul>\n<li>实现</li>\n</ul>\n<p>第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进 行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。</p>\n<ul>\n<li>测试</li>\n</ul>\n<p>测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等。</p>\n<ul>\n<li>进化</li>\n</ul>\n<p>最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修 改，bug 修复，功能增加等。</p>\n<h3 id=\"软件开发瀑布模型\"><a href=\"#软件开发瀑布模型\" class=\"headerlink\" title=\"软件开发瀑布模型\"></a>软件开发瀑布模型</h3><p>瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁 衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有 其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开发，但是已经不适合现在的开发了。</p>\n<p>下图对软件开发模型的一个阐述。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309154059.png\" alt=\"image-20220309154059145\"></p>\n<table>\n<thead>\n<tr>\n<th>优势</th>\n<th>劣势</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>简单易用和理解</td>\n<td>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。</td>\n</tr>\n<tr>\n<td>当前一阶段完成后，您只需要去关注后续阶段。</td>\n<td>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险。</td>\n</tr>\n<tr>\n<td>为项目提供了按阶段划分的检查节点</td>\n<td>瀑布模型的突出缺点是不适应用户需求的变化。</td>\n</tr>\n</tbody></table>\n<h3 id=\"软件的敏捷开发\"><a href=\"#软件的敏捷开发\" class=\"headerlink\" title=\"软件的敏捷开发\"></a>软件的敏捷开发</h3><h4 id=\"什么是敏捷开发？\"><a href=\"#什么是敏捷开发？\" class=\"headerlink\" title=\"什么是敏捷开发？\"></a>什么是敏捷开发？</h4><p>敏捷开发（Agile Development）的核心是迭代开发（Iterative Development）与 增量开发（Incremental Development）。</p>\n<ul>\n<li><strong>何为迭代开发</strong>？</li>\n</ul>\n<p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次“大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次“大开发”变成多次“小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p>\n<ul>\n<li><strong>何为增量开发</strong>？</li>\n</ul>\n<p>软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p>\n<h4 id=\"敏捷开发如何迭代？\"><a href=\"#敏捷开发如何迭代？\" class=\"headerlink\" title=\"敏捷开发如何迭代？\"></a>敏捷开发如何迭代？</h4><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309154857.png\" alt=\"image-20220309154857660\" style=\"zoom:67%;\" />\n\n<h4 id=\"敏捷开发有什么好处？\"><a href=\"#敏捷开发有什么好处？\" class=\"headerlink\" title=\"敏捷开发有什么好处？\"></a>敏捷开发有什么好处？</h4><ul>\n<li><strong>早期交付</strong></li>\n</ul>\n<p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。</p>\n<ul>\n<li><strong>降低风险</strong></li>\n</ul>\n<p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。</p>\n<h3 id=\"什么是持续集成？\"><a href=\"#什么是持续集成？\" class=\"headerlink\" title=\"什么是持续集成？\"></a>什么是持续集成？</h3><p>持续集成（Continuous integration，简称 CI）指的是，频繁地（一天多次）将代码集成到主干。</p>\n<p><strong>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。</strong>它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p>\n<p>通过持续集成，团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。</p>\n<p><strong>持续集成的流程</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309155459.png\" alt=\"image-20220309155459830\" style=\"zoom: 80%;\" />\n\n<p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p>\n<ul>\n<li>提交</li>\n</ul>\n<p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p>\n<ul>\n<li>测试（第一轮）</li>\n</ul>\n<p>代码仓库对 commit 操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p>\n<ul>\n<li>构建</li>\n</ul>\n<p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p>\n<p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS 脚本、图片）等等。</p>\n<ul>\n<li>测试（第二轮）</li>\n</ul>\n<p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p>\n<ul>\n<li>部署</li>\n</ul>\n<p>过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（ tar filename.tar * ）存档，发到生产服务器。</p>\n<ul>\n<li>回滚</li>\n</ul>\n<p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指 向上一个版本的目录。</p>\n<h3 id=\"持续集成的组成要素\"><a href=\"#持续集成的组成要素\" class=\"headerlink\" title=\"持续集成的组成要素\"></a>持续集成的组成要素</h3><ul>\n<li>一个自动构建过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预。</li>\n<li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用 SVN 或 Git。</li>\n<li>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309165502.png\" alt=\"image-20220309165502124\"></p>\n<h3 id=\"持续集成的好处\"><a href=\"#持续集成的好处\" class=\"headerlink\" title=\"持续集成的好处\"></a>持续集成的好处</h3><ol>\n<li>降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；</li>\n<li>对系统健康持续检查，减少发布风险带来的问题；</li>\n<li>减少重复性工作；</li>\n<li>持续部署，提供可部署单元包；</li>\n<li>持续交付可供使用的版本；</li>\n<li>增强团队信心；</li>\n</ol>\n<h3 id=\"Jenkins-介绍\"><a href=\"#Jenkins-介绍\" class=\"headerlink\" title=\"Jenkins 介绍\"></a>Jenkins 介绍</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309165729.png\" alt=\"image-20220309165729929\" style=\"zoom:67%;\" />\n\n<p>Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动 化构建、测试和部署等功能。官网：<a href=\"https://www.jenkins.io/\">Jenkins</a>。</p>\n<p><strong>Jenkins 的特征：</strong></p>\n<ul>\n<li>开源的 Java 语言开发持续集成工具，支持持续集成，持续部署。</li>\n<li>易于安装部署配置：可通过 yum 安装,或下载 war 包以及通过 docker 容器等快速实现安装部署，可方便 web 界面配置管理。</li>\n<li>消息通知及测试报告：集成 RSS/E-mail 通过 RSS 发布构建结果或当构建完成时通过 e-mail 通知，生成 JUnit/TestNG 测试报告。</li>\n<li>分布式构建：支持 Jenkins 能够让多台计算机一起构建/测试。</li>\n<li>文件识别：Jenkins 能够跟踪哪次构建生成哪些 jar，哪次构建使用哪个版本的 jar 等。</li>\n<li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如 git，svn，maven，docker 等。</li>\n</ul>\n<h2 id=\"Jenkins-安装与配置\"><a href=\"#Jenkins-安装与配置\" class=\"headerlink\" title=\"Jenkins 安装与配置\"></a>Jenkins 安装与配置</h2><h3 id=\"安装-Jenkins\"><a href=\"#安装-Jenkins\" class=\"headerlink\" title=\"安装 Jenkins\"></a>安装 Jenkins</h3><blockquote>\n<p><a href=\"https://www.jenkins.io/zh/doc/book/installing/\">Jenkins 官方安装文档</a></p>\n</blockquote>\n<p><strong>Docker 安装 Jenkins（推荐）</strong></p>\n<ul>\n<li><p>Docker 安装与配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、卸载旧的版本</span></span><br><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、需要的安装包</span></span><br><span class=\"line\">yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、设置镜像的仓库</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo <span class=\"comment\"># 默认是国外的，十分慢！</span></span><br><span class=\"line\"><span class=\"comment\"># 建议使用阿里云的镜像地址</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新yum软件包索引</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、安装docker相关的 docker-ce 社区版 ee 企业版</span></span><br><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5、启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6、使用docker version查看是否安装成功</span></span><br></pre></td></tr></table></figure></li>\n<li><p>使用 Docker 安装 Jenkins</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用命令直接安装</span></span><br><span class=\"line\">docker run -d --name jenkins --restart always \\</span><br><span class=\"line\">--user root -p <span class=\"number\">8180</span>:<span class=\"number\">8080</span> -p <span class=\"number\">51000</span>:<span class=\"number\">50000</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>jenkins_home:<span class=\"regexp\">/var/</span>jenkins_home \\</span><br><span class=\"line\">-v <span class=\"regexp\">/opt/m</span>aven<span class=\"regexp\">/apache-maven-3.6.3:/</span>opt<span class=\"regexp\">/maven/</span>apache-maven-<span class=\"number\">3.6</span>.<span class=\"number\">3</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251 \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>run<span class=\"regexp\">/docker.sock:/</span>var<span class=\"regexp\">/run/</span>docker.sock \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>War 安装 Jenkins</strong></p>\n<ul>\n<li>获取 Jenkins 安装包</li>\n</ul>\n<p>下载页面：<a href=\"https://jenkins.io/zh/download/\">https://jenkins.io/zh/download/</a></p>\n<p>安装文件：jenkins.war</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、将最新的稳定Jenkins WAR包 下载到您计算机上的相应目录。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、在下载的目录内打开一个终端/命令提示符窗口到。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、运行命令java -jar jenkins.war</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、浏览http:<span class=\"comment\">//localhost:8080并等到*Unlock Jenkins*页面出现。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、继续使用Post-installation setup wizard后面步骤设置向导。</span><br></pre></td></tr></table></figure>\n\n<p><strong>解锁 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174609.png\" alt=\"image-20220309174609417\"></p>\n<p>获取并输入 admin 账户密码（我这里是 docker 安装的，目录是映射到指定位置的，密码实际存放路径以提示为主）</p>\n<p><code>cat /var/jenkins_home/secrets/initialAdminPassword</code></p>\n<p><strong>跳过插件安装</strong></p>\n<p>因为 Jenkins 插件需要连接默认官网下载，速度非常慢，而且容易安装失败，所以我们暂时先跳过插件安装。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174531.png\" alt=\"image-20220309174531892\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174831.png\" alt=\"image-20220309174831016\"></p>\n<p><strong>添加一个管理员账户，并进入 Jenkins 后台</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174954.png\" alt=\"image-20220309174953956\"></p>\n<p><strong>保存并完成</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175748.png\" alt=\"image-20220309175748708\"></p>\n<p><strong>开始使用 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175816.png\" alt=\"image-20220309175816074\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175908.png\" alt=\"image-20220309175908276\"></p>\n<h3 id=\"Jenkins-插件管理\"><a href=\"#Jenkins-插件管理\" class=\"headerlink\" title=\"Jenkins 插件管理\"></a>Jenkins 插件管理</h3><p>Jenkins 本身不提供很多功能，我们可以通过使用插件来满足我们的使用。例如从 Gitlab 拉取代码，使用 Maven 构建项目等功能需要依靠插件完成。接下来演示如何下载插件。</p>\n<p><strong>修改 Jenkins 插件下载地址</strong></p>\n<p>Jenkins 国外官方插件地址下载速度非常慢，所以可以修改为国内插件地址：</p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180153.png\" alt=\"image-20220309180153473\"></p>\n<p>这样做是为了把 Jenkins 官方的插件列表下载到本地，接着修改地址文件，替换为国内插件地址：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入配置目录 （目录视情况而定，安装的jenkins_home下）</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/var/jenkins_home/updates</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">sed -i &#x27;s/http:\\/\\<span class=\"string\">/updates.jenkins</span>\u0002ci.org\\<span class=\"string\">/download/https</span>:\\/\\<span class=\"string\">/mirrors.tuna.tsinghua.edu.cn</span>\\<span class=\"string\">/jenkins/g</span>&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\\/\\<span class=\"string\">/www.google.com/https</span>:\\/\\<span class=\"string\">/www.baidu.com/g</span>&#x27; default.json</span><br></pre></td></tr></table></figure>\n\n<p>最后，Manage Plugins 点击 Advanced，把 Update Site 改为国内插件下载地址</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180807.png\" alt=\"image-20220309180807037\"></p>\n<p>Sumbit 后，在浏览器输入： <a href=\"http://120.78.204.65:8180/restart\">http://120.78.204.65:8180/restart</a> ，重启 Jenkins。</p>\n<p><strong>下载中文汉化插件</strong></p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available，搜索&quot;Chinese&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181055.png\" alt=\"image-20220309181055822\"></p>\n<p>完成后如下图所示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181122.png\" alt=\"image-20220309181122066\"></p>\n<p>重启 Jenkins 之后，就看到 Jenkins 汉化了！（PS：某些菜单可能会汉化失败）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181408.png\" alt=\"image-20220309181408200\"></p>\n<h3 id=\"Jenkins-用户权限管理\"><a href=\"#Jenkins-用户权限管理\" class=\"headerlink\" title=\"Jenkins 用户权限管理\"></a>Jenkins 用户权限管理</h3><p>我们可以利用<code>Role-based Authorization Strategy</code>插件来管理 Jenkins 用户权限</p>\n<p><strong>安装 Role-based Authorization Strategy 插件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181600.png\" alt=\"image-20220309181600238\"></p>\n<p><strong>开启权限全局安全配置</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181914.png\" alt=\"image-20220309181914873\"></p>\n<p>授权策略切换为”Role-Based Strategy”，保存</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181940.png\" alt=\"image-20220309181940124\"></p>\n<p><strong>创建角色</strong></p>\n<p>在系统管理页面进入 Manage and Assign Roles</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182209.png\" alt=\"image-20220309182209559\"></p>\n<p>点击”Manage Roles”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182301.png\" alt=\"image-20220309182301430\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182435.png\" alt=\"image-20220309182435102\"></p>\n<p><code>Global roles（全局角色）</code>：管理员等高级用户可以创建基于全局的角色</p>\n<p><code>Item roles（项目角色）</code>： 针对某个或者某些项目的角色</p>\n<p><code>Node roles（节点角色）</code>：节点相关的权限</p>\n<p>我们添加以下三个角色：</p>\n<ul>\n<li>baseRole：该角色为全局角色。这个角色需要绑定 Overall 下面的 Read 权限，是为了给所有用户绑定最基本的 Jenkins 访问权限。注意：如果不给后续用户绑定这个角色，会报错误：<code>用户名 is missing the Overall/Read permission</code></li>\n<li>role1：该角色为项目角色。使用正则表达式绑定”vx-chx.*“，意思是只能操作 vx-chx 开头的项目。</li>\n<li>role2：该角色为项目角色。使用正则表达式绑定”vx-phm.*“，意思是只能操作 vx-phm 开头的项目。</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182812.png\" alt=\"image-20220309182812353\"></p>\n<p>保存</p>\n<p><strong>创建用户</strong></p>\n<p>在系统管理页面进入 Manage Users</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182917.png\" alt=\"image-20220309182917026\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183107.png\" alt=\"image-20220309183107565\"></p>\n<p>分别创建两个用户：vxchx 和 vxphm</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183223.png\" alt=\"image-20220309183223041\"></p>\n<p><strong>给用户分配角色</strong></p>\n<p>系统管理页面进入 Manage and Assign Roles，点击 Assign Roles</p>\n<p>绑定规则如下：</p>\n<ul>\n<li><p>vxchx 用户分别绑定 baseRole 和 role1 角色</p>\n</li>\n<li><p>vxphm 用户分别绑定 baseRole 和 role2 角色</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183455.png\" alt=\"image-20220309183455591\"></p>\n</li>\n</ul>\n<p>保存</p>\n<p><strong>创建项目测试权限</strong></p>\n<p>以 admin 管理员账户创建两个项目，分别为 vx-chx-test 和 vx-phm-test</p>\n<p>结果为： vxchx 用户登录，只能看到 vx-chx-test 项目 vxphm 用户登录，只能看到 vx-phm-test 项目</p>\n<h3 id=\"Jenkins-凭证管理\"><a href=\"#Jenkins-凭证管理\" class=\"headerlink\" title=\"Jenkins 凭证管理\"></a>Jenkins 凭证管理</h3><p>凭据可以用来存储需要密文保护的数据库密码、Gitlab 密码信息、Docker 私有仓库密码等，以便 Jenkins 可以和这些第三方的应用进行交互。</p>\n<p><strong>安装 Credentials Binding 插件</strong></p>\n<p>要在 Jenkins 使用凭证管理功能，需要安装<code>Credentials Binding</code>插件</p>\n<blockquote>\n<p>注：新版本已经默认安装了此插件，这里无需另外再安装了</p>\n</blockquote>\n<p>系统管理中选择 <code>Manage Credentials</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184117.png\" alt=\"image-20220309184117479\"></p>\n<p>可以添加的凭证有 5 种：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184218.png\" alt=\"image-20220309184218399\"></p>\n<ul>\n<li>Username with password：用户名和密码</li>\n<li>SSH Username with private key： 使用 SSH 用户和密钥</li>\n<li>Secret file：需要保密的文本文件，使用时 Jenkins 会将文件复制到一个临时目录中，再将文件路径 设置到一个变量中，等构建结束后，所复制的 Secret file 就会被删除。</li>\n<li>GitHub App：GitHub 的 API 令牌</li>\n<li>Secret text：需要保存的一个加密的文本串，如钉钉机器人或 Github 的 api token</li>\n<li>Certificate：通过上传证书文件的方式</li>\n</ul>\n<p>常用的凭证类型有：<strong>Username with password（用户密码）</strong>和 <strong>SSH Username with private key（SSH 密钥）</strong></p>\n<p>接下来以使用 Git 工具到 Gitlab 拉取项目源码为例，演示 Jenkins 的如何管理 Gitlab 的凭证。</p>\n<p><strong>安装 Git 插件和 Git 工具</strong></p>\n<p>为了让 Jenkins 支持从 Gitlab 拉取源码，需要安装 Git 插件以及在服务器上安装 Git 工具。</p>\n<p>Git 插件安装：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310094719.png\" alt=\"image-20220310094712046\"></p>\n<p>服务器上安装 Git 工具（以 CentOS7 为例）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install git -y</span><br><span class=\"line\"><span class=\"comment\"># 安装后查看版本</span></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>用户密码类型</strong></p>\n<p>1）创建凭据</p>\n<p><code>Jenkins -&gt; 凭证 -&gt; 系统 -&gt; 全局凭据 -&gt; 添加凭据</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310095750.png\" alt=\"image-20220310095750604\"></p>\n<p>选择”Username with password”，输入 Gitlab 的用户名和密码，点击”确定”。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100359.png\" alt=\"image-20220310100359012\"></p>\n<p><strong>SSH 密钥类型</strong></p>\n<p>SSH 免密登录示意图</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100539.png\" alt=\"image-20220310100539140\"></p>\n<p>1）使用 root 用户生成公钥和私钥</p>\n<p><code>ssh-keygen -t rsa</code></p>\n<p>在/root/.ssh/目录保存了公钥和使用</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101013.png\" alt=\"image-20220310101013313\" style=\"zoom:67%;\" />\n\n<p>id_rsa：私钥文件</p>\n<p>id_rsa.pub：公钥文件</p>\n<p>2）把生成的公钥放在 Gitlab 中</p>\n<p><code>登录gitlab -&gt; 点击头像 -&gt; Settings -&gt; SSH Keys</code></p>\n<p>复制刚才 id_rsa.pub 文件的内容到这里，点击”Add Key”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101538.png\" alt=\"image-20220310101538008\"></p>\n<p>3）在 Jenkins 中添加凭证，配置私钥</p>\n<p>在 Jenkins 添加一个新的凭证，类型为”SSH Username with private key”，把刚才生成私有文件内容复制过来</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102203.png\" alt=\"image-20220310102203814\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102427.png\" alt=\"image-20220310102427213\"></p>\n<h3 id=\"Jenkins-关联-JDK-和-Maven\"><a href=\"#Jenkins-关联-JDK-和-Maven\" class=\"headerlink\" title=\"Jenkins 关联 JDK 和 Maven\"></a>Jenkins 关联 JDK 和 Maven</h3><p><strong>关联 JDK</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; JDK -&gt; 新增JDK，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102744.png\" alt=\"image-20220310102744563\"></p>\n<p><strong>关联 Maven</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; Maven -&gt; 新增Maven，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102836.png\" alt=\"image-20220310102835922\"></p>\n<h3 id=\"添加-Jenkins-全局变量\"><a href=\"#添加-Jenkins-全局变量\" class=\"headerlink\" title=\"添加 Jenkins 全局变量\"></a><strong>添加 Jenkins 全局变量</strong></h3><p><code>Jenkins -&gt; 系统管理 -&gt; 全局属性 -&gt; 添加三个环境变量，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310103242.png\" alt=\"image-20220310103241974\"></p>\n<h3 id=\"Jenkins-关闭跨站请求伪造保护\"><a href=\"#Jenkins-关闭跨站请求伪造保护\" class=\"headerlink\" title=\"Jenkins 关闭跨站请求伪造保护\"></a>Jenkins 关闭跨站请求伪造保护</h3><ul>\n<li>Docker 容器运行</li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、进入运行的容器</span></span><br><span class=\"line\">docker exec -u root -<span class=\"keyword\">it</span> 你的Jenkins容器名称或者容器<span class=\"built_in\">id</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、输入命令，编辑jenkins启动配置文件</span></span><br><span class=\"line\">vi /usr/<span class=\"keyword\">local</span>/bin/jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、在图中标记处，加入以下配置</span></span><br><span class=\"line\">-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、重启容器</span></span><br><span class=\"line\">docker restart jenkins</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220312001027.png\" alt=\"image-20220312001020531\"></p>\n<h2 id=\"Jenkins-构建-Maven-项目\"><a href=\"#Jenkins-构建-Maven-项目\" class=\"headerlink\" title=\"Jenkins 构建 Maven 项目\"></a>Jenkins 构建 Maven 项目</h2><blockquote>\n<p>构建方式均采用 Jar 包方式，War 方式参考<a href=\"http://doc.jeecg.com/2043887\">WAR 部署方案 · JeecgBoot 开发文档</a></p>\n</blockquote>\n<h3 id=\"Jenkins-项目构建类型\"><a href=\"#Jenkins-项目构建类型\" class=\"headerlink\" title=\"Jenkins 项目构建类型\"></a>Jenkins 项目构建类型</h3><p>Jenkins 中自动构建项目的类型有很多，常用的有以下三种：</p>\n<ul>\n<li>自由风格软件项目（FreeStyle Project）</li>\n<li>Maven 项目（Maven Project）</li>\n<li>流水线项目（Pipeline Project）</li>\n</ul>\n<p>每种类型的构建其实都可以完成一样的构建过程与结果，只是在操作方式、灵活度等方面有所区别，在实际开发中可以根据自己的需求和习惯来选择。（PS：个人推荐使用流水线类型，因为灵活度非常高）</p>\n<h3 id=\"自由风格项目构建\"><a href=\"#自由风格项目构建\" class=\"headerlink\" title=\"自由风格项目构建\"></a>自由风格项目构建</h3><p>下面演示创建一个自由风格项目来完成项目的集成过程：</p>\n<p><code>拉取代码 -&gt; 编译 -&gt; 打包 -&gt; 部署</code></p>\n<p><strong>拉取代码</strong></p>\n<p>1）创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112707.png\" alt=\"image-20220310112707895\"></p>\n<p>2）源码管理，从 Gitlab 拉取代码</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112815.png\" alt=\"image-20220310112815147\"></p>\n<p><strong>编译打包</strong></p>\n<p><code>构建 -&gt; 添加构建步骤 -&gt; 执行shell</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;开始编译和打包&quot;</span></span><br><span class=\"line\">mvn clean package</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;编译和打包结束&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112952.png\" alt=\"image-20220310112952936\"></p>\n<p><strong>部署</strong></p>\n<p>把项目部署到远程的服务器上，并启动</p>\n<p>1）安装<code>Publish Over SSH</code>插件</p>\n<p>Jenkins 本身无法实现远程部署到服务器上的功能，需要安装<code>Publish Over SSH</code>插件实现</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310113332.png\" alt=\"image-20220310113332137\"></p>\n<p>2）配置<code>Publish over SSH</code>，添加 SSH 服务器</p>\n<p><code>打开系统管理 -&gt; 系统配置 -&gt; 拉到底部，选择Publish over SSH区域选择新增</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114012.png\" alt=\"image-20220310114012322\"></p>\n<p><code>点击高级 -&gt; 填写服务器密码</code>（也可选择 ssh 验证，在 Jenkins 中配置本机私钥，将公钥发送到目标机器，即可完成无密码登录）</p>\n<p><code>发送命令：ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.xxx.xxx</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114702.png\" alt=\"image-20220310114702171\"></p>\n<ul>\n<li>Passphrase： 密码（目标机器的密码）</li>\n<li>Path to key：key 文件（私钥）的路径</li>\n<li>SSH Server Name： 标识的名字（随便你取什么）</li>\n<li>Hostname： 需要连接 ssh 的主机名或 ip 地址，此处填写应用服务器 IP（建议 ip）</li>\n<li>Username： 用户名</li>\n<li>Remote Directory： 远程目录(要发布的目录,比如/usr/local/tomcat/webapps/)</li>\n</ul>\n<p>3）添加构建步骤</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115055.png\" alt=\"image-20220310115055853\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115245.png\" alt=\"image-20220310115245384\"></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 脚本参考</span></span><br><span class=\"line\"><span class=\"attribute\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">cd</span> /apps</span><br><span class=\"line\"><span class=\"attribute\">ps</span> -ef|grep jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar|grep -v grep|awk &#x27;&#123;print $<span class=\"number\">2</span>&#125;&#x27;|xargs kill -s <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">BUILD_ID</span>=dontKillMe</span><br><span class=\"line\"><span class=\"attribute\">nohup</span> java -jar jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar &gt; jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.log <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure>\n\n<p>4）点击”立即构建”，开始构建过程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115628.png\" alt=\"image-20220310115628609\"></p>\n<p>5）构建成功，并自动化部署，访问测试！</p>\n<h3 id=\"Maven-项目构建\"><a href=\"#Maven-项目构建\" class=\"headerlink\" title=\"Maven 项目构建\"></a>Maven 项目构建</h3><p>1）安装 Maven Integration Plugin（高版本的 Jenkins 已预装了此插件）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135008.png\" alt=\"image-20220310135008339\"></p>\n<p>2）创建 Maven 项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135103.png\" alt=\"image-20220310135103444\"></p>\n<p>3）配置项目</p>\n<p>拉取代码和远程部署的过程和自由风格项目一样，只是”构建”部分不同</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135300.png\" alt=\"image-20220310135300799\"></p>\n<h3 id=\"Pipeline-流水线项目构建\"><a href=\"#Pipeline-流水线项目构建\" class=\"headerlink\" title=\"Pipeline 流水线项目构建(*)\"></a>Pipeline 流水线项目构建(*)</h3><h4 id=\"Pipeline-简介\"><a href=\"#Pipeline-简介\" class=\"headerlink\" title=\"Pipeline 简介\"></a>Pipeline 简介</h4><p><strong>1）概念</strong></p>\n<p>Pipeline，简单来说，就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p>\n<p><strong>2）使用 Pipeline 有以下好处（来自翻译自官方文档）：</strong></p>\n<p>代码：Pipeline 以代码的形式实现，通常被检入源代码控制，使团队能够编辑，审查和迭代其传送流 程。持久：无论是计划内的还是计划外的服务器重启。Pipeline 都是可恢复的。可停止：Pipeline 可接 收交互式输入，以确定是否继续执行 Pipeline。多功能：Pipeline 支持现实世界中复杂的持续交付要求。它支持 fork/join、循环执行，并行执行任务的功能。可扩展：Pipeline 插件支持其 DSL 的自定义扩展，以及与其他插件集成的多个选项。</p>\n<p><strong>3）如何创建 Jenkins Pipeline 呢？</strong></p>\n<ul>\n<li>Pipeline 脚本是由<strong>Groovy</strong>语言实现的，但是我们没必要单独去学习 Groovy</li>\n<li>Pipeline 支持两种语法：<strong>Declarative</strong>(声明式)和<strong>Scripted Pipeline</strong>(脚本式)语法</li>\n<li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中（一般我们都推荐在 Jenkins 中直接从源代码控制(SCM)中直接载入 Jenkinsfile Pipeline 这种方法）。</li>\n</ul>\n<h4 id=\"Pipeline-语法快速入门\"><a href=\"#Pipeline-语法快速入门\" class=\"headerlink\" title=\"Pipeline 语法快速入门\"></a>Pipeline 语法快速入门</h4><p><strong>1）Declarative 声明式-Pipeline</strong></p>\n<p>创建一个流水线项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154144.png\" alt=\"image-20220310154144897\"></p>\n<p><code>流水线 -&gt; 选择HelloWorld模板</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154618.png\" alt=\"image-20220310154618000\"></p>\n<p>生成的内容如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Hello&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>stages：</strong>代表整个流水线的所有执行阶段。通常 stages 只有 1 个，里面包含多个 stage</p>\n</li>\n<li><p><strong>stage：</strong>代表流水线中的某个阶段，可能出现 n 个。一般分为拉取代码，编译构建，部署等阶段。</p>\n</li>\n<li><p><strong>steps：</strong>代表一个阶段内需要执行的逻辑。steps 里面是 shell 脚本，git 拉取代码，ssh 远程发布等任意内容。</p>\n</li>\n</ul>\n<p>编写一个简单声明式的 Pipeline：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;编译构建&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;项目部署&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击构建，进入<code>Blue Ocean</code>可以看到整个构建过程</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155756.png\" alt=\"image-20220310155756052\" style=\"zoom: 150%;\" />\n\n<p><strong>2）Scripted Pipeline 脚本式-Pipeline</strong></p>\n<p>创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155938.png\" alt=\"image-20220310155938728\"></p>\n<p>选择 <code>Scripted Pipeline&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310160044.png\" alt=\"image-20220310160044398\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> mvnHome</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Preparation&#x27;</span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Results&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Node：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，后续讲到 Jenkins 的 Master-Slave 架构的时候用到。</li>\n<li>Stage：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如： Build、Test、Deploy，Stage 是一个逻辑分组的概念。</li>\n<li>Step：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像， 由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令 一样。</li>\n</ul>\n<p>编写一个简单的脚本式 Pipeline</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    def mvnHome</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;拉取代码&#x27;</span></span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;编译构建&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;项目部署&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构建结果和声明式一样！</p>\n<p><strong>Pipeline Script from SCM</strong></p>\n<p>刚才我们都是直接在 Jenkins 的 UI 界面编写 Pipeline 代码，这样不方便脚本维护，建议把 Pipeline 脚本放在项目中（一起进行版本控制）</p>\n<p><strong>1）在项目根目录建立 Jenkinsfile 文件，把内容复制到该文件中</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310163924.png\" alt=\"image-20220310163924603\" style=\"zoom:67%;\" />\n\n<p>把 Jenkinsfile 上传到 Gitlab</p>\n<p><strong>2）在项目中引用该文件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164207.png\" alt=\"image-20220310164207097\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164225.png\" alt=\"image-20220310164225747\"></p>\n<h3 id=\"Jenkinsfile\"><a href=\"#Jenkinsfile\" class=\"headerlink\" title=\"Jenkinsfile\"></a>Jenkinsfile</h3><h4 id=\"Jenkinsfile-环境变量\"><a href=\"#Jenkinsfile-环境变量\" class=\"headerlink\" title=\"Jenkinsfile 环境变量\"></a>Jenkinsfile 环境变量</h4><table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BRANCH_NAME</td>\n<td>在 multibranch 项目中，BRANCH_NAME 用于标明构建分支的名称。</td>\n</tr>\n<tr>\n<td>CHANGE_ID</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更 ID，比如 Pull Request</td>\n</tr>\n<tr>\n<td>CHANGE_URL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的 URL</td>\n</tr>\n<tr>\n<td>CHANGE_TITLE</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的标题</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_DISPLAY_NAME</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的显示名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_EMAIL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的邮件地址</td>\n</tr>\n<tr>\n<td>CHANGE_TARGET</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于合并后的分支信息等</td>\n</tr>\n<tr>\n<td>BUILD_NUMBER</td>\n<td>当前的构建编号</td>\n</tr>\n<tr>\n<td>BUILD_ID</td>\n<td>在 1.597 版本后引进，表示当前构建 ID</td>\n</tr>\n<tr>\n<td>BUILD_DISPLAY_NAME</td>\n<td>当前构建的显示信息</td>\n</tr>\n<tr>\n<td>JOB_NAME</td>\n<td>构建 Job 的全称，包含项目信息</td>\n</tr>\n<tr>\n<td>JOB_BASE_NAME</td>\n<td>除去项目信息的 Job 名称</td>\n</tr>\n<tr>\n<td>BUILD_TAG</td>\n<td>构建标签</td>\n</tr>\n<tr>\n<td>EXECUTOR_NUMBER</td>\n<td>执行器编号，用于标识构建器的不同编号</td>\n</tr>\n<tr>\n<td>NODE_NAME</td>\n<td>构建节点的名称</td>\n</tr>\n<tr>\n<td>NODE_LABELS</td>\n<td>节点标签</td>\n</tr>\n<tr>\n<td>WORKSPACE</td>\n<td>构建时使用的工作空间的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_HOME</td>\n<td>JENKINS 根目录的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_URL</td>\n<td>Jenkins 的 URL 信息</td>\n</tr>\n<tr>\n<td>BUILD_URL</td>\n<td>构建的 URL 信息</td>\n</tr>\n<tr>\n<td>JOB_URL</td>\n<td>构建 Job 的 URL 信息</td>\n</tr>\n<tr>\n<td>GIT_COMMIT</td>\n<td>git 提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_COMMIT</td>\n<td>当前分支上次提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_SUCCESSFUL_COMMIT</td>\n<td>当前分支上次成功构建时提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_BRANCH</td>\n<td>远程分支名称</td>\n</tr>\n<tr>\n<td>GIT_LOCAL_BRANCH</td>\n<td>本地分支名称</td>\n</tr>\n<tr>\n<td>GIT_URL</td>\n<td>远程 URL 地址</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_NAME</td>\n<td>Git 提交者的名称</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_NAME</td>\n<td>Git Author 的名称</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_EMAIL</td>\n<td>Git 提交者的 email 地址</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_EMAIL</td>\n<td>Git Author 的 email 地址</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION</td>\n<td>Mercurial 的版本 ID 信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_SHORT</td>\n<td>Mercurial 的版本 ID 缩写</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_NUMBER</td>\n<td>Mercurial 的版本号信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_BRANCH</td>\n<td>分支版本信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REPOSITORY_URL</td>\n<td>仓库 URL 信息</td>\n</tr>\n<tr>\n<td>SVN_REVISION</td>\n<td>Subversion 的当前版本信息</td>\n</tr>\n<tr>\n<td>SVN_URL</td>\n<td>当前工作空间中被 checkout 的 Subversion 工程的 URL 地址信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的构建触发器\"><a href=\"#常用的构建触发器\" class=\"headerlink\" title=\"常用的构建触发器\"></a>常用的构建触发器</h3><p>Jenkins 内置 4 种构建触发器：</p>\n<ul>\n<li>触发远程构建</li>\n<li>其他工程构建后触发（Build after other projects are build）</li>\n<li>定时构建（Build periodically）</li>\n<li>轮询 SCM（Poll SCM）</li>\n<li>GitHub 钩子触发的 GIT SCM 轮询（GitHub hook trigger for GITScm polling）</li>\n</ul>\n<p><strong>触发远程构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164928.png\" alt=\"image-20220310164928630\"></p>\n<p>触发构建 url：<a href=\"http://192.168.88.86:8180/job/vx-phm/build?token=abcabc\">http://192.168.88.86:8180/job/vx-phm/build?token=abcabc</a></p>\n<p><strong>其他工程构建后触发</strong></p>\n<p>1）创建 pre_job 流水线工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170455.png\" alt=\"image-20220310170454942\"></p>\n<p>2）配置需要触发的工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170935.png\" alt=\"image-20220310170935519\"></p>\n<p><strong>定时构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171234.png\" alt=\"image-20220310171234011\"></p>\n<p>定时字符串从左往右分别为： 分 时 日 月 周</p>\n<p>一些定时表达式的例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">每30分钟构建一次：H代表形参 H/30 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span> 10:02 10:32</span><br><span class=\"line\"></span><br><span class=\"line\">每2个小时构建一次: H H/2 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天的8点，12点，22点，一天构建3次： (多个时间点中间用逗号隔开) 0 8,12,22 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每天中午12点定时构建一次 H 12 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天下午18点定时构建一次 H 18 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">在每个小时的前半个小时内的每10分钟 H(0-29)/10 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每两小时一次，每个工作日上午9点到下午5点(也许是上午10:38，下午12:38，下午2:38，下午</span><br><span class=\"line\">4:38) H H(9-16)/2 <span class=\"emphasis\">* *</span> 1-5</span><br></pre></td></tr></table></figure>\n\n<p><strong>轮询 SCM</strong></p>\n<p>轮询 SCM，是指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171348.png\" alt=\"image-20220310171348558\"></p>\n<p>注意：此构建触发器，Jenkins 会定时扫描本地整个项目的代码，增大系统的开销，不建议使用。</p>\n<h3 id=\"Git-Hook-自动触发构建\"><a href=\"#Git-Hook-自动触发构建\" class=\"headerlink\" title=\"Git Hook 自动触发构建(*)\"></a>Git Hook 自动触发构建(*)</h3><p>刚才我们看到在 Jenkins 的内置构建触发器中，轮询 SCM 可以实现 Gitlab 代码更新，项目自动构建，但是该方案的性能不佳。那有没有更好的方案呢？有的。就是利用 Gitlab 的 webhook 实现代码 push 到仓库，立即触发项目自动构建。</p>\n<p><strong>安装 Gitlab Hook 插件</strong></p>\n<p>需要安装两个插件：</p>\n<p>Gitlab Hook 和 Gitlab</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172047.png\" alt=\"image-20220310172047813\"></p>\n<p><strong>Jenkins 设置自动构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172445.png\" alt=\"image-20220310172445870\"></p>\n<p>等会需要把生成的 webhook URL 配置到 Gitlab 中。</p>\n<p><strong>Gitlab 配置 webhook</strong></p>\n<p>1）开启 webhook 功能</p>\n<p><code>使用root账户登录到后台，点击Admin Area -&gt; Settings -&gt; Network</code></p>\n<p><code>勾选&quot;Allow requests to the local network from web hooks and services&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172805.png\" alt=\"image-20220310172805087\"></p>\n<p>2）在项目中添加 webhook</p>\n<p><code>点击项目 -&gt; Settings -&gt; Webhooks</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173325.png\" alt=\"image-20220310173325550\"></p>\n<p>注意：以下设置必须完成，否则会报错！</p>\n<p><code>系统管理 -&gt; 系统配置</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173704.png\" alt=\"image-20220310173704682\"></p>\n","categories":["DevOps"],"tags":["笔记","持续集成"]},{"title":"分库分表理论知识","url":"/2022/02/18/a3a0c28e.html","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>当一张表的数据达到几千万时，查询一次所花的时间会变得很长，系统效率会下降。<code>Oracle</code> 官方推荐单表容量为 <strong>500w</strong> 以下为最佳状态。</p>\n<p>但单表或单库达到性能瓶颈时，就需要对数据库进行拆分，数据库拆分又分为：</p>\n<ul>\n<li><strong>垂直拆分</strong></li>\n<li><strong>水平拆分</strong></li>\n</ul>\n<h2 id=\"二、垂直拆分\"><a href=\"#二、垂直拆分\" class=\"headerlink\" title=\"二、垂直拆分\"></a>二、垂直拆分</h2><p>垂直拆分可以分为：<code>垂直分表</code> 和 <code>垂直分库</code>。</p>\n<h3 id=\"垂直分表\"><a href=\"#垂直分表\" class=\"headerlink\" title=\"垂直分表\"></a>垂直分表</h3><p><strong>概念：</strong>把一个表的多个字段分别拆成多个表，一般按字段的访问频次拆分，经常访问的字段一个表，不经常访问的字段一个表。减少布不必要的字段查询，提高数据库性能。</p>\n<p><strong>如图：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220217164518.png\" alt=\"image-20220217164518085\">    </p>\n<h3 id=\"垂直分库\"><a href=\"#垂直分库\" class=\"headerlink\" title=\"垂直分库\"></a>垂直分库</h3><p><strong>概念：</strong>就是根据业务耦合性，将关联度低的不同表存储在不同的数据库中。做法与大系统拆分成多个小系统类似，按业务类型进行独立划分。与 <code>微服务划分</code> 的做法类似。每个微服务使用单独的一个数据库。</p>\n<p><strong>如图：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220217155607.png\" alt=\"image-20220217155607149\">    </p>\n<p><strong>说明：</strong></p>\n<p>业务数据量小的情况下，只有一个数据库，所有的表都在这个库里。</p>\n<p>业务扩展，数据量增加，单体服务转变为微服务治理。要将之前的库按业务类型拆分成多个库。每个微服务对应一个库。</p>\n<h3 id=\"垂直拆分优缺点\"><a href=\"#垂直拆分优缺点\" class=\"headerlink\" title=\"垂直拆分优缺点\"></a>垂直拆分优缺点</h3><p><strong>优点：</strong></p>\n<ul>\n<li>解决业务系统层面的耦合，业务清晰</li>\n<li>与微服务的治理类似，也能对不同业务的数据进行分级管理、维护、监控、扩展等</li>\n<li>高并发场景下，垂直切分能一定程度的提升IO、数据库连接数、单机硬件资源的瓶颈</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>分库后无法Join查询，只能通过接口聚合方式解决，提高了开发的复杂度</li>\n<li>分库后分布式事务问题处理复杂</li>\n<li>依然会存在单表数据量过大的问题（需要进行水平拆分）</li>\n</ul>\n<h2 id=\"三、水平拆分\"><a href=\"#三、水平拆分\" class=\"headerlink\" title=\"三、水平拆分\"></a>三、水平拆分</h2><p>当一个应用难以再通过细粒度的垂直拆分或拆分之后数据量行数过大，存在单库、单表读写及存储性能瓶颈，这时就需要进行水平拆分。</p>\n<p>水平拆分也可以分为：<code>水平分库</code> 和 <code>水平分表</code>。</p>\n<h3 id=\"水平分库\"><a href=\"#水平分库\" class=\"headerlink\" title=\"水平分库\"></a>水平分库</h3><p><strong>原因：</strong>上面虽然已经把商品库分成3个库，但是随着业务的增加，系统的QPS过高，数据库响应速度来不及。但系统QPS达到瓶颈时就要考虑分库。</p>\n<p><strong>如图：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220217163006.png\" alt=\"image-20220217163006880\">    </p>\n<h3 id=\"水平分表\"><a href=\"#水平分表\" class=\"headerlink\" title=\"水平分表\"></a>水平分表</h3><p><strong>原因：</strong>一般我们一张表的数据不要超过 <strong>500w</strong>，如果表数据超过 <strong>500w</strong>，并且还在不断增加数据，那就可以考虑分表。</p>\n<p><strong>如图：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220217164412.png\" alt=\"image-20220217164412132\"></p>\n<h3 id=\"水平拆分优缺点\"><a href=\"#水平拆分优缺点\" class=\"headerlink\" title=\"水平拆分优缺点\"></a>水平拆分优缺点</h3><p><strong>优点：</strong></p>\n<ul>\n<li>避免单库数据量过大、高并发的性能瓶颈，提升系统稳定性和负载能力</li>\n<li>应用端改造较小，不需要拆分业务模块</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>跨分片的事务一致性难以保证</li>\n<li>跨库的Join关联查询性能较差</li>\n<li>数据多次扩展难度和维护量极大</li>\n</ul>\n<h2 id=\"四、数据分片规则\"><a href=\"#四、数据分片规则\" class=\"headerlink\" title=\"四、数据分片规则\"></a>四、数据分片规则</h2><p>当我们考虑去水平拆分表时，需要将一张表水平拆分成多张表，这就涉及到数据分片的规则，比较常见的有：<code>Hash取模分表</code>、<code>数值Range分表</code>、<code>一致性Hash算法分表</code>。</p>\n<h3 id=\"Hash取模分表\"><a href=\"#Hash取模分表\" class=\"headerlink\" title=\"Hash取模分表\"></a>Hash取模分表</h3><p><strong>概念：</strong>一般采用Hash取模的拆分方式，例如：假设按 <code>goods_id</code> 分4张表。（<code>goods_id%4</code> 取整数确定表）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220217225906.png\" alt=\"image-20220217225906590\">    </p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>数据分片相对均匀，不容易出现热点和并发访问的瓶颈</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li> 后期分片集群扩容时，需要迁移旧的数据很难。 </li>\n<li>容易面临跨分片查询的复杂问题。比如上例中，如果频繁用到的查询条件中不带goods_id时，将会导致无法定位数据库，从而需要同时向4个库发起查询， 再在内存中合并数据，取最小集返回给应用，分库反而成为拖累。</li>\n</ul>\n<h3 id=\"数值Range分表\"><a href=\"#数值Range分表\" class=\"headerlink\" title=\"数值Range分表\"></a>数值Range分表</h3><p><strong>概念：</strong>按照时间区间或ID区间来拆分。比如：将goods_id为1-1000的记录分到第一个表，1001-2000的分到第二个表，以此类推。</p>\n<p><strong>如图：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220218104101.png\" alt=\"image-20220218104054253\">    </p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>单表大小可控</li>\n<li>天然便于水平扩展，后期如果想对整个分片集群扩容时，只需要添加节点即可，无需对其他分片数据进行迁移</li>\n<li>使用分片字段进行范围查找时，连续分片可快速定位分片进行快速查询，有效避免跨分片查询的问题</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>热点数据成为性能瓶颈（例如按时间进行分片，有些分片存储醉经时间段内的数据，可能会被频繁的读写，而有些分片存储的历史数据，则很少被查询）</li>\n</ul>\n<h3 id=\"一致性Hash算法\"><a href=\"#一致性Hash算法\" class=\"headerlink\" title=\"一致性Hash算法\"></a>一致性Hash算法</h3><p>一致性Hash算法可以很好的 <strong>解决因为Hash取模而产生的分片集群扩容时，需要迁移旧的数据的难题。</strong></p>\n<blockquote>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/98030096\">一致性Hash算法详解 - 知乎 (zhihu.com)</a></p>\n</blockquote>\n<h2 id=\"五、分库分表带来的问题\"><a href=\"#五、分库分表带来的问题\" class=\"headerlink\" title=\"五、分库分表带来的问题\"></a>五、分库分表带来的问题</h2><p>==<strong>在非必要的情况下，能不分就不分</strong>==</p>\n<p>因为分库分表会引入新的问题，任何单体系统拆分成多个都会提高系统维护的复杂度，破坏整体性。</p>\n<h3 id=\"分布式事务问题\"><a href=\"#分布式事务问题\" class=\"headerlink\" title=\"分布式事务问题\"></a>分布式事务问题</h3><p>使用分布式事务中间件解决，具体是通过最终一致性还是强一致性分布式事务，看业务需求决定。</p>\n<blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/u014590757/article/details/80100085\">分库分表导致的分布式事务及其解决方案</a></p>\n</blockquote>\n<h3 id=\"跨节点关联查询-Join-问题\"><a href=\"#跨节点关联查询-Join-问题\" class=\"headerlink\" title=\"跨节点关联查询 Join 问题\"></a>跨节点关联查询 Join 问题</h3><p>切分之前，我们可以通过Join来完成。而切分之后，数据可能分布在不同的节点上，此时 Join 带来的问题就比较麻烦了，考虑到性能，尽量避免使用 Join 查询。</p>\n<p><strong>解决方案：</strong></p>\n<ul>\n<li><code>全局表</code></li>\n</ul>\n<p>全局表，也可以看做是 <code>数据字典表</code>，就是系统中所有模块都可以依赖的一些表，为了避免跨库 Join 查询，可以将这类表</p>\n<ul>\n<li><code>字段冗余</code></li>\n</ul>\n<p><strong>利用空间换时间，为了性能而避免 Join 查询。</strong>例如：订单表保存 userId 时，也将 userName 冗余保存一份，这样查询订单详情时就不需要再去查询 <code>买家user表</code>了。</p>\n<ul>\n<li><code>数据组装</code></li>\n</ul>\n<p><strong>在系统层面，分两次查询。</strong>第一次查询的结果集中找出关联数据id，然后根据id发起第二次请求得到关联数据。最后将获得到的数据进行字段拼装。</p>\n<h3 id=\"跨节点分页、排序、函数问题\"><a href=\"#跨节点分页、排序、函数问题\" class=\"headerlink\" title=\"跨节点分页、排序、函数问题\"></a>跨节点分页、排序、函数问题</h3><p>跨节点多库进行查询时，会出现Limit分页、Order by 排序等问题。分页需要按照指定字段进行排序，当排序字段就是分片字段时，通过分片规则就比较容易定位到指定的分片；当排序字段非分片字段时，就变得比较复杂了。需要先在不同的分片节点中将数据进行排序并返回，然后将不同分片返回的结果集进行汇总和再次排序，最终返回给用户。</p>\n<h3 id=\"全局主键避重问题\"><a href=\"#全局主键避重问题\" class=\"headerlink\" title=\"全局主键避重问题\"></a>全局主键避重问题</h3><p>如果都用 <code>主键自增</code> 是肯定不行的，如果用 <code>UUID</code> 又无法做到根据主键排序，所以我们可以考虑通过 <code>雪花ID</code> 来作为数据库的主键。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/374667160\">什么是雪花ID？ - 分布式ID生成算法</a></p>\n</blockquote>\n<h3 id=\"数据迁移问题\"><a href=\"#数据迁移问题\" class=\"headerlink\" title=\"数据迁移问题\"></a>数据迁移问题</h3><p>采用 <code>双写的方式</code>，修改代码，所有涉及到分库分表的表的增、删、改的代码，都要对新库进行增删改。同时，再有一个数据抽取服务，不断地从老库抽数据，往新库写，边写边按时间比较数据是不是最新的。</p>\n","categories":["后端开发"],"tags":["笔记","分布式"]},{"title":"GitLab 的安装与使用","url":"/2022/01/11/3653ea16.html","content":"<h2 id=\"Docker-安装-GitLab\"><a href=\"#Docker-安装-GitLab\" class=\"headerlink\" title=\"Docker 安装 GitLab\"></a>Docker 安装 GitLab</h2><p>DockerHub 上有许多制作完善的镜像，直接搜索 <code>gitlab</code> 查看镜像：</p>\n<p><strong>搜索镜像</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search gitlab</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220111153600.png\" alt=\"image-20220111153600801\"></p>\n<blockquote>\n<p>这里可以选择汉化的 GitLab 社区版的镜像进行下载</p>\n</blockquote>\n<p><strong>下载镜像</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull twang2218/gitlab-ce-zh</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动镜像</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8443:443 -p 8090:80 -p 8022:22 --restart always --name gitlab -v /usr/local/gitlab/etc:/etc/gitlab -v /usr/local/gitlab/log:/var/log/gitlab -v /usr/local/gitlab/data:/var/opt/gitlab --privileged=true twang2218/gitlab-ce-zh</span><br><span class=\"line\"></span><br><span class=\"line\">命令解释：</span><br><span class=\"line\">-d 后台启动</span><br><span class=\"line\">-p 映射端口</span><br><span class=\"line\">--restart 重启配置</span><br><span class=\"line\">-v 卷挂载</span><br><span class=\"line\">--privileged=true 设置root权限</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-GitLab\"><a href=\"#配置-GitLab\" class=\"headerlink\" title=\"配置 GitLab\"></a>配置 GitLab</h2><p><strong>编辑 <code>gitlab.rb</code> 文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接修改 -v 挂载后的目录，docker会自动同步到容器内部</span></span><br><span class=\"line\">vim /usr/local/gitlab/etc/gitlab.rb</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改ip和端口 可以使用 / 来定位配置项</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">http地址 -- 无需配置端口</span></span><br><span class=\"line\">external_url &#x27;http://xx.xx.xx.xx&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ssh地址 -- 无需配置端口</span></span><br><span class=\"line\">gitlab_rails[&#x27;gitlab_ssh_host&#x27;] = &#x27;xx.xx.xx.xx&#x27;(不用添加端口)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ssh端口 默认22 启动容器时我们映射为8022</span></span><br><span class=\"line\">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 8022</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">========== 邮箱配置 ==============</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">是否启用</span></span><br><span class=\"line\">gitlab_rails[&#x27;smtp_enable&#x27;] = true</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SMTP服务的地址</span></span><br><span class=\"line\">gitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.qq.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">端口</span></span><br><span class=\"line\">gitlab_rails[&#x27;smtp_port&#x27;] = 465</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">你的QQ邮箱（发送账号）</span></span><br><span class=\"line\">gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;958317640@qq.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">授权码</span></span><br><span class=\"line\">gitlab_rails[&#x27;smtp_password&#x27;] = &quot;********&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">域名</span></span><br><span class=\"line\">gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;smtp.qq.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">登录验证</span></span><br><span class=\"line\">gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用了465端口，就需要配置下面三项</span></span><br><span class=\"line\">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = true</span><br><span class=\"line\">gitlab_rails[&#x27;smtp_tls&#x27;] = true</span><br><span class=\"line\">gitlab_rails[&#x27;smtp_openssl_verify_mode&#x27;] = &#x27;none&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">你的QQ邮箱（发送账号）</span></span><br><span class=\"line\">gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;958317640@qq.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><strong>应用配置</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注意观察日志输出</span></span><br><span class=\"line\">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220111154833.png\" alt=\"image-20220111154833139\"></p>\n<p><strong>编辑 <code>gitlab.yml</code></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入容器</span></span><br><span class=\"line\">docker exec -it gitlab bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编辑yml配置</span></span><br><span class=\"line\">vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改port为启动时映射的端口</span></span><br><span class=\"line\">port: 8090</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启服务并测试</span></span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220111155220.png\" alt=\"image-20220111155220504\"></p>\n","categories":["Linux"],"tags":["Docker","容器","Git"]},{"title":"Dom4j 如何新增 standalone？","url":"/2021/12/16/2e39132d.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>工作中调用一个第三方接口，需要上传 xml 文件。Java 操作 xml 文件的 api 很多，有 Dom、SAX 、JDom、Dom4j。我一般常用的是 Dom4j，但是对接此接口上传的 xml 文件需要添加 <code>standalone=&quot;no&quot;</code> 属性。查阅相关资料，发现 <code>Dom4j -1.6.1</code> 版本并没有提供相应的方法设置。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>重写 <code>XMLWriter</code> 类中的 <code>writeDeclaration</code> 方法，具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.XMLWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StandaloneWriter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">XMLWriter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StandaloneWriter</span><span class=\"params\">(FileOutputStream fileOutputStream, OutputFormat format)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> UnsupportedEncodingException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(fileOutputStream, format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StandaloneWriter</span><span class=\"params\">(FileWriter fileWriter, OutputFormat format)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> UnsupportedEncodingException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(fileWriter, format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeDeclaration</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">OutputFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> getOutputFormat();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">encoding</span> <span class=\"operator\">=</span> format.getEncoding();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!format.isSuppressDeclaration()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (encoding.equals(<span class=\"string\">&quot;UTF8&quot;</span>)) &#123;</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;&lt;?xml version=\\&quot;1.0\\&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!format.isOmitEncoding()) &#123;</span><br><span class=\"line\">                    writer.write(<span class=\"string\">&quot; encoding=\\&quot;UTF-8\\&quot;&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot; standalone=\\&quot;yes\\&quot;&quot;</span>);</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;?&gt;&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;&lt;?xml version=\\&quot;1.0\\&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!format.isOmitEncoding()) &#123;</span><br><span class=\"line\">                    writer.write(<span class=\"string\">&quot; encoding=\\&quot;&quot;</span> + encoding + <span class=\"string\">&quot;\\&quot;&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot; standalone=\\&quot;no\\&quot;&quot;</span>);</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;?&gt;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (format.isNewLineAfterDeclaration()) &#123;</span><br><span class=\"line\">                println();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用过程中，用 <code>StandaloneWriter</code> 替换掉 <code>XMLWriter</code> 即可。</p>\n","categories":["后端开发"],"tags":["技巧","笔记"]},{"title":"Docker 安装 Centos7","url":"/2021/12/12/f414591e.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本地化启动一个 <code>Linux</code> 服务器，使用 <code>Docker</code> 容器来构建一个包含 SSH 服务的 Linux 镜像。</p>\n<h2 id=\"准备-centos-官方镜像\"><a href=\"#准备-centos-官方镜像\" class=\"headerlink\" title=\"准备 centos 官方镜像\"></a>准备 centos 官方镜像</h2><p>具体步骤：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、拉取centos7官方镜像</span></span><br><span class=\"line\">docker pull centos:7</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、启动镜像</span></span><br><span class=\"line\">docker run -itd --privileged centos:7 init</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3、进入容器bash中</span></span><br><span class=\"line\">docker exec -it 镜像ID bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4、修改root用户密码</span></span><br><span class=\"line\">[root@33c7ee24f43e /]# passwd</span><br><span class=\"line\">Changing password for user root.</span><br><span class=\"line\">New password:</span><br><span class=\"line\">BAD PASSWORD: The password is shorter than 8 characters</span><br><span class=\"line\">Retype new password:</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5、安装和配置ssh服务</span></span><br><span class=\"line\">yum install openssh-server -y</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6、修改/etc/ssh/sshd_config配置并保存：PermitRootLogin <span class=\"built_in\">yes</span>    UsePAM no</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220223145834.png\" alt=\"image-20220223145827608\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220223145949.png\" alt=\"image-20220223145949729\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">7、启动ssh服务</span></span><br><span class=\"line\">[root@33c7ee24f43e /]# systemctl start sshd</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">8、退出容器</span></span><br><span class=\"line\">[root@33c7ee24f43e /]# exit</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><p>通过 <code>docker commit</code> 来构建包含 ssh 服务的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1、通过commit构建镜像</span></span><br><span class=\"line\">docker commit -a=&quot;Irving&quot; -m=&quot;本地linux镜像&quot; 容器ID mycentos:1.0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2、启动镜像 -p 10000:22 映射本地10000端口</span></span><br><span class=\"line\">docker run -d -p 10000:22 --name 容器名 镜像ID /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-xshell-进行连接\"><a href=\"#使用-xshell-进行连接\" class=\"headerlink\" title=\"使用 xshell 进行连接\"></a>使用 xshell 进行连接</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh://root:****@127.0.0.1:10000</span><br></pre></td></tr></table></figure>\n","categories":["Linux"],"tags":["Docker","容器"]},{"title":"Java 操作 Excel 之 POI 与 EasyExcel","url":"/2021/08/05/13a54546.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在工作中，使用 excel 表格处理数据是很常见的操作，作为一个 Java 开发工程师，学会使用 Java 来操作 excel 表格是必备的技能之一。</p>\n<p>本文就通过市面上常用的两种方式来实现 Java 对 excel 表格的操作：</p>\n<ul>\n<li>Apache POI</li>\n<li>Alibaba EasyExcel</li>\n</ul>\n<h2 id=\"一、Apache-POI\"><a href=\"#一、Apache-POI\" class=\"headerlink\" title=\"一、Apache POI\"></a>一、Apache POI</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Apache POI 官网： <a href=\"https://poi.apache.org/\">https://poi.apache.org/</a></p>\n<p>POI 是目前比较流行的 Java 处理 excel 框架，但是其缺点是 <strong>数据量大容易造成 OOM 异常</strong></p>\n<h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><ul>\n<li>HSSF － 提供读写[Microsoft Excel](<a href=\"https://baike.baidu.com/item/Microsoft\">https://baike.baidu.com/item/Microsoft</a> Excel)格式档案的功能（03 版本 excel）</li>\n<li>XSSF － 提供读写<a href=\"https://baike.baidu.com/item/Microsoft\">Microsoft</a> Excel <a href=\"https://baike.baidu.com/item/OOXML\">OOXML</a>格式档案的功能（07 版本 excel）</li>\n<li>HWPF － 提供读写[Microsoft Word](<a href=\"https://baike.baidu.com/item/Microsoft\">https://baike.baidu.com/item/Microsoft</a> Word)格式档案的功能</li>\n<li>HSLF － 提供读写[Microsoft PowerPoint](<a href=\"https://baike.baidu.com/item/Microsoft\">https://baike.baidu.com/item/Microsoft</a> PowerPoint)格式档案的功能</li>\n<li>HDGF － 提供读写[Microsoft Visio](<a href=\"https://baike.baidu.com/item/Microsoft\">https://baike.baidu.com/item/Microsoft</a> Visio)格式档案的功能</li>\n</ul>\n<h3 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h3><p>创建 一个空项目，在空项目中新建一个 module 模块：一个普通的 maven 项目即可</p>\n<h4 id=\"1、导入-pom-依赖\"><a href=\"#1、导入-pom-依赖\" class=\"headerlink\" title=\"1、导入 pom 依赖\"></a>1、导入 pom 依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--xLs(03)--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.poi<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>poi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--xLsx(07)--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.poi<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>poi-ooxml<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--日期格式化工具--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>joda-time<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.10.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--test--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、POI-写入-Excel\"><a href=\"#2、POI-写入-Excel\" class=\"headerlink\" title=\"2、POI 写入 Excel\"></a>2、POI 写入 Excel</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxki;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.joda.time.DateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * POI写入Excel测试</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING QQ:2362766003</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-06-22 14:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WriteExcelTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生成文件路径</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PATH</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;E:\\\\workspace\\\\IdeaProjects\\\\POI-EasyExcel\\\\lxki-poi\\\\&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 写入03版本的excel</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWrite03</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建工作簿</span></span><br><span class=\"line\">        <span class=\"type\">Workbook</span> <span class=\"variable\">workbook</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HSSFWorkbook</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建工作表</span></span><br><span class=\"line\">        <span class=\"type\">Sheet</span> <span class=\"variable\">sheet</span> <span class=\"operator\">=</span> workbook.createSheet(<span class=\"string\">&quot;员工信息表03&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建第一行</span></span><br><span class=\"line\">        <span class=\"type\">Row</span> <span class=\"variable\">row1</span> <span class=\"operator\">=</span> sheet.createRow(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建单元格</span></span><br><span class=\"line\">        <span class=\"type\">Cell</span> <span class=\"variable\">cell11</span> <span class=\"operator\">=</span> row1.createCell(<span class=\"number\">0</span>);</span><br><span class=\"line\">        cell11.setCellValue(<span class=\"string\">&quot;姓名&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Cell</span> <span class=\"variable\">cell12</span> <span class=\"operator\">=</span> row1.createCell(<span class=\"number\">1</span>);</span><br><span class=\"line\">        cell12.setCellValue(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建第二行</span></span><br><span class=\"line\">        <span class=\"type\">Row</span> <span class=\"variable\">row2</span> <span class=\"operator\">=</span> sheet.createRow(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建单元格</span></span><br><span class=\"line\">        <span class=\"type\">Cell</span> <span class=\"variable\">cell21</span> <span class=\"operator\">=</span> row2.createCell(<span class=\"number\">0</span>);</span><br><span class=\"line\">        cell21.setCellValue(<span class=\"string\">&quot;出生日期&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Cell</span> <span class=\"variable\">cell22</span> <span class=\"operator\">=</span> row2.createCell(<span class=\"number\">1</span>);</span><br><span class=\"line\">        cell22.setCellValue(<span class=\"keyword\">new</span> <span class=\"title class_\">DateTime</span>().toString(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 生成表 io流 -- 03版本使用xls后缀名</span></span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(PATH + <span class=\"string\">&quot;员工信息表03.xls&quot;</span>);</span><br><span class=\"line\">        workbook.write(fileOutputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭流</span></span><br><span class=\"line\">        fileOutputStream.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;员工信息表03.xls ==&gt; 输出完毕&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 写入07版本的excel</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWrite07</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建工作簿</span></span><br><span class=\"line\">        <span class=\"type\">Workbook</span> <span class=\"variable\">workbook</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XSSFWorkbook</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建工作表</span></span><br><span class=\"line\">        <span class=\"type\">Sheet</span> <span class=\"variable\">sheet</span> <span class=\"operator\">=</span> workbook.createSheet(<span class=\"string\">&quot;员工信息表07&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建第一行</span></span><br><span class=\"line\">        <span class=\"type\">Row</span> <span class=\"variable\">row1</span> <span class=\"operator\">=</span> sheet.createRow(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建单元格</span></span><br><span class=\"line\">        <span class=\"type\">Cell</span> <span class=\"variable\">cell11</span> <span class=\"operator\">=</span> row1.createCell(<span class=\"number\">0</span>);</span><br><span class=\"line\">        cell11.setCellValue(<span class=\"string\">&quot;姓名&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Cell</span> <span class=\"variable\">cell12</span> <span class=\"operator\">=</span> row1.createCell(<span class=\"number\">1</span>);</span><br><span class=\"line\">        cell12.setCellValue(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建第二行</span></span><br><span class=\"line\">        <span class=\"type\">Row</span> <span class=\"variable\">row2</span> <span class=\"operator\">=</span> sheet.createRow(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建单元格</span></span><br><span class=\"line\">        <span class=\"type\">Cell</span> <span class=\"variable\">cell21</span> <span class=\"operator\">=</span> row2.createCell(<span class=\"number\">0</span>);</span><br><span class=\"line\">        cell21.setCellValue(<span class=\"string\">&quot;出生日期&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Cell</span> <span class=\"variable\">cell22</span> <span class=\"operator\">=</span> row2.createCell(<span class=\"number\">1</span>);</span><br><span class=\"line\">        cell22.setCellValue(<span class=\"keyword\">new</span> <span class=\"title class_\">DateTime</span>().toString(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 生成表 io流 -- 07版本使用xlsx后缀名</span></span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(PATH + <span class=\"string\">&quot;员工信息表07.xlsx&quot;</span>);</span><br><span class=\"line\">        workbook.write(fileOutputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭流</span></span><br><span class=\"line\">        fileOutputStream.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;员工信息表07.xls ==&gt; 输出完毕&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、POI-读取-Excel\"><a href=\"#3、POI-读取-Excel\" class=\"headerlink\" title=\"3、POI 读取 Excel\"></a>3、POI 读取 Excel</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxki;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * POI读取Excel测试</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING QQ:2362766003</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-06-22 15:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReadExcelTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生成文件路径</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PATH</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;E:\\\\workspace\\\\IdeaProjects\\\\POI-EasyExcel\\\\lxki-poi\\\\&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取03版本的excel</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRead03</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过文件路径得到文件输入流</span></span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(PATH + <span class=\"string\">&quot;员工信息表03.xls&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过文件输入流拿到工作簿</span></span><br><span class=\"line\">        <span class=\"type\">Workbook</span> <span class=\"variable\">workbook</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HSSFWorkbook</span>(fileInputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过工作簿获取工作表</span></span><br><span class=\"line\">        <span class=\"type\">Sheet</span> <span class=\"variable\">sheet</span> <span class=\"operator\">=</span> workbook.getSheetAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 拿到行数，通过循环读取数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rowCount</span> <span class=\"operator\">=</span> sheet.getPhysicalNumberOfRows();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">rowNum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; rowNum &lt; rowCount; rowNum++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过工作表读取行，并取到对应的列数</span></span><br><span class=\"line\">            <span class=\"type\">Row</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> sheet.getRow(rowNum);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">cellCount</span> <span class=\"operator\">=</span> row.getPhysicalNumberOfCells();</span><br><span class=\"line\">            <span class=\"comment\">// 通过行读取单元格</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">cellNum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; cellNum &lt; cellCount; cellNum++) &#123;</span><br><span class=\"line\">                <span class=\"type\">Cell</span> <span class=\"variable\">cell</span> <span class=\"operator\">=</span> row.getCell(cellNum);</span><br><span class=\"line\">                <span class=\"comment\">// 读取 excel 表格中的数据时要注意类型</span></span><br><span class=\"line\">                System.out.print(cell.getStringCellValue()+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取07版本的excel</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRead07</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过文件路径得到文件输入流</span></span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(PATH + <span class=\"string\">&quot;员工信息表07.xlsx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过文件输入流拿到工作簿</span></span><br><span class=\"line\">        <span class=\"type\">Workbook</span> <span class=\"variable\">workbook</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XSSFWorkbook</span>(fileInputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过工作簿获取工作表</span></span><br><span class=\"line\">        <span class=\"type\">Sheet</span> <span class=\"variable\">sheet</span> <span class=\"operator\">=</span> workbook.getSheetAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 拿到行数，通过循环读取数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rowCount</span> <span class=\"operator\">=</span> sheet.getPhysicalNumberOfRows();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">rowNum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; rowNum &lt; rowCount; rowNum++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过工作表读取行，并取到对应的列数</span></span><br><span class=\"line\">            <span class=\"type\">Row</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> sheet.getRow(rowNum);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">cellCount</span> <span class=\"operator\">=</span> row.getPhysicalNumberOfCells();</span><br><span class=\"line\">            <span class=\"comment\">// 通过行读取单元格</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">cellNum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; cellNum &lt; cellCount; cellNum++) &#123;</span><br><span class=\"line\">                <span class=\"type\">Cell</span> <span class=\"variable\">cell</span> <span class=\"operator\">=</span> row.getCell(cellNum);</span><br><span class=\"line\">                <span class=\"comment\">// 读取 excel 表格中的数据时要注意类型</span></span><br><span class=\"line\">                System.out.print(cell.getStringCellValue()+<span class=\"string\">&quot;\\t&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><ul>\n<li><code>03</code> 和 <code>07</code> 版本的 <code>excel</code> 表格对应的 POI 操作 API 是不同的（<code>HSSF</code> 与 <code>XSSF</code>）<ul>\n<li><code>03</code> 版本最多支持 <code>65536</code> 行数据，而 <code>07</code> 则没有限制</li>\n<li><code>HSSF</code> 操作响应速度快于 <code>XSSF</code>， <code>XSSF</code>可以使用 <code>SXSSF</code> 替换来提升响应数据</li>\n</ul>\n</li>\n<li>==读取 <code>excel</code> 表格中的数据时要注意判断不同的数据类型，使用对应的读取方法==</li>\n</ul>\n<p>最终的项目目录结构：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210622175140.png\" alt=\"image-20210622175133621\" style=\"zoom:50%;\" />\n\n<h2 id=\"二、EasyExcel\"><a href=\"#二、EasyExcel\" class=\"headerlink\" title=\"二、EasyExcel\"></a>二、EasyExcel</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>EasyExcel 官网地址：<a href=\"https://github.com/alibaba/easyexcel\">https://github.com/alibaba/easyexcel</a></p>\n<p>EasyExcel 是 Alibaba 开源的一个 excel 处理框架，特点是 <strong>使用简单、节约内存</strong>。</p>\n<h3 id=\"快速开始-1\"><a href=\"#快速开始-1\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h3><p>在空项目中新建一个新的 module 模块，类型为普通的 maven 项目</p>\n<h4 id=\"1、导入-pom-依赖-1\"><a href=\"#1、导入-pom-依赖-1\" class=\"headerlink\" title=\"1、导入 pom 依赖\"></a>1、导入 pom 依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入easyexcel依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>easyexcel<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- lombok依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- junit单元测试 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-jupiter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- json工具 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.72<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、数据实体对象\"><a href=\"#2、数据实体对象\" class=\"headerlink\" title=\"2、数据实体对象\"></a>2、数据实体对象</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxki;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.excel.annotation.ExcelIgnore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.excel.annotation.ExcelProperty;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoData</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&quot;字符串标题&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&quot;日期标题&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date date;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&quot;数字标题&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double doubleData;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 忽略这个字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExcelIgnore</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String ignore;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、EasyExcel-写入-Excel\"><a href=\"#3、EasyExcel-写入-Excel\" class=\"headerlink\" title=\"3、EasyExcel 写入 Excel\"></a>3、EasyExcel 写入 Excel</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxki;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.excel.EasyExcel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING QQ:2362766003</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-06-22 16:41</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EasyExcelWrite</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生成文件路径</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PATH</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;E:\\\\workspace\\\\IdeaProjects\\\\POI-EasyExcel\\\\lxki-easyexcel\\\\&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成示例数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 示例数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;DemoData&gt; <span class=\"title function_\">data</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;DemoData&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;DemoData&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">DemoData</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DemoData</span>();</span><br><span class=\"line\">            data.setString(<span class=\"string\">&quot;字符串&quot;</span> + i);</span><br><span class=\"line\">            data.setDate(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">            data.setDoubleData(<span class=\"number\">0.56</span>);</span><br><span class=\"line\">            list.add(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最简单的写</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"doctag\">@link</span> DemoData&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;2. 直接写即可</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">simpleWrite</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> PATH + <span class=\"string\">&quot;easyexcel07.xlsx&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果这里想使用 03版本 则 传入excelType参数即可</span></span><br><span class=\"line\">        EasyExcel.write(fileName, DemoData.class).sheet(<span class=\"string\">&quot;模板&quot;</span>).doWrite(data());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、EasyExcel-读取-Excel\"><a href=\"#4、EasyExcel-读取-Excel\" class=\"headerlink\" title=\"4、EasyExcel 读取 Excel\"></a>4、EasyExcel 读取 Excel</h4><p>数据持久层：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxki;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 假设这个是你的DAO存储。当然还要这个类让spring管理，当然你不用需要存储，也不需要这个类。</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoDAO</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(List&lt;DemoData&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是mybatis,尽量别直接调用多次insert,自己写一个mapper里面新增一个方法batchInsert,所有数据一次性插入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取监听器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxki;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.excel.context.AnalysisContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.excel.event.AnalysisEventListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoDataListener</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AnalysisEventListener</span>&lt;DemoData&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(DemoDataListener.class);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BATCH_COUNT</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    List&lt;DemoData&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;DemoData&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoDAO demoDAO;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DemoDataListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span></span><br><span class=\"line\">        demoDAO = <span class=\"keyword\">new</span> <span class=\"title class_\">DemoDAO</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DemoDataListener</span><span class=\"params\">(DemoDAO demoDAO)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.demoDAO = demoDAO;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个每一条数据解析都会来调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data</span></span><br><span class=\"line\"><span class=\"comment\">     *            one row value. Is is same as &#123;<span class=\"doctag\">@link</span> AnalysisContext#readRowHolder()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invoke</span><span class=\"params\">(DemoData data, AnalysisContext context)</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(data));</span><br><span class=\"line\">        System.out.println(JSON.toJSONString(data));</span><br><span class=\"line\">        list.add(data);</span><br><span class=\"line\">        <span class=\"comment\">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.size() &gt;= BATCH_COUNT) &#123;</span><br><span class=\"line\">            saveData();</span><br><span class=\"line\">            <span class=\"comment\">// 存储完成清理 list</span></span><br><span class=\"line\">            list.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 所有数据解析完成了 都会来调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAfterAllAnalysed</span><span class=\"params\">(AnalysisContext context)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span></span><br><span class=\"line\">        saveData();</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;所有数据解析完成！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加上存储数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, list.size());</span><br><span class=\"line\">        demoDAO.save(list);</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;存储数据库成功！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lxki;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.excel.EasyExcel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.excel.ExcelReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.excel.read.metadata.ReadSheet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING QQ:2362766003</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-06-22 16:57</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EasyExcelRead</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生成文件路径</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PATH</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;E:\\\\workspace\\\\IdeaProjects\\\\POI-EasyExcel\\\\lxki-easyexcel\\\\&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最简单的读</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"doctag\">@link</span> DemoData&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class=\"doctag\">@link</span> DemoDataListener&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;3. 直接读即可</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">simpleRead</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> PATH + <span class=\"string\">&quot;easyexcel07.xlsx&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span></span><br><span class=\"line\">        EasyExcel.read(fileName, DemoData.class, <span class=\"keyword\">new</span> <span class=\"title class_\">DemoDataListener</span>()).sheet().doRead();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意：-1\"><a href=\"#注意：-1\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><ul>\n<li>如果需要操作 <code>03</code> 版本的 <code>excel</code>，需要在读写操作时传入 <code>excelType</code> 参数</li>\n</ul>\n<p>最终的项目结构：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210622175228.png\" alt=\"image-20210622175227995\" style=\"zoom:50%;\" />\n","categories":["后端开发"],"tags":["技巧","笔记"]},{"title":"Tomcat 配置 HTTPS 协议访问","url":"/2021/07/15/b5db2b95.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Tomcat 默认支持 HTTP 协议访问，项目需求要修改 Tomcat 支持 HTTPS 协议访问。</p>\n<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><h3 id=\"使用-Java-自带的-keytool-生成证书\"><a href=\"#使用-Java-自带的-keytool-生成证书\" class=\"headerlink\" title=\"使用 Java 自带的 keytool 生成证书\"></a>使用 Java 自带的 keytool 生成证书</h3><p>打开控制台输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -<span class=\"built_in\">alias</span> testKey -keyalg RSA -validity 3650 -keystore D:\\apache-tomcat-7.0.26\\keys\\test.keystore -ext SAN=ip:127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">keytool -<span class=\"built_in\">export</span> -<span class=\"built_in\">alias</span> testKey -file wxsccp.cer -keystore test.jks</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">alias</span>: 别名 这里起名keys</span><br><span class=\"line\"><span class=\"attribute\">keyalg</span>: 证书算法，RSA</span><br><span class=\"line\"><span class=\"attribute\">validity</span>：证书有效时间，<span class=\"number\">10</span>年</span><br><span class=\"line\"><span class=\"attribute\">keystore</span>：证书生成的目标路径和文件名,替换成你自己的路径即可,我定义的是D:\\apache-tomcat-<span class=\"number\">7</span>.<span class=\"number\">0</span>.<span class=\"number\">26</span>\\keys\\test.keystore，其中keys文件夹必须存在</span><br></pre></td></tr></table></figure>\n\n<p>之后回车，然后需要输入一些信息，其中秘钥库口令和秘钥口令最好一致，并且记下来（之后配置 Tomcat 需要用到）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210607134909.png\" alt=\"image-20210607134909105\"></p>\n<h3 id=\"配置-Tomcat\"><a href=\"#配置-Tomcat\" class=\"headerlink\" title=\"配置 Tomcat\"></a>配置 Tomcat</h3><p>打开 Tomcat 的 conf 目录下的 <code>server.xml</code>文件，定位 <code>https</code> 到指定位置，完整配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;8443&quot;</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;org.apache.coyote.http11.Http11Protocol&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">maxThreads</span>=<span class=\"string\">&quot;150&quot;</span> <span class=\"attr\">SSLEnabled</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">scheme</span>=<span class=\"string\">&quot;https&quot;</span> <span class=\"attr\">secure</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">clientAuth</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sslProtocol</span>=<span class=\"string\">&quot;TLS&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">keystoreFile</span>=<span class=\"string\">&quot;D:\\software\\EOS\\apache-tomcat-7.0.54\\keys\\test.keystore&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">keystorePass</span>=<span class=\"string\">&quot;vansys&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>keystoreFile：上面生成的证书所在目录</li>\n<li>keystorePass：生成证书时输入的秘钥</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210607135533.png\" alt=\"image-20210607135533347\"></p>\n<p>添加 http 跳转 https 协议访问，在 web.xml 文件末尾添加如下配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security-constraint</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">web-resource-collection</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">web-resource-name</span> &gt;</span>SSL<span class=\"tag\">&lt;/<span class=\"name\">web-resource-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">web-resource-collection</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">user-data-constraint</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">transport-guarantee</span>&gt;</span>CONFIDENTIAL<span class=\"tag\">&lt;/<span class=\"name\">transport-guarantee</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">user-data-constraint</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如图：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210607135715.png\" alt=\"image-20210607135715701\"></p>\n<h3 id=\"重启-Tomcat-服务器\"><a href=\"#重启-Tomcat-服务器\" class=\"headerlink\" title=\"重启 Tomcat 服务器\"></a>重启 Tomcat 服务器</h3><p>这样就能通过 https 协议访问我们的项目：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210607140001.png\" alt=\"image-20210607140001797\"></p>\n<p>但是发现：</p>\n<p>使用自己生成的证书会遇到一些问题：</p>\n<ul>\n<li><strong>浏览器会对 HTTPS 使用危险标识。</strong></li>\n<li><strong>浏览器默认不会加载非 HTTPS 域名下的 javascript</strong></li>\n<li><strong>移动设备显示页面空白</strong></li>\n</ul>\n<h2 id=\"解决证书无效问题\"><a href=\"#解决证书无效问题\" class=\"headerlink\" title=\"解决证书无效问题\"></a>解决证书无效问题</h2><p>要解决自己生成的证书无效的问题，需要购买相应的 SSL 证书。<a href=\"https://www.aliyun.com/product/cas\">证书服务<em>SSL 数字证书_HTTPS 加密</em>服务器证书_CA 认证-阿里云</a></p>\n<p>不过我之前用过一些免费的证书申请网站 <a href=\"https://freessl.cn/\">FreeSSL 首页 - FreeSSL.cn 一个提供免费 HTTPS 证书申请的网站</a></p>\n<h3 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h3><p>略</p>\n<h3 id=\"Tomcat-配置-PFX-证书\"><a href=\"#Tomcat-配置-PFX-证书\" class=\"headerlink\" title=\"Tomcat 配置 PFX 证书\"></a>Tomcat 配置 PFX 证书</h3><p>打开 Tomcat 配置文件 <code>conf\\server.xml</code></p>\n<p>定位 <code>https</code> 到指定位置，修改三个属性 ：<code>keystoreFile</code>，<code>keystoreType</code>，<code>keystorePass</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Connector</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">port</span>=<span class=\"string\">&quot;443&quot;</span> <span class=\"attr\">maxThreads</span>=<span class=\"string\">&quot;200&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">scheme</span>=<span class=\"string\">&quot;https&quot;</span> <span class=\"attr\">secure</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">SSLEnabled</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">clientAuth</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">sslProtocol</span>=<span class=\"string\">&quot;TLS&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">keystoreFile</span>=<span class=\"string\">&quot;/你的磁盘目录/证书文件名.pfx&quot;</span>  &lt;!<span class=\"attr\">--</span>这里是证书文件存放路径<span class=\"attr\">--</span>&gt;</span></span><br><span class=\"line\">        keystoreType=&quot;PKCS12&quot;   <span class=\"comment\">&lt;!--这里是证书格式，.pfx和.p12都是PKCS12格式的--&gt;</span></span><br><span class=\"line\">        keystorePass=&quot;123456&quot;    <span class=\"comment\">&lt;!--刚才输入的密码--&gt;</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启-Tomcat-服务器，访问测试\"><a href=\"#重启-Tomcat-服务器，访问测试\" class=\"headerlink\" title=\"重启 Tomcat 服务器，访问测试\"></a>重启 Tomcat 服务器，访问测试</h3>","categories":["后端开发"],"tags":["笔记","Tomcat"]},{"title":"Java 中的集合概述","url":"/2021/07/02/13a54546.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文记录了Java中的集合框架，文章中的内容摘录自<a href=\"https://www.runoob.com/java/java-collections.html\">Java 集合框架 | 菜鸟教程 (runoob.com)</a>、CSDN、博客园等开源网站。</p>\n<h2 id=\"Java-集合体系\"><a href=\"#Java-集合体系\" class=\"headerlink\" title=\"Java 集合体系\"></a>Java 集合体系</h2><p>Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 <a href=\"https://www.runoob.com/java/java-arraylist.html\">ArrayList</a>、<a href=\"https://www.runoob.com/java/java-linkedlist.html\">LinkedList</a>、<a href=\"https://www.runoob.com/java/java-hashset.html\">HashSet</a>、LinkedHashSet、<a href=\"https://www.runoob.com/java/java-hashmap.html\">HashMap</a>、LinkedHashMap 等等。</p>\n<p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p>\n<ul>\n<li><strong>接口：</strong>是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</li>\n<li><strong>实现（类）：</strong>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</li>\n<li><strong>算法：</strong>是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</li>\n</ul>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210520211027.png\" alt=\"image-20210520211027579\" style=\"zoom: 50%;\" />\n\n<p>上图堪称集合框架的<strong>上帝视角</strong>，整个框架的组成部分：</p>\n<ol>\n<li>集合框架提供了两个遍历接口： <code>Iterator</code> 和 <code>ListIterator</code> ，其中后者是前者的 <code>优化版</code> ，支持在任意一个位置进行<strong>前后双向遍历</strong>。注意图中的 <code>Collection</code> 应当继承的是 <code>Iterable</code> 而不是 <code>Iterator</code> ，后面会解释 <code>Iterable</code> 和 <code>Iterator</code> 的区别</li>\n<li>整个集合框架分为两个门派（类型）：<code>Collection</code> 和 <code>Map</code>，前者是一个容器，存储一系列的<strong>对象</strong>；后者是键值对<code>&lt;key,value&gt;</code>，存储一系列的<strong>键值对</strong></li>\n<li>在集合框架体系下，衍生出四种具体的集合类型：<code>Map</code>、<code>Set</code>、<code>List</code>、<code>Queue</code></li>\n<li><code>Map</code> 存储 <code>&lt;key,value&gt;</code> 键值对，查找元素时通过 <code>key</code> 查找 <code>value</code></li>\n<li><code>Set</code> 内部存储一系列<strong>不可重复</strong>的对象，且是一个<strong>无序</strong>集合，对象排列顺序不一</li>\n<li><code>List</code> 内部存储一系列<strong>可重复</strong>的对象，是一个<strong>有序</strong>集合，对象按插入顺序排列</li>\n<li><code>Queue</code> 是一个队列容器，其特性与 <code>List</code> 相同，但只能从 <code>对头</code> 和 <code>队尾</code> 操作元素</li>\n<li>JDK为集合的各种操作提供了两个工具类 <code>Collections</code> 和 <code>Arrays</code> ，之后会讲解工具类的常用方法</li>\n<li>四种抽象集合类型内部也会衍生出许多具有不同特性的集合类，<strong>不同场景下择优使用，没有最佳的集合</strong></li>\n</ol>\n<h3 id=\"集合与数组的区别\"><a href=\"#集合与数组的区别\" class=\"headerlink\" title=\"集合与数组的区别\"></a>集合与数组的区别</h3><ul>\n<li><strong>长度区别：</strong><ul>\n<li>数组固定</li>\n<li>集合可变</li>\n</ul>\n</li>\n<li><strong>内容区别：</strong><ul>\n<li>数组可以是基本类型，也可以是引用类型</li>\n<li>集合只能是引用类型</li>\n</ul>\n</li>\n<li><strong>元素区别：</strong><ul>\n<li>数组只能存储同一种类型</li>\n<li>集合可以存储不同类型（其实集合一般也是存储同一种类型）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、Iterator-Iterable-ListIterator\"><a href=\"#二、Iterator-Iterable-ListIterator\" class=\"headerlink\" title=\"二、Iterator Iterable ListIterator\"></a>二、Iterator Iterable ListIterator</h3><p><code>Iterator</code> 和 <code>Iterable</code>，在第一次看这两个接口时，真以为是一摸一样的，没发现里面有啥不同，<strong>存在即合理</strong>，它们两个还是有本质区别的。</p>\n<p>首先来看 <code>Iterator</code> 接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Iterator</span>&lt;E&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    E <span class=\"title function_\">next</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提供的API接口含义如下：</p>\n<ul>\n<li><code>hasNext()</code> ：判断集合中是否存在下一个对象</li>\n<li><code>next()</code> ：返回集合中的下一个对象，并将访问指针移动一位</li>\n<li><code>remove()</code> ：删除集合中调用 <code>next()</code> 方法返回的对象</li>\n</ul>\n<p>在早期，遍历集合的方式只有一种，通过 <code>Iterator</code> 迭代器操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">3</span>);</span><br><span class=\"line\">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext())&#123;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> iterator.next();</span><br><span class=\"line\">    System.out.println(next);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(next==<span class=\"number\">2</span>)&#123;iterator.remove();&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再来看 <code>Iterable</code> 接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Iterable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">\tIterator&lt;T&gt; <span class=\"title function_\">iterator</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">// JDK1.8</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">forEach</span><span class=\"params\">(Consumer&lt;? <span class=\"built_in\">super</span> T&gt; action)</span> &#123;</span><br><span class=\"line\">        Objects.requireNonNull(action);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (T t : <span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">            action.accept(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 <code>Iterable</code> 接口里面提供了 <code>Iterator</code> 接口，所以实现了 <code>Iterable</code> 接口的集合依旧可以使用 <code>迭代器</code> 遍历和操作集合中的对象；</p>\n<p>而在 <code>JDK1.8</code> 中， <code>Iterable</code> 提供了一个新的方法 <code>forEach()</code> ，它允许使用增强 for 循环遍历对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Integer num : list)&#123;</span><br><span class=\"line\">    System.out.println(num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过反编译上面这段代码，发现它只是 Java 中的一个 <code>语法糖</code> ，本质上还是调用 <code>Iterator</code> 去遍历。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Iterator</span> <span class=\"variable\">iter</span> <span class=\"operator\">=</span> list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(iter.hasNext())&#123;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> iter.next();</span><br><span class=\"line\">    System.out.println(num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为什么要设计两个接口 <code>Iterable</code> 和 <code>Iterator</code> ，而不是保留其中一个就可以了。</p>\n<p>简单来说：<code>Iterator</code> 的保留可以让子类去实现自己的迭代器，而 <code>Iterable</code> 接口更加关注与 <code>for-each</code> 的增强语法。</p>\n</blockquote>\n<p><strong>总结：</strong></p>\n<ul>\n<li><code>Iterator</code> 是提供集合操作内部对象的一个迭代器，它可以 <strong>遍历</strong> 、<strong>移除</strong> 对象，且只能够 <strong>单向移动</strong></li>\n<li> <code>Iterable</code> 是对 <code>Iterator</code> 的封装，在<code>JDK 1.8</code> 时，实现了 <code>Iterable</code> 接口的结合可以使用 <strong>增强 for 循环</strong> 遍历集合对象，我们通过 <strong>反编译</strong> 后发现底层还是使用 <code>Iterator</code> 迭代器进行遍历</li>\n</ul>\n<p>等等，这一章还没完，还有一个 <code>ListIterator</code>。它继承 Iterator 接口，在遍历 <code>List</code> 集合时可以从 <strong>任意索引下标</strong> 开始遍历，而且支持 <strong>双向遍历</strong></p>\n<p> ListIterator 存在于 List 集合之中，通过调用方法可以返回 <strong>起始下标</strong> 为 <code>index</code> 的迭代器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//返回下标为0的迭代器</span></span><br><span class=\"line\">ListIterator&lt;Integer&gt; listIter1 = list.listIterator();</span><br><span class=\"line\"><span class=\"comment\">//返回下标为5的迭代器</span></span><br><span class=\"line\">ListIterator&lt;Integer&gt; listIter2 = list.listIterator(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<p>ListIterator 中有几个重要方法，大多数方法与 Iterator 中定义的含义相同，但是 Iterator 强大的地方是可以在 <strong>任意一个下标位置</strong> 返回该迭代器，且可以实现 <strong>双向遍历</strong>。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ListIterator</span>&lt;E&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Iterator</span>&lt;E&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    E <span class=\"title function_\">next</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">hasPrevious</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    E <span class=\"title function_\">previous</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">nextIndex</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">previousIndex</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 替换当前下标的元素，即访问过的最后一个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(E e)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map-和-Collection-接口\"><a href=\"#Map-和-Collection-接口\" class=\"headerlink\" title=\"Map 和 Collection 接口\"></a>Map 和 Collection 接口</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210530093805.png\" alt=\"image-20210530093758757\"></p>\n<p><code>Map</code> 接口定义了存储的数据结构是 <code>&lt;key,value&gt;</code> 形式，根据 key 映射到 value，一个 key 对应一个 value，所以 <code>key</code> 不可重复，而 <code>value</code> 可重复。</p>\n<p>在 <code>Map</code> 接口下会将存储的方式细分为不同的种类：</p>\n<ul>\n<li><code>SortedMap</code> 接口：该接口映射可以对 <code>&lt;key,value&gt;</code> 按照自己的规则进行 <strong>排序</strong>，具体实现有 TreeMap </li>\n<li><code>AbstractMap</code> 类：它为子类提供好一些 <strong>通用的API实现</strong>，所有的具体 Map 如 <code>HashMap</code> 都会继承它</li>\n</ul>\n<p>而 <code>Collection</code> 接口提供了所有集合的 <strong>通用方法</strong>（注意这里不包括 <code>Map</code>）：</p>\n<ul>\n<li>添加方法：<code>add(E e)</code> / <code>addAll(Collection&lt;? extends E&gt; c)</code></li>\n<li>删除方法：<code>remove(Object o)</code> / <code>removeAll(Collection&lt;?&gt; c)</code></li>\n<li>查找方法：<code>contains(Object o)</code> / <code>containsAll(Collection&lt;?&gt; c)</code></li>\n<li>查询集合自身信息；<code>size()</code> /  <code>isEmpty()</code></li>\n<li>···</li>\n</ul>\n<p>在 <code>Collection</code> 接口下，同样会将集合细分为不同的种类：</p>\n<ul>\n<li><code>Set</code> 接口：一个<strong>不允许存储重复元素</strong>的<strong>无序</strong>集合，具体实现有 <code>HashSet</code> / <code>TreeSet</code> ···</li>\n<li><code>List</code> 接口：一个<strong>可存储重复元素</strong>的<strong>有序</strong>集合，具体实现有 <code>ArrayList</code> / <code>LinkedList</code> ···</li>\n<li><code>Queue</code> 接口：一个<strong>可存储重复元素</strong>的<strong>队列</strong>，具体实现有 <code>PriorityQueue</code> / <code>ArrayDeque</code> ···</li>\n</ul>\n<h2 id=\"Map-集合体系详解\"><a href=\"#Map-集合体系详解\" class=\"headerlink\" title=\"Map 集合体系详解\"></a>Map 集合体系详解</h2><p><code>Map</code> 接口时由 <code>&lt;key,value&gt;</code> 组成的集合，由 <code>key</code> 映射到<strong>唯一</strong>的 <code>value</code>，所以 <code>Map</code> 不能包含重复的 <code>key</code> ，每个键<strong>至多</strong>映射一个值。下图是整个 Map 集合体系的主要组成部分：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210530122749.png\" alt=\"image-20210530122749775\"></p>\n<h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h3><p>HashMap 是一个 <strong>最通用的</strong> 利用哈希表存储元素的集合，将元素放入 HashMap 时，将 <code>key</code> 的哈希值转换为数组的 <code>索引</code> 下标 <strong>确定存放位置</strong>，查找时，根据 <code>key</code> 的哈希地址转换成数组的 <code>索引</code> 下标 <strong>确定查找位置</strong>。</p>\n<p>HashMap 底层是用数组 + 链表 + 红黑树这三种数据结构实现，它是 <strong>非线程安全</strong> 的集合。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210530124732.png\" alt=\"image-20210530124731984\"></p>\n<p>发送哈希冲突时，HashMap 的解决方法是将相同映射地址的元素连成一条 <code>链表</code>，如果链表的长度大于 <code>8</code> 时，且数组的长度大于 <code>64</code> 则会转换成 <code>红黑树</code> 数据结构。</p>\n<p> 关于 HashMap 的简要总结：</p>\n<ol>\n<li>它是集合中最常用的 <code>Map</code> 集合类型，底层由 <code>数组 + 链表 + 红黑树</code> 组成</li>\n<li>HashMap 不是线程安全的</li>\n<li>插入元素时，通过计算元素的 <code>哈希值</code>，通过 <strong>哈希映射函数</strong> 转换为 <code>数组下标</code>；查找元素时，同样通过哈希映射函数得到数组下标 <code>定位元素的位置</code></li>\n</ol>\n<h3 id=\"LinkedHashMap\"><a href=\"#LinkedHashMap\" class=\"headerlink\" title=\"LinkedHashMap\"></a>LinkedHashMap</h3><p>LinkedHashMap 可以看作是 <code>HashMap</code> 和 <code>LinkedList</code> 的结合：它在 HashMap 的基础上添加了一条双向链表，<code>默认</code> 存储各个元素的插入顺序，但由于这条双向链表，使得 LinkedHashMap 可以实现 <code>LRU</code> 缓存淘汰策略，因为我们可以设置这条双向链表按照 <code>元素的访问次序</code> 进行排序</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210530175812.png\" alt=\"image-20210530175812409\"></p>\n<p>LinkedHashMap 是 HashMap 的子类，所以它具备 HashMap 的所有特点，其次，它在 HashMap 的基础上维护了一条 <code>双向链表</code>，该链表存储了 <strong>所有元素</strong>，<code>默认</code> 元素的顺序与插入顺序 <strong>一致</strong>。若 <code>accessOrder</code> 属性为 <code>true</code> ，则遍历顺序按元素的访问次序进行排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 头节点</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class=\"line\"><span class=\"comment\">// 尾节点</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br></pre></td></tr></table></figure>\n\n<p>利用 LinkedHashMap 可以实现 <code>LRU</code> 缓存淘汰策略，因为它提供了一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">removeEldestEntry</span><span class=\"params\">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法可以移除 <code>最靠近链表头部</code> 的一个节点，而在 <code>get()</code> 方法中可以看到下面这段代码，起作用是挪动节点的位置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (accessOrder)&#123;</span><br><span class=\"line\">    afterNodeAccess(e);</span><br><span class=\"line\">&#125;      </span><br></pre></td></tr></table></figure>\n\n<p>只要调用了 <code>get()</code> 且 <code>accessOrder = true</code>，则会将该节点更新到链表 <code>尾部</code>，具体的逻辑在 <code>afterNodeAccess()</code> 中，感兴趣可翻看源码，这里不再展开：</p>\n<p>如果现在要实现一个 <code>LRU</code> 缓存策略，则需要做两件事：</p>\n<ul>\n<li>指定 <code>accessOrder = true</code> 可以设定链表按照访问顺序排列，通过提供的构造器可以设定 <code>accessOrder</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">LinkedHashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity,<span class=\"type\">float</span> loadFactor,<span class=\"type\">boolean</span> accessOrder)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(initialCapacity, loadFactor);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.accessOrder = accessOrder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重写 <code>removeEldestEntry()</code> 方法，内部定义逻辑，通常是判断 <code>容量</code> 是否达到上限，若是则执行淘汰。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_41231926/article/details/86173740\">LeetCode146——LRU缓存机制</a></p>\n</blockquote>\n<p>-关于 LinkedHashMap 主要介绍两点：</p>\n<ol>\n<li>它底层维护了一条 <code>双向链表</code>，因为继承了 HashMap，所以它也不是线程安全的</li>\n<li>LinkedHashMap 可实现 <code>LRU</code> 缓存淘汰策略，其原理是通过设置 <code>accessOrder</code> 为 <code>true</code> 并重写 <code>removeEldestEntry</code> 方法定义淘汰元素时需满足的条件</li>\n</ol>\n<h3 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h3><p>TreeMap 的底层实现是红黑树！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210530183426.png\" alt=\"image-20210530183425914\"></p>\n<p>TreeMap 是 <code>SortedMap</code> 的子类，所以它具有 排序 功能。它是基于 红黑树 数据结构实现的，每一个键值对 <code>&lt;key,value&gt;</code> 都是一个节点，默认情况下按照 <code>key</code> 自然排序，另一种是可以通过传入定制的 <code>Comparator</code> 进行自定义规则排序</p>\n<p>图中红黑树的每一个节点都是一个 <code>Entry</code> ，在这里为了图片的简洁性，就不标明 key 和 value 了，注意这些元素都是已经按照 <code>key</code> 排好序了，整个数据结构都是保持着 <code>有序</code> 的状态！</p>\n<p>关于 <code>自然</code> 排序与 <code>定制</code> 排序：</p>\n<ul>\n<li>自然排序：要求 <code>key</code> 必须实现 <code>Comparable</code> 接口。</li>\n</ul>\n<p>由于 <code>Integer</code> 类实现了 Comparable 接口，按照自然排序规则是按照 <code>key</code> 从小到大排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">TreeMap&lt;Integer,String&gt; treeMap = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;();</span><br><span class=\"line\">treeMap.put(<span class=\"number\">2</span>,<span class=\"string\">&quot;TWO&quot;</span>);</span><br><span class=\"line\">treeMap.put(<span class=\"number\">1</span>,<span class=\"string\">&quot;ONE&quot;</span>);</span><br><span class=\"line\">System.out.print(treeMap);</span><br><span class=\"line\"><span class=\"comment\">// &#123;1=ONE,2=TWO&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定制排序：在初始化 TreeMap 时传入新的 <code>Comparator</code>，不要求 <code>key</code> 实现 Comparable 接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">TreeMap&lt;Integer,String&gt; treeMap = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;((o1,o2) -&gt; Integer.compare(o2,o1));</span><br><span class=\"line\">treeMap.put(<span class=\"number\">2</span>,<span class=\"string\">&quot;TWO&quot;</span>);</span><br><span class=\"line\">treeMap.put(<span class=\"number\">1</span>,<span class=\"string\">&quot;ONE&quot;</span>);</span><br><span class=\"line\">treeMap.put(<span class=\"number\">3</span>,<span class=\"string\">&quot;Three&quot;</span>);</span><br><span class=\"line\">treeMap.put(<span class=\"number\">4</span>,<span class=\"string\">&quot;Four&quot;</span>);</span><br><span class=\"line\">System.out.print(treeMap);</span><br><span class=\"line\"><span class=\"comment\">// &#123;4=Four, 3=Three, 2=TWO, 1=ONE&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过传入新的 <code>Comparator</code> 比较器，可以覆盖默认的排序规则，上面的代码按照 <code>key</code> 降序排序，在实际应用中还可以按照其它规则自定义排序。</p>\n<p><code>compare()</code> 方法的返回值有三种，分别是：<code>0</code>，<code>-1</code>，<code>+1</code></p>\n<p>（1）如果返回 <code>0</code> ，代表两个元素相等，不需要调换顺序</p>\n<p>（2）如果返回 <code>+1</code> ，代表前面的元素需要与后面的元素调换位置</p>\n<p>（3）如果返回 <code>-1</code> ，代表前面的元素不需要与后面的元素调换位置</p>\n<p>而何时返回 <code>+1</code> 和 <code>-1</code>，则由我们自己去定义，JDK默认是按照 <strong>自然排序</strong>，而我们可以根据 <code>key</code> 的不同去定义降序还是升序排序。</p>\n<p>关于 TreeMap 主要介绍了两点：</p>\n<ol>\n<li>它底层是由 <code>红黑树</code> 这种数据结构实现的，所以操作的时间复杂度恒为 <code>0(logN)</code></li>\n<li>TreeMap 可以对 <code>key</code> 进行自然排序或者自定义排序，自定义排序时需要传入 <code>Comparator</code>，而自然排序要求 <code>key</code>实现了 <code>Comparable</code> 接口</li>\n<li>TreeMap 不是线程安全的。</li>\n</ol>\n<h3 id=\"WeakHashMap\"><a href=\"#WeakHashMap\" class=\"headerlink\" title=\"WeakHashMap\"></a>WeakHashMap</h3><p>WeakHashMap 日常开发中比较少见，它是基于普通的 <code>Map</code> 实现的，而里面 <code>Entry</code> 中的键在每一次的 <code>垃圾回收</code> 都会被清除掉，所以非常适合用于 <strong>短暂访问</strong>、<strong>仅访问一次</strong> 的元素，缓存在 <code>WeakHashMap</code> 中，并尽早地把它回收掉。</p>\n<p>当 <code>Entry</code> 被 <code>GC</code> 时，WeakHashMap 是如何感知到某个元素被回收的呢？</p>\n<p>在 WeakHashMap 内部维护了一个引用队列 <code>queue</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;Object&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>这个 queue 里包含了所有被 <code>GC</code> 掉的键，当JVM开启 <code>GC</code> 后，如果回收掉 WeakHashMap 中的 key，会将 key 放入 queue 中，在 <code>expungeStaleEntries()</code> 中遍历 queue，把 queue 中的所有 <code>key</code> 拿出来，并在 WeakHashMap 中删除掉，以达到 <strong>同步</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">expungeStaleEntries</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object x; (x = queue.poll()) != <span class=\"literal\">null</span>; ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 删除 WeakHashMap 中的该键值对</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是 WeakHashMap 底层存储的元素的数据结构是 <code>数组 + 链表</code>，<strong>没有红黑树</strong>哦，可以换一个角度想，如果还有红黑树，那干脆直接继承 HashMap ，然后再扩展不就行了，然而它并没有这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeakHashMap</span>&lt;K,V&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractMap</span>&lt;K,V&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Map</span>&lt;K,V&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以，WeakHashMap 的数据结构图如下：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210530211807.png\" alt=\"image-20210530211807636\"></p>\n<p>图中被虚线标识的元素将会在下一次访问 WeakHashMap 时删除掉，WeakHashMap 内部会做好一系列的调整工作，所以记住队列的作用就是标志那些已经被 <code>GC</code> 回收掉的元素。</p>\n<p>关于 WeakHashMap 需要注意两点：</p>\n<ol>\n<li>它的键是一种 <code>弱键</code>，放入 WeakHashMap 时，随时会被回收掉，所以不能确保某次访问元素一定存在</li>\n<li>它依赖普通的 <code>Map</code> 进行实现，是一个非线程安全的集合</li>\n<li>WeakHashMap 通常作为 <strong>缓存</strong> 使用，适用存储那些 <code>只需访问一次</code>、或 <code>只需保存短暂时间</code> 的键值对</li>\n</ol>\n<h3 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h3><p>HashTable 底层的存储结构是 <code>数组 + 链表</code>，而它是一个 <strong>线程安全</strong> 的集合，但是因为这个线程安全，它就被淘汰掉了。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210530213300.png\" alt=\"image-20210530213300809\"></p>\n<blockquote>\n<p>这幅图是否有点眼熟呢哈哈哈，其实本质上就是 WeakHashMap 的底层存储结构。那么为什么 WeakHashMap 不继承 HashTable 呢？HashTable 的 <code>性能</code> 在并发环境下是非常差的，在非并发环境下可以用 <code>HashMap</code> 更优。</p>\n</blockquote>\n<p>HashTable 本质上是 HashMap 的前辈，它被淘汰的原因也主要因为两个字：<strong>性能</strong></p>\n<p>HashTable 是一个 <strong>线程安全</strong> 的Map，它所有的方法都被加上了 <strong>synchronized</strong> 关键字，也是因为这个关键字，它注定成为了时代的弃儿。</p>\n<p>HashTable 底层采用 数组+链表 存储键值对，由于被弃用，后人也没有对它进行任何改进</p>\n<p>HashTable 默认长度为 <code>11</code>，负载因子为 <code>0.75f</code>，即元素个数达到数组长度的 75% 时，会进行一次扩容，每次扩容为原来数组长度的 <code>2</code> 倍</p>\n<p>HashTable 所有的操作都是线程安全的。</p>\n<h2 id=\"Collection-集合体系详解\"><a href=\"#Collection-集合体系详解\" class=\"headerlink\" title=\"Collection 集合体系详解\"></a>Collection 集合体系详解</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210530222445.png\" alt=\"image-20210530222444963\"></p>\n<h3 id=\"Set-接口\"><a href=\"#Set-接口\" class=\"headerlink\" title=\"Set 接口\"></a>Set 接口</h3><p><code>Set</code> 接口继承了 <code>Collection</code> 接口，是一个不包括重复元素的集合，更确切地说，Set 中任意两个元素不会出现 <code>o1.equals(o2)</code>，而且 Set <strong>至多</strong> 只能存储一个 <code>NULL</code> 值元素，Set 集合的组成部分可以用下面这张图概括：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210530225016.png\" alt=\"image-20210530225016622\" style=\"zoom: 50%;\" />\n\n<p>在 Set 集合体系中，我们需要关注两点：</p>\n<ul>\n<li>存入 <strong>可变元素</strong> 时，必须非常小心，因为任意时候元素状态的改变都有可能使得 Set 内部出现两个 <strong>相等</strong> 的元素，即 <code>o1.equals(o2) = true</code>，所以一般不要更改存入 Set 中的元素，否则将会破坏了 <code>equals()</code>  的作用！</li>\n<li>Set 的最大作用就是判重，在项目中的最大的作用也是 <strong>判重</strong>！</li>\n</ul>\n<p>接下来我们来分析它的实现类和子类：<code>AbstractSet</code> 和 <code>SortedSet</code></p>\n<h4 id=\"AbstractSet-抽象类\"><a href=\"#AbstractSet-抽象类\" class=\"headerlink\" title=\"AbstractSet 抽象类\"></a>AbstractSet 抽象类</h4><p><code>AbstractSet</code> 是一个实现 Set 的一个抽象类，定义在这里的方法可以将所有具体 Set 集合的 <strong>相同行为</strong> 在这里实现，<strong>避免子类包含大量的重复代码</strong></p>\n<p>所有的 Set 也应该要有相同的 <code>hashCode()</code> 和 <code>equals()</code> 方法，所以使用抽象类把该方法重写后，子类就无需关心这两个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractSet</span>&lt;E&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Set</span>&lt;E&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断两个 set 是否相等</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"built_in\">this</span>) <span class=\"comment\">// 集合本身</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Set)) <span class=\"comment\">// 集合不是 set</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        Collection&lt;?&gt; c = (Collection&lt;?&gt;) o; <span class=\"comment\">// 比较两个集合中的元素是否全部相同</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.size() != size())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> containsAll(c);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException unused)   &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NullPointerException unused) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 计算所有元素的 hashcode 总和</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        Iterator&lt;E&gt; i = iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i.hasNext()) &#123;</span><br><span class=\"line\">            <span class=\"type\">E</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> i.next();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                h += obj.hashCode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SortedSet-接口\"><a href=\"#SortedSet-接口\" class=\"headerlink\" title=\"SortedSet 接口\"></a>SortedSet 接口</h4><p><code>SortedSet</code> 是一个接口，它在 Set 的基础上扩展了 <strong>排序</strong> 的行为，所以所有实现它的子类都会拥有排序功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SortedSet</span>&lt;E&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Set</span>&lt;E&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 元素的比较器，决定元素的排列顺序</span></span><br><span class=\"line\">    Comparator&lt;? <span class=\"built_in\">super</span> E&gt; comparator();</span><br><span class=\"line\">\t<span class=\"comment\">// 获取 [from,to] 之间的 set</span></span><br><span class=\"line\">    SortedSet&lt;E&gt; <span class=\"title function_\">subSet</span><span class=\"params\">(E fromElement, E toElement)</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取以 to 开头的 set</span></span><br><span class=\"line\">    SortedSet&lt;E&gt; <span class=\"title function_\">headSet</span><span class=\"params\">(E toElement)</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取以 from 结尾的 set</span></span><br><span class=\"line\">    SortedSet&lt;E&gt; <span class=\"title function_\">tailSet</span><span class=\"params\">(E fromElement)</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取首个元素</span></span><br><span class=\"line\">    E <span class=\"title function_\">first</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取最后一个元素</span></span><br><span class=\"line\">    E <span class=\"title function_\">last</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h4><p>HashSet 底层是借助 <code>HashMap</code> 实现，我们可以观察它的多个构造方法，本质上都是 new 一个 HashMap</p>\n<blockquote>\n<p>这也是为什么我们先学习 Map 的原因！先学 Map ，再学 Set，有助于理解 Set ！</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashSet</span>&lt;E&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractSet</span>&lt;E&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HashSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HashSet</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity, <span class=\"type\">float</span> loadFactor)</span> &#123;</span><br><span class=\"line\">        map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HashSet</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity)</span> &#123;</span><br><span class=\"line\">        map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以观察 <code>add()</code> 和 <code>remove()</code> 方法是如何将 HashSet 的操作嫁接到 HashMap 上的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">PRESENT</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map.put(e, PRESENT)==<span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">remove</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map.remove(o)==PRESENT;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们看到 <code>PRESENT</code> 就是一个 <strong>静态常量</strong> ：使用 PRESENT 作为 HashMap 的 value 值，使用 HashSet 的开发者只需要 <strong>关注</strong>  插入的 <code>key</code>，<strong>屏蔽</strong> 了 HashMap 的 <code>value</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210602103919.png\" alt=\"image-20210602103912091\"></p>\n<p>上图可以观察到每个 <code>Entry</code> 的 <code>value</code> 都是 PRESENT 空对象，我们就不用理会它了。</p>\n<p>HashSet  在 HashMap 基础上实现，所以很多地方可以联系到 HashMap：</p>\n<ul>\n<li>底层数据结构：HashSet 也是采用 <code>数组 + 链表 + 红黑树</code> 实现</li>\n<li>线程安全性：由于采用 HashMap 实现，而 HashMap 本身线程不安全，在 HashSet 中又没有额外添加同步策略，所以 HashSet 也 <strong>线程不安全</strong></li>\n<li>存入 HashSet 的对象的状态 <strong>最好不要发生变化</strong>，因为有可能改变状态后，在集合内部出现两个元素 <code>o1.equals(o2) == true</code>，破坏了 <code>equals</code> 的含义。</li>\n</ul>\n<h4 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h4><p>LinkedHashSet 的代码很少，不信我给你粘出来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LinkedHashSet</span>&lt;E&gt;</span><br><span class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title class_\">HashSet</span>&lt;E&gt;</span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">2851667679971038690L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LinkedHashSet</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity, <span class=\"type\">float</span> loadFactor)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(initialCapacity, loadFactor, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Link\t<span class=\"title function_\">edHashSet</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(initialCapacity, <span class=\"number\">.75f</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LinkedHashSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"number\">16</span>, <span class=\"number\">.75f</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LinkedHashSet</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Math.max(<span class=\"number\">2</span>*c.size(), <span class=\"number\">11</span>), <span class=\"number\">.75f</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        addAll(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Spliterator&lt;E&gt; <span class=\"title function_\">spliterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Spliterators.spliterator(<span class=\"built_in\">this</span>, Spliterator.DISTINCT | Spliterator.ORDERED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码少归少，还是得分析一下，<code>LinkedHashSet</code> 继承了 <code>HashSet</code>，我们跟随到父类 HashSet 的构造方法看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">HashSet(<span class=\"type\">int</span> initialCapacity, <span class=\"type\">float</span> loadFactor, <span class=\"type\">boolean</span> dummy) &#123;</span><br><span class=\"line\">    map = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现父类中 map 的实现采用 <code>LinkedHashMap</code> ，这里注意不是 <code>HashMap</code> ，而 LinkedHashMap 底层又采用 HashMap + 双向链表 实现的，所以本质上 LinkedHashSet 还是使用 HashMap 实现的。</p>\n<blockquote>\n<p>LinkedHashSet -&gt; LinkedHashMap -&gt; HashMap + 双向链表</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210602125701.png\" alt=\"image-20210602125701765\"></p>\n<p>而 LinkedHashMap 是采用 <code>HashMap</code> + <code>双向链表</code> 实现的，这条双向链表中保存了元素的插入顺序。所以 LinkedHashSet 可以按照元素的插入顺序遍历元素，如果你熟悉 <code>LinkedHashMap</code> ，那么 LinkedHashSet 也就不在话下了。</p>\n<p>关于 LinkedHashSet 需要注意的几个地方：</p>\n<ul>\n<li>它继承于 <code>HashSet</code>，而 HashSet 默认是采用 HashMap 存储数据的，但是 LinkedHashSet 调用父类的构造方法初始化 map 时是 LinkedHashMap 而不是 HashMap </li>\n<li>由于 LinkedHashMap 不是线程安全的，且在 LinkedHashSet 中没有添加额外的同步策略，所以 LinkedHashSet 集合<strong>也不是线程安全</strong> 的</li>\n</ul>\n<h4 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h4><p>TreeSet 是基于 TreeMap 的实现，所以存储的元素是有序的，底层的数据结构是 <code>数组 + 红黑树</code>。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210602131111.png\" alt=\"image-20210602131111383\"></p>\n<p>而元素的排列顺序有 <code>2</code> 种，和 TreeMap 相同：自然排序和定制排序，常用的构造方法在下面已经展现出来了，TreeSet 默认使用自然排序，如果需要使用定制排序，需要传入 <code>Comparator</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">TreeSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;E,Object&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">TreeSet</span><span class=\"params\">(Comparator&lt;? <span class=\"built_in\">super</span> E&gt; comparator)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeMap</span>&lt;&gt;(comparator));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于 TreeSet ，有几个值得注意的点：</p>\n<ul>\n<li><p>TreeSet 的所有操作都会转换为对 TreeMap 的操作，TreeMap 采用 <strong>红黑树</strong> 实现，任意操作的 <strong>时间复杂度</strong> 为 <code>0(logN)</code></p>\n</li>\n<li><p>TreeSet 是一个 <strong>线程不安全</strong> 的集合</p>\n</li>\n<li><p>TreeSet 常用于对 <strong>不重复</strong> 的元素 <strong>定制排序</strong>，如玩家战斗力排行榜</p>\n</li>\n</ul>\n<blockquote>\n<p>注意：TreeSet 判断元素是否重复的方法是判断 <strong>compareTo()</strong> 方法是否返回0，而不是调用 <strong>hashCode()</strong> 和 <strong>equals()</strong> 方法，如果返回 0 则认为集合内已存在相同的元素，不会再加入到集合当中。</p>\n</blockquote>\n<h3 id=\"List-接口\"><a href=\"#List-接口\" class=\"headerlink\" title=\"List 接口\"></a>List 接口</h3><p>List 接口和 Set 接口齐头并进，是我们日常开发过程中接触很多的一种集合类型了。整个 List 集合的组成部分如下图：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210602133220.png\" alt=\"image-20210602133220362\" style=\"zoom:50%;\" />\n\n<p><code>List</code> 接口直接继承于 Collection 接口，它定义为可以存储 <strong>重复</strong> 元素的集合，并且元素按照插入顺序 <strong>有序排列</strong>，且可以通过 <strong>索引</strong>访问指定位置的元素。常见的实现有：ArrayList、linkedList、Vector 和 Stack</p>\n<h4 id=\"AbstractList-和-AbstractSequentialList\"><a href=\"#AbstractList-和-AbstractSequentialList\" class=\"headerlink\" title=\"AbstractList 和 AbstractSequentialList\"></a>AbstractList 和 AbstractSequentialList</h4><p>AbstractList 抽象类实现了 List 接口，其内部实现了所有的 List 都需具备的功能，子类可以专注于实现自己具体的操作逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查找元素 o 第一次出现的位置</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">indexOf</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    ListIterator&lt;E&gt; it = listIterator();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it.next()==<span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> it.previousIndex();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.equals(it.next()))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> it.previousIndex();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找元素 o 最后一次出现的位置</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lastIndexOf</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">     ListIterator&lt;E&gt; it = listIterator(size());</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (o==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">while</span> (it.hasPrevious())</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (it.previous()==<span class=\"literal\">null</span>)</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> it.nextIndex();</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">while</span> (it.hasPrevious())</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (o.equals(it.previous()))</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> it.nextIndex();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>AbstractSequentialList 抽象类继承了 AbstractList ，在原基础上限制了访问元素的顺序 <strong>只能够按照顺序访问</strong>，而 <strong>不支持随机访问</strong>，如果需要满足随机访问的特性，则继承 AbstractList。子类 LinkedList 使用链表实现，所以仅能支持 <strong>顺序访问</strong>，故继承了 <code>AbstractSequentialList</code> 而不是 AbstractList。</p>\n<h4 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210602140414.png\" alt=\"image-20210602140414443\"></p>\n<p><code>Vector</code> 在现在已经是一种过时的集合了，包括继承它的 <code>Stack</code> 集合也是如此，它们被淘汰的原因都是因为 <strong>性能</strong> 低下。</p>\n<blockquote>\n<p>JDK 1.0 时代，ArrayList 还没诞生，大家都是使用 Vector 集合，但由于 Vector 的 <strong>每个操作</strong> 都被 <strong>synchronized</strong> 关键字修饰，即使在线程安全的情况下， 仍然 <strong>进行着无意义的加锁/释放锁</strong>，造成额外的性能开销，做了无用功。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在 JDK 1.2 时，Collection 家族出现了，它提供了大量 <strong>高性能、适用于不同场合</strong> 的集合，而 Vector 也是其中一员，但由于 Vector 在每个方法上都加了锁，并且需要兼容许多的老项目，很难在这基础上优化 <code>Vector</code> 了，所以渐渐地也就被历史淘汰了。</p>\n<p>现在，在 <strong>线程安全</strong> 的情况下，不要选用 Vector 集合，取而代之的是 <strong>ArrayList</strong> 集合；在并发环境下，出现了 <code>CopyOnWriteArrayList</code>，Vector 被完全弃用了。</p>\n<h4 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210602142433.png\" alt=\"image-20210602142433141\"></p>\n<p><code>Stack</code> 是一种 <code>后入先出（LIFO）</code> 型的集合容器，如图所示，<code>大雄</code> 是最后一个进入容器的，top 指针指向大雄，那么弹出元素时，大雄也是第一个被弹出去的。</p>\n<p>Stack 继承了 Vector 类，提供了栈顶的压入元素操作（push）和弹出元素（pop），以及查看栈顶元素（peek）等等，但由于继承于 Vector，Stack 也渐渐被淘汰了。</p>\n<p>取而代之的是后起之秀 <code>Deque</code> 接口，其实现有 <code>ArrayDeque</code>，该数据结构更加完善，可靠性更好，依靠队列也可以实现 <code>LIFO</code> 的栈操作，所以优先选择 ArrayDeque 实现栈。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Deque&lt;Integer&gt; stact = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;Integer&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>ArrayDeque 的数据结构是：<code>数组</code> ，并提供 <strong>头尾指针下标</strong> 对数组元素进行操作。本文也会在接下来的内容中讲到，请接着往下看！</p>\n<h4 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h4><p>ArrayList 以 <strong>数组</strong> 作为存储结构，它是 <strong>线程不安全</strong> 的集合；具有 <strong>查询快、在数组中或头部增删慢</strong> 的特点，所以它除了线程不安全这一点，其余可以替代 <code>Vector</code> ，而且线程安全的 ArrayList 可以使用 <code>CopyOnWriteArrayList</code> 代替 Vector。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210603085739.png\" alt=\"image-20210603085732114\"></p>\n<p>关于 ArrayList 有几个重要的点需要注意：</p>\n<ul>\n<li>具有 <strong>随机访问</strong> 特点，<strong>访问元素的效率</strong> 较高，ArrayList 在 <strong>频繁插入、删除</strong> 集合元素的场景下效率较 <code>低</code></li>\n<li>底层数据结构：ArrayList 底层是使用数组作为存储结构，具有 <strong>查找快、增删慢</strong> 的特点</li>\n<li>线程安全性：ArrayList 是 <strong>线程不安全</strong> 的集合</li>\n<li>ArrayList <strong>首次扩容</strong> 后的长度为 <code>10</code>，调用 <code>add()</code> 时需要将计算容器 的最小容量。可以看到如果数组 <code>elementData</code> 为空数组，会将最小容量设置为 <code>10</code>，之后会将数组长度完成首次扩容到 10。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new ArrayList 时的默认空数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 默认容量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 计算该容器满足的最小容量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"type\">int</span> minCapacity)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"type\">int</span> minCapacity)</span> &#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>集合从 <strong>第二次扩容</strong> 开始，数组长度将扩容为原来的 <code>1.5</code> 倍，即：<code>newLength = oldLength * 1.5</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">grow</span><span class=\"params\">(<span class=\"type\">int</span> minCapacity)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldCapacity</span> <span class=\"operator\">=</span> elementData.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">newCapacity</span> <span class=\"operator\">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h4><p>LinkedList 底层采用 <code>双向链表</code> 数据接口存储元素，由于链表的内存地址 <code>非连续</code>，所以它不具备随机访问的特点，但由于它利用指针连接各个元素，所以插入、删除元素只需要 <code>操作指针</code>，不需要 <code>移动元素</code>，故具有 <strong>增删快、查询慢</strong> 的特点。它也是一个非线程安全的集合。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210626130625.png\" alt=\"image-20210626130618786\"  />\n\n<p>由于以双向链表作为数据结构，它是 <strong>线程不安全</strong> 的集合；存储的每个节点称为一个 <code>Node</code> ，下图可以看到 Node 中保存了 <code>next</code> 和 <code>prev</code> 指针，<code>item</code> 是该节点的值。在插入和删除时，时间复杂度都保持为 <code>0(1)</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210626131638.png\" alt=\"image-20210626131638144\"></p>\n<p>关于 LinkedList，除了它是以链表实现的集合外，还有一些特殊的地方需要注意：</p>\n<ul>\n<li><p>优势：LinkedList 底层没有 <code>扩容机制</code>，使用 <code>双向链表</code> 存储元素，所以插入和删除元素效率较高，适用于频繁操作元素的场景</p>\n</li>\n<li><p>劣势：LinkedList 不具备 <code>随机访问</code> 的特点，查找某个元素只能从 <code>head</code> 或 <code>tail</code> 指针一个一个比较，所以 <strong>查找中间元素是效率很低</strong></p>\n</li>\n<li><p>查找优化：LinkedList 查找某个下标 <code>index</code> 的元素时做了优化，若 <code>index &lt; (size / 2)</code>，则从 <code>head</code> 往后查找，否则从 <code>tail</code> 开始往前查找，代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Node&lt;E&gt; <span class=\"title function_\">node</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123; <span class=\"comment\">// 查找的下标处于链表的前半部分则从头开始找</span></span><br><span class=\"line\">        Node&lt;E&gt; x = first;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; index; i++)</span><br><span class=\"line\">            x = x.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 查找的下标处于链表的后半部分则从尾开始找</span></span><br><span class=\"line\">        Node&lt;E&gt; x = last;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> size - <span class=\"number\">1</span>; i &gt; index; i--)</span><br><span class=\"line\">            x = x.prev;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>双端队列：使用双链表实现，并且实现了 <code>Deque</code> 接口，使得 LinkedList 可以用作 <strong>双端队列</strong> 。下图可以看到 Node 是集合中的元素，提供了前驱指针和后继指针，还提供了一系列操作 <code>头结点</code> 和 <code>尾结点</code> 的方法，具有双端队列的特性。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210626133733.png\" alt=\"image-20210626133733427\">    </p>\n</li>\n</ul>\n<h3 id=\"Queue-接口\"><a href=\"#Queue-接口\" class=\"headerlink\" title=\"Queue 接口\"></a>Queue 接口</h3><p><code>Queue</code> 队列，在 JDK 中两种不同类型的集合实现： <strong>单向队列</strong>（AbstractQueue）和 <strong>双端队列</strong>（Deque）</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210626152155.png\" alt=\"image-20210626152154946\" style=\"zoom:80%;\" />    \n\n<p>Queue 中提供了两套增加、删除元素的 API，当插入或删除元素失败时，会有两种不同的失败处理策略。</p>\n<table>\n<thead>\n<tr>\n<th>方法及失败策略</th>\n<th>插入方法</th>\n<th>删除方法</th>\n<th>查找方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>抛出异常</td>\n<td>add()</td>\n<td>remove()</td>\n<td>get()</td>\n</tr>\n<tr>\n<td>返回失败默认值</td>\n<td>offer()</td>\n<td>poll()</td>\n<td>peek()</td>\n</tr>\n</tbody></table>\n<p>选区哪种方法的决定因素：插入和删除元素失败时，希望 <code>抛出异常</code> 还是返回 <code>布尔值</code> </p>\n<p><code>add()</code> 和 <code>offer()</code> 对比：</p>\n<p>在队列长度大小确定的场景下，队列放满元素后，添加下一个元素时，add() 会抛出 <code>IllegalStateException</code> 异常，而 <code>offer()</code> 会返回 <code>false</code>。</p>\n<p>但是他们两个方法在插入 <strong>某些不合法的元素</strong> 时会抛出三个相同的异常：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210626153333.png\" alt=\"image-20210626153333747\">    </p>\n<p><code>remove()</code> 和 <code>poll()</code> 对比：</p>\n<p>在 <strong>队列为空</strong> 的场景下：<code>remove()</code> 会抛出 <code>NoSuchElmentException</code> 异常，而 <code>poll()</code> 则返回 <code>null</code>。</p>\n<p><code>get()</code> 和 <code>peek()</code> 对比：</p>\n<p>在队列为空的情况，<code>get()</code> 会抛出 <code>NoSuchElementException</code> 异常，而 <code>peek()</code> 则返回 <code>null</code>。</p>\n<h3 id=\"Deque-接口\"><a href=\"#Deque-接口\" class=\"headerlink\" title=\"Deque 接口\"></a>Deque 接口</h3><p><code>Deque</code> 接口的实现非常好理解：从 <strong>单向</strong> 队列演变为 <strong>双向</strong> 队列，内部额外提供 <strong>双向队列的操作方法</strong> 即可：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210626161113.png\" alt=\"image-20210626161106057\" style=\"zoom:80%;\" />    \n\n<p>Deque 接口额外提供了 <strong>针对队列的头结点和尾结点</strong> 操作的方法，而 <strong>插入、删除方法同样也提供了两套不同的失败策略</strong>。</p>\n<p>除了 <code>add()</code> 和 <code>offer()</code> ，<code>remove()</code> 和 <code>poll()</code> 以外，还有 <code>get()</code> 和 <code>peek()</code> 出现了不同的策略</p>\n<h4 id=\"AbstractQueue-抽象类\"><a href=\"#AbstractQueue-抽象类\" class=\"headerlink\" title=\"AbstractQueue 抽象类\"></a>AbstractQueue 抽象类</h4><p>AbstractQueue 类中提供了各个 API 的基本实现，主要针对各个不同的处理策略给出基本的方法实现，定义在这里的作用让 <code>子类</code> 根据其 <code>方法规范</code> （操作失败时抛出异常还是返回默认值）实现具体的业务逻辑。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210626162155.png\" alt=\"image-20210626162155775\">    </p>\n<h4 id=\"LinkedList-1\"><a href=\"#LinkedList-1\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h4><p>LinkedList 在上面已经详细解释了，它实现了 <code>Deque</code> 接口，提供了针对头结点和尾结点的操作，并且每个结点都有 <strong>前驱</strong> 和 <strong>后继</strong> 指针，具备双向队列的所有特性。</p>\n<h4 id=\"ArrayDeque\"><a href=\"#ArrayDeque\" class=\"headerlink\" title=\"ArrayDeque\"></a>ArrayDeque</h4><p>使用 <strong>数组</strong> 实现的双端队列，它是 <strong>无界</strong> 的双端队列，最小的容量是 <code>8</code> （JDK1.8）。在 JDK11 之后看到它默认容量已经是 <code>16</code> 了。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210702150910.png\" alt=\"image-20210702150909935\"></p>\n<p><code>ArrayDeque</code> 在日常使用得不多，值得注意的是它与 <code>LinkedList</code> 的对比：<code>LinkedList</code> 采用链表实现双端队列，而 <code>ArrayDeque</code> 使用 <strong>数组</strong> 实现双端队列。</p>\n<blockquote>\n<p>在文档中作者写到：ArrayDeque 作为栈时比 Stack 性能好，作为队列时比  LinkedList 性能好</p>\n</blockquote>\n<p>由于双端队列 <strong>只能在头部和尾部</strong> 操作元素，所以删除元素和插入元素的时间复杂度大部分都稳定在 <code>0(1)</code>，除非在扩容时会涉及到元素的批量复制操作。但是在大多数情况下，使用它应该指定一个大概的数组长度，避免频繁的扩容。</p>\n<h4 id=\"PriorityQueue\"><a href=\"#PriorityQueue\" class=\"headerlink\" title=\"PriorityQueue\"></a>PriorityQueue</h4><p>PriorityQueue 基于 <strong>优先级堆实现</strong> 的优先级队列，而堆是采用 <strong>数组</strong> 实现的：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210702153102.png\" alt=\"image-20210702153102716\"></p>\n<p>文档中的描述告诉我们：该数组中的元素通过传入 <code>Comparator</code> 进行定制排序，如果不传入 <code>Comparator</code> 时，则按照元素本身 <code>自然排序</code>，但要求元素实现了 <code>Comparable</code> 接口，所以 PriorityQueue  <strong>不允许存储 NULL 元素</strong>。</p>\n<p>PriorityQueue 应用场景：元素本身具有优先级，需要按照 <strong>优先级处理元素</strong> </p>\n<p>PriorityQueue 总结：</p>\n<ul>\n<li>PriorityQueue 是基于 <strong>优先级堆</strong> 实现的优先级队列，而堆是用 <strong>数组</strong> 维护的</li>\n<li>PriorityQueue 适用于 <strong>元素按优先级处理</strong> 的业务场景，例如用户在请求人工客服需要排队时，根据用户的 <strong>VIP等级</strong> 进行 <code>插队</code> 处理，等级越高，越先安排客服。</li>\n</ul>\n<p>各集合总结：（以 JDK1.8 为例）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210702155305.png\" alt=\"image-20210702155305221\"></p>\n","categories":["后端开发"],"tags":["技巧","笔记"]},{"title":"Linux 系统基础","url":"/2021/06/23/15ddae98.html","content":"<h2 id=\"入门概述\"><a href=\"#入门概述\" class=\"headerlink\" title=\"入门概述\"></a>入门概述</h2><blockquote>\n<p>我们为什么要学习 Linux？</p>\n</blockquote>\n<p>linux 诞生了这么多年，以前还喊着如何能取代 windows 系统，现在这个口号已经小多了，任何事物发展都有其局限性都有其天花板。就如同在国内再搞一个社交软件取代腾讯一样，想想而已基本不可能，因为用户已经习惯于使用微信交流，不是说技术上实现不了解而是老百姓已经习惯了，想让他们不用，即使他们自己不用亲戚朋友还是要用，没有办法的事情。</p>\n<p>用习惯了 windows 操作系统，再让大家切换到别的操作系统基本上是不可能的事情，改变一个人已经养成的习惯太难。没有办法深入到普通老百姓的生活中，并不意味着 linux 就没有用武之地了。在服务器端，在开发领域 linux 倒是越来越受欢迎，很多程序员都觉得不懂点 linux 都觉得不好意思，linux 在开源社区的地位依然岿然不动。</p>\n<p>尤其是作为一个后端程序员，是必须要掌握 Linux 的，因为这都成为了你找工作的基础门槛了，所以不得不学习！</p>\n<blockquote>\n<p>Linux 简介</p>\n</blockquote>\n<p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p>\n<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p>\n<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>\n<blockquote>\n<p>Linux 发行版</p>\n</blockquote>\n<p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421091705.jpeg\" alt=\"img\"></p>\n<p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421091730.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>Linux 应用领域</p>\n</blockquote>\n<p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p>\n<p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p>\n<ul>\n<li>巴西联邦政府由于支持 Linux 而世界闻名。</li>\n<li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li>\n<li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li>\n<li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li>\n<li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li>\n<li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li>\n<li>法国和德国同样开始逐步采用 Linux。</li>\n</ul>\n<blockquote>\n<p>Linux VS Windows</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421092008.jpeg\" alt=\"img\"></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>省略…</p>\n<h2 id=\"走进-Linux-系统\"><a href=\"#走进-Linux-系统\" class=\"headerlink\" title=\"走进 Linux 系统\"></a>走进 Linux 系统</h2><blockquote>\n<p>开机登录</p>\n</blockquote>\n<p>开机会启动许多程序。它们在 Windows 叫做”服务”（service），在 Linux 就叫做”守护进程”（daemon）。</p>\n<p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给 login 程序来验证用户的身份，密码是不显示的，输完回车即可！</p>\n<p>一般来说，用户的登录方式有三种：</p>\n<ul>\n<li>命令行登录</li>\n<li>ssh 登录</li>\n<li>图形界面登录</li>\n</ul>\n<p>最高权限账户为 root，可以操作一切！</p>\n<blockquote>\n<p>关机</p>\n</blockquote>\n<p>在 linux 领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p>\n<p>关机指令为：shutdown：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sync</span> <span class=\"comment\"># 将数据由内存同步到硬盘中。</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown <span class=\"comment\"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h 10 <span class=\"comment\"># 这个命令告诉大家，计算机将在10分钟后关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h now <span class=\"comment\"># 立马关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h 20:25 <span class=\"comment\"># 系统会在今天20:25关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h +10 <span class=\"comment\"># 十分钟后关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –r now <span class=\"comment\"># 系统立马重启</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –r +10 <span class=\"comment\"># 系统十分钟后重启</span></span><br><span class=\"line\"></span><br><span class=\"line\">reboot <span class=\"comment\"># 就是重启，等同于 shutdown –r now</span></span><br><span class=\"line\"></span><br><span class=\"line\">halt <span class=\"comment\"># 关闭系统，等同于shutdown –h now 和 poweroff</span></span><br></pre></td></tr></table></figure>\n\n<p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p>\n<blockquote>\n<p>系统目录结构</p>\n</blockquote>\n<p>登录系统后，在当前命令窗口下输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /</span><br></pre></td></tr></table></figure>\n\n<p>你会看到如下图所示：</p>\n<p>本地虚拟机：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095447.png\" alt=\"image-20210421095447557\"></p>\n<p>云服务器：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095548.png\" alt=\"img\"></p>\n<p>树状目录结构：（Linux 的一切资源都挂载在这个 / 根节点下）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095524.jpeg\" alt=\"img\"></p>\n<p><strong>以下是对这些目录的解释：</strong></p>\n<ul>\n<li><code>/bin</code>：bin 是 Binary 的缩写, 这个目录存放着最经常使用的命令。</li>\n<li><code>/boot</code>： 这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li>\n<li><code>/dev</code> ： dev 是 Device(设备)的缩写, 存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li>\n<li>==<code>/etc</code>： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。==</li>\n<li>==<code>/home</code>：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。==</li>\n<li><code>/lib</code>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。</li>\n<li><code>/lost+found</code>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li>\n<li><code>/media</code>：linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。</li>\n<li><code>/mnt</code>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li>\n<li>==<code>/opt</code>：这是给主机额外安装软件所摆放的目录。比如你安装一个 ORACLE 数据库则就可以放到这个目录下。默认是空的。==</li>\n<li><code>/proc</code>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li>\n<li>==<code>/root</code>：该目录为系统管理员，也称作超级权限者的用户主目录。==</li>\n<li><code>/sbin</code>：s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。</li>\n<li><code>/srv</code>：该目录存放一些服务启动之后需要提取的数据。</li>\n<li><code>/sys</code>：这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</li>\n<li>==<code>/tmp</code>：这个目录是用来存放一些临时文件的。==</li>\n<li>==<code>/usr</code>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。==</li>\n<li><code>/usr/bin</code>： 系统用户使用的应用程序。</li>\n<li><code>/usr/sbin</code>： 超级用户使用的比较高级的管理程序和系统守护程序。</li>\n<li><code>/usr/src</code>： 内核源代码默认的放置目录。</li>\n<li>==<code>/var</code>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。==</li>\n<li><code>/run</code>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li>\n<li><code>/www</code>：存放服务器网站相关的资源，环境，网站的项目</li>\n</ul>\n<h2 id=\"常用的基本命令\"><a href=\"#常用的基本命令\" class=\"headerlink\" title=\"常用的基本命令\"></a>常用的基本命令</h2><h3 id=\"目录管理\"><a href=\"#目录管理\" class=\"headerlink\" title=\"目录管理\"></a>目录管理</h3><blockquote>\n<p>绝对路径、相对路径</p>\n</blockquote>\n<p>我们知道 Linux 的目录结构为树状结构，最顶级的目录为根目录 /。</p>\n<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>\n<p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p>\n<p>常用的：</p>\n<ul>\n<li><code>cd</code>：切换目录命令</li>\n<li><code>./</code>：当前目录</li>\n<li><code>cd ..</code>：返回上一级目录</li>\n</ul>\n<p><strong>绝对路径：</strong></p>\n<p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p>\n<p><strong>相对路径：</strong></p>\n<p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p>\n<blockquote>\n<p>处理目录的常用命令</p>\n</blockquote>\n<p>接下来我们就来看几个常见的处理目录的命令吧：</p>\n<ul>\n<li><code>ls</code>: 列出目录</li>\n<li><code>cd</code>：切换目录</li>\n<li><code>pwd</code>：显示目前的目录</li>\n<li><code>mkdir</code>：创建一个新的目录</li>\n<li><code>rmdir</code>：删除一个空的目录</li>\n<li><code>cp</code>: 复制文件或目录</li>\n<li><code>rm</code>: 移除文件或目录</li>\n<li><code>mv</code>: 移动文件与目录，或修改文件与目录的名称</li>\n</ul>\n<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>\n<blockquote>\n<p>ls - 列出目录</p>\n</blockquote>\n<p>在 Linux 系统当中， ls 命令可能是最常被运行的。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-a</strong> ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>\n<li><strong>-l</strong> ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>\n</ul>\n<p>将目录下的所有文件列出来(含属性与隐藏档)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls -al ~</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>cd - 切换目录</p>\n</blockquote>\n<p>cd 是 Change Directory 的缩写，这是用来变换工作目录的命令。</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> [相对路径或绝对路径]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>pwd - 显示当前所在的目录</p>\n</blockquote>\n<p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@kuangshen kuangstudy]<span class=\"comment\">#pwd [-P]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mkdir - 创建新目录</p>\n</blockquote>\n<p>如果想要创建新的目录的话，那么就使用 mkdir (make directory)吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> [-mp] 目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-m</strong> ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>\n<li><strong>-p</strong> ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>\n</ul>\n<blockquote>\n<p>rmdir - 删除空目录</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rmdir</span> [-p] 目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p>\n<p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会学到！</p>\n<blockquote>\n<p>cp - 复制文件或目录</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># cp [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-a</strong>：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>\n<li><strong>-p</strong>：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>\n<li><strong>-d</strong>：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>\n<li><strong>-r</strong>：递归持续复制，用於目录的复制行为；(常用)</li>\n<li><strong>-f</strong>：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>\n<li><strong>-i</strong>：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>\n<li><strong>-l</strong>：进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li>\n<li><strong>-s</strong>：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>\n<li><strong>-u</strong>：若 destination 比 source 旧才升级 destination ！</li>\n</ul>\n<blockquote>\n<p>rm - 移除文件/目录</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> [-fir] 文件或目录</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-f</strong> ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>\n<li><strong>-i</strong> ：互动模式，在删除前会询问使用者是否动作</li>\n<li><strong>-r</strong> ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>\n</ul>\n<blockquote>\n<p>mv - 移动文件或目录/修改名称</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@www ~]# mv [-fiu] source destination</span><br><span class=\"line\">[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-f</strong> ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>\n<li><strong>-i</strong> ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>\n<li><strong>-u</strong> ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>\n</ul>\n<h3 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h3><blockquote>\n<p>看懂文件属性</p>\n</blockquote>\n<p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>\n<p>在 Linux 中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p>\n <img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421201636.png\" alt=\"image-20210421201636835\" style=\"zoom:67%;\" />\n\n<p>实例中，boot 文件的第一个属性用”d”表示。”d”在 Linux 中代表该文件是一个目录文件。</p>\n<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等：</p>\n<ul>\n<li><strong>当为[ d ]则是目录</strong></li>\n<li><strong>当为[ - ]则是文件</strong></li>\n<li><strong>若是[ l ]则表示为链接文档 ( link file )</strong></li>\n<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )</li>\n<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )</li>\n</ul>\n<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p>\n<p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p>\n<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>\n<p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421224446.jpeg\" alt=\"img\"></p>\n<p>从左至右用 0-9 这些数字来表示。</p>\n<p>第 0 位确定文件类型，第 1-3 位确定属主（该文件的所有者）拥有该文件的权限。第 4-6 位确定属组（所有者的同组用户）拥有该文件的权限，第 7-9 位确定其他用户拥有该文件的权限。</p>\n<p>其中：</p>\n<p>第 1、4、7 位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>\n<p>第 2、5、8 位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p>\n<p>第 3、6、9 位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>\n<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>\n<p>同时，在 Linux 系统中，用户是按组分类的，一个用户属于一个或多个组。</p>\n<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>\n<p>因此，Linux 系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>\n<p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p>\n<blockquote>\n<p>修改文件属性</p>\n</blockquote>\n<p><strong>1、chgrp：更改文件属组</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chgrp</span> [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>\n\n<p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R 的参数，那么该目录下的所有文件的属组都会更改。</p>\n<p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> [–R] 属主名 文件名</span><br><span class=\"line\"><span class=\"built_in\">chown</span> [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure>\n\n<p>==<strong>3、chmod：更改文件 9 个属性</strong>==</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure>\n\n<p>Linux 文件属性有两种设置方法，一种是数字，一种是符号。</p>\n<p>Linux 文件的基本权限就有九个，分别是 owner/group/others 三种身份各有自己的 read/write/execute 权限。</p>\n<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">r:4      w:2         x:1</span><br></pre></td></tr></table></figure>\n\n<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p>\n<ul>\n<li>owner = rwx = 4+2+1 = 7</li>\n<li>group = rwx = 4+2+1 = 7</li>\n<li>others= — = 0+0+0 = 0</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 770 filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件内容查看\"><a href=\"#文件内容查看\" class=\"headerlink\" title=\"文件内容查看\"></a>文件内容查看</h3><p>Linux 系统中使用以下命令来查看文件的内容：</p>\n<ul>\n<li>==<code>cat</code> 由第一行开始显示文件内容==</li>\n<li><code>tac</code>从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>\n<li>==<code>nl</code>显示的时候，顺道输出行号！==</li>\n<li><code>more</code>一页一页的显示文件内容（空格代表翻页，enter 代表向下看一行，:f 行号）</li>\n<li>==<code>less</code>与<code>more</code> 类似，但是比 <code>more</code>更好的是，他可以往前翻页！（空格翻页，上下键翻页，退出是 q 命令，查询字符串 / 要查询的字符串向下查询，向上查询使用 ? 要查询的字符串，n 向下寻找，N 向上寻找 ）==</li>\n<li><code>head</code>只看头几行 通过-n 参数来控制显示几行</li>\n<li><code>tail</code>只看尾巴几行</li>\n</ul>\n<p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：<code>man cp</code>。</p>\n<blockquote>\n<p>cat - 由第一行开始显示文件内容</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat [-AbEnTv]</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>\n<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>\n<li>-E ：将结尾的断行字节 $ 显示出来；</li>\n<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>\n<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>\n<li>-v ：列出一些看不出来的特殊字符</li>\n</ul>\n<blockquote>\n<p>tac - 由最后一行开始显示文件内容</p>\n</blockquote>\n<p>tac 与 cat 命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=dhcp</span><br><span class=\"line\">DEVICE=eth0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>nl - 显示行号</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nl [-bnw] 文件</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>\n<li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>\n<li>-w ：行号栏位的占用的位数。</li>\n</ul>\n<blockquote>\n<p>more - 一页一页翻动</p>\n</blockquote>\n<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>\n<ul>\n<li>空白键 (space)：代表向下翻一页；</li>\n<li>Enter ：代表向下翻『一行』；</li>\n<li>/字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>\n<li>:f ：立刻显示出档名以及目前显示的行数；</li>\n<li>q ：代表立刻离开 more ，不再显示该文件内容。</li>\n<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>\n</ul>\n<blockquote>\n<p>less - 一页一页翻动</p>\n</blockquote>\n<p>less 运行时可以输入的命令有：</p>\n<ul>\n<li>空白键 ：向下翻动一页；</li>\n<li>[pagedown]：向下翻动一页；</li>\n<li>[pageup] ：向上翻动一页；</li>\n<li>/字串 ：向下搜寻『字串』的功能；</li>\n<li>?字串 ：向上搜寻『字串』的功能；</li>\n<li>n ：重复前一个搜寻 (与 / 或 ? 有关！)</li>\n<li>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>\n<li>q ：离开 less 这个程序；</li>\n</ul>\n<blockquote>\n<p>head - 取出文件前面几行</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">head [-n number] 文件</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>\n<blockquote>\n<p>tail - 取出文件后面几行</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tail [-n number] 文件</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>\n<blockquote>\n<p>拓展：Linux 链接的概念（了解即可）</p>\n</blockquote>\n<p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p>\n<p>情况下，ln 命令产生硬链接。</p>\n<p><strong>硬连接</strong></p>\n<p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p>\n<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>\n<p><strong>软连接</strong></p>\n<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>\n<h3 id=\"Vim-编辑器\"><a href=\"#Vim-编辑器\" class=\"headerlink\" title=\"Vim 编辑器\"></a>Vim 编辑器</h3><blockquote>\n<p>什么是 Vim 编辑器</p>\n</blockquote>\n<p>Vim 是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>\n<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>\n<p>vim 则可以说是程序开发者的一项很好用的工具。</p>\n<p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>\n<p>连 vim 的官方网站 (<a href=\"http://www.vim.org/\">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>\n<p>vim 键盘图：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210422001208.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>三种使用模式</p>\n</blockquote>\n<p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是：</p>\n<p><strong>命令模式：</strong></p>\n<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p>\n<p>以下是常用的几个命令：</p>\n<ul>\n<li><strong>i</strong> 切换到输入模式，以输入字符。</li>\n<li><strong>x</strong> 删除当前光标所在处的字符。</li>\n<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。（如果是编辑模式，需要先退出编辑模式<code>esc</code>）</li>\n</ul>\n<p>若想要编辑文本：启动 Vim，进入了命令模式，按下 i，切换到输入模式。</p>\n<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>\n<p><strong>输入模式：</strong></p>\n<p>在命令模式下按下 i 就进入了输入模式。</p>\n<p>在输入模式中，可以使用以下按键：</p>\n<ul>\n<li>字符按键以及 Shift 组合，输入字符</li>\n<li>ENTER，回车键，换行</li>\n<li>BACK SPACE，退格键，删除光标前一个字符</li>\n<li>DEL，删除键，删除光标后一个字符</li>\n<li>方向键，在文本中移动光标</li>\n<li>HOME/END，移动光标到行首/行尾</li>\n<li>Page Up/Page Down，上/下翻页</li>\n<li>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</li>\n<li>ESC，退出输入模式，切换到命令模式</li>\n</ul>\n<p><strong>底线命令模式</strong></p>\n<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<ul>\n<li><strong>q</strong> 退出程序</li>\n<li><strong>w</strong> 保存文件</li>\n</ul>\n<p>按 ESC 键可随时退出底线命令模式。</p>\n<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210422001803.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>Vim 按键说明</p>\n</blockquote>\n<p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p>\n<h3 id=\"账号管理\"><a href=\"#账号管理\" class=\"headerlink\" title=\"账号管理\"></a>账号管理</h3><blockquote>\n<p>简介</p>\n</blockquote>\n<p>Linux 系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>\n<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>\n<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>\n<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>\n<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>\n<ul>\n<li>用户账号的添加、删除与修改。</li>\n<li>用户口令的管理。</li>\n<li>用户组的管理。</li>\n</ul>\n<blockquote>\n<p>用户账号的管理</p>\n</blockquote>\n<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>\n<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录 Shell 等资源。</p>\n<blockquote>\n<p>添加账号 - useradd</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradd 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>选项 :<ul>\n<li>-c comment 指定一段注释性描述</li>\n<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m 选项，可以创建主目录</li>\n<li>-g 用户组 指定用户所属的用户组</li>\n<li>-G 用户组，用户组 指定用户所属的附加组</li>\n<li>-m 　使用者目录如不存在则自动建立</li>\n<li>-s Shell 文件 指定用户的登录 Shell</li>\n<li>-u 用户号 指定用户的用户号，如果同时有-o 选项，则可以重复使用其他用户的标识号</li>\n</ul>\n</li>\n<li>用户名 :<ul>\n<li>指定新账号的登录名</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>切换用户</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">su username <span class=\"comment\">#username:需要切换的用户名</span></span><br><span class=\"line\">sudo su <span class=\"comment\">#普通用户切换到root用户</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>切换用户的命令为：su username 【username 是你的用户名哦】</li>\n<li>从普通用户切换到 root 用户，还可以使用命令：sudo su</li>\n<li>在终端输入 exit 或 logout 或使用快捷方式 ctrl+d，可以退回到原来用户，其实 ctrl+d 也是执行的 exit 命令</li>\n<li>在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在 su 和 username 之间加-，例如：【su - root】</li>\n</ol>\n<p>==$ 表示普通用户==</p>\n<p>==#表示超级用户，也就是 root 用户==</p>\n<blockquote>\n<p>删除用户 - userdel</p>\n</blockquote>\n<p>如果一个用户的账号不再使用，可以从系统中删除。</p>\n<p>删除用户账号就是要将/etc/passwd 等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>\n<p>删除一个已有的用户账号使用 userdel 命令，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">userdel 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@kuangshen home]<span class=\"meta\"># userdel -r 用户名</span></span><br></pre></td></tr></table></figure>\n\n<p>此命令删除用户 kuangshen 在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group 等）的记录，同时删除用户的主目录。</p>\n<blockquote>\n<p>修改用户 - usermod</p>\n</blockquote>\n<p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录 Shell 等。</p>\n<p>修改已有用户的信息使用 usermod 命令，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">usermod 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>常用的选项包括-c, -d, -m, -g, -G, -s, -u 以及-o 等，这些选项的意义与 useradd 命令中的选项一样，可以为用户指定新的资源值。</p>\n<blockquote>\n<p>用户密码的管理</p>\n</blockquote>\n<p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>\n<p>指定和修改用户口令的 Shell 命令是 passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p>\n<p>命令的格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">passwd 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>可使用的选项：</p>\n<ul>\n<li>-l 锁定口令，即禁用账号。</li>\n<li>-u 口令解锁。</li>\n<li>-d 使账号无口令。</li>\n<li>-f 强迫用户下次登录时修改口令。</li>\n</ul>\n<p>如果默认用户名，则修改当前用户的口令。</p>\n<p>命令修改该用户自己的口令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ passwd</span><br><span class=\"line\">Old password:******</span><br><span class=\"line\">New password:*******</span><br><span class=\"line\">Re-enter new password:*******</span><br></pre></td></tr></table></figure>\n\n<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># passwd kuangshen</span></span><br><span class=\"line\">New password:*******</span><br><span class=\"line\">Re-enter new password:*******</span><br></pre></td></tr></table></figure>\n\n<p>普通用户修改自己的口令时，passwd 命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>\n<p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用 8 位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p>\n<p>为用户指定空口令时，执行下列形式的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># passwd -d kuangshen</span></span><br></pre></td></tr></table></figure>\n\n<p>此命令将用户 kuangshen 的口令删除，这样用户 kuangshen 下一次登录时，系统就不再允许该用户登录了。</p>\n<p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># passwd -l kuangshen</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户组管理\"><a href=\"#用户组管理\" class=\"headerlink\" title=\"用户组管理\"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同 Linux 系统对用户组的规定有所不同，如 Linux 下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>\n<p>用户组的管理涉及用户组的添加、删除和修改。==组的增加、删除和修改实际上就是对/etc/group 文件的更新。==</p>\n<blockquote>\n<p>添加用户组 - groupadd</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd 选项 用户组</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group</span><br></pre></td></tr></table></figure>\n\n<p>可以使用的选项有：</p>\n<ul>\n<li>-g GID 指定新用户组的组标识号（GID）。</li>\n<li>-o 一般与-g 选项同时使用，表示新用户组的 GID 可以与系统已有用户组的 GID 相同。</li>\n</ul>\n<blockquote>\n<p>删除用户组 - groupdel</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupdel 用户组</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改用户组 - groupmod</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupmod 选项 用户组</span><br></pre></td></tr></table></figure>\n\n<p>常用的选项有：</p>\n<ul>\n<li>-g GID 为用户组指定新的组标识号。</li>\n<li>-o 与-g 选项同时使用，用户组的新 GID 可以与系统已有用户组的 GID 相同。</li>\n<li>-n 新用户组 将用户组的名字改为新名字</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此命令将组group2的组标识号修改为102。</span></span><br><span class=\"line\">groupmod -g 102 group2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将组group2的标识号改为10000，组名修改为group3。</span></span><br><span class=\"line\">groupmod –g 10000 -n group3 group2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>切换组</p>\n</blockquote>\n<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>\n<p>用户可以在登录后，使用命令 newgrp 切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ newgrp root</span><br></pre></td></tr></table></figure>\n\n<p>这条命令将当前用户切换到 root 用户组，前提条件是 root 用户组确实是该用户的主组或附加组。</p>\n<blockquote>\n<p>/etc/passwd</p>\n</blockquote>\n<p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>\n<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group 等。</p>\n<p>下面分别介绍这些文件的内容。</p>\n<p>/etc/passwd 文件是用户管理工作涉及的最重要的一个文件。</p>\n<p>Linux 系统中的每个用户都在/etc/passwd 文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>\n<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃ cat <span class=\"keyword\">/etc/</span>passwd</span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">root:</span>x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:Superuser:/:</span><br><span class=\"line\"><span class=\"symbol\">daemon:</span>x:<span class=\"number\">1</span>:<span class=\"number\">1</span>:System daemons:/etc:</span><br><span class=\"line\"><span class=\"symbol\">bin:</span>x:<span class=\"number\">2</span>:<span class=\"number\">2</span>:Owner of system commands:/bin:</span><br><span class=\"line\"><span class=\"symbol\">sys:</span>x:<span class=\"number\">3</span>:<span class=\"number\">3</span>:Owner of system files:<span class=\"keyword\">/usr/</span>sys:</span><br><span class=\"line\"><span class=\"symbol\">adm:</span>x:<span class=\"number\">4</span>:<span class=\"number\">4</span>:System accounting:<span class=\"keyword\">/usr/</span>adm:</span><br><span class=\"line\"><span class=\"symbol\">uucp:</span>x:<span class=\"number\">5</span>:<span class=\"number\">5</span>:UUCP administrator:<span class=\"keyword\">/usr/</span>lib/uucp:</span><br><span class=\"line\"><span class=\"symbol\">auth:</span>x:<span class=\"number\">7</span>:<span class=\"number\">21</span>:Authentication administrator:<span class=\"keyword\">/tcb/</span>files/auth:</span><br><span class=\"line\"><span class=\"symbol\">cron:</span>x:<span class=\"number\">9</span>:<span class=\"number\">16</span>:Cron daemon:<span class=\"keyword\">/usr/</span>spool/cron:</span><br><span class=\"line\"><span class=\"symbol\">listen:</span>x:<span class=\"number\">37</span>:<span class=\"number\">4</span>:Network daemon:<span class=\"keyword\">/usr/</span>net/nls:</span><br><span class=\"line\"><span class=\"symbol\">lp:</span>x:<span class=\"number\">71</span>:<span class=\"number\">18</span>:Printer administrator:<span class=\"keyword\">/usr/</span>spool/lp:</span><br></pre></td></tr></table></figure>\n\n<p>从上面的例子我们可以看到，/etc/passwd 中一行记录对应着一个用户，每行记录又被冒号(:)分隔为 7 个字段，其格式和具体含义如下：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录<span class=\"keyword\">Shell</span></span><br></pre></td></tr></table></figure>\n\n<p>1）”用户名”是代表用户账号的字符串。</p>\n<p>通常长度不超过 8 个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p>\n<p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>\n<p>2）“口令”一些系统中，存放着加密后的用户口令字。</p>\n<p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd 文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多 Linux 系统（如 SVR4）都使用了 shadow 技术，把真正的加密后的用户口令字存放到/etc/shadow 文件中，而在/etc/passwd 文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>\n<p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p>\n<p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录 Shell 等。</p>\n<p>通常用户标识号的取值范围是 0 ～ 65 535。0 是超级用户 root 的标识号，1 ～ 99 由系统保留，作为管理账号，普通用户的标识号从 100 开始。在 Linux 系统中，这个界限是 500。</p>\n<p>4）“组标识号”字段记录的是用户所属的用户组。</p>\n<p>它对应着/etc/group 文件中的一条记录。</p>\n<p>5)“注释性描述”字段记录着用户的一些个人情况。</p>\n<p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的 Linux 系统中，这个字段的格式并没有统一。在许多 Linux 系统中，这个字段存放的是一段任意的注释性描述文字，用作 finger 命令的输出。</p>\n<p>6)“主目录”，也就是用户的起始工作目录。</p>\n<p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>\n<p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即 Shell。</p>\n<p>Shell 是用户与 Linux 系统之间的接口。Linux 的 Shell 有许多种，每种都有不同的特点。常用的有 sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p>\n<p>系统管理员可以根据系统情况和用户习惯为用户指定某个 Shell。如果不指定 Shell，那么系统使用 sh 为默认的登录 Shell，即这个字段的值为/bin/sh。</p>\n<p>用户的登录 Shell 也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p>\n<p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些 Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>\n<p>8)系统中有一类用户称为伪用户（pseudo users）。</p>\n<p>这些用户在/etc/passwd 文件中也占有一条记录，但是不能登录，因为它们的登录 Shell 为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p>\n<p>常见的伪用户如下所示：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">伪 用 户 含 义</span><br><span class=\"line\">bin 拥有可执行的用户命令文件</span><br><span class=\"line\">sys 拥有系统文件</span><br><span class=\"line\">adm 拥有帐户文件</span><br><span class=\"line\">uucp UUCP使用</span><br><span class=\"line\"><span class=\"built_in\">lp</span> <span class=\"built_in\">lp</span>或lpd子系统使用</span><br><span class=\"line\">nobody NFS使用</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>/etc/shadow</p>\n</blockquote>\n<p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet 等，它们也都各自为相关的进程和文件所需要。</strong></p>\n<p>由于/etc/passwd 文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的 Linux 系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow 文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p>\n<p><strong>2、/etc/shadow 中的记录行与/etc/passwd 中的一一对应，它由 pwconv 命令根据/etc/passwd 中的数据自动产生</strong></p>\n<p>它的文件格式与/etc/passwd 类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>“登录名”是与/etc/passwd 文件中的登录名相一致的用户账号</li>\n<li>“口令”字段存放的是加密后的用户口令字，长度为 13 个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li>\n<li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在 SCO Linux 中，这个时间起点是 1970 年 1 月 1 日。</li>\n<li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li>\n<li>“最大时间间隔”指的是口令保持有效的最大天数。</li>\n<li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li>\n<li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li>\n<li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li>\n</ol>\n<blockquote>\n<p>/etc/group</p>\n</blockquote>\n<p>用户组的所有信息都存放在/etc/group 文件中。</p>\n<p>将用户分组是 Linux 系统中对用户进行管理及控制访问权限的一种手段。</p>\n<p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p>\n<p>当一个用户同时是多个组中的成员时，在/etc/passwd 文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p>\n<p>用户要访问属于附加组的文件时，必须首先使用 newgrp 命令使自己成为所要访问的组中的成员。</p>\n<p>用户组的所有信息都存放在/etc/group 文件中。此文件的格式也类似于/etc/passwd 文件，由冒号(:)隔开若干个字段，这些字段有：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">组名:口令:组标识号:组内用户列表</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd 中的登录名一样，组名不应重复。</li>\n<li>“口令”字段存放的是用户组加密后的口令字。一般 Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li>\n<li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li>\n<li>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li>\n</ol>\n<h3 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h3><blockquote>\n<p>概述</p>\n</blockquote>\n<p>Linux 磁盘管理好坏直接关系到整个系统的性能问题。</p>\n<p>Linux 磁盘管理常用命令为 df、du。</p>\n<ul>\n<li>df ：列出文件系统的整体磁盘使用量</li>\n<li>du：检查磁盘空间使用量</li>\n</ul>\n<blockquote>\n<p>df</p>\n</blockquote>\n<p>df 命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">df</span> [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>\n<li>-k ：以 KBytes 的容量显示各文件系统；</li>\n<li>-m ：以 MBytes 的容量显示各文件系统；</li>\n<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>\n<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>\n<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>\n<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>\n</ul>\n<blockquote>\n<p>du</p>\n</blockquote>\n<p>Linux du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看，还是和 df 命令有一些区别的，这里介绍 Linux du 命令。</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">du</span> [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>\n<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>\n<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>\n<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>\n<li>-k ：以 KBytes 列出容量显示；</li>\n<li>-m ：以 MBytes 列出容量显示；</li>\n</ul>\n<blockquote>\n<p>磁盘挂载与卸除</p>\n</blockquote>\n<p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p>\n<p>Linux 的磁盘挂载使用 mount 命令，卸载使用 umount 命令。</p>\n<p>磁盘挂载语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</span><br></pre></td></tr></table></figure>\n\n<p>磁盘卸载命令 umount 语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>\n<li>-n ：不升级 /etc/mtab 情况下卸除。</li>\n</ul>\n<h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><blockquote>\n<p>什么是进程</p>\n</blockquote>\n<ol>\n<li>在 Linux 中，每一个程序都是有自己的一个进程，每一个进程都有一个 id 号！</li>\n<li>每一个进程都会有一个父进程！</li>\n<li>进程可以有两种存在方式：前台！后台运行！</li>\n<li>一般的话服务都是后台运行，基本的程序都是前台进行的！</li>\n</ol>\n<blockquote>\n<p>命令</p>\n</blockquote>\n<p><code>ps</code> 查看当前系统中正在执行的各种进程信息</p>\n<p>参数选项：</p>\n<ul>\n<li>-A 显示当前终端运行的所有的进程信息</li>\n<li>-u 以用户的信息显示进程</li>\n<li>-x 显示后台运行的参数</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ps -aux 查看所有的进程</span></span><br><span class=\"line\">ps -aux|</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># | 在Linux中叫做管道符 A|B</span></span><br><span class=\"line\"><span class=\"comment\"># grep 查找文件中符合条件的字符串</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>ps -ef</strong> ：可以查到父进程的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps -ef|grep mysql <span class=\"comment\">#看父进程我们一般通过目录树结构来查看！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程树</span></span><br><span class=\"line\">pstree -pu</span><br><span class=\"line\">     -p 显示父<span class=\"built_in\">id</span></span><br><span class=\"line\">     -u 显示用户组</span><br></pre></td></tr></table></figure>\n\n<p>结束进程：杀掉进程，等价于 window 结束任务</p>\n<p><strong>kill -9</strong> 进程的 id</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -9 pid</span><br></pre></td></tr></table></figure>\n","categories":["Linux"],"tags":["技巧","笔记"]},{"title":"SpringCloud 快速搭建","url":"/2021/06/22/939440f7.html","content":"<h2 id=\"SpringCloud-五大组件\"><a href=\"#SpringCloud-五大组件\" class=\"headerlink\" title=\"SpringCloud 五大组件\"></a>SpringCloud 五大组件</h2><ul>\n<li>服务注册与发现——Netflix Eureka</li>\n<li>负载均衡：<ul>\n<li>客户端负载均衡——Netflix Ribbon</li>\n<li>服务端负载均衡：——Feign(其也是依赖于 Ribbon，只是将调用方式 RestTemplete 更改成 Service 接口)</li>\n</ul>\n</li>\n<li>断路器——Netflix Hystrix</li>\n<li>服务网关——Netflix Zuul</li>\n<li>分布式配置——Spring Cloud Config</li>\n</ul>\n<h2 id=\"常见面试题\"><a href=\"#常见面试题\" class=\"headerlink\" title=\"常见面试题\"></a>常见面试题</h2><ul>\n<li>什么是微服务？</li>\n<li>微服务之间是如何独立通讯的？</li>\n<li>SpringCloud 和 Dubbo 有那些区别？</li>\n<li>SpringBoot 和 SpringCloud，请谈谈你对他们的理解</li>\n<li>什么是服务熔断？什么是服务降级？</li>\n<li>微服务的优缺点分别是什么？说下你在项目开发中遇到的坑</li>\n<li>你所知道的微服务技术栈有哪些？列举一二</li>\n<li>Eureka 和 Zookeeper 都可以提供服务注册与发现的功能，请说说两者的区别</li>\n</ul>\n<h2 id=\"微服务概述\"><a href=\"#微服务概述\" class=\"headerlink\" title=\"微服务概述\"></a>微服务概述</h2><h3 id=\"什么是微服务\"><a href=\"#什么是微服务\" class=\"headerlink\" title=\"什么是微服务\"></a>什么是微服务</h3><blockquote>\n<p>什么是微服务？</p>\n</blockquote>\n<p>微服务(Microservice Architecture) 是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。</p>\n<p>究竟什么是微服务呢？我们在此引用 ThoughtWorks 公司的首席科学家 Martin Fowler 于 2014 年提出的一段话：</p>\n<p>原文：<a href=\"https://martinfowler.com/articles/microservices.html\">https://martinfowler.com/articles/microservices.html</a></p>\n<p>汉化：<a href=\"https://www.cnblogs.com/liuning8023/p/4493156.html\">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p>\n<ul>\n<li>就目前而言，对于微服务，业界并没有一个统一的，标准的定义。</li>\n<li>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，<strong>它体长将单一的应用程序划分成一组小的服务</strong>，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(HTTP)互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(<strong>Maven</strong>)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</li>\n</ul>\n<blockquote>\n<p>再来从技术维度角度理解下：</p>\n</blockquote>\n<ul>\n<li>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</li>\n</ul>\n<h3 id=\"微服务与微服务架构\"><a href=\"#微服务与微服务架构\" class=\"headerlink\" title=\"微服务与微服务架构\"></a>微服务与微服务架构</h3><blockquote>\n<p>微服务</p>\n</blockquote>\n<p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是 IDEA 中的一个个微服务工程，或者 Moudel。IDEA 工具里面使用 Maven 开发的一个个独立的小 Moudel，它具体是使用 SpringBoot 开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p>\n<blockquote>\n<p>微服务架构</p>\n</blockquote>\n<p>一种新的架构形式，Martin Fowler 于 2014 年提出。</p>\n<p>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如 HTTP)互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具(如 Maven)**对其进行构建。</p>\n<h3 id=\"微服务优缺点\"><a href=\"#微服务优缺点\" class=\"headerlink\" title=\"微服务优缺点\"></a>微服务优缺点</h3><blockquote>\n<p>优点</p>\n</blockquote>\n<ul>\n<li>单一职责原则；</li>\n<li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li>\n<li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li>\n<li>微服务能够被小团队单独开发，这个团队只需 2-5 个开发人员组成；</li>\n<li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li>\n<li>微服务能使用不同的语言开发；</li>\n<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如 jenkins，Hudson，bamboo；</li>\n<li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li>\n<li>微服务允许利用和融合最新技术；</li>\n<li>微服务只是业务逻辑的代码，不会和 HTML，CSS，或其他的界面混合;</li>\n<li>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</li>\n</ul>\n<blockquote>\n<p>缺点</p>\n</blockquote>\n<ul>\n<li>开发人员要处理分布式系统的复杂性；</li>\n<li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li>\n<li>系统部署依赖问题；</li>\n<li>服务间通信成本问题；</li>\n<li>数据一致性问题；</li>\n<li>系统集成测试问题；</li>\n<li>性能和监控问题；</li>\n</ul>\n<h3 id=\"微服务技术栈\"><a href=\"#微服务技术栈\" class=\"headerlink\" title=\"微服务技术栈\"></a>微服务技术栈</h3><table>\n<thead>\n<tr>\n<th><strong>微服务技术条目</strong></th>\n<th>落地技术</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>服务开发</td>\n<td>SpringBoot、Spring、SpringMVC 等</td>\n</tr>\n<tr>\n<td>服务配置与管理</td>\n<td>Netfix 公司的 Archaius、阿里的 Diamond 等</td>\n</tr>\n<tr>\n<td>服务注册与发现</td>\n<td>Eureka、Consul、Zookeeper 等</td>\n</tr>\n<tr>\n<td>服务调用</td>\n<td>Rest、PRC、gRPC</td>\n</tr>\n<tr>\n<td>服务熔断器</td>\n<td>Hystrix、Envoy 等</td>\n</tr>\n<tr>\n<td>负载均衡</td>\n<td>Ribbon、Nginx 等</td>\n</tr>\n<tr>\n<td>服务接口调用(客户端调用服务的简化工具)</td>\n<td>Fegin 等</td>\n</tr>\n<tr>\n<td>消息队列</td>\n<td>Kafka、RabbitMQ、ActiveMQ 等</td>\n</tr>\n<tr>\n<td>服务配置中心管理</td>\n<td>SpringCloudConfig、Chef 等</td>\n</tr>\n<tr>\n<td>服务路由(API 网关)</td>\n<td>Zuul 等</td>\n</tr>\n<tr>\n<td>服务监控</td>\n<td>Zabbix、Nagios、Metrics、Specatator 等</td>\n</tr>\n<tr>\n<td>全链路追踪</td>\n<td>Zipkin、Brave、Dapper 等</td>\n</tr>\n<tr>\n<td>数据流操作开发包</td>\n<td>SpringCloud Stream(封装与 Redis，Rabbit，Kafka 等发送接收消息)</td>\n</tr>\n<tr>\n<td>时间消息总栈</td>\n<td>SpringCloud Bus</td>\n</tr>\n<tr>\n<td>服务部署</td>\n<td>Docker、OpenStack、Kubernetes 等</td>\n</tr>\n</tbody></table>\n<h3 id=\"为什么选择-SpringCloud-作为微服务架构\"><a href=\"#为什么选择-SpringCloud-作为微服务架构\" class=\"headerlink\" title=\"为什么选择 SpringCloud 作为微服务架构\"></a>为什么选择 SpringCloud 作为微服务架构</h3><ol>\n<li><p><strong>选型依据</strong></p>\n<ul>\n<li>整体解决方案和框架成熟度</li>\n<li>社区热度</li>\n<li>可维护性</li>\n<li>学习曲线</li>\n</ul>\n</li>\n<li><p><strong>当前各大 IT 公司用的微服务架构有那些？</strong></p>\n<ul>\n<li>阿里：dubbo+HFS</li>\n<li>京东：JFS</li>\n<li>新浪：Motan</li>\n<li>当当网：DubboX</li>\n</ul>\n</li>\n<li><p>各微服务框架对比</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210424223415.png\" alt=\"image-20210424223407910\"></p>\n</li>\n</ol>\n<h2 id=\"SpringCloud-入门概述\"><a href=\"#SpringCloud-入门概述\" class=\"headerlink\" title=\"SpringCloud 入门概述\"></a>SpringCloud 入门概述</h2><h3 id=\"SpringCloud-是什么？\"><a href=\"#SpringCloud-是什么？\" class=\"headerlink\" title=\"SpringCloud 是什么？\"></a>SpringCloud 是什么？</h3><p>Spring 官网：<a href=\"https://spring.io/\">https://spring.io/</a></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210424223656.png\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210424223702.png\" alt=\"img\"></p>\n<hr>\n<ul>\n<li>Spring Cloud 是一个微服务框架，相比 Dubbo 等 RPC 框架, <strong>Spring Cloud 提供的全套的分布式系统解决方案</strong>。</li>\n<li>Spring Cloud 对微服务基础框架 Netflix 的多个开源组件进行了封装，同时又实现了和云端平台以及和 Spring Boot 开发框架的集成。</li>\n<li>Spring Cloud 为微服务架构开发涉及的<strong>配置管理，服务治理，熔断机制，智能路由，微代理，控制总线，一次性 token，全局一致性锁，leader 选举，分布式 session，集群状态</strong>管理等操作提供了一种简单的开发方式。</li>\n<li>Spring Cloud 为开发者提供了快速构建<strong>分布式系统的工具</strong>，开发者可以快速的启动服务或构建应用、同时能够快速和云平台资源进行对接。</li>\n</ul>\n<h3 id=\"SpringCloud-和-SpringBoot-的关系\"><a href=\"#SpringCloud-和-SpringBoot-的关系\" class=\"headerlink\" title=\"SpringCloud 和 SpringBoot 的关系\"></a>SpringCloud 和 SpringBoot 的关系</h3><ul>\n<li>SpringBoot 专注于开苏方便的开发单个个体微服务；</li>\n<li>SpringCloud 是关注全局的微服务协调整理治理框架，它将 SpringBoot 开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li>\n<li>SpringBoot 可以离开 SpringCloud 独立使用，开发项目，但 SpringCloud 离不开 SpringBoot，属于依赖关系；</li>\n<li><strong>SpringBoot 专注于快速、方便的开发单个个体微服务，SpringCloud 关注全局的服务治理框架；</strong></li>\n</ul>\n<h3 id=\"Dubbo-和-SpringCloud-技术选型\"><a href=\"#Dubbo-和-SpringCloud-技术选型\" class=\"headerlink\" title=\"Dubbo 和 SpringCloud 技术选型\"></a>Dubbo 和 SpringCloud 技术选型</h3><h5 id=\"分布式-服务治理-Dubbo\"><a href=\"#分布式-服务治理-Dubbo\" class=\"headerlink\" title=\"分布式+服务治理 Dubbo\"></a>分布式+服务治理 Dubbo</h5><p>目前成熟的互联网架构，应用服务化拆分 + 消息中间件</p>\n<h5 id=\"Dubbo-和-SpringCloud-对比\"><a href=\"#Dubbo-和-SpringCloud-对比\" class=\"headerlink\" title=\"Dubbo 和 SpringCloud 对比\"></a>Dubbo 和 SpringCloud 对比</h5><p>最大区别：Spring Cloud 抛弃了 Dubbo 的 RPC 通信，采用的是基于 HTTP 的 REST 方式</p>\n<p>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生 RPC 带来的问题。而且 REST 相比 RPC 更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这个优点在当下强调快速演化的微服务环境下，显得更加合适。</p>\n<h3 id=\"SpringCloud-能干嘛？\"><a href=\"#SpringCloud-能干嘛？\" class=\"headerlink\" title=\"SpringCloud 能干嘛？\"></a>SpringCloud 能干嘛？</h3><ul>\n<li>Distributed/versioned configuration 分布式/版本控制配置</li>\n<li>Service registration and discovery 服务注册与发现</li>\n<li>Routing 路由</li>\n<li>Service-to-service calls 服务到服务的调用</li>\n<li>Load balancing 负载均衡配置</li>\n<li>Circuit Breakers 断路器</li>\n<li>Distributed messaging 分布式消息管理</li>\n</ul>\n<p><strong>自学参考书：</strong></p>\n<ul>\n<li>SpringCloud Netflix 中文文档：<a href=\"https://springcloud.cc/spring-cloud-netflix.html\">https://springcloud.cc/spring-cloud-netflix.html</a></li>\n<li>SpringCloud 中文 API 文档(官方文档翻译版)：<a href=\"https://springcloud.cc/spring-cloud-dalston.html\">https://springcloud.cc/spring-cloud-dalston.html</a></li>\n<li>SpringCloud 中国社区：<a href=\"http://springcloud.cn/\">http://springcloud.cn/</a></li>\n<li>SpringCloud 中文网：<a href=\"https://springcloud.cc/\">https://springcloud.cc</a></li>\n</ul>\n<h2 id=\"Eureka-服务注册与发现\"><a href=\"#Eureka-服务注册与发现\" class=\"headerlink\" title=\"Eureka 服务注册与发现\"></a>Eureka 服务注册与发现</h2><h3 id=\"什么是-Eureka？\"><a href=\"#什么是-Eureka？\" class=\"headerlink\" title=\"什么是 Eureka？\"></a>什么是 Eureka？</h3><ul>\n<li>Netflix 在涉及 Eureka 时，遵循的就是 API 原则.</li>\n<li>Eureka 是 Netflix 的有个子模块，也是核心模块之一。Eureka 是基于 REST 的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于 Dubbo 的注册中心，比如 Zookeeper.</li>\n</ul>\n<h3 id=\"原理理解\"><a href=\"#原理理解\" class=\"headerlink\" title=\"原理理解\"></a>原理理解</h3><ul>\n<li>Eureka 基本的架构<ul>\n<li>Springcloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务注册与发现 (对比 Zookeeper).</li>\n<li>Eureka 采用了 C-S 的架构设计，EurekaServer 作为服务注册功能的服务器，他是服务注册中心.</li>\n<li>而系统中的其他微服务，使用 Eureka 的客户端连接到 EurekaServer 并维持心跳连接。这样系统的维护人员就可以通过 EurekaServer 来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如 Zuul) 就可以通过 EurekaServer 来发现系统中的其他微服务，并执行相关的逻辑.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210516114346.png\" alt=\"image-20210516114206565\"></p>\n<ul>\n<li>和 Dubbo 架构对比.</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210426230548.png\" alt=\"img\"></p>\n<ul>\n<li>Eureka 包含两个组件：Eureka Server 和 Eureka Client.</li>\n</ul>\n<ul>\n<li>Eureka Server 提供服务注册，各个节点启动后，会在 EurekaServer 中进行注册，这样 Eureka Server 中的服务注册表中将会储存所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到.</li>\n</ul>\n<ul>\n<li><p>Eureka Client 是一个 Java 客户端，用于简化 EurekaServer 的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向 EurekaServer 发送心跳 (默认周期为 30 秒) 。如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，EurekaServer 将会从服务注册表中把这个服务节点移除掉 (默认周期为 90s).</p>\n</li>\n<li><p><strong>三大角色</strong></p>\n<ul>\n<li>Eureka Server：提供服务的注册与发现</li>\n<li>Service Provider：服务生产方，将自身服务注册到 Eureka 中，从而使服务消费方能狗找到</li>\n<li>Service Consumer：服务消费方，从 Eureka 中获取注册服务列表，从而找到消费服务</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"构建-Eureka\"><a href=\"#构建-Eureka\" class=\"headerlink\" title=\"构建 Eureka\"></a>构建 Eureka</h3><h4 id=\"eureka-server\"><a href=\"#eureka-server\" class=\"headerlink\" title=\"eureka-server\"></a>eureka-server</h4><ol>\n<li><p>新建 springcloud-eureka-7001 模块</p>\n</li>\n<li><p>pom.xml 配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导包~--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--导入Eureka Server依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--热部署工具--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7001</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">localhost</span> <span class=\"comment\">#eureka服务端的实例名称</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#是否向eureka注册中心注册自己</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\"># false代表自己为注册中心</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span> <span class=\"comment\"># 监控页面</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></li>\n<li><p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动之后，访问http://127.0.0.1/</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-26 23:24</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span> <span class=\"comment\">//服务端的启动类，可以接受别人注册进来</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EurekaServer_7001</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaServer_7001.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>启动成功后访问 <a href=\"http://localhost:7001/\">http://localhost:7001/</a> 得到以下页面</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210427094523.png\" alt=\"image-20210427094515719\"></p>\n</li>\n</ol>\n<h4 id=\"eureka-client\"><a href=\"#eureka-client\" class=\"headerlink\" title=\"eureka-client\"></a>eureka-client</h4><p><strong>只需要在之前的 springcloud-provider-dept-8001</strong></p>\n<ol>\n<li><p>导入 Eureka 依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Eureka --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>application 中新增 Eureka 配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Eureka配置：配置服务注册中心地址</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:7001/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">springcloud-provider-dept-8001</span> <span class=\"comment\">#修改eureka上的默认描述</span></span><br></pre></td></tr></table></figure></li>\n<li><p>为主启动类添加@EnableEurekaClient 注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-25 0:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span> <span class=\"comment\">//在服务启动后自动注册到eureka中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeptProvider_8001</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DeptProvider_8001.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>先启动 7001 服务端后启动 8001 客户端进行测试，然后访问监控页<a href=\"http://localhost:7001/\">http://localhost:7001/</a> 查看结果如图，成功</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210427100932.png\" alt=\"image-20210427100904350\"></p>\n</li>\n<li><p>配置关于服务加载的监控信息</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210427101125.png\" alt=\"image-20210427101125312\"></p>\n</li>\n<li><p>在 pom.xml 文件中添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--actuator完善监控信息--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>application.yml 中添加配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># info配置</span></span><br><span class=\"line\"><span class=\"attr\">info:</span></span><br><span class=\"line\">  <span class=\"comment\"># 项目配置</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span></span><br><span class=\"line\">    <span class=\"comment\">#项目名称</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springcloud-dept8001</span></span><br><span class=\"line\">    <span class=\"comment\">#公司名称</span></span><br><span class=\"line\">    <span class=\"attr\">company:</span> <span class=\"string\">www.ljjblog.com</span></span><br></pre></td></tr></table></figure></li>\n<li><p>刷新监控页，进入服务</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210427103412.png\" alt=\"image-20210427103412175\" style=\"zoom:50%;\" /></li>\n<li><p>跳转页面如下所示</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210427103451.png\" alt=\"image-20210427103451458\"></p>\n</li>\n</ol>\n<h3 id=\"Eureka-自我保护机制：好死不如赖活着\"><a href=\"#Eureka-自我保护机制：好死不如赖活着\" class=\"headerlink\" title=\"Eureka 自我保护机制：好死不如赖活着\"></a>Eureka 自我保护机制：好死不如赖活着</h3><p>一句话总结就是：<strong>某时刻某一个微服务不可用，eureka 不会立即清理，依旧会对该微服务的信息进行保存！</strong></p>\n<ul>\n<li>默认情况下，当 eureka server 在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除<strong>（默认是 90 秒）</strong>，但是，如果短时间内丢失大量的实例心跳，便会触发 eureka server 的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把 eureka server 一起重启（因为在开发过程中不会修改 eureka 注册中心），<strong>当一分钟内收到的心跳数大量减少时，会触发该保护机制</strong>。可以在 eureka 管理界面看到 Renews threshold 和 Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：==EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE==.从警告中可以看到，eureka 认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka 会保护这些实例，不会把它们从注册表中删掉。</li>\n<li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果 eureka 因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到 eureka server 了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server 在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka 会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka 会自动退出保护模式。自我保护模式可以让集群更加健壮。</li>\n<li>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在 eureka server 配置文件中加上如下配置即可：==eureka.server.enable-self-preservation=false==【<strong>不推荐关闭自我保护机制</strong>】</li>\n</ul>\n<h3 id=\"Eureka-集群搭建\"><a href=\"#Eureka-集群搭建\" class=\"headerlink\" title=\"Eureka 集群搭建\"></a>Eureka 集群搭建</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210427143231.png\" alt=\"image-20210427143231543\" style=\"zoom:50%;\" />\n\n<h4 id=\"1、初始化\"><a href=\"#1、初始化\" class=\"headerlink\" title=\"1、初始化\"></a>1、初始化</h4><p>新建 springcloud-eureka-7002、springcloud-eureka-7003 模块</p>\n<p>1.为 pmx.xml 添加依赖（与 springcloud-eureka-7001 相同）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 导包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.为 application.yml 配置（与 springcloud-eureka-7001 相同）</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7002</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">localhost</span> <span class=\"comment\">#eureka服务端的实例名称</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#是否向eureka注册中心注册自己</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\"># false代表自己为注册中心</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span> <span class=\"comment\"># 监控页面</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>\n\n<p>3.主启动类(与 springcloud-eureka-7001 相同)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动之后，访问http://127.0.0.1/</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-26 23:24</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span> <span class=\"comment\">//服务端的启动类，可以接受别人注册进来</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EurekaServer_7002</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaServer_7002.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、集群成员之间互相关联\"><a href=\"#2、集群成员之间互相关联\" class=\"headerlink\" title=\"2、集群成员之间互相关联\"></a>2、集群成员之间互相关联</h4><p>配置一些自定义本机名字，找到本机 hosts 文件并打开</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210427145825.png\" alt=\"image-20210427145825690\"></p>\n<p>在 hosts 文件最后加上，要访问的本机名称，默认是 localhost</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210427145918.png\" alt=\"image-20210427145918816\"></p>\n<p>在集群中使 springcloud-eureka-7001 关联 springcloud-eureka-7002、springcloud-eureka-7003</p>\n<p>完整的 springcloud-eureka-7001 下的 application.yml 如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7001</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">eureka7001.com</span> <span class=\"comment\">#eureka服务端的实例名称</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#是否向eureka注册中心注册自己</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\"># false代表自己为注册中心</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span> <span class=\"comment\"># 监控页面</span></span><br><span class=\"line\">      <span class=\"comment\">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\"># 集群（关联）：7001关联7002、7003</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure>\n\n<p>在集群中使 springcloud-eureka-7002 关联 springcloud-eureka-7001、springcloud-eureka-7003</p>\n<p>完整的 springcloud-eureka-7002 下的 application.yml 如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7002</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">eureka7002.com</span> <span class=\"comment\">#eureka服务端的实例名称</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#是否向eureka注册中心注册自己</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\"># false代表自己为注册中心</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span> <span class=\"comment\"># 监控页面</span></span><br><span class=\"line\">      <span class=\"comment\">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\"># 集群（关联）：7001关联7002、7003</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure>\n\n<p>在集群中使 springcloud-eureka-7003 关联 springcloud-eureka-7001、springcloud-eureka-7002</p>\n<p>完整的 springcloud-eureka-7003 下的 application.yml 如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7003</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">eureka7003.com</span> <span class=\"comment\">#eureka服务端的实例名称</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#是否向eureka注册中心注册自己</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\"># false代表自己为注册中心</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span> <span class=\"comment\"># 监控页面</span></span><br><span class=\"line\">      <span class=\"comment\">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class=\"line\">      <span class=\"comment\"># 集群（关联）：7001关联7002、7003</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 springcloud-provider-dept-8001 下的 yml 配置文件，修改<strong>Eureka 配置：配置服务注册中心地址</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Eureka配置，服务注册到哪里</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"comment\">#启用eureka集群配置</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">springcloud-provider-dept-8001</span> <span class=\"comment\">#修改eureka上的默认描述</span></span><br></pre></td></tr></table></figure>\n\n<p>这样模拟集群就搭建好了，就可以把一个项目挂载到三个服务器上了</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210427151353.png\" alt=\"image-20210427151353122\"></p>\n<h3 id=\"对比和-Zookeeper-区别\"><a href=\"#对比和-Zookeeper-区别\" class=\"headerlink\" title=\"对比和 Zookeeper 区别\"></a>对比和 Zookeeper 区别</h3><ol>\n<li><p><strong>回顾 CAP 原则</strong></p>\n<p>RDBMS (MySQL\\Oracle\\sqlServer) ===&gt; ACID</p>\n<p>NoSQL (Redis\\MongoDB) ===&gt; CAP</p>\n</li>\n<li><p><strong>ACID 是什么？</strong></p>\n<ul>\n<li>A (Atomicity) 原子性</li>\n<li>C (Consistency) 一致性</li>\n<li>I (Isolation) 隔离性</li>\n<li>D (Durability) 持久性</li>\n</ul>\n</li>\n<li><p><strong>CAP 是什么？</strong></p>\n<ul>\n<li>C (Consistency) 强一致性</li>\n<li>A (Availability) 可用性</li>\n<li>P (Partition tolerance) 分区容错性</li>\n</ul>\n<p>CAP 的三进二：CA、AP、CP</p>\n</li>\n<li><p>==CAP 理论的核心==</p>\n<p>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</p>\n<p>根据 CAP 原理，将 NoSQL 数据库分成了满足 CA 原则，满足 CP 原则和满足 AP 原则三大类</p>\n<ul>\n<li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li>\n<li>CP：满足一致性，分区容错的系统，通常性能不是特别高</li>\n<li>AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些</li>\n</ul>\n</li>\n<li><p><strong>作为分布式服务注册中心，Eureka 比 Zookeeper 好在哪里？</strong></p>\n<p>著名的 CAP 理论指出，一个分布式系统不可能同时满足 C (一致性) 、A (可用性) 、P (容错性)，由于分区容错性 P 在分布式系统中是必须要保证的，因此我们只能再 A 和 C 之间进行权衡。</p>\n<ul>\n<li>Zookeeper 保证的是 CP —&gt; 满足一致性，分区容错的系统，通常性能不是特别高</li>\n<li>Eureka 保证的是 AP —&gt; 满足可用性，分区容错的系统，通常可能对一致性要求低一些</li>\n</ul>\n<p><strong>Zookeeper 保证的是 CP</strong></p>\n<p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接收服务直接 down 掉不可用。也就是说，<strong>服务注册功能对可用性的要求要高于一致性</strong>。但 zookeeper 会出现这样一种情况，当 master 节点因为网络故障与其他节点失去联系时，剩余节点会重新进行 leader 选举。问题在于，选举 leader 的时间太长，30-120s，且选举期间整个 zookeeper 集群是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得 zookeeper 集群失去 master 节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。</p>\n<p><strong>Eureka 保证的是 AP</strong></p>\n<p>Eureka 看明白了这一点，因此在设计时就优先保证可用性。<strong>Eureka 各个节点都是平等的</strong>，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而 Eureka 的客户端在向某个 Eureka 注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台 Eureka 还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eureka 还有之中自我保护机制，如果在 15 分钟内超过 85%的节点都没有正常的心跳，那么 Eureka 就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p>\n<ul>\n<li>Eureka 不在从注册列表中移除因为长时间没收到心跳而应该过期的服务</li>\n<li>Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)</li>\n<li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li>\n</ul>\n<p>==因此，Eureka 可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像 zookeeper 那样使整个注册服务瘫痪==</p>\n</li>\n</ol>\n<h2 id=\"Ribbon：负载均衡-基于客户端\"><a href=\"#Ribbon：负载均衡-基于客户端\" class=\"headerlink\" title=\"Ribbon：负载均衡(基于客户端)\"></a>Ribbon：负载均衡(基于客户端)</h2><h4 id=\"负载均衡以及-Ribbon\"><a href=\"#负载均衡以及-Ribbon\" class=\"headerlink\" title=\"负载均衡以及 Ribbon\"></a>负载均衡以及 Ribbon</h4><blockquote>\n<p><strong>ribbon 是什么？</strong></p>\n</blockquote>\n<ul>\n<li>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套==客户端负载均衡工具==。</li>\n<li>简单的说，Ribbon 是 Netflix 发布的一个开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项如：连接超时、重试等等。简单的说，就是在配置文件中列出 LoadBalancer（简称 LB：负载均衡）后面所有的机器，Ribbon 会自动的帮助你基于某种规则（如简单轮询、随机连接等等）去连接这些机器。我们也很容易使用 Ribbon 实现自定义的负载均衡算法！</li>\n</ul>\n<blockquote>\n<p><strong>ribbon 能干嘛？</strong></p>\n</blockquote>\n<ul>\n<li>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</li>\n<li>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的 HA (高用)。</li>\n<li>常见的负载均衡软件有 Nginx、Lvs 等等。</li>\n<li>Dubbo、SpringCloud 中均给我们提供了负载均衡，<strong>SpringCloud 的负载均衡算法可以自定义</strong>。</li>\n<li>负载均衡简单分类：<ul>\n<li>集中式 LB<ul>\n<li>即在服务的提供方和消费方之间使用独立的 LB 设施，如 Nginx(反向代理服务器)，由该设施负责把访问请求通过某种策略转发至服务的提供方！</li>\n</ul>\n</li>\n<li>进程式 LB<ul>\n<li>将 LB 逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。</li>\n<li>==Ribbon 就属于进程内 LB==，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"SpringCloud-集成-Ribbon\"><a href=\"#SpringCloud-集成-Ribbon\" class=\"headerlink\" title=\"SpringCloud 集成 Ribbon\"></a>SpringCloud 集成 Ribbon</h4><p>向<strong>springcloud-consumer-dept-80</strong>模块的 pom.xml 中添加 Ribbon 和 Eureka 依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Ribbon+Eureka --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 application.yml 文件中配置 Eureka</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Eureka配置</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#不向注册中心注册自己</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure>\n\n<p>主启动类加上@EnableEurekaClient 注解，开启 Eureka</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-25 0:36</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeptConsumer_80</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DeptConsumer_80.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义 Spring 配置类：ConfigBean.java 配置负载均衡实现 RestTemplate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-25 0:27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置负载均衡实现RestTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span> <span class=\"comment\">//Ribbon</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">getRestTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-Ribbon-实现负载均衡\"><a href=\"#使用-Ribbon-实现负载均衡\" class=\"headerlink\" title=\"使用 Ribbon 实现负载均衡\"></a>使用 Ribbon 实现负载均衡</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428011632.png\" alt=\"img\"></p>\n<ol>\n<li>新建两个服务提供者 Moudle：springcloud-provider-dept-8003、springcloud-provider-dept-8002</li>\n<li>参照 springcloud-provider-dept-8001 依次为另外两个 Moudle 添加 pom.xml 依赖 、resourece 下的 mybatis 和 application.yml 配置，Java 代码</li>\n<li>启动所有服务测试(根据自身电脑配置决定启动服务的个数)，访问<a href=\"http://eureka7001.com:7002/%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C\">http://eureka7001.com:7002/查看结果</a></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428011818.png\" alt=\"image-20210428011818529\"></p>\n<p>测试访问<a href=\"http://localhost/consumer/dept/list\">http://localhost/consumer/dept/list</a> 这时候随机访问的是服务提供者 8001</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428012211.png\" alt=\"image-20210428012211706\" style=\"zoom: 50%;\" />\n\n<p>再次访问<a href=\"http://localhost/consumer/dept/list%E8%BF%99%E6%97%B6%E5%80%99%E9%9A%8F%E6%9C%BA%E7%9A%84%E6%98%AF%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%858002\">http://localhost/consumer/dept/list这时候随机的是服务提供者8002</a></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428012255.png\" alt=\"image-20210428012255782\" style=\"zoom: 50%;\" />\n\n<p>以上这种<strong>每次访问<a href=\"http://localhost/consumer/dept/list%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%9F%90%E4%B8%AA%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E5%8F%AB%E5%81%9A%E8%BD%AE%E8%AF%A2\">http://localhost/consumer/dept/list随机访问集群中某个服务提供者，这种情况叫做轮询</a></strong>，轮询算法在 SpringCloud 中可以自定义。</p>\n<p><strong>如何切换或者自定义规则呢？</strong></p>\n<p>在 springcloud-provider-dept-80 模块下的 ConfigBean 中进行配置，切换使用不同的规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置负载均衡实现RestTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span> <span class=\"comment\">//Ribbon</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">getRestTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IRule <span class=\"title function_\">myRule</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomRule</span>();<span class=\"comment\">//使用随机策略</span></span><br><span class=\"line\">        <span class=\"comment\">//return new RoundRobinRule();//使用轮询策略</span></span><br><span class=\"line\">        <span class=\"comment\">//return new AvailabilityFilteringRule();//使用轮询策略</span></span><br><span class=\"line\">        <span class=\"comment\">//return new RetryRule();//使用轮询策略</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以自定义规则，在 myRule 包下自定义一个配置类 MyRule.java，注意：<strong>该包不要和主启动类所在的包同级，要跟启动类所在包同级</strong>：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428014625.png\" alt=\"image-20210428014625684\" style=\"zoom:50%;\" />\n\n<p><strong>MyRule.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRule</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IRule <span class=\"title function_\">myRule</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyRandomRule</span>();<span class=\"comment\">//默认是轮询RandomRule,现在自定义为自己的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主启动类开启负载均衡并指定自定义的 MyRule 配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"comment\">//在微服务启动的时候就能加载自定义的Ribbon类(自定义的规则会覆盖原有默认的规则)</span></span><br><span class=\"line\"><span class=\"meta\">@RibbonClient(name = &quot;springcloud-provider-dept&quot;,configuration = MyRandomRule.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeptConsumer_80</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DeptConsumer_80.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义的规则(这里我们参考 Ribbon 中默认的规则代码自己稍微改动)：MyRandomRule.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.myrule;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.client.config.IClientConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.loadbalancer.AbstractLoadBalancerRule;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.loadbalancer.ILoadBalancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.loadbalancer.Server;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-28 1:47</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRandomRule</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractLoadBalancerRule</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每个服务访问5次则换下一个服务(总共3个服务)</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * total=0,默认=0,如果=5,指向下一个服务节点</span></span><br><span class=\"line\"><span class=\"comment\">     * index=0,默认=0,如果total=5,index+1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//被调用的次数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">currentIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//当前是谁在提供服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = &quot;RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Server <span class=\"title function_\">choose</span><span class=\"params\">(ILoadBalancer lb, Object key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lb == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Server</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (server == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            List&lt;Server&gt; upList = lb.getReachableServers();<span class=\"comment\">//获得当前活着的服务</span></span><br><span class=\"line\">            List&lt;Server&gt; allList = lb.getAllServers();<span class=\"comment\">//获取所有的服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">serverCount</span> <span class=\"operator\">=</span> allList.size();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (serverCount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * No servers. End regardless of pass, because subsequent passes</span></span><br><span class=\"line\"><span class=\"comment\">                 * only get more restrictive.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//int index = chooseRandomInt(serverCount);//生成区间随机数</span></span><br><span class=\"line\">            <span class=\"comment\">//server = upList.get(index);//从或活着的服务中,随机获取一个</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//=====================自定义代码=========================</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (total &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                server = upList.get(currentIndex);</span><br><span class=\"line\">                total++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                total = <span class=\"number\">0</span>;</span><br><span class=\"line\">                currentIndex++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentIndex &gt; upList.size()) &#123;</span><br><span class=\"line\">                    currentIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                server = upList.get(currentIndex);<span class=\"comment\">//从活着的服务中,获取指定的服务来进行操作</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//======================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (server == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * The only time this should happen is if the server list were</span></span><br><span class=\"line\"><span class=\"comment\">                 * somehow trimmed. This is a transient condition. Retry after</span></span><br><span class=\"line\"><span class=\"comment\">                 * yielding.</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                Thread.yield();</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (server.isAlive()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (server);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Shouldn&#x27;t actually happen.. but must be transient or a bug.</span></span><br><span class=\"line\">            server = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            Thread.yield();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> server;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">chooseRandomInt</span><span class=\"params\">(<span class=\"type\">int</span> serverCount)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ThreadLocalRandom.current().nextInt(serverCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Server <span class=\"title function_\">choose</span><span class=\"params\">(Object key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> choose(getLoadBalancer(), key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initWithNiwsConfig</span><span class=\"params\">(IClientConfig clientConfig)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Feign：负载均衡-基于服务端\"><a href=\"#Feign：负载均衡-基于服务端\" class=\"headerlink\" title=\"Feign：负载均衡(基于服务端)\"></a>Feign：负载均衡(基于服务端)</h2><h3 id=\"Feign-简介\"><a href=\"#Feign-简介\" class=\"headerlink\" title=\"Feign 简介\"></a>Feign 简介</h3><p>Feign 是声明式 Web Service 客户端，它让微服务之间的调用变得更简单，==类似 controller 调用 service==。SpringCloud 集成了 Ribbon 和 Eureka，可以使用 Feigin 提供负载均衡的 http 客户端</p>\n<p><strong>只需要创建一个接口，然后添加注解即可~</strong></p>\n<p>Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法</p>\n<ul>\n<li>微服务名字 【ribbon】</li>\n<li>接口和注解 【feign】</li>\n</ul>\n<p><strong>Feign 能干什么？</strong></p>\n<ul>\n<li>Feign 旨在使编写 Java Http 客户端变得更容易</li>\n<li>前面在使用 Ribbon + RestTemplate 时，利用 RestTemplate 对 Http 请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，Feign 在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，==在 Feign 的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前 Dao 接口上标注 Mapper 注解，现在是一个微服务接口上面标注一个 Feign 注解)==，即可完成对服务提供方的接口绑定，简化了使用 Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</li>\n</ul>\n<p><strong>Feign 默认集成了 Ribbon</strong></p>\n<ul>\n<li>利用 Ribbon 维护了 MicroServiceCloud-Dept 的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与 Ribbon 不同的是，通过 Feign 只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</li>\n</ul>\n<h3 id=\"Feign-的使用步骤\"><a href=\"#Feign-的使用步骤\" class=\"headerlink\" title=\"Feign 的使用步骤\"></a>Feign 的使用步骤</h3><ol>\n<li><p>创建 springcloud-consumer-fdept-feign 模块</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428120942.png\" alt=\"image-20210428120935729\" style=\"zoom:50%;\" />\n\n<p>拷贝 springcloud-consumer-dept-80 模块下的 pom.xml，resource，以及 java 代码到 springcloud-consumer-feign 模块，并添加 feign 依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Feign的依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过<strong>Ribbon</strong>实现：—原来的 controller：<strong>DeptConsumerController.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.springcloud.pojo.Dept;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.client.RestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-25 0:24</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeptConsumerController</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//消费者不应该有service层</span></span><br><span class=\"line\">    <span class=\"comment\">// RestTemplate 供我们直接调用! 注册到spring中</span></span><br><span class=\"line\">    <span class=\"comment\">// 提供多种便捷远程访问http服务的方法，简单的restful服务模板</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过Ribbon负载均衡，我们这里的地址应该是一个变量，通过服务名来访问</span></span><br><span class=\"line\">    <span class=\"comment\">//private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REST_URL_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://springcloud-provider-dept&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//http://localhost:8001/dept/get/1</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dept <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class=\"string\">&quot;/dept/get/&quot;</span> + id, Dept.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> Dept dept)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.postForObject(REST_URL_PREFIX + <span class=\"string\">&quot;/dept/add/&quot;</span>, dept, <span class=\"type\">boolean</span>.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Dept&gt; <span class=\"title function_\">list</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class=\"string\">&quot;/dept/list&quot;</span>, List.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过<strong>Feign</strong>实现：—改造后 controller：<strong>DeptConsumerController.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.springcloud.pojo.Dept;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.springcloud.service.DeptClientService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-25 0:24</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeptConsumerController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">DeptClientService</span> <span class=\"variable\">service</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dept <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> service.queryById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> Dept dept)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> service.addDept(dept);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Dept&gt; <span class=\"title function_\">list</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> service.queryAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Feign 和 Ribbon 二者对比，前者显现出面向接口编程特点，代码看起来更清爽，而且==Feign 调用方式更符合我们之前在做 SSM 或者 SprngBoot 项目时，Controller 层调用 Service 层的编程习惯==！</p>\n<p>主配置类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-25 0:36</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients(basePackages = &#123;&quot;com.luojunjie.springcloud&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeignDeptConsumer_80</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(FeignDeptConsumer_80.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>改造 springcloud-api 模块</p>\n<p>pom.xml 添加 feign 依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-feign --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>新建 service 包，并新建 DeptClientService.java 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-28 11:37</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;springcloud-provider-dept&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DeptClientService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    Dept <span class=\"title function_\">queryById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/dept/list&quot;)</span></span><br><span class=\"line\">    List&lt;Dept&gt; <span class=\"title function_\">queryAll</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">addDept</span><span class=\"params\">(Dept dept)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Hystrix：服务熔断\"><a href=\"#Hystrix：服务熔断\" class=\"headerlink\" title=\"Hystrix：服务熔断\"></a>Hystrix：服务熔断</h2><blockquote>\n<p>分布式系统面临的问题</p>\n</blockquote>\n<p>==复杂的分布式体系结构中的应用程序中有数十个依赖关系，每个依赖关系在某些时候将不可避免失败！==</p>\n<h3 id=\"服务雪崩\"><a href=\"#服务雪崩\" class=\"headerlink\" title=\"服务雪崩\"></a>服务雪崩</h3><p>多个微服务之间调用的时候，假设微服务 A 调用微服务 B 和微服务 C，微服务 B 和微服务 C 又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上<strong>某个微服务的调用响应时间过长，或者不可用</strong>，对微服务 A 的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428151122.png\" alt=\"img\"></p>\n<p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，<strong>这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行</strong>。</p>\n<p><strong>我们需要，弃车保帅！</strong></p>\n<h3 id=\"什么是-Hystrix？\"><a href=\"#什么是-Hystrix？\" class=\"headerlink\" title=\"什么是 Hystrix？\"></a>什么是 Hystrix？</h3><p><strong>Hystrix</strong>是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，<strong>Hystrix</strong>==能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性==。</p>\n<p>“<strong>断路器</strong>”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，<strong>向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用</strong>，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428151551.png\" alt=\"img\"></p>\n<h3 id=\"Hystrix-能干嘛？\"><a href=\"#Hystrix-能干嘛？\" class=\"headerlink\" title=\"Hystrix 能干嘛？\"></a>Hystrix 能干嘛？</h3><ul>\n<li>服务降级</li>\n<li>服务熔断</li>\n<li>服务限流</li>\n<li>接近实时的监控</li>\n</ul>\n<p>当一切正常时，请求流可以如下所示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428151740.png\" alt=\"img\"></p>\n<p>当许多后端系统中有一个潜在阻塞服务时，它可以阻止整个用户请求：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428151740.png\" alt=\"img\"></p>\n<p>随着大容量通信量的增加，单个后端依赖项的潜在性会导致所有服务器上的所有资源在几秒钟内饱和。</p>\n<p>应用程序中通过网络或客户端库可能导致网络请求的每个点都是潜在故障的来源。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，从而备份队列、线程和其他系统资源，从而导致更多跨系统的级联故障。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMy02NDAucG5n?x-oss-process=image/format,png\" alt=\"img\"></p>\n<p>当使用<strong>Hystrix</strong>包装每个基础依赖项时，上面的图表中所示的体系结构会发生类似于以下关系图的变化。<strong>每个依赖项是相互隔离的</strong>，限制在延迟发生时它可以填充的资源中，并包含在回退逻辑中，该逻辑决定在依赖项中发生任何类型的故障时要做出什么样的响应：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428152041.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"服务熔断\"><a href=\"#服务熔断\" class=\"headerlink\" title=\"服务熔断\"></a>服务熔断</h3><p><strong>什么是服务熔断?</strong></p>\n<p><strong>熔断机制是赌赢雪崩效应的一种微服务链路保护机制。</strong></p>\n<p>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回错误的响应信息</strong>。检测到该节点微服务调用响应正常后恢复调用链路。在 SpringCloud 框架里熔断机制通过 Hystrix 实现。Hystrix 会监控微服务间调用的状况，当失败的调用到一定阀值缺省是<strong>5 秒内 20 次调用失败，就会启动熔断机制</strong>。熔断机制的注解是：@HystrixCommand。</p>\n<p>服务熔断解决如下问题：</p>\n<ul>\n<li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li>\n<li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</li>\n</ul>\n<p><strong>入门案例</strong></p>\n<p>新建 springcloud-provider-dept-hystrix-8001 模块并拷贝 springcloud-provider-dept–8001 内的 pom.xml、resource 和 Java 代码进行初始化并调整。</p>\n<p><strong>导入 hystrix 依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导入Hystrix依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>调整 yml 配置文件</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8001</span></span><br><span class=\"line\"><span class=\"comment\">#mybatis配置</span></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.luojunjie.springcloud.pojo</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span></span><br><span class=\"line\"><span class=\"comment\">#spring配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springcloud-provider-dept</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/db01?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"comment\">#Eureka配置，服务注册到哪里</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"comment\">#启用eureka集群配置</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">springcloud-provider-dept-hystrix-8001</span> <span class=\"comment\">#修改eureka上的默认描述</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#改为true后默认显示的是ip地址而不再是localhost</span></span><br><span class=\"line\"><span class=\"comment\"># info配置</span></span><br><span class=\"line\"><span class=\"attr\">info:</span></span><br><span class=\"line\">  <span class=\"comment\"># 项目配置</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span></span><br><span class=\"line\">    <span class=\"comment\">#项目名称</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springcloud-dept8001</span></span><br><span class=\"line\">    <span class=\"comment\">#公司名称</span></span><br><span class=\"line\">    <span class=\"attr\">company:</span> <span class=\"string\">www.ljjblog.com</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>修改 controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.springcloud.pojo.Dept;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.springcloud.service.DeptService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-25 0:09</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeptController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DeptService deptService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id查询部门信息</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果根据id查询出现异常,则走hystrixGet这段备选代码</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand(fallbackMethod = &quot;hystrixGet&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dept <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Dept</span> <span class=\"variable\">dept</span> <span class=\"operator\">=</span> deptService.queryById(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dept==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;这个id=&gt;&quot;</span>+id+<span class=\"string\">&quot;,不存在该用户，或信息无法找到~&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dept;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id查询备选方案(熔断)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dept <span class=\"title function_\">hystrixGet</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dept</span>().setDeptno(id)</span><br><span class=\"line\">                .setDname(<span class=\"string\">&quot;这个id=&gt;&quot;</span> + id + <span class=\"string\">&quot;,没有对应的信息,null---@Hystrix~&quot;</span>)</span><br><span class=\"line\">                .setDb_source(<span class=\"string\">&quot;在MySQL中没有这个数据库&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>为主启动类添加对熔断的支持注解@EnableCircuitBreaker</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在服务启动后自动注册到eureka中</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-25 0:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCircuitBreaker</span> <span class=\"comment\">//添加对熔断的支持注解</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HystrixDeptProvider_8001</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(HystrixDeptProvider_8001.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试</strong>：</p>\n<p>使用熔断后，当访问一个不存在的 id 时，前台页展示数据如下:</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428224838.png\" alt=\"image-20210428224831260\"></p>\n<p><strong>为了避免因某个微服务后台出现异常或错误而导致整个应用或网页报错，使用熔断是必要的</strong></p>\n<h3 id=\"服务降级\"><a href=\"#服务降级\" class=\"headerlink\" title=\"服务降级\"></a>服务降级</h3><p>什么是服务降级?</p>\n<p>服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理，或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。说白了，<strong>就是尽可能的把系统资源让给优先级高的服务</strong>。</p>\n<p>资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双 11 活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。</p>\n<p>服务降级主要用于什么场景呢？当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些 不重要 或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。</p>\n<p>降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行 ；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210428230041.png\" alt=\"在这里插入图片描述\"></p>\n<p>由上图可得，<strong>当某一时间内服务 A 的访问量暴增，而 B 和 C 的访问量较少，为了缓解 A 服务的压力，这时候需要 B 和 C 暂时关闭一些服务功能，去承担 A 的部分服务，从而为 A 分担压力，叫做服务降级</strong>。</p>\n<p><strong>服务降级需要考虑的问题</strong></p>\n<p>1）那些服务是核心服务，哪些服务是非核心服务<br>2）那些服务可以支持降级，那些服务不能支持降级，降级策略是什么<br>3）除服务降级之外是否存在更复杂的业务放通场景，策略是什么？</p>\n<p><strong>自动降级分类</strong></p>\n<p>1）超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</p>\n<p>2）失败次数降级：主要是一些不稳定的 api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</p>\n<p>3）故障降级：比如要调用的远程服务挂掉了（网络故障、DNS 故障、http 服务返回错误的状态码、rpc 服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</p>\n<p>4）限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</p>\n<h5 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h5><p>在 springcloud-api 模块下的 service 包中新建降级配置类 DeptClientServiceFallBackFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.springcloud.pojo.Dept;</span><br><span class=\"line\"><span class=\"keyword\">import</span> feign.hystrix.FallbackFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-28 23:03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeptClientServiceFallBackFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FallbackFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">create</span><span class=\"params\">(Throwable throwable)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeptClientService</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Dept <span class=\"title function_\">queryById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dept</span>()</span><br><span class=\"line\">                        .setDeptno(id)</span><br><span class=\"line\">                        .setDname(<span class=\"string\">&quot;id=&gt;&quot;</span> + id + <span class=\"string\">&quot;没有对应的信息，客户端提供了降级的信息，这个服务现在已经被关闭&quot;</span>)</span><br><span class=\"line\">                        .setDb_source(<span class=\"string\">&quot;没有数据~&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> List&lt;Dept&gt; <span class=\"title function_\">queryAll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">addDept</span><span class=\"params\">(Dept dept)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 DeptClientService 中指定降级配置类 DeptClientServiceFallBackFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.springcloud.pojo.Dept;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-28 11:37</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;springcloud-provider-dept&quot;,fallbackFactory = DeptClientServiceFallBackFactory.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DeptClientService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    Dept <span class=\"title function_\">queryById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/dept/list&quot;)</span></span><br><span class=\"line\">    List&lt;Dept&gt; <span class=\"title function_\">queryAll</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">addDept</span><span class=\"params\">(Dept dept)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<strong>springcloud-consumer-dept-feign</strong>模块中开启降级：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\">#Eureka配置</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">#不向注册中心注册自己</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\"><span class=\"comment\">#开启降级feign.hystrix</span></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务熔断和服务降级的区别\"><a href=\"#服务熔断和服务降级的区别\" class=\"headerlink\" title=\"服务熔断和服务降级的区别\"></a>服务熔断和服务降级的区别</h4><ul>\n<li>服务熔断—&gt;服务端：某个服务超时或异常，引起熔断~，类似于保险丝(自我熔断)</li>\n<li>服务降级—&gt;客户端：从整体网站请求负载考虑，当某个服务熔断或者关闭之后，服务将不再被调用，此时在客户端，我们可以准备一个 FallBackFactory ，返回一个默认的值(缺省值)。会导致整体的服务下降，但是好歹能用，比直接挂掉强。</li>\n<li>触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li>\n<li>实现方式不太一样，服务降级具有代码侵入性(由控制器完成/或自动降级)，熔断一般称为自我熔断。</li>\n</ul>\n<p><strong>熔断，降级，限流：</strong></p>\n<p>限流：限制并发的请求访问量，超过阈值则拒绝；</p>\n<p>降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定；从整体负荷考虑；</p>\n<p>熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃；系统自动执行和恢复</p>\n<h3 id=\"Dashboard-流监控\"><a href=\"#Dashboard-流监控\" class=\"headerlink\" title=\"Dashboard 流监控\"></a>Dashboard 流监控</h3><p>新建 springcloud-consumer-hystrix-dashboard 模块</p>\n<p><strong>添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--导入Hystrix依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>主启动类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHystrixDashboard</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeptConsumerDashboard_9001</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DeptConsumerDashboard_9001.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给 springcloud-provider-dept-hystrix-8001 模块下的主启动类添加如下代码，开放监控流端口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在服务启动后自动注册到eureka中</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-25 0:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCircuitBreaker</span> <span class=\"comment\">//添加对熔断的支持注解</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HystrixDeptProvider_8001</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(HystrixDeptProvider_8001.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">hystrixMetricsStreamServlet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ServletRegistrationBean</span> <span class=\"variable\">registrationBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">HystrixMetricsStreamServlet</span>());</span><br><span class=\"line\">        <span class=\"comment\">//访问该页面就是监控页面</span></span><br><span class=\"line\">        registrationBean.addUrlMappings(<span class=\"string\">&quot;/actuator/hystrix.stream&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>访问：<a href=\"http://localhost:9001/hystrix\">http://localhost:9001/hystrix</a></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210429160335.png\" alt=\"image-20210429160328204\" style=\"zoom:50%;\" />\n\n<p>进入监控页面，效果如下：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210429160510.png\" alt=\"image-20210429160510275\" style=\"zoom:50%;\" />\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210429160522.png\" alt=\"img\"></p>\n<h2 id=\"Zuul-路由网关\"><a href=\"#Zuul-路由网关\" class=\"headerlink\" title=\"Zuul 路由网关\"></a>Zuul 路由网关</h2><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><blockquote>\n<p>什么是 Zuul？</p>\n</blockquote>\n<p>Zuul 包含了对请求的路由和过滤的两个最主要的功能：</p>\n<p>其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。Zuul 和 Eureka 进行整合，将 Zuul 自身注册为 Eureka 中获得其他微服务的消息，也即以后的访问微服务都是通过 Zuul 跳转后获得。</p>\n<ul>\n<li>注意：Zuul 服务器最终还是会注册 Eureka</li>\n<li>提供：==代理 + 路由 + 过滤== 三大功能！</li>\n</ul>\n<blockquote>\n<p>Zuul 能干嘛？</p>\n</blockquote>\n<ul>\n<li>路由</li>\n<li>过滤</li>\n</ul>\n<p><strong>入门案例</strong></p>\n<p><strong>新建 springcloud-zuul 模块，并导入依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--导入Hystrix依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9527</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springcloud-zuul</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">zuul9527.com</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">info:</span></span><br><span class=\"line\">  <span class=\"attr\">app.name:</span> <span class=\"string\">luojunjie-springcloud</span></span><br><span class=\"line\">  <span class=\"attr\">company.name:</span> <span class=\"string\">luojunjie</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"attr\">mydept.serviceId:</span> <span class=\"string\">springcloud-provider-dept</span></span><br><span class=\"line\">    <span class=\"attr\">mydept.path:</span> <span class=\"string\">/mydept/**</span></span><br><span class=\"line\">  <span class=\"attr\">ignored-services:</span> <span class=\"string\">&quot;*&quot;</span> <span class=\"comment\">#不能使用这个路径访问了，* 忽略全部的</span></span><br><span class=\"line\">  <span class=\"attr\">prefix:</span> <span class=\"string\">/ouwen</span> <span class=\"comment\">#公共的前缀</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>主启动类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.spingcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-29 21:55</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableZuulProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZuulApplication_9527</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(ZuulApplication_9527.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210429221146.png\" alt=\"image-20210429221139509\"></p>\n<p>可以看出 Zull 路由网关被注册到 Eureka 注册中心中了！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210429221301.png\" alt=\"image-20210429221300961\"></p>\n<h2 id=\"Spring-Cloud-Config\"><a href=\"#Spring-Cloud-Config\" class=\"headerlink\" title=\"Spring Cloud Config\"></a>Spring Cloud Config</h2><p><strong>Dalston.RELEASE</strong></p>\n<p><strong>Spring Cloud Config 为分布式系统中的外部配置提供服务器和客户端支持。</strong>使用 Config Server，您可以在所有环境中管理应用程序的外部属性。客户端和服务器上的概念映射与 Spring <code>Environment</code>和<code>PropertySource</code>抽象相同，因此它们与 Spring 应用程序非常契合，但可以与任何以任何语言运行的应用程序一起使用。随着应用程序通过从开发人员到测试和生产的部署流程，您可以管理这些环境之间的配置，并确定应用程序具有迁移时需要运行的一切。服务器存储后端的默认实现使用 git，因此它轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具。很容易添加替代实现，并使用 Spring 配置将其插入。</p>\n<h4 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p><strong>分布式系统面临的–配置文件问题</strong></p>\n<p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的，动态的配置管理设施是必不可少的。spring cloud 提供了 configServer 来解决这个问题，我们每一个微服务自己带着一个 application.yml，那上百个的配置文件修改起来，令人头疼！</p>\n<p><strong>什么是 SpringCloud config 分布式配置中心？</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210429225000.png\" alt=\"在这里插入图片描述\"></p>\n<p>spring cloud config 为微服务架构中的微服务提供集中化的外部支持，配置服务器为各个不同微服务应用的所有环节提供了一个<strong>中心化的外部配置</strong>。</p>\n<p>spring cloud config 分为<strong>服务端</strong>和<strong>客户端</strong>两部分。</p>\n<p>服务端也称为 <strong>分布式配置中心</strong>，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密，解密信息等访问接口。</p>\n<p>客户端则是<strong>通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息</strong>。配置服务器默认采用 git 来存储配置信息，这样就有助于对环境配置进行版本管理。并且可用通过 git 客户端工具来方便的管理和访问配置内容。</p>\n<p><strong>spring cloud config 分布式配置中心能干嘛？</strong></p>\n<ul>\n<li>集中式管理配置文件</li>\n<li>不同环境，不同配置，动态化的配置更新，分环境部署，比如 /dev /test /prod /beta /release</li>\n<li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li>\n<li>当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置</li>\n<li>将配置信息以 REST 接口的形式暴露</li>\n</ul>\n<p><strong>spring cloud config 分布式配置中心与 GitHub 整合</strong></p>\n<p>由于 spring cloud config 默认使用 git 来存储配置文件 (也有其他方式，比如自持 SVN 和本地文件)，但是最推荐的还是 git ，而且使用的是 http / https 访问的形式。</p>\n<h4 id=\"入门案例-1\"><a href=\"#入门案例-1\" class=\"headerlink\" title=\"入门案例\"></a><strong>入门案例</strong></h4><p><strong>服务端</strong></p>\n<p>新建 springcloud-config-server-3344 模块导入 pom.xml 依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>resource 下创建 application.yml 配置文件，Spring Cloud Config 服务器从 git 存储库（必须提供）为远程客户端提供配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">3344</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springcloud-config-server</span></span><br><span class=\"line\">     <span class=\"comment\"># 连接码云远程仓库</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://gitee.com/ouwen666/springcloud-config.git</span></span><br></pre></td></tr></table></figure>\n\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-29 23:12</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringCloudConfigServer_3344</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudConfigServer_3344.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将本地 git 仓库 springcloud-config 文件夹下新建的 application.yml 提交到码云仓库：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210430000230.png\" alt=\"image-20210430000230137\"></p>\n<p>定位资源的默认策略是克隆一个 git 仓库（在<code>spring.cloud.config.server.git.uri</code>），并使用它来初始化一个迷你<code>SpringApplication</code>。小应用程序的<code>Environment</code>用于枚举属性源并通过 JSON 端点发布。</p>\n<p>HTTP 服务具有以下格式的资源：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">/</span><span class=\"punctuation\">&#123;</span>application<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>profile<span class=\"punctuation\">&#125;</span>[/<span class=\"punctuation\">&#123;</span>label<span class=\"punctuation\">&#125;</span>]</span><br><span class=\"line\"><span class=\"title class_\">/</span><span class=\"punctuation\">&#123;</span>application<span class=\"punctuation\">&#125;</span>-<span class=\"punctuation\">&#123;</span>profile<span class=\"punctuation\">&#125;</span>.yml</span><br><span class=\"line\"><span class=\"title class_\">/</span><span class=\"punctuation\">&#123;</span>label<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>application<span class=\"punctuation\">&#125;</span>-<span class=\"punctuation\">&#123;</span>profile<span class=\"punctuation\">&#125;</span>.yml</span><br><span class=\"line\"><span class=\"title class_\">/</span><span class=\"punctuation\">&#123;</span>application<span class=\"punctuation\">&#125;</span>-<span class=\"punctuation\">&#123;</span>profile<span class=\"punctuation\">&#125;</span>.properties</span><br><span class=\"line\"><span class=\"title class_\">/</span><span class=\"punctuation\">&#123;</span>label<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>application<span class=\"punctuation\">&#125;</span>-<span class=\"punctuation\">&#123;</span>profile<span class=\"punctuation\">&#125;</span>.properties</span><br></pre></td></tr></table></figure>\n\n<p>其中“应用程序”作为 SpringApplication 中的 spring.config.name 注入（即常规的 Spring Boot 应用程序中通常是“应用程序”），“配置文件”是活动配置文件（或逗号分隔列表的属性），“label”是可选的 git 标签（默认为“master”）。</p>\n<p>测试访问<a href=\"http://localhost:3344/application-dev.yml\">http://localhost:3344/application-dev.yml</a></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210430000331.png\" alt=\"image-20210430000331332\"></p>\n<p>测试访问 <a href=\"http://localhost:3344/application/test/master\">http://localhost:3344/application/test/master</a></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210430000351.png\" alt=\"image-20210430000351363\"></p>\n<p>测试访问 <a href=\"http://localhost:3344/master/application-dev.yml\">http://localhost:3344/master/application-dev.yml</a></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210430000417.png\" alt=\"image-20210430000417885\"></p>\n<p>如果测试访问不存在的配置则不显示 如：<a href=\"http://localhost:3344/master/application-aaa.yml\">http://localhost:3344/master/application-aaa.yml</a></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210430000446.png\" alt=\"image-20210430000445929\"></p>\n<p><strong>客户端</strong></p>\n<p>将本地 git 仓库 springcloud-config 文件夹下新建的 config-client.yml 提交到码云仓库：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210430000526.png\" alt=\"image-20210430000230137\"></p>\n<p>新建一个 springcloud-config-client-3355 模块，并导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>resources 下创建 application.yml 和 bootstrap.yml 配置文件</p>\n<p><strong>bootstrap.yml</strong> 是系统级别的配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#系统级别的配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">config-client</span> <span class=\"comment\">#需要从git上读取的资源名称，不需要后缀</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:3344</span></span><br><span class=\"line\">      <span class=\"attr\">profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">      <span class=\"attr\">label:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>application.yml</strong> 是用户级别的配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用户级别的配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springcloud-config-client</span></span><br></pre></td></tr></table></figure>\n\n<p>创建 controller 包下的<strong>ConfigClientController.java</strong> 用于测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-29 23:44</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigClientController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String applicationName; <span class=\"comment\">//获取微服务名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;eureka.client.service-url.defaultZone&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String eurekaServer; <span class=\"comment\">//获取Eureka服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String port; <span class=\"comment\">//获取服务端的端口号</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/config&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getConfig</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;applicationName:&quot;</span>+applicationName +</span><br><span class=\"line\">                <span class=\"string\">&quot;eurekaServer:&quot;</span>+eurekaServer +</span><br><span class=\"line\">                <span class=\"string\">&quot;port:&quot;</span>+port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-29 23:44</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringCloudConfigClient_3355</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudConfigClient_3355.class,args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<p>启动服务端 Config_server_3344 再启动客户端 ConfigClient</p>\n<p>访问：<a href=\"http://localhost:8201/config/\">http://localhost:8201/config/</a></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210430000723.png\" alt=\"image-20210430000723324\"></p>\n","categories":["后端开发"],"tags":["技巧","笔记","分布式"]},{"title":"Java8 新特性","url":"/2021/06/17/397c083a.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Java8 有一个非常显著的特点，就是提供了函数式编程，本文也将介绍 Java8 的几个新特性来实现函数式编程。学会这些 API 能够编写出简单、干净、易读的代码（尤其是对集合的操作）。Java8 新特性包括：</p>\n<ul>\n<li>Lambda 表达式</li>\n<li>Stream API</li>\n<li>接口新特性<ul>\n<li>函数式接口（<code>@FunctionalInterface</code>）</li>\n<li>默认方法（<code>default</code>）</li>\n</ul>\n</li>\n<li>Optional API</li>\n<li>方法引用</li>\n</ul>\n<p>JDK8 新特性</p>\n<p>正在努力更新中…</p>\n<h2 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h2><ul>\n<li>只包含了一个抽象方法的接口，称为函数式接口（可以有多个非抽象方法）。可以使用<code>@FunctionalInterface</code>注解自定义声明</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//JDK 1.8 之前已有的函数式接口:</span></span><br><span class=\"line\">- java.lang.Runnable</span><br><span class=\"line\">- java.util.concurrent.Callable</span><br><span class=\"line\">- java.security.PrivilegedAction</span><br><span class=\"line\">- java.util.Comparator</span><br><span class=\"line\">- java.io.FileFilter</span><br><span class=\"line\">- java.nio.file.PathMatcher</span><br><span class=\"line\">- java.lang.reflect.InvocationHandler</span><br><span class=\"line\">- java.beans.PropertyChangeListener</span><br><span class=\"line\">- java.awt.event.ActionListener</span><br><span class=\"line\">- javax.swing.event.ChangeListener</span><br><span class=\"line\"><span class=\"comment\">//JDK 1.8 新增加的函数接口：</span></span><br><span class=\"line\">- java.util.function</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h2><ul>\n<li><code>Lambda</code>表达式的使用依赖于函数式接口</li>\n<li>使用<code>Lambda</code>表达式来表示函数式接口的实现（JAVA 8 之前一般是用匿名类实现的）</li>\n</ul>\n<h3 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h3><ul>\n<li><code>-&gt; :Lambda操作符</code></li>\n<li><code>-&gt; 左边(parameters):Lambda形参列表</code>(相当于接口中的抽象方法的形参列表)</li>\n</ul>\n<ol>\n<li>参数类型可以省略，可由编译器推断得出(类型推断)</li>\n<li>如果只有一个参数,<code>()</code>也可以省略</li>\n</ol>\n<ul>\n<li><code>-&gt; 右边:Lambda体</code>(重写的抽象方法的方法体)</li>\n</ul>\n<ol>\n<li>如果只有一条执行语句，<code>&#123;&#125;</code>及<code>return</code>可以省略</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">(parameters) -&gt; expression</span><br><span class=\"line\">或</span><br><span class=\"line\">(parameters) -&gt;&#123; statements; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 1. 接收2个int型整数,返回他们的和</span></span><br><span class=\"line\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y) -&gt; x + y</span><br><span class=\"line\"><span class=\"comment\">// 2. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)</span></span><br><span class=\"line\">(String s) -&gt; System.out.print(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    Runnable runnable=<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;*********&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    runnable.run();</span><br><span class=\"line\">    <span class=\"comment\">//Lambda表达式写法</span></span><br><span class=\"line\">    Runnable runnable= () -&gt; System.out.println(<span class=\"string\">&quot;*********&quot;</span>);</span><br><span class=\"line\">    runnable.run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h4><table>\n<thead>\n<tr>\n<th>使用案例</th>\n<th>Lambda 的例子</th>\n<th>对应的函数式接口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>布尔表达式</td>\n<td><code>(List&lt;String&gt; list) -&gt; list.isEmpty()</code></td>\n<td><code>Predicate&lt;List&lt;String&gt;&gt;</code></td>\n</tr>\n<tr>\n<td>创建对象</td>\n<td><code>() -&gt; new Project()</code></td>\n<td><code>Supplier&lt;Project&gt;</code></td>\n</tr>\n<tr>\n<td>消费一个对象</td>\n<td><code>(Project p) -&gt; System.out.println(p.getStars())</code></td>\n<td><code>Consumer&lt;Project&gt;</code></td>\n</tr>\n<tr>\n<td>从一个对象中选择/提取</td>\n<td><code>(int a, int b) -&gt; a * b</code></td>\n<td><code>IntBinaryOperator</code></td>\n</tr>\n<tr>\n<td>比较两个对象</td>\n<td><code>(Project p1, Project p2) -&gt; p1.getStars().compareTo(p2.getStars())</code></td>\n<td><code>Comparator&lt;Project&gt; 或 BiFunction&lt;Project,</code> <code>Project, Integer&gt; 或 ToIntBiFunction&lt;Project, Project&gt;</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><h4 id=\"语法格式-1\"><a href=\"#语法格式-1\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h4><ul>\n<li>使用操作符<code>::</code>类或对象与方法名分割</li>\n<li>主要有三种使用情况</li>\n</ul>\n<p> 对象<code>::</code>实例方法名</p>\n<p>类<code>::</code>实例方法名</p>\n<p>类<code>::</code>静态方法名</p>\n<h4 id=\"使用案例-1\"><a href=\"#使用案例-1\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">LambdaQueryWrapper&lt;SysDictItem&gt; queryWrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;SysDictItem&gt;();</span><br><span class=\"line\"><span class=\"comment\">//相当于SysDictItem.getStatus();</span></span><br><span class=\"line\">queryWrapper.eq(SysDictItem::getStatus, <span class=\"number\">1</span>);</span><br><span class=\"line\">queryWrapper.orderByAsc(SysDictItem::getSortOrder);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Stream-API\"><a href=\"#Stream-API\" class=\"headerlink\" title=\"Stream API\"></a>Stream API</h2><ul>\n<li>使用<code>Stream API</code>对集合数据进行操作</li>\n<li><code>stream</code> 和 <code>collection</code> 集合的区别<ul>\n<li><code>collection</code>是一种静态的内存数据结构，而<code>stream</code>是有关计算的，前者主要面向内存，存储在内存中，后者主要面向<code>cpu</code>，通过<code>cpu</code>计算实现</li>\n</ul>\n</li>\n<li><code>Stream</code>的创建方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.通过集合创建</span></span><br><span class=\"line\"><span class=\"comment\">//default Stream&lt;E&gt; stream();//返回一个顺序流</span></span><br><span class=\"line\"><span class=\"comment\">//default Stream&lt;E&gt; parallelStream();//返回一个并行流</span></span><br><span class=\"line\">List&lt;Person&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Person&gt;();</span><br><span class=\"line\">Stream&lt;Person&gt; stream = list.stream();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.通过Arrays静态方法</span></span><br><span class=\"line\">String[] names = &#123;<span class=\"string\">&quot;chaimm&quot;</span>,<span class=\"string\">&quot;peter&quot;</span>,<span class=\"string\">&quot;john&quot;</span>&#125;;</span><br><span class=\"line\">Stream&lt;String&gt; stream = Arrays.stream(names);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.通过Stream of</span></span><br><span class=\"line\">Stream&lt;String&gt; stream = Stream.of(<span class=\"string\">&quot;chaimm&quot;</span>,<span class=\"string\">&quot;peter&quot;</span>,<span class=\"string\">&quot;john&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4.创建无限流</span></span><br><span class=\"line\"><span class=\"comment\">//迭代 遍历0到9</span></span><br><span class=\"line\">Stream.iterate(<span class=\"number\">0</span>,t-&gt;t+<span class=\"number\">1</span>).limit(<span class=\"number\">10</span>).forEach(System.out::println);</span><br><span class=\"line\"><span class=\"comment\">//生成 10个随机数</span></span><br><span class=\"line\">Stream.generate(Math::random).limit(<span class=\"number\">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>中间操作</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中间操作</span></span><br><span class=\"line\"><span class=\"comment\">//filer(Predicate p)过滤数据</span></span><br><span class=\"line\">List&lt;Person&gt; result = list.stream()</span><br><span class=\"line\">    .filter(Person::isStudent)</span><br><span class=\"line\">    .collect(toList());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//limit(n)截断流</span></span><br><span class=\"line\">List&lt;Person&gt; result = list.stream()</span><br><span class=\"line\">    .limit(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .collect(toList());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//skip(n)跳过元素</span></span><br><span class=\"line\">List&lt;Person&gt; result = list.stream()</span><br><span class=\"line\">    .skip(<span class=\"number\">3</span>)</span><br><span class=\"line\">    .collect(toList());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//distinct 筛选去重</span></span><br><span class=\"line\">List&lt;Person&gt; result = list.stream()</span><br><span class=\"line\">    .distinct()</span><br><span class=\"line\">    .collect(toList());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//映射map(Function f)  flatMap(Function f)合并多个流</span></span><br><span class=\"line\">List&lt;String&gt; result = list.stream()</span><br><span class=\"line\">    .map(Person::getName)</span><br><span class=\"line\">    .collect(toList());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序 sorted() 自然排序 sorted(Comparator c)定制顺序</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>终止操作</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//终止操作</span></span><br><span class=\"line\"><span class=\"comment\">//匹配与查找</span></span><br><span class=\"line\"><span class=\"comment\">//allMatch(Predicate e)检查是否匹配所有元素 返回boolean</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> list.stream()</span><br><span class=\"line\">    .allMatch(Person::isStudent);</span><br><span class=\"line\"><span class=\"comment\">//anyMatch(Predicate e)检查是否至少匹配一个元素</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> list.stream()</span><br><span class=\"line\">    .anyMatch(Person::isStudent);</span><br><span class=\"line\"><span class=\"comment\">//noneMatch(Predicate e)检查是否没有匹配的元素</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> list.stream()</span><br><span class=\"line\">    .noneMatch(Person::isStudent);</span><br><span class=\"line\"><span class=\"comment\">//findFierst()返回第一个元素</span></span><br><span class=\"line\">Optional&lt;Person&gt; person = list.stream().findFirst();</span><br><span class=\"line\"><span class=\"comment\">//findAny()返回当前流中的任意元素</span></span><br><span class=\"line\">Optional&lt;Person&gt; person = list.stream().findAny();</span><br><span class=\"line\"><span class=\"comment\">//count 返回流中元素的总个数</span></span><br><span class=\"line\"><span class=\"comment\">//max(Comparator c)返回流中最大值</span></span><br><span class=\"line\"><span class=\"comment\">//min(Comparator c)返回流中最小值</span></span><br><span class=\"line\"><span class=\"comment\">//forEach(Consumer c)内部迭代</span></span><br><span class=\"line\"><span class=\"comment\">//归约 reduce(T identity,BinaryOperator)可以将流中元素结合起来得到一个值（求和）</span></span><br><span class=\"line\"><span class=\"comment\">//例：计算所有人的年龄总和</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> list.stream().reduce(<span class=\"number\">0</span>, (person1,person2)-&gt;person1.getAge()+person2.getAge());</span><br><span class=\"line\"><span class=\"comment\">//收集collect(Collector c) 将流中元素收集返回相应类型</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"中间操作和收集操作\"><a href=\"#中间操作和收集操作\" class=\"headerlink\" title=\"中间操作和收集操作\"></a>中间操作和收集操作</h4><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>类型</th>\n<th>返回类型</th>\n<th>使用的类型/函数式接口</th>\n<th>函数描述符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>filter</code></td>\n<td>中间</td>\n<td><code>Stream&lt;T&gt;</code></td>\n<td><code>Predicate&lt;T&gt;</code></td>\n<td><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td><code>distinct</code></td>\n<td>中间</td>\n<td><code>Stream&lt;T&gt;</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>skip</code></td>\n<td>中间</td>\n<td><code>Stream&lt;T&gt;</code></td>\n<td><code>long</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>map</code></td>\n<td>中间</td>\n<td><code>Stream&lt;R&gt;</code></td>\n<td><code>Function&lt;T, R&gt;</code></td>\n<td><code>T -&gt; R</code></td>\n</tr>\n<tr>\n<td><code>flatMap</code></td>\n<td>中间</td>\n<td><code>Stream&lt;R&gt;</code></td>\n<td><code>Function&lt;T,Stream&lt;R&gt;&gt;</code></td>\n<td><code>T -&gt; Stream&lt;R&gt;</code></td>\n</tr>\n<tr>\n<td><code>limit</code></td>\n<td>中间</td>\n<td><code>Stream&lt;T&gt;</code></td>\n<td><code>long</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>sorted</code></td>\n<td>中间</td>\n<td><code>Stream&lt;T&gt;</code></td>\n<td><code>Comparator&lt;T&gt;</code></td>\n<td><code>(T, T) -&gt; int</code></td>\n</tr>\n<tr>\n<td><code>anyMatch</code></td>\n<td>终端</td>\n<td><code>boolean</code></td>\n<td><code>Predicate&lt;T&gt;</code></td>\n<td><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td><code>noneMatch</code></td>\n<td>终端</td>\n<td><code>boolean</code></td>\n<td><code>Predicate&lt;T&gt;</code></td>\n<td><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td><code>allMatch</code></td>\n<td>终端</td>\n<td><code>boolean</code></td>\n<td><code>Predicate&lt;T&gt;</code></td>\n<td><code>T -&gt; boolean</code></td>\n</tr>\n<tr>\n<td><code>findAny</code></td>\n<td>终端</td>\n<td><code>Optional&lt;T&gt;</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>findFirst</code></td>\n<td>终端</td>\n<td><code>Optional&lt;T&gt;</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>forEach</code></td>\n<td>终端</td>\n<td><code>void</code></td>\n<td><code>Consumer&lt;T&gt;</code></td>\n<td><code>T -&gt; void</code></td>\n</tr>\n<tr>\n<td><code>collect</code></td>\n<td>终端</td>\n<td><code>R</code></td>\n<td><code>Collector&lt;T, A, R&gt;</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>reduce</code></td>\n<td>终端</td>\n<td><code>Optional&lt;T&gt;</code></td>\n<td><code>BinaryOperator&lt;T&gt;</code></td>\n<td><code>(T, T) -&gt; T</code></td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>终端</td>\n<td><code>long</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"新的日期和-API\"><a href=\"#新的日期和-API\" class=\"headerlink\" title=\"新的日期和 API\"></a>新的日期和 API</h3><blockquote>\n<p>参考：<a href=\"https://github.com/hellokaton/learn-java8/blob/master/java8-datetime-api/README.md\">hellokaton/learn-java8</a></p>\n</blockquote>\n","categories":["后端开发"],"tags":["技巧","笔记","Java"]},{"title":"Redis 缓存穿透、缓存击穿、缓存雪崩问题","url":"/2021/06/17/3db3af36.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在项目中引入一个缓存系统，不得不考虑的问题就是：缓存穿透、缓存击穿和缓存雪崩问题。</p>\n<h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><p>缓存穿透是指<strong>缓存和数据库中都没有的数据</strong>，而用户不断发起请求。由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p>\n<p>在流量大时，可能 DB 就挂掉了，要是有人利用不存在的 key 频繁攻击我们的应用，这就是漏洞。</p>\n<p>如发起为 id 为<code>-1</code>的数据或 id 为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。</p>\n<p><strong>解决方案：</strong></p>\n<ul>\n<li>接口层增加校验，如用户鉴权校验、id 基础校验（id&lt;=0 直接拦截）</li>\n<li>在数据库和缓存中都取不到的数据，可以将在缓存中存入一个空对象（<strong>key-null</strong>），设置一个短的有效时间。这样可以防止一个用户反复暴力攻击一个 id 请求</li>\n</ul>\n<h2 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h2><p><strong>缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期）</strong>，这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p>\n<p><strong>解决方案：</strong></p>\n<ol>\n<li><strong>设置热点数据永不过期</strong></li>\n<li><strong>接口限流与熔断，降级</strong>。重要的接口一定要做好限流策略，防止用户恶意刷接口，同时要做好降级准备，当接口中某些服务不可用时，进行熔断，失败快速返回机制</li>\n<li><strong>布隆过滤器</strong>。bloomfilter 就类似于一个 hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个 key 是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于 hash 算法和容器大小，</li>\n<li><strong>加互斥锁</strong></li>\n</ol>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><p>缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至 down 机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p>\n<p><strong>解决方案：</strong></p>\n<ol>\n<li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li>\n<li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。</li>\n<li>设置热点数据永远不过期。</li>\n</ol>\n","categories":["中间件"],"tags":["笔记","Redis"]},{"title":"深入理解 RESTful 风格","url":"/2021/06/12/6b25d652.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>大家对 RESTful 肯定不陌生，就算不知道它到底是什么，但肯定听过这个玩意。相信大家也很想知道 RESTful 能解决什么样的问题，有什么应用场景？看完本篇文章你就能明白：</p>\n<p>在互联网并没有盛行的时代， 移动端也还没有发展起来，页面请求和并发量也不高，那时候人们对接口的要求并不高，一些常规的动态页面（JSP）就能满足大部分人们的需求。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210610104619.png\" alt=\"image-20210610104612710\" style=\"zoom: 67%;\" />\n\n<p>但是随着移动设备和互联网的发展，人们对 Web 应用的需求也逐渐增加，传统的动态页面（JSP）也因效率低下而渐渐被 HTML + JavaScript（Ajax）的前后端分离所替代，而安卓、IOS、小程序等不同的客户端层出不穷，客户端的种类出现多元化，<strong>而客户端需要接口跟服务端进行通信</strong>，但接口的 <strong>规范性</strong> 就成了一个问题：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210610105253.png\" alt=\"image-20210610105253175\" style=\"zoom: 67%;\" />\n\n<p>所以一套 <strong>结构清晰、符合标准、易于理解、扩展方便</strong> 并且让大部分人都能理解并接收的接口风格就显得尤为重要，而 RESTful 风格的接口（RESTful API）刚好符合以上标准，就逐渐被应用从而流行起来。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210610105729.png\" alt=\"image-20210610105729739\" style=\"zoom: 67%;\" />\n\n<p>现在，RESTful 是目前最流行的接口设计规范，在很多公司有着广泛的使用。在开发实践中我们很多人可能还是使用传统 API 进行请求交互，很多人其实并不特别了解 RESTful API，对 RESTful API 的认知可能会停留在：</p>\n<ul>\n<li>面向资源类型的</li>\n<li>是一种风格</li>\n<li>（误区）接口传递参数使用斜杆（/）分割而用问号（?）传参</li>\n</ul>\n<p>而其实一个很大的误区不要认为没有查询字符串就是 RESTful API，也不要认为用了查询字符串就不是 RESTful API，更不要认为用了 JSON 传输的 API 就是 RESTful API。</p>\n<h2 id=\"一、REST-介绍\"><a href=\"#一、REST-介绍\" class=\"headerlink\" title=\"一、REST 介绍\"></a>一、REST 介绍</h2><p>REST 涉及一些概念性的东西可能比较多，在实战 RESTful API 之前，要对 REST 相关的知识有个系统的认知。</p>\n<h3 id=\"REST-的诞生\"><a href=\"#REST-的诞生\" class=\"headerlink\" title=\"REST 的诞生\"></a>REST 的诞生</h3><p>REST（英文：Representational State Transfer，简称 REST，直译过来表现层状态转换）是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>\n<p>它首次出现在 2000 年 Roy Thomas Fielding 的博士论文中，这篇论文定义并详细介绍了表述性状态转移（Representational State Transfer，REST）的架构风格，并且描述了 如何使用 REST 来指导现代 Web 架构的设计和开发。用他自己的原话说：</p>\n<blockquote>\n<p>写这篇文章的目的是：在符合架构原理前提下，理解和评估基于网络的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。</p>\n</blockquote>\n<p>需要注意的是 <strong>REST 并没有一个明确的标准，而更像是一种设计的风格</strong> ，满足这种设计风格的程序或接口我们称之为 RESTful(从单词字面来看就是一个形容词)。所以 RESTful API 就是满足 REST 架构风格的接口。</p>\n<h3 id=\"REST-架构特征\"><a href=\"#REST-架构特征\" class=\"headerlink\" title=\"REST 架构特征\"></a>REST 架构特征</h3><p>既然知道 REST 和 RESTful 的联系和区别，现在就要开始好好了解 RESTful 的一些约束条件和规则，RESTful 是一种风格而不是标准，而这个风格大致有以下几个主要 <strong>特征</strong>：</p>\n<p><strong>以资源为基础</strong> ：资源可以是一个图片、音乐、一个 XML 格式、HTML 格式或者 JSON 格式等网络上的一个实体，除了一些二进制的资源外普通的文本资源更多以 JSON 为载体、面向用户的一组数据(通常从数据库中查询而得到)。</p>\n<p><strong>统一接口</strong>: 对资源的操作包括获取、创建、修改和删除，这些操作正好对应 HTTP 协议提供的 GET、POST、PUT 和 DELETE 方法。换言而知，使用 RESTful 风格的接口但从接口上你可能只能定位其资源，但是无法知晓它具体进行了什么操作，需要具体了解其发生了什么操作动作要从其 HTTP 请求方法类型上进行判断。具体的 HTTP 方法和方法含义如下：</p>\n<ul>\n<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>\n<li>POST（CREATE）：在服务器新建一个资源。</li>\n<li>PUT（UPDATE）：在服务器更新资源（客户端提供完整资源数据）。</li>\n<li>PATCH（UPDATE）：在服务器更新资源（客户端提供需要修改的资源数据）。</li>\n<li>DELETE（DELETE）：从服务器删除资源。</li>\n</ul>\n<p>当然也有很多在具体使用的时候使用 PUT 表示更新。从请求的流程来看，RESTful API 和传统 API 大致架构如下：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210610133407.png\" alt=\"image-20210610133407454\" style=\"zoom:67%;\" />\n\n<p><strong>URI 指向资源</strong>：URI = Universal Resource Identifier 统一资源标志符，用来标识抽象或物理资源的一个紧凑字符串。URI 包括 URL 和 URN，在这里更多时候可能代指 URL(统一资源定位符)。RESTful 是面向资源的，每种资源可能由一个或多个 URI 对应，但一个 URI 只指向一种资源。</p>\n<p><strong>无状态</strong>：服务器不能保存客户端的信息， 每一次从客户端发送的请求中，要包含所有必须的状态信息，会话信息由客户端保存， 服务器端根据这些状态信息来处理请求。当客户端可以切换到一个新状态的时候发送请求信息， 当一个或者多个请求被发送之后, 客户端就处于一个状态变迁过程中。每一个应用的状态描述可以被客户端用来初始化下一次的状态变迁。</p>\n<h3 id=\"REST-架构限制条件\"><a href=\"#REST-架构限制条件\" class=\"headerlink\" title=\"REST 架构限制条件\"></a>REST 架构限制条件</h3><p>Fielding 在论文中提出 REST 架构的 6 个<strong>限制条件</strong>，也可称为 RESTful 6 大原则， 标准的 REST 约束应满足以下 6 个原则：</p>\n<p><strong>客户端-服务端（Client-Server）</strong>: 这个更专注客户端和服务端的分离，服务端独立可更好服务于前端、安卓、IOS 等客户端设备。</p>\n<p><strong>无状态（Stateless）</strong>：服务端不保存客户端状态，客户端保存状态信息每次请求携带状态信息。</p>\n<p><strong>可缓存性（Cacheability）</strong> ：服务端需回复是否可以缓存以让客户端甄别是否缓存提高效率。</p>\n<p><strong>统一接口（Uniform Interface）</strong>：通过一定原则设计接口降低耦合，简化系统架构，这是 RESTful 设计的基本出发点。</p>\n<p><strong>分层系统（Layered System）</strong>：客户端无法直接知道连接的到终端还是中间设备，分层允许你灵活的部署服务端项目。</p>\n<p><strong>按需代码（Code-On-Demand，可选）</strong>：按需代码允许我们灵活的发送一些看似特殊的代码给客户端例如 JavaScript 代码。</p>\n<h2 id=\"二、RESTful-API-设计规范\"><a href=\"#二、RESTful-API-设计规范\" class=\"headerlink\" title=\"二、RESTful API 设计规范\"></a>二、RESTful API 设计规范</h2><p>既然了解了 RESTful 的一些规则和特性，那么具体该怎么去设计一个 RESTful API 呢？要从 URL 路径、HTTP 请求动词、状态码和返回结果等方面详细考虑。</p>\n<h3 id=\"URL-设计规范\"><a href=\"#URL-设计规范\" class=\"headerlink\" title=\"URL 设计规范\"></a>URL 设计规范</h3><p>URL 为统一资源定位器 ,接口属于服务端资源，首先要通过 URL 定位到资源才能去访问，而通常一个完整的 URL 组成由以下几个部分构成：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">URI</span> <span class=\"operator\">=</span> scheme <span class=\"string\">&quot;://&quot;</span> host  <span class=\"string\">&quot;:&quot;</span>  port <span class=\"string\">&quot;/&quot;</span> path [ <span class=\"string\">&quot;?&quot;</span> query ][ <span class=\"string\">&quot;#&quot;</span> fragment ]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>scheme: 指底层用的协议，如 http、https、ftp</li>\n<li>host: 服务器的 IP 地址或者域名</li>\n<li>port: 端口，http 默认为 80 端口</li>\n<li>path: 访问资源的路径，就是各种 web 框架中定义的 route 路由</li>\n<li>query: 查询字符串，为发送给服务器的参数，在这里更多发送数据分页、排序等参数。</li>\n<li>fragment: 锚点，定位到页面的资源</li>\n</ul>\n<p>我们在设计 API 时 URL 的 path 是需要认真考虑的，而 RESTful 对 path 的设计做了一些规范，通常一个 RESTful API 的 path 组成如下：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">/</span><span class=\"punctuation\">&#123;</span>version<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>resources<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>resource_id<span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>version：API 版本号，有些版本号放置在头信息中也可以，通过控制版本号有利于应用迭代。</li>\n<li>resources：资源，RESTful API 推荐用小写英文单词的复数形式。</li>\n<li>resource_id：资源的 id，访问或操作该资源。</li>\n</ul>\n<p>当然，有时候可能资源级别较大，其下还可细分很多子资源也可以灵活设计 URL 的 path，例如：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">/</span><span class=\"punctuation\">&#123;</span>version<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>resources<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>resource_id<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>subresources<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>subresource_id<span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此外，有时可能增删改查无法满足业务要求，可以在 URL 末尾加上 action，例如：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">/</span><span class=\"punctuation\">&#123;</span>version<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>resources<span class=\"punctuation\">&#125;</span>/<span class=\"punctuation\">&#123;</span>resource_id<span class=\"punctuation\">&#125;</span>/action</span><br></pre></td></tr></table></figure>\n\n<p>其中 action 就是对资源的操作。</p>\n<p>从大体样式了解 URL 路径组成之后，对于 RESTful API 的 URL 具体设计的规范如下：</p>\n<ol>\n<li>不用大写字母，所有单词使用英文且小写。</li>\n<li>连字符用中杠<code>&quot;-&quot;</code>而不用下杠<code>&quot;_&quot;</code></li>\n<li>正确使用 <code>&quot;/&quot;</code>表示层级关系,URL 的层级不要过深，并且越靠前的层级应该相对越稳定</li>\n<li>结尾不要包含正斜杠分隔符<code>&quot;/&quot;</code></li>\n<li>URL 中不出现动词，用请求方式表示动作</li>\n<li>资源表示用复数不要用单数</li>\n<li>不要使用文件扩展名</li>\n</ol>\n<h3 id=\"HTTP-动词\"><a href=\"#HTTP-动词\" class=\"headerlink\" title=\"HTTP 动词\"></a>HTTP 动词</h3><p>在 <code>RESTful API</code> 中，不同的 HTTP 请求方法有各自的含义，这里就展示 <code>GET,POST,PUT,DELETE</code> 几种请求 API 的设计与含义分析。针对不同操作，具体的含义如下：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /collection：从服务器查询资源的列表（数组）</span><br><span class=\"line\">GET <span class=\"regexp\">/collection/</span>resource：从服务器查询单个资源</span><br><span class=\"line\">POST /collection：在服务器创建新的资源</span><br><span class=\"line\">PUT <span class=\"regexp\">/collection/</span>resource：更新服务器资源</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"regexp\">/collection/</span>resource：从服务器删除资源</span><br></pre></td></tr></table></figure>\n\n<p>在非 RESTful 风格的 API 中，我们通常使用 GET 请求和 POST 请求完成增删改查以及其他操作，查询和删除一般使用 GET 方式请求，更新和插入一般使用 POST 请求。从请求方式上无法知道 API 具体是干嘛的，所有在 URL 上都会有操作的动词来表示 API 进行的动作，例如：<code>query，add，update，delete</code> 等等。</p>\n<p>而 RESTful 风格的 API 则要求在 URL 上的都以名词的方式出现，从几种请求方式上就可以看出想要进行的操作，这与非 RSETful 风格的 API 形成鲜明的对比。</p>\n<p>在谈及 <code>GET,POST,PUT,DELETE</code> 的时候，就必须提一下接口的 <strong>安全性和幂等性</strong>，其中安全性是指方法不会修改资源状态，即读的为安全的，写的操作为非安全的。而幂等性的意思是操作一次和操作多次的最终效果相同，客户端重复调用也只返回同一个结果。</p>\n<p>上述四个 HTTP 请求方法的安全性和幂等性如下：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210610143432.png\" alt=\"image-20210610143431940\"></p>\n<h3 id=\"状态码和返回数据\"><a href=\"#状态码和返回数据\" class=\"headerlink\" title=\"状态码和返回数据\"></a>状态码和返回数据</h3><p>服务端处理完成后客户端也可能不知道具体成功了还是失败了，服务器响应时，包含<strong>状态码</strong>和<strong>返回数据</strong>两个部分。</p>\n<h4 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h4><p>我们首先要正确使用各类状态码来表示该请求的处理执行结果。状态码主要分为五大类：</p>\n<blockquote>\n<p>1xx：相关信息<br>2xx：操作成功<br>3xx：重定向<br>4xx：客户端错误<br>5xx：服务器错误</p>\n</blockquote>\n<p>每一大类有若干小类，状态码的种类比较多，而主要常用状态码罗列在下面：</p>\n<ul>\n<li>200 <code>OK - [GET]</code>：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）</li>\n<li>201 <code>CREATED - [POST/PUT/PATCH]</code>：用户新建或修改数据成功</li>\n<li>202 <code>Accepted - [*]</code>：表示一个请求已经进入后台排队（异步任务）</li>\n<li>204 <code>NO CONTENT - [DELETE]</code>：用户删除数据成功。</li>\n<li>400 <code>INVALID REQUEST - [POST/PUT/PATCH]</code>：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的</li>\n<li>401 <code>Unauthorized - [*]</code>：表示用户没有权限（令牌、用户名、密码错误）</li>\n<li>403 <code>Forbidden - [*]</code> 表示用户得到授权（与 401 错误相对），但是访问是被禁止的</li>\n<li>404 <code>NOT FOUND - [*]</code>：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的</li>\n<li>406 <code>Not Acceptable - [GET]</code>：用户请求的格式不可得（比如用户请求 JSON 格式，但是只有 XML 格式）</li>\n<li>410 <code>Gone -[GET]</code>：用户请求的资源被永久删除，且不会再得到的</li>\n<li>422 <code>Unprocesable entity - [POST/PUT/PATCH]</code> 当创建一个对象时，发生一个验证错误</li>\n<li>500 <code>INTERNAL SERVER ERROR - [*]</code>：服务器发生错误，用户将无法判断发出的请求是否成功</li>\n</ul>\n<h4 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h4><p>针对不同操作，服务器向用户返回数据，而各个团队或公司封装的返回实体类也不同，但都返回 JSON 格式数据给客户端。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>RESTful 风格的 API 固然很好很规范，但大多数互联网公司并没有按照或者完全按照其规则来设计，因为 REST 是一种风格，而不是一种约束或规则，过于理想的 RESTful API 会付出太多的成本。</p>\n<p>比如 RESTful API 也有一些缺点：</p>\n<ul>\n<li>比如操作方式繁琐，<code>RESTful API</code> 通常根据 <code>GET、POST、PUT、DELETE</code> 来区分操作资源的动作，而 HTTP Method 本身不可直接见，是隐藏的，而如果将动作放到 URL 的 <code>path</code> 上反而清晰可见，更利于团队的理解和交流。</li>\n<li>并且有些浏览器对 <code>GET,POST</code> 之外的请求支持不太友好，还需要特殊额外的处理。</li>\n<li>过分强调资源，而实际业务 API 可能有各种需求比较复杂，单单使用资源的增删改查可能并不能有效满足使用需求，强行使用<code>RESTful</code> 风格 API 只会增加开发难度和成本。</li>\n</ul>\n<p>所以，当你或你们的技术团队在设计 API 的时候，如果使用场景和 REST 风格很匹配，那么你们可以采用 RESTful 风格 API。但是如果业务需求和 RESTful 风格 API 不太匹配或者很麻烦，那也可以不用 RESTful 风格 API 或者可以借鉴一下，毕竟无论那种风格的 API 都是为了方便团队开发、协商以及管理，不能墨守成规。</p>\n","categories":["随笔小记"],"tags":["技巧","笔记"]},{"title":"缓存数据库双写一致性问题","url":"/2021/05/23/30168694.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在项目中引入缓存系统，我们需要考虑在对旧数据进行更新操作时，我们是先淘汰缓存，再更新数据库；还是先更新数据库，再淘汰缓存。或者是更新数据库，再更新缓存呢？下面是对这三种方案的优缺点的一些总结：</p>\n<h2 id=\"缓存更新策略\"><a href=\"#缓存更新策略\" class=\"headerlink\" title=\"缓存更新策略\"></a>缓存更新策略</h2><ol>\n<li>先更新数据库，再更新缓存</li>\n<li>先更新数据库，再删除缓存</li>\n<li>先删除缓存，再更新数据库</li>\n</ol>\n<h2 id=\"先更新数据库，再更新缓存\"><a href=\"#先更新数据库，再更新缓存\" class=\"headerlink\" title=\"先更新数据库，再更新缓存\"></a>先更新数据库，再更新缓存</h2><blockquote>\n<p>这套方案适用场景比较少，主要从下面几个原因分析：</p>\n</blockquote>\n<h3 id=\"资源浪费\"><a href=\"#资源浪费\" class=\"headerlink\" title=\"资源浪费\"></a>资源浪费</h3><p>在一些大型的信息网站中（博客、贴吧），我们引入缓存主要是对热数据（请求频繁的）进行缓存，而这时候，如果很多用户对于冷数据（长时间没人访问，或者访问量很少）进行更新，然后再去更新缓存，这就造成了缓存资源的大量浪费（因为访问量少，导致这些缓存命中低，浪费缓存资源）。</p>\n<h3 id=\"脏数据\"><a href=\"#脏数据\" class=\"headerlink\" title=\"脏数据\"></a>脏数据</h3><p>这是由于出现了并发操作的原因导致的，如：同时有两个请求 A 和 B 对数据进行了更新操作，由于网络原因，可能存在以下情况：</p>\n<ol>\n<li>请求 A 更新了数据库</li>\n<li>请求 B 更新了数据库</li>\n<li>请求 B 更新了缓存</li>\n<li>请求 A 更新了缓存</li>\n</ol>\n<p>这就出现了 A 数据覆盖了 B 数据的情况，此时就产生了脏数据，如果没有缓存定时过期机制，此时的脏数据需要等待下一次的更新，才会对缓存进行更新，虽然用户看到数据出现问题，会再重新更新一次，但这已经有多了一次不必要的请求了，写请求量大的时候，容易造成众多不必要的更新请求。</p>\n<h3 id=\"请求时间\"><a href=\"#请求时间\" class=\"headerlink\" title=\"请求时间\"></a>请求时间</h3><p>如果缓存不是一种简单的数据缓存，而是需要经过较为复杂的运算，才能得出缓存值，这时候，请求将会在计算缓存值上，耗费一部分时间，而这就导致了请求的响应时间变长，增加系统的负担，降低了系统的处理能力。</p>\n<h3 id=\"频繁写入\"><a href=\"#频繁写入\" class=\"headerlink\" title=\"频繁写入\"></a>频繁写入</h3><p>在写请求很多，而读请求很少的场景下，缓存没起到多大的作用，就给频繁更新了，造成了资源浪费，如：</p>\n<ol>\n<li>对数据 A 进行了一次修改，生成了缓存 A</li>\n<li>此时没有读取数据 A 的请求</li>\n<li>对数据 A 进行了一次修改，更新了缓存 A</li>\n<li>此时没有读取数据 A 的请求</li>\n<li>对数据 A 进行了一次修改</li>\n<li>此时有了读取数据 A 的请求</li>\n</ol>\n<p>这时就会造成缓存的不必要更新操作（没有人读取缓存），用户量大的时候，会造成大量的不必要操作，造成系统资源的浪费</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>一般适用于下列几种场景：</p>\n<ol>\n<li>读请求占据网站的总流量的 99%</li>\n<li>网站数据量不大（几十万的文章数据）</li>\n<li>很少会去更新数据（一般文章写好后，不会去更新）</li>\n</ol>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><ol>\n<li>个人博客</li>\n<li>手册网站（w3cschool、菜鸟教程等）</li>\n</ol>\n<h2 id=\"先更新数据库，再删除缓存\"><a href=\"#先更新数据库，再删除缓存\" class=\"headerlink\" title=\"先更新数据库，再删除缓存\"></a>先更新数据库，再删除缓存</h2><p>这套方案比较多的平台适用，如 FaceBook。但也存在一些问题：</p>\n<h3 id=\"脏数据-1\"><a href=\"#脏数据-1\" class=\"headerlink\" title=\"脏数据\"></a>脏数据</h3><p>造成脏数据的原因主要由并发引起，如：</p>\n<ol>\n<li>用户 A 请求数据 A</li>\n<li>数据 A 缓存失效</li>\n<li>用户 A 从数据库中得到旧数据数据 A</li>\n<li>用户 B 更新了数据 A（新数据）</li>\n<li>用户 B 删除了缓存</li>\n<li>用户 A 将查到旧数据写入了缓存</li>\n</ol>\n<p><strong>此时就产生了脏数据，虽然这种概率非常小，但对于更新不频繁的网站来说，此时的脏数据就是个很严重的错误。</strong></p>\n<h3 id=\"缓存删除失效\"><a href=\"#缓存删除失效\" class=\"headerlink\" title=\"缓存删除失效\"></a>缓存删除失效</h3><ol>\n<li>用户 A 更新了数据 A</li>\n<li>用户 A 删除数据 A 的缓存失败</li>\n<li>用户 B 读到数据 A 缓存的旧数据</li>\n</ol>\n<p>此时就产生了数据不一致的问题。</p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><h4 id=\"设置缓存的有效时间（最简单的解决方案）\"><a href=\"#设置缓存的有效时间（最简单的解决方案）\" class=\"headerlink\" title=\"设置缓存的有效时间（最简单的解决方案）\"></a>设置缓存的有效时间（最简单的解决方案）</h4><p><strong>优点：</strong></p>\n<ul>\n<li>简单</li>\n<li>易操作</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>会存在短时间内的旧数据</li>\n<li>如果数据量太多，缓存有效时间短，容易发生一段时间内缓存大量失效，此时的数据库压力突然剧增，引发缓存雪崩现象（缓存有效时间为随机值减少发生缓存雪崩的可能性）</li>\n</ul>\n<h4 id=\"消息队列（增加复杂性，需要引入消息队列系统）\"><a href=\"#消息队列（增加复杂性，需要引入消息队列系统）\" class=\"headerlink\" title=\"消息队列（增加复杂性，需要引入消息队列系统）\"></a>消息队列（增加复杂性，需要引入消息队列系统）</h4><p><strong>步骤：</strong></p>\n<ol>\n<li>更新数据库</li>\n<li>删除缓存失败</li>\n<li>将需要删除的 Key 发送到消息队列</li>\n<li>隔断时间从消息队列中拉取要删除的 key</li>\n<li>继续删除，直至成功为止</li>\n</ol>\n<p><strong>优点：</strong></p>\n<ul>\n<li>不会引发缓存雪崩</li>\n<li>保证了缓存的删除</li>\n<li>不会增加更新的处理时间</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>引入了消息队列系统，增加了系统的复杂性</li>\n</ul>\n<h2 id=\"先删除缓存，在更新数据库\"><a href=\"#先删除缓存，在更新数据库\" class=\"headerlink\" title=\"先删除缓存，在更新数据库\"></a>先删除缓存，在更新数据库</h2><p>这种方案是比较多人使用的，但也会出现脏数据问题</p>\n<h3 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a><strong>原因：</strong></h3><ol>\n<li>用户 A 删除缓存失败</li>\n<li>用户 A 成功更新了数据</li>\n</ol>\n<p>或者</p>\n<ol>\n<li>用户 A 删除了缓存</li>\n<li>用户 B 读取缓存，缓存不存在</li>\n<li>用户 B 从数据库拿到旧数据</li>\n<li>用户 B 更新了缓存</li>\n<li>用户 A 更新了数据</li>\n</ol>\n<p>以上两种情况都能造成脏数据的产生</p>\n<h3 id=\"解决方案：-1\"><a href=\"#解决方案：-1\" class=\"headerlink\" title=\"解决方案：\"></a><strong>解决方案：</strong></h3><h4 id=\"设置缓存的有效时间（最简单的解决方案）-1\"><a href=\"#设置缓存的有效时间（最简单的解决方案）-1\" class=\"headerlink\" title=\"设置缓存的有效时间（最简单的解决方案）\"></a>设置缓存的有效时间（最简单的解决方案）</h4><p><strong>优点：</strong></p>\n<ul>\n<li>简单</li>\n<li>易操作</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>会存在短时间内的旧数据</li>\n<li>如果数据量太多，缓存有效时间短，容易发生一段时间内缓存大量失效，此时的数据库压力突然剧增，引发缓存雪崩现象（缓存有效时间为随机值减少发生缓存雪崩的可能性）</li>\n</ul>\n<h4 id=\"消息队列（增加复杂性，需要引入消息队列系统）-1\"><a href=\"#消息队列（增加复杂性，需要引入消息队列系统）-1\" class=\"headerlink\" title=\"消息队列（增加复杂性，需要引入消息队列系统）\"></a>消息队列（增加复杂性，需要引入消息队列系统）</h4><p><strong>步骤：</strong></p>\n<ol>\n<li>更新数据库</li>\n<li>删除缓存失败</li>\n<li>将需要删除的 Key 发送到消息队列</li>\n<li>隔断时间从消息队列中拉取要删除的 key</li>\n<li>继续删除，直至成功为止</li>\n</ol>\n<p><strong>优点：</strong></p>\n<ul>\n<li>不会引发缓存雪崩</li>\n<li>保证了缓存的删除</li>\n<li>不会增加更新的处理时间</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>引入了消息队列系统，增加了系统的复杂性</li>\n</ul>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ol>\n<li>以上的几种方案需根据自己的业务来选择</li>\n<li>存在即合理，各有优缺点</li>\n<li>使用设置缓存失效时间时，需注意缓存雪崩问题</li>\n<li>可以使用消息队列来避免脏数据的出现</li>\n</ol>\n","categories":["随笔小记"],"tags":["笔记","Redis","分布式"]},{"title":"接口幂等性问题","url":"/2021/05/20/63f0196d.html","content":"<h2 id=\"接口调用出现的问题\"><a href=\"#接口调用出现的问题\" class=\"headerlink\" title=\"接口调用出现的问题\"></a>接口调用出现的问题</h2><p>在分布式架构的系统中，通常是多个微服务之间互相调用，而服务调用服务无非就是 RPC 或 Restful 进行通信，既然是通信，那么就存在服务器处理完毕返回结果的途中挂掉，这也是分布式系统因网络不可达出现的问题。这个时候用户端很久没有得到服务端的响应，那么就会多次点击按钮，这样请求多次，那么处理数据的结果是否要保持一致呢？答案是肯定的！尤其是在一些订单与支付的场景。</p>\n<h2 id=\"什么是接口幂等性？\"><a href=\"#什么是接口幂等性？\" class=\"headerlink\" title=\"什么是接口幂等性？\"></a>什么是接口幂等性？</h2><p>接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额返发现多扣钱了，流水记录也变成了两条，这就没有保证接口的幂等性。</p>\n<h2 id=\"什么情况下需要保持接口的幂等性？\"><a href=\"#什么情况下需要保持接口的幂等性？\" class=\"headerlink\" title=\"什么情况下需要保持接口的幂等性？\"></a>什么情况下需要保持接口的幂等性？</h2><p>我们对处理数据无非就是增删改查四个操作？那么那些操作需要保持接口的幂等性？==&gt; <strong>insert 与 update</strong></p>\n<ul>\n<li>查询操作 ==&gt; 查询一次或者多次对于结果的影响是不会有改变的，所以 select 是天然的幂等性操作</li>\n<li>删除操作 ==&gt; 删除一次与删除多次都是将数据删除（但是注意返回的结果是不一样的，成功 1 失败 0，在不考虑结果的情况下，删除操作也是幂等性操作）</li>\n<li>更新操作 ==&gt; 修改操作在大多情况下结果都是一样的，除非是增量修改，那么就是要保持幂等性的。例如：<ul>\n<li>将表中的某条记录的某个字段设置为 1 ==&gt; 这个操作不管执行多少次都是幂等的</li>\n<li>将表中的某条记录的某个字段增加 1 ==&gt; 这个操作是不保证幂等性的</li>\n</ul>\n</li>\n<li>新增操作 ==&gt; 新增操作肯定是会出现幂等性问题的，例如上面的支付问题。、</li>\n</ul>\n<h2 id=\"那么如何才能保持接口的幂等性？\"><a href=\"#那么如何才能保持接口的幂等性？\" class=\"headerlink\" title=\"那么如何才能保持接口的幂等性？\"></a>那么如何才能保持接口的幂等性？</h2><h3 id=\"增加数据之前先查询\"><a href=\"#增加数据之前先查询\" class=\"headerlink\" title=\"增加数据之前先查询\"></a>增加数据之前先查询</h3><p>通常情况下，在保存数据的接口中，我们为了防止产生重复数据，一般会在<code>insert</code>前，先根据<code>name</code>或<code>code</code>字段<code>select</code>一下数据。如果该数据已存在，则执行<code>update</code>操作，如果不存在，才执行<code>insert</code>操作。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210519235210.png\" alt=\"image-20210519235203446\" style=\"zoom: 50%;\" />\n\n<p>==该方案并不适用于并发场景，在并发场景中，要配合其他的方案一起使用，否则还是会造成重复的数据。==</p>\n<h3 id=\"加悲观锁\"><a href=\"#加悲观锁\" class=\"headerlink\" title=\"加悲观锁\"></a>加悲观锁</h3><p>在支付场景中，用户 A 的账号余额有 150 元，想转出 100 元，正常情况下用户 A 的余额只剩 50 元。一般情况下，sql 是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> amount <span class=\"operator\">=</span> amount<span class=\"number\">-100</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果出现多次相同的请求，可能会导致用户 A 的余额变成负数。这种情况，用户 A 来可能要哭了。与此同时，系统开发人员可能也要哭了，因为这是很严重的系统 bug。</p>\n<p>为了解决这个问题，可以加悲观锁，将用户 A 的那行数据锁住，在同一时刻只允许一个请求获得锁，更新数据，其他的请求则等待。</p>\n<p>通常情况下通过如下 sql 锁住单行数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> id<span class=\"operator\">=</span><span class=\"number\">123</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br></pre></td></tr></table></figure>\n\n<p>具体的流程如下：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210519235501.png\" alt=\"image-20210519235500888\" style=\"zoom:50%;\" />\n\n<p>具体步骤：</p>\n<ol>\n<li>多个请求同时根据 id 查询用户信息</li>\n<li>判断余额是否不足 100，如果余额不足，则直接返回余额不足</li>\n<li>如果余额充足，则通过 for update 再次查询用户信息，并且尝试获取锁</li>\n<li>只有第一个请求能获取到行锁，其余没有获取锁的请求，则等待下一次获取锁的机会</li>\n<li>第一个请求获取到锁之后，判断余额是否不足 100，如果余额足够，则进行 update 操作</li>\n<li>如果余额不足，说明是重复请求，则直接返回成功</li>\n</ol>\n<blockquote>\n<p><strong>需要特别注意的是：如果使用的是 mysql 数据库，存储引擎必须用 innodb，因为它才支持事务。此外，这里 id 字段一定要是主键或者唯一索引，不然会锁住整张表。</strong></p>\n</blockquote>\n<p>悲观锁需要在同一个事务操作过程中锁住一行数据，如果事务耗时比较长，会造成大量的请求等待，影响接口性能。</p>\n<p>此外，每次请求接口很难保证都有相同的返回值，所以不适合幂等性设计场景，但是在防重场景中是可以的使用的。</p>\n<p>在这里顺便说一下，<code>防重设计</code>和<code>幂等设计</code>，其实是有区别的。 防重设计主要为了避免产生重复数据，对接口返回没有太多要求。 而幂等设计除了避免产生重复数据之外，还要求每次请求都返回一样的结果。</p>\n<h3 id=\"加乐观锁\"><a href=\"#加乐观锁\" class=\"headerlink\" title=\"加乐观锁\"></a>加乐观锁</h3><p>既然悲观锁有性能问题，为了提升接口性能，我们可以使用乐观锁。需要在表中增加一个<code>timestamp</code>或者<code>version</code>字段，这里以<code>version</code>字段为例。</p>\n<p>在更新数据之前先查询一下数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,amount,version <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> id<span class=\"operator\">=</span><span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果数据存在，假设查到的<code>version</code>等于<code>1</code>，再使用<code>id</code>和<code>version</code>字段作为查询条件更新数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> amount<span class=\"operator\">=</span>amount<span class=\"operator\">+</span><span class=\"number\">100</span>,version<span class=\"operator\">=</span>version<span class=\"operator\">+</span><span class=\"number\">1</span><span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">123</span> <span class=\"keyword\">and</span> version<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>更新数据的同时<code>version+1</code>，然后判断本次<code>update</code>操作的影响行数，如果大于 0，则说明本次更新成功，如果等于 0，则说明本次更新没有让数据变更。</p>\n<p>由于第一次请求<code>version</code>等于<code>1</code>是可以成功的，操作成功后<code>version</code>变成<code>2</code>了。这时如果并发的请求过来，再执行相同的 sql：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"keyword\">user</span> <span class=\"keyword\">set</span> amount<span class=\"operator\">=</span>amount<span class=\"operator\">+</span><span class=\"number\">100</span>,version<span class=\"operator\">=</span>version<span class=\"operator\">+</span><span class=\"number\">1</span><span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">123</span> <span class=\"keyword\">and</span> version<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>该<code>update</code>操作不会真正更新数据，最终 sql 的执行结果影响行数是<code>0</code>，因为<code>version</code>已经变成<code>2</code>了，<code>where</code>中的<code>version=1</code>肯定无法满足条件。但为了保证接口幂等性，接口可以直接返回成功，因为<code>version</code>值已经修改了，那么前面必定已经成功过一次，后面都是重复的请求。</p>\n<p>具体的流程如下：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210520000025.png\" alt=\"image-20210520000025733\" style=\"zoom:50%;\" />\n\n<p>具体步骤：</p>\n<ol>\n<li>先根据 id 查询用户信息，包含 version 字段</li>\n<li>根据 id 和 version 字段值作为 where 条件的参数，更新用户信息，同时 version+1</li>\n<li>判断操作影响行数，如果影响 1 行，则说明是一次请求，可以做其他数据操作</li>\n<li>如果影响 0 行，说明是重复请求，则直接返回成功</li>\n</ol>\n<h3 id=\"加唯一索引\"><a href=\"#加唯一索引\" class=\"headerlink\" title=\"加唯一索引\"></a>加唯一索引</h3><p>绝大数情况下，为了防止重复数据的产生，我们都会在表中加唯一索引，这是一个非常简单，并且有效的方案。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> `<span class=\"keyword\">order</span>` <span class=\"keyword\">add</span> <span class=\"keyword\">UNIQUE</span> KEY `un_code` (`code`);</span><br></pre></td></tr></table></figure>\n\n<p>加了唯一索引之后，第一次请求数据可以插入成功。但后面的相同请求，插入数据时会报<code>Duplicate entry &#39;002&#39; for key &#39;order.un_code</code>异常，表示唯一索引有冲突。</p>\n<p>虽说抛异常对数据来说没有影响，不会造成错误数据。但是为了保证接口幂等性，我们需要对该异常进行捕获，然后返回成功。</p>\n<p>如果是<code>java</code>程序需要捕获：<code>DuplicateKeyException</code>异常，如果使用了<code>spring</code>框架还需要捕获：<code>MySQLIntegrityConstraintViolationException</code>异常。</p>\n<p>具体流程如下：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210520000719.png\" alt=\"image-20210520000719765\" style=\"zoom:50%;\" />\n\n<p>具体步骤：</p>\n<ol>\n<li>用户通过浏览器发起请求，服务端收集数据</li>\n<li>将该数据插入 mysql</li>\n<li>判断是否执行成功，如果成功，则操作其他数据（可能还有其他的业务逻辑）</li>\n<li>如果执行失败，捕获唯一索引冲突异常，直接返回成功</li>\n</ol>\n<h3 id=\"根据状态判断\"><a href=\"#根据状态判断\" class=\"headerlink\" title=\"根据状态判断\"></a>根据状态判断</h3><p>很多时候业务表是有状态的，比如订单表中有：1-下单、2-已支付、3-完成、4-撤销等状态。如果这些状态的值是有规律的，按照业务节点正好是从小到大，我们就能通过它来保证接口的幂等性。</p>\n<p>假如 id=123 的订单状态是<code>已支付</code>，现在要变成<code>完成</code>状态：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> `<span class=\"keyword\">order</span>` <span class=\"keyword\">set</span> status<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">123</span> <span class=\"keyword\">and</span> status<span class=\"operator\">=</span><span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>第一次请求时，该订单的状态是<code>已支付</code>，值是<code>2</code>，所以该<code>update</code>语句可以正常更新数据，sql 执行结果的影响行数是<code>1</code>，订单状态变成了<code>3</code>。</p>\n<p>后面有相同的请求过来，再执行相同的 sql 时，由于订单状态变成了<code>3</code>，再用<code>status=2</code>作为条件，无法查询出需要更新的数据，所以最终 sql 执行结果的影响行数是<code>0</code>，即不会真正的更新数据。但为了保证接口幂等性，影响行数是<code>0</code>时，接口也可以直接返回成功。</p>\n<p>具体的流程如下：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210520001401.png\" alt=\"image-20210520001401770\" style=\"zoom:50%;\" />\n\n<p>具体步骤：</p>\n<ol>\n<li>用户通过浏览器发起请求，服务端收集数据</li>\n<li>根据 id 和当前状态作为条件，更新成下一个状态</li>\n<li>判断操作影响行数，如果影响了 1 行，说明当前操作成功，可以进行其他数据操作</li>\n<li>如果影响了 0 行，说明是重复请求，直接返回成功</li>\n</ol>\n<blockquote>\n<p><strong>主要特别注意的是，该方案仅限于要更新的表有状态字段，并且刚好要更新状态字段的这种特殊情况，并非所有场景都适用。</strong></p>\n</blockquote>\n<h3 id=\"加分布式锁\"><a href=\"#加分布式锁\" class=\"headerlink\" title=\"加分布式锁\"></a>加分布式锁</h3><p>其实前面介绍过的<code>加唯一索引</code>或者<code>加防重表</code>，本质是使用了<code>数据库</code>的<code>分布式锁</code>，也属于分布式锁的一种。但由于<code>数据库分布式锁</code>的性能不太好，我们可以改用：<code>redis</code>或<code>zookeeper</code>。本文主要介绍<code>redis</code>的分布式锁：</p>\n<p>目前主要有三种方式实现 redis 的分布式锁：</p>\n<ol>\n<li>setNx 命令</li>\n<li>set 命令</li>\n<li>Redission 框架</li>\n</ol>\n<p>具体流程如下：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210520002920.png\" alt=\"image-20210520002920546\" style=\"zoom:50%;\" />\n\n<p>具体步骤：</p>\n<ol>\n<li>用户通过浏览器发起请求，服务端会收集数据，并且生成订单号 code 作为唯一业务字段</li>\n<li>使用 redis 的 set 命令，将该订单 code 设置到 redis 中，同时设置超时时间</li>\n<li>判断是否设置成功，如果设置成功，说明是第一次请求，则进行数据操作</li>\n<li>如果设置失败，说明是重复请求，则直接返回成功</li>\n</ol>\n<blockquote>\n<p><strong>需要特别注意的是：分布式锁一定要设置一个合理的过期时间，如果设置过短，无法有效的防止重复请求。如果设置过长，可能会浪费 redis 的存储空间，需要根据实际业务情况而定。</strong></p>\n</blockquote>\n<h3 id=\"根据-token-判断\"><a href=\"#根据-token-判断\" class=\"headerlink\" title=\"根据 token 判断\"></a>根据 token 判断</h3><p>除了上述方案之外，还有最后一种使用<code>token</code>的方案。该方案跟之前的所有方案都有点不一样，需要两次请求才能完成一次业务操作。</p>\n<ol>\n<li>第一次请求获取<code>token</code></li>\n<li>第二次请求带着这个<code>token</code>，完成业务操作</li>\n</ol>\n<p>具体的流程如下：</p>\n<ol>\n<li><p>获取<code>token</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210520003135.png\" alt=\"image-20210520003135146\" style=\"zoom:50%;\" /></li>\n<li><p>做具体业务</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210520003206.png\" alt=\"image-20210520003206028\" style=\"zoom:50%;\" /></li>\n</ol>\n<p>具体步骤：</p>\n<ol>\n<li>用户访问页面时，浏览器自动发起获取 token 请求</li>\n<li>服务端生成 token，保存到 redis 中，然后返回给浏览器</li>\n<li>用户通过浏览器发起请求时，携带该 token</li>\n<li>在 redis 中查询该 token 是否存在，如果不存在，说明是第一次请求，做则后续的数据操作</li>\n<li>如果存在，说明是重复请求，则直接返回成功</li>\n<li>在 redis 中 token 会在过期时间之后，被自动删除</li>\n</ol>\n<blockquote>\n<p><strong>需要特别注意的是：token 必须是全局唯一的。</strong></p>\n</blockquote>\n","categories":["随笔小记"],"tags":["笔记","分布式"]},{"title":"Redis 缓存数据库","url":"/2021/05/17/3db3af36.html","content":"<h2 id=\"为什么要用-Nosql\"><a href=\"#为什么要用-Nosql\" class=\"headerlink\" title=\"为什么要用 Nosql\"></a>为什么要用 Nosql</h2><blockquote>\n<p>1、单机 MySQL 的年代！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420135521.png\"></p>\n<p>90 年代，一个基本的网站访问量一般不会太大，单个数据库完全足够！</p>\n<p>那个时候，更多的去使用静态网页 HTML ==&gt; 服务器根本没有太大的压力！</p>\n<p>思考一下，这种情况下：整个网站的瓶颈是什么？</p>\n<ol>\n<li>数据量如果太大，一个机器放不下了！</li>\n<li>数据的索引（ B + Tree），一个机器内存也放不下</li>\n<li>访问量（读写混合），一个服务器承受不了</li>\n</ol>\n<p>只要你开始出现以上的三种情况之一，那么你就必须晋级！</p>\n<blockquote>\n<p>2、Memcached（缓存）+ MySQL + 垂直拆分（读写分离）</p>\n</blockquote>\n<p>网站 80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！</p>\n<p>发展过程：优化数据结构和索引 –&gt; 文件缓存（IO）–&gt; Memcached（当时最热门的技术！）</p>\n<blockquote>\n<p>3、分库分表 + 水平拆分 + MySQL 集群</p>\n</blockquote>\n<p>技术和业务在发展的同时，对人的要求也越来越高！</p>\n<p>==本质：数据库（读、写）==</p>\n<p>早些年 MyISAM：表锁，十分影响效率！高并发下就会出现严重的锁问题</p>\n<p>转战 Innodb：行锁</p>\n<p>慢慢的就开始使用分库分表来解决写的压力！MySQL 在那个年代就推出了 表分区！这个并没有多少公司使用！</p>\n<p>MySQL 的集群，很好的满足那个年代的需求！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420134715.png\" alt=\"img\"></p>\n<blockquote>\n<p>4、最近的年代</p>\n</blockquote>\n<p>如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql 数据库就能轻松解决这些问题。目前一个基本的互联网项目：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420134812.png\" alt=\"img\"></p>\n<blockquote>\n<p>为什么要用 NoSQL！</p>\n</blockquote>\n<p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！这时候我们就需要使用 NoSQL 数据库的，Nosql 可以很好的处理以上的情况！</p>\n<h2 id=\"什么是-NoSQL\"><a href=\"#什么是-NoSQL\" class=\"headerlink\" title=\"什么是 NoSQL\"></a>什么是 NoSQL</h2><blockquote>\n<p>NoSQL</p>\n</blockquote>\n<p>NoSQL = Not Only SQL（不仅仅是 SQL）</p>\n<p>Not Only Structured Query Language</p>\n<p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p>\n<p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p>\n<p>NoSQL 泛指非关系型数据库，随着 web2.0 互联网的诞生，传统的关系型数据库很难对付 web2.0 时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL 在当今大数据环境下发展的十分迅速，Redis 是发展最快的。</p>\n<blockquote>\n<p>NoSQL 特点</p>\n</blockquote>\n<ol>\n<li>方便扩展（数据之间没有关系，很好扩展！）</li>\n<li>大数据量高性能（Redis 一秒可以写 8 万次，读 11 万次，NoSQL 的缓存记录级，是一种细粒度的缓存，性能会比较高！）</li>\n<li>数据类型是多样型的！（不需要事先设计数据库，随取随用）</li>\n<li>传统的 RDBMS 和 NoSQL</li>\n</ol>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">传统的 RDBMS</span><br><span class=\"line\"><span class=\"bullet\">- </span>结构化组织</span><br><span class=\"line\"><span class=\"bullet\">- </span>SQL</span><br><span class=\"line\"><span class=\"bullet\">- </span>数据和关系都存在单独的表中 row col</span><br><span class=\"line\"><span class=\"bullet\">- </span>操作，数据定义语言</span><br><span class=\"line\"><span class=\"bullet\">- </span>严格的一致性</span><br><span class=\"line\"><span class=\"bullet\">- </span>严格的事务</span><br><span class=\"line\"><span class=\"bullet\">- </span>...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">NoSQL</span><br><span class=\"line\"><span class=\"bullet\">- </span>不仅仅是数据</span><br><span class=\"line\"><span class=\"bullet\">- </span>没有固定的查询语言</span><br><span class=\"line\"><span class=\"bullet\">- </span>键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class=\"line\"><span class=\"bullet\">- </span>最终一致性</span><br><span class=\"line\"><span class=\"bullet\">- </span>CAP定理和BASE</span><br><span class=\"line\"><span class=\"bullet\">- </span>高性能，高可用，高可扩</span><br><span class=\"line\"><span class=\"bullet\">- </span>...</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>了解：3V+3 高</p>\n</blockquote>\n<ul>\n<li><p>大数据时代的 3V ：主要是描述问题的</p>\n<ul>\n<li>海量 Velume</li>\n<li>多样 Variety</li>\n<li>实时 Velocity</li>\n</ul>\n</li>\n<li><p>大数据时代的 3 高 ： 主要是对程序的要求</p>\n<ul>\n<li>高并发</li>\n<li>高可扩</li>\n<li>高性能</li>\n</ul>\n</li>\n</ul>\n<p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p>\n<h2 id=\"NoSQL-的四大分类\"><a href=\"#NoSQL-的四大分类\" class=\"headerlink\" title=\"NoSQL 的四大分类\"></a>NoSQL 的四大分类</h2><p><strong>KV 键值对</strong></p>\n<ul>\n<li>新浪：Redis</li>\n<li>美团：Redis + Tair</li>\n<li>阿里、百度：Redis + memecache</li>\n</ul>\n<p><strong>文档型数据库（bson 格式 和 json 一样）</strong></p>\n<ul>\n<li>mongoDB<ul>\n<li>MongoDB 是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档！</li>\n<li>MongoDB 是一个介于关系型数据库和非关系型数据库中间的产品！MongoDB 是非关系型数据库汇总功能最丰富的，最像关系型数据库的！</li>\n</ul>\n</li>\n<li>CouchDB</li>\n</ul>\n<p><strong>列存储数据库</strong></p>\n<ul>\n<li>HBase</li>\n<li>分布式文件系统</li>\n</ul>\n<p><strong>图关系数据库</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420211847.png\" alt=\"image-20210420211847626\"></p>\n<ul>\n<li>他不是存图形，放的是关系，比如：朋友圈社交网络，广告推荐！</li>\n<li><strong>Neo4j</strong>，infoGrid</li>\n</ul>\n<h1 id=\"Redis-入门\"><a href=\"#Redis-入门\" class=\"headerlink\" title=\"Redis 入门\"></a>Redis 入门</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>Redis 是什么？</p>\n</blockquote>\n<p>Redis（Remote Dictionary Server )，即远程字典服务。</p>\n<p>是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。</p>\n<p>与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave(主从)同步。</p>\n<blockquote>\n<p>Redis 能干嘛？</p>\n</blockquote>\n<ol>\n<li>内存存储、持久化，内存中是断电即失、所以说持久化很重要（RDB、AOF）</li>\n<li>效率高，可以用于高速缓存</li>\n<li>发布订阅系统</li>\n<li>地图信息分析</li>\n<li>计时器、计数器（浏览量！）</li>\n<li>……</li>\n</ol>\n<blockquote>\n<p>特性</p>\n</blockquote>\n<ol>\n<li>多样的数据类型</li>\n<li>持久化</li>\n<li>集群</li>\n<li>事务</li>\n<li>…</li>\n</ol>\n<h2 id=\"环境搭建（省略）\"><a href=\"#环境搭建（省略）\" class=\"headerlink\" title=\"环境搭建（省略）\"></a>环境搭建（省略）</h2><p><a href=\"https://www.runoob.com/redis/redis-install.html\">Redis 安装 | 菜鸟教程 (runoob.com)</a></p>\n<h2 id=\"测试性能\"><a href=\"#测试性能\" class=\"headerlink\" title=\"测试性能\"></a>测试性能</h2><p><strong>redis-benchmark</strong> 是一个压力测试工具！</p>\n<p>官方自带的性能测试工具！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-benchmark [option] [option value]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502131730.png\" alt=\"image-20210502131730085\"></p>\n<p>我们来简单测试一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试100个并发连接 100000个请求</span></span><br><span class=\"line\">redis-benchmark localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132313.png\" alt=\"image-20210502132313424\"></p>\n<p>如何查看这些分析呢？</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132426.png\" alt=\"image-20210502132426480\"></p>\n<h2 id=\"基础的知识\"><a href=\"#基础的知识\" class=\"headerlink\" title=\"基础的知识\"></a>基础的知识</h2><p><strong>redis 默认有 16 个数据库</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132621.png\" alt=\"image-20210502132621114\"></p>\n<p>默认使用的是第 0 个</p>\n<p>可以使用<code>select</code>进行切换数据库！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; select 3 <span class=\"comment\">#切换数据库</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; DBSIZE <span class=\"comment\">#查看db大小</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; <span class=\"built_in\">set</span> name ouwen <span class=\"comment\">#设置key-value</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; DBSIZE <span class=\"comment\">#查看db大小</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; get name <span class=\"comment\">#获取value</span></span><br><span class=\"line\"><span class=\"string\">&quot;ouwen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379[3]&gt; keys * <span class=\"comment\">#获取所有key</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;name&quot;</span></span><br><span class=\"line\">127.0.0.1:6379[3]&gt; FLUSHDB <span class=\"comment\">#清除当前数据库</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; FLUSHALL <span class=\"comment\">#清除全部数据库</span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Redis 是单线程的！</p>\n</blockquote>\n<p><strong>Redis 到底有多快？</strong></p>\n<p>Redis 采用的是基于内存的采用的是<strong>单进程单线程</strong>模型的 <strong>KV 数据库</strong>，<strong>由 C 语言编写</strong>，官方提供的数据是可以达到 100000+的 QPS（每秒内查询次数）。这个数据不比采用单进程多线程的同样基于内存的 KV 数据库 Memcached 差！</p>\n<p><strong>Redis 为什么这么快？</strong></p>\n<ol>\n<li>完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O(1)；</li>\n<li>数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</li>\n<li>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</li>\n<li>使用多路 I/O 复用模型，非阻塞 IO；</li>\n<li>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</li>\n</ol>\n<p>以上几点都比较好理解，下边我们针对多路 I/O 复用模型进行简单的探讨：</p>\n<p><strong>多路 I/O 复用模型</strong></p>\n<p>多路 I/O 复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有 I/O 事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll 是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。</p>\n<p><strong>这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。</strong>采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络 IO 的时间消耗），且 Redis 在内存中操作数据的速度非常快，也就是说内存内的操作不会成为影响 Redis 性能的瓶颈，主要由以上几点造就了 Redis 具有很高的吞吐量。</p>\n<p><strong>那么为什么 Redis 是单线程的？</strong></p>\n<p>我们首先要明白，上边的种种分析，都是为了营造一个 Redis 很快的氛围！官方 FAQ 表示，因为 Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章地采用单线程的方案了（毕竟采用多线程会有很多麻烦！）。</p>\n<h1 id=\"五大数据类型\"><a href=\"#五大数据类型\" class=\"headerlink\" title=\"五大数据类型\"></a>五大数据类型</h1><blockquote>\n<p>官方文档</p>\n</blockquote>\n<p>Redis 是一个开源（BSD 许可）的，内存中的数据结构存储系统，它可以用作==数据库、缓存和消息中间 件 MQ==。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合 （sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间 （geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA 脚本（Lua scripting）， LRU 驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis 哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>\n<h2 id=\"Redis-Key\"><a href=\"#Redis-Key\" class=\"headerlink\" title=\"Redis-Key\"></a>Redis-Key</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-del.html\">DEL key</a> <br />该命令用于在 key 存在时删除 key。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-dump.html\">DUMP key</a> <br />序列化给定 key ，并返回被序列化的值。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-exists.html\">EXISTS key</a> <br />检查给定 key 是否存在。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-expire.html\">EXPIRE key seconds</a> <br />为给定 key 设置过期时间，以秒计。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-expireat.html\">EXPIREAT key timestamp</a> <br />EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-pexpire.html\">PEXPIRE key milliseconds</a> <br />设置 key 的过期时间以毫秒计。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-pexpireat.html\">PEXPIREAT key milliseconds-timestamp</a> <br />设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-keys.html\">KEYS pattern</a> <br />查找所有符合给定模式( pattern)的 key 。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-move.html\">MOVE key db</a> <br />将当前数据库的 key 移动到给定的数据库 db 当中。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-persist.html\">PERSIST key</a> <br />移除 key 的过期时间，key 将持久保持。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-pttl.html\">PTTL key</a> <br />以毫秒为单位返回 key 的剩余的过期时间。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-ttl.html\">TTL key</a> <br />以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-randomkey.html\">RANDOMKEY<br /></a> 从当前数据库中随机返回一个 key 。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-rename.html\">RENAME key newkey</a> <br />修改 key 的名称</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-renamenx.html\">RENAMENX key newkey</a> <br />仅当 newkey 不存在时，将 key 改名为 newkey 。</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\">[SCAN cursor <a href=\"https://www.runoob.com/redis/keys-scan.html\">MATCH pattern] [COUNT count]</a> <br />迭代数据库中的数据库键。</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-type.html\">TYPE key</a> <br />返回 key 所储存的值的类型。</td>\n</tr>\n</tbody></table>\n<h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-set.html\">SET key value</a> <br />设置指定 key 的值</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-get.html\">GET key</a> <br />获取指定 key 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-getrange.html\">GETRANGE key start end</a> <br />返回 key 中字符串值的子字符</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-getset.html\">GETSET key value</a> <br />将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-getbit.html\">GETBIT key offset</a> <br />对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-mget.html\">MGET key1 [key2..]</a> <br />获取所有(一个或多个)给定 key 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setbit.html\">SETBIT key offset value</a> <br />对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setex.html\">SETEX key seconds value</a> <br />将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setnx.html\">SETNX key value</a> <br />只有在 key 不存在时设置 key 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setrange.html\">SETRANGE key offset value</a> <br />用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-strlen.html\">STRLEN key</a> <br />返回 key 所储存的字符串值的长度。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-mset.html\">MSET key value [key value …]</a> <br />同时设置一个或多个 key-value 对。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-msetnx.html\">MSETNX key value[key value …]</a> <br />同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-psetex.html\">PSETEX key milliseconds value</a> <br />这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-incr.html\">INCR key</a> <br />将 key 中储存的数字值增一。</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-incrby.html\">INCRBY key increment</a> <br />将 key 所储存的值加上给定的增量值（increment） 。</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-incrbyfloat.html\">INCRBYFLOAT key increment</a> <br />将 key 所储存的值加上给定的浮点增量值（increment） 。</td>\n</tr>\n<tr>\n<td align=\"left\">18</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-decr.html\">DECR key</a> <br />将 key 中储存的数字值减一。</td>\n</tr>\n<tr>\n<td align=\"left\">19</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-decrby.html\">DECRBY key decrement</a> <br />key 所储存的值减去给定的减量值（decrement） 。</td>\n</tr>\n<tr>\n<td align=\"left\">20</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-append.html\">APPEND key value</a> <br />如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 v1 <span class=\"comment\"># 设置值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1 <span class=\"comment\"># 获得值</span></span><br><span class=\"line\"><span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys * <span class=\"comment\"># 获得所有的key</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;key1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; EXISTS key1 <span class=\"comment\"># 判断某一个key是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; APPEND key1 <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\"># 追加字符串，如果当前key不存在，就相当于setkey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;v1hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN key1 <span class=\"comment\"># 获取字符串的长度！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; APPEND key1 <span class=\"string\">&quot;,kaungshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 17</span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN key1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 17</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;v1hello,kaungshen&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># i++</span></span><br><span class=\"line\"><span class=\"comment\"># 步长 i+=</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> views 0 <span class=\"comment\"># 初始浏览量为0</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; incr views <span class=\"comment\"># 自增1 浏览量变为1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; incr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; decr views <span class=\"comment\"># 自减1 浏览量-1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; decr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; decr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY views 10 <span class=\"comment\"># 可以设置步长，指定增量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY views 10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 19</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY views 5</span><br><span class=\"line\">bilibili：狂神说Java(<span class=\"built_in\">integer</span>) 14</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 字符串范围 range</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 <span class=\"string\">&quot;hello,kuangshen&quot;</span> <span class=\"comment\"># 设置 key1 的值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;hello,kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GETRANGE key1 0 3 <span class=\"comment\"># 截取字符串 [0,3]</span></span><br><span class=\"line\"><span class=\"string\">&quot;hell&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GETRANGE key1 0 -1 <span class=\"comment\"># 获取全部的字符串 和 get key是一样的</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello,kuangshen&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 替换！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key2 abcdefg</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key2</span><br><span class=\"line\"><span class=\"string\">&quot;abcdefg&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SETRANGE key2 1 xx <span class=\"comment\"># 替换指定位置开始的字符串！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get key2</span><br><span class=\"line\"><span class=\"string\">&quot;axxdefg&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># setex (set with expire) # 设置过期时间</span></span><br><span class=\"line\"><span class=\"comment\"># setnx (set if not exist) # 不存在在设置 （在分布式锁中会常常使用！）</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setex key3 30 <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\"># 设置key3 的值为 hello,30秒后过期</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 26</span><br><span class=\"line\">127.0.0.1:6379&gt; get key3</span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;redis&quot;</span> <span class=\"comment\"># 如果mykey 不存在，创建mykey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;key2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;mykey&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;key1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;MongoDB&quot;</span> <span class=\"comment\"># 如果mykey存在，创建失败！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get mykey</span><br><span class=\"line\"><span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">mset</span><br><span class=\"line\">mget</span><br><span class=\"line\">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class=\"comment\"># 同时设置多个值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;k1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;k2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;k3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mget k1 k2 k3 <span class=\"comment\"># 同时获取多个值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">bilibili：狂神说Java数据结构是相同的！</span><br><span class=\"line\">String类似的使用场景：value除了是我们的字符串还可以是我们的数字！</span><br><span class=\"line\">计数器</span><br><span class=\"line\">统计多单位的数量</span><br><span class=\"line\">粉丝数</span><br><span class=\"line\">对象缓存存储！</span><br><span class=\"line\">List（列表）</span><br><span class=\"line\">基本的数据类型，列表</span><br><span class=\"line\">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class=\"comment\"># msetnx 是一个原子性的操作，要么一起成功，要么一起</span></span><br><span class=\"line\">失败！</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get k4</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"><span class=\"comment\"># 对象</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class=\"comment\"># 设置一个user:1 对象 值为 json字符来保存一个对象！</span></span><br><span class=\"line\"><span class=\"comment\"># 这里的key是一个巧妙的设计： user:&#123;id&#125;:&#123;filed&#125; , 如此设计在Redis中是完全OK了！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">getset <span class=\"comment\"># 先get然后在set</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getset db redis <span class=\"comment\"># 如果不存在值，则返回 nil</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get db</span><br><span class=\"line\"><span class=\"string\">&quot;redis</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; getset db mongodb # 如果存在值，获取原来的值，并设置新的值</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>redis<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; get db</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>mongodb<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>数据结构是相同的！</p>\n<p>String 类似的使用场景：value 除了是我们的字符串还可以是我们的数字！</p>\n<ul>\n<li>计数器</li>\n<li>统计多单位的数量</li>\n<li>粉丝数</li>\n<li>对象缓存存储！</li>\n</ul>\n<h2 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>\n<p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过 40 亿个元素)。</p>\n<p>基本的数据类型，列表</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502143650.png\" alt=\"image-20210502143650744\"></p>\n<p>在 redis 里面，我们可以把 list 玩成 ，栈、队列、阻塞队列！</p>\n<p>所有的 list 命令都是用 l 开头的，Redis 不区分大小命令</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-blpop.html\">BLPOP key1 [key2] timeout</a> <br />移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-brpop.html\">BRPOP key1 [key2] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-brpoplpush.html\">BRPOPLPUSH source destination timeout</a> <br />从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lindex.html\">LINDEX key index</a> <br />通过索引获取列表中的元素</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-linsert.html\">LINSERT key BEFORE|AFTER pivot value</a> <br />在列表的元素前或者后插入元素</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-llen.html\">LLEN key</a> <br />获取列表长度</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lpop.html\">LPOP key</a> <br />移出并获取列表的第一个元素</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lpush.html\">LPUSH key value1 [value2]</a> <br />将一个或多个值插入到列表头部</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lpushx.html\">LPUSHX key value</a> <br />将一个值插入到已存在的列表头部</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lrange.html\">LRANGE key start stop</a> <br />获取列表指定范围内的元素</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lrem.html\">LREM key count value</a> <br />移除列表元素</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lset.html\">LSET key index value</a> <br />通过索引设置列表元素的值</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-ltrim.html\">LTRIM key start stop</a> <br />对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpop.html\">RPOP key</a> <br />移除列表的最后一个元素，返回值为移除的元素。</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpoplpush.html\">RPOPLPUSH source destination</a> <br />移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpush.html\">RPUSH key value1 [value2]</a> <br />在列表中添加一个或多个值</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpushx.html\">RPUSHX key value</a> <br />为已存在的列表添加值</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list one <span class=\"comment\"># 将一个值或者多个值，插入到列表头部 （左）</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list two</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1 <span class=\"comment\"># 获取list中值！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 1 <span class=\"comment\"># 通过区间获取具体的值！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush list righr <span class=\"comment\"># 将一个值或者多个值，插入到列表位部 （右）</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;righr&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">LPOP</span><br><span class=\"line\">RPOP</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;righr&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Lpop list <span class=\"comment\"># 移除list的第一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Rpop list <span class=\"comment\"># 移除list的最后一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;righr&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">Lindex</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lindex list 1 <span class=\"comment\"># 通过下标获得 list 中的某一个值！</span></span><br><span class=\"line\"><span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lindex list 0</span><br><span class=\"line\"><span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">Llen</span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list one</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list two</span><br><span class=\"line\">bilibili：狂神说Java(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; Llen list <span class=\"comment\"># 返回列表的长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">移除指定的值！</span><br><span class=\"line\">取关 uid</span><br><span class=\"line\">Lrem</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 1 one <span class=\"comment\"># 移除list集合中指定个数的value，精确匹配</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 1 three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 2 three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">trim 修剪。； list 截断!</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello3&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim mylist 1 2 <span class=\"comment\"># 通过下标截取指定的长度，这个list已经被改变了，截断了</span></span><br><span class=\"line\">只剩下截取的元素！</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">rpoplpush <span class=\"comment\"># 移除列表的最后一个元素，将他移动到新的列表中！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpush mylist <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">bilibili：狂神说Java小结</span><br><span class=\"line\">他实际上是一个链表，before Node after ， left，right 都可以插入值</span><br><span class=\"line\">如果key 不存在，创建新的链表</span><br><span class=\"line\">如果key存在，新增内容</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; rpush mylist <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; rpush mylist <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; rpoplpush mylist myotherlist <span class=\"comment\"># 移除列表的最后一个元素，将他移动到新的</span></span><br><span class=\"line\">列表中！</span><br><span class=\"line\"><span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1 <span class=\"comment\"># 查看原来的列表</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange myotherlist 0 -1 <span class=\"comment\"># 查看目标列表中，确实存在改值！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">lset 将列表中指定下标的值替换为另外一个值，更新操作</span><br><span class=\"line\">127.0.0.1:6379&gt; EXISTS list <span class=\"comment\"># 判断这个列表是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 0 item <span class=\"comment\"># 如果不存在列表我们去更新就会报错</span></span><br><span class=\"line\">(error) ERR no such key</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list value1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class=\"line\">1) <span class=\"string\">&quot;value1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 0 item <span class=\"comment\"># 如果存在，更新当前下标的值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class=\"line\">1) <span class=\"string\">&quot;item&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 1 other <span class=\"comment\"># 如果不存在，则会报错！</span></span><br><span class=\"line\">(error) ERR index out of range</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">linsert <span class=\"comment\"># 将某个具体的value插入到列把你中某个元素的前面或者后面！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LINSERT mylist before <span class=\"string\">&quot;world&quot;</span> <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LINSERT mylist after world new</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;new&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小结</p>\n</blockquote>\n<ul>\n<li>它实际上是一个链表，before Node after ，left right 都可以插入值</li>\n<li>如果 key 不存在，创建新的链表</li>\n<li>如果 key 存在，新增内容</li>\n<li>如果移除了所有值，空链表，也代表不存在！</li>\n<li>在两边插入或者改动值，效率最高！中间元素，相对来说效率会低一点~</li>\n<li>消息排队！消息队列（LPUSH RPOP），栈（LPUSH LPOP）</li>\n</ul>\n<h2 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h2><p>set 中的值是不能重复的！</p>\n<p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>\n<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\n<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储 40 多亿个成员)。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sadd.html\">SADD key member1 [member2]</a> <br />向集合添加一个或多个成员</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-scard.html\">SCARD key</a> <br />获取集合的成员数</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sdiff.html\">SDIFF key1 [key2]</a> <br />返回第一个集合与其他集合之间的差异。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sdiffstore.html\">SDIFFSTORE destination key1 [key2]</a> <br />返回给定所有集合的差集并存储在 destination 中</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sinter.html\">SINTER key1 [key2]</a> <br />返回给定所有集合的交集</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sinterstore.html\">SINTERSTORE destination key1 [key2]</a> <br />返回给定所有集合的交集并存储在 destination 中</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sismember.html\">SISMEMBER key member</a> <br />判断 member 元素是否是集合 key 的成员</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-smembers.html\">SMEMBERS key</a> <br />返回集合中的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-smove.html\">SMOVE source destination member</a> <br />将 member 元素从 source 集合移动到 destination 集合</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-spop.html\">SPOP key</a> <br />移除并返回集合中的一个随机元素</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-srandmember.html\">SRANDMEMBER key [count]</a> <br />返回集合中一个或多个随机数</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-srem.html\">SREM key member1 [member2]</a> <br />移除集合中一个或多个成员</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sunion.html\">SUNION key1 [key2]</a><br />返回所有给定集合的并集</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sunionstore.html\">SUNIONSTORE destination key1 [key2]</a> <br />所有给定集合的并集存储在 destination 集合中</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sscan.html\">SSCAN key cursor [MATCH pattern] [COUNT count]</a> <br />迭代集合中的元素</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\"># set集合中添加匀速</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset <span class=\"comment\"># 查看指定set的所有值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER myset hello <span class=\"comment\"># 判断某一个值是不是在set集合中！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER myset world</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; scard myset <span class=\"comment\"># 获取set集合中的内容元素个数！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">rem</span><br><span class=\"line\">127.0.0.1:6379&gt; srem myset hello <span class=\"comment\"># 移除set集合中的指定元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; scard myset</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> 无序不重复集合。抽随机！</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset <span class=\"comment\"># 随机抽选出一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset 2 <span class=\"comment\"># 随机抽选出指定个数的元素</span></span><br><span class=\"line\">bilibili：狂神说Java1) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset <span class=\"comment\"># 随机抽选出一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">删除定的key，随机删除key！</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop myset <span class=\"comment\"># 随机删除一些set集合中的元素！</span></span><br><span class=\"line\"><span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop myset</span><br><span class=\"line\"><span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">将一个指定的值，移动到另外一个<span class=\"built_in\">set</span>集合！</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset2 <span class=\"string\">&quot;set2&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smove myset myset2 <span class=\"string\">&quot;kuangshen&quot;</span> <span class=\"comment\"># 将一个指定的值，移动到另外一个set集</span></span><br><span class=\"line\">合！</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class=\"line\">1) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;set2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">微博，B站，共同关注！(并集)</span><br><span class=\"line\">数字集合类：</span><br><span class=\"line\">- 差集 SDIFF</span><br><span class=\"line\">- 交集</span><br><span class=\"line\">- 并集</span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFF key1 key2 <span class=\"comment\"># 差集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SINTER key1 key2 <span class=\"comment\"># 交集 共同好友就可以这样实现</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SUNION key1 key2 <span class=\"comment\"># 并集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>bilibili：狂神说 Java 微博，A 用户将所有关注的人放在一个 set 集合中！将它的粉丝也放在一个集合中！<br>共同关注，共同爱好，二度好友，推荐好友！（六度分割理论）</p>\n<h2 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h2><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>\n<p>Redis 中每个 hash 可以存储 232 - 1 键值对（40 多亿）。</p>\n<p>Map 集合，key-map! 时候这个值是一个 map 集合！ 本质和 String 类型没有太大区别，还是一个简单的 key-vlaue！</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hdel.html\">HDEL key field1 [field2]</a> <br />删除一个或多个哈希表字段</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hexists.html\">HEXISTS key field</a> <br />查看哈希表 key 中，指定的字段是否存在。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hget.html\">HGET key field</a> <br />获取存储在哈希表中指定字段的值。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hgetall.html\">HGETALL key</a> <br />获取在哈希表中指定 key 的所有字段和值</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hincrby.html\">HINCRBY key field increment</a> <br />为哈希表 key 中的指定字段的整数值加上增量 increment 。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hincrbyfloat.html\">HINCRBYFLOAT key field increment</a> <br />为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hkeys.html\">HKEYS key</a> <br />获取所有哈希表中的字段</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hlen.html\">HLEN key</a> <br />获取哈希表中字段的数量</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hmget.html\">HMGET key field1 [field2]</a> <br />获取所有给定字段的值</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hmset.html\">HMSET key field1 value1 [field2 value2 ]</a> <br />同时将多个 field-value (域-值)对设置到哈希表 key 中。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hset.html\">HSET key field value</a> <br />将哈希表 key 中的字段 field 的值设为 value 。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hsetnx.html\">HSETNX key field value</a> <br />只有在字段 field 不存在时，设置哈希表字段的值。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hvals.html\">HVALS key</a> <br />获取哈希表中所有值。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hscan.html\">HSCAN key cursor [MATCH pattern] [COUNT count]</a> <br />迭代哈希表中的键值对。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hset myhash field1 kuangshen <span class=\"comment\"># set一个具体 key-vlaue</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget myhash field1 <span class=\"comment\"># 获取一个字段值</span></span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world <span class=\"comment\"># set多个 key-vlaue</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget myhash field1 field2 <span class=\"comment\"># 获取多个字段值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall myhash <span class=\"comment\"># 获取全部的数据，</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hdel myhash field1 <span class=\"comment\"># 删除hash指定key字段！对应的value值也就消失了！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall myhash</span><br><span class=\"line\">1) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">hlen</span><br><span class=\"line\">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class=\"line\">1) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hlen myhash <span class=\"comment\"># 获取hash表的字段数量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HEXISTS myhash field1 <span class=\"comment\"># 判断hash中指定字段是否存在！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HEXISTS myhash field3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 只获得所有field</span></span><br><span class=\"line\"><span class=\"comment\"># 只获得所有value</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys myhash <span class=\"comment\"># 只获得所有field</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">bilibili：狂神说Javahash变更的数据 user name age,尤其是是用户信息之类的，经常变动的信息！ <span class=\"built_in\">hash</span> 更适合于对象的</span><br><span class=\"line\">存储，String更加适合字符串存储！</span><br><span class=\"line\">Zset（有序集合）</span><br><span class=\"line\">在<span class=\"built_in\">set</span>的基础上，增加了一个值，<span class=\"built_in\">set</span> k1 v1 zset k1 score1 v1</span><br><span class=\"line\">127.0.0.1:6379&gt; hvals myhash <span class=\"comment\"># 只获得所有value</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">incr decr</span><br><span class=\"line\">127.0.0.1:6379&gt; hset myhash field3 5 <span class=\"comment\">#指定增量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY myhash field3 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY myhash field3 -1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx myhash field4 hello <span class=\"comment\"># 如果不存在则可以设置</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx myhash field4 world <span class=\"comment\"># 如果存在则不能设置</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p>hash 变更的数据 user name age，尤其是是用户信息之类的，经常变动的信息！ hash 更适合于对象的 存储，String 更加适合字符串存储！</p>\n<h2 id=\"Zset（有序集合）\"><a href=\"#Zset（有序集合）\" class=\"headerlink\" title=\"Zset（有序集合）\"></a>Zset（有序集合）</h2><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储 40 多亿个成员)。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zadd.html\">ZADD key score1 member1 [score2 member2]</a> <br />向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zcard.html\">ZCARD key</a> <br />获取有序集合的成员数</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zcount.html\">ZCOUNT key min max</a> <br />计算在有序集合中指定区间分数的成员数</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zincrby.html\">ZINCRBY key increment member</a> <br />有序集合中对指定成员的分数加上增量 increment</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zinterstore.html\">ZINTERSTORE destination numkeys key [key …]</a> <br />计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zlexcount.html\">ZLEXCOUNT key min max</a> <br />在有序集合中计算指定字典区间内成员数量</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrange.html\">ZRANGE key start stop [WITHSCORES]</a> <br />通过索引区间返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrangebylex.html\">ZRANGEBYLEX key min max [LIMIT offset count]</a> <br />通过字典区间返回有序集合的成员</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrangebyscore.html\">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</a> <br />通过分数返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrank.html\">ZRANK key member</a> <br />返回有序集合中指定成员的索引</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrem.html\">ZREM key member [member …]</a> <br />移除有序集合中的一个或多个成员</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebylex.html\">ZREMRANGEBYLEX key min max</a> <br />移除有序集合中给定的字典区间的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html\">ZREMRANGEBYRANK key start stop</a> <br />移除有序集合中给定的排名区间的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html\">ZREMRANGEBYSCORE key min max</a> <br />移除有序集合中给定的分数区间的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrange.html\">ZREVRANGE key start stop [WITHSCORES]</a> <br />返回有序集中指定区间内的成员，通过索引，分数从高到低</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html\">ZREVRANGEBYSCORE key max min [WITHSCORES]</a> <br />返回有序集中指定分数区间内的成员，分数从高到低排序</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrank.html\">ZREVRANK key member</a> <br />返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>\n</tr>\n<tr>\n<td align=\"left\">18</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zscore.html\">ZSCORE key member</a> <br />返回有序集中，成员的分数值</td>\n</tr>\n<tr>\n<td align=\"left\">19</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zunionstore.html\">ZUNIONSTORE destination numkeys key [key …]</a> <br />计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>\n</tr>\n<tr>\n<td align=\"left\">20</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zscan.html\">ZSCAN key cursor [MATCH pattern] [COUNT count]</a> <br />迭代有序集合中的元素（包括元素成员和元素分值）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd myset 1 one <span class=\"comment\"># 添加一个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 2 two 3 three <span class=\"comment\"># 添加多个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">排序如何实现</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 2500 xiaohong <span class=\"comment\"># 添加三个用户</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 5000 zhangsan</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 500 kaungshen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># ZRANGEBYSCORE key min max</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf <span class=\"comment\"># 显示全部的用户 从小到大！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 <span class=\"comment\"># 从大到进行排序！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores <span class=\"comment\"># 显示全部的用户并且附带成</span></span><br><span class=\"line\">绩</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;5000&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 withscores <span class=\"comment\"># 显示工资小于2500员工的升</span></span><br><span class=\"line\">序排序！</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 移除rem中的元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem salary xiaohong <span class=\"comment\"># 移除有序集合中的指定元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zcard salary <span class=\"comment\"># 获取有序集合中的个数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 1 hello</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 2 world 3 kuangshen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount myset 1 3 <span class=\"comment\"># 获取指定区间的成员数量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount myset 1 2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<p>其与的一些 API，通过我们的学习吗，你们剩下的如果工作中有需要，这个时候你可以去查查看官方文 档！</p>\n<p>案例思路：set 排序 存储班级成绩表，工资表排序！</p>\n<p>普通消息，1， 重要消息 2，带权重进行判断！</p>\n<p>排行榜应用实现，取 Top N 测试！</p>\n<h1 id=\"三种特殊数据类型\"><a href=\"#三种特殊数据类型\" class=\"headerlink\" title=\"三种特殊数据类型\"></a>三种特殊数据类型</h1><h2 id=\"Geospatial-地理位置\"><a href=\"#Geospatial-地理位置\" class=\"headerlink\" title=\"Geospatial 地理位置\"></a>Geospatial 地理位置</h2><p>朋友的定位，附近的人，打车距离计算？</p>\n<p>Redis 的 Geo 在 Redis3.2 版本就推出了！ 这个功能可以推算地理位置的信息，两地之间的距离，方圆 几里的人！</p>\n<p>可以查询一些测试数据：<a href=\"http://www.jsons.cn/lngcode/\">城市经纬度查询-国内城市经度纬度在线查询工具 (jsons.cn)</a></p>\n<p>Redis GEO 操作方法有：</p>\n<ul>\n<li>geoadd：添加地理位置的坐标。</li>\n<li>geopos：获取地理位置的坐标。</li>\n<li>geodist：计算两个位置之间的距离。</li>\n<li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li>\n<li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li>\n<li>geohash：返回一个或多个位置对象的 geohash 值。</li>\n</ul>\n<blockquote>\n<p>geoadd</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># getadd 添加地理位置</span></span><br><span class=\"line\"><span class=\"comment\"># 规则：两级无法直接添加，我们一般会下载城市数据，直接通过java程序一次性导入！</span></span><br><span class=\"line\"><span class=\"comment\"># 有效的经度从-180度到180度。</span></span><br><span class=\"line\"><span class=\"comment\"># 有效的纬度从-85.05112878度到85.05112878度。</span></span><br><span class=\"line\"><span class=\"comment\"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span></span><br><span class=\"line\"><span class=\"comment\"># 127.0.0.1:6379&gt; geoadd china:city 39.90 116.40 beijin</span></span><br><span class=\"line\">(error) ERR invalid longitude,latitude pair 39.900000,116.400000</span><br><span class=\"line\"><span class=\"comment\"># 参数 key 值（）</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqi 114.05 22.52 shengzhen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>geopos</p>\n</blockquote>\n<p>获得当前定位：一定是一个坐标值！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEOPOS china:city beijing <span class=\"comment\"># 获取指定的城市的经度和纬度！</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;116.39999896287918091&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;39.90000009167092543&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEOPOS china:city beijing chongqi</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;116.39999896287918091&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;39.90000009167092543&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEODIST</p>\n</blockquote>\n<p>两人之间的距离！</p>\n<p>单位：</p>\n<ul>\n<li>m 表示单位为米</li>\n<li>km 表示单位为千米</li>\n<li>mi 表示单位为英里</li>\n<li>ft 表示单位为英尺</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEODIST china:city beijing shanghai km <span class=\"comment\"># 查看上海到北京的直线距离</span></span><br><span class=\"line\"><span class=\"string\">&quot;1067.3788&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEODIST china:city beijing chongqi km <span class=\"comment\"># 查看重庆到北京的直线距离</span></span><br><span class=\"line\"><span class=\"string\">&quot;1464.0708&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>georadius 以给定的经纬度为中心， 找出某一半径内的元素</p>\n</blockquote>\n<p>我附近的人？ （获得所有附近的人的地址，定位！）通过半径来查询！</p>\n<p>获得指定数量的人，200</p>\n<p>所有数据应该都录入：china:city ，才会让结果更加清晰！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km <span class=\"comment\"># 以110，30 这个经纬度为中心，寻</span></span><br><span class=\"line\">找方圆1000km内的城市</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist <span class=\"comment\"># 显示到中间距离的位置</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;483.8340&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord <span class=\"comment\"># 显示他人的定位信息</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">&quot;108.96000176668167114&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;34.25999964418929977&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 1 <span class=\"comment\">#</span></span><br><span class=\"line\">筛选出指定的结果！</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 2</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;483.8340&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;108.96000176668167114&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;34.25999964418929977&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEORADIUSBYMEMBER</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 找出位于指定元素周围的其他元素！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;beijing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city shanghai 400 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEOHASH 命令 - 返回一个或多个位置元素的 Geohash 表示</p>\n</blockquote>\n<p>该命令将返回 11 个字符的 Geohash 字符串~</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将二维的经纬度转换为一维的字符串，如果两个字符串越接近，那么则距离越近！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geohash china:city beijing chongqi</span><br><span class=\"line\">1) <span class=\"string\">&quot;wx4fbxxfke0&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;wm5xzrybty0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEO 底层的实现原理其实就是 Zset！我们可以使用过 Zset 命令来操作 geo！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZRANGE china:city 0 -1 <span class=\"comment\"># 查看地图中全部的元素</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;shanghai&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;beijing&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem china:city beijing <span class=\"comment\"># 移除指定元素！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE china:city 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hyperloglog\"><a href=\"#Hyperloglog\" class=\"headerlink\" title=\"Hyperloglog\"></a>Hyperloglog</h2><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\n<blockquote>\n<p>什么是基数？</p>\n</blockquote>\n<p>A {1,3,5,7,8,7}</p>\n<p>B{1,3,5,7,8}</p>\n<p>基数（不重复的元素） = 5，可以接受误差！</p>\n<p>优点：占用的内存是固定，2^64 不同的元素的基数，只需要废 12KB 内存！如果要从内存角度来比较的 话 Hyperloglog 首选！</p>\n<p><strong>网页的 UV （一个人访问一个网站多次，但是还是算作一个人！）</strong></p>\n<p>传统的方式， set 保存用户的 id，然后就可以统计 set 中的元素数量作为标准判断 !</p>\n<p>这个方式如果保存大量的用户 id，就会比较麻烦！我们的目的是为了计数，而不是保存用户 id；</p>\n<p>0.81% 错误率！ 统计 UV 任务，可以忽略不计的！</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfadd.html\">PFADD key element [element …]</a> <br />添加指定元素到 HyperLogLog 中。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfcount.html\">PFCOUNT key [key …]</a> <br />返回给定 HyperLogLog 的基数估算值。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfmerge.html\">PFMERGE destkey sourcekey [sourcekey …]</a> <br />将多个 HyperLogLog 合并为一个 HyperLogLog</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>测试使用</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; PFadd mykey a b c d e f g h i j <span class=\"comment\"># 创建第一组元素 mykey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey <span class=\"comment\"># 统计 mykey 元素的基数数量</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; PFadd mykey2 i j z x c v b n m <span class=\"comment\"># 创建第二组元素 mykey2</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2 <span class=\"comment\"># 合并两组 mykey mykey2 =&gt; mykey3 并集</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey3 <span class=\"comment\"># 看并集的数量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 15</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h2><p>为什么其他教程都不喜欢讲这些？这些在生活中或者开发中，都有十分多的应用场景，学习了，就是就 是多一个思路！</p>\n<p>技多不压身！</p>\n<blockquote>\n<p>位储存</p>\n</blockquote>\n<p>统计用户信息，活跃，不活跃！ 登录 、 未登录！ 打卡，365 打卡！ 两个状态的，都可以使用 Bitmaps！</p>\n<p>Bitmap 位图，数据结构！ 都是操作二进制位来进行记录，就只有 0 和 1 两个状态！</p>\n<p>365 天 = 365 bit 1 字节 = 8bit 46 个字节左右！</p>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502234526.png\" alt=\"image-20210502234525977\"></p>\n<p>使用 bitmap 来记录 周一到周日的打卡！</p>\n<p>周一：1 周二：0 周三：0 周四：1 ……</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502234703.png\" alt=\"image-20210502234703108\"></p>\n<p>查看某一天是否有打卡！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; getbit sign 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit sign 6</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p>统计操作，统计 打卡的天数！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bitcount sign <span class=\"comment\"># 统计这周的打卡记录，就可以看到是否有全勤！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><p>Redis 事务本质：一组命令的集合！ 一个事务中的所有命令都会被序列化，在事务执行过程的中，会按 照顺序执行！</p>\n<p>一次性、顺序性、排他性！执行一系列的命令！</p>\n<p><code>------ 队列 set set set 执行------</code></p>\n<p>==Redis 事务没有没有隔离级别的概念！==</p>\n<p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！Exec</p>\n<p>==Redis 单条命令式保存原子性的，但是事务不保证原子性！==</p>\n<p>redis 的事务：</p>\n<ul>\n<li>开启事务（multi）</li>\n<li>命令入队（……）</li>\n<li>执行事务（exec）</li>\n</ul>\n<blockquote>\n<p>正常执行事务！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 开启事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"comment\"># 命令入队</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> <span class=\"comment\"># 执行事务</span></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">4) OK</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>放弃事务</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 开启事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; DISCARD <span class=\"comment\"># 取消事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get k4 <span class=\"comment\"># 事务队列中命令都不会被执行！</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编译型异常（代码有问题！命令有错！），事务中所有的命令都不会执行！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; getset k3 <span class=\"comment\"># 错误的命令</span></span><br><span class=\"line\">(error) ERR wrong number of arguments <span class=\"keyword\">for</span> <span class=\"string\">&#x27;getset&#x27;</span> <span class=\"built_in\">command</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 v5</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> <span class=\"comment\"># 执行事务报错！</span></span><br><span class=\"line\">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class=\"line\">127.0.0.1:6379&gt; get k5 <span class=\"comment\"># 所有的命令都不会被执行！</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>运行时异常（1/0）， 如果事务队列中存在语法性，那么执行命令的时候，其他命令是可以正常执行 的，错误命令抛出异常！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; incr k1 <span class=\"comment\"># 会执行的时候失败！</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (error) ERR value is not an <span class=\"built_in\">integer</span> or out of range <span class=\"comment\"># 虽然第一条命令报错了，但是依旧正常执行成功了！</span></span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) OK</span><br><span class=\"line\">4) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\"><span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\"><span class=\"string\">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>监控！ Watch （面试常问！）</p>\n</blockquote>\n<p>悲观锁：</p>\n<ul>\n<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li>\n</ul>\n<p>乐观锁：</p>\n<ul>\n<li>很乐观，认为什么时候都不会出问题，所以不会上锁！ 更新数据的时候去判断一下，在此期间是否 有人修改过这个数据</li>\n<li>获取 version</li>\n<li>更新的时候比较 version</li>\n</ul>\n<blockquote>\n<p>Redis 监视测试</p>\n</blockquote>\n<p>正常执行成功！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> money 100</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> out 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; watch money <span class=\"comment\"># 监视 money 对象</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功！</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY out 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 80</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 20</span><br></pre></td></tr></table></figure>\n\n<p>测试多线程修改值 , 使用 watch 可以当做 redis 的乐观锁操作！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; watch money <span class=\"comment\"># 监视 money</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY money 10</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY out 10</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> <span class=\"comment\"># 执行之前，另外一个线程，修改了我们的值，这个时候，就会导致事务执行失败！</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<p>如果修改失败，获取最新的值就好</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503001012.png\" alt=\"image-20210503001012808\"></p>\n<h1 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h1><p>我们要使用 Java 来操作 Redis，知其然并知其所以然，授人以渔！ 学习不能急躁，慢慢来会很快！</p>\n<blockquote>\n<p>什么是 Jedis 是 Redis 官方推荐的 java 连接开发工具！ 使用 Java 操作 Redis 中间件！如果你要使用 java 操作 redis，那么一定要对 jedis 十分熟悉！</p>\n</blockquote>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p>1、导入对应的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导入jedis的包--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--fastjson--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.62<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编码测试</p>\n<ul>\n<li>连接数据库</li>\n<li>操作命令</li>\n<li>断开连接！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-05-03 0:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPing</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、 new Jedis 对象即可</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">        jedis.auth(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2、jedis 所有的命令就是我们之前学习的所有指令！所以之前的指令学习很重要！</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(jedis.ping());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503002524.png\" alt=\"image-20210503002523989\"></p>\n<h2 id=\"常用的-API\"><a href=\"#常用的-API\" class=\"headerlink\" title=\"常用的 API\"></a>常用的 API</h2><ul>\n<li>string</li>\n<li>list</li>\n<li>set</li>\n<li>hash</li>\n<li>zset</li>\n<li>geo</li>\n<li>bitmap</li>\n<li>hyperloglog</li>\n</ul>\n<blockquote>\n<p>所有的 api 命令，就是我们对应的上面学习的指令，一个都没有变化！</p>\n</blockquote>\n<blockquote>\n<p>事务</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-05-03 0:31</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestTX</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、 new Jedis 对象即可</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">        jedis.auth(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        jedis.flushDB();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">JSONObject</span> <span class=\"variable\">jsonObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;ouwen&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">        <span class=\"type\">Transaction</span> <span class=\"variable\">multi</span> <span class=\"operator\">=</span> jedis.multi();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> jsonObject.toJSONString();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user1&quot;</span>,result);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user2&quot;</span>,result);</span><br><span class=\"line\">            <span class=\"comment\">//执行事务</span></span><br><span class=\"line\">            multi.exec();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//放弃事务</span></span><br><span class=\"line\">            multi.discard();</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(jedis.get(<span class=\"string\">&quot;user1&quot;</span>));</span><br><span class=\"line\">            System.out.println(jedis.get(<span class=\"string\">&quot;user2&quot;</span>));</span><br><span class=\"line\">            <span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">            jedis.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringBoot-整合\"><a href=\"#SpringBoot-整合\" class=\"headerlink\" title=\"SpringBoot 整合\"></a>SpringBoot 整合</h1><p>SpringBoot 操作数据：spring-data jpa jdbc mongodb redis！</p>\n<p>SpringData 也是和 SpringBoot 齐名的项目！</p>\n<p>说明： 在 SpringBoot2.x 之后，原来使用的 jedis 被替换为了 lettuce?</p>\n<p>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接 池！ 更像 BIO 模式</p>\n<p>lettuce : 采用 netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据 了，更像 NIO 模式</p>\n<p>源码分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span> <span class=\"comment\">// 我们可以自己定义一个</span></span><br><span class=\"line\">redisTemplate来替换这个默认的！</span><br><span class=\"line\"><span class=\"keyword\">public</span> RedisTemplate&lt;Object, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> UnknownHostException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化！</span></span><br><span class=\"line\">    <span class=\"comment\">// 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 &lt;String, Object&gt;</span></span><br><span class=\"line\">    RedisTemplate&lt;Object, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span> <span class=\"comment\">// 由于 String 是redis中最常使用的类型，所以说单独提出来了一个bean！</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> StringRedisTemplate <span class=\"title function_\">stringRedisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class=\"line\">\t<span class=\"keyword\">throws</span> UnknownHostException &#123;</span><br><span class=\"line\">    <span class=\"type\">StringRedisTemplate</span> <span class=\"variable\">template</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisTemplate</span>();</span><br><span class=\"line\">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>整合测试一下</p>\n</blockquote>\n<p>1、导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、配置连接</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>3、测试！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Redis02SpringbootApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// redisTemplate 操作不同的类型，api和我们的指令是一样的</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForValue 操作字符串 类似string</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForList</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForSet</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForZSet</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForHash</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForGeo</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForHyperLogLog</span></span><br><span class=\"line\">        <span class=\"comment\">//redisTemplate.opsForValue();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取redis连接对象</span></span><br><span class=\"line\">        <span class=\"comment\">//RedisConnection conn = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class=\"line\">        <span class=\"comment\">//conn.flushAll();</span></span><br><span class=\"line\">        <span class=\"comment\">//conn.flushDb();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;mykey&quot;</span>,<span class=\"string\">&quot;湖南长沙&quot;</span>);</span><br><span class=\"line\">        System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">&quot;mykey&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503102342.png\" alt=\"image-20210503102342174\"></p>\n<p>我们来编写一个自己的 RedisTemplete</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-05-03 10:24</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！</span></span><br><span class=\"line\">    <span class=\"comment\">// 自己定义了一个 RedisTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory</span></span><br><span class=\"line\"><span class=\"params\">                                                               factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;String,</span><br><span class=\"line\">                Object&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(factory);</span><br><span class=\"line\">        <span class=\"comment\">// Json序列化配置</span></span><br><span class=\"line\">        <span class=\"type\">Jackson2JsonRedisSerializer</span> <span class=\"variable\">jackson2JsonRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                <span class=\"title class_\">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">om</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        <span class=\"comment\">// String 的序列化</span></span><br><span class=\"line\">        <span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">stringRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// key采用String的序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的key也采用String的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的 redis 操作，其实对于 java 开发人员来说，十分的简单，更重要是要去理解 redis 的思想和每一种数 据结构的用处和作用场景！</p>\n<h1 id=\"Redis-conf-详解\"><a href=\"#Redis-conf-详解\" class=\"headerlink\" title=\"Redis.conf 详解\"></a>Redis.conf 详解</h1><p>启动的时候，就通过配置文件来启动！</p>\n<p>工作中，一些小小的配置，可以让你脱颖而出！</p>\n<blockquote>\n<p>单位</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503105120.png\" alt=\"image-20210503105120545\"></p>\n<p>配置文件对大小写不敏感！</p>\n<blockquote>\n<p>包含</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503105216.png\" alt=\"image-20210503105216614\"></p>\n<p>就是好比我们学习 Spring、Improt， include</p>\n<blockquote>\n<p>网络</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1 <span class=\"comment\"># 绑定的ip</span></span><br><span class=\"line\">protected-mode <span class=\"built_in\">yes</span> <span class=\"comment\"># 保护模式</span></span><br><span class=\"line\">port 6379 <span class=\"comment\"># 端口设置</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通用 GENERAL</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">daemonize <span class=\"built_in\">yes</span> <span class=\"comment\"># 以守护进程的方式运行，默认是 no，我们需要自己开启为yes！</span></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid <span class=\"comment\"># 如果以后台的方式运行，我们就需要指定一个 pid 文件！</span></span><br><span class=\"line\"><span class=\"comment\"># 日志</span></span><br><span class=\"line\"><span class=\"comment\"># Specify the server verbosity level.</span></span><br><span class=\"line\"><span class=\"comment\"># This can be one of:</span></span><br><span class=\"line\"><span class=\"comment\"># debug (a lot of information, useful for development/testing)</span></span><br><span class=\"line\"><span class=\"comment\"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class=\"line\"><span class=\"comment\"># notice (moderately verbose, what you want in production probably) 生产环境</span></span><br><span class=\"line\"><span class=\"comment\"># warning (only very important / critical messages are logged)</span></span><br><span class=\"line\">loglevel notice</span><br><span class=\"line\">logfile <span class=\"string\">&quot;&quot;</span> <span class=\"comment\"># 日志的文件位置名</span></span><br><span class=\"line\">databases 16 <span class=\"comment\"># 数据库的数量，默认是 16 个数据库</span></span><br><span class=\"line\">always-show-logo <span class=\"built_in\">yes</span> <span class=\"comment\"># 是否总是显示LOGO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>快照</p>\n</blockquote>\n<p>持久化， 在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb. aof</p>\n<p>redis 是内存数据库，如果没有持久化，那么数据断电就会丢失！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作</span></span><br><span class=\"line\">save 900 1</span><br><span class=\"line\"><span class=\"comment\"># 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作</span></span><br><span class=\"line\">save 300 10</span><br><span class=\"line\"><span class=\"comment\"># 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作</span></span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"><span class=\"comment\"># 我们之后学习持久化，会自己定义这个测试！</span></span><br><span class=\"line\">stop-writes-on-bgsave-error <span class=\"built_in\">yes</span> <span class=\"comment\"># 持久化如果出错，是否还需要继续工作！</span></span><br><span class=\"line\">rdbcompression <span class=\"built_in\">yes</span> <span class=\"comment\"># 是否压缩 rdb 文件，需要消耗一些cpu资源！</span></span><br><span class=\"line\">rdbchecksum <span class=\"built_in\">yes</span> <span class=\"comment\"># 保存rdb文件的时候，进行错误的检查校验！</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> ./ <span class=\"comment\"># rdb 文件保存的目录！</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SECURITY 安全</p>\n</blockquote>\n<p>可以设置 redis 密码，默认是没有密码的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass <span class=\"comment\"># 获取redis的密码</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; config <span class=\"built_in\">set</span> requirepass <span class=\"string\">&quot;123456&quot;</span> <span class=\"comment\"># 设置redis的密码</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass <span class=\"comment\"># 发现所有的命令都没有权限了</span></span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6379&gt; auth 123456 <span class=\"comment\"># 使用密码进行登录！</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass</span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>限制 CLIENTS</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">maxclients 10000 <span class=\"comment\"># 设置能连接上redis的最大客户端的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory &lt;bytes&gt; <span class=\"comment\"># redis 配置最大的内存容量</span></span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory-policy noeviction <span class=\"comment\"># 内存到达上限之后的处理策略</span></span><br><span class=\"line\">    1、volatile-lru：只对设置了过期时间的key进行LRU（默认值）</span><br><span class=\"line\">    2、allkeys-lru ： 删除lru算法的key</span><br><span class=\"line\">    3、volatile-random：随机删除即将过期key</span><br><span class=\"line\">    4、allkeys-random：随机删除</span><br><span class=\"line\">    5、volatile-ttl ： 删除即将过期的</span><br><span class=\"line\">    6、noeviction ： 永不过期，返回错误</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>APPEND ONLY 模式 aof 配置</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly no <span class=\"comment\"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span> <span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always # 每次修改都会 sync。消耗性能</span></span><br><span class=\"line\">appendfsync everysec <span class=\"comment\"># 每秒执行一次 sync，可能会丢失这1s的数据！</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis-持久化\"><a href=\"#Redis-持久化\" class=\"headerlink\" title=\"Redis 持久化\"></a>Redis 持久化</h1><p>面试和工作，持久化都是重点！</p>\n<p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘 ，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p>\n<h2 id=\"RDB（Redis-DataBase）\"><a href=\"#RDB（Redis-DataBase）\" class=\"headerlink\" title=\"RDB（Redis DataBase）\"></a>RDB（Redis DataBase）</h2><blockquote>\n<p>什么是 RDB？</p>\n</blockquote>\n<p>在主从复制中，rdb 就是备用了，放在从机上。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143056.png\" alt=\"image-20210503143056239\"></p>\n<p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的 Snapshot 快照，它恢复时是将快 照文件直接读到内存里。</p>\n<p>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程 都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的。 这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。RDB 的缺点是最后一次持久化后的数据可能丢失。我们默认的就是 RDB，一般情况下不需要修改这个配置！</p>\n<p>==rdb 保存的文件是 dump.rdb== 都是在我们的配置文件中快照中进行配置的！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143817.png\" alt=\"image-20210503143817471\"></p>\n<blockquote>\n<p>触发机制</p>\n</blockquote>\n<p>1、save 的规则满足的情况下，会自动触发 rdb 规则</p>\n<p>2、执行 flushall 命令，也会触发我们的 rdb 规则！</p>\n<p>3、退出 redis，也会产生 rdb 文件！ 备份就自动生成一个 dump.rdb</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143857.png\" alt=\"image-20210503143856958\"></p>\n<blockquote>\n<p>如何恢复 rdb 文件！</p>\n</blockquote>\n<p>1、只需要将 rdb 文件放在我们 redis 启动目录就可以，redis 启动的时候会自动检查 dump.rdb 恢复其中 的数据！</p>\n<p>2、查看需要存在的位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; config get <span class=\"built_in\">dir</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;dir&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;/usr/local/bin&quot;</span> <span class=\"comment\"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、适合大规模的数据恢复！</p>\n<p>2、对数据的完整性要不高！</p>\n<p><strong>缺点：</strong></p>\n<p>1、需要一定的时间间隔进程操作！如果 redis 意外宕机了，这个最后一次修改数据就没有的了！</p>\n<p>2、fork 进程的时候，会占用一定的内容空间！</p>\n<h2 id=\"AOF（Append-Only-File）\"><a href=\"#AOF（Append-Only-File）\" class=\"headerlink\" title=\"AOF（Append Only File）\"></a>AOF（Append Only File）</h2><p>将我们的所有命令都记录下来，history，恢复的时候就把这个文件全部在执行一遍！</p>\n<blockquote>\n<p>是什么？</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144252.png\"></p>\n<p>以日志的形式来记录每个写操作，将 Redis 执行过的所有指令记录下来（读操作不记录），只许追加文件 但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件 的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>\n<p>==AOF 保存的是<code>appendonly.aof</code>文件==</p>\n<blockquote>\n<p>append</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144546.png\" alt=\"image-20210503144546005\"></p>\n<p>默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly 改为 yes 就开启了 aof！ 重启，redis 就可以生效了！</p>\n<p>如果这个 aof 文件有错误，这时候 redis 是启动不起来的，我们需要修复这个 aof 文件</p>\n<p>redis 给我们提供了一个工具 <code>redis-check-aof --fix</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144822.png\" alt=\"image-20210503144822428\"></p>\n<p>如果文件正常，重启就可以直接恢复了！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144919.png\" alt=\"image-20210503144919410\"></p>\n<blockquote>\n<p>重写规则说明</p>\n</blockquote>\n<p>aof 默认就是文件的无限追加，文件会越来越大！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503145247.png\" alt=\"image-20210503145247104\"></p>\n<p>如果 aof 文件大于 64m，太大了！ fork 一个新的进程来将我们的文件进行重写！</p>\n<blockquote>\n<p>优点和缺点！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly no <span class=\"comment\"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span> <span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always # 每次修改都会 sync。消耗性能</span></span><br><span class=\"line\">appendfsync everysec <span class=\"comment\"># 每秒执行一次 sync，可能会丢失这1s的数据！</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、每一次修改都同步，文件的完整会更加好！</p>\n<p>2、每秒同步一次，可能会丢失一秒的数据</p>\n<p>3、从不同步，效率最高的！</p>\n<p><strong>缺点：</strong></p>\n<p>1、相对于数据文件来说，aof 远远大于 rdb，修复的速度也比 rdb 慢！</p>\n<p>2、Aof 运行效率也要比 rdb 慢，所以我们 redis 默认的配置就是 rdb 持久化！</p>\n<p><strong>扩展：</strong></p>\n<p>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p>\n<p>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始 的数据，AOF 命令以 Redis 协议追加保存每次写的操作到文件末尾，Redis 还能对 AOF 文件进行后台重 写，使得 AOF 文件的体积不至于过大。</p>\n<p>3、==只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化==</p>\n<p>4、同时开启两种持久化方式</p>\n<ul>\n<li>在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li>\n<li>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件，那要不要只使用 AOF 呢？作者 建议不要，因为 RDB 更适合用于备份数据库（AOF 在不断变化不好备份），快速重启，而且不会有 AOF 可能潜在的 Bug，留着作为一个万一的手段。</li>\n</ul>\n<p>5、性能建议</p>\n<ul>\n<li>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够 了，只保留 save 900 1 这条规则。</li>\n<li>如果 Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只 load 自 己的 AOF 文件就可以了，代价一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产 生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值 64M 太小了，可以设到 5G 以上，默认超过原大小 100%大小重 写可以改到适当的数值。</li>\n<li>如果不 Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔 IO，也 减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时倒掉，会丢失十几分钟的数据， 启动脚本也要比较两个 Master/Slave 中的 RDB 文件，载入较新的那个，微博就是这种架构。</li>\n</ul>\n<h1 id=\"Redis-发布订阅\"><a href=\"#Redis-发布订阅\" class=\"headerlink\" title=\"Redis 发布订阅\"></a>Redis 发布订阅</h1><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。微信、 微博、关注系统！</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<p>订阅/发布消息图：</p>\n<p>第一个：消息发送者， 第二个：频道 第三个：消息订阅者！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153104.png\" alt=\"image-20210503153104671\"></p>\n<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的 关系：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153133.png\" alt=\"image-20210503153133504\"></p>\n<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153155.png\" alt=\"image-20210503153155660\"></p>\n<blockquote>\n<p>命令</p>\n</blockquote>\n<p>这些命令被广泛用于构建即时通信应用，比如网络聊天室(chatroom)和实时广播、实时提醒等。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-psubscribe.html\">PSUBSCRIBE pattern [pattern …]</a> <br />订阅一个或多个符合给定模式的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">[PUBSUB subcommand <a href=\"https://www.runoob.com/redis/pub-sub-pubsub.html\">argument [argument …]</a> <br />查看订阅与发布系统状态。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-publish.html\">PUBLISH channel message</a> <br />将信息发送到指定的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">[PUNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-punsubscribe.html\">pattern [pattern …]</a> <br />退订所有给定模式的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-subscribe.html\">SUBSCRIBE channel [channel …]</a> <br />订阅给定的一个或多个频道的信息。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">[UNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-unsubscribe.html\">channel [channel …]</a> <br />指退订给定的频道。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p><strong>订阅端：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ouwen owconfig]<span class=\"comment\"># ../</span></span><br><span class=\"line\">-bash: ../: Is a directory</span><br><span class=\"line\">[root@ouwen owconfig]<span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SUBSCRIBE ouwenshuo</span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) <span class=\"string\">&quot;subscribe&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;ouwenshuo&quot;</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;message&quot;</span> <span class=\"comment\">#消息</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;ouwenshuo&quot;</span> <span class=\"comment\">#哪个频道的消息</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello redis&quot;</span> <span class=\"comment\">#消息内容</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>发送端：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; PUBLISH ouwenshuo <span class=\"string\">&quot;hello redis&quot;</span> <span class=\"comment\">#发布者发布消息到频道！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>原理</p>\n</blockquote>\n<p>Redis 是使用 C 实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，借此加深对 Redis 的理解。</p>\n<p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p>\n<p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 频道！， 而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键， 就是将客户端添加到给定 channel 的订阅链表中。</p>\n<p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>\n<p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在 Redis 中，你可以设定对某一个 key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应 的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>\n<p><strong>使用场景：</strong></p>\n<p>1、实时消息系统！</p>\n<p>2、实时聊天！（频道当做聊天室，将信息回显给所有人即可！）</p>\n<p>3、订阅，关注系统都是可以的！ 稍微复杂的场景我们就会使用 消息中间件 MQ （）</p>\n<h1 id=\"Redis-主从复制\"><a href=\"#Redis-主从复制\" class=\"headerlink\" title=\"Redis 主从复制\"></a>Redis 主从复制</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点 (master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。 Master 以写为主，Slave 以读为主。</p>\n<p>默认情况下，每台 Redis 服务器都是主节点；</p>\n<p>且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p>\n<p><strong>主从复制的作用主要包括：</strong></p>\n<p>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p>\n<p>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务 的冗余。</p>\n<p>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 （即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点），分担服务器负载；尤其是在写 少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。</p>\n<p>4、高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</p>\n<p><strong>一般来说，要将 Redis 运用于工程项目中，只使用一台 Redis 是万万不能的（宕机），原因如下：</strong></p>\n<p>1、从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较 大；</p>\n<p>2、从容量上，单个 Redis 服务器内存容量有限，就算一台 Redis 服务器内存容量为 256G，也不能将所有 内存用作 Redis 存储内存，一般来说，单台 Redis 最大使用内存不应该超过 20G。 电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p>\n<p><strong>对于这种场景，我们可以使如下这种架构：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503160753.png\" alt=\"image-20210503160753106\"></p>\n<p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主 二从！</p>\n<p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用 Redis！</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>只配置从库，不用配置主库！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; info replication <span class=\"comment\"># 查看当前库的信息</span></span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master <span class=\"comment\"># 角色 master</span></span><br><span class=\"line\">connected_slaves:0 <span class=\"comment\"># 没有从机</span></span><br><span class=\"line\">master_replid:b63c90e6c501143759cb0e7f450bd1eb0c70882a</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:0</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:0</span><br><span class=\"line\">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>\n\n<p>复制 3 个配置文件，然后修改对应的信息：</p>\n<p>1、端口</p>\n<p>2、pid 名字</p>\n<p>3、log 文件名字</p>\n<p>4、dump.rdb 名字</p>\n<p>修改完毕之后，启动我们的 3 个 redis 服务器，可以通过进程信息查看~</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503162204.png\" alt=\"image-20210503162204439\"></p>\n<h2 id=\"一主二从\"><a href=\"#一主二从\" class=\"headerlink\" title=\"一主二从\"></a>一主二从</h2><p>默认情况下，每台 Redis 服务器都是主节点；==我们一般情况下只用配置从机就好了！</p>\n<p>认老大！ 一主 （79）二从（80，81）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379 <span class=\"comment\">#SLAVEOF host port 找谁当自己的老大 认主机</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:slave <span class=\"comment\">#当前角色是从机</span></span><br><span class=\"line\">master_host:127.0.0.1 <span class=\"comment\">#可以看到主机的信息</span></span><br><span class=\"line\">master_port:6379</span><br><span class=\"line\">master_link_status:up</span><br><span class=\"line\">master_last_io_seconds_ago:2</span><br><span class=\"line\">master_sync_in_progress:0</span><br><span class=\"line\">slave_repl_offset:0</span><br><span class=\"line\">slave_priority:100</span><br><span class=\"line\">slave_read_only:1</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_replid:e3379979becc4e424bf681c1a5fe7672bee18d37</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在主机中查看</span></span><br><span class=\"line\">127.0.0.1:6379&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1 <span class=\"comment\">#多了从机的配置</span></span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6380,state=online,offset=28,lag=0 <span class=\"comment\">#可以查看从机的信息</span></span><br><span class=\"line\">master_replid:e3379979becc4e424bf681c1a5fe7672bee18d37</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:28</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:28</span><br></pre></td></tr></table></figure>\n\n<p>如果两个都配置完了，就是有两个从机的</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503162814.png\" alt=\"image-20210503162814852\"></p>\n<p>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的！</p>\n<blockquote>\n<p>细节</p>\n</blockquote>\n<p>主机可以写，从机不能写只能读！主机中的所有信息和数据，都会自动被从机保存！</p>\n<p>主机写：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503163100.png\" alt=\"image-20210503163059937\"></p>\n<p>从机只能读取内容！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503163113.png\" alt=\"image-20210503163113429\"></p>\n<p>测试：主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！</p>\n<p>如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从 主机中获取值！</p>\n<blockquote>\n<p>复制原理</p>\n</blockquote>\n<p>Slave 启动成功连接到 master 后会发送一个 sync 同步命令</p>\n<p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行 完毕之后，<strong>master 将传送整个数据文件到 slave，并完成一次完全同步。</strong></p>\n<ul>\n<li><p>全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p>\n</li>\n<li><p>增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步</p>\n</li>\n</ul>\n<p><strong>但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中 看到！</strong></p>\n<blockquote>\n<p>层层链路</p>\n</blockquote>\n<p>上一个 M 链接下一个 S！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503174711.png\" alt=\"image-20210503174711032\"></p>\n<p>这时候也可以完成我们的主从复制！</p>\n<blockquote>\n<p>如果没有老大了，这个时候能不能选择一个老大出来呢？ 手动！</p>\n</blockquote>\n<p><strong>谋朝篡位</strong></p>\n<p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code> 让自己变成主机！其他的节点就可以手动连 接到最新的这个主节点（手动）！如果这个时候老大修复了，那就重新连接！</p>\n<h1 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h1><p>（自动选举老大的模式）</p>\n<blockquote>\n<p>概述</p>\n</blockquote>\n<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工 干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑 哨兵模式。Redis 从 2.8 开始正式提供了 Sentinel（哨兵） 架构来解决这个问题。</p>\n<p>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数<strong>自动将从库转换为主库</strong>。</p>\n<p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例。</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503180007.png\" alt=\"image-20210503180007839\"></p>\n<p>这里的哨兵有两个作用</p>\n<ul>\n<li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器。</li>\n<li>当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li>\n</ul>\n<p>然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503180127.png\" alt=\"image-20210503180127096\"></p>\n<p>假设主服务器宕机，哨兵 1 先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵 1 主观的认 为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover[故障转移]操作。 切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为 <strong>客观下线</strong>。</p>\n<blockquote>\n<p>测试！</p>\n</blockquote>\n<p>目前的状态是：一主二从！</p>\n<p>1、配置哨兵配置文件 <code>sentinel.conf</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sentinel monitor 被监控的名称 host port 1</span></span><br><span class=\"line\">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>\n\n<p>后面的这个数字 1，代表主机挂了，slave 投票看让谁接替成为主机，票数最多的，就会成为主机！</p>\n<p>2、启动哨兵</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@ouwen bin]<span class=\"comment\"># redis-sentinel owconfig/sentinel.conf</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.144 <span class=\"comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.144 <span class=\"comment\"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=5922, just started</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.144 <span class=\"comment\"># Configuration loaded</span></span><br><span class=\"line\">                _._</span><br><span class=\"line\">           _.-``__ <span class=\"string\">&#x27;&#x27;</span>-._</span><br><span class=\"line\">      _.-``    `.  `_.  <span class=\"string\">&#x27;&#x27;</span>-._           Redis 5.0.8 (00000000/0) 64 bit</span><br><span class=\"line\">  .-`` .-```.  ```\\/    _.,_ <span class=\"string\">&#x27;&#x27;</span>-._</span><br><span class=\"line\"> (    <span class=\"string\">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class=\"line\"><span class=\"string\"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class=\"string\">&#x27;|     Port: 26379</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 5922</span><br><span class=\"line\">  `-._    `-._  `-./  _.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span>_.-<span class=\"string\">&#x27;|</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-&#x27;</span>_.-<span class=\"string\">&#x27;    |           http://redis.io</span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-&#x27;</span>_.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span>_.-<span class=\"string\">&#x27;|</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-&#x27;</span>_.-<span class=\"string\">&#x27;    |</span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-&#x27;</span>_.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\">      `-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\">          `-._        _.-<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">              `-.__.-&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.145 <span class=\"comment\"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.150 <span class=\"comment\"># Sentinel ID is 0ab5ef20110ebfc67bc2a5e93addbe0871ffd748</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.150 <span class=\"comment\"># +monitor master myredis 127.0.0.1 6379 quorum 1</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.151 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.156 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br></pre></td></tr></table></figure>\n\n<p>如果 Master 节点断开了，这个时候就会从从机中随机选择一个服务器！（这里面有一个投票算法！）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503181753.png\" alt=\"image-20210503181752988\"></p>\n<p><strong>哨兵日志：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503181828.png\" alt=\"image-20210503181828520\"></p>\n<p>如果主机此时回来了，==只能归并到新的主机下，当做从机==，这就是哨兵模式的规则！</p>\n<blockquote>\n<p>哨兵模式</p>\n</blockquote>\n<p><strong>优点：</strong></p>\n<p>1、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</p>\n<p>2、主从可以切换，故障可以转移，系统的可用性就会更好</p>\n<p>3、哨兵模式就是主从模式的升级，手动到自动，更加健壮！</p>\n<p><strong>缺点：</strong></p>\n<p>1、Redis 不好做在线扩容的，集群容量一旦达到上限，在线扩容就会十分麻烦！</p>\n<p>2、实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</p>\n<blockquote>\n<p>哨兵模式的全部配置！！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example sentinel.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class=\"line\">port 26379</span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel的工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /tmp</span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel监控的redis主节点的 ip port</span></span><br><span class=\"line\"><span class=\"comment\"># master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class=\"line\"><span class=\"comment\"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class=\"line\"><span class=\"comment\"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class=\"line\"><span class=\"comment\"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class=\"line\">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class=\"line\"><span class=\"comment\"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 30000</span><br><span class=\"line\"><span class=\"comment\"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class=\"line\">sentinel parallel-syncs mymaster 1</span><br><span class=\"line\"><span class=\"comment\"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span></span><br><span class=\"line\"><span class=\"comment\">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class=\"line\"><span class=\"comment\">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那</span></span><br><span class=\"line\">里同步数据时。</span><br><span class=\"line\"><span class=\"comment\">#3.当想要取消一个正在进行的failover所需要的时间。</span></span><br><span class=\"line\"><span class=\"comment\">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，</span></span><br><span class=\"line\">slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><span class=\"line\"><span class=\"comment\"># 默认三分钟</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class=\"line\">sentinel failover-timeout mymaster 180000</span><br><span class=\"line\"><span class=\"comment\"># SCRIPTS EXECUTION</span></span><br><span class=\"line\"><span class=\"comment\">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知</span></span><br><span class=\"line\">相关人员。</span><br><span class=\"line\"><span class=\"comment\">#对于脚本的运行结果有以下规则：</span></span><br><span class=\"line\"><span class=\"comment\">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class=\"line\"><span class=\"comment\">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class=\"line\"><span class=\"comment\">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class=\"line\"><span class=\"comment\">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class=\"line\"><span class=\"comment\">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class=\"line\"><span class=\"comment\">#通知脚本</span></span><br><span class=\"line\"><span class=\"comment\"># shell编程</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class=\"line\">sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class=\"line\"><span class=\"comment\"># 客户端重新配置主节点参数脚本</span></span><br><span class=\"line\"><span class=\"comment\"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class=\"line\"><span class=\"comment\"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;role&gt;是“leader”或者“observer”中的一个。</span></span><br><span class=\"line\"><span class=\"comment\"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class=\"line\"><span class=\"comment\"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class=\"line\">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh <span class=\"comment\"># 一般都是由运维来配置！</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis-缓存穿透和雪崩\"><a href=\"#Redis-缓存穿透和雪崩\" class=\"headerlink\" title=\"Redis 缓存穿透和雪崩\"></a>Redis 缓存穿透和雪崩</h1><blockquote>\n<p>服务的高可用问题！</p>\n</blockquote>\n<p>在这里我们不会详细的区分析解决方案的底层！</p>\n<p>Redis 缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一 些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p>\n<p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183005.png\" alt=\"image-20210503183005078\"></p>\n<h2 id=\"缓存穿透（查不到）\"><a href=\"#缓存穿透（查不到）\" class=\"headerlink\" title=\"缓存穿透（查不到）\"></a>缓存穿透（查不到）</h2><blockquote>\n<p>概念</p>\n</blockquote>\n<p>缓存穿透的概念很简单，用户想要查询一个数据，发现 redis 内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒 杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>布隆过滤器</strong></p>\n<p>布隆过滤器是一种数据结构，对所有可能查询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力；</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183137.png\" alt=\"image-20210503183137788\" style=\"zoom: 50%;\" />\n\n<p><strong>缓存空对象</strong></p>\n<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183210.png\" alt=\"image-20210503183210887\" style=\"zoom:50%;\" />\n\n<p>但是这种方法会存在两个问题：</p>\n<p>1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多 的空值的键；</p>\n<p>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于 需要保持一致性的业务会有影响。</p>\n<h2 id=\"缓存击穿（量太大，缓存过期！）\"><a href=\"#缓存击穿（量太大，缓存过期！）\" class=\"headerlink\" title=\"缓存击穿（量太大，缓存过期！）\"></a>缓存击穿（量太大，缓存过期！）</h2><blockquote>\n<p>概述</p>\n</blockquote>\n<p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一 个屏障上凿开了一个洞。</p>\n<p>当某个 key 在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>设置热点数据永不过期</strong></p>\n<p>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p>\n<p><strong>加互斥锁</strong></p>\n<p>分布式锁：使用分布式锁，保证对于每个 key 同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><blockquote>\n<p>概念</p>\n</blockquote>\n<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机~</p>\n<p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商 品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183725.png\" alt=\"image-20210503183725407\"></p>\n<p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>redis 高可用</strong></p>\n<p>这个思想的含义是，既然 redis 有可能挂掉，那我多增设几台 redis，这样一台挂掉之后其他的还可以继续 工作，其实就是搭建的集群。（异地多活！）</p>\n<p><strong>限流降级</strong></p>\n<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对 某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</p>\n<p><strong>数据预热</strong></p>\n<p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数 据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>\n","categories":["中间件"],"tags":["笔记","Redis"]},{"title":"JUC 并发编程","url":"/2021/05/16/eb9166f8.html","content":"<h2 id=\"什么是-JUC\"><a href=\"#什么是-JUC\" class=\"headerlink\" title=\"什么是 JUC\"></a>什么是 JUC</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404140130.png\" alt=\"img\"></p>\n<p>JUC 是 java.util.concurrent 的简写。在 jdk 官方手册中可以看到 juc 相关的 jar 包有三个。</p>\n<p>用中文概括一下，JUC 的意思就是 java 并发编程工具包</p>\n<h2 id=\"线程和进程\"><a href=\"#线程和进程\" class=\"headerlink\" title=\"线程和进程\"></a>线程和进程</h2><blockquote>\n<p>如果不能使用一句话说出来的技术，不扎实！</p>\n</blockquote>\n<p>进程：一个程序，QQ.exe Music.exe 程序的集合</p>\n<p>一个进程往往可以包含多个线程，至少包含一个！</p>\n<p>Java 默认有几个线程？ 2 个 main、GC</p>\n<p>线程：线程是程序执行中一个单一的顺序控制流程</p>\n<p>对于 Java 而言：Thread、Runnable、Callable</p>\n<p><strong>Java 真的可以开启线程吗？</strong> 开不了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class=\"line\"><span class=\"comment\">         * group threads created/set up by the VM. Any new functionality added</span></span><br><span class=\"line\"><span class=\"comment\">         * to this method in the future may have to also be added to the VM.</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (threadStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Notify the group that this thread is about to be started</span></span><br><span class=\"line\"><span class=\"comment\">         * so that it can be added to the group&#x27;s list of threads</span></span><br><span class=\"line\"><span class=\"comment\">         * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class=\"line\">        group.add(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">started</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            start0();</span><br><span class=\"line\">            started = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!started) &#123;</span><br><span class=\"line\">                    group.threadStartFailed(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* do nothing. If start0 threw a Throwable then</span></span><br><span class=\"line\"><span class=\"comment\">                  it will be passed up the call stack */</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 本地方法，底层的C++，Java无法直接操作硬件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start0</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"并发、并行\"><a href=\"#并发、并行\" class=\"headerlink\" title=\"并发、并行\"></a>并发、并行</h3><p>并发编程：并发、并行</p>\n<p>并发（多线程操作同一个资源）</p>\n<ul>\n<li>CPU 一核，模拟出来多条线程，天下武功，唯快不破，快速交替</li>\n</ul>\n<p>并行（多个人一起行走）</p>\n<ul>\n<li>CPU 多核，多个线程可以同时执行；线程池</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 14:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取CPU的核心数</span></span><br><span class=\"line\">        <span class=\"comment\">// CPU密集型，IO密集型</span></span><br><span class=\"line\">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>并发编程的本质：<strong>充分利用 CPU 的资源</strong></p>\n<p>所有的公司都很看重！</p>\n<h3 id=\"线程有几个状态\"><a href=\"#线程有几个状态\" class=\"headerlink\" title=\"线程有几个状态\"></a>线程有几个状态</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">       \t<span class=\"comment\">//新生</span></span><br><span class=\"line\">        NEW,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//运行</span></span><br><span class=\"line\">        RUNNABLE,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//阻塞</span></span><br><span class=\"line\">        BLOCKED,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//等待</span></span><br><span class=\"line\">        WAITING,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//超时等待</span></span><br><span class=\"line\">        TIMED_WAITING,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//终止</span></span><br><span class=\"line\">        TERMINATED;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wait-sleep-的区别\"><a href=\"#wait-sleep-的区别\" class=\"headerlink\" title=\"wait/sleep 的区别\"></a>wait/sleep 的区别</h3><ol>\n<li><p><strong>来自不同的类</strong></p>\n<p>wait =&gt; Object</p>\n<p>sleep =&gt; Thread</p>\n</li>\n<li><p><strong>关于锁的释放</strong></p>\n<p>wait 会释放锁，sleep 睡觉了，抱着锁睡觉，不会释放！</p>\n</li>\n<li><p><strong>使用的范围是不同的</strong></p>\n<p>wait：只能在同步代码块中使用</p>\n<p>sleep：可以在任何地方睡</p>\n</li>\n</ol>\n<h2 id=\"Lock-锁（重点）\"><a href=\"#Lock-锁（重点）\" class=\"headerlink\" title=\"Lock 锁（重点）\"></a>Lock 锁（重点）</h2><h3 id=\"传统-synchronized\"><a href=\"#传统-synchronized\" class=\"headerlink\" title=\"传统 synchronized\"></a>传统 synchronized</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 真正的多线程开发，公司中的开发，降低耦合性</span></span><br><span class=\"line\"><span class=\"comment\"> * * 线程就是一个单独的资源类，没有任何附属的操作！</span></span><br><span class=\"line\"><span class=\"comment\"> * * 1、 属性、方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 14:42</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SaleTicketDemo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 并发：多线程操作同一个资源类, 把资源类丢入线程</span></span><br><span class=\"line\">        <span class=\"type\">Ticket</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Ticket</span>();</span><br><span class=\"line\">        <span class=\"comment\">// @FunctionalInterface 函数式接口，jdk1.8 lambda表达式 (参数)-&gt;&#123; 代码 &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 资源类 OOP</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ticket</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性、方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 卖票的方式</span></span><br><span class=\"line\">    <span class=\"comment\">// synchronized 本质: 队列，锁</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sale</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (number &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;卖出了&quot;</span> + (number--) + <span class=\"string\">&quot;票,剩余：&quot;</span> + number);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lock-接口\"><a href=\"#Lock-接口\" class=\"headerlink\" title=\"Lock 接口\"></a>Lock 接口</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404145103.png\" alt=\"image-20210404145103174\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404145122.png\" alt=\"image-20210404145122205\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404145431.png\" alt=\"image-20210404145431054\"></p>\n<p>公平锁：十分公平；可以先来后到</p>\n<p><strong>非公平锁：十分不公平；可以插队（默认）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 14:42</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SaleTicketDemo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 并发：多线程操作同一个资源类, 把资源类丢入线程</span></span><br><span class=\"line\">        <span class=\"type\">Ticket2</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Ticket2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</span><br><span class=\"line\">                ticket.sale();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Lock三部曲</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.new ReentrantLock();</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.Lock.lock() //加锁</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.finally =&gt; lock.unlock() //解锁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Ticket2</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性、方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 卖票的方式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sale</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        lock.lock();<span class=\"comment\">//加锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务代码</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (number &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;卖出了第&quot;</span> + (number--) + <span class=\"string\">&quot;票,剩余：&quot;</span> + number);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//解锁</span></span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"synchronized-和-Lock-区别\"><a href=\"#synchronized-和-Lock-区别\" class=\"headerlink\" title=\"synchronized 和 Lock 区别\"></a>synchronized 和 Lock 区别</h3><ol>\n<li>synchronize 内置的 Java 关键字，Lock 是一个 Java 类</li>\n<li>synchronized 无法判断获取锁的状态，Lock 可以判断是否获取到了锁</li>\n<li>synchronized 会自动释放锁，Lock 必须要手动释放锁！如果不释放锁，<strong>死锁</strong></li>\n<li>synchronized 线程 1（获得锁，阻塞）、线程 2（等待，傻傻的等）；Lock 锁就不一定会等待下去；</li>\n<li>synchronized 可重入锁，不可以中断的，非公平；Lock 可重入锁，可以判断锁，非公平（可以自己设置）</li>\n<li>synchronized 适合锁少量的代码同步问题，Lock 适合锁大量的同步代码！</li>\n</ol>\n<h2 id=\"生产者和消费者问题\"><a href=\"#生产者和消费者问题\" class=\"headerlink\" title=\"生产者和消费者问题\"></a>生产者和消费者问题</h2><h3 id=\"生产者和消费者问题-synchronized-版\"><a href=\"#生产者和消费者问题-synchronized-版\" class=\"headerlink\" title=\"生产者和消费者问题 synchronized 版\"></a>生产者和消费者问题 synchronized 版</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.pc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.generic.NEW;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程之间的通信问题：生产者与消费者问题！ 等待唤醒，通知唤醒</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程交替执行 A B 操作同一个变量 num = 0</span></span><br><span class=\"line\"><span class=\"comment\"> * A num+1</span></span><br><span class=\"line\"><span class=\"comment\"> * B num-1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 15:10</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Data</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断等待、业务、通知</span></span><br><span class=\"line\"><span class=\"comment\">//数字 资源类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//+1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (number != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        number++;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + number);</span><br><span class=\"line\">        <span class=\"comment\">// 通知其他线程，我+1完毕了</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//-1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (number == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        number--;</span><br><span class=\"line\">        <span class=\"comment\">// 通知其他线程，我-1完毕了</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + number);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>问题存在，A B C D 4 个线程 虚假唤醒</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404152512.png\" alt=\"image-20210404152512622\"></p>\n<p><strong>if 改为 while 判断</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.pc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.generic.NEW;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程之间的通信问题：生产者与消费者问题！ 等待唤醒，通知唤醒</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 15:10</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Data</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Data</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;D&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断等待、业务、通知</span></span><br><span class=\"line\"><span class=\"comment\">//数字 资源类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Data</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//+1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (number != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        number++;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + number);</span><br><span class=\"line\">        <span class=\"comment\">// 通知其他线程，我+1完毕了</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//-1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (number == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        number--;</span><br><span class=\"line\">        <span class=\"comment\">// 通知其他线程，我-1完毕了</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + number);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JUC-版的生产者与消费者问题\"><a href=\"#JUC-版的生产者与消费者问题\" class=\"headerlink\" title=\"JUC 版的生产者与消费者问题\"></a>JUC 版的生产者与消费者问题</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404153425.png\" alt=\"image-20210404153311646\"></p>\n<p><strong>通过 Lock 找到 Condition</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404160949.png\" alt=\"image-20210404160949444\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.pc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 16:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Data2</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Data2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;D&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断等待、业务、通知</span></span><br><span class=\"line\"><span class=\"comment\">//数字 资源类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Data2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"type\">Condition</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"comment\">//condition.await();  //等待</span></span><br><span class=\"line\">    <span class=\"comment\">//condition.signalAll(); //唤醒全部</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//+1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务代码</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待</span></span><br><span class=\"line\">                condition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            number++;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + number);</span><br><span class=\"line\">            <span class=\"comment\">// 通知其他线程，我+1完毕了</span></span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//-1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待</span></span><br><span class=\"line\">                condition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            number--;</span><br><span class=\"line\">            <span class=\"comment\">// 通知其他线程，我-1完毕了</span></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;&quot;</span> + number);</span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>任何一个新的技术诞生，绝不是仅仅只是覆盖了原来的技术，一定存在优势和补充！</strong></p>\n<h3 id=\"Condition-精准的通知和唤醒线程\"><a href=\"#Condition-精准的通知和唤醒线程\" class=\"headerlink\" title=\"Condition 精准的通知和唤醒线程\"></a>Condition 精准的通知和唤醒线程</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404161317.png\" alt=\"image-20210404161317196\"  />\n\n<p>代码测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.pc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 16:14</span></span><br><span class=\"line\"><span class=\"comment\"> * A执行完调用B，B执行完调用C，C执行完调用A</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Data3</span> <span class=\"variable\">data3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Data3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data3.printA();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data3.printB();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data3.printC();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//资源类 Lock</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Data3</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"type\">Condition</span> <span class=\"variable\">condition1</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"type\">Condition</span> <span class=\"variable\">condition2</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"type\">Condition</span> <span class=\"variable\">condition3</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; <span class=\"comment\">// 1A 2B 3C</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务，判断 -&gt; 执行 -&gt; 通知</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待</span></span><br><span class=\"line\">                condition1.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;AAAAAAA&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//唤醒，唤醒指定的人，B</span></span><br><span class=\"line\">            number = <span class=\"number\">2</span>;</span><br><span class=\"line\">            condition2.signal();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务，判断 -&gt; 执行 -&gt; 通知</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待</span></span><br><span class=\"line\">                condition2.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;BBBBBB&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//唤醒，唤醒指定的人，C</span></span><br><span class=\"line\">            number = <span class=\"number\">3</span>;</span><br><span class=\"line\">            condition3.signal();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printC</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务，判断 -&gt; 执行 -&gt; 通知</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待</span></span><br><span class=\"line\">                condition3.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;=&gt;CCCCCCCC&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//唤醒，唤醒指定的人，A</span></span><br><span class=\"line\">            number = <span class=\"number\">1</span>;</span><br><span class=\"line\">            condition1.signal();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-锁现象\"><a href=\"#8-锁现象\" class=\"headerlink\" title=\"8 锁现象\"></a>8 锁现象</h2><p>任何判断锁的是谁！永远的知道什么是锁，锁到底锁的是谁！</p>\n<p>**深刻理解我们的锁 **</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.lock8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 8锁，就是关于锁的8个问题</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、标准情况下，两个线程先打印 发短信还是 打电话？ 1发短信 2打电话</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、sendSms延迟4秒，两个线程先打印 发短信还是 打电话？ 1发短信 2打电话</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 16:30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//锁的存在</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            phone.sendSms();</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            phone.call();</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// synchronized 锁的对象是方法的调用者！</span></span><br><span class=\"line\">    <span class=\"comment\">// 两个方法用的是同一所，谁先拿到谁执行！</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发短信&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打电话&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.lock8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 增加了一个普通方法！先执行发短信还是hello？  普通方法hello</span></span><br><span class=\"line\"><span class=\"comment\"> * 4. 两个对象，两个同步方法，发短信还是打电话？  //打电话</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 16:36</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span>  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//两个不同的对象 两把锁</span></span><br><span class=\"line\">        <span class=\"type\">Phone2</span> <span class=\"variable\">phone1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone2</span>();</span><br><span class=\"line\">        <span class=\"type\">Phone2</span> <span class=\"variable\">phone2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//锁的存在</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            phone1.sendSms();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            phone2.call();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// synchronized 锁的对象是方法的调用者！</span></span><br><span class=\"line\">    <span class=\"comment\">// 两个方法用的是同一锁，谁先拿到谁执行！</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发短信&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打电话&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里没有锁！不是同步方法！不受锁的影响</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.lock8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 5.增加两个静态同步方法，只有一个对象，先打印 发短信？打电话？ 发短信</span></span><br><span class=\"line\"><span class=\"comment\"> * 6.增加两个静态同步方法，两个对象！，先打印 发短信？打电话？ 发短信</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 17:22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test3</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//两个不同的对象 类模板Class只有一个 static，锁的是Class</span></span><br><span class=\"line\">        <span class=\"type\">Phone3</span> <span class=\"variable\">phone1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone3</span>();</span><br><span class=\"line\">        <span class=\"type\">Phone3</span> <span class=\"variable\">phone2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//锁的存在</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            phone1.sendSms();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            phone2.call();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone3</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// synchronized 锁的对象是方法的调用者！</span></span><br><span class=\"line\">    <span class=\"comment\">// staic静态方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 类一加载就有了！锁的是Class Phone3.class</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发短信&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打电话&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.lock8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 7. 一个静态同步方法，一个普通同步方法 一个对象 先打印 发短信？打电话？ 打电话</span></span><br><span class=\"line\"><span class=\"comment\"> * 8. 一个静态同步方法，一个普通同步方法 两个对象 先打印 发短信？打电话？ 打电话</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 17:27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test4</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//两个不同的对象 类模板Class只有一个 static，锁的是Class</span></span><br><span class=\"line\">        <span class=\"type\">Phone4</span> <span class=\"variable\">phone1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone4</span>();</span><br><span class=\"line\">        <span class=\"type\">Phone4</span> <span class=\"variable\">phone2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone4</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//锁的存在</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            phone1.sendSms();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            phone2.call();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone4</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// staic静态同步方法  锁的是Class</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发短信&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//普通同步方法 锁的是调用对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打电话&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小结</p>\n</blockquote>\n<p>new this 具体的一个对象</p>\n<p>static Class 唯一的模板</p>\n<h2 id=\"集合类不安全\"><a href=\"#集合类不安全\" class=\"headerlink\" title=\"集合类不安全\"></a>集合类不安全</h2><h3 id=\"List-不安全\"><a href=\"#List-不安全\" class=\"headerlink\" title=\"List 不安全\"></a>List 不安全</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * java.util.ConcurrentModificationException 并发修改异常;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 17:34</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ListTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 并发下 ArrayList 不安全的</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 解决方案：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1、List&lt;String&gt; list = new Vector&lt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">         * 2、List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class=\"line\"><span class=\"comment\">         * 3、List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">// CopyOnWriter COW 计算机程序设计领域的一种优化策略：</span></span><br><span class=\"line\">        <span class=\"comment\">// 多个线程调用的时候，list，读取时是固定的，写入（覆盖）</span></span><br><span class=\"line\">        <span class=\"comment\">// 在写入的时候避免覆盖，造成数据问题  -- 读写分离</span></span><br><span class=\"line\">        <span class=\"comment\">// CopyOnWriterList 比 Vector NB在哪里？ =&gt; 前者效率高</span></span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                list.add(UUID.randomUUID().toString().substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">                System.out.println(list);</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>学习方法推荐：1、先会用、2、货比 3 家，寻找其他解决方案，3、分析源码！</p>\n<h3 id=\"Set-不安全\"><a href=\"#Set-不安全\" class=\"headerlink\" title=\"Set 不安全\"></a>Set 不安全</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 同理可证：java.util.ConcurrentModificationException 并发修改异常</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 17:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SetList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Set&lt;String&gt; set = new HashSet&lt;&gt;();</span></span><br><span class=\"line\">        <span class=\"comment\">//Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class=\"line\">        Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">300</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                set.add(UUID.randomUUID().toString().substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">                System.out.println(set);</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>HashSet 底层是什么？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">HashSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//add set 本质就是map key是无法重复的！！</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map.put(e, PRESENT)==<span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">PRESENT</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(); <span class=\"comment\">//常量 不变的值！</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Map-不安全\"><a href=\"#Map-不安全\" class=\"headerlink\" title=\"Map 不安全\"></a>Map 不安全</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 17:57</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// map 是这样的用的吗？ 不是，工作中不用HashMap()</span></span><br><span class=\"line\">        <span class=\"comment\">//  默认等价于什么 new HashMap&lt;&gt;(16,0.75f);</span></span><br><span class=\"line\">        <span class=\"comment\">//Map&lt;String,String&gt; map =  new HashMap&lt;&gt;();</span></span><br><span class=\"line\">        <span class=\"comment\">//Map&lt;String,String&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;());</span></span><br><span class=\"line\">        <span class=\"comment\">// 研究ConcurrentHashMap原理</span></span><br><span class=\"line\">        Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">                System.out.println(map);</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Callable（简单）\"><a href=\"#Callable（简单）\" class=\"headerlink\" title=\"Callable（简单）\"></a>Callable（简单）</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404181130.png\" alt=\"image-20210404181130827\"></p>\n<ol>\n<li>可以有返回值</li>\n<li>可以抛出异常</li>\n<li>方法不同 ，run()/call()</li>\n</ol>\n<p><strong>代码测试：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.callable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 启动Callable</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 18:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CallableTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//怎么启动callable</span></span><br><span class=\"line\">        <span class=\"comment\">// 1.new Thread(new Runnable()).start();</span></span><br><span class=\"line\">        <span class=\"comment\">// 2.new Thread(new FutureTask&lt;V&gt;()).start();</span></span><br><span class=\"line\">        <span class=\"comment\">// 3.new Thread(new FutureTask&lt;V&gt;(new Callable())).start();</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MyThread</span> <span class=\"variable\">myThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>();</span><br><span class=\"line\">        <span class=\"comment\">//适配类 FutureTask</span></span><br><span class=\"line\">        FutureTask&lt;String&gt; task = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(myThread);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task, <span class=\"string\">&quot;B&quot;</span>).start(); <span class=\"comment\">//结果会被缓存，效率高</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> task.get(); <span class=\"comment\">// 这个get方法可能会产生阻塞！ 把它放到最后，或者使用异步通信来处理</span></span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;String&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;call()&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>细节：</p>\n<ol>\n<li>有缓存</li>\n<li>结果可能需要等待，会阻塞！</li>\n</ol>\n<h2 id=\"常用的辅助类\"><a href=\"#常用的辅助类\" class=\"headerlink\" title=\"常用的辅助类\"></a>常用的辅助类</h2><h3 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404211341.png\" alt=\"image-20210404211341279\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 计数器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 21:14</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CountDownLatchDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//总数是6</span></span><br><span class=\"line\">        <span class=\"type\">CountDownLatch</span> <span class=\"variable\">countDownLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;Go Out&quot;</span>);</span><br><span class=\"line\">                countDownLatch.countDown(); <span class=\"comment\">//数量-1</span></span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        countDownLatch.await(); <span class=\"comment\">//等待计数器归零，再向下执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;关门&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理：</p>\n<p>==countDownLatch.countDown()== //数量-1</p>\n<p>==countDownLatch.await()== //等待计数器归零，然后再向下执行</p>\n<p>每次有线程调用 countDownLatch()数量-1，假设计数器变为 0，countDownLatch.await()就会被唤醒，继续往下执行</p>\n<h3 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404212740.png\" alt=\"image-20210404212739912\"></p>\n<p>加法计数器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 21:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CycliBarrierDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 集齐七颗龙珠，召唤神龙</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">//召唤龙珠的线程</span></span><br><span class=\"line\">        <span class=\"type\">CyclicBarrier</span> <span class=\"variable\">barrier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CyclicBarrier</span>(<span class=\"number\">7</span>,()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;召唤神龙成功&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"comment\">// lambda能操作i吗</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;收集&quot;</span>+temp+<span class=\"string\">&quot;个龙珠&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    barrier.await(); <span class=\"comment\">//等待</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210404213555.png\" alt=\"image-20210404213555658\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Semaphore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-04 21:36</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SemaphoreDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//线程数量：停车位</span></span><br><span class=\"line\">        <span class=\"type\">Semaphore</span> <span class=\"variable\">semaphore</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Semaphore</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">//acquire()得到</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    semaphore.acquire();</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;抢到车位&quot;</span>);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;离开车位&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//release()释放</span></span><br><span class=\"line\">                    semaphore.release();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理：</p>\n<p>==semaphore.acquire();== // 获得，假设已经满了，等待，等待被释放为止！</p>\n<p>==semaphore.release();== // 释放，会将当前的信号量释放+1，然后唤醒等待的线程！</p>\n<p>作用：多个共享资源互斥的使用！并发限流，控制并发的线程数</p>\n<h2 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h2><p>ReadWriteLock</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405142737.png\" alt=\"image-20210405142730413\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.rw;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 独占锁（写锁） 一次只能被一个线程占有</span></span><br><span class=\"line\"><span class=\"comment\"> * 共享锁（读锁）  多个线程可以同时占有</span></span><br><span class=\"line\"><span class=\"comment\"> * ReadWriteLock</span></span><br><span class=\"line\"><span class=\"comment\"> * 读-读 可以共存！</span></span><br><span class=\"line\"><span class=\"comment\"> * 读-写 不能共存！</span></span><br><span class=\"line\"><span class=\"comment\"> * 写-写 不能共存！</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-05 14:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReadWriteLockDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyCacheLock</span> <span class=\"variable\">myCache</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyCacheLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//写入</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                myCache.put(temp + <span class=\"string\">&quot;&quot;</span>, temp);</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//读取</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                myCache.get(temp + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义缓存</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存，写</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;写入&quot;</span> + key);</span><br><span class=\"line\">        map.put(key, value);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;写入完毕&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取，读</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;读取&quot;</span> + key);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> map.get(key);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;读取完毕&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyCacheLock</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 读写锁，更加细粒度的控制</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">ReadWriteLock</span> <span class=\"variable\">readWriteLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantReadWriteLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存，写入的时候，只希望同时只有一个线程写</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        readWriteLock.writeLock().lock();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;写入&quot;</span> + key);</span><br><span class=\"line\">            map.put(key, value);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;写入完毕&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            readWriteLock.writeLock().unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取，读</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        readWriteLock.readLock().lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;读取&quot;</span> + key);</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> map.get(key);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;读取完毕&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            readWriteLock.readLock().unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405160056.png\" alt=\"image-20210405160056615\"></p>\n<h3 id=\"阻塞队列-1\"><a href=\"#阻塞队列-1\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405160225.png\" alt=\"image-20210405160225524\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405160713.png\" alt=\"image-20210405160713694\"></p>\n<h3 id=\"BlockingQueue\"><a href=\"#BlockingQueue\" class=\"headerlink\" title=\"BlockingQueue\"></a><strong>BlockingQueue</strong></h3><p>不是新的东西，属于 Collection 集合框架下</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405160927.png\" alt=\"image-20210405160927280\"></p>\n<p>什么情况下我们会使用阻塞队列：多线程并发处理，线程池！</p>\n<h3 id=\"学会使用队列\"><a href=\"#学会使用队列\" class=\"headerlink\" title=\"学会使用队列\"></a><strong>学会使用队列</strong></h3><p>添加、移除</p>\n<p><strong>四组 API</strong></p>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>有返回值，抛出异常</th>\n<th>有返回值，不抛出异常</th>\n<th>阻塞等待</th>\n<th>超时等待</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加</td>\n<td>add</td>\n<td>offer()</td>\n<td>put()</td>\n<td>offer(,,)</td>\n</tr>\n<tr>\n<td>移除</td>\n<td>remove</td>\n<td>foll()</td>\n<td>take()</td>\n<td>foll(,)</td>\n</tr>\n<tr>\n<td>检测队首元素</td>\n<td>element</td>\n<td>peek</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//队列的大小</span></span><br><span class=\"line\">    <span class=\"type\">ArrayBlockingQueue</span> <span class=\"variable\">blockingQueue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    System.out.println(blockingQueue.add(<span class=\"string\">&quot;a&quot;</span>));</span><br><span class=\"line\">    System.out.println(blockingQueue.add(<span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\">    System.out.println(blockingQueue.add(<span class=\"string\">&quot;c&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">//java.lang.IllegalStateException: Queue full 抛出异常！队列已满</span></span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(blockingQueue.add(&quot;d&quot;));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;==========&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(blockingQueue.remove());</span><br><span class=\"line\">    System.out.println(blockingQueue.remove());</span><br><span class=\"line\">    System.out.println(blockingQueue.remove());</span><br><span class=\"line\">    <span class=\"comment\">//java.util.NoSuchElementException 抛出异常！没有元素</span></span><br><span class=\"line\">    System.out.println(blockingQueue.remove());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 有返回值，不抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ArrayBlockingQueue</span> <span class=\"variable\">blockingQueue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(blockingQueue.offer(<span class=\"string\">&quot;a&quot;</span>));</span><br><span class=\"line\">    System.out.println(blockingQueue.offer(<span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\">    System.out.println(blockingQueue.offer(<span class=\"string\">&quot;c&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(blockingQueue.offer(&quot;d&quot;));  //返回false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;========&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(blockingQueue.poll());</span><br><span class=\"line\">    System.out.println(blockingQueue.poll());</span><br><span class=\"line\">    System.out.println(blockingQueue.poll());</span><br><span class=\"line\">    System.out.println(blockingQueue.poll());  <span class=\"comment\">//返回null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阻塞等待</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    ArrayBlockingQueue&lt;Object&gt; blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    blockingQueue.put(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    blockingQueue.put(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">    blockingQueue.put(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//blockingQueue.put(&quot;d&quot;); //程序一直阻塞</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;========&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(blockingQueue.take());</span><br><span class=\"line\">    System.out.println(blockingQueue.take());</span><br><span class=\"line\">    System.out.println(blockingQueue.take());</span><br><span class=\"line\">    System.out.println(blockingQueue.take()); <span class=\"comment\">//程序一直阻塞</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 超时等待</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    ArrayBlockingQueue&lt;Object&gt; blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(blockingQueue.offer(<span class=\"string\">&quot;a&quot;</span>));</span><br><span class=\"line\">    System.out.println(blockingQueue.offer(<span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\">    System.out.println(blockingQueue.offer(<span class=\"string\">&quot;c&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(blockingQueue.offer(&quot;d&quot;,2, TimeUnit.SECONDS));  //超时等待2秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;=========&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(blockingQueue.poll());</span><br><span class=\"line\">    System.out.println(blockingQueue.poll());</span><br><span class=\"line\">    System.out.println(blockingQueue.poll());</span><br><span class=\"line\">    System.out.println(blockingQueue.poll(<span class=\"number\">2</span>,TimeUnit.SECONDS)); <span class=\"comment\">//超时等待2秒</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SynchronousQueue\"><a href=\"#SynchronousQueue\" class=\"headerlink\" title=\"SynchronousQueue\"></a>SynchronousQueue</h3><p><strong>同步队列</strong></p>\n<p>进去一个元素，必须等待取出来之后，才能再往里面放一个元素！</p>\n<p>put、take</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.bq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.SynchronousQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 同步队列</span></span><br><span class=\"line\"><span class=\"comment\"> * 和其他的BlockingQueue不一样，SynchronousQueue 不存储元素</span></span><br><span class=\"line\"><span class=\"comment\"> * put了一个元素，必须从里面先take出来，否则无法继续往里面put值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-05 17:03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SynchronousQueueTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        BlockingQueue&lt;String&gt; blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;&gt;();<span class=\"comment\">//同步队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;put 1&quot;</span>);</span><br><span class=\"line\">                blockingQueue.put(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;put 2&quot;</span>);</span><br><span class=\"line\">                blockingQueue.put(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;put 3&quot;</span>);</span><br><span class=\"line\">                blockingQueue.put(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+blockingQueue.take());</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+blockingQueue.take());</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+blockingQueue.take());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程池（重点）\"><a href=\"#线程池（重点）\" class=\"headerlink\" title=\"线程池（重点）\"></a>线程池（重点）</h2><p>线程池：三大方法、七大参数、四种拒绝策略</p>\n<h3 id=\"池化技术\"><a href=\"#池化技术\" class=\"headerlink\" title=\"池化技术\"></a>池化技术</h3><p>程序的运行，本质：占用系统的资源！优化资源的使用！=&gt;池化技术</p>\n<p>线程池、连接池、内存池、对象池….创建、销毁。十分浪费资源</p>\n<p>池化技术：事先准备好一些资源，有人要用，就到我这里来拿，用完之后还给我。</p>\n<h3 id=\"线程池的好处\"><a href=\"#线程池的好处\" class=\"headerlink\" title=\"线程池的好处\"></a>线程池的好处</h3><ol>\n<li>降低资源的消耗</li>\n<li>提高响应的速度</li>\n<li>方便管理</li>\n</ol>\n<p>==<strong>线程复用，可以控制最大并发数、管理线程</strong>==</p>\n<h3 id=\"线程池：三大方法\"><a href=\"#线程池：三大方法\" class=\"headerlink\" title=\"线程池：三大方法\"></a>线程池：三大方法</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405171700.png\" alt=\"image-20210405171659980\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.pool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Executors 工具类 3大方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-05 17:19</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//ExecutorService threadPool =  Executors.newSingleThreadExecutor(); //单个线程</span></span><br><span class=\"line\">        <span class=\"comment\">//ExecutorService threadPool =  Executors.newFixedThreadPool(5); //创建一个固定大小的线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span>  Executors.newCachedThreadPool(); <span class=\"comment\">//可伸缩的，缓存线程池</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                threadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            threadPool.shutdown();  <span class=\"comment\">//关闭线程池</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七大参数\"><a href=\"#七大参数\" class=\"headerlink\" title=\"七大参数\"></a>七大参数</h3><p><strong>源码分析：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newSingleThreadExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalizableDelegatedExecutorService</span></span><br><span class=\"line\">        (<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newFixedThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> nThreads)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newCachedThreadPool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本质都是ThreadPoolExecutor()</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,  //核心线程池大小</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize, //最大核心线程池大小</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,  //超时了没有人调用就会释放</span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,  //超时单位</span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,  //阻塞队列</span></span><br><span class=\"line\"><span class=\"params\">                          ThreadFactory threadFactory,  //线程工厂，创建线程的，一般不用动</span></span><br><span class=\"line\"><span class=\"params\">                          RejectedExecutionHandler handler  //拒绝策略)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"literal\">null</span> || threadFactory == <span class=\"literal\">null</span> || handler == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405181241.png\" alt=\"image-20210405181241166\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405190839.png\" alt=\"image-20210405181515918\"></p>\n<h3 id=\"手动创建线程池\"><a href=\"#手动创建线程池\" class=\"headerlink\" title=\"手动创建线程池\"></a>手动创建线程池</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.pool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Executors 工具类 3大方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-05 17:19</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//自定义线程池！工作中 ThreadPoolExecutor</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"number\">5</span>,</span><br><span class=\"line\">                <span class=\"number\">3</span>,</span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingDeque</span>&lt;&gt;(<span class=\"number\">3</span>),</span><br><span class=\"line\">                Executors.defaultThreadFactory(),</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 四种拒绝策略</span></span><br><span class=\"line\"><span class=\"comment\">                 * 1.new ThreadPoolExecutor.AbortPolicy());  // 银行满了，还有人进来，不处理这个人的，抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">                 * 2.new ThreadPoolExecutor.CallerRunsPolicy());  // 哪来的去哪里</span></span><br><span class=\"line\"><span class=\"comment\">                 * 3.new ThreadPoolExecutor.DiscardPolicy());  // 队列满了，不会抛出异常，丢弃</span></span><br><span class=\"line\"><span class=\"comment\">                 * 4.new ThreadPoolExecutor.DiscardOldestPolicy());  // 队列满了，丢弃最早的任务，添加新任务</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.DiscardOldestPolicy());  <span class=\"comment\">// 队列满了，丢弃最早的任务，添加新任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 最大承载：Deque + max</span></span><br><span class=\"line\">            <span class=\"comment\">// 抛出 java.util.concurrent.RejectedExecutionException</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">                threadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            threadPool.shutdown();  <span class=\"comment\">//关闭线程池</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四种拒绝策略\"><a href=\"#四种拒绝策略\" class=\"headerlink\" title=\"四种拒绝策略\"></a>四种拒绝策略</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405185214.png\" alt=\"image-20210405185214360\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 四种拒绝策略</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.new ThreadPoolExecutor.AbortPolicy());  // 银行满了，还有人进来，不处理这个人的，抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.new ThreadPoolExecutor.CallerRunsPolicy());  // 哪来的去哪里</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.new ThreadPoolExecutor.DiscardPolicy());  // 队列满了，不会抛出异常，丢弃</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.new ThreadPoolExecutor.DiscardOldestPolicy());  // 队列满了，丢弃最早的任务，添加新任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结和扩展\"><a href=\"#小结和扩展\" class=\"headerlink\" title=\"小结和扩展\"></a>小结和扩展</h3><p>最大线程池大小如何去设置！</p>\n<p>了解：IO 密集型，CPU 密集型：（调优）！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.pool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-05 17:19</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//自定义线程池！工作中 ThreadPoolExecutor</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 最大线程到底该如何定义？</span></span><br><span class=\"line\"><span class=\"comment\">         * 1. CPU密集型，几核，就是几，可以保持CPU效率最高</span></span><br><span class=\"line\"><span class=\"comment\">         * 2. IO密集型，判断你程序中十分耗IO的线程</span></span><br><span class=\"line\"><span class=\"comment\">         * 程序  15个大型任务  io十分占用资源！ -&gt; 30个</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取CPU的核心数</span></span><br><span class=\"line\">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">2</span>,</span><br><span class=\"line\">                Runtime.getRuntime().availableProcessors(),</span><br><span class=\"line\">                <span class=\"number\">3</span>,</span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingDeque</span>&lt;&gt;(<span class=\"number\">3</span>),</span><br><span class=\"line\">                Executors.defaultThreadFactory(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 最大承载：Deque + max</span></span><br><span class=\"line\">            <span class=\"comment\">// 抛出 java.util.concurrent.RejectedExecutionException</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">                threadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            threadPool.shutdown();  <span class=\"comment\">//关闭线程池</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四大函数式接口（重点、必需掌握）\"><a href=\"#四大函数式接口（重点、必需掌握）\" class=\"headerlink\" title=\"四大函数式接口（重点、必需掌握）\"></a>四大函数式接口（重点、必需掌握）</h2><p>新时代的程序员：lambda 表达式、链式编程、函数式接口、Stream 流式计算</p>\n<h3 id=\"函数式接口：只有一个方法的接口\"><a href=\"#函数式接口：只有一个方法的接口\" class=\"headerlink\" title=\"函数式接口：只有一个方法的接口\"></a>函数式接口：只有一个方法的接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//超级多的FunctionInterface</span></span><br><span class=\"line\"><span class=\"comment\">//简化编程模型，在新版本的框架底层大量应用！</span></span><br><span class=\"line\"><span class=\"comment\">//forEach(消费者类型的函数式接口)</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405193839.png\" alt=\"image-20210405193839177\"></p>\n<p><strong>代码测试：</strong></p>\n<h3 id=\"Function-接口\"><a href=\"#Function-接口\" class=\"headerlink\" title=\"Function 接口\"></a>Function 接口</h3><p>函数型接口</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405195016.png\" alt=\"image-20210405195016832\" style=\"zoom:50%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.function;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Function 函数型接口，有一个输入参数，有一个输出参数</span></span><br><span class=\"line\"><span class=\"comment\"> * 只要是函数型接口，都可以用lambda表达式简化</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-05 19:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Function&lt;String, String&gt; function = new Function&lt;String, String&gt;() &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    @Override</span></span><br><span class=\"line\">        <span class=\"comment\">//    public String apply(String s) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//        return s;</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       \t<span class=\"comment\">//使用lambda表达式简化</span></span><br><span class=\"line\">        Function&lt;String, String&gt; function = (str) -&gt; &#123;<span class=\"keyword\">return</span> str;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(function.apply(<span class=\"string\">&quot;asd&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Predicate-接口\"><a href=\"#Predicate-接口\" class=\"headerlink\" title=\"Predicate 接口\"></a>Predicate 接口</h3><p>断定型接口</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405195655.png\" alt=\"image-20210405195655121\" style=\"zoom:50%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.function;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 断定型接口：有一个输入参数，返回值只能是布尔值！</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-05 19:51</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断字符是否为空</span></span><br><span class=\"line\">        <span class=\"comment\">//Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;() &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    @Override</span></span><br><span class=\"line\">        <span class=\"comment\">//    public boolean test(String s) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//        return s.isEmpty();</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Predicate&lt;String&gt; predicate = str -&gt; str.isEmpty();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(predicate.test(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Consumer-接口\"><a href=\"#Consumer-接口\" class=\"headerlink\" title=\"Consumer 接口\"></a>Consumer 接口</h3><p>消费型接口</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405200414.png\" alt=\"image-20210405200414021\" style=\"zoom:50%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.function;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.generic.NEW;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 消费性接口：一个输入参数，没有返回值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-05 20:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo03</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;() &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    @Override</span></span><br><span class=\"line\">        <span class=\"comment\">//    public void accept(String s) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//        System.out.println(s);</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Consumer&lt;String&gt; consumer = str -&gt; System.out.println(str);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.accept(<span class=\"string\">&quot;asd&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Supplier-接口\"><a href=\"#Supplier-接口\" class=\"headerlink\" title=\"Supplier 接口\"></a>Supplier 接口</h3><p>供给型接口</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405200437.png\" alt=\"image-20210405200437068\" style=\"zoom:50%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.function;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Supplier供给型接口 没有参数，只有返回值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-05 20:03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo04</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Supplier&lt;Integer&gt; supplier = new Supplier&lt;Integer&gt;() &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    @Override</span></span><br><span class=\"line\">        <span class=\"comment\">//    public Integer get() &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//        return 1024;</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Supplier&lt;Integer&gt; supplier = () -&gt; <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(supplier.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Stream-流式计算\"><a href=\"#Stream-流式计算\" class=\"headerlink\" title=\"Stream 流式计算\"></a>Stream 流式计算</h2><h3 id=\"什么是流式计算？\"><a href=\"#什么是流式计算？\" class=\"headerlink\" title=\"什么是流式计算？\"></a>什么是流式计算？</h3><p>大数据时代：存储+计算</p>\n<p>集合是用来存储东西的</p>\n<p>计算都应该交给流来操作！</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210405225822.png\" alt=\"image-20210405225822466\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 现有5个用户，筛选：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. ID偶数的</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 年纪大于23岁</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 用户名转为大写字母</span></span><br><span class=\"line\"><span class=\"comment\"> * 4. 用户名字母倒排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 5. 只输出一个用户</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * * <span class=\"doctag\">@create</span> 2021-04-05 22:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">4</span>, <span class=\"string\">&quot;d&quot;</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">6</span>, <span class=\"string\">&quot;e&quot;</span>, <span class=\"number\">26</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;User&gt; users = Arrays.asList(u1, u2, u3, u4, u5);</span><br><span class=\"line\"></span><br><span class=\"line\">        users.stream()</span><br><span class=\"line\">                .filter(u -&gt; u.getId() % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                .filter(u -&gt; u.getAge() &gt; <span class=\"number\">23</span>)</span><br><span class=\"line\">                .peek(user -&gt; user.setName(user.getName().toUpperCase()))</span><br><span class=\"line\">                .sorted(Comparator.comparing(User::getName, Comparator.reverseOrder()))</span><br><span class=\"line\">                .limit(<span class=\"number\">1</span>)</span><br><span class=\"line\">                .forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ForkJoin\"><a href=\"#ForkJoin\" class=\"headerlink\" title=\"ForkJoin\"></a>ForkJoin</h2><p>分支合并</p>\n<h3 id=\"什么是-ForkJoin？\"><a href=\"#什么是-ForkJoin？\" class=\"headerlink\" title=\"什么是 ForkJoin？\"></a>什么是 ForkJoin？</h3><p>ForkJoin 在 JDK1.7，并行执行任务！提高效率，大数据量！</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406124700.png\" alt=\"image-20210406124653585\" style=\"zoom: 50%;\" />\n\n<blockquote>\n<p>ForkJoin 特点：工作窃取</p>\n</blockquote>\n<p>这个里面维护的都是双端队列</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406125200.png\" alt=\"image-20210406125200490\" style=\"zoom:50%;\" />\n\n<h3 id=\"如何使用-ForkJoin\"><a href=\"#如何使用-ForkJoin\" class=\"headerlink\" title=\"如何使用 ForkJoin?\"></a>如何使用 ForkJoin?</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406130207.png\" alt=\"image-20210406130207157\" style=\"zoom:50%;\" />\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406132051.png\" alt=\"image-20210406132051647\" style=\"zoom:50%;\" />\n\n<h2 id=\"异步回调\"><a href=\"#异步回调\" class=\"headerlink\" title=\"异步回调\"></a>异步回调</h2><p>Future 设计的初衷：对将来的某个事件的结果进行建模</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406221746.png\" alt=\"image-20210406221739820\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.future;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CompletableFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 异步调用：CompletableFuture</span></span><br><span class=\"line\"><span class=\"comment\"> * 异步执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 成功回调</span></span><br><span class=\"line\"><span class=\"comment\"> * 失败回调</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-06 22:18</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//发起一个请求</span></span><br><span class=\"line\">        <span class=\"comment\">//CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    try &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//        TimeUnit.SECONDS.sleep(5);</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125; catch (InterruptedException e) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//        e.printStackTrace();</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//    System.out.println(Thread.currentThread().getName() + &quot;runAsync=&gt;Void&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;);</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;1111&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//completableFuture.get(); //获取阻塞执行结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//有返回值的</span></span><br><span class=\"line\">        CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;runAsync=&gt;Integer&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        completableFuture.whenComplete((t,u)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(t); <span class=\"comment\">//正常的返回结果</span></span><br><span class=\"line\">            System.out.println(u); <span class=\"comment\">//错误信息 java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\">        &#125;).exceptionally((e)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage()); <span class=\"comment\">//可以获取到错误的返回结果</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">233</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h2><h3 id=\"请你谈谈你对-Volatile-的理解\"><a href=\"#请你谈谈你对-Volatile-的理解\" class=\"headerlink\" title=\"请你谈谈你对 Volatile 的理解\"></a>请你谈谈你对 Volatile 的理解</h3><p>Volatile 是 Java 虚拟机提供的<strong>轻量级的同步机制</strong></p>\n<ol>\n<li>保证可见性</li>\n<li>不保证原子性</li>\n<li>禁止指令重排</li>\n</ol>\n<h3 id=\"什么是-JMM\"><a href=\"#什么是-JMM\" class=\"headerlink\" title=\"什么是 JMM\"></a>什么是 JMM</h3><p>JMM：java 内存模型，不存在的东西，概念！约定！</p>\n<p><strong>关于 JMM 一些同步的约定：</strong></p>\n<ol>\n<li>线程解锁前，必须把共享变量立刻刷回主内存</li>\n<li>线程加锁前，必须读取主内存中的最新值到工作内存中！</li>\n<li>加锁和解锁必须是同一把锁！</li>\n</ol>\n<p>线程 <strong>工作内存、主内存</strong></p>\n<h3 id=\"8-种操作\"><a href=\"#8-种操作\" class=\"headerlink\" title=\"8 种操作\"></a>8 种操作</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406224257.png\" alt=\"image-20210406224257522\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406224329.png\" alt=\"image-20210406224329039\"></p>\n<p><strong>内存交互操作有 8 种，虚拟机实现必须保证每一个操作都是原子的，不可在分的（对于 double 和 long 类型的变量来说，load、store、read 和 write 操作在某些平台上允许例外）</strong></p>\n<ul>\n<li>lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li>\n<li>unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>\n<li>read （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的 load 动作使用</li>\n<li>load （载入）：作用于工作内存的变量，它把 read 操作从主存中变量放入工作内存中</li>\n<li>use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li>\n<li>assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li>\n<li>store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的 write 使用</li>\n<li>write 　（写入）：作用于主内存中的变量，它把 store 操作从工作内存中得到的变量的值放入主内存的变量中</li>\n</ul>\n<p><strong>JMM 对这八种指令的使用，制定了如下规则：</strong></p>\n<ul>\n<li><p>不允许 read 和 load、store 和 write 操作之一单独出现。即使用了 read 必须 load，使用了 store 必须 write</p>\n</li>\n<li><p>不允许线程丢弃他最近的 assign 操作，即工作变量的数据改变了之后，必须告知主存</p>\n</li>\n<li><p>不允许一个线程将没有 assign 的数据从工作内存同步回主内存</p>\n</li>\n<li><p>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施 use、store 操作之前，必须经过 assign 和 load 操作</p>\n</li>\n<li><p>一个变量同一时间只有一个线程能对其进行 lock。多次 lock 后，必须执行相同次数的 unlock 才能解锁</p>\n</li>\n<li><p>如果对一个变量进行 lock 操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新 load 或 assign 操作初始化变量的值</p>\n</li>\n<li><p>如果一个变量没有被 lock，就不能对其进行 unlock 操作。也不能 unlock 一个被其他线程锁住的变量</p>\n</li>\n<li><p>对一个变量进行 unlock 操作之前，必须把此变量同步回主内存</p>\n</li>\n</ul>\n<p>问题：程序不知道主内存的值被修改过了！！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406224933.png\" alt=\"image-20210406224933254\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.volatile1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-06 22:50</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JMMDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (num ==  <span class=\"number\">0</span>)&#123; <span class=\"comment\">//线程1对主内存的变化不知道</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        num = <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h2><h3 id=\"保证可见性\"><a href=\"#保证可见性\" class=\"headerlink\" title=\"保证可见性\"></a>保证可见性</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.volatile1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-06 22:50</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JMMDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      不加 volatile 程序就会死循环</span></span><br><span class=\"line\"><span class=\"comment\">      加 volatile 可以保证可见性</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (num ==  <span class=\"number\">0</span>)&#123; <span class=\"comment\">//线程1对主内存的变化不知道</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        num = <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不保证原子性\"><a href=\"#不保证原子性\" class=\"headerlink\" title=\"不保证原子性\"></a>不保证原子性</h3><p>原子性：不可分割</p>\n<p>线程 A 在执行任务的时候，不能被打扰的，也不能被分割，要么同时成功，要么同时失败！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.volatile1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-06 22:55</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//volatile不保证原子性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        num++; <span class=\"comment\">//不是一个原子性操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//理论上num结果为2万</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i1 &lt; <span class=\"number\">1000</span>; i1++) &#123;</span><br><span class=\"line\">                    add();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (Thread.activeCount() &gt; <span class=\"number\">2</span>) &#123; <span class=\"comment\">//main gc</span></span><br><span class=\"line\">            Thread.yield();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;==&gt;&quot;</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果不加 lock 和 synchronized，怎样保持原子性</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406230445.png\" alt=\"image-20210406230445570\" style=\"zoom:67%;\" />\n\n<p>使用原子类，解决原子性问题</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406230556.png\" alt=\"image-20210406230556520\" style=\"zoom:50%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.volatile1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-06 22:55</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//volatile不保证原子性</span></span><br><span class=\"line\">    <span class=\"comment\">//使用原子类的Integer</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//num++; //不是一个原子性操作</span></span><br><span class=\"line\">        num.getAndIncrement();  <span class=\"comment\">// AtomicInteger +1 方法 CAS</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//理论上num结果为2万</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i1 &lt; <span class=\"number\">1000</span>; i1++) &#123;</span><br><span class=\"line\">                    add();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (Thread.activeCount() &gt; <span class=\"number\">2</span>) &#123; <span class=\"comment\">//main gc</span></span><br><span class=\"line\">            Thread.yield();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;==&gt;&quot;</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些类的底层都直接和操作系统挂钩！！直接在内存中修改只！Usafe 类是一个很特殊的存在！</p>\n<h3 id=\"指令重排\"><a href=\"#指令重排\" class=\"headerlink\" title=\"指令重排\"></a>指令重排</h3><p>什么是指令重排：<strong>你写的程序，计算机并不是按照你写的那样去执行的</strong></p>\n<p>源代码 –&gt; 编译器优化的重排 –&gt; 指令并行也可能会重排 –&gt; 内存也可能会重排 –&gt;执行</p>\n<p>==<strong>处理器在进行指令重排的时候，考虑：数据之间的依赖性！</strong>==</p>\n<p>可能造成影响的结果：a b x y 四个数都是 0</p>\n<table>\n<thead>\n<tr>\n<th>线程 A</th>\n<th>线程 B</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>x=a</td>\n<td>y=b</td>\n</tr>\n<tr>\n<td>b=1</td>\n<td>a=2</td>\n</tr>\n</tbody></table>\n<p>正常的结果：x=0 y=0 但是可能由于指令重排</p>\n<table>\n<thead>\n<tr>\n<th>线程 A</th>\n<th>线程 B</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b=1</td>\n<td>a=2</td>\n</tr>\n<tr>\n<td>x=a</td>\n<td>y=b</td>\n</tr>\n</tbody></table>\n<p>指令重排导致的诡异结果：x=2 y=1</p>\n<p><strong>volatile 可以避免指令重排：</strong></p>\n<p>内存屏障。CPU 指令。</p>\n<p>作用：</p>\n<p>1、保证特定的操作的执行顺序！</p>\n<p>2、可以保证某些变量的内存可见性 （利用这些特性 volatile 实现了可见性）</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406232313.png\" alt=\"image-20210406232313816\" style=\"zoom:67%;\" />\n\n<p><strong>Volatile 是可以保持可见性，不能保证原子性，因为内存屏障，可以保证避免指令重排的现象产生！</strong></p>\n<h2 id=\"深入理解-CAS\"><a href=\"#深入理解-CAS\" class=\"headerlink\" title=\"深入理解 CAS\"></a>深入理解 CAS</h2><h3 id=\"什么是-CAS？\"><a href=\"#什么是-CAS？\" class=\"headerlink\" title=\"什么是 CAS？\"></a>什么是 CAS？</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.cas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-06 23:52</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CASDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//CAS  compareAndSet：比较并交换 compareAndSwap</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">2020</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 期望、更新</span></span><br><span class=\"line\">        <span class=\"comment\">// public final boolean compareAndSet(int expect, int update)</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果我期望的值达到了，那么就会更新，否则就不更新 CAS 是CPU的并发原语</span></span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">2020</span>, <span class=\"number\">2021</span>));</span><br><span class=\"line\">        System.out.println(atomicInteger.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">2020</span>, <span class=\"number\">2021</span>));</span><br><span class=\"line\">        System.out.println(atomicInteger.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Unsafe-类\"><a href=\"#Unsafe-类\" class=\"headerlink\" title=\"Unsafe 类\"></a>Unsafe 类</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406235854.png\" alt=\"image-20210406235854081\" style=\"zoom:67%;\" />\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210406235912.png\" alt=\"image-20210406235912021\" style=\"zoom:67%;\" />\n\n<p>CAS ： 比较当前工作内存中的值和主内存中的值，如果这个值是期望的，那么则执行操作！如果不是就 一直循环！</p>\n<p>缺点：</p>\n<p>1、 循环会耗时</p>\n<p>2、一次性只能保证一个共享变量的原子性</p>\n<p>3、ABA 问题</p>\n<h3 id=\"ABA-问题（狸猫换太子）\"><a href=\"#ABA-问题（狸猫换太子）\" class=\"headerlink\" title=\"ABA 问题（狸猫换太子）\"></a>ABA 问题（狸猫换太子）</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210407000535.png\" alt=\"image-20210407000535708\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.cas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-06 23:52</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CASDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//CAS  compareAndSet：比较并交换 compareAndSwap</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">2020</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对于我们写的SQL ：乐观锁！</span></span><br><span class=\"line\">        <span class=\"comment\">// 期望、更新</span></span><br><span class=\"line\">        <span class=\"comment\">// public final boolean compareAndSet(int expect, int update)</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果我期望的值达到了，那么就会更新，否则就不更新 CAS 是CPU的并发原语</span></span><br><span class=\"line\">        <span class=\"comment\">// ==============捣乱的线程==============</span></span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">2020</span>, <span class=\"number\">2021</span>));</span><br><span class=\"line\">        System.out.println(atomicInteger.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">2021</span>, <span class=\"number\">2020</span>));</span><br><span class=\"line\">        System.out.println(atomicInteger.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ==============期望的线程==============</span></span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">2020</span>, <span class=\"number\">6666</span>));</span><br><span class=\"line\">        System.out.println(atomicInteger.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原子引用\"><a href=\"#原子引用\" class=\"headerlink\" title=\"原子引用\"></a>原子引用</h2><p>解决 ABA 问题，引入原子引用！对应的思想就是我们的乐观锁</p>\n<p>带版本号的原子操作！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.cas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicStampedReference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.DeflaterOutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-07 0:10</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CASDemo02</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// AtomicStampedReference 注意：如果泛型是一个包装类，注意对象的引用问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 正常在业务操作，这里面比较的都是一个个对象</span></span><br><span class=\"line\">        AtomicStampedReference&lt;Integer&gt; integer = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicStampedReference</span>&lt;&gt;(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//乐观锁的原理</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">stamp</span> <span class=\"operator\">=</span> integer.getStamp();  <span class=\"comment\">//获得版本号</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a1=&gt;&quot;</span>+stamp);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(integer.compareAndSet(<span class=\"number\">1</span>, <span class=\"number\">2</span>, integer.getStamp(), integer.getStamp() + <span class=\"number\">1</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a2=&gt;&quot;</span>+integer.getStamp());</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(integer.compareAndSet(<span class=\"number\">2</span>, <span class=\"number\">1</span>, integer.getStamp(), integer.getStamp() + <span class=\"number\">1</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a3=&gt;&quot;</span>+integer.getStamp());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;a&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">stamp</span> <span class=\"operator\">=</span> integer.getStamp();  <span class=\"comment\">//获得版本号</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;b1=&gt;&quot;</span>+stamp);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(integer.compareAndSet(<span class=\"number\">1</span>, <span class=\"number\">6</span>, stamp, stamp + <span class=\"number\">1</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;b2=&gt;&quot;</span>+integer.getStamp());</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;b&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong></p>\n<p><strong>Integer 使用了对象缓存机制，默认范围是 -128 ~ 127 ，推荐使用静态工厂方法 valueOf 获取对象实 例，而不是 new，因为 valueOf 使用缓存，而 new 一定会创建新的对象分配新的内存空间；</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210407002800.png\" alt=\"image-20210407002800024\" style=\"zoom: 67%;\" />\n\n<h2 id=\"各种锁的理解\"><a href=\"#各种锁的理解\" class=\"headerlink\" title=\"各种锁的理解\"></a>各种锁的理解</h2><h3 id=\"公平锁、非公平锁\"><a href=\"#公平锁、非公平锁\" class=\"headerlink\" title=\"公平锁、非公平锁\"></a>公平锁、非公平锁</h3><p>公平锁：非常公平，不能够插队，必须先来后到！</p>\n<p>非公平锁：非常不公平，可以插队（默认都是非公平）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ReentrantLock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tsync = <span class=\"keyword\">new</span> <span class=\"title class_\">NonfairSync</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ReentrantLock</span><span class=\"params\">(<span class=\"type\">boolean</span> fair)</span> &#123;</span><br><span class=\"line\">\tsync = fair ? <span class=\"keyword\">new</span> <span class=\"title class_\">FairSync</span>() : <span class=\"keyword\">new</span> <span class=\"title class_\">NonfairSync</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可重入锁（递归锁）\"><a href=\"#可重入锁（递归锁）\" class=\"headerlink\" title=\"可重入锁（递归锁）\"></a>可重入锁（递归锁）</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210407003348.png\" alt=\"image-20210407003347941\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>synchronized 版</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.lock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-07 0:39</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo01</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            phone.sms();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            phone.sms();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sms</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;sms&quot;</span>);</span><br><span class=\"line\">        call(); <span class=\"comment\">//这里也有锁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;call&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Lock 版</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.lock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-07 0:39</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo02</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone2</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone2</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            phone.sms();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            phone.sms();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sms</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock(); <span class=\"comment\">//细节问题：lock.lock()，lock.unlock(); //lock锁必须配对，否则就会死在里面</span></span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;sms&quot;</span>);</span><br><span class=\"line\">            call(); <span class=\"comment\">//这里也有锁</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;call&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自选锁\"><a href=\"#自选锁\" class=\"headerlink\" title=\"自选锁\"></a>自选锁</h3><p>spinlock</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210407004626.png\" alt=\"image-20210407004626556\" style=\"zoom:67%;\" />\n\n<p><strong>自定义锁：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.lock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自旋锁</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-07 0:52</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpinlockDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    AtomicReference&lt;Thread&gt; atomicReference = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicReference</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//加锁</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mylock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        System.out.println(thread.getName() + <span class=\"string\">&quot;==&gt;mylock&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//自旋锁</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!atomicReference.compareAndSet(<span class=\"literal\">null</span>, thread)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//解锁</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">myunlock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        System.out.println(thread.getName() + <span class=\"string\">&quot;==&gt;myunlock&quot;</span>);</span><br><span class=\"line\">        atomicReference.compareAndSet(thread, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ouwen.lock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-07 0:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSpinLock</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//ReentrantLock lock = new ReentrantLock();</span></span><br><span class=\"line\">        <span class=\"comment\">//lock.lock();</span></span><br><span class=\"line\">        <span class=\"comment\">//lock.unlock();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//地层使用CAS实现自旋锁</span></span><br><span class=\"line\">        <span class=\"type\">SpinlockDemo</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpinlockDemo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            lock.mylock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.myunlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;T1&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            lock.mylock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.myunlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;T2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>死锁是什么？</p>\n <img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210407010904.png\" alt=\"image-20210407010904630\" style=\"zoom:67%;\" />\n\n<h4 id=\"如何解决死锁问题？\"><a href=\"#如何解决死锁问题？\" class=\"headerlink\" title=\"如何解决死锁问题？\"></a>如何解决死锁问题？</h4><p>1、使用<code>jps -l</code>定位进程号</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210407011207.png\" alt=\"image-20210407011207227\"></p>\n<p>2、使用<code>jstack 进程号</code> 找到死锁问题</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210407011248.png\" alt=\"image-20210407011248176\"></p>\n<p><strong>查看堆栈信息，找到死锁问题！</strong></p>\n","categories":["后端开发"],"tags":["技巧","笔记"]},{"title":"JVM 理论探究","url":"/2021/05/06/eb9166f8.html","content":"<ul>\n<li>请你谈谈你对 JVM 的理解，Java8 虚拟机和之前的变化更新？</li>\n<li>什么是 OOM，什么是栈溢出 StackOverFlowError？怎么分析？</li>\n<li>JVM 常用调优参数有哪些？</li>\n<li>内存快照如何抓取，怎么分析 Dump 文件？</li>\n<li>谈谈 JVM 中，类加载器你的认识？</li>\n</ul>\n<h2 id=\"JVM-的位置\"><a href=\"#JVM-的位置\" class=\"headerlink\" title=\"JVM 的位置\"></a>JVM 的位置</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501155102.png\" alt=\"JVM图解\"></p>\n<h2 id=\"JVM-的体系结构\"><a href=\"#JVM-的体系结构\" class=\"headerlink\" title=\"JVM 的体系结构\"></a>JVM 的体系结构</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502005237.png\" alt=\"image-20210502005237430\"></p>\n<p>百分之 99 的 JVM 调优都是在堆中调优，Java 栈、本地方法栈、程序计数器是不会有垃圾存在的。</p>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><p>作用：加载 Class 文件~</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501161637.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>虚拟机自带的加载器</li>\n<li>启动类（根）加载器</li>\n<li>扩展类加载器</li>\n<li>应用程序（系统类）加载器</li>\n</ul>\n<h2 id=\"双清委派机制\"><a href=\"#双清委派机制\" class=\"headerlink\" title=\"双清委派机制\"></a>双清委派机制</h2><p><img src=\"https://img-blog.csdnimg.cn/20201217213314510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGV5YW5iYW8=,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<h2 id=\"沙箱安全机制\"><a href=\"#沙箱安全机制\" class=\"headerlink\" title=\"沙箱安全机制\"></a>沙箱安全机制</h2><p>Java 安全模型的核心就是 Java 沙箱(sandbox)</p>\n<p>什么是沙箱?沙箱是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。</p>\n<p>沙箱主要限制系统资源访问，那系统资源包括什么? CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。</p>\n<p>所有的 Java 程序运行都可以指定沙箱，可以定制安全策略。</p>\n<p>在 Java 中将执行程序分成本地代码和远程代码两种，本地代码默认视为可信任的，而远程代码则被看作是不受信的。对于授信的本地代码,可以访问一切本地资源。而对于非授信的远程代码在早期的 Java 实现中，安全依赖于沙箱 Sandbox)机制。如下图所示 JDK1.0 安全模型</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501163417.png\" alt=\"img\"></p>\n<p>但如此严格的安全机制也给程序的功能扩展带来障碍，比如当用户希望远程代码访问本地系统的文件时候，就无法实现。因此在后续的 Java1.1 版本中，针对安全机制做了改进，增加了安全策略，允许用户指定代码对本地资源的访问权限。如下图所示 JDK1.1 安全模型</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501164943.png\" alt=\"在这里插入图片描述\"></p>\n<p>在 Java1.2 版本中，再次改进了安全机制，增加了代码签名。不论本地代码或是远程代码，都会按照用户的安全策略设定，由类加载器加载到虚拟机中权限不同的运行空间，来实现差异化的代码执行权限控制。如下图所示</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501164956.png\" alt=\"在这里插入图片描述\"></p>\n<p>当前最新的安全机制实现，则引入了域(Domain)的概念。虚拟机会把所有代码加载到不同的系统域和应用域,系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域(Protected Domain),对应不一样的权限(Permission)。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示最新的安全模型(jdk 1.6)</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501165007.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>组成沙箱的基本条件</strong></p>\n<ul>\n<li>字节码校验器(bytecode verifier) :确保 Java 类文件遵循 Java 语言规范。这样可以帮助 Java 程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</li>\n<li>类裝载器(class loader) :其中类装载器在 3 个方面对 Java 沙箱起作用<ul>\n<li>它防止恶意代码去干涉善意的代码;</li>\n<li>它守护了被信任的类库边界;</li>\n<li>它将代码归入保护域,确定了代码可以进行哪些操作；</li>\n</ul>\n</li>\n</ul>\n<p>虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成， 每一个被装载的类将有一个名字，这个命名空间是由 Java 虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。</p>\n<p>类装载器采用的机制是双亲委派模式。</p>\n<ol>\n<li>从最内层 JVM 自带类加载器开始加载,外层恶意同名类得不到加载从而无法使用;</li>\n<li>由于严格通过包来区分了访问域,外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效。</li>\n</ol>\n<ul>\n<li>存取控制器(access controller) :存取控制器可以控制核心 API 对操作系统的存取权限，而这个控制的策略设定,可以由用户指定。</li>\n<li>安全管理器(security manager) : 是核心 API 和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</li>\n<li>安全软件包(security package) : java.security 下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括:<ul>\n<li>安全提供者</li>\n<li>消息摘要</li>\n<li>数字签名</li>\n<li>加密</li>\n<li>鉴别</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Native\"><a href=\"#Native\" class=\"headerlink\" title=\"Native\"></a>Native</h2><ul>\n<li>native :凡是带了 native 关键字的，说明 java 的作用范围达不到了，回去调用底层 c 语言的库!</li>\n<li>会进入本地方法栈</li>\n<li>调用本地方法本地接口 JNI (Java Native Interface)</li>\n<li>JNI 作用:开拓 Java 的使用，融合不同的编程语言为 Java 所用!最初: C、C++</li>\n<li>Java 诞生的时候 C、C++横行，想要立足，必须要有调用 C、C++的程序</li>\n<li>它在内存区域中专门开辟了一块标记区域: Native Method Stack，登记 native 方法</li>\n<li>在最终执行的时候，加载本地方法库中的方法通过 JNI</li>\n</ul>\n<h3 id=\"Native-Method-Stack\"><a href=\"#Native-Method-Stack\" class=\"headerlink\" title=\"Native Method Stack\"></a><strong>Native Method Stack</strong></h3><p>它的具体做法是 Native Method Stack 中登记 native 方法，在( Execution Engine )执行引擎执行的时候加载 Native Libraies。[本地库]</p>\n<h3 id=\"Native-Interface-本地接口\"><a href=\"#Native-Interface-本地接口\" class=\"headerlink\" title=\"Native Interface 本地接口\"></a><strong>Native Interface 本地接口</strong></h3><p>本地接口的作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C/C++程序, Java 在诞生的时候是 C/C++横行的时候，想要立足，必须有调用 C、C++的程序，于是就在内存中专门开辟了块区域处理标记为 native 的代码，它的具体做法是在 Native Method Stack 中登记 native 方法,在( Execution Engine )执行引擎执行的时候加载 Native Libraies。</p>\n<p>目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过 Java 程序驱动打印机或者 Java 系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间通信很发达，比如可以使用 Socket 通信,也可以使用 Web Service 等等，不多做介绍!</p>\n<h2 id=\"PC-寄存器\"><a href=\"#PC-寄存器\" class=\"headerlink\" title=\"PC 寄存器\"></a>PC 寄存器</h2><p>程序计数器: Program Counter Register</p>\n<p>每个线程都有一个程序计数器，是线程私有的，就是一个指针, 指向方法区中的方法字节码(用来存储指向像一条指令的地址， 也即将要执行的指令代码)，在执行引擎读取下一条指令, 是一个非常小的内存空间，几乎可以忽略不计</p>\n<h2 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h2><p>方法区是被所有线程共享,所有字段和方法字节码，以及一些特殊方法，如构造函数,接口代码也在此定义,简单说，所有定义的方法的信息都保存在该区域,此区域属于共享区间;</p>\n<p>==静态变量、常量、类信息(构造方法、接口定义)、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关==</p>\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>栈:先进后出</p>\n<p>桶:后进先出</p>\n<p>队列:先进先出( FIFO : First Input First Output )</p>\n<p>栈：<strong>栈内存，主管程序的运行，生命周期和线程同步</strong></p>\n<p><strong>线程结束，栈内存也就是释放，对于栈来说，不存在垃圾回收问题</strong></p>\n<p>一旦线程结束，栈就 Over!</p>\n<p>栈内存中:</p>\n<p><strong>8 大基本类型+对象引用+实例的方法</strong></p>\n<p><strong>栈运行原理:栈帧</strong></p>\n<p>栈满了: StackOverflowError</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501173518.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501173432.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"三种-JVM\"><a href=\"#三种-JVM\" class=\"headerlink\" title=\"三种 JVM\"></a>三种 JVM</h2><ul>\n<li><p><strong>HotSpot VM</strong></p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">HotSpot VM的热点代码探测能力可以通过执行计数器找出最具有编译价值的代</span><br><span class=\"line\">码，然后通知<span class=\"keyword\">JIT编译器以方法为单位进行编译。 </span>如果一个方法被频繁调用，或方法中有效</span><br><span class=\"line\">循环次数很多，将会分别触发标准编译和OSR（栈上替换）编译动作。 通过编译器与解释器</span><br><span class=\"line\">恰当地协同工作，可以在最优化的程序响应时间与最佳执行性能中取得平衡，而且无须等待</span><br><span class=\"line\">本地代码输出才能执行程序，即时编译的时间压力也相对减小，这样有助于引入更多的代码</span><br><span class=\"line\">优化技术，输出质量更高的本地代码</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>JRockit</strong></p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.<span class=\"keyword\">JRockit </span>VM曾经号称“世界上速度最快的<span class=\"keyword\">Java虚拟机”</span></span><br><span class=\"line\"><span class=\"keyword\"></span><span class=\"number\">2</span>.由于专注于服务器端应用，它可以不太关注程序启动速度，因此<span class=\"keyword\">JRockit内部不包含解析器实现，全部代码都靠即时</span></span><br><span class=\"line\"><span class=\"keyword\"></span>编译器编译后执行。 除此之外，<span class=\"keyword\">JRockit的垃圾收集器和MissionControl服务套件等部分的实</span></span><br><span class=\"line\"><span class=\"keyword\"></span>现，在众多<span class=\"keyword\">Java虚拟机中也一直处于领先水平</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>J9</strong></p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.IBM J9 VM并不是IBM公司唯一的Java虚拟机，不过是目前其主力发展的Java虚拟机，IBM J9 VM原本是内部开发代号，</span><br><span class=\"line\">正式名称是“IBM Technology for Java Virtual Machine”，简称IT4J，只是这个名字太拗口了一点，普及程度不如J9.</span><br><span class=\"line\">2.与BEA JRockit专注于服务器端应用不同，IBM J9的市场定位与Sun HotSpot比较接近，它是一款设计上从服务器端</span><br><span class=\"line\">到桌面应用再到嵌入式都全面考虑的多用途虚拟机<span class=\"strong\">***</span>，J9的开发目的是作为IBM公司各种Java产品的执行平台，它的主</span><br><span class=\"line\">要市场是和IBM产品（如IBM WebSphere等）搭配以及在IBM AIX和z/OS这些平台上部署Java</span><br><span class=\"line\">应用。</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>Heap, 一个 JVM 只有一个堆内存，堆内存的大小是可以调节的。</p>\n<p>类加载器读取了类文件后，一般会把什么东西放到堆中?</p>\n<p>类, 方法，常量,变量~，保存我们所有引用类型的真实对象;</p>\n<p>堆内存中还要细分为三个区域:</p>\n<ul>\n<li>新生区(伊甸园区) Young/New</li>\n<li>老年区 old</li>\n<li>永久区 Perm</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501174842.png\" alt=\"img\"></p>\n<p>GC 垃圾回收,主要是在伊甸园区和养老区~</p>\n<p>假设内存满了,OOM,堆内存不够! java.lang.OutOfMemoryError:Java heap space</p>\n<p>永久存储区里存放的都是 Java 自带的 例如 lang 包中的类 如果不存在这些，Java 就跑不起来了</p>\n<p>在 JDK8 以后，永久存储区改了个名字(元空间)</p>\n<p><a href=\"https://www.cnblogs.com/duanxz/p/3726574.html\">参考链接</a></p>\n<h2 id=\"新生区、老年区\"><a href=\"#新生区、老年区\" class=\"headerlink\" title=\"新生区、老年区\"></a>新生区、老年区</h2><ul>\n<li>对象：诞生和成长的地方，甚至死亡;</li>\n<li>伊甸园，所有的对象都是在伊甸园区 new 出来的!</li>\n<li>幸存者区(0,1)</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501175400.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>伊甸园满了就触发轻 GC，经过轻 GC 存活下来的就到了幸存者区，幸存者区满之后意味着新生区也满了，则触发重 GC，经过重 GC 之后存活下来的就到了养老区。</strong></p>\n<p>真理:经过研究，99%的对象都是临时对象!|</p>\n<p><a href=\"https://www.cnblogs.com/duanxz/p/3726574.html\">参考链接</a></p>\n<h2 id=\"永久区\"><a href=\"#永久区\" class=\"headerlink\" title=\"永久区\"></a>永久区</h2><p>这个区域常驻内存的。用来存放 JDK 自身携带的 Class 对象。Interface 元数据，存储的是 Java 运行时的一些环境~ 这个区域不存在垃圾回收，关闭虚拟机就会释放内存</p>\n<ul>\n<li>jdk1.6 之前：永久代,常量池是在方法区;</li>\n<li>jdk1.7：永久代,但是慢慢的退化了，去永久代，常量池在堆中</li>\n<li>jdk1.8 之后：无永久代,常量池在元空间</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501180058.png\" alt=\"在这里插入图片描述\"></p>\n<p>元空间：逻辑上存在，物理上不存在 (因为存储在本地磁盘内) 所以最后并不算在 JVM 虚拟机内存中</p>\n<h2 id=\"堆内存调优\"><a href=\"#堆内存调优\" class=\"headerlink\" title=\"堆内存调优\"></a>堆内存调优</h2><p>测试代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        s += <span class=\"string\">&quot;11111111111111111111111111111111111111111111111111111&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200715152713345.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501190206.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>在一个项目中，突然出现了 OOM 故障,那么该如何排除 研究为什么出错~</strong></p>\n<ul>\n<li>能够看到代码第几行出错:内存快照分析工具，MAT, Jprofiler</li>\n<li>Debug, 一行行分析代码!</li>\n</ul>\n<p><strong>MAT, Jprofiler 作用</strong></p>\n<ul>\n<li>分析 Dump 内存文件,快速定位内存泄露;</li>\n<li>获得堆中的数据</li>\n<li>获得大的对象~</li>\n</ul>\n<p><strong>Jprofile 使用</strong></p>\n<ol>\n<li>在 idea 中下载 jprofile 插件</li>\n<li>联网下载 jprofile 客户端</li>\n<li>在 idea 中 VM 参数中写参数 -Xms1m -Xmx8m -XX: +HeapDumpOnOutOfMemoryError</li>\n<li>运行程序后在 jprofile 客户端中打开找到错误 告诉哪个位置报错</li>\n</ol>\n<p><strong>命令参数详解</strong></p>\n<ul>\n<li>-Xms 设置初始化内存分配大小/164</li>\n<li>-Xmx 设置最大分配内存，默以 1/4</li>\n<li>-XX: +PrintGCDetails // 打印 GC 垃圾回收信息</li>\n<li>-XX: +HeapDumpOnOutOfMemoryError //oom <strong>DUMP</strong></li>\n</ul>\n<h2 id=\"GC\"><a href=\"#GC\" class=\"headerlink\" title=\"GC\"></a>GC</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501191953.png\" alt=\"在这里插入图片描述\"></p>\n<p>JVM 在进行 GC 时，并不是对这三个区域统一回收。 大部分时候，回收都是新生代~</p>\n<ul>\n<li>新生代</li>\n<li><strong>幸存区(form，to)</strong></li>\n<li>老年区</li>\n</ul>\n<p>GC 两种类:轻 GC (普通的 GC)， 重 GC (全局 GC)</p>\n<p>GC 常见面试题目:</p>\n<ul>\n<li><p><strong>JVM 的内存模型和分区~详细到每个区放什么?</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210501192059.png\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p><strong>堆里面的分区有哪些?</strong></p>\n<p>Eden, form, to, 老年区,说说他们的特点!</p>\n</li>\n<li><p><strong>GC 的算法有哪些?</strong></p>\n<p>标记清除法，标记整理,复制算法，引用计数器</p>\n</li>\n<li><p><strong>轻 GC 和重 GC 分别在什么时候发生?</strong></p>\n</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/qianguyihao/p/4744233.html\">参考链接</a></p>\n","categories":["后端开发"],"tags":["技巧","笔记"]},{"title":"ElasticSearch 的概述和使用","url":"/2021/05/04/e33c148b.html","content":"<h2 id=\"ElasticSearch-概述\"><a href=\"#ElasticSearch-概述\" class=\"headerlink\" title=\"ElasticSearch 概述\"></a>ElasticSearch 概述</h2><p>Elaticsearch，简称为 es， es 是一个开源的<strong>高扩展</strong>的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储、检索数据</strong>；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别（大数据时代）的数据。es 也使用 Java 开发并使用 Lucene 作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong>来隐藏 Lucene 的复杂性，从而让全文搜索变得简单。</p>\n<p>据国际权威的数据库产品评测机构 DB Engines 的统计，在 2016 年 1 月，ElasticSearch 已超过 Solr 等，<strong>成为排名第一的搜索引擎类应用。</strong></p>\n<h2 id=\"ES-和-solr-的差别\"><a href=\"#ES-和-solr-的差别\" class=\"headerlink\" title=\"ES 和 solr 的差别\"></a>ES 和 solr 的差别</h2><h3 id=\"Elasticsearch-简介\"><a href=\"#Elasticsearch-简介\" class=\"headerlink\" title=\"Elasticsearch 简介\"></a>Elasticsearch 简介</h3><p>Elasticsearch 是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。</p>\n<p>它用于<strong>全文搜索、结构化搜索、分析</strong>以及将这三者混合使用：</p>\n<p>维基百科使用 Elasticsearch 提供全文搜索并高亮关键字，以及输入实时搜索(search-asyou-type)和搜索纠错(did-you-mean)等搜索建议功能。</p>\n<p>英国卫报使用 Elasticsearch 结合用户日志和社交网络数据提供给他们的编辑以实时的反馈，以便及时了解公众对新发表的文章的回应。</p>\n<p>StackOverflow 结合全文搜索与地理位置查询，以及 more-like-this 功能来找到相关的问题和答案。</p>\n<p>Github 使用 Elasticsearch 检索 1300 亿行的代码。</p>\n<p>但是 Elasticsearch 不仅用于大型企业，它还让像 DataDog 以及 Klout 这样的创业公司将最初的想法变成可扩展的解决方案。</p>\n<p>Elasticsearch 可以在你的笔记本上运行，也可以在数以百计的服务器上处理 PB 级别的数据 。</p>\n<p>Elasticsearch 是一个基于 Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene 可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</p>\n<p>但是，Lucene 只是一个库。想要使用它，你必须使用 Java 来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene 非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p>\n<p>Elasticsearch 也使用 Java 开发并使用 Lucene 作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong>来隐藏 Lucene 的复杂性，从而让全文搜索变得简单。</p>\n<h3 id=\"Solr-简介\"><a href=\"#Solr-简介\" class=\"headerlink\" title=\"Solr 简介\"></a>Solr 简介</h3><p>Solr 是 Apache 下的一个顶级开源项目，采用 Java 开发，它是基于 Lucene 的全文搜索服务器。Solr 提供了比 Lucene 更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化</p>\n<p>Solr 可以独立运行，运行在 Jetty、Tomcat 等这些 Servlet 容器中，Solr 索引的实现方法很简单，<strong>用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr 根据 xml 文档添加、删除、更新索引</strong>。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回 Xml、json 等格式的查询结果进行解析，组织页面布局。Solr 不提供构建 UI 的功能，Solr 提供了一个管理界面，通过管理界面可以查询 Solr 的配置和运行情况。</p>\n<p>solr 是基于 lucene 开发企业级搜索服务器，实际上就是封装了 lucene。</p>\n<p>Solr 是一个独立的企业级搜索应用服务器，它对外提供类似于==Web-service 的 API 接口==。用户可以通过 http 请求，向搜索引擎服务器提交一定格式的文件，生成索引；也可以通过提出查找请求，并得到返回结果。</p>\n<h3 id=\"Lucene-简介\"><a href=\"#Lucene-简介\" class=\"headerlink\" title=\"Lucene 简介\"></a>Lucene 简介</h3><p>Lucene 是 apache 软件基金会 4 jakarta 项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。Lucene 的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene 是一套用于全文检索和搜寻的开源程式库，由 Apache 软件基金会支持和提供。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。<strong>在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库</strong>。人们经常提到信息检索程序库，虽然与搜索引擎有关，但不应该将信息检索程序库与搜索引擎相混淆。</p>\n<p>Lucene 是一个全文检索引擎的架构。那什么是全文搜索引擎？</p>\n<p>全文搜索引擎是名副其实的搜索引擎，国外具代表性的有 Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut 等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p>\n<p>从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的 7 家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如 Lycos 引擎。</p>\n<h3 id=\"Elasticsearch-和-Solr-比较\"><a href=\"#Elasticsearch-和-Solr-比较\" class=\"headerlink\" title=\"Elasticsearch 和 Solr 比较\"></a>Elasticsearch 和 Solr 比较</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223554.png\" alt=\"image-20210503223554497\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223607.png\" alt=\"image-20210503223607286\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223616.png\" alt=\"image-20210503223616904\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223627.png\" alt=\"image-20210503223627835\"></p>\n<h3 id=\"ElasticSearch-vs-Solr-总结\"><a href=\"#ElasticSearch-vs-Solr-总结\" class=\"headerlink\" title=\"ElasticSearch vs Solr 总结\"></a>ElasticSearch vs Solr 总结</h3><ol>\n<li>es 基本是开箱即用（解压就可以用 ! ），非常简单。Solr 安装略微复杂一丢丢！</li>\n<li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能。</li>\n<li>Solr 支持更多格式的数据，比如 JSON、XML、CSV，而 Elasticsearch 仅支持 json 文件格式。</li>\n<li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要 kibana 友好支撑~!</li>\n<li>Solr 查询快，但更新索引时慢（即插入删除慢），用于电商等查询多的应用；<ul>\n<li>ES 建立索引快（即查询慢），<strong>即实时性查询快</strong>，用于 facebook 新浪等搜索。</li>\n<li>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用</li>\n</ul>\n</li>\n<li>Solr 比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而 Elasticsearch 相对开发维护者较少，更新太快，学习使用成本较高。（趋势！）</li>\n</ol>\n<h2 id=\"ElasticSearch-安装\"><a href=\"#ElasticSearch-安装\" class=\"headerlink\" title=\"ElasticSearch 安装\"></a>ElasticSearch 安装</h2><p>声明：JDK1.8 ，最低要求！ ElasticSearch 客户端，界面工具！<br>Java 开发，ElasticSearch 的版本和我们之后对应的 Java 的核心 jar 包！ 版本对应！JDK 环境是正常！</p>\n<blockquote>\n<p>下载</p>\n</blockquote>\n<p>官网：<a href=\"https://www.elastic.co/\">https://www.elastic.co/</a></p>\n<p>下载地址：<a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></p>\n<blockquote>\n<p>window 下安装！</p>\n</blockquote>\n<h3 id=\"解压就可以使用了！\"><a href=\"#解压就可以使用了！\" class=\"headerlink\" title=\"解压就可以使用了！\"></a>解压就可以使用了！</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503224753.png\" alt=\"image-20210503224753729\"></p>\n<h3 id=\"熟悉目录！\"><a href=\"#熟悉目录！\" class=\"headerlink\" title=\"熟悉目录！\"></a>熟悉目录！</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin 启动文件</span><br><span class=\"line\">config 配置文件</span><br><span class=\"line\">    log4j2 日志配置文件</span><br><span class=\"line\">    jvm.options java 虚拟机相关的配置</span><br><span class=\"line\">    elasticsearch.yml  elasticsearch 的配置文件！ 默认 <span class=\"number\">9200</span> 端口！ 跨域！</span><br><span class=\"line\">lib   相关jar包</span><br><span class=\"line\">logs   日志！</span><br><span class=\"line\">modules 功能模块</span><br><span class=\"line\">plugins 插件！</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动，访问-9200\"><a href=\"#启动，访问-9200\" class=\"headerlink\" title=\"启动，访问 9200\"></a>启动，访问 9200</h3><p>运行<code>bin/elasticsearch.bat</code>，启动！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503225150.png\" alt=\"image-20210503225150680\"></p>\n<h3 id=\"访问测试！\"><a href=\"#访问测试！\" class=\"headerlink\" title=\"访问测试！\"></a>访问测试！</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503225236.png\" alt=\"image-20210503225235923\"></p>\n<blockquote>\n<p>安装可视化界面插件 es head 的插件</p>\n</blockquote>\n<p>需要 node.js 环境</p>\n<ol>\n<li><p>下载地址：<a href=\"https://links.jianshu.com/go?to=https://github.com/mobz/elasticsearch-head/\">https://github.com/mobz/elasticsearch-head/</a></p>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure></li>\n<li><p>连接测试发现，存在跨域问题：配置 es</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>重启 es 服务器，然后再次连接</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503230107.png\" alt=\"image-20210503230107069\"></p>\n</li>\n</ol>\n<p>初学，就把 es 当做一个数据库！ （可以建立索引（库），文档（库中的数据！））</p>\n<p><strong>这个 head 我们就把它当做数据展示工具！我们后面所有的查询，去 Kibana 进行！</strong></p>\n<blockquote>\n<p>了解 ELK</p>\n</blockquote>\n<p>ELK 是 Elasticsearch、Logstash、Kibana 三大开源框架首字母大写简称。市面上也被成为 ElasticStack。其中 Elasticsearch 是一个基于 Lucene、分布式、通过 Restful 方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用 Elasticsearch 作为底层支持框架，可见 Elasticsearch 提供的搜索能力确实强大,市面上很多时候我们简称 Elasticsearch 为 es。Logstash 是 ELK 的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka 等）。Kibana 可以将 elasticsearch 的数据通过友好<br>的页面展示出来，提供实时分析的功能。</p>\n<p>市面上很多开发只要提到 ELK 能够一致说出它是一个日志分析架构技术栈总称，但实际上 ELK 不仅仅适用于日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503230537.webp\" alt=\"img\"></p>\n<blockquote>\n<p>安装 Kibana</p>\n</blockquote>\n<p>Kibana 是一个针对 Elasticsearch 的开源分析及可视化平台，用来搜索、查看交互存储在 Elasticsearch 索引中的数据。使用 Kibana，可以通过各种图表进行高级数据分析及展示。Kibana 让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示 Elasticsearch 查询动态。设置 Kibana 非常简单。无需编码或者额外的基础架构，几分钟内就可以完成 Kibana 安装并启动 Elasticsearch 索引监测。</p>\n<p>官网：<a href=\"https://www.elastic.co/cn/kibana\">https://www.elastic.co/cn/kibana</a></p>\n<p>Kibana 版本要和 Es 一致！</p>\n<blockquote>\n<p>启动测试！</p>\n</blockquote>\n<p>1、解压后的目录</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233229.png\" alt=\"image-20210503233229181\" style=\"zoom:67%;\" />\n\n<p>2、启动<code>kibana.bat</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233731.png\" alt=\"image-20210503233731775\"></p>\n<p>3、访问测试</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233752.png\" alt=\"image-20210503233752142\"></p>\n<p>4、开发工具！ （Post、curl、head、谷歌浏览器插件测试！）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233835.png\" alt=\"image-20210503233835622\"></p>\n<p>5、汉化！自己修改 kibana 配置即可！ zh-CN！</p>\n<p>kibaba.yml 文件末尾添加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">i18n.locale:</span> <span class=\"string\">&quot;zn-CH&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503234155.png\" alt=\"image-20210503234155128\"></p>\n<h2 id=\"ES-核心概念\"><a href=\"#ES-核心概念\" class=\"headerlink\" title=\"ES 核心概念\"></a>ES 核心概念</h2><ol>\n<li>索引</li>\n<li>字段类型（mapping）</li>\n<li>文档（documents）</li>\n</ol>\n<blockquote>\n<p>概述</p>\n</blockquote>\n<p>在前面的学习中，我们已经掌握了 es 是什么，同时也把 es 的服务已经安装启动，那么 es 是如何去存储数据，数据结构是什么，又是如何实现搜索的呢？我们先来聊聊 ElasticSearch 的相关概念吧！</p>\n<p><strong>集群，节点，索引，类型，文档，分片，映射是什么？</strong></p>\n<blockquote>\n<p>elasticsearch 是面向文档，关系行数据库 和 elasticsearch 客观的对比！一切都是 JSON！</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>Relational DB</strong></th>\n<th align=\"center\"><strong>Elasticsearch</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据库(database)</td>\n<td align=\"center\">索引(indices)</td>\n</tr>\n<tr>\n<td align=\"center\">表(tables)</td>\n<td align=\"center\">types</td>\n</tr>\n<tr>\n<td align=\"center\">行(rows)</td>\n<td align=\"center\">documents</td>\n</tr>\n<tr>\n<td align=\"center\">字段(columns)</td>\n<td align=\"center\">fields</td>\n</tr>\n</tbody></table>\n<p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多 个文档(行)，每个文档中又包含多个字段(列)。</p>\n<p><strong>物理设计：</strong></p>\n<p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移</p>\n<p>一个人就是一个集群！默认的集群名称就是 elaticsearh</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503234530.webp\" alt=\"img\"></p>\n<p><strong>逻辑设计：</strong></p>\n<p>一个索引类型中，包含多个文档，比如说文档 1，文档 2。 当我们索引一篇文档时，可以通过这样的一各顺序找到 它: 索引 ▷ 类型 ▷ 文档 ID ，通过这个组合我们就能索引到某个具体的文档。 注意:ID 不必是整数，实际上它是个字符串。</p>\n<blockquote>\n<p>文档</p>\n</blockquote>\n<p>就是我们的一条条数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">user</span><br><span class=\"line\">1  zhangsan  18</span><br><span class=\"line\">2  ouwen  3</span><br></pre></td></tr></table></figure>\n\n<p>之前说 elasticsearch 是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch 中，文档有几个 重要属性 :</p>\n<ul>\n<li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含 key:value！</li>\n<li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！ {就是一个 json 对象！fastjson 进行自动转换！}</li>\n<li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在 elasticsearch 中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</li>\n</ul>\n<p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符 串也可以是整形。因为 elasticsearch 会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在 elasticsearch 中，类型有时候也称为映射类型。</p>\n<blockquote>\n<p>类型</p>\n</blockquote>\n<p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射，比如 name 映 射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么 elasticsearch 是怎么做的呢?elasticsearch 会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch 就开始猜，如果这个值是 18，那么 elasticsearch 会认为它是整形。 但是 elasticsearch 也可能猜不对， 所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别 整什么幺蛾子。</p>\n<blockquote>\n<p>索引</p>\n</blockquote>\n<p>就是数据库！</p>\n<p>索引是映射类型的容器，elasticsearch 中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。 然后它们被存储到了各个分片上了。 我们来研究下分片是如何工作的。</p>\n<p>物理设计 ：节点和分片 如何工作</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235339.webp\" alt=\"img\"></p>\n<p>一个集群至少有一个节点，而一个节点就是一个 elasricsearch 进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个 5 个分片 ( primary shard ,又称主分片 ) 构成的，每一个主分片会有一个副本 ( replica shard ,又称复制分片 )</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235352.webp\" alt=\"img\"></p>\n<p>上图是一个有 3 个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉 了，数据也不至于丢失。 实际上，一个分片是一个 Lucene 索引，一个包含倒排索引的文件目录，<strong>倒排索引</strong>的结构使 得 elasticsearch 在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。 不过，等等，倒排索引是什 么鬼?</p>\n<blockquote>\n<p>倒排索引</p>\n</blockquote>\n<p>elasticsearch 使用的是一种称为倒排索引的结构，采用 Lucene 倒排索作为底层。这种结构适用于快速的全文搜索， 一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例如，现在有两个文档， 每个文档包含如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Study every day, good good up to forever  <span class=\"comment\"># 文档1包含的内容</span></span><br><span class=\"line\">To forever, study every day, good good up <span class=\"comment\"># 文档2包含的内容</span></span><br></pre></td></tr></table></figure>\n\n<p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词(或称为词条或者 tokens)，然后创建一个包含所有不重 复的词条的排序列表，然后列出每个词条出现在哪个文档 :</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235436.png\" alt=\"image-20210503235436309\" style=\"zoom:50%;\" />\n\n<p>现在，我们试图搜索 to forever，只需要查看包含每个词条的文档 score</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235452.png\" alt=\"image-20210503235452613\" style=\"zoom:50%;\" />\n\n<p>两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在，这两个包含关键字的文档都将返回。</p>\n<p>再来看一个示例，比如我们通过博客标签来搜索博客文章。那么倒排索引列表就是这样的一个结构 :</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235510.webp\" alt=\"img\"></p>\n<p>如果要搜索含有 python 标签的文章，那相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。只需要 查看标签这一栏，然后获取相关的文章 ID 即可。完全过滤掉无关的所有数据，提高效率！</p>\n<p>elasticsearch 的索引和 Lucene 的索引对比</p>\n<p>在 elasticsearch 中， 索引 （库）这个词被频繁使用，这就是术语的使用。 在 elasticsearch 中，索引被分为多个分片，每份 分片是一个 Lucene 的索引。所以一个 elasticsearch 索引是由多个 Lucene 索引组成的。别问为什么，谁让 elasticsearch 使用 Lucene 作为底层呢! 如无特指，说起索引都是指 elasticsearch 的索引。</p>\n<h2 id=\"IK-分词器插件\"><a href=\"#IK-分词器插件\" class=\"headerlink\" title=\"IK 分词器插件\"></a>IK 分词器插件</h2><blockquote>\n<p>什么是 IK 分词器？</p>\n</blockquote>\n<p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，比如 “我爱狂神” 会被分为”我”,”爱”,”狂”,”神”，这显然是不符合要求的，所以我们需要安装中文分词器 ik 来解决这个问题。</p>\n<p>如果要使用中文，建议使用 ik 分词器！</p>\n<p>IK 提供了两个分词算法：ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word 为最细粒度划分！</p>\n<blockquote>\n<p>安装</p>\n</blockquote>\n<p>1、<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\">https://github.com/medcl/elasticsearch-analysis-ik</a></p>\n<p>2、下载完毕后，放入到我们的 elasticsearch 插件即可</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235943.png\" alt=\"image-20210503235943039\"></p>\n<p>3、重启观察 ES，可以看到 ik 分词器被加载了！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000047.png\" alt=\"image-20210504000047514\"></p>\n<p>4、elasticsearch-plugin 可以通过这个命令来查看加载进来的插件</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000351.png\" alt=\"image-20210504000146656\"></p>\n<p>5、使用 kibana 进行测试</p>\n<blockquote>\n<p>查看不同的分词效果</p>\n</blockquote>\n<p>ik_smart 为最少切分</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000943.png\" alt=\"image-20210504000856743\"></p>\n<p>ik_max_word 为最细粒度划分，穷尽词库的可能！字典！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001030.png\" alt=\"image-20210504001030482\"></p>\n<blockquote>\n<p>我们输入 超级喜欢狂神说 Java</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001209.webp\" alt=\"img\"></p>\n<p>发现问题：狂神说被拆开了！</p>\n<p>这种自己需要的词，需要自己加到我们的分词器的字典中！</p>\n<blockquote>\n<p>ik 分词器增加自己的配置！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001411.png\" alt=\"image-20210504001411652\"></p>\n<p>重启 es，看细节！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001513.png\" alt=\"image-20210504001513405\"></p>\n<p>再次测试一下狂神说，看下效果！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001619.png\" alt=\"image-20210504001619667\"></p>\n<h2 id=\"Rest-风格说明\"><a href=\"#Rest-风格说明\" class=\"headerlink\" title=\"Rest 风格说明\"></a>Rest 风格说明</h2><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>\n<p>基本 Rest 命令说明：</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>url 地址</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PUT</td>\n<td>localhost:9200/索引名称/类型名称/文档 id</td>\n<td>创建文档（指定文档 id）</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>localhost:9200/索引名称/类型名称</td>\n<td>创建文档（随机文档 id）</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>localhost:9200/索引名称/类型名称/文档 id/_update</td>\n<td>修改文档</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>localhost:9200/索引名称/类型名称/文档 id</td>\n<td>删除文档</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>localhost:9200/索引名称/类型名称/文档 id</td>\n<td>查询文档通过文档 id</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>localhost:9200/索引名称/类型名称/_search</td>\n<td>查询所有数据</td>\n</tr>\n</tbody></table>\n<h2 id=\"关于索引的基本操作\"><a href=\"#关于索引的基本操作\" class=\"headerlink\" title=\"关于索引的基本操作\"></a>关于索引的基本操作</h2><h3 id=\"创建一个索引！\"><a href=\"#创建一个索引！\" class=\"headerlink\" title=\"创建一个索引！\"></a>创建一个索引！</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /索引名/~类型名~/文档id</span><br><span class=\"line\">&#123;请求体&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002138.png\" alt=\"image-20210504002137968\"></p>\n<p>完成了自动增加了索引！数据也成功的添加了，这就是我说大家在初期可以把它当做数据库学习的原因！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002239.png\" alt=\"image-20210504002239404\"></p>\n<p>那么 name 这个字段用不用指定类型呢。毕竟我们关系型数据库 是需要指定类型的啊 !</p>\n<ul>\n<li>字符串类型<br>text 、 keyword</li>\n<li>数值类型<br>long, integer, short, byte, double, float, half_float, scaled_float</li>\n<li>日期类型<br>date</li>\n<li>布尔值类型<br>boolean</li>\n<li>二进制类型<br>binary</li>\n<li>等等…..</li>\n</ul>\n<h3 id=\"指定字段的类型\"><a href=\"#指定字段的类型\" class=\"headerlink\" title=\"指定字段的类型\"></a>指定字段的类型</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002816.png\" alt=\"image-20210504002816478\"></p>\n<p>获得这个规则！ 可以通过 GET 请求获取具体的信息！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002902.png\" alt=\"image-20210504002902783\"></p>\n<h3 id=\"查看默认的信息\"><a href=\"#查看默认的信息\" class=\"headerlink\" title=\"查看默认的信息\"></a>查看默认的信息</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003207.png\" alt=\"image-20210504003207460\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003219.png\" alt=\"image-20210504003219494\"></p>\n<p>如果自己的文档字段没有指定，那么 es 就会给我们默认配置字段类型！</p>\n<p><strong>扩展</strong>： 通过命令 elasticsearch 索引情况！ 通过<code>GET _cat/</code> 可以获得 es 的当前的很多信息！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003418.png\" alt=\"image-20210504003418475\"></p>\n<blockquote>\n<p>修改 提交还是使用 PUT 即可！ 然后覆盖！最新办法！</p>\n</blockquote>\n<p>曾经！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003608.png\" alt=\"image-20210504003608862\"></p>\n<p>现在的方法！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003757.png\" alt=\"image-20210504003757886\"></p>\n<blockquote>\n<p>删除索引！</p>\n</blockquote>\n<p>通过 DELETE 命令实现删除、 根据你的请求来判断是删除索引还是删除文档记录！</p>\n<p>使用 RESTFUL 风格是我们 ES 推荐大家使用的！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003924.png\" alt=\"image-20210504003924263\"></p>\n<h2 id=\"关于文档的基本操作（重点）\"><a href=\"#关于文档的基本操作（重点）\" class=\"headerlink\" title=\"关于文档的基本操作（重点）\"></a>关于文档的基本操作（重点）</h2><blockquote>\n<p>基本操作</p>\n</blockquote>\n<h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /ouwen/user/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;小红&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">22</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我是一个美女&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;睡觉&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;靓女&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;吃饭&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004712.png\" alt=\"image-20210504004712396\"></p>\n<h3 id=\"获取数据-GET\"><a href=\"#获取数据-GET\" class=\"headerlink\" title=\"获取数据 GET\"></a>获取数据 GET</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004741.png\" alt=\"image-20210504004741798\"></p>\n<h3 id=\"更新数据-PUT\"><a href=\"#更新数据-PUT\" class=\"headerlink\" title=\"更新数据 PUT\"></a>更新数据 PUT</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004901.png\" alt=\"image-20210504004901746\"></p>\n<h3 id=\"Post-update-推荐使用这种更新方式！\"><a href=\"#Post-update-推荐使用这种更新方式！\" class=\"headerlink\" title=\"Post _update , 推荐使用这种更新方式！\"></a>Post _update , 推荐使用这种更新方式！</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005345.png\"></p>\n<h3 id=\"简单地搜索！\"><a href=\"#简单地搜索！\" class=\"headerlink\" title=\"简单地搜索！\"></a>简单地搜索！</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET ouwen<span class=\"regexp\">/user/</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>简答的条件查询，可以根据默认的映射规则，产生基本的查询！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005803.png\" alt=\"image-20210504005803020\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005944.png\" alt=\"image-20210504005944771\"></p>\n<h3 id=\"复杂操作搜索-select-排序，分页，高亮，模糊查询，精准查询！\"><a href=\"#复杂操作搜索-select-排序，分页，高亮，模糊查询，精准查询！\" class=\"headerlink\" title=\"复杂操作搜索 select ( 排序，分页，高亮，模糊查询，精准查询！)\"></a>复杂操作搜索 select ( 排序，分页，高亮，模糊查询，精准查询！)</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010155.png\" alt=\"image-20210504010146616\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010602.png\" alt=\"image-20210504010602133\"></p>\n<p>输出结果，不想要那么多！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010722.png\" alt=\"image-20210504010722580\"> 我们之后使用 Java 操作 es ，所有的方法和对象就是这里面的 key！</p>\n<blockquote>\n<p>排序！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011018.png\" alt=\"image-20210504011018343\"></p>\n<blockquote>\n<p>分页查询！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011149.png\" alt=\"image-20210504011149220\"></p>\n<p>数据下标还是从 0 开始的，和学的所有数据结构是一样的！</p>\n<p><code>/search/&#123;current&#125;/&#123;pagesize&#125;</code></p>\n<blockquote>\n<p>布尔值查询</p>\n</blockquote>\n<p><strong>must （and）</strong>，所有的条件都要符合 where id = 1 and name = xxx</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011607.png\" alt=\"image-20210504011607517\"></p>\n<p><strong>should（or）</strong>，所有的条件都要符合 where id = 1 or name = xxx</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011736.png\" alt=\"image-20210504011736768\"></p>\n<p><strong>must_not （not）</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011831.png\" alt=\"image-20210504011831232\"></p>\n<p><strong>过滤器 filter</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012021.png\" alt=\"image-20210504012021112\"></p>\n<ul>\n<li>gt 大于</li>\n<li>gte 大于等于</li>\n<li>lt 小于</li>\n<li>lte 小于等于！</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012126.png\" alt=\"image-20210504012126745\"></p>\n<blockquote>\n<p>匹配多个条件！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012405.png\" alt=\"image-20210504012405631\"></p>\n<blockquote>\n<p>精确查询！</p>\n</blockquote>\n<p>term 查询是直接通过倒排索引指定的词条进程精确查找的！</p>\n<p><strong>关于分词：</strong></p>\n<ul>\n<li>term ，直接查询精确的</li>\n<li>match，会使用分词器解析！（先分析文档，然后在通过分析的文档进行查询！）</li>\n</ul>\n<p><strong>两个类型 <code>text</code> <code>keyword</code></strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012855.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012909.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504013020.webp\" alt=\"img\"></p>\n<blockquote>\n<p>多个值匹配精确查询</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014024.webp\" alt=\"img\"></p>\n<blockquote>\n<p>高亮查询！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014306.png\" alt=\"image-20210504014305845\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014541.png\" alt=\"image-20210504014541346\"></p>\n<h2 id=\"集成-SpringBoot\"><a href=\"#集成-SpringBoot\" class=\"headerlink\" title=\"集成 SpringBoot\"></a>集成 SpringBoot</h2><blockquote>\n<p>找官方文档！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131313.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131324.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131333.webp\" alt=\"img\"></p>\n<p>1、找到原生的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>7.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、找对象</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131416.webp\" alt=\"img\"></p>\n<p>3、分析这个类中的方法即可！</p>\n<blockquote>\n<p>配置基本的项目</p>\n</blockquote>\n<p>源码中提供对象！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504133033.webp\" alt=\"img\"></p>\n<p>虽然这里导入 3 个类，静态内部类，核心类就一个！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Elasticsearch rest client infrastructure configurations.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> Brian Clozel</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> Stephane Nicoll</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RestClientConfigurations</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestClientBuilderConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// RestClientBuilder</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestClientBuilder <span class=\"title function_\">elasticsearchRestClientBuilder</span><span class=\"params\">(RestClientProperties</span></span><br><span class=\"line\"><span class=\"params\">                                                         properties,</span></span><br><span class=\"line\"><span class=\"params\">                                                         ObjectProvider&lt;RestClientBuilderCustomizer&gt; builderCustomizers)</span> &#123;</span><br><span class=\"line\">            HttpHost[] hosts =</span><br><span class=\"line\">                properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::<span class=\"keyword\">new</span>);</span><br><span class=\"line\">            <span class=\"type\">RestClientBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> RestClient.builder(hosts);</span><br><span class=\"line\">            <span class=\"type\">PropertyMapper</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> PropertyMapper.get();</span><br><span class=\"line\">            map.from(properties::getUsername).whenHasText().to((username) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"type\">CredentialsProvider</span> <span class=\"variable\">credentialsProvider</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                    <span class=\"title class_\">BasicCredentialsProvider</span>();</span><br><span class=\"line\">                <span class=\"type\">Credentials</span> <span class=\"variable\">credentials</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                    <span class=\"title class_\">UsernamePasswordCredentials</span>(properties.getUsername(),</span><br><span class=\"line\">                                                properties.getPassword());</span><br><span class=\"line\">                credentialsProvider.setCredentials(AuthScope.ANY, credentials);</span><br><span class=\"line\">                builder.setHttpClientConfigCallback(</span><br><span class=\"line\">                    (httpClientBuilder) -&gt;</span><br><span class=\"line\">                    httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            builder.setRequestConfigCallback((requestConfigBuilder) -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                map.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMill</span><br><span class=\"line\">                                                                               is)</span><br><span class=\"line\">                    .to(requestConfigBuilder::setConnectTimeout);</span><br><span class=\"line\"></span><br><span class=\"line\">                map.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis)</span><br><span class=\"line\">                    .to(requestConfigBuilder::setSocketTimeout);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> requestConfigBuilder;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            builderCustomizers.orderedStream().forEach((customizer) -&gt;</span><br><span class=\"line\">                                                       customizer.customize(builder));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnClass(RestHighLevelClient.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestHighLevelClientConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// RestHighLevelClient 高级客户端，也是我们这里要讲，后面项目会用到的客户端</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestHighLevelClient <span class=\"title function_\">elasticsearchRestHighLevelClient</span><span class=\"params\">(RestClientBuilder</span></span><br><span class=\"line\"><span class=\"params\">                                                             restClientBuilder)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestHighLevelClient</span>(restClientBuilder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestClient <span class=\"title function_\">elasticsearchRestClient</span><span class=\"params\">(RestClientBuilder builder,</span></span><br><span class=\"line\"><span class=\"params\">                                           ObjectProvider&lt;RestHighLevelClient&gt; restHighLevelClient)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">RestHighLevelClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> restHighLevelClient.getIfUnique();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (client != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> client.getLowLevelClient();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestClientFallbackConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// RestClient 普通的客户端！</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestClient <span class=\"title function_\">elasticsearchRestClient</span><span class=\"params\">(RestClientBuilder builder)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>具体的 API 测试！</p>\n</blockquote>\n<ol>\n<li>创建索引</li>\n<li>判断索引是否存在</li>\n<li>删除索引</li>\n<li>创建文档</li>\n<li>crud 文档！</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONString;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.index.query.TermQueryBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.search.SearchHit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.search.fetch.subphase.FetchSourceContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JunjieEsApiApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(&quot;restHighLevelClient&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestHighLevelClient client;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试索引的创建 Request</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testCreateIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、创建索引对象</span></span><br><span class=\"line\">        <span class=\"type\">CreateIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CreateIndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2、客户端执行请求 IndicesClient 请求后获得响应结果</span></span><br><span class=\"line\">        <span class=\"type\">CreateIndexResponse</span> <span class=\"variable\">createIndexResponse</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(createIndexResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试获取索引 判断其是否存在</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testExistIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">GetIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetIndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">exists</span> <span class=\"operator\">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(exists);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试删除索引</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">DeleteIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteIndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AcknowledgedResponse</span> <span class=\"variable\">delete</span> <span class=\"operator\">=</span> client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(delete.isAcknowledged());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试添加文档</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testAddDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;欧文&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建请求</span></span><br><span class=\"line\">        <span class=\"type\">IndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//规则 PUT /ouwen_index/_doc/1</span></span><br><span class=\"line\">        request.id(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        request.timeout(TimeValue.timeValueSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将我们的数据放入请求 json</span></span><br><span class=\"line\">        request.source(JSONUtil.toJsonStr(user), XContentType.JSON);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端发送请求</span></span><br><span class=\"line\">        <span class=\"type\">IndexResponse</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> client.index(request, RequestOptions.DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(index.toString());</span><br><span class=\"line\">        System.out.println(index.status()); <span class=\"comment\">//对应命令返回的状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取文档，判断是否存在</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testIsExists</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">GetRequest</span> <span class=\"variable\">getRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//不获取返回的 _source 的上下文 效率更高</span></span><br><span class=\"line\">        getRequest.fetchSourceContext(<span class=\"keyword\">new</span> <span class=\"title class_\">FetchSourceContext</span>(<span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">exists</span> <span class=\"operator\">=</span> client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(exists);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获得文档的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testGetDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">GetRequest</span> <span class=\"variable\">getRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">GetResponse</span> <span class=\"variable\">getResponse</span> <span class=\"operator\">=</span> client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        <span class=\"comment\">//打印文档的内容</span></span><br><span class=\"line\">        System.out.println(getResponse.getSourceAsString());</span><br><span class=\"line\">        <span class=\"comment\">//返回的全部内容跟命令是一样的</span></span><br><span class=\"line\">        System.out.println(getResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新文档的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testUpdateDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">UpdateRequest</span> <span class=\"variable\">updateRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        updateRequest.timeout(<span class=\"string\">&quot;1s&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen666&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        updateRequest.doc(JSONUtil.toJsonStr(user), XContentType.JSON);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">UpdateResponse</span> <span class=\"variable\">updateResponse</span> <span class=\"operator\">=</span> client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(updateResponse.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除文档的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">DeleteRequest</span> <span class=\"variable\">deleteRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        deleteRequest.timeout(<span class=\"string\">&quot;1s&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">DeleteResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(response.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//批量添加数据</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testBulkRequest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">BulkRequest</span> <span class=\"variable\">bulkRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BulkRequest</span>();</span><br><span class=\"line\">        bulkRequest.timeout(<span class=\"string\">&quot;60s&quot;</span>);</span><br><span class=\"line\">        List&lt;User&gt; users = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;User&gt;();</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen1&quot;</span>, <span class=\"number\">63</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen2&quot;</span>, <span class=\"number\">53</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen3&quot;</span>, <span class=\"number\">43</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;junjie1&quot;</span>, <span class=\"number\">33</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;junjie2&quot;</span>, <span class=\"number\">23</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;junjie3&quot;</span>, <span class=\"number\">13</span>));</span><br><span class=\"line\">        <span class=\"comment\">//处理批量请求</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class=\"line\">            bulkRequest.add(<span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>)</span><br><span class=\"line\">                    .id(<span class=\"string\">&quot;&quot;</span> + (i + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .source(JSONUtil.toJsonStr(users.get(i)), XContentType.JSON));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">BulkResponse</span> <span class=\"variable\">responses</span> <span class=\"operator\">=</span> client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(responses.hasFailures()); <span class=\"comment\">//是否失败 false代表成功</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询</span></span><br><span class=\"line\">    <span class=\"comment\">// SearchRequest 搜索请求</span></span><br><span class=\"line\">    <span class=\"comment\">// SearchSourceBuilder 条件构造</span></span><br><span class=\"line\">    <span class=\"comment\">// HighlightBuilder 构建高亮</span></span><br><span class=\"line\">    <span class=\"comment\">// TermQueryBuilder 精确查询</span></span><br><span class=\"line\">    <span class=\"comment\">// MatchAllQueryBuilder</span></span><br><span class=\"line\">    <span class=\"comment\">// xxx QueryBuilder 对应我们刚才看到的命令！</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testSearch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">SearchRequest</span> <span class=\"variable\">searchRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//构建搜索条件</span></span><br><span class=\"line\">        <span class=\"type\">SearchSourceBuilder</span> <span class=\"variable\">sourceBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchSourceBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询条件，我们可以使用 QueryBuilders 工具来实现</span></span><br><span class=\"line\">        <span class=\"comment\">// QueryBuilders.termQuery 精确</span></span><br><span class=\"line\">        <span class=\"comment\">// QueryBuilders.matchAllQuery() 匹配所有</span></span><br><span class=\"line\">        <span class=\"type\">TermQueryBuilder</span> <span class=\"variable\">termQuery</span> <span class=\"operator\">=</span> QueryBuilders.termQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;ouwen1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        sourceBuilder.query(termQuery);</span><br><span class=\"line\">        sourceBuilder.timeout(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeValue</span>(<span class=\"number\">60</span>, TimeUnit.SECONDS));</span><br><span class=\"line\">        searchRequest.source(sourceBuilder);</span><br><span class=\"line\">        <span class=\"type\">SearchResponse</span> <span class=\"variable\">search</span> <span class=\"operator\">=</span> client.search(searchRequest,RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(JSONUtil.toJsonStr(search.getHits()));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==========================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SearchHit hit : search.getHits()) &#123;</span><br><span class=\"line\">            System.out.println(hit.getSourceAsMap());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["后端开发"],"tags":["笔记","ES"]},{"title":"RabbitMQ 消息队列","url":"/2021/04/19/eb9166f8.html","content":"<h2 id=\"什么是-MQ\"><a href=\"#什么是-MQ\" class=\"headerlink\" title=\"什么是 MQ\"></a>什么是 MQ</h2><p>消息队列（Message Queue，简称 MQ），从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是 message 而已。其主要用途：不同进程 Process/线程 Thread 之间通信。</p>\n<p><strong>为什么会产生消息队列？有几个原因：</strong></p>\n<ul>\n<li>不同进程（process）之间传递消息时，两个进程之间耦合程度过高，改动一个进程，引发必须修改另一个进程，为了隔离这两个进程，在两进程间抽离出一层（一个模块），所有两进程之间传递的消息，都必须通过消息队列来传递，单独修改某一个进程，不会影响另一个；</li>\n<li>不同进程（process）之间传递消息时，为了实现标准化，将消息的格式规范化了，并且，某一个进程接受的消息太多，一下子无法处理完，并且也有先后顺序，必须对收到的消息进行排队，因此诞生了事实上的消息队列；</li>\n</ul>\n<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211212181732.png\"></p>\n<p><strong>RabbitMQ 简介</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414173139.png\" alt=\"img\"  />\n\n<p><strong>开发语言：Erlang - 面向并发的编程语言</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414173220.png\" alt=\"img\"  />\n\n<p><strong>AMQP 协议</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414230450.png\" alt=\"img\"></p>\n<p><strong>学习五种队列</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414230702.png\" alt=\"img\"></p>\n<h2 id=\"RabbitMQ-的第一个程序\"><a href=\"#RabbitMQ-的第一个程序\" class=\"headerlink\" title=\"RabbitMQ 的第一个程序\"></a>RabbitMQ 的第一个程序</h2><h3 id=\"第一种模型（直连）\"><a href=\"#第一种模型（直连）\" class=\"headerlink\" title=\"第一种模型（直连）\"></a>第一种模型（直连）</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414235259.png\" alt=\"image-20210414235259013\" style=\"zoom:50%;\" />\n\n<ul>\n<li>P：生产者：也就是要发送消息的程序</li>\n<li>C：消费者：消息的接受者，会一直等待消息的到来</li>\n<li>queue：消息队列，图中红色部分，类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息</li>\n</ul>\n<h4 id=\"建立一个-maven-项目\"><a href=\"#建立一个-maven-项目\" class=\"headerlink\" title=\"建立一个 maven 项目\"></a>建立一个 maven 项目</h4><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414231107.png\" alt=\"image-20210414231107272\" style=\"zoom:50%;\" />\n\n<h4 id=\"导入-RabbitMQ-的客户端依赖\"><a href=\"#导入-RabbitMQ-的客户端依赖\" class=\"headerlink\" title=\"导入 RabbitMQ 的客户端依赖\"></a>导入 RabbitMQ 的客户端依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 引入rabbitmq的相关依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.rabbitmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>amqp-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写生产者\"><a href=\"#编写生产者\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSendMessage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, TimeoutException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建连接mq的连接工厂对象</span></span><br><span class=\"line\">    <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">    <span class=\"comment\">//设置连接rabbitmq主机</span></span><br><span class=\"line\">    connectionFactory.setHost(<span class=\"string\">&quot;192.168.90.140&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置端口号</span></span><br><span class=\"line\">    connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置连接哪个虚拟主机</span></span><br><span class=\"line\">    connectionFactory.setVirtualHost(<span class=\"string\">&quot;/ems&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置访问虚拟主机的用户名和密码</span></span><br><span class=\"line\">    connectionFactory.setUsername(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">    connectionFactory.setPassword(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\">    <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取连接中的通道对象</span></span><br><span class=\"line\">    <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通道绑定对应的消息队列</span></span><br><span class=\"line\">    <span class=\"comment\">//参数一：队列名称 如果不存在自动创建</span></span><br><span class=\"line\">    <span class=\"comment\">//参数二：用来定义队列特性是否要持久化，true持久化队列 false不持久化</span></span><br><span class=\"line\">    <span class=\"comment\">//参数三：exclusive 是否独占队列 ture独占队列 false 不独占队列</span></span><br><span class=\"line\">    <span class=\"comment\">//参数四：autoDelete 是否在消费完成后自动删除队列 true 自动删除 false 不自动删除</span></span><br><span class=\"line\">    <span class=\"comment\">//参数五：额外参数</span></span><br><span class=\"line\">    channel.queueDeclare(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发布消息</span></span><br><span class=\"line\">    <span class=\"comment\">//参数一：交换机名称 参数二：队列名称 参数三：传递消息额外名称 参数四：消息的具体内容</span></span><br><span class=\"line\">    channel.basicPublish(<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;hello&quot;</span>,<span class=\"literal\">null</span>,<span class=\"string\">&quot;hello rabbitmq&quot;</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">    channel.close();</span><br><span class=\"line\">    connection.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者\"><a href=\"#编写消费者\" class=\"headerlink\" title=\"编写消费者\"></a>编写消费者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建连接工厂</span></span><br><span class=\"line\"><span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">connectionFactory.setHost(<span class=\"string\">&quot;192.168.90.140&quot;</span>);</span><br><span class=\"line\">connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">connectionFactory.setVirtualHost(<span class=\"string\">&quot;/ems&quot;</span>);</span><br><span class=\"line\">connectionFactory.setUsername(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">connectionFactory.setPassword(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建通道</span></span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道绑定对象</span></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\"><span class=\"comment\">//参数1；消费哪个队列的消息，队列名称</span></span><br><span class=\"line\"><span class=\"comment\">//参数2：开始消息的自动确认机制</span></span><br><span class=\"line\"><span class=\"comment\">//参数3：消费时的回调接口</span></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"comment\">//最后一个参数：消息队列中取出的消息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;new String(body)==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：需要在 rabbitmq 管理页面中添加用户和虚拟主机</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414231808.png\" alt=\"image-20210414231807927\"></p>\n<h4 id=\"编写连接工具类\"><a href=\"#编写连接工具类\" class=\"headerlink\" title=\"编写连接工具类\"></a>编写连接工具类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConnectionFactory connectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//重量级资源 类加载的时候执行，只执行一次</span></span><br><span class=\"line\">        connectionFactory = <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        connectionFactory.setHost(<span class=\"string\">&quot;192.168.159.140&quot;</span>);</span><br><span class=\"line\">        connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        connectionFactory.setVirtualHost(<span class=\"string\">&quot;/ems&quot;</span>);</span><br><span class=\"line\">        connectionFactory.setUsername(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">        connectionFactory.setPassword(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义提供连接的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, TimeoutException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义关闭通道和关闭连接工具方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">closeConnectionAndChanel</span><span class=\"params\">(Channel channel, Connection connection)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                channel.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种模型（work-queue）\"><a href=\"#第二种模型（work-queue）\" class=\"headerlink\" title=\"第二种模型（work queue）\"></a>第二种模型（work queue）</h3><p><code>Work queue</code>，也被称为（<code>Task queue</code>），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理，此时就可以使用 work 模型，让多个消费者绑定到一个队列，共同消费队列中的消息，队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415000422.png\" alt=\"image-20210415000422705\"></p>\n<p>角色：</p>\n<ul>\n<li>P：生产者：任务的发布者</li>\n<li>C1：消费者：领取任务并且完成任务，假设完成速度较慢</li>\n<li>C2：消费者 2：领取任务并完成任务，假设完成速度快</li>\n</ul>\n<h4 id=\"编写生产者-1\"><a href=\"#编写生产者-1\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"comment\">//获取连接通道</span></span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过通道声明队列</span></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;work&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//生产消息</span></span><br><span class=\"line\">    channel.basicPublish(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;work&quot;</span>, <span class=\"literal\">null</span>, (i + <span class=\"string\">&quot;hello work queue&quot;</span>).getBytes());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1\"><a href=\"#编写消费者-1\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者--1：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2\"><a href=\"#编写消费者-2\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者--2：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h4><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415190334.png\" alt=\"image-20210415190327510\"  />\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415190348.png\" alt=\"image-20210415190348026\"  />\n\n<p>==<strong>总结：默认情况下，RabbitMQ 将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式成为循环</strong>==</p>\n<h3 id=\"消息自动确认机制\"><a href=\"#消息自动确认机制\" class=\"headerlink\" title=\"消息自动确认机制\"></a>消息自动确认机制</h3><blockquote>\n<p>完成一项任务可能只需要几秒钟。您可能想知道，如果其中一个消费者启动了一个很长的任务，并且只完成了部分任务而死亡，会发生什么情况。在我们当前的代码中，一旦 RabbitMQ 向消费者发送消息，它就会立即标记该消息为删除。在本例中，如果您杀死一个 worker，我们将丢失它正在处理的消息。我们还将丢失所有已发送到这个特定工作器但尚未处理的消息。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//每一次只能消费一个消息</span></span><br><span class=\"line\">channel.basicQos(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//参数1：队列名称 参数2：消息自动确认 true 消费者自动向rabbitmq确认消息消费 false 不会自动确认</span></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">false</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者--1：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">        <span class=\"comment\">// 参数1：确认队列中哪个具体消息 参数2：是否开启多个消息同时确认</span></span><br><span class=\"line\">        channel.basicAck(envelope.getDeliveryTag(),<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置通道一次只能消费一个消息</li>\n<li>关闭消息的自动确认，开启手动确认消息</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415193731.png\" alt=\"image-20210415193731262\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415193743.png\" alt=\"image-20210415193743820\"></p>\n<h3 id=\"第三种模型（fanout）\"><a href=\"#第三种模型（fanout）\" class=\"headerlink\" title=\"第三种模型（fanout）\"></a>第三种模型（fanout）</h3><p>==<code>fanout</code> 扇出 也称为广播==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415194629.png\" alt=\"image-20210415194629428\"></p>\n<p>在广播模式下，消息发送流程是这样的：</p>\n<ul>\n<li>可以有多个消费者</li>\n<li>每个<strong>消费者有自己的 queue</strong>（队列）</li>\n<li>每个<strong>队列都要绑定到 Exchange</strong>（交换机）</li>\n<li><strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定</li>\n<li>交换机把消息发送给绑定过的所有队列</li>\n<li>队列的消费者都能拿到消息，实现一条消息被多个消费者消费</li>\n</ul>\n<h4 id=\"编写生产者-2\"><a href=\"#编写生产者-2\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将通道声明指定交换机 参数1：交换机名称 参数2：交换机类型 fanout 广播类型</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\">channel.basicPublish(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&quot;fanout type message&quot;</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-1\"><a href=\"#编写消费者-1-1\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道绑定交换机</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定交换机和队列</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-1\"><a href=\"#编写消费者-2-1\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道绑定交换机</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定交换机和队列</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四种模型（Routing）\"><a href=\"#第四种模型（Routing）\" class=\"headerlink\" title=\"第四种模型（Routing）\"></a>第四种模型（Routing）</h3><h4 id=\"Routing-之订阅模型-Direct（直连）\"><a href=\"#Routing-之订阅模型-Direct（直连）\" class=\"headerlink\" title=\"Routing 之订阅模型 -Direct（直连）\"></a>Routing 之订阅模型 -Direct（直连）</h4><p>==在 Fanout 模式中，一条消息，会被所有订阅的队列消息。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到 Direct 类型的 Exchange。==</p>\n<p>在 Direct 模型下：</p>\n<ul>\n<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个 <code>RoutingKey</code>（路由 key）</li>\n<li>消息的发送方在向 Exchange 发送消息是，也必须指定消息的 <code>RoutingKey</code></li>\n<li>Exchange 不再把消息交给每一个绑定的队列，而是根据消息的 <code>RoutingKey</code> 进行判断，只有队列的<code>RoutingKey</code> 与消息的 <code>RoutingKey</code> 完全一致，才会接收到消息</li>\n</ul>\n<p>流程：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415201126.png\" alt=\"image-20210415201126889\"></p>\n<p>图解：</p>\n<ul>\n<li>P：生产者，向 Exchange 发送消息，发送消息是，会指定一个 Routing Key</li>\n<li>X：Exchange（交换机），接收生产者消息，然后把消息递交给与 Routing Key 完全匹配的队列</li>\n<li>C1：消费者，其所在队列指定了需要 Routing Key 为 error 的消息</li>\n<li>C2：消费者，其所在队列指定了需要 Routing Key 为 info、 error、warning 的消息</li>\n</ul>\n<h5 id=\"编写生产者-3\"><a href=\"#编写生产者-3\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;logs_direct&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将通道声明指定交换机 参数1：交换机名称 参数2：交换机类型 direct 路由模式</span></span><br><span class=\"line\">channel.exchangeDeclare(exchangeName, <span class=\"string\">&quot;direct&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">routingKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;info&quot;</span>;</span><br><span class=\"line\">channel.basicPublish(exchangeName, routingKey, <span class=\"literal\">null</span>, (<span class=\"string\">&quot;这是direct模型发布对的基于routing key[&quot;</span>+routingKey+<span class=\"string\">&quot;]==&gt;发送的消息&quot;</span>).getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-1-2\"><a href=\"#编写消费者-1-2\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;logs_direct&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基于route key绑定队列和交换机</span></span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取消费的消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-2-2\"><a href=\"#编写消费者-2-2\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;logs_direct&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定交换机和临时队列</span></span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;info&quot;</span>);</span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;warning&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Routing-之订阅模型-Topic\"><a href=\"#Routing-之订阅模型-Topic\" class=\"headerlink\" title=\"Routing 之订阅模型 -Topic\"></a>Routing 之订阅模型 -Topic</h4><p><code>Topic</code> 类型的 <code>Exchange</code> 与 <code>Direct</code> 相比，都可以根据 <code>RoutingKey</code> 把消息路由到不用的队列。只不过 <code>Topic</code> 类型的 <code>Exchange</code> 可以让队列在绑定 <code>RoutingKey</code> 的时候使用通配符！这种模型 <code>RoutingKey</code> 一般都是由一个或多个单词组成，多个单词之间以“.”分割，例如： <code>item.insert</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416092208.png\" alt=\"image-20210416092201943\"></p>\n<h5 id=\"编写生产者-4\"><a href=\"#编写生产者-4\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明交换机以及交换机类型 topic</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;topic&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义路由key</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">routingKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;user.save&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\">channel.basicPublish(<span class=\"string\">&quot;topics&quot;</span>, routingKey, <span class=\"literal\">null</span>, (<span class=\"string\">&quot;这里是topic动态路由模型，routingKey：&quot;</span> + routingKey).getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-1-3\"><a href=\"#编写消费者-1-3\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"><span class=\"comment\">//绑定队列和交换机，动态通配符形式routingKey</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;user.*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1 ==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-2-3\"><a href=\"#编写消费者-2-3\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"><span class=\"comment\">//绑定队列和交换机，动态通配符形式routingKey</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;user.#&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2 ==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h5><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416094708.png\" alt=\"image-20210416094708394\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416094717.png\" alt=\"image-20210416094717636\"></p>\n<h2 id=\"SpringBoot-整合-RabbitMQ\"><a href=\"#SpringBoot-整合-RabbitMQ\" class=\"headerlink\" title=\"SpringBoot 整合 RabbitMQ\"></a>SpringBoot 整合 RabbitMQ</h2><h3 id=\"搭建初始环境\"><a href=\"#搭建初始环境\" class=\"headerlink\" title=\"搭建初始环境\"></a>搭建初始环境</h3><h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入spring-rabbitmq依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置配置文件\"><a href=\"#配置配置文件\" class=\"headerlink\" title=\"配置配置文件\"></a>配置配置文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">application:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-springboot</span></span><br><span class=\"line\">    <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.80</span><span class=\"number\">.140</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">ems</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">ems</span></span><br><span class=\"line\">        <span class=\"attr\">virtual-host:</span> <span class=\"string\">/ems</span></span><br></pre></td></tr></table></figure>\n\n<p>==<code>RabbitTemplate</code> 用来简化操作 使用时候直接在项目中注入即可使用==</p>\n<h3 id=\"HelloWorld-模型\"><a href=\"#HelloWorld-模型\" class=\"headerlink\" title=\"HelloWorld 模型\"></a>HelloWorld 模型</h3><h4 id=\"编写生产者-5\"><a href=\"#编写生产者-5\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//hello world</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1\"><a href=\"#编写消费者-1\" class=\"headerlink\" title=\"编写消费者\"></a>编写消费者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>  <span class=\"comment\">//持久化 不独占 不是自动删除队列</span></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;hello&quot;))</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloConsumer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message==&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Work-模型\"><a href=\"#Work-模型\" class=\"headerlink\" title=\"Work 模型\"></a>Work 模型</h3><h4 id=\"编写生产者-6\"><a href=\"#编写生产者-6\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//work</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWork</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;work&quot;</span>, <span class=\"string\">&quot;work模型&quot;</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2\"><a href=\"#编写消费者-2\" class=\"headerlink\" title=\"编写消费者\"></a>编写消费者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WorkConsumer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//一个消费者</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message1=&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//二个消费者</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message2=&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>==<strong>说明：默认在 Spring AMQP 实现中 Work 这种方式就是公平调度，如果需要实现能者多劳需要额外配置</strong>==</p>\n<h3 id=\"Fanout-广播模型\"><a href=\"#Fanout-广播模型\" class=\"headerlink\" title=\"Fanout 广播模型\"></a>Fanout 广播模型</h3><h4 id=\"编写生产者-7\"><a href=\"#编写生产者-7\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//fanout 广播</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFanout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;Fanout的模型发送的消息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-4\"><a href=\"#编写消费者-1-4\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,//绑定临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;) //绑定的交换机</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1=&quot;</span>+message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-4\"><a href=\"#编写消费者-2-4\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,//绑定临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;) //绑定的交换机</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message2=&quot;</span>+message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Routing-路由模型\"><a href=\"#Routing-路由模型\" class=\"headerlink\" title=\"Routing 路由模型\"></a>Routing 路由模型</h3><h4 id=\"编写生产者-8\"><a href=\"#编写生产者-8\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//routing 路由模式</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRoute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;directs&quot;</span>, <span class=\"string\">&quot;info&quot;</span>, <span class=\"string\">&quot;发送info的key的路由信息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-5\"><a href=\"#编写消费者-1-5\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue, //创建临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;directs&quot;, type = &quot;direct&quot;), //自定义交换机名称和类型</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;info&quot;, &quot;error&quot;, &quot;warn&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-5\"><a href=\"#编写消费者-2-5\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue, //创建临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;directs&quot;, type = &quot;direct&quot;), //自定义交换机名称和类型</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;info&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Topic-动态路由模型\"><a href=\"#Topic-动态路由模型\" class=\"headerlink\" title=\"Topic 动态路由模型\"></a>Topic 动态路由模型</h3><h4 id=\"编写生产者-9\"><a href=\"#编写生产者-9\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//topic 动态路由 订阅模式</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTopic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;user.save&quot;</span>, <span class=\"string\">&quot;user.save 路由消息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-6\"><a href=\"#编写消费者-1-6\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(type = &quot;topic&quot;, value = &quot;topics&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;user.save&quot;, &quot;user.*&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-6\"><a href=\"#编写消费者-2-6\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(type = &quot;topic&quot;, value = &quot;topics&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;user.save&quot;, &quot;user.*&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message2==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MQ-的应用场景\"><a href=\"#MQ-的应用场景\" class=\"headerlink\" title=\"MQ 的应用场景\"></a>MQ 的应用场景</h3><h4 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h4><p>==场景说明：用户注册后，需要发注册邮件和注册短信，传统的做法有两种 1. 串行的方式 2. 并行的方式==</p>\n<ul>\n<li><strong>串行方式：</strong>讲注册信息写入数据库后，发送注册邮件， 再发送注册短信，以上三个任务全部完成后才返回给客户端。这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待没有必要等待的东西。</li>\n<li><strong>并行方式：</strong>将信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回客户端，并行的方式能提高处理的时间。</li>\n<li><strong>消息队列：</strong>假设三个业务点分别使用 50ms，串行方式使用时间 150ms，并行使用时间 100ms。虽然并行已经提高了处理时间，但是，前面说过，邮件和短信不对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功，应该是写入数据库后就返回。引入消息队列后，把发送邮件，短信等不是必须的业务逻辑异步处理。</li>\n</ul>\n<h4 id=\"应用解耦\"><a href=\"#应用解耦\" class=\"headerlink\" title=\"应用解耦\"></a>应用解耦</h4><p>==场景说明：双 11 是购物狂欢节，用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口==</p>\n<p>这样做法有一个缺点：</p>\n<p>当库存系统出现故障时，订单就会失效。订单系统和库存系统高耦合，引入消息队列</p>\n<ul>\n<li><strong>订单系统：</strong>用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功</li>\n<li><strong>库存系统：</strong>订阅下单的消息，获取下单消息，进行库操作。就算库存系统出现故障，消息队列也能保证消息的可靠投递，不会导致消息丢失</li>\n</ul>\n<h4 id=\"流量削锋\"><a href=\"#流量削锋\" class=\"headerlink\" title=\"流量削锋\"></a>流量削锋</h4><p>==场景说明：秒杀活动，一般会因为流量过大，导致应用挂掉，为了解决这个问题，一般在应用前端加入消息队列。==</p>\n<p>作用：</p>\n<ol>\n<li>可以控制活动人数，超过此一定阈值的订单直接丢弃</li>\n<li>可以缓解短时间的高流量压垮应用</li>\n</ol>\n","categories":["中间件"],"tags":["技巧","笔记","RabbitMQ"]},{"title":"Java 多线程与线程同步","url":"/2021/04/17/dcfce7ce.html","content":"<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><h3 id=\"Process-与-Thread（进程与线程）\"><a href=\"#Process-与-Thread（进程与线程）\" class=\"headerlink\" title=\"Process 与 Thread（进程与线程）\"></a>Process 与 Thread（进程与线程）</h3><ul>\n<li>说起进程，就不得不说下<strong>程序</strong>。程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</li>\n<li>而<strong>进程</strong>则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位。</li>\n<li>通常在一个进程中可以包含若干个<strong>线程</strong>，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU调度和执行的单位。</li>\n</ul>\n<h3 id=\"多线程核心概念\"><a href=\"#多线程核心概念\" class=\"headerlink\" title=\"多线程核心概念\"></a>多线程核心概念</h3><ul>\n<li>线程就是独立的执行路径；</li>\n<li>在程序运行时，就是没有自己创建线程，后台也会有多个线程，如主线程、gc线程；</li>\n<li>main()线程称之为主线程，为系统的入口，用于执行整个程序；</li>\n<li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为干预的；</li>\n<li>对同一份资源操作时，会存在资 源抢占问题，需要加入并发控制；</li>\n<li>线程会带来额外的开销，如CPU调度时间，并发控制开销；</li>\n<li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致；</li>\n</ul>\n<h3 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h3><p>共有三种方式：Thread、Runnable、Callable</p>\n<ul>\n<li>Thread.class -&gt; 继承Thread类（重点）</li>\n<li>Runnable接口 -&gt; 实现Runnable接口（重点）</li>\n<li>Callable接口 -&gt; 实现Callable接口（了解）</li>\n</ul>\n<h4 id=\"Thread\"><a href=\"#Thread\" class=\"headerlink\" title=\"Thread\"></a>Thread</h4><ol>\n<li>自定义线程类继承<strong>Thread类</strong></li>\n<li>重写**run()**方法，编写线程执行体</li>\n<li>创建线程对象，调用**start()**方法启动线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程方式一：继承Thread类，重写run()方法，调用start()开启线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：注意，线程开启不一定立即执行，由cpu调度执行</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 14:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//run方法线程体</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//main线程，主线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程对象</span></span><br><span class=\"line\">        <span class=\"type\">TestThread</span> <span class=\"variable\">testThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用start()方法开启线程</span></span><br><span class=\"line\">        testThread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Runnable\"><a href=\"#Runnable\" class=\"headerlink\" title=\"Runnable\"></a>Runnable</h4><ol>\n<li>定义MyRunnable类实现<strong>Runnable类</strong></li>\n<li>实现**run()**方法，编写线程执行体</li>\n<li>创建线程对象，调用**start()**方法启动线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程方式2：实现Runnable接口，重写run方法，执行线程需要丢入runnable接口实现类，调用start()方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 15:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//run方法线程体</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个runnable接口实现类对象</span></span><br><span class=\"line\">        <span class=\"type\">TestThread2</span> <span class=\"variable\">testThread2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class=\"line\">        <span class=\"comment\">//Thread thread = new Thread(testThread2);</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//thread.start();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(testThread2).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li><u><em>继承Thread类</em></u><ul>\n<li>子类继承Thread类具备多线程能力</li>\n<li>启动线程：子类对象.start()</li>\n<li><strong>不建议使用：避免OOP单继承局限性</strong></li>\n</ul>\n</li>\n<li><u><em>实现Runnable接口</em></u><ul>\n<li>实现接口Runnable具备多线程能力</li>\n<li>启动线程：传入目标对象+Thread对象.start()</li>\n<li><strong>推荐使用：避免单线程局限性，灵活方便，方便同一个对象被多个线程使用</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.applet.Main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 多个线程同时操作同一个对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 卖火车票的例子</span></span><br><span class=\"line\"><span class=\"comment\"> * 发现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 15:27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread3</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//票数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">ticketNums</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ticketNums &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//模拟延时</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;---&gt;拿到了第&quot;</span> + ticketNums-- + <span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestThread3</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;小明&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;小黄&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;小黑&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210402153415.png\" alt=\"image-20210402153407320\" style=\"zoom: 33%;\" />\n\n<h4 id=\"模拟龟兔赛跑\"><a href=\"#模拟龟兔赛跑\" class=\"headerlink\" title=\"模拟龟兔赛跑\"></a>模拟龟兔赛跑</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模拟龟兔赛跑</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 22:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Race</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//胜利者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String winner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//模拟兔子休息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"string\">&quot;兔子&quot;</span>) &amp;&amp; i%<span class=\"number\">10</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//判断比赛是否结束</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> gameOver(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;--&gt;跑了&quot;</span> + i + <span class=\"string\">&quot;步&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否完成</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">gameOver</span><span class=\"params\">(<span class=\"type\">int</span> steps)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有胜利者</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (winner != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (steps &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                winner = Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;winner is &quot;</span> + winner);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Race</span> <span class=\"variable\">race</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Race</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(race,<span class=\"string\">&quot;乌龟&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(race,<span class=\"string\">&quot;兔子&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Callable接口（了解）\"><a href=\"#Callable接口（了解）\" class=\"headerlink\" title=\"Callable接口（了解）\"></a>Callable接口（了解）</h4><ol>\n<li>实现Callable接口，需要返回值类型</li>\n<li>重写call方法，需要抛出异常</li>\n<li>创建目标对象</li>\n<li>创建执行服务：ExecutorService ser = Executors.newFixedThreadPool(1);</li>\n<li>提交执行：Future<Boolean> result = ser.submit(callable);</li>\n<li>获取结果：boolean r1 = result.get();</li>\n<li>关闭服务：ser.shutdownNow();</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程创建方式三：实现Callable接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：callable的好处： 1.有返回值 2.可以抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 23:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestCallable</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Boolean&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个runnable接口实现类对象</span></span><br><span class=\"line\">        <span class=\"type\">TestCallable</span> <span class=\"variable\">testCallable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCallable</span>();</span><br><span class=\"line\">        <span class=\"type\">TestCallable</span> <span class=\"variable\">testCallable1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCallable</span>();</span><br><span class=\"line\">        <span class=\"type\">TestCallable</span> <span class=\"variable\">testCallable2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCallable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建执行服务</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">ser</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//提交执行</span></span><br><span class=\"line\">        Future&lt;Boolean&gt; r1 = ser.submit(testCallable);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r2 = ser.submit(testCallable1);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r3 = ser.submit(testCallable2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取结果</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs1</span> <span class=\"operator\">=</span> r1.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs2</span> <span class=\"operator\">=</span> r2.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs3</span> <span class=\"operator\">=</span> r3.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关闭服务</span></span><br><span class=\"line\">        ser.shutdownNow();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现静态代理</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态代理模式总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * 真实对象和代理对象都要实现同一个接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理对象要代理真实角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 好处：</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理对象可以做很多真实对象做不了的事情</span></span><br><span class=\"line\"><span class=\"comment\"> * 真实对象专注做自己的事情</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 0:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StaticProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//你要结婚</span></span><br><span class=\"line\">        <span class=\"type\">You</span> <span class=\"variable\">you</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">You</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//线程中的代理模式</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; System.out.println(<span class=\"string\">&quot;我爱你&quot;</span>)).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">WeddingCompany</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">You</span>()).HappyMarry();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Marry</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//真实角色，你去结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">You</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;王老师要结婚了，超开心！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理角色，帮助你结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WeddingCompany</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//代理谁 --&gt; 真实角色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Marry target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeddingCompany</span><span class=\"params\">(Marry target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target.HappyMarry(); <span class=\"comment\">//这就是真实对象</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之后，收尾款&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之前，布置现场&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><ul>\n<li><strong>为什么要使用lambda表达式</strong><ul>\n<li>避免匿名内部类定义过多</li>\n<li>可以让你的代码看起来很简洁</li>\n<li>去掉了一堆没有意义的代码，只留下核心逻辑</li>\n</ul>\n</li>\n<li><strong>注意：<u>接口必须为函数式接口（只有一个抽象方法）</u></strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lambda;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-01 23:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.使用接口实现类</span></span><br><span class=\"line\">        <span class=\"type\">Comparator</span> <span class=\"variable\">comparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyComparetor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.使用匿名内部类</span></span><br><span class=\"line\">        <span class=\"type\">Comparator</span> <span class=\"variable\">comparator1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.使用lambda表达式来实现接口</span></span><br><span class=\"line\">        <span class=\"type\">Comparator</span> <span class=\"variable\">comparator2</span> <span class=\"operator\">=</span> (a,b) -&gt; a-b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComparetor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparator</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Comparator</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><ul>\n<li>lambda表达式只能有一行代码的情况下才能简化成一行，如果有多行，那么就用代码块包裹</li>\n<li>前提是接口为函数式接口（接口中只有一个方法）</li>\n<li>多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h3><h4 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210403003514.jpeg\" alt=\"img\"></p>\n<ol>\n<li><p>**新建(NEW)**：新创建了一个线程对象。</p>\n</li>\n<li><p>**可运行(RUNNABLE)**：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。</p>\n</li>\n<li><p>**运行(RUNNING)**：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。</p>\n</li>\n<li><p>**阻塞(BLOCKED)**：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种： </p>\n<blockquote>\n<p>(一). 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。<br>(二). 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。<br>(三). 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</p>\n</blockquote>\n</li>\n<li><p>**死亡(DEAD)**：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>\n</li>\n</ol>\n<h4 id=\"线程方法\"><a href=\"#线程方法\" class=\"headerlink\" title=\"线程方法\"></a>线程方法</h4><table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">setPriority(int newPriority)</td>\n<td align=\"center\">更改线程的优先级</td>\n</tr>\n<tr>\n<td align=\"center\">static void sleep(long millis)</td>\n<td align=\"center\">在指定毫秒数内让当前正在执行的线程休眠</td>\n</tr>\n<tr>\n<td align=\"center\">void join()</td>\n<td align=\"center\">等待该线程终止</td>\n</tr>\n<tr>\n<td align=\"center\">static void yield()</td>\n<td align=\"center\">暂停当前正在执行的线程对象，并执行其他线程</td>\n</tr>\n<tr>\n<td align=\"center\">void interrupt()</td>\n<td align=\"center\">中断线程，别用这个方式</td>\n</tr>\n<tr>\n<td align=\"center\">boolean isAlive()</td>\n<td align=\"center\">测试线程是否处于活动状态</td>\n</tr>\n</tbody></table>\n<h4 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h4><ul>\n<li>不推荐使用JDK提供的stop()、destroy()方法。*<u>【已废弃】</u>*</li>\n<li>推荐线程自己停止下来</li>\n<li>建议使用一个标志位进行终止变量，当flag=false，则终止线程运行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.generic.NEW;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试stop</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.建议线程正常停止 --&gt; 利用次数，不建议死循环</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.建议使用标志位 --&gt;设置一个标志位</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.不要使用stop()获取destroy()等过时或者JDK不建议使用的方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 0:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestStop</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.设置一个标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;run...Thread&quot;</span> + i++);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.设置一个公开的方法停止线程，转换标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestStop</span> <span class=\"variable\">testStop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestStop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(testStop).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main&quot;</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">900</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用stop方法切换标志位，让线程停止</span></span><br><span class=\"line\">                testStop.stop();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程该停止了&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程休眠\"><a href=\"#线程休眠\" class=\"headerlink\" title=\"线程休眠\"></a>线程休眠</h4><ul>\n<li>sleep(时间)指定当前线程线程阻塞的毫秒数</li>\n<li>sleep存在异常InterruptedException</li>\n<li>sleep时间达到后线程进入就绪状态</li>\n<li>sleep可以模拟网络延时，倒计时等</li>\n<li>每一个对象都有一个锁，sleep不会释放锁</li>\n</ul>\n<h4 id=\"线程礼让\"><a href=\"#线程礼让\" class=\"headerlink\" title=\"线程礼让\"></a>线程礼让</h4><ul>\n<li>礼让线程，让当前正在执行的线程暂停，但不堵塞</li>\n<li>将线程从运行状态转为就绪状态</li>\n<li>**<u>让cpu重新调度，礼让不一定成功，看cpu心情</u>*</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试礼让线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 礼让不一定成功，看cpu心情</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 1:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestYield</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyYield</span> <span class=\"variable\">myYield</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyYield</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">&quot;a&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">&quot;b&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyYield</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;线程正在执行&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//礼让</span></span><br><span class=\"line\">        Thread.yield();</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;线程停止执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h4><ul>\n<li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>\n<li>可以想象成插队</li>\n</ul>\n<h4 id=\"观测线程状态\"><a href=\"#观测线程状态\" class=\"headerlink\" title=\"观测线程状态\"></a>观测线程状态</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 观察测试线程的状态</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 1:11</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;///&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察状态</span></span><br><span class=\"line\">        Thread.<span class=\"type\">State</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> thread.getState();</span><br><span class=\"line\">        System.out.println(state);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察启动后</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        state = thread.getState();</span><br><span class=\"line\">        System.out.println(state);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//只要线程不终止，就一直输出状态</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (state != Thread.State.TERMINATED)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"comment\">//更新线程状态</span></span><br><span class=\"line\">            state = thread.getState();</span><br><span class=\"line\">            System.out.println(state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h4><ul>\n<li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度那个线程来执行</li>\n<li>线程的优先级用数字表示，范围从1~10<ul>\n<li>Thread.MIN_PRIORITY = 1</li>\n<li>Thread.MAX_PRIORITY = 10</li>\n<li>Thread.NORM_PRIORITY = 5</li>\n</ul>\n</li>\n<li>使用以下方式改变或获取优先级<ul>\n<li>getPriority()、setPriority(int xxx)</li>\n</ul>\n</li>\n</ul>\n<p><em><u><strong>注意：优先级的设定一定要在启动之前；优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看cpu的调度</strong></u></em></p>\n<h4 id=\"守护-daemon-线程\"><a href=\"#守护-daemon-线程\" class=\"headerlink\" title=\"守护(daemon)线程\"></a>守护(daemon)线程</h4><ul>\n<li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li>\n<li>虚拟机必须确保用户线程执行完毕</li>\n<li>虚拟机不用等待守护线程执行完毕</li>\n<li>如，后台记录操作日志，监控内存，垃圾回收等待</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试守护线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 上帝守护你</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 1:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestDaemon</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">God</span> <span class=\"variable\">god</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">God</span>();</span><br><span class=\"line\">        <span class=\"type\">You</span> <span class=\"variable\">you</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">You</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(god);</span><br><span class=\"line\">        <span class=\"comment\">//默认是false表示是用户线程，正常的线程都是用户线程</span></span><br><span class=\"line\">        thread.setDaemon(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(you).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上帝</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">God</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;====上帝保佑你&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//你</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">You</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">36500</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你一生都开心的或者&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====goodbyte&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多线程常见面试题\"><a href=\"#多线程常见面试题\" class=\"headerlink\" title=\"多线程常见面试题\"></a>多线程常见面试题</h3><h4 id=\"1、Java中实现多线程有几种方法\"><a href=\"#1、Java中实现多线程有几种方法\" class=\"headerlink\" title=\"1、Java中实现多线程有几种方法\"></a>1、Java中实现多线程有几种方法</h4><ul>\n<li>继承Thread类</li>\n<li>实现Runnable接口</li>\n<li>实现Callable接口，通过FutureTask包装器来创建Thread线程</li>\n<li>使用ExecutorService、Callable、Future实现有返回值的多线程（实际上就是使用ExecutorService管理上面三种方式）</li>\n</ul>\n<h4 id=\"2、如何停止一个正在运行的线程\"><a href=\"#2、如何停止一个正在运行的线程\" class=\"headerlink\" title=\"2、如何停止一个正在运行的线程\"></a>2、如何停止一个正在运行的线程</h4><ul>\n<li>使用退出标志，使线程正常退出，也就是当线程的run方法执行完毕后终止</li>\n<li>使用stop、destroy方法强行停止线程，不过不推荐这个方法</li>\n<li>使用interrupt方法中断线程</li>\n</ul>\n<h4 id=\"3、notify-和notifyAll-有什么区别\"><a href=\"#3、notify-和notifyAll-有什么区别\" class=\"headerlink\" title=\"3、notify()和notifyAll()有什么区别\"></a>3、notify()和notifyAll()有什么区别</h4><ul>\n<li>notifyAll()唤醒所有等待线程，notify()随机唤醒一个</li>\n<li>notify()使用不当可能会造成死锁</li>\n</ul>\n<h4 id=\"4、sleep-和wait-有什么区别？\"><a href=\"#4、sleep-和wait-有什么区别？\" class=\"headerlink\" title=\"4、sleep()和wait() 有什么区别？\"></a>4、sleep()和wait() 有什么区别？</h4><ul>\n<li>来自不同的类，sleep()Thread类的一个静态方法，wait()是Object类的一个成员方法</li>\n<li>sleep()不会释放锁，执行此方法的线程暂停指定的时间</li>\n<li>而wait()会释放锁，进入等待该对象的等待锁定池中         </li>\n</ul>\n<h4 id=\"5、Thread-类中的start-和-run-方法有什么区别？\"><a href=\"#5、Thread-类中的start-和-run-方法有什么区别？\" class=\"headerlink\" title=\"5、Thread 类中的start() 和 run() 方法有什么区别？\"></a>5、Thread 类中的start() 和 run() 方法有什么区别？</h4><ul>\n<li>start()方法是用来启动被创建的线程，此时线程为就绪状态，等待cpu的调度执行，而cpu调度执行时就是执行run()方法中的内容，当run()方法完成后，线程也就终止了。</li>\n<li>直接调用run()方法并不能起到多线程的作用，只是作为普通方法进行调用，程序中也就只有main主线程一个线程。</li>\n</ul>\n<h4 id=\"6、为什么wait-notify-和-notifyAll这些方法不在thread类里面？\"><a href=\"#6、为什么wait-notify-和-notifyAll这些方法不在thread类里面？\" class=\"headerlink\" title=\"6、为什么wait, notify 和 notifyAll这些方法不在thread类里面？\"></a>6、为什么wait, notify 和 notifyAll这些方法不在thread类里面？</h4><p>明显的原因是Java中提供的锁是对象级的而不是线程级的，每个对象都有一把锁，通过线程获得。锁是属于对象的。</p>\n<h2 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h2><p>多个线程操作同一个资源</p>\n<h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p><u>并发：<strong>同一个对象</strong>被<strong>多个线程</strong>同时操作</u></p>\n<p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步，线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面的线程使用完毕，下一个线程再使用。</p>\n<h3 id=\"队列和锁\"><a href=\"#队列和锁\" class=\"headerlink\" title=\"队列和锁\"></a>队列和锁</h3><p><strong>队列+锁</strong>才能解决多线程的安全性</p>\n<h3 id=\"线程同步-1\"><a href=\"#线程同步-1\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><p>由于同一进程的多个线程共享一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<strong>锁机制synchronized</strong>，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可。但存在以下问题：</p>\n<ul>\n<li>一个线程持有锁会导致其他所有需要此锁的线程挂起；</li>\n<li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题；</li>\n</ul>\n<h3 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h3><ul>\n<li>synchronized关键字，它包括两种用法：synchronized方法和synchronized块</li>\n<li>synchronized方法控制“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</li>\n<li><em><u><strong>缺陷：若将一个大的方法声明为synchronized将会影响效率</strong></u></em></li>\n</ul>\n<h3 id=\"同步块\"><a href=\"#同步块\" class=\"headerlink\" title=\"同步块\"></a>同步块</h3><ul>\n<li>同步块：synchronized**(Obj)**{}</li>\n<li>Obj称之为同步监视器<ul>\n<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>\n<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class</li>\n</ul>\n</li>\n<li>同步监视器的执行过程<ol>\n<li>第一个线程访问，锁定同步监视器，执行其中代码</li>\n<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>\n<li>第一个线程访问完毕，解锁同步监视器</li>\n<li>第二个线程方法，发现同步监视器没有锁，然后锁定并访问</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有<strong>“两个以上对象的锁”</strong>时，就可能会发生“死锁”的问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sync;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 14:07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeadLock</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Makeup</span> <span class=\"variable\">g1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Makeup</span>(<span class=\"number\">0</span>,<span class=\"string\">&quot;灰姑凉&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Makeup</span> <span class=\"variable\">g2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Makeup</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;白雪公主&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        g1.start();</span><br><span class=\"line\">        g2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//口红</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lipstick</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//镜子</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Mirror</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Makeup</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//需要的资源只有一份，用static来保证只有一份</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Lipstick</span> <span class=\"variable\">lipstick</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Lipstick</span>();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Mirror</span> <span class=\"variable\">mirror</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Mirror</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//选择</span></span><br><span class=\"line\">    <span class=\"type\">int</span> choice;</span><br><span class=\"line\">    <span class=\"comment\">//使用化妆品的人</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    Makeup(<span class=\"type\">int</span> choice, String name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.choice = choice;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//化妆</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            makeup();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//化妆，互相持有对方的锁，就是需要对方的资源</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeup</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (choice == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获得口红的锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lipstick) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得口红的锁&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"comment\">//一秒钟后想获得镜子的锁</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (mirror) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得镜子的锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获得镜子的锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lipstick) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得镜子的锁&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                <span class=\"comment\">//两秒钟后想获得口红的锁</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (mirror) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得口红的锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>产生死锁的四个必要条件：</p>\n<ul>\n<li>互斥条件：一个资源每次只能被一个进程使用</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li>\n<li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</li>\n<li>循环等待条件：若干个进程之间形成一种头尾相接的循环等待资源关系</li>\n</ul>\n<h3 id=\"Lock锁\"><a href=\"#Lock锁\" class=\"headerlink\" title=\"Lock锁\"></a>Lock锁</h3><p>常用实现类：ReentrantLock（可重入锁）</p>\n<h4 id=\"synchronized与Lock的对比\"><a href=\"#synchronized与Lock的对比\" class=\"headerlink\" title=\"synchronized与Lock的对比\"></a>synchronized与Lock的对比</h4><ul>\n<li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，除了作用域自动释放</li>\n<li>Lock只有代码块锁，synchronized有代码块和方法锁</li>\n<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li>\n<li>优先使用顺序：<ul>\n<li>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h3><p>Java提供了几个方法解决线程之间的通信问题</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>wait()</td>\n<td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td>wait(long timeout)</td>\n<td>指定等待的毫秒数</td>\n</tr>\n<tr>\n<td>notify()</td>\n<td>唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td>notifyAll()</td>\n<td>唤醒同一对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>\n</tr>\n</tbody></table>\n<h4 id=\"并发协作模型“生产者-消费者模式”-–-gt-管程法\"><a href=\"#并发协作模型“生产者-消费者模式”-–-gt-管程法\" class=\"headerlink\" title=\"并发协作模型“生产者/消费者模式” –&gt; 管程法\"></a>并发协作模型“生产者/消费者模式” –&gt; 管程法</h4><ul>\n<li>生产者：负责生产数据的模块</li>\n<li>消费者：负责处理数据的模块</li>\n<li>缓冲区：消费者不能直接使用生产者的数据，他们之间又个缓冲区</li>\n</ul>\n<p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据</strong></p>\n<h4 id=\"并发协作模型“生产者-消费者模式”-–-gt-信号灯法\"><a href=\"#并发协作模型“生产者-消费者模式”-–-gt-信号灯法\" class=\"headerlink\" title=\"并发协作模型“生产者/消费者模式” –&gt; 信号灯法\"></a>并发协作模型“生产者/消费者模式” –&gt; 信号灯法</h4><p>通过一个标志判断是否等待/唤醒</p>\n<h3 id=\"使用线程池\"><a href=\"#使用线程池\" class=\"headerlink\" title=\"使用线程池\"></a>使用线程池</h3><ul>\n<li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。类似生活中的公共交通工具。</li>\n<li>好处：<ul>\n<li>提高响应速度（减少了创建新线程的时间）</li>\n<li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li>\n<li>便于线程管理（···）<ul>\n<li>corePoolSize：核心池的大小</li>\n<li>maximumPoolSize：最大线程数</li>\n<li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用：<ul>\n<li>JDK5.0起提供了线程池相关的API：<strong>ExecutorService</strong>和<strong>Executors</strong></li>\n<li>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor<ul>\n<li><code>void execute(Runnable command)</code>：执行任务/命令，没有返回值，一般用来执行Runnable</li>\n<li><code>&lt;T&gt;Future&lt;T&gt; submit(Callable&lt;T&gt; task) </code>：执行任务，有返回值，一般用来执行Callable</li>\n<li><code>void shutdown()</code>：关闭连接池</li>\n</ul>\n</li>\n<li>Executors：工具类，线程池的工厂类，用于创建并返回不同类型的线程池</li>\n</ul>\n</li>\n</ul>\n","categories":["后端开发"],"tags":["笔记","Java"]},{"title":"分布式系统理论","url":"/2021/04/13/41166861.html","content":"<h2 id=\"什么是分布式系统？\"><a href=\"#什么是分布式系统？\" class=\"headerlink\" title=\"什么是分布式系统？\"></a>什么是分布式系统？</h2><p>分布式是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统。</p>\n<p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p>\n<p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的 CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。</p>\n<h2 id=\"Dubbo-文档\"><a href=\"#Dubbo-文档\" class=\"headerlink\" title=\"Dubbo 文档\"></a>Dubbo 文档</h2><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p>\n<p>在 Dubbo 的官网文档有这样一张图</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413110820.png\" alt=\"img\"></p>\n<h3 id=\"单一应用架构\"><a href=\"#单一应用架构\" class=\"headerlink\" title=\"单一应用架构\"></a><strong>单一应用架构</strong></h3><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413110902.png\" alt=\"img\"></p>\n<p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p>\n<p><strong>缺点：</strong></p>\n<p>1、性能扩展比较难</p>\n<p>2、协同开发问题</p>\n<p>3、不利于升级维护</p>\n<h3 id=\"垂直应用架构\"><a href=\"#垂直应用架构\" class=\"headerlink\" title=\"垂直应用架构\"></a>垂直应用架构</h3><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的 Web 框架(MVC)是关键。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413110941.png\" alt=\"img\"></p>\n<p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p>\n<p>缺点：公用模块无法重复利用，开发性的浪费</p>\n<h3 id=\"分布式服务架构\"><a href=\"#分布式服务架构\" class=\"headerlink\" title=\"分布式服务架构\"></a>分布式服务架构</h3><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413111036.png\" alt=\"img\"></p>\n<h3 id=\"流式计算架构\"><a href=\"#流式计算架构\" class=\"headerlink\" title=\"流式计算架构\"></a>流式计算架构</h3><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心</strong>(SOA)[Service Oriented Architecture]是关键。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413111136.png\" alt=\"img\"></p>\n<h2 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h2><h3 id=\"什么是-RPC？\"><a href=\"#什么是-RPC？\" class=\"headerlink\" title=\"什么是 RPC？\"></a>什么是 RPC？</h3><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p>\n<p>也就是说两台服务器 A，B，一个应用部署在 A 服务器上，想要调用 B 服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用 RPC 呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC 就是要像调用本地的函数一样去调远程函数。</p>\n<p>推荐阅读文章：<a href=\"https://www.jianshu.com/p/2accc2840a1b\">https://www.jianshu.com/p/2accc2840a1b</a></p>\n<h3 id=\"RPC-基本原理\"><a href=\"#RPC-基本原理\" class=\"headerlink\" title=\"RPC 基本原理\"></a>RPC 基本原理</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413111312.png\" alt=\"img\"></p>\n<h3 id=\"步骤解析：\"><a href=\"#步骤解析：\" class=\"headerlink\" title=\"步骤解析：\"></a>步骤解析：</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413111426.png\" alt=\"img\"></p>\n<p>RPC 的两个核心模块：通讯、序列化！</p>\n<h2 id=\"测试环境搭建\"><a href=\"#测试环境搭建\" class=\"headerlink\" title=\"测试环境搭建\"></a>测试环境搭建</h2><h3 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h3><p>Apache Dubbo<code>|ˈdʌbəʊ|</code>是一款高性能、轻量级的开源 Java RPC 框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>\n<p>dubbo 官网 <a href=\"http://dubbo.apache.org/zh-cn/index.html\">http://dubbo.apache.org/zh-cn/index.html</a></p>\n<p>1.了解 Dubbo 的特性</p>\n<p>2.查看官方文档</p>\n<p><strong>dubbo 基本概念</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413112417.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<p><strong>服务提供者（Provider）：</strong>暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p>\n<p><strong>服务消费者（Consumer）：</strong>调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>\n<p><strong>注册中心（Registry）：</strong>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p>\n<p><strong>监控中心（Monitor）：</strong>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p>\n<p>调用关系说明</p>\n<blockquote>\n<p>服务容器负责启动，加载，运行服务提供者。</p>\n</blockquote>\n<blockquote>\n<p>服务提供者在启动时，向注册中心注册自己提供的服务。</p>\n</blockquote>\n<blockquote>\n<p>服务消费者在启动时，向注册中心订阅自己所需的服务。</p>\n</blockquote>\n<blockquote>\n<p>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p>\n</blockquote>\n<blockquote>\n<p>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>\n</blockquote>\n<blockquote>\n<p>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p>\n</blockquote>\n<h3 id=\"Dubbo-环境搭建\"><a href=\"#Dubbo-环境搭建\" class=\"headerlink\" title=\"Dubbo 环境搭建\"></a>Dubbo 环境搭建</h3><ul>\n<li><p>安装 Zookeeper 注册中心</p>\n<ol>\n<li><p>点击下载<a href=\"https://downloads.apache.org/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz\">zookeeper</a>，直接解压</p>\n</li>\n<li><p>运行<code>/bin/zkServer.cmd</code>，初次运行会报错，没有<code>zoo.cfg</code>配置文件</p>\n</li>\n<li><p>修改 zoo.cfg 配置文件</p>\n<p>将 conf 文件夹下面的 zoo_sample.cfg 复制一份改名为 zoo.cfg 即可。</p>\n</li>\n</ol>\n</li>\n</ul>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413155414.png\" alt=\"image-20210413155414083\" style=\"zoom: 67%;\" />\n\n<h3 id=\"安装-Dubbo-admin\"><a href=\"#安装-Dubbo-admin\" class=\"headerlink\" title=\"安装 Dubbo-admin\"></a>安装 Dubbo-admin</h3><p>dubbo 本身并不是一个服务软件。它其实就是一个 jar 包，能够帮你的 java 程序连接到 zookeeper，并利用 zookeeper 消费、提供服务。</p>\n<p>但是为了让用户更好的管理监控众多的 dubbo 服务，官方提供了一个可视化的监控程序 dubbo-admin，不过这个监控即使不装也不影响使用。</p>\n<h4 id=\"1、下载-dubbo-admin\"><a href=\"#1、下载-dubbo-admin\" class=\"headerlink\" title=\"1、下载 dubbo-admin\"></a>1、下载 dubbo-admin</h4><p>地址：<a href=\"https://github.com/apache/dubbo-admin/tree/master\">点击下载</a></p>\n<h4 id=\"2、解压进入目录\"><a href=\"#2、解压进入目录\" class=\"headerlink\" title=\"2、解压进入目录\"></a>2、解压进入目录</h4><p>修改 dubbo-admin\\src\\main\\resources \\application.properties 指定 zookeeper 地址</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">7001</span></span><br><span class=\"line\"><span class=\"attr\">spring.velocity.cache</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">spring.velocity.charset</span>=<span class=\"string\">UTF-8</span></span><br><span class=\"line\"><span class=\"attr\">spring.velocity.layout-url</span>=<span class=\"string\">/templates/default.vm</span></span><br><span class=\"line\"><span class=\"attr\">spring.messages.fallback-to-system-locale</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">spring.messages.basename</span>=<span class=\"string\">i18n/message</span></span><br><span class=\"line\"><span class=\"attr\">spring.root.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">spring.guest.password</span>=<span class=\"string\">guest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dubbo.registry.address</span>=<span class=\"string\">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、在项目目录下打包-dubbo-admin\"><a href=\"#3、在项目目录下打包-dubbo-admin\" class=\"headerlink\" title=\"3、在项目目录下打包 dubbo-admin\"></a>3、在项目目录下打包 dubbo-admin</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -Dmaven.test.skip=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、执行-dubbo-admin-target-下的-dubbo-admin-0-0-1-SNAPSHOT-jar\"><a href=\"#4、执行-dubbo-admin-target-下的-dubbo-admin-0-0-1-SNAPSHOT-jar\" class=\"headerlink\" title=\"4、执行 dubbo-admin\\target 下的 dubbo-admin-0.0.1-SNAPSHOT.jar\"></a>4、执行 dubbo-admin\\target 下的 dubbo-admin-0.0.1-SNAPSHOT.jar</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<p>==【注意：zookeeper 的服务一定要打开！】==</p>\n<p>执行成功，访问<a href=\"localhost:7001\">localhost:7001/</a>，需要输入用户名/密码，默认是<code>root/root</code></p>\n<p>登录成功，查看界面</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413160348.png\" alt=\"image-20210413160348304\"></p>\n<p>安装完成！</p>\n<h3 id=\"SpringBoot-Dubbo-Zookeeper\"><a href=\"#SpringBoot-Dubbo-Zookeeper\" class=\"headerlink\" title=\"SpringBoot + Dubbo + Zookeeper\"></a>SpringBoot + Dubbo + Zookeeper</h3><h4 id=\"1、框架搭建\"><a href=\"#1、框架搭建\" class=\"headerlink\" title=\"1、框架搭建\"></a>1、框架搭建</h4><ol>\n<li><p>启动 zookeeper ！</p>\n</li>\n<li><p>IDEA 创建一个空项目</p>\n</li>\n<li><p>创建一个模块，实现服务提供者：provider-server ， 选择 web 依赖即可</p>\n</li>\n<li><p>项目创建完毕，我们写一个服务，比如卖票的服务</p>\n<p>编写接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.provider.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TicketService</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getTicket</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.provider.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TicketServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TicketService</span> &#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getTicket</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">&quot;这是一张来自服务提供者的票&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个模块，实现服务消费者：consumer-server，选择 web 依赖即可</p>\n</li>\n<li><p>项目创建完毕，我们写一个服务，比如用户买票的服务</p>\n<p>编写 service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.kuang.consumer.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//我们需要去拿去注册中心的服务</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需求：用户 想调用服务提供者的买票服务，应该怎么做？</p>\n</li>\n</ol>\n<h4 id=\"2、服务提供者\"><a href=\"#2、服务提供者\" class=\"headerlink\" title=\"2、服务提供者\"></a>2、服务提供者</h4><ol>\n<li><p>将服务提供者注册到注册中心，我们需要整合 Dubbo 和 zookeeper，所以需要导包</p>\n<p>首先，导入 springboot 与 dubbo 的整合包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>zookeeper 客户端的包我们去 maven 的仓库下载</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.sgroschupf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zkclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>【新版的坑】zookeeper 及其依赖包，解决日志冲突，还需要剔除日志依赖；</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入zookeeper --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.curator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>curator-framework<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.12.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.curator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>curator-recipes<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.12.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 springboot 配置文件中配置 dubbo 相关属性！</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#当前应用名字</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.application.name</span>=<span class=\"string\">provider-server</span></span><br><span class=\"line\"><span class=\"comment\">#注册中心地址</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.registry.address</span>=<span class=\"string\">zookeeper://127.0.0.1:2181</span></span><br><span class=\"line\"><span class=\"comment\">#扫描指定包下的服务</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.scan.base-packages</span>=<span class=\"string\">com.luojunjie.service</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在 service 的实现类中配置服务注解，发布服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.dubbo.config.annotation.DubboService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-13 15:11</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">//放在spring容器中</span></span><br><span class=\"line\"><span class=\"meta\">@DubboService</span> <span class=\"comment\">//将服务注册到dubbo</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TicketServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TicketService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getTicket</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是一张票！！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>逻辑理解 ：应用启动起来，dubbo 就会扫描指定的包下带有@component 注解的服务，将它发布在指定的注册中心中！</strong></p>\n</li>\n</ol>\n<h4 id=\"3、服务消费者\"><a href=\"#3、服务消费者\" class=\"headerlink\" title=\"3、服务消费者\"></a>3、服务消费者</h4><ol>\n<li><p>导入依赖，和服务提供者的依赖一样</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 导入依赖dubbo+zookeeper --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.sgroschupf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zkclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入zookeeper --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.curator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>curator-framework<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.12.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.curator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>curator-recipes<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.12.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>配置参数</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#当前应用名字</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.application.name</span>=<span class=\"string\">consumer-server</span></span><br><span class=\"line\"><span class=\"comment\">#注册中心地址</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.registry.address</span>=<span class=\"string\">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>本来正常步骤是需要将服务提供者的接口打包，然后用 pom 文件导入，我们这里使用简单的方式，直接将服务的接口拿过来，路径必须保证正确，即和服务提供者相同；</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413162217.png\" alt=\"image-20210413162217567\" style=\"zoom:33%;\" /></li>\n<li><p>完善消费者的服务类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.dubbo.config.annotation.DubboReference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-13 15:12</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DubboReference</span>  <span class=\"comment\">//远程引用指定的服务，他会按照全类名进行匹配，看谁给注册中心注册了这个全类名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TicketService ticketService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//想拿到票</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bugTicket</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;在注册中心中拿到=&gt;&quot;</span>+ticketService.getTicket());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>测试！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerServerApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        userService.bugTicket();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"4、启动测试\"><a href=\"#4、启动测试\" class=\"headerlink\" title=\"4、启动测试\"></a>4、启动测试</h4><ol>\n<li><p>开启 zookeeper</p>\n</li>\n<li><p>打开 dubbo-admin 实施监控</p>\n</li>\n<li><p>开启服务者</p>\n</li>\n<li><p>消费者测试结果：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413162711.png\" alt=\"image-20210413162711583\" style=\"zoom:50%;\" /></li>\n<li><p>dubbo-admin 监控中心</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210413162803.png\" alt=\"image-20210413162802948\" style=\"zoom:50%;\" /></li>\n</ol>\n","categories":["随笔小记"],"tags":["笔记","分布式"]},{"title":"Java 中的位运算","url":"/2021/04/09/f789481e.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>日常开发中位运算不是很常用，但是巧妙的使用位运算可以大量减少运行开销，优化算法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>Java支持的位运算有7种，具体如下：</p>\n<ul>\n<li><strong>&amp;：按位与。</strong></li>\n<li><strong>|：按位或。</strong></li>\n<li><strong>~：按位非。</strong></li>\n<li><strong>^：按位异或。</strong></li>\n<li><strong>&lt;&lt;：左位移运算符。</strong></li>\n<li><strong>&gt;&gt;：右位移运算符。</strong></li>\n<li><strong>&lt;&lt;&lt;：无符号右移运算符。</strong></li>\n</ul>\n<h3 id=\"按位与-amp\"><a href=\"#按位与-amp\" class=\"headerlink\" title=\"按位与(&amp;)\"></a>按位与(&amp;)</h3><p>按位与的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位与</strong></td>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>只有两个操作数对应位同为1时，结果为1，其余全为0（或者是只要有一个操作数为0，结果就为0）</p>\n<p><strong>举例：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/yu.png\"></p>\n<h3 id=\"按位或\"><a href=\"#按位或\" class=\"headerlink\" title=\"按位或(|)\"></a>按位或(|)</h3><p>按位或的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位或</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>只有两个操作数对应位同为0时，结果为0，其余全为1（或者是只要有一个操作数为1，结果就为1）</p>\n<h3 id=\"按位非\"><a href=\"#按位非\" class=\"headerlink\" title=\"按位非(~)\"></a>按位非(~)</h3><p>按位非的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数</th>\n<th>0</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>按位或</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>取反操作，在求负数的源码中使用过</p>\n<h3 id=\"按位异或\"><a href=\"#按位异或\" class=\"headerlink\" title=\"按位异或(^)\"></a>按位异或(^)</h3><p>按位异或的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位异或</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>只有两个操作数不相同时，结果为1，其余全为0（或者是只要两个操作数相同就为0）</p>\n<h3 id=\"左位移-lt-lt\"><a href=\"#左位移-lt-lt\" class=\"headerlink\" title=\"左位移(&lt;&lt;)\"></a>左位移(&lt;&lt;)</h3><p><strong>运算规则：</strong>算术左移，溢出截断，符号位不变，低位补0。如：2&lt;&lt;2结果为8。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/zuoweiyi.png\"></p>\n<h3 id=\"右位移-gt-gt\"><a href=\"#右位移-gt-gt\" class=\"headerlink\" title=\"右位移(&gt;&gt;)\"></a>右位移(&gt;&gt;)</h3><p><strong>运算规则：</strong>算术右移，溢出截断，符号位不变，用符号位补高位。如：-6&gt;&gt;2结果为-2。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/youweiyi.png\"></p>\n<h3 id=\"无符号右移-gt-gt-gt\"><a href=\"#无符号右移-gt-gt-gt\" class=\"headerlink\" title=\"无符号右移(&gt;&gt;&gt;)\"></a>无符号右移(&gt;&gt;&gt;)</h3><p><strong>运算规则：</strong>低位溢出，高位补0</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/wufuhao.png\"></p>\n<h2 id=\"常见使用\"><a href=\"#常见使用\" class=\"headerlink\" title=\"常见使用\"></a>常见使用</h2><p>因位运算在日常开发中并不是很常用的，这里举两个例子加强理解</p>\n<h3 id=\"判断一个数n的奇偶性\"><a href=\"#判断一个数n的奇偶性\" class=\"headerlink\" title=\"判断一个数n的奇偶性\"></a>判断一个数n的奇偶性</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">n&amp;<span class=\"number\">1</span> == <span class=\"number\">1</span>?<span class=\"string\">&quot;奇数&quot;</span>:<span class=\"string\">&quot;偶数&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么与1能判断奇偶？所谓的二进制就是满2进1，那么好了，偶数的最低位肯定是0（恰好满2，对不对？），同理，奇数的最低位肯定是1。int类型的1，前31位都是0，无论是1&amp;0还是0&amp;0结果都是0，那么有区别的就是1的最低位上的1了，若n的二进制最低位是1（奇数）与上1，结果为1，反则结果为0。</p>\n<h3 id=\"取绝对值\"><a href=\"#取绝对值\" class=\"headerlink\" title=\"取绝对值\"></a>取绝对值</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">(a^(a&gt;&gt;<span class=\"number\">31</span>))-(a&gt;&gt;<span class=\"number\">31</span>)</span><br></pre></td></tr></table></figure>\n\n<p>先整理一下使用位运算取绝对值的思路：若a为正数，则不变，需要用异或0保持的特点；若a为负数，则其补码为源码翻转每一位后+1，先求其源码，补码-1后再翻转每一位，此时需要使用异或1具有翻转的特点。</p>\n<p>任何正数右移31后只剩符号位0，最终结果为0，任何负数右移31后也只剩符号位1，溢出的31位截断，空出的31位补符号位1，最终结果为-1.右移31操作可以取得任何整数的符号位。</p>\n<p>那么综合上面的步骤，可得到公式。a&gt;&gt;31取得a的符号，若a为正数，a&gt;&gt;31等于0，a^0=a，不变；若a为负数,a&gt;&gt;31等于-1 ，a^-1翻转每一位。</p>\n<h3 id=\"不用临时变量交换两个数\"><a href=\"#不用临时变量交换两个数\" class=\"headerlink\" title=\"不用临时变量交换两个数\"></a>不用临时变量交换两个数</h3><p>连续三次使用异或，并没有临时变量就完成了两个数字交换，怎么实现的呢？</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">int a = <span class=\"number\">3</span>,b = <span class=\"number\">4</span>;</span><br><span class=\"line\">a = a^b;</span><br><span class=\"line\">b = b^a; <span class=\"regexp\">//b=b^(a^b)--&gt;b=a</span></span><br><span class=\"line\"><span class=\"regexp\">a = a^b; //</span><span class=\"function\"><span class=\"title\">a</span>=<span class=\"params\">(a^b)</span>^<span class=\"params\">(b^(a^b))</span>--&gt;</span>a=b</span><br></pre></td></tr></table></figure>\n\n<p>上面的计算主要遵循了一个计算公式：b^(a^b)=a。</p>\n<p>我们可以对以上公式做如下的推导：</p>\n<p>任何数异或本身结果为0.且有定理a^b=b^a。异或是一个无顺序的运算符，则b^a^b=b^b^a，结果为0^a。</p>\n<p>再次列出异或的计算表:</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位异或</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n</tr>\n</tbody></table>\n<p>可以发现，异或0具有保持的特点，而异或1具有翻转的特点。使用这些特点可以进行取数的操作。</p>\n<p>那么0^a，使用异或0具有保持的特点，最终结果就是a。</p>\n<p>其实java中的异或运算法则完全遵守数学中的计算法则：</p>\n<p>①  a ^ a =0</p>\n<p>②  a ^ b =b ^ a</p>\n<p>③  a ^b ^ c = a ^ (b ^ c) = (a ^ b) ^ c;</p>\n<p>④  d = a ^b ^ c 可以推出 a = d ^ b ^ c.</p>\n<p>⑤  a ^ b ^a = b.</p>\n","categories":["后端开发"],"tags":["笔记","Java"]},{"title":"Java 中的注解与反射","url":"/2021/04/07/13a54546.html","content":"<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>java.Annotation</p>\n<h3 id=\"什么是注解？\"><a href=\"#什么是注解？\" class=\"headerlink\" title=\"什么是注解？\"></a>什么是注解？</h3><ul>\n<li>Annotation 是从 JDK5.0 引入的新技术</li>\n<li>Annotation 的作用：<ul>\n<li>不是程序本身，可以对程序作出解释</li>\n<li><strong>可以被其他程序(比如编译器等)读取</strong></li>\n</ul>\n</li>\n<li>Annotation 的格式：<ul>\n<li>注解是以“@注释名”在代码中存在的，还可以添加一些参数值</li>\n</ul>\n</li>\n<li>Annotation 在哪里使用？<ul>\n<li>可以附加在 package、class、method、field 等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"内置注解\"><a href=\"#内置注解\" class=\"headerlink\" title=\"内置注解\"></a>内置注解</h3><ul>\n<li>@Override：定义在 java.lang.Override 中，此注释只适用于修辞方法，表示一个方法声明打算重写超类中的另一个方法声明。</li>\n<li>@Deprecated：此注释可以用于修辞方法，属性，类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择。</li>\n<li>@SuppressWarning：用来抑制编译时的警告信息。</li>\n</ul>\n<h3 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h3><ul>\n<li>元注解的作用就是负责注解其他注解。Java 定义了 4 个标准的 meta-annotation 类型，他们用来提供对其他 annotation 类型作说明</li>\n<li>在 java.lang.annotation 中可以找到：<ul>\n<li><strong>@Target</strong>：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</li>\n<li><strong>@Retention</strong>：表示需要在什么级别保存该注释信息，用于描述注解的生命周期你<ul>\n<li>（SOURCE &lt; CLASS &lt; <strong>RUNTIME</strong>）</li>\n</ul>\n</li>\n<li>@Document：说明该注解将被包含在 javadoc 中</li>\n<li>@Inherited：说明子类可以继承<strong>父类</strong>中的注解</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><ul>\n<li>使用 <strong>@interface</strong>自定义注解是，自动继承了 java.lang.annotation.Annotation 接口</li>\n<li>分析：<ul>\n<li>@interface 用来声明一个注解，格式：public @interface 注解名{ 定义内容 }</li>\n<li>其中的每一个方法实际上是声明了一个配置参数</li>\n<li>方法的名称就是参数的名称</li>\n<li>返回值类型就是参数的类型 （返回值只能是基本类型，Class，String，enum）</li>\n<li>可以通过 default 来声明参数的默认值</li>\n<li>如果只有一个参数成员，一般参数名为 value</li>\n<li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0 作为默认值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"反射机制\"><a href=\"#反射机制\" class=\"headerlink\" title=\"反射机制\"></a>反射机制</h2><p>Reflection（反射）是 Java 被视为动态语言的关键，反射机制允许程序在执行期借助于 Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>加载完类之后，在堆内存的方法区中就产生了一个 Class 类型的对象（一个类只要一个 Class 对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射！</p>\n<h3 id=\"反射相关的主要-API\"><a href=\"#反射相关的主要-API\" class=\"headerlink\" title=\"反射相关的主要 API\"></a>反射相关的主要 API</h3><ul>\n<li>java.lang.Class：代表一个类</li>\n<li>java.lang.reflect.Method：代表类的方法</li>\n<li>javaz.lang.reflect.Field：代表类的成员变量</li>\n<li>java.lang.reflect.Contructor：代表类的构造器</li>\n</ul>\n<h3 id=\"Class-类\"><a href=\"#Class-类\" class=\"headerlink\" title=\"Class 类\"></a>Class 类</h3><p>对于每个类而言，JRE 都为其保留了一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构(class/interface/enum/annotation)</p>\n<ul>\n<li>Class 本身也是一个类</li>\n<li>Class 对象只能由系统建立对象</li>\n<li>一个加载的类在 JVM 中只会有一个 Class 实例</li>\n<li>一个 Class 对象对应的是一个加载到 JVM 中的一个.class 文件</li>\n<li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li>\n<li>通过 Class 可以完整地得到一个类中的所有被加载的结构</li>\n<li>Class 类是 Relfection 的根源，针对任何你想动态加载、运行的类，唯有先获得相应的 Class 对象</li>\n</ul>\n<h3 id=\"Class-类相关方法\"><a href=\"#Class-类相关方法\" class=\"headerlink\" title=\"Class 类相关方法\"></a>Class 类相关方法</h3><ul>\n<li><strong>获得类相关的方法</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>asSubclass(Class<U> clazz)</td>\n<td>把传递的类的对象转换成代表其子类的对象</td>\n</tr>\n<tr>\n<td>Cast</td>\n<td>把对象转换成代表类或是接口的对象</td>\n</tr>\n<tr>\n<td>getClassLoader()</td>\n<td>获得类的加载器</td>\n</tr>\n<tr>\n<td>getClasses()</td>\n<td>返回一个数组，数组中包含该类中所有公共类和接口类的对象</td>\n</tr>\n<tr>\n<td>getDeclaredClasses()</td>\n<td>返回一个数组，数组中包含该类中所有类和接口类的对象</td>\n</tr>\n<tr>\n<td>forName(String className)</td>\n<td>根据类名返回类的对象</td>\n</tr>\n<tr>\n<td>getName()</td>\n<td>获得类的完整路径名字</td>\n</tr>\n<tr>\n<td>newInstance()</td>\n<td>创建类的实例</td>\n</tr>\n<tr>\n<td>getPackage()</td>\n<td>获得类的包</td>\n</tr>\n<tr>\n<td>getSimpleName()</td>\n<td>获得类的名字</td>\n</tr>\n<tr>\n<td>getSuperclass()</td>\n<td>获得当前类继承的父类的名字</td>\n</tr>\n<tr>\n<td>getInterfaces()</td>\n<td>获得当前类实现的类或是接口</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>获得类中属性相关的方法</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getField(String name)</td>\n<td>获得某个公有的属性对象</td>\n</tr>\n<tr>\n<td>getFields()</td>\n<td>获得所有公有的属性对象</td>\n</tr>\n<tr>\n<td>getDeclaredField(String name)</td>\n<td>获得某个属性对象</td>\n</tr>\n<tr>\n<td>getDeclaredFields()</td>\n<td>获得所有属性对象</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>获得类中注解相关的方法</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getAnnotation(Class<A> annotationClass)</td>\n<td>返回该类中与参数类型匹配的公有注解对象</td>\n</tr>\n<tr>\n<td>getAnnotations()</td>\n<td>返回该类所有的公有注解对象</td>\n</tr>\n<tr>\n<td>getDeclaredAnnotation(Class<A> annotationClass)</td>\n<td>返回该类中与参数类型匹配的所有注解对象</td>\n</tr>\n<tr>\n<td>getDeclaredAnnotations()</td>\n<td>返回该类所有的注解对象</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>获得类中构造器相关的方法</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getConstructor(Class…&lt;?&gt; parameterTypes)</td>\n<td>获得该类中与参数类型匹配的公有构造方法</td>\n</tr>\n<tr>\n<td>getConstructors()</td>\n<td>获得该类的所有公有构造方法</td>\n</tr>\n<tr>\n<td>getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td>\n<td>获得该类中与参数类型匹配的构造方法</td>\n</tr>\n<tr>\n<td>getDeclaredConstructors()</td>\n<td>获得该类所有构造方法</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>获得类中方法相关的方法</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td>\n<td>获得该类某个公有的方法</td>\n</tr>\n<tr>\n<td>getMethods()</td>\n<td>获得该类所有公有的方法</td>\n</tr>\n<tr>\n<td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td>\n<td>获得该类某个方法</td>\n</tr>\n<tr>\n<td>getDeclaredMethods()</td>\n<td>获得该类所有方法</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>类中其他重要的方法</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>isAnnotation()</td>\n<td>如果是注解类型则返回 true</td>\n</tr>\n<tr>\n<td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td>\n<td>如果是指定类型注解类型则返回 true</td>\n</tr>\n<tr>\n<td>isAnonymousClass()</td>\n<td>如果是匿名类则返回 true</td>\n</tr>\n<tr>\n<td>isArray()</td>\n<td>如果是一个数组类则返回 true</td>\n</tr>\n<tr>\n<td>isEnum()</td>\n<td>如果是枚举类则返回 true</td>\n</tr>\n<tr>\n<td>isInstance(Object obj)</td>\n<td>如果 obj 是该类的实例则返回 true</td>\n</tr>\n<tr>\n<td>isInterface()</td>\n<td>如果是接口类则返回 true</td>\n</tr>\n<tr>\n<td>isLocalClass()</td>\n<td>如果是局部类则返回 true</td>\n</tr>\n<tr>\n<td>isMemberClass()</td>\n<td>如果是内部类则返回 true</td>\n</tr>\n</tbody></table>\n<h3 id=\"Field-类\"><a href=\"#Field-类\" class=\"headerlink\" title=\"Field 类\"></a>Field 类</h3><p><a href=\"https://developer.android.google.cn/reference/java/lang/reflect/Field\">Field</a>代表类的成员变量（成员变量也称为类的属性）。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>equals(Object obj)</td>\n<td>属性与 obj 相等则返回 true</td>\n</tr>\n<tr>\n<td>get(Object obj)</td>\n<td>获得 obj 中对应的属性值</td>\n</tr>\n<tr>\n<td>set(Object obj, Object value)</td>\n<td>设置 obj 中对应属性值</td>\n</tr>\n</tbody></table>\n<h3 id=\"Method-类\"><a href=\"#Method-类\" class=\"headerlink\" title=\"Method 类\"></a>Method 类</h3><p><a href=\"https://developer.android.google.cn/reference/java/lang/reflect/Method\">Method</a>代表类的方法。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>invoke(Object obj, Object… args)</td>\n<td>传递 object 对象及参数调用该对象对应的方法</td>\n</tr>\n</tbody></table>\n<h3 id=\"Constructor-类\"><a href=\"#Constructor-类\" class=\"headerlink\" title=\"Constructor 类\"></a>Constructor 类</h3><p><a href=\"https://developer.android.google.cn/reference/java/lang/reflect/Constructor\">Constructor</a>代表类的构造方法。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>newInstance(Object… initargs)</td>\n<td>根据传递的参数创建类的对象</td>\n</tr>\n</tbody></table>\n<h3 id=\"获取-Class-类的实例\"><a href=\"#获取-Class-类的实例\" class=\"headerlink\" title=\"获取 Class 类的实例\"></a>获取 Class 类的实例</h3><ul>\n<li>类名.class</li>\n<li>对象.getClass</li>\n<li>Class.forName(类路径)</li>\n<li>内置基本类型包装类.TYPE</li>\n</ul>\n<h3 id=\"那些类型可以有-Class-对象\"><a href=\"#那些类型可以有-Class-对象\" class=\"headerlink\" title=\"那些类型可以有 Class 对象\"></a>那些类型可以有 Class 对象</h3><ul>\n<li>class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</li>\n<li>interface：接口</li>\n<li>[]：数组</li>\n<li>enum：枚举</li>\n<li>annotation：注解@interface</li>\n<li>primitive type：基本数据类型</li>\n<li>void</li>\n</ul>\n<h3 id=\"类的加载与-ClassLoader-的理解\"><a href=\"#类的加载与-ClassLoader-的理解\" class=\"headerlink\" title=\"类的加载与 ClassLoader 的理解\"></a>类的加载与 ClassLoader 的理解</h3><ul>\n<li>加载：将 class 文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的 java.lang.Class 对象</li>\n<li>链接：将 Java 类的二进制代码合并到 JVM 的运行状态之中的过程。<ul>\n<li>验证：确保加载的类信息符合 JVM 规范，没有安全方面的问题</li>\n<li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li>\n<li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程</li>\n</ul>\n</li>\n<li>初始化：<ul>\n<li>执行类构造器<clint>()方法的过程。类构造器<clint>()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）</li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</li>\n<li>虚拟机会保证一个类的<clint>()方法在多线程环境中被正确加锁和同步</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"什么时候会发生类初始化？\"><a href=\"#什么时候会发生类初始化？\" class=\"headerlink\" title=\"什么时候会发生类初始化？\"></a>什么时候会发生类初始化？</h3><ul>\n<li>类的主动引用（一定会发生类的初始化）<ul>\n<li>当虚拟机启动，先初始化 main 方法所在的类</li>\n<li>new 一个类的对象</li>\n<li>调用类的静态成员（除了 final 常量）和静态方法</li>\n<li>使用 java.lang.reflect 包的方法对类进行反射调用</li>\n<li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li>\n</ul>\n</li>\n<li>类的被动引用（不会发生类的初始化）<ul>\n<li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化</li>\n<li>通过数组定义类引用，不会触发此类初始化</li>\n<li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类加载器的作用\"><a href=\"#类加载器的作用\" class=\"headerlink\" title=\"类加载器的作用\"></a>类加载器的作用</h3><p><strong>类加载器的作用：</strong></p>\n<p>将 class 文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的 java.lang.Class 对象，作为方法区中类数据的访问入口。</p>\n<p><strong>类缓存：</strong></p>\n<p>标准的 JavaSE 类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过 JVM 垃圾回收机制可以回收这些 Class 对象</p>\n<p>三大类加载器：</p>\n<ul>\n<li>引导类加载器 – Bootstrap Classloader</li>\n<li>扩展类加载器 – Extension Classloader</li>\n<li>系统类加载器 – System Classloader</li>\n</ul>\n","categories":["后端开发"],"tags":["技巧","笔记"]},{"title":"Java 中的 IO 流","url":"/2021/04/04/13a54546.html","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>Java的I/O主要的用途就是文件数据的读写、数据的网络发送与接收等场合。</p>\n<p>流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备间的传输称之为流，流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。对于文件内容的操作主要分为两大类：字符流和字节流。</p>\n<h2 id=\"二、I-O-流的分类\"><a href=\"#二、I-O-流的分类\" class=\"headerlink\" title=\"二、I/O 流的分类\"></a>二、I/O 流的分类</h2><p>根据处理数据类型的不同分为：字符流和字节流。</p>\n<p>根据数据流向不同分为：输入流和输出流。</p>\n<h3 id=\"1、字符流和字节流\"><a href=\"#1、字符流和字节流\" class=\"headerlink\" title=\"1、字符流和字节流\"></a>1、字符流和字节流</h3><p>字符流的由来：因为数据编码的不同，而有了对字符进行高效操作的流对象。本质其实就是基于字节流流读取时，去查了指定的码表。字节流和字符流的区别：</p>\n<ol>\n<li>读写单位不同：字节流以字节（8bit）为单位，字符流以字符为单位，根据码表映射字符，一次可能多个字节。</li>\n<li>处理对象不同：字节流能处理所有类型的数据（如图片、avi等），而字符流只能处理字符类型的数据。</li>\n<li>字节流在操作的时候本身是不会用到缓冲区的，是文件本事的直接操作的；而字符流在操作的时候下后是会用到缓冲区的，通过缓冲区来操作文件。</li>\n</ol>\n<p><strong>结论：优先选用字节流。首先因为硬盘上的所有文件都是以字节的形式进行传输或者保存的，包括图片等内容。但是字符只是在内存汇总才会形成，所以在开发中，字节流使用广泛。</strong></p>\n<h3 id=\"2、输入流和输出流\"><a href=\"#2、输入流和输出流\" class=\"headerlink\" title=\"2、输入流和输出流\"></a>2、输入流和输出流</h3><p>对输入流只能进行读操作，对输出流只能进行写操作，程序中需要根据待传输数据的不同特性而使用不同的流。</p>\n<h3 id=\"3、常见-I-O-流对象\"><a href=\"#3、常见-I-O-流对象\" class=\"headerlink\" title=\"3、常见 I/O 流对象\"></a>3、常见 I/O 流对象</h3><ul>\n<li><p>InputStream</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210401214602.png\" alt=\"img\"></p>\n</li>\n<li><p>OutputStream</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210401214647.png\" alt=\"img\"  /></li>\n<li><p>Reader</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210401214855.png\" alt=\"img\"></p>\n</li>\n<li><p>Writer</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210401214921.png\" alt=\"img\"></p>\n</li>\n</ul>\n<h2 id=\"三、常见问题\"><a href=\"#三、常见问题\" class=\"headerlink\" title=\"三、常见问题\"></a>三、常见问题</h2><h3 id=\"1、字节流和字符流的使用情况\"><a href=\"#1、字节流和字符流的使用情况\" class=\"headerlink\" title=\"1、字节流和字符流的使用情况\"></a>1、字节流和字符流的使用情况</h3><p>字符流和字节流的使用范围：字节流一般用来处理图像、视频，以及PPT、Word类型的文件。字符流一般用于处理纯文本类型的文件，如txt文件等，字节流可以用来处理纯文本文件，但字符流不能用户处理图像、视频等非文本类型的文件。</p>\n<h3 id=\"2、字符流与字节流的转换\"><a href=\"#2、字符流与字节流的转换\" class=\"headerlink\" title=\"2、字符流与字节流的转换\"></a>2、字符流与字节流的转换</h3><p>转换流的作用，文本文件在硬盘中以字节流的形式存储时，通过InputStreamReader读取后转化成字符流交给程序处理，程序处理的字符流通过OutputStreamWriter转换成字节流保存。</p>\n<h3 id=\"3、字节流与字符流的区别\"><a href=\"#3、字节流与字符流的区别\" class=\"headerlink\" title=\"3、字节流与字符流的区别\"></a>3、字节流与字符流的区别</h3><p>字节流没有缓冲区，是直接输出的，而字符流需要输出到缓冲区的。因此在输出时，字节流不调用close()方法时，信息已经输出了，而字符流只有在调用close()方法关闭缓冲区时，信息才输出。要想字符流在未关闭时输出信息，需要手动调用flush()方法。</p>\n<ol>\n<li>读写单位不同：字节流以字节（8bit）为单位，字符流以字符为单位，根据码表映射字符，一次可能多个字节。</li>\n<li>处理对象不同：字节流能处理所有类型的数据（如图片、avi等），而字符流只能处理字符类型的数据。</li>\n<li>字节流在操作的时候本身是不会用到缓冲区的，是文件本事的直接操作的；而字符流在操作的时候下后是会用到缓冲区的，通过缓冲区来操作文件。</li>\n</ol>\n<h2 id=\"四、IO-NIO-面试题\"><a href=\"#四、IO-NIO-面试题\" class=\"headerlink\" title=\"四、IO/NIO 面试题\"></a>四、IO/NIO 面试题</h2><h3 id=\"1、Java-中-IO-流分为几种\"><a href=\"#1、Java-中-IO-流分为几种\" class=\"headerlink\" title=\"1、Java 中 IO 流分为几种\"></a>1、Java 中 IO 流分为几种</h3><ol>\n<li>按照流的流向分：分为输入流与输出流</li>\n<li>按照操作单元分：分为字节流与字符流</li>\n<li>按照流的角色分：分为节点流与处理流</li>\n</ol>\n<h3 id=\"2、Java-IO-与-NIO的区别\"><a href=\"#2、Java-IO-与-NIO的区别\" class=\"headerlink\" title=\"2、Java IO 与 NIO的区别\"></a>2、Java IO 与 NIO的区别</h3><p>NIO即New IO，这个库是在JDK1.4中才引入的。NIO和IO有相同的作用和目的，NIO主要用到的是块，所以NIO的效率要比IO高很多。在Java API中提供了两套NIO，一套是针对标准输入输出NIO，另一套就是网络编程NIO。</p>\n<h3 id=\"3、Java-中常用的-IO-类有哪些\"><a href=\"#3、Java-中常用的-IO-类有哪些\" class=\"headerlink\" title=\"3、Java 中常用的 IO 类有哪些\"></a>3、Java 中常用的 IO 类有哪些</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">File</span><br><span class=\"line\">FileInputStream、FileOutputStream</span><br><span class=\"line\"><span class=\"keyword\">BufferedInputStream、BufferedOutputStream</span></span><br><span class=\"line\"><span class=\"keyword\"></span>FileReader、FileWrter</span><br><span class=\"line\"><span class=\"keyword\">BufferedReader、BufferedWriter</span></span><br><span class=\"line\"><span class=\"keyword\"></span>ObjectInputStream、ObjectOutputStream</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、字节流与字符流的区别\"><a href=\"#4、字节流与字符流的区别\" class=\"headerlink\" title=\"4、字节流与字符流的区别\"></a>4、字节流与字符流的区别</h3><p>字节流是以字节为单位进行传输，大小为8bit</p>\n<p>字符流是以字符为单位进行传输，大小为16bit</p>\n","categories":["后端开发"],"tags":["笔记","Java"]},{"title":"到底什么是前后端分离？","url":"/2021/03/06/cc9e7a55.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>到底什么是<strong>前后端分离</strong>？通俗的来说就是前端的开发与后端的开发分离，前后端分离已成为互联网项目开发的业界标准使用方式，通过<strong>Nginx</strong>+<strong>Tomcat</strong>的方式（也可以中间加一个 NodeJS）有效地对前端和后端的开发进行解耦。其实，前后端分离的核心思想就是前端 HTML 页面通过<strong>AJAX</strong>调用后端的<strong>RESTFUL API</strong>接口，并通过<strong>JSON</strong>数据进行交互。</p>\n<h2 id=\"为什么要进行前后端分离？\"><a href=\"#为什么要进行前后端分离？\" class=\"headerlink\" title=\"为什么要进行前后端分离？\"></a>为什么要进行前后端分离？</h2><ol>\n<li>前后端耦合的缺点（以 JSP 为例）<ul>\n<li>动态资源和静态资源全部耦合在一起，服务器压力大</li>\n<li>第一次请求 JSP，必须要在 WEB 服务器中编译成 Servlet，第一次运行会较慢</li>\n<li>如果 JSP 中的内容很多，页面响应会很慢，因为是同步加载，一次输出所有内容</li>\n<li>······</li>\n</ul>\n</li>\n<li>前后端分离的优点<ul>\n<li>前后端分离可以真正地实现前后端解耦，前端服务器使用 Nginx，前端服务器负责控制页面引用、跳转和路由，前端页面通过 AJAX 异步调用后端的接口，后端服务器使用 Tomcat，加快整体响应速度</li>\n<li>前后端分离的模式下，即使后端服务器暂时超时或宕机了，前端页面也会正常访问，只不过数据刷不出来而已</li>\n<li>前后端分离的模式下，后台的接口可以复用。（多端应用）</li>\n<li>页面显示再多的内容也不怕了，因为从同步加载改成了异步加载。</li>\n<li>······</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"如何实现前后端分离？\"><a href=\"#如何实现前后端分离？\" class=\"headerlink\" title=\"如何实现前后端分离？\"></a>如何实现前后端分离？</h2><p>这里讲解的方式是 SpringBoot+Vue 进行分离，分别部署到 Tomcat 与 NodeJs 两个不同的服务器上。</p>\n<h3 id=\"创建一个-SpringBoot-项目\"><a href=\"#创建一个-SpringBoot-项目\" class=\"headerlink\" title=\"创建一个 SpringBoot 项目\"></a>创建一个 SpringBoot 项目</h3><p>…</p>\n<h3 id=\"使用-vue-cli-创建-vue-项目\"><a href=\"#使用-vue-cli-创建-vue-项目\" class=\"headerlink\" title=\"使用 vue-cli 创建 vue 项目\"></a>使用 vue-cli 创建 vue 项目</h3><p>vue-cli 官网：<a href=\"https://cli.vuejs.org/zh/\">https://cli.vuejs.org/zh/</a></p>\n<ol>\n<li><p>安装 nodejs 环境</p>\n<p><a href=\"https://nodejs.org/en/download/\">官网下载</a></p>\n<p>一直默认下一步就行，路径可以自定义，安装完之后输入<code>node -v</code>，<code>npm -v</code>查看版本号。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210305235506.png\" alt=\"image-20210305234857573\" style=\"zoom: 67%;\" /></li>\n<li><p>安装<strong>vue-cli</strong></p>\n<ul>\n<li>npm 默认是从国外的服务器下载，受网络影响较大。设置淘宝镜像可以解决这个问题</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config set registry https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测是否设置成功</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm<span class=\"built_in\"> config </span><span class=\"built_in\">get</span> registry</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306000237.png\" alt=\"image-20210306000227284\" style=\"zoom: 67%;\" />\n\n<ul>\n<li>全局安装<code>vue-cli</code></li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检查是否安装成功</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306000601.png\" alt=\"image-20210306000556387\" style=\"zoom: 67%;\" /></li>\n<li><p>创建新项目</p>\n<ul>\n<li>运行以下命令来创建一个新项目：</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">vue create hello-world</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>选择相应的设置(预设)完成创建</li>\n</ul>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306002820.png\" alt=\"image-20210306002818051\" style=\"zoom:67%;\" />\n\n<ul>\n<li>创建成功</li>\n</ul>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306003127.png\" alt=\"image-20210306003126725\" style=\"zoom: 50%;\" /></li>\n<li><p>启动 vue 项目</p>\n</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">run</span> serve</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-vue-项目\"><a href=\"#配置-vue-项目\" class=\"headerlink\" title=\"配置 vue 项目\"></a>配置 vue 项目</h3><ul>\n<li>安装<code>axios</code></li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> axios</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>初始化 vue 项目结构</p>\n<p>使用<code>vue-cli</code>创建 vue 项目会有一个初始页面，我们在开发过程中并不需要，将无用的东西去掉</p>\n</li>\n</ul>\n<h3 id=\"解决跨域的问题\"><a href=\"#解决跨域的问题\" class=\"headerlink\" title=\"解决跨域的问题\"></a>解决跨域的问题</h3><blockquote>\n<p>在 Web 端 Vue 项目开发过程中，跨域问题是不可避免的；</p>\n</blockquote>\n<h4 id=\"Webpack-配置-proxy-实现代理——开发环境\"><a href=\"#Webpack-配置-proxy-实现代理——开发环境\" class=\"headerlink\" title=\"Webpack 配置 proxy 实现代理——开发环境\"></a>Webpack 配置 proxy 实现代理——开发环境</h4><blockquote>\n<p>我们的项目工程是通过<code>Vue-cli3</code>来搭建的，因此没有了<code>Webpack</code>的显式配置文件；需要我们在工程根目录下手动创建<code>vue.config.js</code>去实现 Webpack 的配置</p>\n</blockquote>\n<ol>\n<li><p>新增<code>vue.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,<span class=\"comment\">// vue项目启动时自动打开浏览器</span></span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api&#x27;</span>: &#123; <span class=\"comment\">// &#x27;/api&#x27;是代理标识，用于告诉node，url前面是/api的就是使用代理的</span></span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&quot;http://localhost:8081&quot;</span>, <span class=\"comment\">//目标地址，一般是指后台服务器地址</span></span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否跨域</span></span><br><span class=\"line\">        <span class=\"attr\">pathRewrite</span>: &#123; <span class=\"comment\">// pathRewrite 的作用是把实际Request Url中的&#x27;/api&#x27;用&quot;&quot;代替</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，我们发起的每次 http 请求的 Request Url 的前面一部分都会和我们配置的源一样；</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/api/getUserList&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们项目跑在开发环境下的<code>http://localhost:8080</code>上，那么上述请求的 Request Url 的就是 <code>http://localhost:8080/api/bookCate</code>;这应该就是我们的代理服务器中该资源的地址，与客户端同源；而数据的实际来源则是<code>http://localhost:8081/api/bookCate</code>，这样即实现代理跨域；</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>前后端分离并非仅仅是一种开发模式，而是一种架构模式（前后端分离架构）。千万不要以为只有在写代码的时候把前端和后端分开就是前后端分离了，这样的理解太片面了。前后端分离是需要区分前后端项目的，即前端项目和后端项目是两个项目，放在两个不同的服务器，需要独立部署，两个不同的工程，两个不同的代码库，两组不同的开发人员。前后端开发工程师需要约定交互的接口，实现并行开发。而在开发结束之后，前端项目和后端项目都需要进行独立部署，前端通过 AJAX 来调用 HTTP 请求，调用后端的 RESTFUL API。前端只需要关注页面的样式与动态数据的解析和渲染，不用关心数据是怎么产生的；后端则专注于具体的业务逻辑，返回前端展现所需要的业务数据即可。</p>\n","categories":["随笔小记"],"tags":["技巧","笔记"]},{"title":"MongoDB 数据库","url":"/2020/06/18/bd0448f7.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>MongoDB 数据库的学习</p>\n<span id=\"more\"></span>\n\n<h2 id=\"MongoDB-的简介\"><a href=\"#MongoDB-的简介\" class=\"headerlink\" title=\"MongoDB 的简介\"></a>MongoDB 的简介</h2><h3 id=\"MongoDB-的概述\"><a href=\"#MongoDB-的概述\" class=\"headerlink\" title=\"MongoDB 的概述\"></a>MongoDB 的概述</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/mongo.jpg\"></p>\n<ul>\n<li>MongoDB 是由 C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</li>\n<li>在高负载的情况下，添加更多的节点，可以保证服务器性能。</li>\n<li>MongoDB 旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</li>\n<li>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成</li>\n<li>MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</li>\n</ul>\n<h2 id=\"MongoDB-的安装\"><a href=\"#MongoDB-的安装\" class=\"headerlink\" title=\"MongoDB 的安装\"></a>MongoDB 的安装</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><code>apt install mongodb</code></p>\n<p>安装完成可以用<code>mongo -version</code>来查看版本检查是否安装成功</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/mongo1.jpg\"></p>\n<h3 id=\"MongoDB-基本管理\"><a href=\"#MongoDB-基本管理\" class=\"headerlink\" title=\"MongoDB 基本管理\"></a>MongoDB 基本管理</h3><p>通过以下命令，可以对 mongoDB 数据库进行一些基本的操作：</p>\n<ul>\n<li>查看服务状态<br>service mongodb status</li>\n<li>启动服务<br>service mongodb start</li>\n<li>停止服务<br>service mongodb stop</li>\n<li>重新载入资源<br>service mongodb reload</li>\n</ul>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p><code>apt --purge remove mongodb mongodb-clients mongodb-server</code></p>\n<h2 id=\"MongoDB-基本配置\"><a href=\"#MongoDB-基本配置\" class=\"headerlink\" title=\"MongoDB 基本配置\"></a>MongoDB 基本配置</h2><h3 id=\"MongoDB-文件结构\"><a href=\"#MongoDB-文件结构\" class=\"headerlink\" title=\"MongoDB 文件结构\"></a>MongoDB 文件结构</h3><p>mongoDB 数据库安装好以后，有以下四个比较重要的文件和目录：</p>\n<ul>\n<li>主启动文件：/usr/bin/mongod</li>\n<li>配置文件：/etc/mongodb.conf</li>\n<li>日志文件存放目录：/var/log/mongodb</li>\n<li>数据存放位置目录：/var/lib/mongodb</li>\n</ul>\n<h2 id=\"MongoDB-基本操作\"><a href=\"#MongoDB-基本操作\" class=\"headerlink\" title=\"MongoDB 基本操作\"></a>MongoDB 基本操作</h2><p>启动 MongoDB 服务后可以进行 MongoDB 的基本操作</p>\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>使用<code>mongo</code>命令连接数据库：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/mongo2.jpg\"></p>\n<h3 id=\"查看已有的数据库\"><a href=\"#查看已有的数据库\" class=\"headerlink\" title=\"查看已有的数据库\"></a>查看已有的数据库</h3><p>使用<code>show dbs</code>命令进行查看：</p>\n<figure class=\"highlight node-repl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span> <span class=\"language-javascript\">show dbs</span></span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">local   0.000GB</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用数据库\"><a href=\"#使用数据库\" class=\"headerlink\" title=\"使用数据库\"></a>使用数据库</h3><p>如果使用的数据库不存在，就创建同名数据库：</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;</span> <span class=\"keyword\">use</span> books</span><br><span class=\"line\">switched <span class=\"keyword\">to</span> db books  <span class=\"comment\">//选中books数据库</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建数据集合\"><a href=\"#创建数据集合\" class=\"headerlink\" title=\"创建数据集合\"></a>创建数据集合</h3><p>类似于一张表，命令为<code>db.createCollection(&quot;表名&quot;)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.<span class=\"title function_\">createCollection</span>(<span class=\"params\"><span class=\"string\">&quot;user&quot;</span></span>)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;ok&quot;</span> : <span class=\"number\">1</span> &#125;   <span class=\"comment\">//user创建成功</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对数据集合进行操作\"><a href=\"#对数据集合进行操作\" class=\"headerlink\" title=\"对数据集合进行操作\"></a>对数据集合进行操作</h3><h4 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h4><p>插入命令有两种</p>\n<p><code>db.表名.insert(&#123;&#125;)</code></p>\n<p><code>db.表名.save(&#123;&#125;)</code></p>\n<p>两者区别在于：插入数据时，如果_id 存在，insert 操作时，则插入失败，save 操作时，则更新数据</p>\n<h5 id=\"插入一条数据：\"><a href=\"#插入一条数据：\" class=\"headerlink\" title=\"插入一条数据：\"></a>插入一条数据：</h5><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db<span class=\"selector-class\">.user</span><span class=\"selector-class\">.insert</span>(&#123;_id:<span class=\"number\">1</span>,uname:<span class=\"string\">&quot;zhangsan&quot;</span>,age:<span class=\"number\">20</span>,sex:<span class=\"string\">&quot;男&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">WriteResult</span><span class=\"params\">(&#123; <span class=\"string\">&quot;nInserted&quot;</span> : <span class=\"number\">1</span> &#125;)</span></span>   <span class=\"comment\">//一般情况，第一个字段都是_id,如果没有，也会自动添加一个_id</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"插入多条数据：\"><a href=\"#插入多条数据：\" class=\"headerlink\" title=\"插入多条数据：\"></a>插入多条数据：</h5><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.user.<span class=\"title function_ invoke__\">insert</span>([&#123;<span class=\"attr\">_id</span>:<span class=\"number\">2</span>,<span class=\"attr\">uname</span>:<span class=\"string\">&quot;lisi&quot;</span>,<span class=\"attr\">age</span>:<span class=\"number\">19</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&quot;男&quot;</span>&#125;,&#123;<span class=\"attr\">_id</span>:<span class=\"number\">3</span>,<span class=\"attr\">uname</span>:<span class=\"string\">&quot;wangwu&quot;</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>,<span class=\"attr\">sex</span>:<span class=\"string\">&quot;女&quot;</span>&#125;])   <span class=\"comment\">//插入多条数据中间用逗号分开，然后用[]包起来就行</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">BulkWriteResult</span>(&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;writeErrors&quot;</span> : [ ],</span><br><span class=\"line\">        <span class=\"string\">&quot;writeConcernErrors&quot;</span> : [ ],</span><br><span class=\"line\">        <span class=\"string\">&quot;nInserted&quot;</span> : <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;nUpserted&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;nMatched&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;nModified&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;nRemoved&quot;</span> : <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;upserted&quot;</span> : [ ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h4><h5 id=\"不带条件的查询\"><a href=\"#不带条件的查询\" class=\"headerlink\" title=\"不带条件的查询\"></a>不带条件的查询</h5><p>查询命令：<code>db.表名.find()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.<span class=\"property\">user</span>.<span class=\"title function_\">find</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : <span class=\"number\">1</span>, <span class=\"string\">&quot;uname&quot;</span> : <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">20</span>, <span class=\"string\">&quot;sex&quot;</span> : <span class=\"string\">&quot;男&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : <span class=\"number\">2</span>, <span class=\"string\">&quot;uname&quot;</span> : <span class=\"string\">&quot;lisi&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">19</span>, <span class=\"string\">&quot;sex&quot;</span> : <span class=\"string\">&quot;男&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : <span class=\"number\">3</span>, <span class=\"string\">&quot;uname&quot;</span> : <span class=\"string\">&quot;wangwu&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">18</span>, <span class=\"string\">&quot;sex&quot;</span> : <span class=\"string\">&quot;女&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"带条件的查询\"><a href=\"#带条件的查询\" class=\"headerlink\" title=\"带条件的查询\"></a>带条件的查询</h5><p>查询命令：<code>db.表名.find(&#123;条件&#125;)</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.user.<span class=\"title function_ invoke__\">find</span>(&#123;<span class=\"attr\">sex</span>:<span class=\"string\">&quot;男&quot;</span>,<span class=\"attr\">uname</span>:<span class=\"string\">&quot;zhangsan&quot;</span>&#125;)  <span class=\"comment\">//支持多条件查询</span></span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : <span class=\"number\">1</span>, <span class=\"string\">&quot;uname&quot;</span> : <span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">20</span>, <span class=\"string\">&quot;sex&quot;</span> : <span class=\"string\">&quot;男&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h4><p>更新命令：<code>db.表名.update(&#123;条件&#125;,&#123;$set:&#123;&#125;&#125;)</code> //这里条件也和查询一样支持多条件</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db<span class=\"selector-class\">.user</span><span class=\"selector-class\">.update</span>(&#123;_id:<span class=\"number\">1</span>&#125;,&#123;<span class=\"variable\">$set</span>:&#123;uname:<span class=\"string\">&quot;ouwen&quot;</span>&#125;&#125;)  <span class=\"comment\">//把_id为1的uname改为ouwen</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">WriteResult</span><span class=\"params\">(&#123; <span class=\"string\">&quot;nMatched&quot;</span> : <span class=\"number\">1</span>, <span class=\"string\">&quot;nUpserted&quot;</span> : <span class=\"number\">0</span>, <span class=\"string\">&quot;nModified&quot;</span> : <span class=\"number\">1</span> &#125;)</span></span></span><br><span class=\"line\">&gt; db<span class=\"selector-class\">.user</span><span class=\"selector-class\">.find</span>()</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : <span class=\"number\">1</span>, <span class=\"string\">&quot;uname&quot;</span> : <span class=\"string\">&quot;ouwen&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">20</span>, <span class=\"string\">&quot;sex&quot;</span> : <span class=\"string\">&quot;男&quot;</span> &#125;  <span class=\"comment\">//修改成功</span></span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : <span class=\"number\">2</span>, <span class=\"string\">&quot;uname&quot;</span> : <span class=\"string\">&quot;lisi&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">19</span>, <span class=\"string\">&quot;sex&quot;</span> : <span class=\"string\">&quot;男&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : <span class=\"number\">3</span>, <span class=\"string\">&quot;uname&quot;</span> : <span class=\"string\">&quot;wangwu&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">18</span>, <span class=\"string\">&quot;sex&quot;</span> : <span class=\"string\">&quot;女&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h4><p>删除命令：<code>db.表名.remove(&#123;条件&#125;)</code></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db<span class=\"selector-class\">.user</span><span class=\"selector-class\">.remove</span>(&#123;uname:<span class=\"string\">&quot;lisi&quot;</span>&#125;) <span class=\"comment\">//删除uname为lisi的数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">WriteResult</span><span class=\"params\">(&#123; <span class=\"string\">&quot;nRemoved&quot;</span> : <span class=\"number\">1</span> &#125;)</span></span></span><br><span class=\"line\">&gt; db<span class=\"selector-class\">.user</span><span class=\"selector-class\">.find</span>()</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : <span class=\"number\">1</span>, <span class=\"string\">&quot;uname&quot;</span> : <span class=\"string\">&quot;ouwen&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">20</span>, <span class=\"string\">&quot;sex&quot;</span> : <span class=\"string\">&quot;男&quot;</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"string\">&quot;_id&quot;</span> : <span class=\"number\">3</span>, <span class=\"string\">&quot;uname&quot;</span> : <span class=\"string\">&quot;wangwu&quot;</span>, <span class=\"string\">&quot;age&quot;</span> : <span class=\"number\">18</span>, <span class=\"string\">&quot;sex&quot;</span> : <span class=\"string\">&quot;女&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看所有的数据集\"><a href=\"#查看所有的数据集\" class=\"headerlink\" title=\"查看所有的数据集\"></a>查看所有的数据集</h4><p>相当于查看表：<code>show collections</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">show collections</span><br><span class=\"line\">user    <span class=\"regexp\">//</span>我这里只有一张表</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除数据集合\"><a href=\"#删除数据集合\" class=\"headerlink\" title=\"删除数据集合\"></a>删除数据集合</h4><p>类似于删除表：<code>db.表名.drop()</code></p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; db.<span class=\"keyword\">user</span>.<span class=\"keyword\">drop</span>()</span><br><span class=\"line\"><span class=\"keyword\">true</span>    //成功删除<span class=\"keyword\">user</span>表</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><p>先使用要删除的数据库：<code>use books</code></p>\n<p>删除命令：<code>db.dropDatabase()</code></p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">use</span> books   <span class=\"comment\">//使用books数据库</span></span><br><span class=\"line\">switched to <span class=\"keyword\">db</span> books</span><br><span class=\"line\">&gt; <span class=\"keyword\">db</span>.dropDatabase()   <span class=\"comment\">//删除它</span></span><br><span class=\"line\">&#123; <span class=\"string\">&quot;dropped&quot;</span> : <span class=\"string\">&quot;books&quot;</span>, <span class=\"string\">&quot;ok&quot;</span> : 1 &#125;</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\"><span class=\"keyword\">local</span>   0.000GB</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"退出数据库连接\"><a href=\"#退出数据库连接\" class=\"headerlink\" title=\"退出数据库连接\"></a>退出数据库连接</h3><p>可以使用<code>Crl+C</code>或者输入<code>exit</code>回车</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">exit</span></span><br><span class=\"line\">bye</span><br><span class=\"line\">root@iZ2ze4ojx7qtz1wv44gajnZ:~<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n","categories":["中间件"],"tags":["笔记","MongoDB"]},{"title":"Markdown 基本语法","url":"/2020/02/19/5d36ff15.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>\n<p>Markdown 能被使用来撰写电子书、博客等，当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、Gitee 等。</p>\n<p>本站的所有文章也是通过 Markdown 语法来写的。Markdown 语法虽然操作简单，但还是需要记一些语法，下面让我们来学习这些语法：</p>\n<span id=\"more\"></span>\n\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个<code>#</code>号，二级标题对应两个<code>#</code>号，以此类推。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下：</p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><hr>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文本*</span></span><br><span class=\"line\"><span class=\"strong\">**粗体文本**</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文本*</span>**</span></span><br><span class=\"line\">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下：<br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><del>这是加删除线的文字</del></p>\n<hr>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><p>下划线可以通过 HTML 的<code>&lt;u&gt;</code>标签来实现：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span>带下划线文本<span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下：</p>\n<p><u>带下划线文本</u></p>\n<hr>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n\n<p>显示结果如下：</p>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n<h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h4><p>有序列表使用数字并加上 . 号来表示，如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下：</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n<h4 id=\"列表嵌套\"><a href=\"#列表嵌套\" class=\"headerlink\" title=\"列表嵌套\"></a>列表嵌套</h4><p>列表嵌套只需在子列表中的选项添加四个空格即可：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第一项嵌套的第二个元素</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项：</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第一个元素</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下：</p>\n<ol>\n<li>第一项：<ul>\n<li>第一项嵌套的第一个元素</li>\n<li>第一项嵌套的第二个元素</li>\n</ul>\n</li>\n<li>第二项：<ul>\n<li>第二项嵌套的第一个元素</li>\n<li>第二项嵌套的第二个元素</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>Markdown 引用是在段落开头使用<code>&gt;</code>符号 ，然后后面紧跟一个空格符号，引用也可以嵌套，例如两个<code>&gt;&gt;</code>，三个<code>&gt;&gt;&gt;</code>，以此类推：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">这是引用的内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt; 这是引用的内容</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; 这是引用的内容</span></span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下：</p>\n<blockquote>\n<p>这是引用的内容</p>\n<blockquote>\n<p>这是引用的内容</p>\n<blockquote>\n<p>这是引用的内容</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>分割线可以三个或三个以上的<code>-</code>或者<code>*</code>都可以：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"><span class=\"section\">----</span></span><br><span class=\"line\"><span class=\"bullet\">***</span></span><br><span class=\"line\"><span class=\"bullet\"></span><span class=\"strong\">*****</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<hr>\n<hr>\n<hr>\n<hr>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>单行代码：代码之间分别用一个反引号包起来，例如：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`这是单行代码`</span></span><br></pre></td></tr></table></figure>\n\n<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"code\"><pre><span class=\"line\">(```)</span><br><span class=\"line\">这是多行代码...</span><br><span class=\"line\">这是多行代码...</span><br><span class=\"line\">这是多行代码...</span><br><span class=\"line\">(```)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：为了防止演示代码与撰写博客文章的 markdown 语法转译，我这里用括号将三个反引号隔开了，实际使用时去掉括号就行了。</p>\n</blockquote>\n<p>显示效果如下：<br>单行代码：</p>\n<p><code>这是单行代码</code></p>\n<p>代码块：</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"code\"><pre><span class=\"line\">这是多行代码...</span><br><span class=\"line\">这是多行代码...</span><br><span class=\"line\">这是多行代码...</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2><p>语法如下：</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">[超链接名](超链接地址 &quot;超链接<span class=\"built_in\">title</span>&quot;)</span><br><span class=\"line\"><span class=\"built_in\">title</span>可加可不加</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">[百度](http:<span class=\"regexp\">//</span>baidu.com)</span><br><span class=\"line\">[Irving的个人博客](https:<span class=\"regexp\">//</span>ouwen666.gitee.io <span class=\"string\">&quot;大爷，来玩啊！&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下：</p>\n<p><a href=\"http://baidu.com/\">百度</a><br><a href=\"https://ouwen666.gitee.io/\" title=\"大爷，来玩啊！\">Irving 的个人博客</a></p>\n<hr>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。<br>语法如下：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">  表头   </span>|<span class=\"string\"> 表头  </span>|</span><br><span class=\"line\">|<span class=\"string\">  ----  </span>|<span class=\"string\"> ----  </span>|</span><br><span class=\"line\">|<span class=\"string\"> 单元格  </span>|<span class=\"string\"> 单元格 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 单元格  </span>|<span class=\"string\"> 单元格 </span>|</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下：</p>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p>语法如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">![图片alt](图片地址 <span class=\"string\">&#x27;&#x27;</span>图片titl<span class=\"string\">e&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class=\"line\">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">![Markdown](<span class=\"regexp\">/images/m</span>d.jpg)</span><br></pre></td></tr></table></figure>\n\n<p>显示效果如下：<br><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/md.jpg\"></p>\n<blockquote>\n<p>注：我这里图片是保存在本地的，所以图片地址哪里是本地目录，也可以用图片的在线链接地址</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>此篇博客总结了我写 Hexo 博客常用的 Markdown 语法，如有不妥之处请查阅 MD 官方文档。</p>\n<p>因为显示效果都是用 Markdown 语法呈现的，而我采用的主题又是通过文章的标题来显示文章目录，所以左侧的文章目录可能有点混乱···</p>\n","categories":["随笔小记"],"tags":["技巧","Markdown"]}]