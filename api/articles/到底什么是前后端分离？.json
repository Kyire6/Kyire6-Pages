{"title":"到底什么是前后端分离？","slug":"到底什么是前后端分离？","date":"2021-03-06T08:25:44.000Z","updated":"2021-03-06T08:26:26.000Z","comments":true,"path":"api/articles/到底什么是前后端分离？.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210305235506.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306000237.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306000601.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306002820.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306003127.png"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>到底什么是<strong>前后端分离</strong>？通俗的来说就是前端的开发与后端的开发分离，前后端分离已成为互联网项目开发的业界标准使用方式，通过<strong>Nginx</strong>+<strong>Tomcat</strong>的方式（也可以中间加一个 NodeJS）有效地对前端和后端的开发进行解耦。其实，前后端分离的核心思想就是前端 HTML 页面通过<strong>AJAX</strong>调用后端的<strong>RESTFUL API</strong>接口，并通过<strong>JSON</strong>数据进行交互。</p>\n<h2 id=\"为什么要进行前后端分离？\"><a href=\"#为什么要进行前后端分离？\" class=\"headerlink\" title=\"为什么要进行前后端分离？\"></a>为什么要进行前后端分离？</h2><ol>\n<li>前后端耦合的缺点（以 JSP 为例）<ul>\n<li>动态资源和静态资源全部耦合在一起，服务器压力大</li>\n<li>第一次请求 JSP，必须要在 WEB 服务器中编译成 Servlet，第一次运行会较慢</li>\n<li>如果 JSP 中的内容很多，页面响应会很慢，因为是同步加载，一次输出所有内容</li>\n<li>······</li>\n</ul>\n</li>\n<li>前后端分离的优点<ul>\n<li>前后端分离可以真正地实现前后端解耦，前端服务器使用 Nginx，前端服务器负责控制页面引用、跳转和路由，前端页面通过 AJAX 异步调用后端的接口，后端服务器使用 Tomcat，加快整体响应速度</li>\n<li>前后端分离的模式下，即使后端服务器暂时超时或宕机了，前端页面也会正常访问，只不过数据刷不出来而已</li>\n<li>前后端分离的模式下，后台的接口可以复用。（多端应用）</li>\n<li>页面显示再多的内容也不怕了，因为从同步加载改成了异步加载。</li>\n<li>······</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"如何实现前后端分离？\"><a href=\"#如何实现前后端分离？\" class=\"headerlink\" title=\"如何实现前后端分离？\"></a>如何实现前后端分离？</h2><p>这里讲解的方式是 SpringBoot+Vue 进行分离，分别部署到 Tomcat 与 NodeJs 两个不同的服务器上。</p>\n<h3 id=\"创建一个-SpringBoot-项目\"><a href=\"#创建一个-SpringBoot-项目\" class=\"headerlink\" title=\"创建一个 SpringBoot 项目\"></a>创建一个 SpringBoot 项目</h3><p>…</p>\n<h3 id=\"使用-vue-cli-创建-vue-项目\"><a href=\"#使用-vue-cli-创建-vue-项目\" class=\"headerlink\" title=\"使用 vue-cli 创建 vue 项目\"></a>使用 vue-cli 创建 vue 项目</h3><p>vue-cli 官网：<a href=\"https://cli.vuejs.org/zh/\">https://cli.vuejs.org/zh/</a></p>\n<ol>\n<li><p>安装 nodejs 环境</p>\n<p><a href=\"https://nodejs.org/en/download/\">官网下载</a></p>\n<p>一直默认下一步就行，路径可以自定义，安装完之后输入<code>node -v</code>，<code>npm -v</code>查看版本号。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210305235506.png\" alt=\"image-20210305234857573\" style=\"zoom: 67%;\" /></li>\n<li><p>安装<strong>vue-cli</strong></p>\n<ul>\n<li>npm 默认是从国外的服务器下载，受网络影响较大。设置淘宝镜像可以解决这个问题</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测是否设置成功</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm<span class=\"built_in\"> config </span><span class=\"built_in\">get</span> registry</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306000237.png\" alt=\"image-20210306000227284\" style=\"zoom: 67%;\" />\n\n<ul>\n<li>全局安装<code>vue-cli</code></li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检查是否安装成功</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306000601.png\" alt=\"image-20210306000556387\" style=\"zoom: 67%;\" /></li>\n<li><p>创建新项目</p>\n<ul>\n<li>运行以下命令来创建一个新项目：</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">vue create hello-world</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>选择相应的设置(预设)完成创建</li>\n</ul>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306002820.png\" alt=\"image-20210306002818051\" style=\"zoom:67%;\" />\n\n<ul>\n<li>创建成功</li>\n</ul>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306003127.png\" alt=\"image-20210306003126725\" style=\"zoom: 50%;\" /></li>\n<li><p>启动 vue 项目</p>\n</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">run</span> serve</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-vue-项目\"><a href=\"#配置-vue-项目\" class=\"headerlink\" title=\"配置 vue 项目\"></a>配置 vue 项目</h3><ul>\n<li>安装<code>axios</code></li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> axios</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>初始化 vue 项目结构</p>\n<p>使用<code>vue-cli</code>创建 vue 项目会有一个初始页面，我们在开发过程中并不需要，将无用的东西去掉</p>\n</li>\n</ul>\n<h3 id=\"解决跨域的问题\"><a href=\"#解决跨域的问题\" class=\"headerlink\" title=\"解决跨域的问题\"></a>解决跨域的问题</h3><blockquote>\n<p>在 Web 端 Vue 项目开发过程中，跨域问题是不可避免的；</p>\n</blockquote>\n<h4 id=\"Webpack-配置-proxy-实现代理——开发环境\"><a href=\"#Webpack-配置-proxy-实现代理——开发环境\" class=\"headerlink\" title=\"Webpack 配置 proxy 实现代理——开发环境\"></a>Webpack 配置 proxy 实现代理——开发环境</h4><blockquote>\n<p>我们的项目工程是通过<code>Vue-cli3</code>来搭建的，因此没有了<code>Webpack</code>的显式配置文件；需要我们在工程根目录下手动创建<code>vue.config.js</code>去实现 Webpack 的配置</p>\n</blockquote>\n<ol>\n<li><p>新增<code>vue.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,<span class=\"comment\">// vue项目启动时自动打开浏览器</span></span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api&#x27;</span>: &#123; <span class=\"comment\">// &#x27;/api&#x27;是代理标识，用于告诉node，url前面是/api的就是使用代理的</span></span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&quot;http://localhost:8081&quot;</span>, <span class=\"comment\">//目标地址，一般是指后台服务器地址</span></span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否跨域</span></span><br><span class=\"line\">        <span class=\"attr\">pathRewrite</span>: &#123; <span class=\"comment\">// pathRewrite 的作用是把实际Request Url中的&#x27;/api&#x27;用&quot;&quot;代替</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，我们发起的每次 http 请求的 Request Url 的前面一部分都会和我们配置的源一样；</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/api/getUserList&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们项目跑在开发环境下的<code>http://localhost:8080</code>上，那么上述请求的 Request Url 的就是 <code>http://localhost:8080/api/bookCate</code>;这应该就是我们的代理服务器中该资源的地址，与客户端同源；而数据的实际来源则是<code>http://localhost:8081/api/bookCate</code>，这样即实现代理跨域；</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>前后端分离并非仅仅是一种开发模式，而是一种架构模式（前后端分离架构）。千万不要以为只有在写代码的时候把前端和后端分开就是前后端分离了，这样的理解太片面了。前后端分离是需要区分前后端项目的，即前端项目和后端项目是两个项目，放在两个不同的服务器，需要独立部署，两个不同的工程，两个不同的代码库，两组不同的开发人员。前后端开发工程师需要约定交互的接口，实现并行开发。而在开发结束之后，前端项目和后端项目都需要进行独立部署，前端通过 AJAX 来调用 HTTP 请求，调用后端的 RESTFUL API。前端只需要关注页面的样式与动态数据的解析和渲染，不用关心数据是怎么产生的；后端则专注于具体的业务逻辑，返回前端展现所需要的业务数据即可。</p>\n","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>到底什么是<strong>前后端分离</strong>？通俗的来说就是前端的开发与后端的开发分离，前后端分离已成为互联网项目开发的业界标准使用方式，通过<strong>Nginx</strong>+<strong>Tomcat</strong>的方式（也可以中间加一个 NodeJS）有效地对前端和后端的开发进行解耦。其实，前后端分离的核心思想就是前端 HTML 页面通过<strong>AJAX</strong>调用后端的<strong>RESTFUL API</strong>接口，并通过<strong>JSON</strong>数据进行交互。</p>\n<h2 id=\"为什么要进行前后端分离？\"><a href=\"#为什么要进行前后端分离？\" class=\"headerlink\" title=\"为什么要进行前后端分离？\"></a>为什么要进行前后端分离？</h2><ol>\n<li>前后端耦合的缺点（以 JSP 为例）<ul>\n<li>动态资源和静态资源全部耦合在一起，服务器压力大</li>\n<li>第一次请求 JSP，必须要在 WEB 服务器中编译成 Servlet，第一次运行会较慢</li>\n<li>如果 JSP 中的内容很多，页面响应会很慢，因为是同步加载，一次输出所有内容</li>\n<li>······</li>\n</ul>\n</li>\n<li>前后端分离的优点<ul>\n<li>前后端分离可以真正地实现前后端解耦，前端服务器使用 Nginx，前端服务器负责控制页面引用、跳转和路由，前端页面通过 AJAX 异步调用后端的接口，后端服务器使用 Tomcat，加快整体响应速度</li>\n<li>前后端分离的模式下，即使后端服务器暂时超时或宕机了，前端页面也会正常访问，只不过数据刷不出来而已</li>\n<li>前后端分离的模式下，后台的接口可以复用。（多端应用）</li>\n<li>页面显示再多的内容也不怕了，因为从同步加载改成了异步加载。</li>\n<li>······</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"如何实现前后端分离？\"><a href=\"#如何实现前后端分离？\" class=\"headerlink\" title=\"如何实现前后端分离？\"></a>如何实现前后端分离？</h2><p>这里讲解的方式是 SpringBoot+Vue 进行分离，分别部署到 Tomcat 与 NodeJs 两个不同的服务器上。</p>\n<h3 id=\"创建一个-SpringBoot-项目\"><a href=\"#创建一个-SpringBoot-项目\" class=\"headerlink\" title=\"创建一个 SpringBoot 项目\"></a>创建一个 SpringBoot 项目</h3><p>…</p>\n<h3 id=\"使用-vue-cli-创建-vue-项目\"><a href=\"#使用-vue-cli-创建-vue-项目\" class=\"headerlink\" title=\"使用 vue-cli 创建 vue 项目\"></a>使用 vue-cli 创建 vue 项目</h3><p>vue-cli 官网：<a href=\"https://cli.vuejs.org/zh/\">https://cli.vuejs.org/zh/</a></p>\n<ol>\n<li><p>安装 nodejs 环境</p>\n<p><a href=\"https://nodejs.org/en/download/\">官网下载</a></p>\n<p>一直默认下一步就行，路径可以自定义，安装完之后输入<code>node -v</code>，<code>npm -v</code>查看版本号。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210305235506.png\" alt=\"image-20210305234857573\" style=\"zoom: 67%;\" /></li>\n<li><p>安装<strong>vue-cli</strong></p>\n<ul>\n<li>npm 默认是从国外的服务器下载，受网络影响较大。设置淘宝镜像可以解决这个问题</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测是否设置成功</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm<span class=\"built_in\"> config </span><span class=\"built_in\">get</span> registry</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306000237.png\" alt=\"image-20210306000227284\" style=\"zoom: 67%;\" />\n\n<ul>\n<li>全局安装<code>vue-cli</code></li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检查是否安装成功</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306000601.png\" alt=\"image-20210306000556387\" style=\"zoom: 67%;\" /></li>\n<li><p>创建新项目</p>\n<ul>\n<li>运行以下命令来创建一个新项目：</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">vue create hello-world</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>选择相应的设置(预设)完成创建</li>\n</ul>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306002820.png\" alt=\"image-20210306002818051\" style=\"zoom:67%;\" />\n\n<ul>\n<li>创建成功</li>\n</ul>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210306003127.png\" alt=\"image-20210306003126725\" style=\"zoom: 50%;\" /></li>\n<li><p>启动 vue 项目</p>\n</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">run</span> serve</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-vue-项目\"><a href=\"#配置-vue-项目\" class=\"headerlink\" title=\"配置 vue 项目\"></a>配置 vue 项目</h3><ul>\n<li>安装<code>axios</code></li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> axios</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>初始化 vue 项目结构</p>\n<p>使用<code>vue-cli</code>创建 vue 项目会有一个初始页面，我们在开发过程中并不需要，将无用的东西去掉</p>\n</li>\n</ul>\n<h3 id=\"解决跨域的问题\"><a href=\"#解决跨域的问题\" class=\"headerlink\" title=\"解决跨域的问题\"></a>解决跨域的问题</h3><blockquote>\n<p>在 Web 端 Vue 项目开发过程中，跨域问题是不可避免的；</p>\n</blockquote>\n<h4 id=\"Webpack-配置-proxy-实现代理——开发环境\"><a href=\"#Webpack-配置-proxy-实现代理——开发环境\" class=\"headerlink\" title=\"Webpack 配置 proxy 实现代理——开发环境\"></a>Webpack 配置 proxy 实现代理——开发环境</h4><blockquote>\n<p>我们的项目工程是通过<code>Vue-cli3</code>来搭建的，因此没有了<code>Webpack</code>的显式配置文件；需要我们在工程根目录下手动创建<code>vue.config.js</code>去实现 Webpack 的配置</p>\n</blockquote>\n<ol>\n<li><p>新增<code>vue.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,<span class=\"comment\">// vue项目启动时自动打开浏览器</span></span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api&#x27;</span>: &#123; <span class=\"comment\">// &#x27;/api&#x27;是代理标识，用于告诉node，url前面是/api的就是使用代理的</span></span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&quot;http://localhost:8081&quot;</span>, <span class=\"comment\">//目标地址，一般是指后台服务器地址</span></span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否跨域</span></span><br><span class=\"line\">        <span class=\"attr\">pathRewrite</span>: &#123; <span class=\"comment\">// pathRewrite 的作用是把实际Request Url中的&#x27;/api&#x27;用&quot;&quot;代替</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;^/api&#x27;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置完成后，我们发起的每次 http 请求的 Request Url 的前面一部分都会和我们配置的源一样；</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/api/getUserList&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们项目跑在开发环境下的<code>http://localhost:8080</code>上，那么上述请求的 Request Url 的就是 <code>http://localhost:8080/api/bookCate</code>;这应该就是我们的代理服务器中该资源的地址，与客户端同源；而数据的实际来源则是<code>http://localhost:8081/api/bookCate</code>，这样即实现代理跨域；</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>前后端分离并非仅仅是一种开发模式，而是一种架构模式（前后端分离架构）。千万不要以为只有在写代码的时候把前端和后端分开就是前后端分离了，这样的理解太片面了。前后端分离是需要区分前后端项目的，即前端项目和后端项目是两个项目，放在两个不同的服务器，需要独立部署，两个不同的工程，两个不同的代码库，两组不同的开发人员。前后端开发工程师需要约定交互的接口，实现并行开发。而在开发结束之后，前端项目和后端项目都需要进行独立部署，前端通过 AJAX 来调用 HTTP 请求，调用后端的 RESTFUL API。前端只需要关注页面的样式与动态数据的解析和渲染，不用关心数据是怎么产生的；后端则专注于具体的业务逻辑，返回前端展现所需要的业务数据即可。</p>\n","categories":[{"name":"随笔小记","path":"api/categories/随笔小记.json"}],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"笔记","path":"api/tags/笔记.json"}]}