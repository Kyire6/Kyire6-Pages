{"title":"Dom4j 如何新增 standalone？","slug":"Dom4j如何新增standalone","date":"2021-12-16T07:26:07.000Z","updated":"2021-12-16T07:26:07.000Z","comments":true,"path":"api/articles/Dom4j如何新增standalone.json","excerpt":null,"covers":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>工作中调用一个第三方接口，需要上传 xml 文件。Java 操作 xml 文件的 api 很多，有 Dom、SAX 、JDom、Dom4j。我一般常用的是 Dom4j，但是对接此接口上传的 xml 文件需要添加 <code>standalone=&quot;no&quot;</code> 属性。查阅相关资料，发现 <code>Dom4j -1.6.1</code> 版本并没有提供相应的方法设置。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>重写 <code>XMLWriter</code> 类中的 <code>writeDeclaration</code> 方法，具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.XMLWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StandaloneWriter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">XMLWriter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StandaloneWriter</span><span class=\"params\">(FileOutputStream fileOutputStream, OutputFormat format)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> UnsupportedEncodingException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(fileOutputStream, format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StandaloneWriter</span><span class=\"params\">(FileWriter fileWriter, OutputFormat format)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> UnsupportedEncodingException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(fileWriter, format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeDeclaration</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">OutputFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> getOutputFormat();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">encoding</span> <span class=\"operator\">=</span> format.getEncoding();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!format.isSuppressDeclaration()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (encoding.equals(<span class=\"string\">&quot;UTF8&quot;</span>)) &#123;</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;&lt;?xml version=\\&quot;1.0\\&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!format.isOmitEncoding()) &#123;</span><br><span class=\"line\">                    writer.write(<span class=\"string\">&quot; encoding=\\&quot;UTF-8\\&quot;&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot; standalone=\\&quot;yes\\&quot;&quot;</span>);</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;?&gt;&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;&lt;?xml version=\\&quot;1.0\\&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!format.isOmitEncoding()) &#123;</span><br><span class=\"line\">                    writer.write(<span class=\"string\">&quot; encoding=\\&quot;&quot;</span> + encoding + <span class=\"string\">&quot;\\&quot;&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot; standalone=\\&quot;no\\&quot;&quot;</span>);</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;?&gt;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (format.isNewLineAfterDeclaration()) &#123;</span><br><span class=\"line\">                println();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用过程中，用 <code>StandaloneWriter</code> 替换掉 <code>XMLWriter</code> 即可。</p>\n","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>工作中调用一个第三方接口，需要上传 xml 文件。Java 操作 xml 文件的 api 很多，有 Dom、SAX 、JDom、Dom4j。我一般常用的是 Dom4j，但是对接此接口上传的 xml 文件需要添加 <code>standalone=&quot;no&quot;</code> 属性。查阅相关资料，发现 <code>Dom4j -1.6.1</code> 版本并没有提供相应的方法设置。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>重写 <code>XMLWriter</code> 类中的 <code>writeDeclaration</code> 方法，具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.XMLWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StandaloneWriter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">XMLWriter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StandaloneWriter</span><span class=\"params\">(FileOutputStream fileOutputStream, OutputFormat format)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> UnsupportedEncodingException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(fileOutputStream, format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StandaloneWriter</span><span class=\"params\">(FileWriter fileWriter, OutputFormat format)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> UnsupportedEncodingException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(fileWriter, format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeDeclaration</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">OutputFormat</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> getOutputFormat();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">encoding</span> <span class=\"operator\">=</span> format.getEncoding();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!format.isSuppressDeclaration()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (encoding.equals(<span class=\"string\">&quot;UTF8&quot;</span>)) &#123;</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;&lt;?xml version=\\&quot;1.0\\&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!format.isOmitEncoding()) &#123;</span><br><span class=\"line\">                    writer.write(<span class=\"string\">&quot; encoding=\\&quot;UTF-8\\&quot;&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot; standalone=\\&quot;yes\\&quot;&quot;</span>);</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;?&gt;&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;&lt;?xml version=\\&quot;1.0\\&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!format.isOmitEncoding()) &#123;</span><br><span class=\"line\">                    writer.write(<span class=\"string\">&quot; encoding=\\&quot;&quot;</span> + encoding + <span class=\"string\">&quot;\\&quot;&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot; standalone=\\&quot;no\\&quot;&quot;</span>);</span><br><span class=\"line\">                writer.write(<span class=\"string\">&quot;?&gt;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (format.isNewLineAfterDeclaration()) &#123;</span><br><span class=\"line\">                println();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用过程中，用 <code>StandaloneWriter</code> 替换掉 <code>XMLWriter</code> 即可。</p>\n","categories":[{"name":"后端开发","path":"api/categories/后端开发.json"}],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"笔记","path":"api/tags/笔记.json"}]}