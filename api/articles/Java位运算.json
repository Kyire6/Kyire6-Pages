{"title":"Java 中的位运算","slug":"Java位运算","date":"2021-04-09T08:21:44.000Z","updated":"2021-04-09T08:27:26.000Z","comments":true,"path":"api/articles/Java位运算.json","excerpt":"前言日常开发中位运算不是很常用，但是巧妙的使用位运算可以大量减少运行开销，优化算法。","covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/yu.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/zuoweiyi.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/youweiyi.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/wufuhao.png"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>日常开发中位运算不是很常用，但是巧妙的使用位运算可以大量减少运行开销，优化算法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>Java支持的位运算有7种，具体如下：</p>\n<ul>\n<li><strong>&amp;：按位与。</strong></li>\n<li><strong>|：按位或。</strong></li>\n<li><strong>~：按位非。</strong></li>\n<li><strong>^：按位异或。</strong></li>\n<li><strong>&lt;&lt;：左位移运算符。</strong></li>\n<li><strong>&gt;&gt;：右位移运算符。</strong></li>\n<li><strong>&lt;&lt;&lt;：无符号右移运算符。</strong></li>\n</ul>\n<h3 id=\"按位与-amp\"><a href=\"#按位与-amp\" class=\"headerlink\" title=\"按位与(&amp;)\"></a>按位与(&amp;)</h3><p>按位与的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位与</strong></td>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>只有两个操作数对应位同为1时，结果为1，其余全为0（或者是只要有一个操作数为0，结果就为0）</p>\n<p><strong>举例：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/yu.png\"></p>\n<h3 id=\"按位或\"><a href=\"#按位或\" class=\"headerlink\" title=\"按位或(|)\"></a>按位或(|)</h3><p>按位或的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位或</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>只有两个操作数对应位同为0时，结果为0，其余全为1（或者是只要有一个操作数为1，结果就为1）</p>\n<h3 id=\"按位非\"><a href=\"#按位非\" class=\"headerlink\" title=\"按位非(~)\"></a>按位非(~)</h3><p>按位非的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数</th>\n<th>0</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>按位或</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>取反操作，在求负数的源码中使用过</p>\n<h3 id=\"按位异或\"><a href=\"#按位异或\" class=\"headerlink\" title=\"按位异或(^)\"></a>按位异或(^)</h3><p>按位异或的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位异或</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>只有两个操作数不相同时，结果为1，其余全为0（或者是只要两个操作数相同就为0）</p>\n<h3 id=\"左位移-lt-lt\"><a href=\"#左位移-lt-lt\" class=\"headerlink\" title=\"左位移(&lt;&lt;)\"></a>左位移(&lt;&lt;)</h3><p><strong>运算规则：</strong>算术左移，溢出截断，符号位不变，低位补0。如：2&lt;&lt;2结果为8。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/zuoweiyi.png\"></p>\n<h3 id=\"右位移-gt-gt\"><a href=\"#右位移-gt-gt\" class=\"headerlink\" title=\"右位移(&gt;&gt;)\"></a>右位移(&gt;&gt;)</h3><p><strong>运算规则：</strong>算术右移，溢出截断，符号位不变，用符号位补高位。如：-6&gt;&gt;2结果为-2。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/youweiyi.png\"></p>\n<h3 id=\"无符号右移-gt-gt-gt\"><a href=\"#无符号右移-gt-gt-gt\" class=\"headerlink\" title=\"无符号右移(&gt;&gt;&gt;)\"></a>无符号右移(&gt;&gt;&gt;)</h3><p><strong>运算规则：</strong>低位溢出，高位补0</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/wufuhao.png\"></p>\n<h2 id=\"常见使用\"><a href=\"#常见使用\" class=\"headerlink\" title=\"常见使用\"></a>常见使用</h2><p>因位运算在日常开发中并不是很常用的，这里举两个例子加强理解</p>\n<h3 id=\"判断一个数n的奇偶性\"><a href=\"#判断一个数n的奇偶性\" class=\"headerlink\" title=\"判断一个数n的奇偶性\"></a>判断一个数n的奇偶性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n&amp;<span class=\"number\">1</span> == <span class=\"number\">1</span>?<span class=\"string\">&quot;奇数&quot;</span>:<span class=\"string\">&quot;偶数&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么与1能判断奇偶？所谓的二进制就是满2进1，那么好了，偶数的最低位肯定是0（恰好满2，对不对？），同理，奇数的最低位肯定是1。int类型的1，前31位都是0，无论是1&amp;0还是0&amp;0结果都是0，那么有区别的就是1的最低位上的1了，若n的二进制最低位是1（奇数）与上1，结果为1，反则结果为0。</p>\n<h3 id=\"取绝对值\"><a href=\"#取绝对值\" class=\"headerlink\" title=\"取绝对值\"></a>取绝对值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a^(a&gt;&gt;<span class=\"number\">31</span>))-(a&gt;&gt;<span class=\"number\">31</span>)</span><br></pre></td></tr></table></figure>\n\n<p>先整理一下使用位运算取绝对值的思路：若a为正数，则不变，需要用异或0保持的特点；若a为负数，则其补码为源码翻转每一位后+1，先求其源码，补码-1后再翻转每一位，此时需要使用异或1具有翻转的特点。</p>\n<p>任何正数右移31后只剩符号位0，最终结果为0，任何负数右移31后也只剩符号位1，溢出的31位截断，空出的31位补符号位1，最终结果为-1.右移31操作可以取得任何整数的符号位。</p>\n<p>那么综合上面的步骤，可得到公式。a&gt;&gt;31取得a的符号，若a为正数，a&gt;&gt;31等于0，a^0=a，不变；若a为负数,a&gt;&gt;31等于-1 ，a^-1翻转每一位。</p>\n<h3 id=\"不用临时变量交换两个数\"><a href=\"#不用临时变量交换两个数\" class=\"headerlink\" title=\"不用临时变量交换两个数\"></a>不用临时变量交换两个数</h3><p>连续三次使用异或，并没有临时变量就完成了两个数字交换，怎么实现的呢？</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = <span class=\"number\">3</span>,b = <span class=\"number\">4</span>;</span><br><span class=\"line\">a = a^b;</span><br><span class=\"line\">b = b^a; <span class=\"regexp\">//b=b^(a^b)--&gt;b=a</span></span><br><span class=\"line\"><span class=\"regexp\">a = a^b; //</span><span class=\"function\"><span class=\"title\">a</span>=<span class=\"params\">(a^b)</span>^<span class=\"params\">(b^(a^b))</span>--&gt;</span>a=b</span><br></pre></td></tr></table></figure>\n\n<p>上面的计算主要遵循了一个计算公式：b^(a^b)=a。</p>\n<p>我们可以对以上公式做如下的推导：</p>\n<p>任何数异或本身结果为0.且有定理a^b=b^a。异或是一个无顺序的运算符，则b^a^b=b^b^a，结果为0^a。</p>\n<p>再次列出异或的计算表:</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位异或</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n</tr>\n</tbody></table>\n<p>可以发现，异或0具有保持的特点，而异或1具有翻转的特点。使用这些特点可以进行取数的操作。</p>\n<p>那么0^a，使用异或0具有保持的特点，最终结果就是a。</p>\n<p>其实java中的异或运算法则完全遵守数学中的计算法则：</p>\n<p>①  a ^ a =0</p>\n<p>②  a ^ b =b ^ a</p>\n<p>③  a ^b ^ c = a ^ (b ^ c) = (a ^ b) ^ c;</p>\n<p>④  d = a ^b ^ c 可以推出 a = d ^ b ^ c.</p>\n<p>⑤  a ^ b ^a = b.</p>\n","more":"<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>Java支持的位运算有7种，具体如下：</p>\n<ul>\n<li><strong>&amp;：按位与。</strong></li>\n<li><strong>|：按位或。</strong></li>\n<li><strong>~：按位非。</strong></li>\n<li><strong>^：按位异或。</strong></li>\n<li><strong>&lt;&lt;：左位移运算符。</strong></li>\n<li><strong>&gt;&gt;：右位移运算符。</strong></li>\n<li><strong>&lt;&lt;&lt;：无符号右移运算符。</strong></li>\n</ul>\n<h3 id=\"按位与-amp\"><a href=\"#按位与-amp\" class=\"headerlink\" title=\"按位与(&amp;)\"></a>按位与(&amp;)</h3><p>按位与的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位与</strong></td>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>只有两个操作数对应位同为1时，结果为1，其余全为0（或者是只要有一个操作数为0，结果就为0）</p>\n<p><strong>举例：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/yu.png\"></p>\n<h3 id=\"按位或\"><a href=\"#按位或\" class=\"headerlink\" title=\"按位或(|)\"></a>按位或(|)</h3><p>按位或的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位或</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>只有两个操作数对应位同为0时，结果为0，其余全为1（或者是只要有一个操作数为1，结果就为1）</p>\n<h3 id=\"按位非\"><a href=\"#按位非\" class=\"headerlink\" title=\"按位非(~)\"></a>按位非(~)</h3><p>按位非的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数</th>\n<th>0</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>按位或</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>取反操作，在求负数的源码中使用过</p>\n<h3 id=\"按位异或\"><a href=\"#按位异或\" class=\"headerlink\" title=\"按位异或(^)\"></a>按位异或(^)</h3><p>按位异或的运算规则</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位异或</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n</tr>\n</tbody></table>\n<p><strong>规则总结：</strong>只有两个操作数不相同时，结果为1，其余全为0（或者是只要两个操作数相同就为0）</p>\n<h3 id=\"左位移-lt-lt\"><a href=\"#左位移-lt-lt\" class=\"headerlink\" title=\"左位移(&lt;&lt;)\"></a>左位移(&lt;&lt;)</h3><p><strong>运算规则：</strong>算术左移，溢出截断，符号位不变，低位补0。如：2&lt;&lt;2结果为8。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/zuoweiyi.png\"></p>\n<h3 id=\"右位移-gt-gt\"><a href=\"#右位移-gt-gt\" class=\"headerlink\" title=\"右位移(&gt;&gt;)\"></a>右位移(&gt;&gt;)</h3><p><strong>运算规则：</strong>算术右移，溢出截断，符号位不变，用符号位补高位。如：-6&gt;&gt;2结果为-2。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/youweiyi.png\"></p>\n<h3 id=\"无符号右移-gt-gt-gt\"><a href=\"#无符号右移-gt-gt-gt\" class=\"headerlink\" title=\"无符号右移(&gt;&gt;&gt;)\"></a>无符号右移(&gt;&gt;&gt;)</h3><p><strong>运算规则：</strong>低位溢出，高位补0</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/img/wufuhao.png\"></p>\n<h2 id=\"常见使用\"><a href=\"#常见使用\" class=\"headerlink\" title=\"常见使用\"></a>常见使用</h2><p>因位运算在日常开发中并不是很常用的，这里举两个例子加强理解</p>\n<h3 id=\"判断一个数n的奇偶性\"><a href=\"#判断一个数n的奇偶性\" class=\"headerlink\" title=\"判断一个数n的奇偶性\"></a>判断一个数n的奇偶性</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n&amp;<span class=\"number\">1</span> == <span class=\"number\">1</span>?<span class=\"string\">&quot;奇数&quot;</span>:<span class=\"string\">&quot;偶数&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么与1能判断奇偶？所谓的二进制就是满2进1，那么好了，偶数的最低位肯定是0（恰好满2，对不对？），同理，奇数的最低位肯定是1。int类型的1，前31位都是0，无论是1&amp;0还是0&amp;0结果都是0，那么有区别的就是1的最低位上的1了，若n的二进制最低位是1（奇数）与上1，结果为1，反则结果为0。</p>\n<h3 id=\"取绝对值\"><a href=\"#取绝对值\" class=\"headerlink\" title=\"取绝对值\"></a>取绝对值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a^(a&gt;&gt;<span class=\"number\">31</span>))-(a&gt;&gt;<span class=\"number\">31</span>)</span><br></pre></td></tr></table></figure>\n\n<p>先整理一下使用位运算取绝对值的思路：若a为正数，则不变，需要用异或0保持的特点；若a为负数，则其补码为源码翻转每一位后+1，先求其源码，补码-1后再翻转每一位，此时需要使用异或1具有翻转的特点。</p>\n<p>任何正数右移31后只剩符号位0，最终结果为0，任何负数右移31后也只剩符号位1，溢出的31位截断，空出的31位补符号位1，最终结果为-1.右移31操作可以取得任何整数的符号位。</p>\n<p>那么综合上面的步骤，可得到公式。a&gt;&gt;31取得a的符号，若a为正数，a&gt;&gt;31等于0，a^0=a，不变；若a为负数,a&gt;&gt;31等于-1 ，a^-1翻转每一位。</p>\n<h3 id=\"不用临时变量交换两个数\"><a href=\"#不用临时变量交换两个数\" class=\"headerlink\" title=\"不用临时变量交换两个数\"></a>不用临时变量交换两个数</h3><p>连续三次使用异或，并没有临时变量就完成了两个数字交换，怎么实现的呢？</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = <span class=\"number\">3</span>,b = <span class=\"number\">4</span>;</span><br><span class=\"line\">a = a^b;</span><br><span class=\"line\">b = b^a; <span class=\"regexp\">//b=b^(a^b)--&gt;b=a</span></span><br><span class=\"line\"><span class=\"regexp\">a = a^b; //</span><span class=\"function\"><span class=\"title\">a</span>=<span class=\"params\">(a^b)</span>^<span class=\"params\">(b^(a^b))</span>--&gt;</span>a=b</span><br></pre></td></tr></table></figure>\n\n<p>上面的计算主要遵循了一个计算公式：b^(a^b)=a。</p>\n<p>我们可以对以上公式做如下的推导：</p>\n<p>任何数异或本身结果为0.且有定理a^b=b^a。异或是一个无顺序的运算符，则b^a^b=b^b^a，结果为0^a。</p>\n<p>再次列出异或的计算表:</p>\n<table>\n<thead>\n<tr>\n<th>操作数1</th>\n<th><strong>0</strong></th>\n<th><strong>0</strong></th>\n<th><strong>1</strong></th>\n<th><strong>1</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>操作数2</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>按位异或</strong></td>\n<td><strong>0</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>0</strong></td>\n</tr>\n</tbody></table>\n<p>可以发现，异或0具有保持的特点，而异或1具有翻转的特点。使用这些特点可以进行取数的操作。</p>\n<p>那么0^a，使用异或0具有保持的特点，最终结果就是a。</p>\n<p>其实java中的异或运算法则完全遵守数学中的计算法则：</p>\n<p>①  a ^ a =0</p>\n<p>②  a ^ b =b ^ a</p>\n<p>③  a ^b ^ c = a ^ (b ^ c) = (a ^ b) ^ c;</p>\n<p>④  d = a ^b ^ c 可以推出 a = d ^ b ^ c.</p>\n<p>⑤  a ^ b ^a = b.</p>","categories":[{"name":"后端开发","path":"api/categories/后端开发.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"Java","path":"api/tags/Java.json"}]}