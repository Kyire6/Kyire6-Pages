{"title":"Git Flow 工作流","slug":"GitFlow工作流","date":"2022-08-05T09:35:34.000Z","updated":"2022-08-05T09:35:34.000Z","comments":true,"path":"api/articles/GitFlow工作流.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173721.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173731.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173734.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173738.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173742.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173944.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173948.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174004.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174052.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174108.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174120.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174132.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174217.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174314.png"],"content":"<h2 id=\"Git-Flow-简介\"><a href=\"#Git-Flow-简介\" class=\"headerlink\" title=\"Git Flow 简介\"></a><strong>Git Flow 简介</strong></h2><p><a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">Git Flow</a> 是构建在 Git 之上的一个组织软件开发活动的模型，是在 Git 之上构建的一项软件开发最佳实践。Git Flow 是一套使用 Git 进行源代码管理时的一套行为规范和简化部分 Git 操作的工具。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173721.png\" alt=\"img\"></p>\n<h2 id=\"分支约定\"><a href=\"#分支约定\" class=\"headerlink\" title=\"分支约定\"></a><strong>分支约定</strong></h2><p>Git Flow 有主分支和辅助分支两类分支。其中主分支用于组织与软件开发、部署相关的活动；辅助分支组织为了解决特定的问题而进行的各种开发活动。</p>\n<p><strong>主分支（长期分支）</strong></p>\n<ul>\n<li><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#JjEuXU\">master </a>可执行版本记录分支，上面的每个节点都是发布到线上的一个版本，具体的版本号由 tag 确定</li>\n<li><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#jmNw5a\">develop </a>代码开发分支，所有开发</li>\n</ul>\n<p><strong>辅助分支（短期分支）</strong></p>\n<ul>\n<li><p><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#BglFMs\">feature </a>详细功能分支，每个功能分支应该尽可能的小（最好一天以内），开发完成之后尽快移入仓库中</p>\n</li>\n<li><p><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#sUtR3F\">release </a>测试版本发布分支，同时接收该版本的 bugfix，直到稳定之后再发布到 master，并合并到 develop 中。</p>\n</li>\n<li><p><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#Vq3QKh\">hotfix </a>紧急修复线上 bug 分支，直接从 master 的版本分出，同时最小版本号加 1。修复完成后发布一个最新版本，同时合并到 develop 中。</p>\n</li>\n<li><h3 id=\"主分支\"><a href=\"#主分支\" class=\"headerlink\" title=\"主分支\"></a><strong>主分支</strong></h3></li>\n</ul>\n<p>主分支是所有开发活动的核心分支。所有的开发活动产生的输出物最终都会反映到主分支的代码中。主分支分为<strong>master</strong>分支和<strong>develop</strong>分支。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173731.png\" alt=\"img\"></p>\n<h3 id=\"master-分支\"><a href=\"#master-分支\" class=\"headerlink\" title=\"master 分支\"></a>master 分支</h3><ul>\n<li>master 分支存放的是随时可供在生产环境中部署的稳定版本代码</li>\n<li>master 分支保存官方发布版本历史，release tag 标识不同的发布版本</li>\n<li>一个项目只能有一个 master 分支</li>\n<li>仅在发布新的可供部署的代码时才更新 master 分支上的代码</li>\n<li>每次更新 master，都需对 master 添加指定格式的 tag，用于发布或回滚</li>\n<li>master 分支是保护分支，不可直接 push 到远程仓 master 分支</li>\n<li>master 分支代码只能被 release 分支或 hotfix 分支合并</li>\n</ul>\n<h3 id=\"develop-分支\"><a href=\"#develop-分支\" class=\"headerlink\" title=\"develop 分支\"></a>develop 分支</h3><ul>\n<li><p>develop 分支是保存当前最新开发成果的分支</p>\n</li>\n<li><p>一个项目只能有一个 develop 分支</p>\n</li>\n<li><p>develop 分支衍生出各个 feature 分支</p>\n</li>\n<li><p>develop 分支是保护分支，不可直接 push 到远程仓库 develop 分支</p>\n</li>\n<li><p>develop 分支不能与 master 分支直接交互</p>\n</li>\n<li><h3 id=\"辅助分支\"><a href=\"#辅助分支\" class=\"headerlink\" title=\"辅助分支\"></a><strong>辅助分支</strong></h3></li>\n</ul>\n<p>辅助分支是用于组织解决特定问题的各种软件开发活动的分支。辅助分支主要用于组织软件新功能的并行开发、简化新功能开发代码的跟踪、辅助完成版本发布工作以及对生产代码的缺陷进行紧急修复工作。这些分支与主分支不同，通常只会在有限的时间范围内存在。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173734.png\" alt=\"img\"></p>\n<p><strong>辅助分支包括</strong>：</p>\n<ul>\n<li>用于开发新功能时所使用的<code>feature</code>分支</li>\n<li>用于辅助版本发布的<code>release</code>分支</li>\n<li>用于修正生产代码中的缺陷的<code>hotfix</code>分支</li>\n</ul>\n<p>以上这些分支都有固定的使用目的和分支操作限制。从单纯技术的角度说，这些分支与 Git 其他分支并 没有什么区别，但通过命名，我们定义了使用这些分支的方法。</p>\n<h3 id=\"feature-分支\"><a href=\"#feature-分支\" class=\"headerlink\" title=\"feature 分支\"></a>feature 分支</h3><p>使用规范：</p>\n<ul>\n<li>命名规则：<code>feature/*</code></li>\n<li><code>develop</code>分支的功能分支</li>\n<li>feature 分支使用<code>develop</code>分支作为它们的父类分支</li>\n<li>以功能为单位从<code>develop</code>拉一个<code>feature</code>分支</li>\n<li>每个<code>feature</code>分支颗粒要尽量小，以利于快速迭代和避免冲突</li>\n<li>当其中一个 feature 分支完成后，它会合并回<code>develop</code>分支</li>\n<li>当一个功能因为各种原因不开发了或者放弃了，这个分支直接废弃不影响<code>develop</code>分支</li>\n<li>feature 分支代码可以保存在开发者自己的代码库中而不强制提交到主代码库里</li>\n<li>feature 分支只与 develop 分支交互，不能与 master 分支直接交互</li>\n</ul>\n<p>如有几个同事同时开发，需要分割成几个小功能，每个人都需要从<code>develop</code>中拉出一个<code>feature</code>分支，但是每个<code>feature</code>颗粒要尽量小，因为它需要我们能尽早<code>merge</code>回<code>develop</code>分支，否则冲突解决起来就没完没了。同时，当一个功能因为各种原因不开发了或者放弃了，这个分支直接废弃，不影响<code>develop</code>分支。</p>\n<h3 id=\"release-分支\"><a href=\"#release-分支\" class=\"headerlink\" title=\"release 分支\"></a>release 分支</h3><p>使用规范：</p>\n<ul>\n<li>命名规则：<code>release/*</code>，“*”以本次发布的版本号为标识</li>\n<li><code>release</code>分支主要用来为发布新版的测试、修复做准备</li>\n<li>当需要为发布新版做准备时，从 develop 衍生出一个<code>release</code>分支</li>\n<li><code>release</code>分支可以从<code>develop</code>分支上指定<code>commit</code>派生出</li>\n<li><code>release</code>分支测试通过后，合并到<code>master</code>分支并且给 master 标记一个版本号</li>\n<li><code>release</code>分支一旦建立就将独立，不可再从其他分支 pull 代码</li>\n<li>必须合并回<code>develop</code>分支和<code>master</code>分支</li>\n</ul>\n<p><code>release</code>分支是为发布新的产品版本而设计的。在这个分支上的代码允许做小的缺陷修正、准备发布版本所需的各项说明信息（版本号、发布时间、编译时间等）。通过在<code>release</code>分支上进行这些工作可以让<code>develop</code>分支空闲出来以接受新的<code>feature</code>分支上的代码提交，进入新的软件开发迭代周期。</p>\n<p>当<code>develop</code>分支上的代码已经包含了所有即将发布的版本中所计划包含的软件功能，并且已通过所有测试时，我们就可以考虑准备创建<code>release</code>分支了。而所有在当前即将发布的版本之外的业务需求一定要确保不能混到<code>release</code>分支之内（避免由此引入一些不可控的系统缺陷）。</p>\n<p>成功的派生了<code>release</code>分支，并被赋予版本号之后，<code>develop</code>分支就可以为“下一个版本”服务了。所谓的“下一个版本”是在当前即将发布的版本之后发布的版本。版本号的命名可以依据项目定义的版本号命名规则进行。</p>\n<h3 id=\"hotfix-分支\"><a href=\"#hotfix-分支\" class=\"headerlink\" title=\"hotfix 分支\"></a>hotfix 分支</h3><p>使用规范：</p>\n<ul>\n<li>命名规则：<code>hotfix/*</code></li>\n<li><code>hotfix</code>分支用来快速给已发布产品修复 bug 或微调功能</li>\n<li>只能从<code>master</code>分支指定 tag 版本衍生出来</li>\n<li>一旦完成修复<code>bug</code>，必须合并回<code>master</code>分支和<code>develop</code>分支</li>\n<li><code>master</code>被合并后，应该被标记一个新的版本号</li>\n<li><code>hotfix</code>分支一旦建立就将独立，不可再从其他分支<code>pull</code>代码</li>\n</ul>\n<p>除了是计划外创建的以外，<code>hotfix</code>分支与<code>release</code>分支十分相似：都可以产生一个新的可供在生产环境部署的软件版本。</p>\n<p>当生产环境中的软件遇到了异常情况或者发现了严重到必须立即修复的软件缺陷的时候，就需要从<code>master</code>分支上指定的<code>TAG</code>版本派生<code>hotfix</code>分支来组织代码的紧急修复工作。</p>\n<p>这样做的显而易见的好处是不会打断正在进行的 develop 分支的开发工作，能够让团队中负责新功能开发的人与负责代码紧急修复的人并行的开展工作。</p>\n<h2 id=\"IDEA-安装-gitflow-插件\"><a href=\"#IDEA-安装-gitflow-插件\" class=\"headerlink\" title=\"IDEA 安装 gitflow 插件\"></a>IDEA 安装 gitflow 插件</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>前提你的电脑上需要安装了 git</p>\n<p><code>idea -&gt; file-settings -&gt; Plugins -&gt; marketplace</code>- 搜索 <code>Git Flow Integretion</code> 安装重启 <code>idea</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173738.png\" alt=\"img\"></p>\n<p>点击<code>IDEA</code>右下角的<code>No flow</code>初始化分支</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173742.png\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173944.png\" alt=\"img\"></p>\n<p>果出现 <code>Gitflow</code> 了，就表示完成了，可以使用</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173948.png\" alt=\"img\"></p>\n<p>初始化插件设置建议勾选的设置</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174004.png\" alt=\"img\"></p>\n<blockquote>\n<p>勾选配置说明：</p>\n</blockquote>\n<ul>\n<li><p>Fetch from Origin （开启从远程拉取）</p>\n</li>\n<li><p>Push on finish feature（完成时自动推送）</p>\n</li>\n<li><p>Use custom tag commit message（使用自定义的打标签 commit message）</p>\n</li>\n</ul>\n<h3 id=\"各工作流的执行样例\"><a href=\"#各工作流的执行样例\" class=\"headerlink\" title=\"各工作流的执行样例\"></a><strong>各工作流的执行样例</strong></h3><h4 id=\"新功能开发-feature\"><a href=\"#新功能开发-feature\" class=\"headerlink\" title=\"新功能开发 feature\"></a>新功能开发 <code>feature</code></h4><ol>\n<li>点击 idea 右下角的 <code>Gitflow -&gt; Start Feature -&gt; 填写新需求的简单描述 — ok</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174052.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>新生成的 <code>feature</code> 分支上编辑代码 -&gt; 提交到本地（或者同时推送到远程）</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174108.png\" alt=\"img\"></p>\n<ol start=\"3\">\n<li>新需求开发完成且提交到本地完成 -&gt; 点击 <code>Finish Feature</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174120.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>提测过程进行缺陷修改 -&gt; 在该 <code>release</code> 分支上进行修改</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174132.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li><code>Gitflow</code> 插件会自动将该 <code>release</code> 分支的代码合并到 <code>master</code> 和 <code>develop</code> 分支（本地和远程），并自动删除 <code>release</code> 分支，与此同时会自动触发打 <code>tag</code> 的操作</li>\n</ol>\n<p><strong><code>tag</code> 即表示一个版本，也就是合并一个分支到 <code>master</code> 都需要打一个 tag。</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174217.png\" alt=\"img\"></p>\n<ol start=\"6\">\n<li>提测过程完成——由管理员操作执行点击<code>Finish Releasea</code></li>\n</ol>\n<p><strong>注意：在提测未完成之前，严禁执行<code>Finish Releasea</code>！因为该操作会自动执行分支合并和删除的操作影响其他开发人员的工作</strong></p>\n<h4 id=\"常规缺陷修复-bugfix\"><a href=\"#常规缺陷修复-bugfix\" class=\"headerlink\" title=\"常规缺陷修复 bugfix\"></a><strong>常规缺陷修复</strong> <code>bugfix</code></h4><p><strong>本地自测 bug 修复</strong></p>\n<ol>\n<li>点击 idea 右下角的 <code>Gitflow -&gt; Start Bugfix -&gt; 填写bug信息并选择需要修复的develop分支</code></li>\n</ol>\n<p>以 <code>develop</code> 分支自测发现了 <code>bug</code>，现在要对其进行修复为例</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174314.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li><p>在 <code>Bugfix</code> 分支上 <code>bug</code> 修复完成后 -&gt; 点击 <code>Finish Bugfix</code> 推送修改到本地 <code>develop</code> 分支</p>\n</li>\n<li><p>将本地 <code>develop</code> 分支推送到远程</p>\n</li>\n</ol>\n<p><strong>注意：</strong><code>release</code><strong>分支上的缺陷修复也可以按照该流程执行</strong></p>\n<h4 id=\"线上-bug-修复\"><a href=\"#线上-bug-修复\" class=\"headerlink\" title=\"线上 bug 修复\"></a>线上 bug 修复</h4><ol>\n<li>修改线上 <code>bug</code> 的 <code>hotfix</code> 以 <code>master</code> 分支在运行时，出现了一个之前没有发现的 <code>bug</code>，现在要对其进行修复为例</li>\n<li>点击 idea 右下角的 <code>Gitflow -&gt; Start hotfix</code></li>\n<li>在 <code>hotfix</code> 分支上进行 <code>bug</code> 修复，提交到本地（可以一同推送到远程）</li>\n<li>修复完成之后——点击 <code>Finish hotfix gitflow</code> 插件会自动将该 <code>hotfix</code> 分支的代码合并 <code>master</code> 和 <code>develop</code> 分支（本地和远程），并自动删除 <code>hotfix</code> 分支，与此同时会自动触发打 <code>tag</code> 的操作</li>\n</ol>\n","more":"<h2 id=\"Git-Flow-简介\"><a href=\"#Git-Flow-简介\" class=\"headerlink\" title=\"Git Flow 简介\"></a><strong>Git Flow 简介</strong></h2><p><a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">Git Flow</a> 是构建在 Git 之上的一个组织软件开发活动的模型，是在 Git 之上构建的一项软件开发最佳实践。Git Flow 是一套使用 Git 进行源代码管理时的一套行为规范和简化部分 Git 操作的工具。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173721.png\" alt=\"img\"></p>\n<h2 id=\"分支约定\"><a href=\"#分支约定\" class=\"headerlink\" title=\"分支约定\"></a><strong>分支约定</strong></h2><p>Git Flow 有主分支和辅助分支两类分支。其中主分支用于组织与软件开发、部署相关的活动；辅助分支组织为了解决特定的问题而进行的各种开发活动。</p>\n<p><strong>主分支（长期分支）</strong></p>\n<ul>\n<li><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#JjEuXU\">master </a>可执行版本记录分支，上面的每个节点都是发布到线上的一个版本，具体的版本号由 tag 确定</li>\n<li><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#jmNw5a\">develop </a>代码开发分支，所有开发</li>\n</ul>\n<p><strong>辅助分支（短期分支）</strong></p>\n<ul>\n<li><p><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#BglFMs\">feature </a>详细功能分支，每个功能分支应该尽可能的小（最好一天以内），开发完成之后尽快移入仓库中</p>\n</li>\n<li><p><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#sUtR3F\">release </a>测试版本发布分支，同时接收该版本的 bugfix，直到稳定之后再发布到 master，并合并到 develop 中。</p>\n</li>\n<li><p><a href=\"https://vanxhealth.feishu.cn/wiki/wikcnKl26BkARCg0YyaGTTYqbdg#Vq3QKh\">hotfix </a>紧急修复线上 bug 分支，直接从 master 的版本分出，同时最小版本号加 1。修复完成后发布一个最新版本，同时合并到 develop 中。</p>\n</li>\n<li><h3 id=\"主分支\"><a href=\"#主分支\" class=\"headerlink\" title=\"主分支\"></a><strong>主分支</strong></h3></li>\n</ul>\n<p>主分支是所有开发活动的核心分支。所有的开发活动产生的输出物最终都会反映到主分支的代码中。主分支分为<strong>master</strong>分支和<strong>develop</strong>分支。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173731.png\" alt=\"img\"></p>\n<h3 id=\"master-分支\"><a href=\"#master-分支\" class=\"headerlink\" title=\"master 分支\"></a>master 分支</h3><ul>\n<li>master 分支存放的是随时可供在生产环境中部署的稳定版本代码</li>\n<li>master 分支保存官方发布版本历史，release tag 标识不同的发布版本</li>\n<li>一个项目只能有一个 master 分支</li>\n<li>仅在发布新的可供部署的代码时才更新 master 分支上的代码</li>\n<li>每次更新 master，都需对 master 添加指定格式的 tag，用于发布或回滚</li>\n<li>master 分支是保护分支，不可直接 push 到远程仓 master 分支</li>\n<li>master 分支代码只能被 release 分支或 hotfix 分支合并</li>\n</ul>\n<h3 id=\"develop-分支\"><a href=\"#develop-分支\" class=\"headerlink\" title=\"develop 分支\"></a>develop 分支</h3><ul>\n<li><p>develop 分支是保存当前最新开发成果的分支</p>\n</li>\n<li><p>一个项目只能有一个 develop 分支</p>\n</li>\n<li><p>develop 分支衍生出各个 feature 分支</p>\n</li>\n<li><p>develop 分支是保护分支，不可直接 push 到远程仓库 develop 分支</p>\n</li>\n<li><p>develop 分支不能与 master 分支直接交互</p>\n</li>\n<li><h3 id=\"辅助分支\"><a href=\"#辅助分支\" class=\"headerlink\" title=\"辅助分支\"></a><strong>辅助分支</strong></h3></li>\n</ul>\n<p>辅助分支是用于组织解决特定问题的各种软件开发活动的分支。辅助分支主要用于组织软件新功能的并行开发、简化新功能开发代码的跟踪、辅助完成版本发布工作以及对生产代码的缺陷进行紧急修复工作。这些分支与主分支不同，通常只会在有限的时间范围内存在。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173734.png\" alt=\"img\"></p>\n<p><strong>辅助分支包括</strong>：</p>\n<ul>\n<li>用于开发新功能时所使用的<code>feature</code>分支</li>\n<li>用于辅助版本发布的<code>release</code>分支</li>\n<li>用于修正生产代码中的缺陷的<code>hotfix</code>分支</li>\n</ul>\n<p>以上这些分支都有固定的使用目的和分支操作限制。从单纯技术的角度说，这些分支与 Git 其他分支并 没有什么区别，但通过命名，我们定义了使用这些分支的方法。</p>\n<h3 id=\"feature-分支\"><a href=\"#feature-分支\" class=\"headerlink\" title=\"feature 分支\"></a>feature 分支</h3><p>使用规范：</p>\n<ul>\n<li>命名规则：<code>feature/*</code></li>\n<li><code>develop</code>分支的功能分支</li>\n<li>feature 分支使用<code>develop</code>分支作为它们的父类分支</li>\n<li>以功能为单位从<code>develop</code>拉一个<code>feature</code>分支</li>\n<li>每个<code>feature</code>分支颗粒要尽量小，以利于快速迭代和避免冲突</li>\n<li>当其中一个 feature 分支完成后，它会合并回<code>develop</code>分支</li>\n<li>当一个功能因为各种原因不开发了或者放弃了，这个分支直接废弃不影响<code>develop</code>分支</li>\n<li>feature 分支代码可以保存在开发者自己的代码库中而不强制提交到主代码库里</li>\n<li>feature 分支只与 develop 分支交互，不能与 master 分支直接交互</li>\n</ul>\n<p>如有几个同事同时开发，需要分割成几个小功能，每个人都需要从<code>develop</code>中拉出一个<code>feature</code>分支，但是每个<code>feature</code>颗粒要尽量小，因为它需要我们能尽早<code>merge</code>回<code>develop</code>分支，否则冲突解决起来就没完没了。同时，当一个功能因为各种原因不开发了或者放弃了，这个分支直接废弃，不影响<code>develop</code>分支。</p>\n<h3 id=\"release-分支\"><a href=\"#release-分支\" class=\"headerlink\" title=\"release 分支\"></a>release 分支</h3><p>使用规范：</p>\n<ul>\n<li>命名规则：<code>release/*</code>，“*”以本次发布的版本号为标识</li>\n<li><code>release</code>分支主要用来为发布新版的测试、修复做准备</li>\n<li>当需要为发布新版做准备时，从 develop 衍生出一个<code>release</code>分支</li>\n<li><code>release</code>分支可以从<code>develop</code>分支上指定<code>commit</code>派生出</li>\n<li><code>release</code>分支测试通过后，合并到<code>master</code>分支并且给 master 标记一个版本号</li>\n<li><code>release</code>分支一旦建立就将独立，不可再从其他分支 pull 代码</li>\n<li>必须合并回<code>develop</code>分支和<code>master</code>分支</li>\n</ul>\n<p><code>release</code>分支是为发布新的产品版本而设计的。在这个分支上的代码允许做小的缺陷修正、准备发布版本所需的各项说明信息（版本号、发布时间、编译时间等）。通过在<code>release</code>分支上进行这些工作可以让<code>develop</code>分支空闲出来以接受新的<code>feature</code>分支上的代码提交，进入新的软件开发迭代周期。</p>\n<p>当<code>develop</code>分支上的代码已经包含了所有即将发布的版本中所计划包含的软件功能，并且已通过所有测试时，我们就可以考虑准备创建<code>release</code>分支了。而所有在当前即将发布的版本之外的业务需求一定要确保不能混到<code>release</code>分支之内（避免由此引入一些不可控的系统缺陷）。</p>\n<p>成功的派生了<code>release</code>分支，并被赋予版本号之后，<code>develop</code>分支就可以为“下一个版本”服务了。所谓的“下一个版本”是在当前即将发布的版本之后发布的版本。版本号的命名可以依据项目定义的版本号命名规则进行。</p>\n<h3 id=\"hotfix-分支\"><a href=\"#hotfix-分支\" class=\"headerlink\" title=\"hotfix 分支\"></a>hotfix 分支</h3><p>使用规范：</p>\n<ul>\n<li>命名规则：<code>hotfix/*</code></li>\n<li><code>hotfix</code>分支用来快速给已发布产品修复 bug 或微调功能</li>\n<li>只能从<code>master</code>分支指定 tag 版本衍生出来</li>\n<li>一旦完成修复<code>bug</code>，必须合并回<code>master</code>分支和<code>develop</code>分支</li>\n<li><code>master</code>被合并后，应该被标记一个新的版本号</li>\n<li><code>hotfix</code>分支一旦建立就将独立，不可再从其他分支<code>pull</code>代码</li>\n</ul>\n<p>除了是计划外创建的以外，<code>hotfix</code>分支与<code>release</code>分支十分相似：都可以产生一个新的可供在生产环境部署的软件版本。</p>\n<p>当生产环境中的软件遇到了异常情况或者发现了严重到必须立即修复的软件缺陷的时候，就需要从<code>master</code>分支上指定的<code>TAG</code>版本派生<code>hotfix</code>分支来组织代码的紧急修复工作。</p>\n<p>这样做的显而易见的好处是不会打断正在进行的 develop 分支的开发工作，能够让团队中负责新功能开发的人与负责代码紧急修复的人并行的开展工作。</p>\n<h2 id=\"IDEA-安装-gitflow-插件\"><a href=\"#IDEA-安装-gitflow-插件\" class=\"headerlink\" title=\"IDEA 安装 gitflow 插件\"></a>IDEA 安装 gitflow 插件</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>前提你的电脑上需要安装了 git</p>\n<p><code>idea -&gt; file-settings -&gt; Plugins -&gt; marketplace</code>- 搜索 <code>Git Flow Integretion</code> 安装重启 <code>idea</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173738.png\" alt=\"img\"></p>\n<p>点击<code>IDEA</code>右下角的<code>No flow</code>初始化分支</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173742.png\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173944.png\" alt=\"img\"></p>\n<p>果出现 <code>Gitflow</code> 了，就表示完成了，可以使用</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807173948.png\" alt=\"img\"></p>\n<p>初始化插件设置建议勾选的设置</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174004.png\" alt=\"img\"></p>\n<blockquote>\n<p>勾选配置说明：</p>\n</blockquote>\n<ul>\n<li><p>Fetch from Origin （开启从远程拉取）</p>\n</li>\n<li><p>Push on finish feature（完成时自动推送）</p>\n</li>\n<li><p>Use custom tag commit message（使用自定义的打标签 commit message）</p>\n</li>\n</ul>\n<h3 id=\"各工作流的执行样例\"><a href=\"#各工作流的执行样例\" class=\"headerlink\" title=\"各工作流的执行样例\"></a><strong>各工作流的执行样例</strong></h3><h4 id=\"新功能开发-feature\"><a href=\"#新功能开发-feature\" class=\"headerlink\" title=\"新功能开发 feature\"></a>新功能开发 <code>feature</code></h4><ol>\n<li>点击 idea 右下角的 <code>Gitflow -&gt; Start Feature -&gt; 填写新需求的简单描述 — ok</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174052.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>新生成的 <code>feature</code> 分支上编辑代码 -&gt; 提交到本地（或者同时推送到远程）</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174108.png\" alt=\"img\"></p>\n<ol start=\"3\">\n<li>新需求开发完成且提交到本地完成 -&gt; 点击 <code>Finish Feature</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174120.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>提测过程进行缺陷修改 -&gt; 在该 <code>release</code> 分支上进行修改</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174132.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li><code>Gitflow</code> 插件会自动将该 <code>release</code> 分支的代码合并到 <code>master</code> 和 <code>develop</code> 分支（本地和远程），并自动删除 <code>release</code> 分支，与此同时会自动触发打 <code>tag</code> 的操作</li>\n</ol>\n<p><strong><code>tag</code> 即表示一个版本，也就是合并一个分支到 <code>master</code> 都需要打一个 tag。</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174217.png\" alt=\"img\"></p>\n<ol start=\"6\">\n<li>提测过程完成——由管理员操作执行点击<code>Finish Releasea</code></li>\n</ol>\n<p><strong>注意：在提测未完成之前，严禁执行<code>Finish Releasea</code>！因为该操作会自动执行分支合并和删除的操作影响其他开发人员的工作</strong></p>\n<h4 id=\"常规缺陷修复-bugfix\"><a href=\"#常规缺陷修复-bugfix\" class=\"headerlink\" title=\"常规缺陷修复 bugfix\"></a><strong>常规缺陷修复</strong> <code>bugfix</code></h4><p><strong>本地自测 bug 修复</strong></p>\n<ol>\n<li>点击 idea 右下角的 <code>Gitflow -&gt; Start Bugfix -&gt; 填写bug信息并选择需要修复的develop分支</code></li>\n</ol>\n<p>以 <code>develop</code> 分支自测发现了 <code>bug</code>，现在要对其进行修复为例</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220807174314.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li><p>在 <code>Bugfix</code> 分支上 <code>bug</code> 修复完成后 -&gt; 点击 <code>Finish Bugfix</code> 推送修改到本地 <code>develop</code> 分支</p>\n</li>\n<li><p>将本地 <code>develop</code> 分支推送到远程</p>\n</li>\n</ol>\n<p><strong>注意：</strong><code>release</code><strong>分支上的缺陷修复也可以按照该流程执行</strong></p>\n<h4 id=\"线上-bug-修复\"><a href=\"#线上-bug-修复\" class=\"headerlink\" title=\"线上 bug 修复\"></a>线上 bug 修复</h4><ol>\n<li>修改线上 <code>bug</code> 的 <code>hotfix</code> 以 <code>master</code> 分支在运行时，出现了一个之前没有发现的 <code>bug</code>，现在要对其进行修复为例</li>\n<li>点击 idea 右下角的 <code>Gitflow -&gt; Start hotfix</code></li>\n<li>在 <code>hotfix</code> 分支上进行 <code>bug</code> 修复，提交到本地（可以一同推送到远程）</li>\n<li>修复完成之后——点击 <code>Finish hotfix gitflow</code> 插件会自动将该 <code>hotfix</code> 分支的代码合并 <code>master</code> 和 <code>develop</code> 分支（本地和远程），并自动删除 <code>hotfix</code> 分支，与此同时会自动触发打 <code>tag</code> 的操作</li>\n</ol>\n","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"},{"name":"开发规范","path":"api/tags/开发规范.json"}]}