{"title":"Docker 容器-高级篇","slug":"Docker容器-高级篇","date":"2022-04-07T14:02:35.000Z","updated":"2022-07-17T16:19:28.000Z","comments":true,"path":"api/articles/Docker容器-高级篇.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606234533.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235150.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235242.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235333.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220607000338.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220607000524.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222235.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222420.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222613.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609223136.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609224043.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609224750.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609230337.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609231034.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609231423.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609232741.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233201.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233346.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233720.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233902.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223609.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223709.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223901.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610224116.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610224735.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225027.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225145.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225344.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611202748.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211230224706.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611204149.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611204952.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611205003.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611210408.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220618230538.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619202515.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619203258.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619204718.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619212101.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619214708.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619214819.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619215102.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103135111.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103140835.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103140926.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103142038.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220104001129.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220625214901.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220625215035.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002156.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002407.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002547.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002940.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003252.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003453.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003931.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004014.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004158.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004537.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004743.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004852.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005212.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005512.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005846.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005936.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010017.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010148.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010511.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010625.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010751.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010828.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626011951.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012135.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012308.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012536.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012732.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220404124103.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220404124418.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203605.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203652.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203840.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220405181654.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220716220722.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717111642.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717231629.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717232121.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220713152904.png"],"content":"<h2 id=\"Docker-复杂应用安装\"><a href=\"#Docker-复杂应用安装\" class=\"headerlink\" title=\"Docker 复杂应用安装\"></a>Docker 复杂应用安装</h2><h3 id=\"MySQL-主从复制\"><a href=\"#MySQL-主从复制\" class=\"headerlink\" title=\"MySQL 主从复制\"></a>MySQL 主从复制</h3><p>主从搭建步骤：</p>\n<ul>\n<li><h4 id=\"新建主服务器容器实例-3307\"><a href=\"#新建主服务器容器实例-3307\" class=\"headerlink\" title=\"新建主服务器容器实例 3307\"></a><strong>新建主服务器容器实例 3307</strong></h4></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3307:3306 --name mysql-master \\</span><br><span class=\"line\">-v /mydata/mysql-master/log:/var/log/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-master/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-master/conf:/etc/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root  \\</span><br><span class=\"line\">-d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>进入/mydata/mysql-master/conf 目录下新建 my.cnf</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># vim my.cnf</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=101</span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能</span></span><br><span class=\"line\">log-bin=mall-mysql-bin</span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>修改完配置后重启 master 实例</strong></li>\n</ol>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@88231</span> conf]<span class=\"meta\"># docker restart mysql-master</span></span><br><span class=\"line\">mysql-master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>进入 mysql-master 容器</strong></li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@88231</span> conf]<span class=\"comment\"># docker exec -it mysql-master /bin/bash</span></span><br><span class=\"line\">root<span class=\"variable\">@c84fa378812d</span><span class=\"symbol\">:/</span><span class=\"comment\"># mysql -uroot -p</span></span><br><span class=\"line\"><span class=\"title class_\">Enter</span> <span class=\"symbol\">password:</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>master 容器实例内创建数据同步用户</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"新建从服务器容器实例-3308\"><a href=\"#新建从服务器容器实例-3308\" class=\"headerlink\" title=\"新建从服务器容器实例 3308\"></a>新建从服务器容器实例 3308</h4></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3308:3306 --name mysql-slave \\</span><br><span class=\"line\">-v /mydata/mysql-slave/log:/var/log/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-slave/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-slave/conf:/etc/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root  \\</span><br><span class=\"line\">-d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>进入/mydata/mysql-slave/conf 目录下新建 my.cnf</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># vim my.cnf</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=102</span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span></span><br><span class=\"line\">log-bin=mall-mysql-slave1-bin</span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\"><span class=\"comment\">## relay_log配置中继日志</span></span><br><span class=\"line\">relay_log=mall-mysql-relay-bin</span><br><span class=\"line\"><span class=\"comment\">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\"><span class=\"comment\">## slave设置为只读（具有super权限的用户除外）</span></span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>修改完配置后重启 slave 实例</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># docker restart mysql-slave</span></span><br><span class=\"line\">mysql-slave</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>在主数据库中查看主从同步状态</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File                  | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| mall-mysql-bin.000001 |      617 |              | mysql            |                   |</span><br><span class=\"line\">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>进入 mysql-slave 容器</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># docker exec -it mysql-slave /bin/bash</span></span><br><span class=\"line\">root@820edd47f326:/<span class=\"comment\"># mysql -uroot -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>在从数据库中配置主从复制</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=<span class=\"string\">&#x27;宿主机ip&#x27;</span>, master_user=<span class=\"string\">&#x27;slave&#x27;</span>, master_password=<span class=\"string\">&#x27;123456&#x27;</span>, master_port=3307, master_log_file=<span class=\"string\">&#x27;mall-mysql-bin.000001&#x27;</span>, master_log_pos=617, master_connect_retry=30;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; change master to master_host=<span class=\"string\">&#x27;192.168.88.231&#x27;</span>, master_user=<span class=\"string\">&#x27;slave&#x27;</span>, master_password=<span class=\"string\">&#x27;123456&#x27;</span>, master_port=3307, master_log_file=<span class=\"string\">&#x27;mall-mysql-bin.000001&#x27;</span>, master_log_pos=617, master_connect_retry=30;</span><br><span class=\"line\">Query OK, 0 rows affected, 2 warnings (0.15 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主从复制命令参数说明</span></span><br><span class=\"line\">master_host：主数据库的IP地址；</span><br><span class=\"line\">master_port：主数据库的运行端口；</span><br><span class=\"line\">master_user：在主数据库创建的用于同步数据的用户账号；</span><br><span class=\"line\">master_password：在主数据库创建的用于同步数据的用户密码；</span><br><span class=\"line\">master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</span><br><span class=\"line\">master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</span><br><span class=\"line\">master_connect_retry：连接失败重试的时间间隔，单位为秒。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><strong>在从数据库中查看主从同步状态</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State:</span><br><span class=\"line\">                  Master_Host: 192.168.88.231</span><br><span class=\"line\">                  Master_User: slave</span><br><span class=\"line\">                  Master_Port: 3307</span><br><span class=\"line\">                Connect_Retry: 30</span><br><span class=\"line\">              Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 617</span><br><span class=\"line\">               Relay_Log_File: mall-mysql-relay-bin.000001</span><br><span class=\"line\">                Relay_Log_Pos: 4</span><br><span class=\"line\">        Relay_Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">         <span class=\"comment\"># NO -- 还没开始</span></span><br><span class=\"line\">             Slave_IO_Running: No</span><br><span class=\"line\">            Slave_SQL_Running: No</span><br><span class=\"line\">              Replicate_Do_DB:</span><br><span class=\"line\">          Replicate_Ignore_DB:</span><br><span class=\"line\">           Replicate_Do_Table:</span><br><span class=\"line\">       Replicate_Ignore_Table:</span><br><span class=\"line\">      Replicate_Wild_Do_Table:</span><br><span class=\"line\">  Replicate_Wild_Ignore_Table:</span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error:</span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 617</span><br><span class=\"line\">              Relay_Log_Space: 154</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File:</span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File:</span><br><span class=\"line\">           Master_SSL_CA_Path:</span><br><span class=\"line\">              Master_SSL_Cert:</span><br><span class=\"line\">            Master_SSL_Cipher:</span><br><span class=\"line\">               Master_SSL_Key:</span><br><span class=\"line\">        Seconds_Behind_Master: NULL</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error:</span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error:</span><br><span class=\"line\">  Replicate_Ignore_Server_Ids:</span><br><span class=\"line\">             Master_Server_Id: 0</span><br><span class=\"line\">                  Master_UUID:</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State:</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind:</span><br><span class=\"line\">      Last_IO_Error_Timestamp:</span><br><span class=\"line\">     Last_SQL_Error_Timestamp:</span><br><span class=\"line\">               Master_SSL_Crl:</span><br><span class=\"line\">           Master_SSL_Crlpath:</span><br><span class=\"line\">           Retrieved_Gtid_Set:</span><br><span class=\"line\">            Executed_Gtid_Set:</span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB:</span><br><span class=\"line\">                 Channel_Name:</span><br><span class=\"line\">           Master_TLS_Version:</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><strong>在从数据库中开启主从同步</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li><strong>查看从数据库状态发现已经同步</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting <span class=\"keyword\">for</span> master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.88.231</span><br><span class=\"line\">                  Master_User: slave</span><br><span class=\"line\">                  Master_Port: 3307</span><br><span class=\"line\">                Connect_Retry: 30</span><br><span class=\"line\">              Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 617</span><br><span class=\"line\">               Relay_Log_File: mall-mysql-relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 325</span><br><span class=\"line\">        Relay_Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">           <span class=\"comment\"># Yes -- 已开始</span></span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB:</span><br><span class=\"line\">          Replicate_Ignore_DB:</span><br><span class=\"line\">           Replicate_Do_Table:</span><br><span class=\"line\">       Replicate_Ignore_Table:</span><br><span class=\"line\">      Replicate_Wild_Do_Table:</span><br><span class=\"line\">  Replicate_Wild_Ignore_Table:</span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error:</span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 617</span><br><span class=\"line\">              Relay_Log_Space: 537</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File:</span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File:</span><br><span class=\"line\">           Master_SSL_CA_Path:</span><br><span class=\"line\">              Master_SSL_Cert:</span><br><span class=\"line\">            Master_SSL_Cipher:</span><br><span class=\"line\">               Master_SSL_Key:</span><br><span class=\"line\">        Seconds_Behind_Master: 0</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error:</span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error:</span><br><span class=\"line\">  Replicate_Ignore_Server_Ids:</span><br><span class=\"line\">             Master_Server_Id: 101</span><br><span class=\"line\">                  Master_UUID: 25cb5d93-e4df-11ec-86da-0242ac110003</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State: Slave has <span class=\"built_in\">read</span> all relay <span class=\"built_in\">log</span>; waiting <span class=\"keyword\">for</span> more updates</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind:</span><br><span class=\"line\">      Last_IO_Error_Timestamp:</span><br><span class=\"line\">     Last_SQL_Error_Timestamp:</span><br><span class=\"line\">               Master_SSL_Crl:</span><br><span class=\"line\">           Master_SSL_Crlpath:</span><br><span class=\"line\">           Retrieved_Gtid_Set:</span><br><span class=\"line\">            Executed_Gtid_Set:</span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB:</span><br><span class=\"line\">                 Channel_Name:</span><br><span class=\"line\">           Master_TLS_Version:</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li><strong>主从复制测试</strong></li>\n</ol>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">- </span>主机新建库-使用库-新建表-插入数据，ok</span><br><span class=\"line\"><span class=\"bullet\">- </span>从机使用库-查看记录，ok</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis-集群\"><a href=\"#Redis-集群\" class=\"headerlink\" title=\"Redis 集群\"></a>Redis 集群</h3><h4 id=\"搭建-Redis-集群\"><a href=\"#搭建-Redis-集群\" class=\"headerlink\" title=\"搭建 Redis 集群\"></a>搭建 Redis 集群</h4><blockquote>\n<p>3 主 3 从 redis 集群扩缩容配置案例架构说明</p>\n<p><a href=\"https://www.processon.com/view/link/629e20255653bb03f2cc0a14\">https://www.processon.com/view/link/629e20255653bb03f2cc0a14</a></p>\n</blockquote>\n<ol>\n<li><strong>新建 6 个 docker 容器 redis 实例</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-1 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6381</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-2 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6382</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-3 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6383</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-4 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6384</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-5 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6385</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-6 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6386</span><br></pre></td></tr></table></figure>\n\n<p>==如果运行成功，效果如下：==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606234533.png\" alt=\"image-20220606234533562\"></p>\n<blockquote>\n<p>命令分步解释：</p>\n<ul>\n<li><p>docker run：创建并运行 docker 容器实例</p>\n</li>\n<li><p>–name redis-node-6：容器名字</p>\n</li>\n<li><p>–net host：使用宿主机的 IP 和端口，默认</p>\n</li>\n<li><p>–privileged=true：获取宿主机 root 用户权限</p>\n</li>\n<li><p>-v /data/redis/share/redis-node-6:/data：容器卷，宿主机地址:docker 内部地址</p>\n</li>\n<li><p>redis:6.0.8：redis 镜像和版本号</p>\n</li>\n<li><p>–cluster-enabled yes：开启 redis 集群</p>\n</li>\n<li><p>–appendonly yes：开启持久化</p>\n</li>\n<li><p>–port 6386：redis 端口号</p>\n</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li><strong>进入容器 redis-node-1 并为 6 台机器构建集群关系</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">[root@88231 ~]<span class=\"comment\"># docker exec -it redis-node-1 /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建主从关系</span></span><br><span class=\"line\"><span class=\"comment\"># 注意，进入docker容器后才能执行一下命令，且注意自己的真实IP地址</span></span><br><span class=\"line\">redis-cli --cluster create 192.168.88.231:6381 192.168.88.231:6382 192.168.88.231:6383 192.168.88.231:6384 192.168.88.231:6385 192.168.88.231:6386 --cluster-replicas 1</span><br><span class=\"line\"><span class=\"comment\"># --cluster-replicas 1 表示为每个master创建一个slave节点</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235150.png\" alt=\"image-20220606235150386\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235242.png\" alt=\"image-20220606235242475\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235333.png\" alt=\"image-20220606235332969\"></p>\n<p>==一切 OK 的话，3 主 3 从搞定==</p>\n<ol start=\"3\">\n<li><strong>链接进入 6381 作为切入点，查看集群状态</strong></li>\n</ol>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@<span class=\"number\">88231</span>:/data# redis-cli -p <span class=\"number\">6381</span></span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6381</span>&gt; keys *</span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6381</span>&gt; cluster info</span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6381</span>&gt; cluster nodes</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220607000338.png\" alt=\"image-20220607000338016\" style=\"zoom:50%;\" />\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220607000524.png\" alt=\"image-20220607000524306\"></p>\n<h4 id=\"主从容错切换迁移\"><a href=\"#主从容错切换迁移\" class=\"headerlink\" title=\"主从容错切换迁移\"></a>主从容错切换迁移</h4><h5 id=\"数据读写存储\"><a href=\"#数据读写存储\" class=\"headerlink\" title=\"数据读写存储\"></a>数据读写存储</h5><ol>\n<li>启动 6 个 redis 构成的集群并通过 exec 进入</li>\n<li>对 6381 新增两个 key</li>\n<li>防止路由失效加参数 -c 并新增两个 key</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222235.png\" alt=\"image-20220609222228049\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222420.png\" alt=\"image-20220609222420357\"></p>\n<ol start=\"4\">\n<li>查看集群信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222613.png\" alt=\"image-20220609222613143\"></p>\n<h5 id=\"容错切换迁移\"><a href=\"#容错切换迁移\" class=\"headerlink\" title=\"容错切换迁移\"></a>容错切换迁移</h5><ol>\n<li>主 6381 和从机切换，先停止主机 6381</li>\n<li>6381 主机停了，对应的真实从机上位</li>\n<li>6381 作为 1 号主机分配的从机以实际情况为准，具体是几号机器就是几号</li>\n<li>再次查看集群信息</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609223136.png\" alt=\"image-20220609223136321\"></p>\n<blockquote>\n<p>==6381 宕机了，6385 上位成了新的 master==</p>\n<p>备注：本次操作 6381 为主节点，对应的从节点是 6385，对应关系是随机的，每次操作以实际情况为准</p>\n</blockquote>\n<ol start=\"5\">\n<li>启动 6381 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start redis-node-1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609224043.png\" alt=\"image-20220609224042839\"></p>\n<ol start=\"6\">\n<li>再停 6385 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop redis-node-5</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609224750.png\" alt=\"image-20220609224750744\"></p>\n<ol start=\"7\">\n<li>再启 6385 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start redis-node-5</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==发现主从节点又恢复之前的状态了==</p>\n</blockquote>\n<ol start=\"8\">\n<li>查看集群状态</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>自己IP:6381</span><br><span class=\"line\"></span><br><span class=\"line\">可以看到主节点分配的</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609230337.png\" alt=\"image-20220609230337692\"></p>\n<h5 id=\"主从扩容案例\"><a href=\"#主从扩容案例\" class=\"headerlink\" title=\"主从扩容案例\"></a>主从扩容案例</h5><ol>\n<li>新建 6387、6388 两个节点+新建后启动+查看是否是 8 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-7 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6387</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-8 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6388</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>进入 6387 容器实例内部</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node-7 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将新增的 6387 节点（空槽号）作为 master 节点加入集群</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> add-node </span>自己实际IP地址:6387 自己实际IP地址:6381</span><br><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> add-node </span>192.168.88.231:6387 192.168.88.231:6381</span><br><span class=\"line\">6387 就是将要作为master新增节点</span><br><span class=\"line\">6381 就是原来集群节点里面的领路人，相当于6387拜拜6381的码头从而找到组织加入集群</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609231034.png\" alt=\"image-20220609231034192\"></p>\n<ol start=\"4\">\n<li>检查集群情况第 1 次</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>真实ip地址:6381</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609231423.png\" alt=\"image-20220609231423755\"></p>\n<ol start=\"5\">\n<li>重新分派槽号</li>\n</ol>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重新分派槽号</span><br><span class=\"line\"></span><br><span class=\"line\">命令:redis-<span class=\"keyword\">cli</span> --<span class=\"keyword\">cluster</span> reshard IP地址:端口号</span><br><span class=\"line\"></span><br><span class=\"line\">redis-<span class=\"keyword\">cli</span> --<span class=\"keyword\">cluster</span> reshard 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609232741.png\" alt=\"image-20220609232741435\"></p>\n<ol start=\"6\">\n<li>检查集群情况第 2 次</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 真实ip地址:6381</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster check 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233201.png\" alt=\"image-20220609233201196\"></p>\n<blockquote>\n<p>==槽号分派说明==</p>\n<p>为什么 6387 是 3 个新的区间，以前的还是连续？</p>\n<p>重新分配成本太高，所以前 3 家各自匀出来一部分，从 6381/6382/6383 三个旧节点分别匀出 1364 个坑位给新节点 6387</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233346.png\" alt=\"image-20220609233346240\"></p>\n<ol start=\"7\">\n<li>为主节点 6387 分配从节点 6388</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：redis-cli --cluster<span class=\"built_in\"> add-node </span>ip:新slave端口 ip:新master端口 --cluster-slave --cluster-master-id 新主机节点ID</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> add-node </span>192.168.88.231:6388 192.168.88.231:6387 --cluster-slave --cluster-master-id 7206137ce4e66c0464fa0fa00472202ce5b16792</span><br><span class=\"line\">-------这个是6387的编号，按照自己实际情况</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233720.png\" alt=\"image-20220609233720722\"></p>\n<ol start=\"8\">\n<li>检查集群第 3 次</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>192.168.88.231:6382</span><br><span class=\"line\"></span><br><span class=\"line\">4 主 4 从</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233902.png\" alt=\"image-20220609233902550\"></p>\n<h5 id=\"主从缩容案例\"><a href=\"#主从缩容案例\" class=\"headerlink\" title=\"主从缩容案例\"></a>主从缩容案例</h5><blockquote>\n<p>目的：6387 和 6388 下线</p>\n</blockquote>\n<ol>\n<li>检查集群情况 - 获得 6388 的节点 ID</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231:6382</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223609.png\" alt=\"image-20220610223609176\"></p>\n<ol start=\"2\">\n<li>将 6388 删除 从集群中将 4 号从节点 6388 删除</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：redis-cli --cluster del-node ip:从机端口 从机6388节点ID</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster del-node 192.168.88.231:6388 1fedf6a6f9acfbdba6951a532cd2d68e4546898e</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223709.png\" alt=\"image-20220610223709085\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231:6382</span><br></pre></td></tr></table></figure>\n\n<p>==检查一下发现，6388 被删除了，只剩下七台机器了。==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223901.png\" alt=\"image-20220610223900954\"></p>\n<ol start=\"3\">\n<li>将 6387 的槽号清空，重新分配，本例将清出来的槽号都给 6381</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster reshard 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610224116.png\" alt=\"image-20220610224116496\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610224735.png\" alt=\"image-20220610224657149\"></p>\n<blockquote>\n<p>将 6387 节点的槽号都分配给 6381</p>\n</blockquote>\n<ol start=\"4\">\n<li>检查集群情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231 6382</span><br><span class=\"line\"></span><br><span class=\"line\">4096 个槽位都指给 6381，它变成了 8192 个槽位，相当于全部都给 6381了</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225027.png\" alt=\"image-20220610225027291\"></p>\n<ol start=\"5\">\n<li>删除 6387 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：redis-cli --cluster del-node ip:端口 6387节点ID</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster del-node 192.168.88.231:6387 7206137ce4e66c0464fa0fa00472202ce5b16792</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225145.png\" alt=\"image-20220610225144956\"></p>\n<ol start=\"6\">\n<li>再次检查集群情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231 6382</span><br><span class=\"line\"></span><br><span class=\"line\">恢复之前的 3 主 3 从，缩容成功！</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225344.png\" alt=\"image-20220610225344237\"></p>\n<h2 id=\"DockerFile\"><a href=\"#DockerFile\" class=\"headerlink\" title=\"DockerFile\"></a>DockerFile</h2><h3 id=\"Dockerfile-介绍\"><a href=\"#Dockerfile-介绍\" class=\"headerlink\" title=\"Dockerfile 介绍\"></a>Dockerfile 介绍</h3><p><code>Dockerfile</code> 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p>\n<blockquote>\n<p>官网：<a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></p>\n</blockquote>\n<p>构建步骤：</p>\n<ol>\n<li>编写一个 <code>Dockerfile</code> 文件</li>\n<li><code>docker bulid</code> 构建为一个镜像</li>\n<li><code>docker run</code> 运行镜像</li>\n<li><code>docker push</code> 发布镜像（DockerHub. 阿里云镜像仓库）</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611202748.png\" alt=\"image-20220611202748238\"></p>\n<h3 id=\"Dockerfile-构建过程\"><a href=\"#Dockerfile-构建过程\" class=\"headerlink\" title=\"Dockerfile 构建过程\"></a>Dockerfile 构建过程</h3><h4 id=\"Dockerfile-基础知识\"><a href=\"#Dockerfile-基础知识\" class=\"headerlink\" title=\"Dockerfile 基础知识\"></a>Dockerfile 基础知识</h4><ol>\n<li>每个保留关键字（指令）都==必须是大写字母==且后面要跟随至少一个参数</li>\n<li>指令按照从上到下，顺序执行</li>\n<li><code>#</code> 表示注释</li>\n<li>每条指令都会创建一个新的镜像层并对镜像进行提交</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211230224706.png\" alt=\"image-20211230224659329\"></p>\n<h4 id=\"Docker-执行-Dockerfile-的大致流程\"><a href=\"#Docker-执行-Dockerfile-的大致流程\" class=\"headerlink\" title=\"Docker 执行 Dockerfile 的大致流程\"></a>Docker 执行 Dockerfile 的大致流程</h4><ol>\n<li>docker 从基础镜像运行一个容器</li>\n<li>执行一条指令并对容器做出修改</li>\n<li>docker 再基于刚提交的镜像运行一个新容器</li>\n<li>执行 Dockerfile 中的下一条指令知道所有指令都执行完成</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>从应用软件的角度看，<code>Dockerfile</code>、<code>Docker镜像</code>与<code>Docker容器</code>分别代表软件的三个不同阶段：</p>\n<ul>\n<li><code>Dockerfile</code>是软件的原材料</li>\n<li><code>Docker镜像</code>是软件的交付品</li>\n<li><code>Docker容器</code>则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例</li>\n</ul>\n<p>==Dockerfile 面向开发，Docker 镜像成为交付标准，Docker 容器则涉及部署与运维，三者缺一不可，合力充当 Docker 体系的基石==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611204149.png\" alt=\"image-20220611204149366\"></p>\n<ol>\n<li><p>Dockerfile，需要定义一个 Dockerfile，Dockerfile 定义了进程需要的一切东西。Dockerfile 涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计 namespace 的权限控制)等等;</p>\n</li>\n<li><p>Docker 镜像，在用 Dockerfile 定义一个文件之后，docker build 时会产生一个 Docker 镜像，当运行 Docker 镜像时会真正开始提供服务;</p>\n</li>\n<li><p>Docker 容器，容器是直接提供服务的。</p>\n</li>\n</ol>\n<h3 id=\"DockerFile-的保留字指令\"><a href=\"#DockerFile-的保留字指令\" class=\"headerlink\" title=\"DockerFile 的保留字指令\"></a>DockerFile 的保留字指令</h3><ul>\n<li><p><code>FROM</code>：基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是 FROM</p>\n</li>\n<li><p><code>MAINTAINER</code>：镜像维护者的姓名和邮箱地址</p>\n</li>\n<li><p><code>RUN</code>：容器构建时需要运行的命令，包含两种格式：</p>\n<ul>\n<li>shell 格式：</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611204952.png\" alt=\"image-20220611204952312\"></p>\n<ul>\n<li>exec 格式：</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611205003.png\" alt=\"image-20220611205003786\"></p>\n<ul>\n<li><code>RUN</code> 是在 <code>docker build</code> 时运行</li>\n</ul>\n</li>\n<li><p><code>EXPOSE</code>：当前容器对外暴露出的端口</p>\n</li>\n<li><p><code>WORKDIR</code>：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p>\n</li>\n<li><p><code>USER</code>：指定该镜像以什么样的用户去执行，如果都不指定，默认是 root</p>\n</li>\n<li><p><code>ENV</code>：用来在构建镜像过程中设置环境变量</p>\n<ul>\n<li>```<br>ENV MY_PATH /usr/mytest<br>这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样；<br>也可以在其它指令中直接使用这些环境变量，比如：WORKDIR $MY_PATH<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `<span class=\"keyword\">ADD</span><span class=\"language-bash\">`：将宿主机目录下的文件拷贝进镜像且会自动处理 URL 和解压 tar 压缩包</span></span><br><span class=\"line\"></span><br><span class=\"line\">- `<span class=\"keyword\">COPY</span><span class=\"language-bash\">`：类似 ADD，拷贝文件和目录到镜像中</span></span><br><span class=\"line\"></span><br><span class=\"line\">  - ```dockerfile</span><br><span class=\"line\">    <span class=\"comment\"># 将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">COPY</span><span class=\"language-bash\"> src dest</span></span><br><span class=\"line\">    <span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;dest&quot;</span>]</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># &lt;src源路径&gt;：源文件或者源目录</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;dest目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><code>VOLUME</code>：容器数据卷，用于数据保存和持久化工作</p>\n</li>\n<li><p><code>CMD</code>：指定容器启动后的要干的事情</p>\n<ul>\n<li><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611210408.png\" alt=\"image-20220611210408046\"></li>\n<li><strong>注意：Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</strong></li>\n<li>它和前面 <code>RUN</code> 命令的区别：<ul>\n<li><code>CMD</code> 是在 <code>docker run</code> 时运行</li>\n<li><code>RUN</code> 是在 <code>docker build</code> 时运行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>ENTRYPOINT</code>：也是用来指定一个容器启动时要运行的命令</p>\n<ul>\n<li><p>类似于 CMD 指令，<strong>但是 ENTRYPOINT 不会被 docker run 后面的命令覆盖</strong>， 而且这些命令行参数<strong>会被当作参数送给 ENTRYPOINT 指令指定的程序</strong></p>\n</li>\n<li><p><code>ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;...]</code></p>\n</li>\n<li><p>ENTRYPOINT 可以和 CMD 一起用，一般是<strong>变参</strong>才会使用 CMD，这里的 CMD 等于是在给 ENTRYPOINT 传参。当指定了 ENTRYPOINT 后，CMD 的含义就发生了变化，不再是直接运行其命令而是将 CMD 的内容作为参数传递给 ENTRYPOINT 指令，他两个组合会变成 <code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></p>\n</li>\n<li><p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数</p>\n</li>\n<li><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效</p>\n</li>\n</ul>\n</li>\n<li><p>小总结</p>\n<ul>\n<li><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220618230538.png\" alt=\"image-20220618230538863\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实战案例\"><a href=\"#实战案例\" class=\"headerlink\" title=\"实战案例\"></a>实战案例</h3><p>自定义镜像 ==&gt; <code>mycentosjava8</code></p>\n<p><strong>要求：</strong></p>\n<ul>\n<li>Centos7 镜像具备 vim+ifconfig+jdk8</li>\n<li>准备 jdk8 的安装包（<code>jdk-8u251-linux-x64.tar.gz</code>）</li>\n</ul>\n<ol>\n<li><strong>准备编写 Dockerfile 文件</strong></li>\n</ol>\n<p>在 <code>/home</code> 目录下建一个 <code>myfile</code> 文件夹，并将 <code>jdk8</code> 的安装包放进去：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619202515.png\" alt=\"image-20220619202508648\"></p>\n<p><code>Dockerfile</code> 文件内容如下：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos:centos7</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Kyire6&lt;kyire666.outlook.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYPATH /usr/local</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"variable\">$MYPATH</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装vim编辑器</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install vim</span></span><br><span class=\"line\"><span class=\"comment\">#安装ifconfig命令查看网络IP</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install net-tools</span></span><br><span class=\"line\"><span class=\"comment\">#安装java8及lib库</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install glibc.i686</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> /usr/local/java</span></span><br><span class=\"line\"><span class=\"comment\">#ADD 是相对路径jar,把jdk-8u251-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> jdk-8u251-linux-x64.tar.gz /usr/local/java/</span></span><br><span class=\"line\"><span class=\"comment\">#配置java环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class=\"number\">8.0</span>_251</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$MYPATH</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;success--------------ok&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> /bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>执行构建命令</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t 新镜像名:TAG .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如</span></span><br><span class=\"line\">docker build -t centosjava8:1.0 .</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：命令要在 <code>Dockerfile</code> 的同级目录下执行，不要忘了命令结尾的 <code>.</code></strong></p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619203258.png\" alt=\"image-20220619203258616\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619204718.png\" alt=\"image-20220619204718396\"></p>\n<ol start=\"3\">\n<li><strong>运行容器</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it centosjava8:1.0 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619212101.png\" alt=\"image-20220619212100997\"></p>\n<h3 id=\"虚悬镜像\"><a href=\"#虚悬镜像\" class=\"headerlink\" title=\"虚悬镜像\"></a>虚悬镜像</h3><p>虚悬镜像就是仓库名、标签都是 <code>&lt;none&gt;</code> 的镜像，也称为 <code>dangling image</code></p>\n<p><strong>用 Dockerfile 生成一个</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编写 Dockerfile 文件</span></span><br><span class=\"line\">vim Dockerfile</span><br><span class=\"line\"><span class=\"keyword\">from</span> ubuntu</span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;action is success&#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build 镜像</span></span><br><span class=\"line\">docker build .</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619214708.png\" alt=\"image-20220619214708171\"></p>\n<p><strong>查看虚悬镜像</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -f dangling=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619214819.png\" alt=\"image-20220619214819128\"></p>\n<p><strong>删除所有虚悬镜像</strong></p>\n<p>虚悬镜像已经失去存在价值，可以删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image prune</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619215102.png\" alt=\"image-20220619215102621\"></p>\n<h3 id=\"发布自己的镜像\"><a href=\"#发布自己的镜像\" class=\"headerlink\" title=\"发布自己的镜像\"></a>发布自己的镜像</h3><blockquote>\n<p>DockerHub</p>\n</blockquote>\n<ol>\n<li><p>地址 <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a> 注册自己的账号！</p>\n</li>\n<li><p>确保这个账号可以登录</p>\n</li>\n<li><p>在服务器上提交自己的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ouwen ~]# docker login --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class=\"line\"></span><br><span class=\"line\">Log in to a Docker registry.</span><br><span class=\"line\">If no server is specified, the default is defined by the daemon.</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -p, --password string   Password</span><br><span class=\"line\">      --password-stdin    Take the password from stdin</span><br><span class=\"line\">  -u, --username string   Username</span><br><span class=\"line\">[root@ouwen ~]# docker login -u ouwen666</span><br><span class=\"line\">Password:</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <code>docker login</code> 登录之后就可以提交镜像了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 使用 docker tag 命令修改镜像版本</span></span><br><span class=\"line\">[root@ouwen ~]# docker tag 352abc3918b1 ouwen666/tomcat:1.0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 使用 docker push 命令提交镜像到 DockerHub</span></span><br><span class=\"line\">[root@ouwen ~]# docker push ouwen666/tomcat:1.0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103135111.png\" alt=\"image-20220103135111272\"></p>\n<blockquote>\n<p>发现：提交的时候也是按照镜像的层级来的！</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>阿里云镜像</p>\n</blockquote>\n<ol>\n<li><p>登录阿里云</p>\n</li>\n<li><p>找到容器镜像服务</p>\n</li>\n<li><p>创建镜像仓库</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103140835.png\" alt=\"image-20220103140835560\"></p>\n</li>\n<li><p>浏览仓库信息</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103140926.png\" alt=\"image-20220103140926596\"></p>\n</li>\n</ol>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103142038.png\" alt=\"image-20220103142038290\"></p>\n<h2 id=\"Docker-网络\"><a href=\"#Docker-网络\" class=\"headerlink\" title=\"Docker 网络\"></a>Docker 网络</h2><h3 id=\"docker0-网卡\"><a href=\"#docker0-网卡\" class=\"headerlink\" title=\"docker0 网卡\"></a><code>docker0</code> 网卡</h3><p>docker 服务启动后，会产生一个名为 <code>docker0</code> 的虚拟网桥，使用 <code>ip addr</code> 查看本机 ip</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220104001129.png\" alt=\"image-20220103235821684\"></p>\n<h3 id=\"docker-网络常用命令\"><a href=\"#docker-网络常用命令\" class=\"headerlink\" title=\"docker 网络常用命令\"></a>docker 网络常用命令</h3><h4 id=\"All-命令\"><a href=\"#All-命令\" class=\"headerlink\" title=\"All 命令\"></a>All 命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220625214901.png\" alt=\"image-20220625214854077\"></p>\n<h4 id=\"查看网络\"><a href=\"#查看网络\" class=\"headerlink\" title=\"查看网络\"></a>查看网络</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220625215035.png\" alt=\"image-20220625215035376\"></p>\n<h4 id=\"查看网络源数据\"><a href=\"#查看网络源数据\" class=\"headerlink\" title=\"查看网络源数据\"></a>查看网络源数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network inspect xxx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002156.png\" alt=\"image-20220626002156711\"></p>\n<h4 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create xxx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除网络\"><a href=\"#删除网络\" class=\"headerlink\" title=\"删除网络\"></a>删除网络</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network <span class=\"built_in\">rm</span> xxx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002407.png\" alt=\"image-20220626002407749\"></p>\n<blockquote>\n<p><strong>docker 网络能干嘛？</strong></p>\n<ul>\n<li>容器间的互联和通信以及端口映射</li>\n<li>容器 IP 变动时可以通过服务名直接进行网络通信，进而不受到影响</li>\n</ul>\n</blockquote>\n<h3 id=\"网络模式\"><a href=\"#网络模式\" class=\"headerlink\" title=\"网络模式\"></a>网络模式</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002547.png\" alt=\"image-20220626002547570\"></p>\n<ul>\n<li>bridge 模式：使用 –network bridge 指定，默认使用 docker0</li>\n<li>host 模式：使用 –network host 指定</li>\n<li>none 模式：使用 –network none 指定</li>\n<li>container 模式：使用 –network container:NAME 或者容器 ID 指定</li>\n</ul>\n<p><strong>容器实例内默认网络 IP 生产规则</strong></p>\n<ol>\n<li>先启动两个 Ubuntu 容器实例</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002940.png\" alt=\"image-20220626002940194\"></p>\n<ol start=\"2\">\n<li><code>docker inspect 容器 ID or 容器名字</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003252.png\" alt=\"image-20220626003252589\"></p>\n<ol start=\"3\">\n<li>关闭 u2 实例，新建 u3，查看 IP 变化</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003453.png\" alt=\"image-20220626003453087\"></p>\n<blockquote>\n<p>结论：</p>\n<p><strong>docker 容器内部的 IP 是有可能会发生变化的</strong></p>\n</blockquote>\n<h4 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"bridge\"></a>bridge</h4><p>Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），该桥接网络的名称为 docker0，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看 bridge 网络的详细信息，并通过 <span class=\"keyword\">grep</span> 获取名称项</span><br><span class=\"line\">docker network <span class=\"keyword\">inspect</span> bridge | <span class=\"keyword\">grep</span> name</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003931.png\" alt=\"image-20220626003931893\"></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig <span class=\"string\">| grep docker</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004014.png\" alt=\"image-20220626004014292\"></p>\n<blockquote>\n<p><strong>说明：</strong></p>\n<ol>\n<li><p>Docker 使用 Linux 桥接，在宿主机虚拟一个 Docker 容器网桥(docker0)，Docker 启动一个容器时会根据 Docker 网桥的网段分配给容器一个 IP 地址，称为 Container-IP，同时 Docker 网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的 Container-IP 直接通信</p>\n</li>\n<li><p>docker run 的时候，没有指定 network 的话默认使用的网桥模式就是 bridge，使用的就是 docker0。在宿主机 ifconfig,就可以看到 docker0 和自己 create 的 network(后面讲)eth0，eth1，eth2……代表网卡一，网卡二，网卡三……，lo 代表 127.0.0.1，即 localhost，inet addr 用来表示网卡的 IP 地址</p>\n</li>\n<li><p>网桥 docker0 创建一对对等虚拟设备接口一个叫 veth，另一个叫 eth0，成对匹配</p>\n<ol>\n<li>整个宿主机的网桥模式都是 docker0，类似一个交换机有一堆接口，每个接口叫 veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫 veth pair）</li>\n<li>每个容器实例内部也有一块网卡，每个接口叫 eth0</li>\n<li>docker0 上面的每个 veth 匹配某个容器实例内部的 eth0，两两配对，一一匹配</li>\n</ol>\n</li>\n</ol>\n<p><strong>通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下,会从这个网关下各自拿到分配的 ip，此时两个容器的网络是互通的。</strong></p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004158.png\" alt=\"image-20220626004158705\"></p>\n<p><strong>两两匹配验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8080   --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8082:8080   --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004537.png\" alt=\"image-20220626004536998\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004743.png\" alt=\"image-20220626004743381\"></p>\n<h4 id=\"host\"><a href=\"#host\" class=\"headerlink\" title=\"host\"></a>host</h4><p>直接使用宿主机的 IP 地址与外界进行通信，不再需要额外进行 NAT 转换。</p>\n<blockquote>\n<p><strong>说明：</strong></p>\n<p>容器将不会获得一个独立的 Network Namespace， 而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡而是使用宿主机的 IP 和端口。</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004852.png\" alt=\"image-20220626004852511\"></p>\n<p><strong>验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8083:8080 --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005212.png\" alt=\"image-20220626005212574\"></p>\n<p><strong>问题：</strong></p>\n<p>docker 容器启动时出现了警告</p>\n<p><strong>原因：</strong></p>\n<p>docker 启动时指定 –network=host 或 -net=host，如果还指定了 -p 映射端口，那这个时候就会有此警告，并且通过-p 设置的参数将不会起到任何作用，端口号会以主机端口号为主，重复时则递增。</p>\n<p><strong>解决:</strong></p>\n<p>解决的办法就是使用 docker 的其他网络模式，例如 –network=bridge，这样就可以解决问题，或者直接无视…</p>\n<p><strong>正确做法：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>这样就不会出现之前的警告了，查看容器实例内部：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005512.png\" alt=\"image-20220626005512017\"></p>\n<blockquote>\n<p>没有设置-p 的端口映射了，如何访问启动的 tomcat83？</p>\n<p>http://宿主机IP:8080/</p>\n<p><strong>在 CentOS 里面用默认的火狐浏览器访问容器内的 tomcat83 看到访问成功，因为此时容器的 IP 借用主机的，所以容器共享宿主机网络 IP，这样的好处是外部主机与容器可以直接通信。</strong></p>\n</blockquote>\n<h4 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h4><p>在 none 模式下，并不为 Docker 容器进行任何网络配置。 也就是说，这个 Docker 容器没有网卡、IP、路由等信息，只有一个 lo，需要我们自己为 Docker 容器添加网卡、配置 IP 等。禁用网络功能，只有 lo 标识(就是 127.0.0.1 表示本地回环)</p>\n<p><strong>验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8084:8080 --network none --name tomcat84 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>进入容器内部查看</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005846.png\" alt=\"image-20220626005846474\"></p>\n<p>在容器外部查看</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005936.png\" alt=\"image-20220626005935898\"></p>\n<h4 id=\"container\"><a href=\"#container\" class=\"headerlink\" title=\"container\"></a>container</h4><p>新建的容器和已经存在的一个容器共享一个网络 IP 配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010017.png\" alt=\"image-20220626010017092\"></p>\n<p><strong>验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8085:8080 --name tomcat85 billygoo/tomcat8-jdk8</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8086:8080 --network container:tomcat85 --name tomcat86 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010148.png\" alt=\"image-20220626010148299\"></p>\n<p>相当于 tomcat86 和 tomcat85 公用同一个 ip 同一个端口，导致端口冲突！</p>\n<p><strong>换一个镜像进行验证</strong></p>\n<blockquote>\n<p>Alpine 操作系统是一个面向安全的轻型 Linux 发行版</p>\n<p>Alpine Linux 是一款独立的、非商业的通用 Linux 发行版，专为追求安全性、简单性和资源效率的用户而设计。 可能很多人没听说过这个 Linux 发行版本，但是经常用 Docker 的朋友可能都用过，因为他小，简单，安全而著称，所以作为基础镜像是非常好的一个选择，可谓是麻雀虽小但五脏俱全，镜像非常小巧，不到 6M 的大小，所以特别适合容器打包。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name alpine1  alpine /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -it --network container:alpine1 --name alpine2  alpine /bin/sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010511.png\" alt=\"image-20220626010511330\"></p>\n<p>假如此时关闭 alpine1，再看看 alpin2</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010625.png\" alt=\"image-20220626010625716\"></p>\n<p>发现 <code>107: eth0@if108</code> 已经消失</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010751.png\" alt=\"image-20220626010751877\"></p>\n<h3 id=\"自定义网络\"><a href=\"#自定义网络\" class=\"headerlink\" title=\"自定义网络\"></a>自定义网络</h3><h4 id=\"过时的-link\"><a href=\"#过时的-link\" class=\"headerlink\" title=\"过时的 link\"></a>过时的 link</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010828.png\" alt=\"image-20220626010828576\"></p>\n<h4 id=\"使用自定义网络的好处\"><a href=\"#使用自定义网络的好处\" class=\"headerlink\" title=\"使用自定义网络的好处\"></a>使用自定义网络的好处</h4><p><strong>before</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8080   --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class=\"line\">docker run -d -p 8082:8080   --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>启动成功使用 docker exec 进入到容器内部</p>\n<p><strong>按照 IP 地址 ping 是 OK 的</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626011951.png\" alt=\"image-20220626011951406\"></p>\n<p>但是无法按照服务名 ping</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012135.png\" alt=\"image-20220626012135798\"></p>\n<p><strong>after</strong></p>\n<p>自定义桥接网络，自定义网络默认使用的就是桥接网络 – bridge</p>\n<ol>\n<li>新建自定义网络</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012308.png\" alt=\"image-20220626012308361\"></p>\n<ol start=\"2\">\n<li>新建容器并加入上一步新建的自定义网络</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8080 --network my_network  --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8082:8080 --network my_network  --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>互相 ping 测试</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012536.png\" alt=\"image-20220626012536459\"></p>\n<blockquote>\n<p><strong>结论</strong></p>\n<p><strong><em>自定义网络本身就维护好了主机名和 ip 的对应关系（ip 和域名都能通）</em></strong></p>\n</blockquote>\n<h2 id=\"Docker-平台架构图解\"><a href=\"#Docker-平台架构图解\" class=\"headerlink\" title=\"Docker 平台架构图解\"></a>Docker 平台架构图解</h2><h3 id=\"整体说明\"><a href=\"#整体说明\" class=\"headerlink\" title=\"整体说明\"></a>整体说明</h3><p>从其架构和运行流程来看，Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。</p>\n<p>Docker 运行的基本流程为：</p>\n<ol>\n<li>用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。</li>\n<li>Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。</li>\n<li>Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。</li>\n<li>Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver 将下载镜像以 Graph 的形式存储。</li>\n<li>当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境。</li>\n<li>当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。</li>\n<li>Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作。</li>\n</ol>\n<h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012732.png\" alt=\"image-20220626012732507\"></p>\n<h2 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h2><blockquote>\n<p>官方文档：<a href=\"https://docs.docker.com/compose/\">https://docs.docker.com/compose/</a></p>\n</blockquote>\n<h3 id=\"什么是-Docker-Compose\"><a href=\"#什么是-Docker-Compose\" class=\"headerlink\" title=\"什么是 Docker Compose\"></a>什么是 Docker Compose</h3><p><code>Docker Compose</code> 是一个用于定义和运行多容器 <code>Docker</code> 应用程序的工具。使用 <code>Compose</code>，您可以使用 <code>YAML</code> 文件来配置应用程序的服务。然后，使用单个命令，从配置创建并启动所有服务</p>\n<p>使用 <code>Docker Compose</code> 基本上有以下三步：</p>\n<ol>\n<li>使用 定义应用的环境，以便可以在任何位置重现它。<code>Dockerfile</code></li>\n<li>定义构成应用的服务，以便它们可以在隔离的环境中一起运行。<code>docker-compose.yml</code></li>\n<li>运行<a href=\"https://docs.docker.com/compose/cli-command/\">Docker Compose</a>将启动并运行整个应用。您也可以使用 docker-compose 二进制文件运行。<code>docker compose up``docker-compose up</code></li>\n</ol>\n<p><code>docker-compose.yml</code> 示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.9&quot;</span>  <span class=\"comment\"># optional since v1.27.0</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:5000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">.:/code</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">logvolume01:/var/log</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">logvolume01:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Docker-Compose\"><a href=\"#安装-Docker-Compose\" class=\"headerlink\" title=\"安装 Docker Compose\"></a>安装 Docker Compose</h3><ol>\n<li>下载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 官网地址</span></span><br><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 国内镜像</span></span><br><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220404124103.png\" alt=\"image-20220404124103270\"></p>\n<ol start=\"2\">\n<li>给 <code>docker-compose</code> 文件授可执行权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试安装是否成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>卸载 <code>docker-compose</code></li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220404124418.png\" alt=\"image-20220404124418121\"></p>\n<h3 id=\"Compose-核心概念\"><a href=\"#Compose-核心概念\" class=\"headerlink\" title=\"Compose 核心概念\"></a>Compose 核心概念</h3><p><strong>一文件</strong></p>\n<p><code>docker-compose.yml</code></p>\n<p><strong>两要素</strong></p>\n<ul>\n<li>服务（service)</li>\n</ul>\n<p>一个个应用容器实例，比如订单微服务、库存微服务、mysql 容器、nginx 容器或者 redis 容器</p>\n<ul>\n<li>工程（project）</li>\n</ul>\n<p>由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义</p>\n<h3 id=\"Compose-使用的三个步骤\"><a href=\"#Compose-使用的三个步骤\" class=\"headerlink\" title=\"Compose 使用的三个步骤\"></a>Compose 使用的三个步骤</h3><ol>\n<li>编写 Dockerfile 定义各个微服务应用并构建出对应的镜像文件</li>\n<li>使用 docker-compose.yml 定义一个完整业务单元，安排好整体应用中的各个容器服务</li>\n<li>最后，执行 docker-compose up 命令 来启动并运行整个应用程序，完成一键部署上线</li>\n</ol>\n<h3 id=\"Compose-常用命令\"><a href=\"#Compose-常用命令\" class=\"headerlink\" title=\"Compose 常用命令\"></a>Compose 常用命令</h3><p><strong>查看帮助信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose -h|<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>命令选项</strong></p>\n<ul>\n<li>-f, –file FILE 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定；</li>\n<li>-p, –project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名；</li>\n<li>–x-networking 使用 Docker 的可拔插网络后端特性；</li>\n<li>–x-network-driver DRIVER 指定网络后端的驱动，默认为 bridge；</li>\n<li>–verbose 输出更多调试信息；</li>\n<li>-v, –version 打印版本并退出；</li>\n<li>-H, –host HOST，远程操作 docker，被操作的 docker 需要开放 2375 端口</li>\n</ul>\n<p><strong>常用命令</strong></p>\n<ul>\n<li><strong>up</strong>：启动所有 docker-compose 服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br><span class=\"line\"><span class=\"comment\"># 启动所有docker-compose服务并后台运行</span></span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>down</strong>：停止并删除容器、网络、卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>exec</strong>：进入容器实例内部</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose <span class=\"built_in\">exec</span> docker-compose.yml文件中写的服务<span class=\"built_in\">id</span> /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ps</strong>：展示当前 docker-compose 编排过的运行的所有容器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose ps</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>top</strong>：展示当前 docker-compose 编排过的容器进程</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose top</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>logs</strong>：查看容器输出日志</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose logs yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>build</strong>：构建或者重新构建服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>start</strong>：启动服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose start yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>stop</strong>：停止服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose stop yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>restart</strong>：重启服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose restart yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>config</strong>：检查配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有问题才输出</span></span><br><span class=\"line\">docker-compose config -q</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>scale</strong>：设置指定服务运行容器的个数，以 <code>service=num</code> 形式指定</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose scale yml里面的服务<span class=\"built_in\">id</span>=实例个数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-compose-yml-文件规则\"><a href=\"#docker-compose-yml-文件规则\" class=\"headerlink\" title=\"docker-compose.yml 文件规则\"></a>docker-compose.yml 文件规则</h3><p>官网地址：<a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/\">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p>\n<ul>\n<li><strong>version</strong>：指定 docker-compose.yml 文件的写法格式</li>\n<li><strong>services</strong>：服务，多个容器集合</li>\n<li><strong>build</strong>：配置构建时，Compose 会利用它自动构建镜像，该值可以是一个路径，也可以是一个对象，用于指定 Dockerfile 参数</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">build:</span> <span class=\"string\">./dir</span></span><br><span class=\"line\"><span class=\"string\">---------------</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">context:</span> <span class=\"string\">./dir</span></span><br><span class=\"line\">    <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span></span><br><span class=\"line\">    <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"attr\">buildno:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>command</strong>：覆盖容器启动后默认执行的命令</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">command:</span> <span class=\"string\">bundle</span> <span class=\"string\">exec</span> <span class=\"string\">thin</span> <span class=\"string\">-p</span> <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"string\">----------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">command:</span> [<span class=\"string\">bundle</span>,<span class=\"string\">exec</span>,<span class=\"string\">thin</span>,<span class=\"string\">-p</span>,<span class=\"number\">3000</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dns</strong>：配置 dns 服务器，可以是一个值或列表</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dns:</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></span><br><span class=\"line\"><span class=\"string\">------------</span></span><br><span class=\"line\"><span class=\"attr\">dns:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">9.9</span><span class=\"number\">.9</span><span class=\"number\">.9</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dns_search</strong>：配置 DNS 搜索域，可以是一个值或列表</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dns_search:</span> <span class=\"string\">example.com</span></span><br><span class=\"line\"><span class=\"string\">------------------------</span></span><br><span class=\"line\"><span class=\"attr\">dns_search:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dc1.example.com</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dc2.example.com</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>environment</strong>：环境变量配置，可以用数组或字典两种方式</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"attr\">RACK_ENV:</span> <span class=\"string\">development</span></span><br><span class=\"line\">    <span class=\"attr\">SHOW:</span> <span class=\"string\">&#x27;ture&#x27;</span></span><br><span class=\"line\"><span class=\"string\">-------------------------</span></span><br><span class=\"line\"><span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">RACK_ENV=development</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">SHOW=ture</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>env_file</strong>：从文件中获取环境变量，可以指定一个文件路径或路径列表，其优先级低于 environment 指定的环境变量</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env_file:</span> <span class=\"string\">.env</span></span><br><span class=\"line\"><span class=\"string\">---------------</span></span><br><span class=\"line\"><span class=\"attr\">env_file:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./common.env</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>expose</strong>：暴露端口，只将端口暴露给连接的服务，而不暴露给主机</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">expose:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;3000&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>image</strong>：指定服务所使用的镜像</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">java</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>network_mode</strong>：设置网络模式</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;bridge&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;host&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;service:[service name]&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;container:[container name/id]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ports</strong>：对外暴露的端口定义，和 expose 对应</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ports:</span>   <span class=\"comment\"># 暴露端口信息  - &quot;宿主机端口:容器暴露端口&quot;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&quot;8763:8763&quot;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&quot;8763:8763&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>links</strong>：将指定容器连接到当前连接，可以设置别名，避免 ip 方式导致的容器重启动态改变的无法连接情况</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links:</span>    <span class=\"comment\"># 指定服务名称:别名</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker-compose-eureka-server:compose-eureka</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>volumes</strong>：卷挂载路径</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">/lib</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">/var</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-轻量级可视化工具-Portainer\"><a href=\"#Docker-轻量级可视化工具-Portainer\" class=\"headerlink\" title=\"Docker 轻量级可视化工具 Portainer\"></a>Docker 轻量级可视化工具 Portainer</h2><p>Portainer 是一款轻量级的应用，它提供了图形化界面，用于方便地管理 Docker 环境，包括单机环境和集群环境。</p>\n<p>docker 命令安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方版本</span></span><br><span class=\"line\">docker run -d -p 8000:8000 -p 9010:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 中文版本</span></span><br><span class=\"line\">docker run -d --restart=always --name=<span class=\"string\">&quot;portainer&quot;</span> -p 9010:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data 6053537/portainer-ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># EE 商业版本（public 为中文汉化资源）</span></span><br><span class=\"line\">docker run -d -p 8000:8000 -p 9010:9000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /u01/portainer/portainer_data:/data -v /u01/portainer/public:/public portainer/portainer-ee:2.10.0</span><br></pre></td></tr></table></figure>\n\n<p>第一次登录需要创建 admin 用户，访问地址：<code>xxx.xxx.xxx.xxx:9010</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203605.png\" alt=\"image-20211218203604987\"></p>\n<p>选择 local 选项卡后本地 docker 详细信息展示</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203652.png\" alt=\"image-20211218203652466\"></p>\n<p>管理本地环境</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203840.png\" alt=\"image-20211218203840461\"></p>\n<h2 id=\"Docker-Swarm\"><a href=\"#Docker-Swarm\" class=\"headerlink\" title=\"Docker Swarm\"></a>Docker Swarm</h2><blockquote>\n<p>官方文档：<a href=\"https://docs.docker.com/engine/swarm/\">https://docs.docker.com/engine/swarm/</a></p>\n</blockquote>\n<h3 id=\"什么是-Docker-Swarm\"><a href=\"#什么是-Docker-Swarm\" class=\"headerlink\" title=\"什么是 Docker Swarm\"></a>什么是 Docker Swarm</h3><p>Swarm 是 <a href=\"https://www.docker.com/\">Docker</a> 官方提供的一款集群管理工具，其主要作用是把若干台 Docker 主机抽象为一个整体，并且通过一个入口统一管理这些 Docker 主机上的各种 Docker 资源。</p>\n<p>Docker Swarm 和 Docker Compose 一样，都是 Docker 官方容器编排项目，但不同的是，Docker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务。</p>\n<h3 id=\"Docker-Swarm-架构图\"><a href=\"#Docker-Swarm-架构图\" class=\"headerlink\" title=\"Docker Swarm 架构图\"></a>Docker Swarm 架构图</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220405181654.png\" alt=\"image-20220405181654649\"></p>\n<p>上图可以看出，Swarm 是典型的 master-slave 结构，通过发现服务来选举 manager。manager 是中心管理节点，各个 node 上运行 agent 接受 manager 的统一管理，集群会自动通过 Raft 协议分布式选举出 manager 节点，无需额外的发现服务支持，避免了单点的瓶颈问题，同时也内置了 DNS 的负载均衡和对外部负载均衡机制的集成支持。</p>\n<h3 id=\"Swarm-关键概念\"><a href=\"#Swarm-关键概念\" class=\"headerlink\" title=\"Swarm 关键概念\"></a>Swarm 关键概念</h3><ul>\n<li><strong>Swarm（群）</strong></li>\n</ul>\n<p>嵌入在 Docker 引擎中的集群管理和编排功能是使用<a href=\"https://github.com/docker/swarmkit/\">swarmkit 构建的</a>。<code>Swarmkit</code> 是一个单独的项目，它实现了 Docker 的编排层并直接在 Docker 中使用。</p>\n<p>一个 swarm 由多个 Docker 主机组成，它们以<strong>swarm 模式</strong>运行并充当管理器（管理成员资格和委托）和工作人员（运行 <a href=\"https://docs.docker.com/engine/swarm/key-concepts/#services-and-tasks\">swarm 服务</a>）。给定的 Docker 主机可以是管理员、工作人员或同时执行这两种角色。创建服务时，您需要定义其最佳状态（副本数量、可用的网络和存储资源、服务向外界公开的端口等等）。Docker 致力于维护所需的状态。例如，如果一个工作节点变得不可用，Docker 会将该节点的任务安排在其他节点上。<em>任务</em>是一个 正在运行的容器，它是一个集群服务的一部分，由一个集群管理器管理，而不是一个独立的容器。</p>\n<p>swarm 服务相对于独立容器的主要优势之一是您可以修改服务的配置，包括它所连接的网络和卷，而无需手动重新启动服务。Docker 将更新配置，停止具有过期配置的服务任务，并创建与所需配置匹配的新任务。</p>\n<p>当 Docker 在 swarm 模式下运行时，您仍然可以在任何参与 swarm 的 Docker 主机以及 swarm 服务上运行独立容器。独立容器和 swarm 服务之间的一个关键区别在于，只有 <code>swarm manager</code> 可以管理 swarm，而独立容器可以在任何守护进程上启动。Docker 守护进程可以作为管理者、工作者或两者兼而有之。</p>\n<p>就像您可以使用<a href=\"https://docs.docker.com/compose/\">Docker Compose</a>定义和运行容器一样，您可以定义和运行<a href=\"https://docs.docker.com/engine/swarm/services/\">Swarm 服务</a>堆栈。</p>\n<ul>\n<li><strong>Node（节点）</strong></li>\n</ul>\n<p><strong>节点</strong>是参与 swarm 的 Docker 引擎的一个实例。您也可以将其视为 Docker 节点。您可以在单个物理计算机或云服务器上运行一个或多个节点，但生产群部署通常包括分布在多个物理和云计算机上的 Docker 节点。</p>\n<p>要将应用程序部署到 swarm，您需要向 <strong>管理器节点</strong>提交服务定义。管理节点将称为 <a href=\"https://docs.docker.com/engine/swarm/key-concepts/#services-and-tasks\">任务</a>的工作单元分派给工作节点。</p>\n<p>管理器节点还执行维护集群所需状态所需的编排和集群管理功能。管理器节点选举一个领导者来执行编排任务。</p>\n<p><strong>工作节点</strong>接收并执行从管理节点分派的任务。默认情况下，管理器节点也将服务作为工作节点运行，但您可以将它们配置为专门运行管理器任务并成为仅管理器节点。代理在每个工作节点上运行并报告分配给它的任务。<code>worker</code> 节点将其分配的任务的当前状态通知给 <code>manager</code> 节点，以便 <code>manager</code> 可以保持每个 <code>worker</code> 的期望状态。</p>\n<ul>\n<li><strong>Service（服务）</strong></li>\n</ul>\n<p><strong>服务</strong>是要在管理节点或工作节点上执行的任务的定义。它是 swarm 系统的<strong>中心结构</strong>，也是用户与 swarm 交互的主要根源。</p>\n<p>创建服务时，您需要指定要使用的容器映像以及在运行的容器中执行的命令。</p>\n<p>在<strong>复制服务</strong>模型中，群管理器根据您在所需状态中设置的规模在节点之间分配特定数量的副本任务。</p>\n<p>对于<strong>全局服务</strong>，swarm 在集群中的每个可用节点上为服务运行一个任务。</p>\n<ul>\n<li><strong>Task（任务）</strong></li>\n</ul>\n<p>一个<strong>任务</strong>携带一个 Docker 容器和在容器内运行的命令。它是 swarm 的<strong>原子调度单元</strong>。Manager 节点根据服务规模中设置的副本数将任务分配给工作节点。一旦任务被分配给一个节点，它就不能移动到另一个节点。它只能在分配的节点上运行或失败。</p>\n<ul>\n<li><strong>Load balancing（负载均衡）</strong></li>\n</ul>\n<p>swarm 管理器使用<strong>入口负载平衡</strong>将您希望在外部提供给 swarm 的服务公开。swarm manager 可以自动为服务分配一个<strong>PublishedPort</strong>，或者您可以为该服务配置一个 PublishedPort。您可以指定任何未使用的端口。如果不指定端口，swarm manager 会为服务分配一个 <code>30000-32767</code> 范围内的端口。</p>\n<p>外部组件（例如云负载均衡器）可以访问集群中任何节点的 PublishedPort 上的服务，无论该节点当前是否正在运行该服务的任务。swarm 中的所有节点将入口连接路由到正在运行的任务实例。</p>\n<p>Swarm 模式有一个内部 <code>DNS</code> 组件，它自动为 swarm 中的每个服务分配一个 DNS 条目。swarm manager 使用<strong>内部负载平衡</strong>根据服务的 DNS 名称在集群内的服务之间分配请求。</p>\n<h3 id=\"Swarm-工作原理\"><a href=\"#Swarm-工作原理\" class=\"headerlink\" title=\"Swarm 工作原理\"></a>Swarm 工作原理</h3><h4 id=\"节点如何工作\"><a href=\"#节点如何工作\" class=\"headerlink\" title=\"节点如何工作\"></a>节点如何工作</h4><p>Swarm 集群由管理节点（Manager）和工作节点（Work）构成。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220716220722.png\" alt=\"image-20220716220722605\"></p>\n<h5 id=\"管理节点\"><a href=\"#管理节点\" class=\"headerlink\" title=\"管理节点\"></a>管理节点</h5><p>Manager 节点处理集群管理任务：</p>\n<ul>\n<li>维护集群状态</li>\n<li>调度服务</li>\n<li>服务群模式<a href=\"https://docs.docker.com/engine/api/\">HTTP API 端点</a></li>\n</ul>\n<p>使用<a href=\"https://raft.github.io/raft.pdf\">Raft</a>实现，管理器维护整个 swarm 和在其上运行的所有服务的一致内部状态。出于测试目的，可以使用单个管理器运行 swarm。如果单管理器集群中的管理器发生故障，您的服务将继续运行，但您需要创建一个新集群才能恢复。</p>\n<p>为了利用 swarm 模式的容错特性，Docker 建议您根据组织的高可用性要求实现奇数个节点。当您有多个管理器时，您可以从管理器节点的故障中恢复而无需停机。</p>\n<ul>\n<li>一个三管理器群最多可以容忍一名管理器的损失。</li>\n<li>一个五管理器群最多可以同时丢失两个管理器节点。</li>\n<li>一个<code>N</code>管理器集群最多可以容忍丢失 <code>(N-1)/2</code>管理器。</li>\n<li>Docker 建议一个 swarm 最多使用七个管理器节点。</li>\n</ul>\n<blockquote>\n<p><strong>重要提示</strong>：添加更多管理器并不意味着增加可扩展性或提高性能。一般来说，情况正好相反。</p>\n</blockquote>\n<h5 id=\"工作节点\"><a href=\"#工作节点\" class=\"headerlink\" title=\"工作节点\"></a>工作节点</h5><p>工作节点也是 Docker 引擎的实例，其唯一目的是执行容器。Worker 节点不参与 Raft 分布式状态，不做调度决策，也不服务于 swarm 模式的 HTTP API。</p>\n<p>您可以创建一个由一个管理器节点组成的集群，但如果没有至少一个管理器节点，您就不能拥有一个工作程序节点。默认情况下，所有 manager 也是 worker。在单个管理节点集群中，您可以运行类似 <code>docker service create</code> 的命令，并且调度程序将所有任务放在本地引擎上。</p>\n<p>要防止调度程序将任务放置在多节点集群中的管理器节点上，请将管理器节点的可用性设置为 <code>Drain</code>。调度器优雅地停止 <code>Drain</code> 模式节点上的任务，并在一个 <code>Active</code> 节点上调度任务。调度程序不会将新任务分配给 <code>Drain</code> 可用的节点。</p>\n<p>请参阅<a href=\"https://docs.docker.com/engine/reference/commandline/node_update/\">docker node update</a> 命令行参考以了解如何更改节点可用性。</p>\n<h4 id=\"服务如何运作\"><a href=\"#服务如何运作\" class=\"headerlink\" title=\"服务如何运作\"></a>服务如何运作</h4><p>要在 Docker 引擎处于 swarm 模式时部署应用程序映像，您需要创建一个服务。通常，服务是某个更大应用程序上下文中微服务的映像。服务的示例可能包括 HTTP 服务器、数据库或您希望在分布式环境中运行的任何其他类型的可执行程序。</p>\n<p>创建服务时，您需要指定要使用的容器映像以及在运行的容器中执行的命令。您还可以定义服务的选项，包括：</p>\n<ul>\n<li>swarm 使服务在 swarm 外部可用的端口</li>\n<li>服务连接到集群中的其他服务的覆盖网络</li>\n<li>CPU 和内存限制和预留</li>\n<li>滚动更新策略</li>\n<li>在 swarm 中运行的图像的副本数</li>\n</ul>\n<h5 id=\"服务、任务和容器\"><a href=\"#服务、任务和容器\" class=\"headerlink\" title=\"服务、任务和容器\"></a>服务、任务和容器</h5><p>当您将服务部署到 swarm 时，swarm manager 接受您的服务定义作为服务的所需状态。然后，它将集群中的节点上的服务安排为一个或多个副本任务。这些任务在 swarm 中的节点上彼此独立运行。</p>\n<p>例如，假设您想在 nginx 的三个实例之间进行负载平衡。下图显示了具有三个副本的 nginx 服务。nginx 的三个实例中的每一个都是 swarm 中的一个任务。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717111642.png\" alt=\"image-20220717111642619\"></p>\n<p>容器是一个独立的进程。在 swarm 模式模型中，每个任务只调用一个容器。任务类似于调度程序放置容器的“槽”。一旦容器处于活动状态，调度程序就会识别出任务处于运行状态。如果容器未通过健康检查或终止，则任务终止。</p>\n<h5 id=\"任务和调度\"><a href=\"#任务和调度\" class=\"headerlink\" title=\"任务和调度\"></a>任务和调度</h5><p>任务是 swarm 中调度的原子单元。当您通过创建或更新服务来声明所需的服务状态时，编排器通过调度任务来实现所需的状态。例如，您定义了一个服务，该服务指示协调器始终保持三个 HTTP 侦听器实例运行。编排器通过创建三个任务来响应。每个任务都是调度程序通过生成容器来填充的槽。容器是任务的实例化。如果 HTTP 侦听器任务随后未能通过其健康检查或崩溃，编排器将创建一个新的副本任务来生成一个新容器。</p>\n<p>任务是一种单向机制。它通过一系列状态单调地进行：分配、准备、运行等。如果任务失败，编排器将删除任务及其容器，然后根据服务指定的所需状态创建一个新任务来替换它。</p>\n<p>Docker swarm 模式的底层逻辑是一个通用的调度器和编排器。服务和任务抽象本身并不知道它们实现的容器。假设您可以实现其他类型的任务，例如虚拟机任务或非容器化流程任务。调度器和编排器不知道任务的类型。但是，当前版本的 Docker 只支持容器任务。</p>\n<p>下图显示了 swarm 模式如何接受服务创建请求并将任务调度到工作节点。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717231629.png\" alt=\"image-20220717231629076\"></p>\n<h5 id=\"待办服务（pending）\"><a href=\"#待办服务（pending）\" class=\"headerlink\" title=\"待办服务（pending）\"></a>待办服务（pending）</h5><p>一个服务可以这样配置，使得当前在 swarm 中的任何节点都不能运行它的任务。在这种情况下，服务保持状态<code>pending</code>。以下是服务可能保持状态的几个示例<code>pending</code>。</p>\n<blockquote>\n<p><strong>注意</strong>：如果您的唯一目的是阻止部署服务，请将服务缩放到 0，而不是尝试将其配置为保留在<code>pending</code>.</p>\n</blockquote>\n<ul>\n<li>如果所有节点都已暂停或耗尽，并且您创建了一项服务，则该服务将处于挂起状态，直到节点可用为止。实际上，第一个可用的节点会获得所有任务，因此这在生产环境中不是一件好事。</li>\n<li>您可以为服务保留特定数量的内存。如果 swarm 中没有节点具有所需的内存量，则服务将保持挂起状态，直到可以运行其任务的节点可用。如果您指定一个非常大的值，例如 500 GB，则该任务将永远保持挂起状态，除非您确实有一个可以满足它的节点。</li>\n<li>您可以对服务施加放置约束，并且这些约束可能无法在给定时间得到遵守。</li>\n</ul>\n<p>这种行为说明您的任务的要求和配置与当前的 swarm 状态并没有紧密联系。作为 swarm 的管理员，您声明了您的 swarm 所需的状态，并且管理器与 swarm 中的节点一起创建该状态。您不需要对 swarm 上的任务进行微观管理。</p>\n<h5 id=\"部署模式\"><a href=\"#部署模式\" class=\"headerlink\" title=\"部署模式\"></a>部署模式</h5><p>有两种类型的服务部署，复制的（<code>replicated</code>）和全局的（<code>global</code>）。</p>\n<p>对于复制服务，您指定要运行的相同任务的数量。例如，您决定部署具有三个副本的 HTTP 服务，每个副本提供相同的内容。</p>\n<p>全局服务是在每个节点上运行一个任务的服务。没有预先指定的任务数量。每次将节点添加到 swarm 时，编排器都会创建一个任务，调度器会将任务分配给新节点。全局服务的良好候选者是监控代理、防病毒扫描程序或您希望在集群中的每个节点上运行的其他类型的容器。</p>\n<p>下图显示了黄色的三服务副本和灰色的全局服务。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717232121.png\" alt=\"image-20220717232121078\"></p>\n<h4 id=\"Swarm-任务状态\"><a href=\"#Swarm-任务状态\" class=\"headerlink\" title=\"Swarm 任务状态\"></a>Swarm 任务状态</h4><p>Docker 允许创建可以启动任务的服务。服务是对所需状态的描述，而任务完成工作。工作按以下顺序安排在 swarm 节点上：</p>\n<ol>\n<li>通过使用创建服务<code>docker service create</code>。</li>\n<li>请求转到 Docker 管理器节点。</li>\n<li>Docker 管理器节点安排服务在特定节点上运行。</li>\n<li>每个服务可以启动多个任务。</li>\n<li>每个任务都有一个生命周期，其状态包括 <code>NEW</code>、<code>PENDING</code> 和 <code>COMPLETE</code>。</li>\n</ol>\n<p>任务是运行一次即可完成的执行单元。当一个任务停止时，它不会再次执行，但一个新的任务可能会取代它。</p>\n<p>任务通过多个状态前进，直到它们完成或失败。任务在 <code>NEW</code> 状态中初始化。任务通过多个状态向前推进，并且其状态不会后退。例如，任务永远不会从 <code>COMPLETE</code> 到 <code>RUNNING</code>。</p>\n<p>任务按以下顺序通过状态：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">任务状态</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>NEW</code></td>\n<td align=\"left\">任务已初始化。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PENDING</code></td>\n<td align=\"left\">分配了任务的资源。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ASSIGNED</code></td>\n<td align=\"left\">Docker 将任务分配给节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ACCEPTED</code></td>\n<td align=\"left\">该任务已被工作节点接受。如果工作节点拒绝任务，则状态更改为<code>REJECTED</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PREPARING</code></td>\n<td align=\"left\">Docker 正在准备任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>STARTING</code></td>\n<td align=\"left\">Docker 正在启动任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>RUNNING</code></td>\n<td align=\"left\">任务正在执行。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COMPLETE</code></td>\n<td align=\"left\">任务退出，没有错误代码。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>FAILED</code></td>\n<td align=\"left\">任务以错误代码退出。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>SHUTDOWN</code></td>\n<td align=\"left\">Docker 请求关闭任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>REJECTED</code></td>\n<td align=\"left\">工作节点拒绝了该任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ORPHANED</code></td>\n<td align=\"left\">节点关闭时间过长。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>REMOVE</code></td>\n<td align=\"left\">该任务不是终端，但相关服务已被删除或缩小。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>查看任务状态</strong></p>\n<p>运行 docker service ps <service-name>以获取任务的状态。该 <code>CURRENT STATE</code> 字段显示任务的状态以及它在那里的时间。</p>\n</blockquote>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><h4 id=\"创建-Swarm\"><a href=\"#创建-Swarm\" class=\"headerlink\" title=\"创建 Swarm\"></a>创建 Swarm</h4><ol>\n<li>运行以下命令来创建一个新的 swarm：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm init --advertise-addr &lt;MANAGER-IP&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>例如：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm init --advertise-addr 192.168.88.230</span><br><span class=\"line\">Swarm initialized: current node (uo7m7w01d5wfdjt0qn9m3aau4) is now a manager.</span><br><span class=\"line\"></span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-3abelxhlyvhm54klavpbr06r5 192.168.88.230:2377</span><br><span class=\"line\"></span><br><span class=\"line\">To add a manager to this swarm, run <span class=\"string\">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该 <code>--advertise-addr</code> 标志将管理节点配置为将其地址发布为 <code>192.168.88.230</code>。 swarm 中的其他节点必须能够访问该 IP 地址的 manager。</p>\n<p>输出包括将新节点加入 swarm 的命令。根据 <code>--token</code> 标志的值，节点将作为 manager 或 worker 加入。</p>\n</blockquote>\n<ol start=\"3\">\n<li>运行<code>docker info</code>查看 swarm 的当前状态：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker info</span><br><span class=\"line\"> Containers: 3</span><br><span class=\"line\">  Running: 3</span><br><span class=\"line\">  Paused: 0</span><br><span class=\"line\">  Stopped: 0</span><br><span class=\"line\"> Images: 4</span><br><span class=\"line\"> ...snip...</span><br><span class=\"line\"> Swarm: active</span><br><span class=\"line\">  NodeID: uo7m7w01d5wfdjt0qn9m3aau4</span><br><span class=\"line\">  Is Manager: <span class=\"literal\">true</span></span><br><span class=\"line\">  ClusterID: ym3kr78wgx258lawn3iclgxwq</span><br><span class=\"line\">  Managers: 1</span><br><span class=\"line\">  Nodes: 3</span><br><span class=\"line\">  ...snip...</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>运行<code>docker node ls</code>命令查看节点信息：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker node <span class=\"built_in\">ls</span></span><br><span class=\"line\">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class=\"line\">uo7m7w01d5wfdjt0qn9m3aau4 *   88230      Ready     Active         Leader           20.10.13</span><br><span class=\"line\">p4tlkfxa4d2ne1diq0mtlifs9     88233      Ready     Active                          20.10.17</span><br><span class=\"line\">oawv9cs597brq8h5hzis3ynlc     88237      Ready     Active                          20.10.17</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将节点添加到-Swarm\"><a href=\"#将节点添加到-Swarm\" class=\"headerlink\" title=\"将节点添加到 Swarm\"></a>将节点添加到 Swarm</h4><p>当你创建了一个带有管理节点的 swarm 时，你就可以添加工作节点了。</p>\n<ol>\n<li>运行创建 Swarm 中 <code>docker swarm init</code> 步骤生成的命令，以创建一个加入现有 swarm 的工作节点：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-3abelxhlyvhm54klavpbr06r5 192.168.88.230:2377</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果没有可用的命令，可以在管理节点上运行以下命令来生成工作节点的加入命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm join-token worker</span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-3abelxhlyvhm54klavpbr06r5 192.168.88.230:2377</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>生成管理节点的加入命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm join-token manager</span><br><span class=\"line\">To add a manager to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-0so9mhkgy8btr579ho4pfza9n 192.168.88.230:2377</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h4><p>先在要删除的节点上运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm leave</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>manage</code> 节点上运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node <span class=\"built_in\">rm</span> NODE </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点提升\"><a href=\"#节点提升\" class=\"headerlink\" title=\"节点提升\"></a>节点提升</h4><p><strong>用法</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node promote NODE [NODE...]</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<p>将节点提升为 <code>manager</code>。该命令只能在 <code>manage node</code> 上执行。</p>\n<blockquote>\n<p><strong>笔记</strong></p>\n<p>这是一个集群管理命令，必须在 swarm manager 节点上执行。</p>\n</blockquote>\n<h4 id=\"节点降级\"><a href=\"#节点降级\" class=\"headerlink\" title=\"节点降级\"></a>节点降级</h4><p><strong>用法</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node demote NODE [NODE...]</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<p>降级现有 <code>manager</code>，使其不再是 <code>manager</code>。</p>\n<blockquote>\n<p><strong>笔记</strong></p>\n<p>这是一个集群管理命令，必须在 swarm manager 节点上执行。</p>\n</blockquote>\n<h4 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h4><ol>\n<li>在管理节点上运行以下命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br><span class=\"line\">ktcjndh4nj4nbwp461idnob0y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>该 <code>docker service create</code> 命令创建服务。</li>\n<li>该 <code>--name</code> 标志命名服务 <code>helloworld</code>。</li>\n<li>该 <code>--replicas</code> 标志指定 1 个正在运行的实例的所需状态。</li>\n<li>参数 <code>alpine ping docker.com</code> 将服务定义为执行命令的 Alpine Linux 容器 <code>ping docker.com</code>。</li>\n</ul>\n<ol start=\"2\">\n<li>运行 <code>docker service ls</code> 查看正在运行的服务列表：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service <span class=\"built_in\">ls</span></span><br><span class=\"line\">ID             NAME         MODE         REPLICAS   IMAGE           PORTS</span><br><span class=\"line\">ktcjndh4nj4n   helloworld   replicated   1/1        alpine:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h4><p>将服务部署到 swarm 后，可以使用 <code>Docker CLI</code> 查看有关在 swarm 中运行的服务的详细信息。</p>\n<ol>\n<li>运行 <code>docker service inspect --pretty &lt;SERVICE-ID&gt;</code> 以易于阅读的格式显示有关服务的详细信息。</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">docker</span> <span class=\"string\">service</span> <span class=\"string\">inspect</span> <span class=\"string\">--pretty</span> <span class=\"string\">helloworld</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ID:</span>\t\t<span class=\"string\">ktcjndh4nj4nbwp461idnob0y</span></span><br><span class=\"line\"><span class=\"attr\">Name:</span>\t\t<span class=\"string\">helloworld</span></span><br><span class=\"line\"><span class=\"attr\">Service Mode:</span>\t<span class=\"string\">Replicated</span></span><br><span class=\"line\"> <span class=\"attr\">Replicas:</span>\t<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">Placement:</span></span><br><span class=\"line\"><span class=\"attr\">ContainerSpec:</span></span><br><span class=\"line\"> <span class=\"attr\">Image:</span>\t\t<span class=\"string\">alpine</span></span><br><span class=\"line\"> <span class=\"attr\">Args:</span>\t\t<span class=\"string\">ping</span> <span class=\"string\">docker.com</span></span><br><span class=\"line\"> <span class=\"attr\">Init:</span>\t\t<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">Resources:</span></span><br><span class=\"line\"><span class=\"attr\">Endpoint Mode:</span>\t<span class=\"string\">vip</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>提示</strong>：要以 json 格式返回服务详细信息，请运行不带 <code>--pretty</code> 标志的相同命令。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service inspect helloworld</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;ID&quot;</span>: <span class=\"string\">&quot;ktcjndh4nj4nbwp461idnob0y&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Version&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Index&quot;</span>: 28</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreatedAt&quot;</span>: <span class=\"string\">&quot;2022-04-05T15:00:31.72873489Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;UpdatedAt&quot;</span>: <span class=\"string\">&quot;2022-04-05T15:00:31.72873489Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Spec&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;helloworld&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;TaskTemplate&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;ContainerSpec&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Image&quot;</span>: <span class=\"string\">&quot;alpine&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Args&quot;</span>: [</span><br><span class=\"line\">                        <span class=\"string\">&quot;ping&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;docker.com&quot;</span></span><br><span class=\"line\">                    ],</span><br><span class=\"line\">                    <span class=\"string\">&quot;Init&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;StopGracePeriod&quot;</span>: 10000000000,</span><br><span class=\"line\">                    <span class=\"string\">&quot;DNSConfig&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Isolation&quot;</span>: <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;Resources&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Limits&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Reservations&quot;</span>: &#123;&#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;RestartPolicy&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Condition&quot;</span>: <span class=\"string\">&quot;any&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Delay&quot;</span>: 5000000000,</span><br><span class=\"line\">                    <span class=\"string\">&quot;MaxAttempts&quot;</span>: 0</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;Placement&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;ForceUpdate&quot;</span>: 0,</span><br><span class=\"line\">                <span class=\"string\">&quot;Runtime&quot;</span>: <span class=\"string\">&quot;container&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;Mode&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Replicated&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Replicas&quot;</span>: 1</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;EndpointSpec&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Mode&quot;</span>: <span class=\"string\">&quot;vip&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;Endpoint&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Spec&quot;</span>: &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行 <code>docker service ps &lt;SERVICE-ID&gt;</code> 查看哪些节点正在运行该服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID             NAME           IMAGE           NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class=\"line\">3s1myvuaoc0k   helloworld.1.3s1myvuaoc0kdvlaz4fgz3usk   alpine:latest   8886      Running         Running 31 minutes ago</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，服务的一个实例正在节点 <code>helloworld</code> 上运行 。<code>8886</code> 您可能会看到该服务在您的管理器节点上运行。默认情况下，swarm 中的管理节点可以像工作节点一样执行任务。</p>\n<p>Swarm 还向您显示服务任务的 <code>DESIRED STATE</code> 和 <code>CURRENT STATE</code>，以便您可以查看任务是否根据服务定义运行。</p>\n<ol start=\"3\">\n<li>在运行 <code>docker ps</code> 任务的节点上运行以查看有关任务容器的详细信息。</li>\n</ol>\n<blockquote>\n<p><strong>提示</strong>：如果<code>helloworld</code>在管理节点以外的节点上运行，则必须 ssh 到该节点。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS     NAMES</span><br><span class=\"line\">3128610843c3   alpine:latest   <span class=\"string\">&quot;ping docker.com&quot;</span>   38 minutes ago   Up 38 minutes    helloworld.1.3s1myvuaoc0kdvlaz4fgz3usk</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展服务\"><a href=\"#扩展服务\" class=\"headerlink\" title=\"扩展服务\"></a>扩展服务</h4><p>将服务部署到 swarm 后，您就可以使用 <code>Docker CLI</code> 扩展服务中的容器数量了。在服务中运行的容器称为“任务”。</p>\n<ol>\n<li>运行以下命令以更改在 swarm 中运行的服务的所需状态</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service scale &lt;SERVICE-ID&gt;=&lt;NUMBER-OF-TASKS&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service scale helloworld=5</span><br><span class=\"line\">hellworld scaled to 5</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行 <code>docker service ps &lt;SERVICE-ID&gt;</code> 查看更新的任务列表：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID             NAME           IMAGE           NODE      DESIRED STATE   CURRENT STATE                ERROR     PORTS</span><br><span class=\"line\">3s1myvuaoc0k   helloworld.1   alpine:latest   8886      Running         Running 43 minutes ago</span><br><span class=\"line\">sub0vfkz17t1   helloworld.2   alpine:latest   88235     Running         Running 53 seconds ago</span><br><span class=\"line\">qiiwkq8eaw4c   helloworld.3   alpine:latest   88236     Running         Running about a minute ago</span><br><span class=\"line\">272jo44c63qd   helloworld.4   alpine:latest   88236     Running         Running about a minute ago</span><br><span class=\"line\">vx61pv6vzm9y   helloworld.5   alpine:latest   8886      Running         Running 2 minutes ago</span><br></pre></td></tr></table></figure>\n\n<p>您可以看到 swarm 创建了 4 个新任务以扩展到总共 5 个正在运行的 Alpine Linux 实例。任务分布在 swarm 的三个节点之间。</p>\n<h4 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h4><ol>\n<li>运行 <code>docker service rm helloworld</code> 以删除 <code>helloworld</code> 服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service <span class=\"built_in\">rm</span> helloworld</span><br><span class=\"line\">helloworld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应用滚动更新\"><a href=\"#应用滚动更新\" class=\"headerlink\" title=\"应用滚动更新\"></a>应用滚动更新</h4><ol>\n<li>将您的 Redis 标签部署到 swarm 并为 swarm 配置 10 秒的更新延迟。请注意，以下示例显示了较旧的 Redis 标记：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service create \\</span><br><span class=\"line\">  --replicas 3 \\</span><br><span class=\"line\">  --name redis \\</span><br><span class=\"line\">  --update-delay 10s \\</span><br><span class=\"line\">  redis:3.0.6</span><br><span class=\"line\">pvud31bgvl7e5ljf6xuxcn7dh</span><br></pre></td></tr></table></figure>\n\n<p>您在服务部署时配置滚动更新策略。</p>\n<p>该 <code>--update-delay</code> 标志配置更新服务任务或任务集之间的时间延迟。您可以将时间描述 <code>T</code> 为秒数 <code>Ts</code>、分钟数 <code>Tm</code> 或小时数的组合 <code>Th</code>。所以 <code>10m30s</code> 表示延迟 10 分 30 秒。</p>\n<p>默认情况下，调度程序一次更新 1 个任务。您可以传递该 <code>--update-parallelism</code> 标志来配置调度程序同时更新的最大服务任务数。</p>\n<p>默认情况下，当单个任务的更新返回状态为 时 <code>RUNNING</code>，调度程序会安排另一个任务进行更新，直到所有任务都更新完毕。如果在更新期间的任何时间任务返回 <code>FAILED</code>，调度程序会暂停更新。您可以使用或 的 <code>--update-failure-action</code> 标志来控制行为 。<code>docker service create</code> <code>docker service update</code></p>\n<ol start=\"2\">\n<li>检查<code>redis</code>服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service inspect --pretty redis</span><br><span class=\"line\"></span><br><span class=\"line\">ID:\t\tpvud31bgvl7e5ljf6xuxcn7dh</span><br><span class=\"line\">Name:\t\tredis</span><br><span class=\"line\">Service Mode:\tReplicated</span><br><span class=\"line\"> Replicas:\t3</span><br><span class=\"line\">Placement:</span><br><span class=\"line\">UpdateConfig:</span><br><span class=\"line\"> Parallelism:\t1</span><br><span class=\"line\"> Delay:\t\t10s</span><br><span class=\"line\">ContainerSpec:</span><br><span class=\"line\"> Image:\t\tredis:3.0.6</span><br><span class=\"line\"> Init:\t\t<span class=\"literal\">false</span></span><br><span class=\"line\">Resources:</span><br><span class=\"line\">Endpoint Mode:\tvip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>现在您可以更新 <code>redis</code>， swarm manager 根据 <code>UpdateConfig</code> 策略将更新应用到节点：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service update --image redis:3.0.7 redis</span><br><span class=\"line\">redis</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，调度程序按如下方式应用滚动更新：</p>\n<ul>\n<li>停止第一个任务。</li>\n<li>为已停止的任务安排更新。</li>\n<li>启动更新任务的容器。</li>\n<li>如果一个任务的更新返回<code>RUNNING</code>，等待指定的延迟时间然后开始下一个任务。</li>\n<li>如果在更新期间的任何时间，任务返回<code>FAILED</code>，则暂停更新。</li>\n</ul>\n<ol start=\"4\">\n<li>运行 <code>docker service inspect --pretty redis</code> 以查看处于所需状态的新图像：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service inspect --pretty redis</span><br><span class=\"line\"></span><br><span class=\"line\">ID:\t\tpvud31bgvl7e5ljf6xuxcn7dh</span><br><span class=\"line\">Name:\t\tredis</span><br><span class=\"line\">Service Mode:\tReplicated</span><br><span class=\"line\"> Replicas:\t3</span><br><span class=\"line\">Placement:</span><br><span class=\"line\">UpdateConfig:</span><br><span class=\"line\"> Parallelism:\t1</span><br><span class=\"line\"> Delay:\t\t10s</span><br><span class=\"line\">ContainerSpec:</span><br><span class=\"line\"> Image:\t\tredis:3.0.7</span><br><span class=\"line\"> Init:\t\t<span class=\"literal\">false</span></span><br><span class=\"line\">Resources:</span><br><span class=\"line\">Endpoint Mode:\tvip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行 <code>docker service ps &lt;SERVICE-ID&gt;</code> 以观看滚动更新：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps redis</span><br><span class=\"line\">ID             NAME          IMAGE         NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class=\"line\">s3uwdrtssguv   redis.1       redis:3.0.7   88236     Running         Running 3 minutes ago</span><br><span class=\"line\">9nav9b094si0    \\_ redis.1   redis:3.0.6   88236     Shutdown        Shutdown 5 minutes ago</span><br><span class=\"line\">tdy6tqfhweo4   redis.2       redis:3.0.7   88235     Running         Running 2 minutes ago</span><br><span class=\"line\">t9vr0kt1h8av    \\_ redis.2   redis:3.0.6   88235     Shutdown        Shutdown 3 minutes ago</span><br><span class=\"line\">xjc6v95dayhv   redis.3       redis:3.0.7   8886      Running         Running 3 minutes ago</span><br><span class=\"line\">biy701m9tvat    \\_ redis.3   redis:3.0.6   8886      Shutdown        Shutdown 4 minutes ago</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"排空一个节点\"><a href=\"#排空一个节点\" class=\"headerlink\" title=\"排空一个节点\"></a>排空一个节点</h4><p>有时，例如计划的维护时间，您需要将节点设置为 <code>DRAIN</code> 可用。<code>DRAIN</code> 可用性阻止节点从集群管理器接收新任务。这也意味着管理器停止在节点上运行的任务，并在可用的节点上启动副本任务 <code>ACTIVE</code>。</p>\n<blockquote>\n<p><strong>重要</strong>：将节点设置为 <code>DRAIN</code> 不会从该节点删除独立容器，例如使用 Docker 引擎 API 创建的 <code>docker run</code> 容器 <code>docker-compose up</code>。一个节点的状态，包括 <code>DRAIN</code>，只影响节点调度 swarm 服务工作负载的能力。</p>\n</blockquote>\n<ol>\n<li>运行 <code>docker node update --availability drain &lt;NODE-ID&gt;</code> 以排空已分配任务的节点：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker node update --availability drain worker1</span><br><span class=\"line\">work1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>检查节点其可用性：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker node inspect --pretty worker1</span><br></pre></td></tr></table></figure>\n\n<p><code>AVAILABILITY</code> 属性值为 <code>Drain</code></p>\n<h2 id=\"Docker-Stack\"><a href=\"#Docker-Stack\" class=\"headerlink\" title=\"Docker Stack\"></a>Docker Stack</h2><h3 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h3><p>指定与服务的部署和运行有关的配置。只在 swarm 模式下才会有用。</p>\n<figure class=\"highlight nestedtext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">version</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3.7&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">services</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">  <span class=\"attribute\">redis</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">    <span class=\"attribute\">image</span><span class=\"punctuation\">:</span> <span class=\"string\">redis:alpine</span></span><br><span class=\"line\">    <span class=\"attribute\">deploy</span><span class=\"punctuation\">:</span></span><br><span class=\"line\"><span class=\"attribute\">sssssssss</span></span><br><span class=\"line\"><span class=\"attribute\">      endpoint_mode</span><span class=\"punctuation\">:</span> <span class=\"string\">dnsrr</span></span><br><span class=\"line\">      <span class=\"attribute\">labels</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">        <span class=\"attribute\">description</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;This redis service label&quot;</span></span><br><span class=\"line\">      <span class=\"attribute\">resources</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">        <span class=\"attribute\">limits</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">          <span class=\"attribute\">cpus</span><span class=\"punctuation\">:</span> <span class=\"string\">&#x27;0.50&#x27;</span></span><br><span class=\"line\">          <span class=\"attribute\">memory</span><span class=\"punctuation\">:</span> <span class=\"string\">50M</span></span><br><span class=\"line\">        <span class=\"attribute\">reservations</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">          <span class=\"attribute\">cpus</span><span class=\"punctuation\">:</span> <span class=\"string\">&#x27;0.25&#x27;</span></span><br><span class=\"line\">          <span class=\"attribute\">memory</span><span class=\"punctuation\">:</span> <span class=\"string\">20M</span></span><br><span class=\"line\">      <span class=\"attribute\">restart_policy</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">        <span class=\"attribute\">condition</span><span class=\"punctuation\">:</span> <span class=\"string\">on-failure</span></span><br><span class=\"line\">        <span class=\"attribute\">delay</span><span class=\"punctuation\">:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">        <span class=\"attribute\">max_attempts</span><span class=\"punctuation\">:</span> <span class=\"string\">3</span></span><br><span class=\"line\">        <span class=\"attribute\">window</span><span class=\"punctuation\">:</span> <span class=\"string\">120s</span></span><br></pre></td></tr></table></figure>\n\n<p>可以选参数：</p>\n<p><strong>endpoint_mode</strong>：访问集群服务的方式。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">endpoint_mode:</span> vip</span><br><span class=\"line\"><span class=\"meta\"># Docker 集群服务一个对外的虚拟 ip。所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器。</span></span><br><span class=\"line\"><span class=\"symbol\">endpoint_mode:</span> dnsrr</span><br><span class=\"line\"><span class=\"meta\"># DNS 轮询（DNSRR）。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>labels</strong>：在服务上设置标签。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。</p>\n<p><strong>mode</strong>：指定服务提供的模式。</p>\n<ul>\n<li><p><strong>replicated</strong>：复制服务，复制指定服务到集群的机器上。</p>\n</li>\n<li><p><strong>global</strong>：全局服务，服务将部署至集群的每个节点。</p>\n</li>\n<li><p>图解：下图中黄色的方块是 replicated 模式的运行情况，灰色方块是 global 模式的运行情况。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220713152904.png\" alt=\"img\"></p>\n</li>\n</ul>\n<p><strong>replicas：mode</strong> 为 replicated 时，需要使用此参数配置具体运行的节点数量。</p>\n<p><strong>resources</strong>：配置服务器资源使用的限制，例如上例子，配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常。</p>\n<p><strong>restart_policy</strong>：配置如何在退出容器时重新启动容器。</p>\n<ul>\n<li>condition：可选 none，on-failure 或者 any（默认值：any）。</li>\n<li>delay：设置多久之后重启（默认值：0）。</li>\n<li>max_attempts：尝试重新启动容器的次数，超出次数，则不再尝试（默认值：一直重试）。</li>\n<li>window：设置容器重启超时时间（默认值：0）。</li>\n</ul>\n<p><strong>rollback_config</strong>：配置在更新失败的情况下应如何回滚服务。</p>\n<ul>\n<li>parallelism：一次要回滚的容器数。如果设置为 0，则所有容器将同时回滚。</li>\n<li>delay：每个容器组回滚之间等待的时间（默认为 0s）。</li>\n<li>failure_action：如果回滚失败，该怎么办。其中一个 continue 或者 pause（默认 pause）。</li>\n<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为 0s）。</li>\n<li>max_failure_ratio：在回滚期间可以容忍的故障率（默认为 0）。</li>\n<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first ）。</li>\n</ul>\n<p><strong>update_config</strong>：配置应如何更新服务，对于配置滚动更新很有用。</p>\n<ul>\n<li>parallelism：一次更新的容器数。</li>\n<li>delay：在更新一组容器之间等待的时间。</li>\n<li>failure_action：如果更新失败，该怎么办。其中一个 continue，rollback 或者 pause （默认：pause）。</li>\n<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为 0s）。</li>\n<li>max_failure_ratio：在更新过程中可以容忍的故障率。</li>\n<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first）。</li>\n</ul>\n<p><strong>注</strong>：仅支持 V3.4 及更高版本。</p>\n","more":"<h2 id=\"Docker-复杂应用安装\"><a href=\"#Docker-复杂应用安装\" class=\"headerlink\" title=\"Docker 复杂应用安装\"></a>Docker 复杂应用安装</h2><h3 id=\"MySQL-主从复制\"><a href=\"#MySQL-主从复制\" class=\"headerlink\" title=\"MySQL 主从复制\"></a>MySQL 主从复制</h3><p>主从搭建步骤：</p>\n<ul>\n<li><h4 id=\"新建主服务器容器实例-3307\"><a href=\"#新建主服务器容器实例-3307\" class=\"headerlink\" title=\"新建主服务器容器实例 3307\"></a><strong>新建主服务器容器实例 3307</strong></h4></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3307:3306 --name mysql-master \\</span><br><span class=\"line\">-v /mydata/mysql-master/log:/var/log/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-master/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-master/conf:/etc/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root  \\</span><br><span class=\"line\">-d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>进入/mydata/mysql-master/conf 目录下新建 my.cnf</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># vim my.cnf</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=101</span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能</span></span><br><span class=\"line\">log-bin=mall-mysql-bin</span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>修改完配置后重启 master 实例</strong></li>\n</ol>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@88231</span> conf]<span class=\"meta\"># docker restart mysql-master</span></span><br><span class=\"line\">mysql-master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>进入 mysql-master 容器</strong></li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@88231</span> conf]<span class=\"comment\"># docker exec -it mysql-master /bin/bash</span></span><br><span class=\"line\">root<span class=\"variable\">@c84fa378812d</span><span class=\"symbol\">:/</span><span class=\"comment\"># mysql -uroot -p</span></span><br><span class=\"line\"><span class=\"title class_\">Enter</span> <span class=\"symbol\">password:</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>master 容器实例内创建数据同步用户</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"新建从服务器容器实例-3308\"><a href=\"#新建从服务器容器实例-3308\" class=\"headerlink\" title=\"新建从服务器容器实例 3308\"></a>新建从服务器容器实例 3308</h4></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3308:3306 --name mysql-slave \\</span><br><span class=\"line\">-v /mydata/mysql-slave/log:/var/log/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-slave/data:/var/lib/mysql \\</span><br><span class=\"line\">-v /mydata/mysql-slave/conf:/etc/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root  \\</span><br><span class=\"line\">-d mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>进入/mydata/mysql-slave/conf 目录下新建 my.cnf</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># vim my.cnf</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=102</span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span></span><br><span class=\"line\">log-bin=mall-mysql-slave1-bin</span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\"><span class=\"comment\">## relay_log配置中继日志</span></span><br><span class=\"line\">relay_log=mall-mysql-relay-bin</span><br><span class=\"line\"><span class=\"comment\">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\"><span class=\"comment\">## slave设置为只读（具有super权限的用户除外）</span></span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>修改完配置后重启 slave 实例</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># docker restart mysql-slave</span></span><br><span class=\"line\">mysql-slave</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><strong>在主数据库中查看主从同步状态</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master status;</span><br><span class=\"line\">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File                  | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| mall-mysql-bin.000001 |      617 |              | mysql            |                   |</span><br><span class=\"line\">+-----------------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>进入 mysql-slave 容器</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@88231 conf]<span class=\"comment\"># docker exec -it mysql-slave /bin/bash</span></span><br><span class=\"line\">root@820edd47f326:/<span class=\"comment\"># mysql -uroot -p</span></span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><strong>在从数据库中配置主从复制</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=<span class=\"string\">&#x27;宿主机ip&#x27;</span>, master_user=<span class=\"string\">&#x27;slave&#x27;</span>, master_password=<span class=\"string\">&#x27;123456&#x27;</span>, master_port=3307, master_log_file=<span class=\"string\">&#x27;mall-mysql-bin.000001&#x27;</span>, master_log_pos=617, master_connect_retry=30;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; change master to master_host=<span class=\"string\">&#x27;192.168.88.231&#x27;</span>, master_user=<span class=\"string\">&#x27;slave&#x27;</span>, master_password=<span class=\"string\">&#x27;123456&#x27;</span>, master_port=3307, master_log_file=<span class=\"string\">&#x27;mall-mysql-bin.000001&#x27;</span>, master_log_pos=617, master_connect_retry=30;</span><br><span class=\"line\">Query OK, 0 rows affected, 2 warnings (0.15 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主从复制命令参数说明</span></span><br><span class=\"line\">master_host：主数据库的IP地址；</span><br><span class=\"line\">master_port：主数据库的运行端口；</span><br><span class=\"line\">master_user：在主数据库创建的用于同步数据的用户账号；</span><br><span class=\"line\">master_password：在主数据库创建的用于同步数据的用户密码；</span><br><span class=\"line\">master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</span><br><span class=\"line\">master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</span><br><span class=\"line\">master_connect_retry：连接失败重试的时间间隔，单位为秒。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><strong>在从数据库中查看主从同步状态</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State:</span><br><span class=\"line\">                  Master_Host: 192.168.88.231</span><br><span class=\"line\">                  Master_User: slave</span><br><span class=\"line\">                  Master_Port: 3307</span><br><span class=\"line\">                Connect_Retry: 30</span><br><span class=\"line\">              Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 617</span><br><span class=\"line\">               Relay_Log_File: mall-mysql-relay-bin.000001</span><br><span class=\"line\">                Relay_Log_Pos: 4</span><br><span class=\"line\">        Relay_Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">         <span class=\"comment\"># NO -- 还没开始</span></span><br><span class=\"line\">             Slave_IO_Running: No</span><br><span class=\"line\">            Slave_SQL_Running: No</span><br><span class=\"line\">              Replicate_Do_DB:</span><br><span class=\"line\">          Replicate_Ignore_DB:</span><br><span class=\"line\">           Replicate_Do_Table:</span><br><span class=\"line\">       Replicate_Ignore_Table:</span><br><span class=\"line\">      Replicate_Wild_Do_Table:</span><br><span class=\"line\">  Replicate_Wild_Ignore_Table:</span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error:</span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 617</span><br><span class=\"line\">              Relay_Log_Space: 154</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File:</span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File:</span><br><span class=\"line\">           Master_SSL_CA_Path:</span><br><span class=\"line\">              Master_SSL_Cert:</span><br><span class=\"line\">            Master_SSL_Cipher:</span><br><span class=\"line\">               Master_SSL_Key:</span><br><span class=\"line\">        Seconds_Behind_Master: NULL</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error:</span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error:</span><br><span class=\"line\">  Replicate_Ignore_Server_Ids:</span><br><span class=\"line\">             Master_Server_Id: 0</span><br><span class=\"line\">                  Master_UUID:</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State:</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind:</span><br><span class=\"line\">      Last_IO_Error_Timestamp:</span><br><span class=\"line\">     Last_SQL_Error_Timestamp:</span><br><span class=\"line\">               Master_SSL_Crl:</span><br><span class=\"line\">           Master_SSL_Crlpath:</span><br><span class=\"line\">           Retrieved_Gtid_Set:</span><br><span class=\"line\">            Executed_Gtid_Set:</span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB:</span><br><span class=\"line\">                 Channel_Name:</span><br><span class=\"line\">           Master_TLS_Version:</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><strong>在从数据库中开启主从同步</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; start slave;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li><strong>查看从数据库状态发现已经同步</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting <span class=\"keyword\">for</span> master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.88.231</span><br><span class=\"line\">                  Master_User: slave</span><br><span class=\"line\">                  Master_Port: 3307</span><br><span class=\"line\">                Connect_Retry: 30</span><br><span class=\"line\">              Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">          Read_Master_Log_Pos: 617</span><br><span class=\"line\">               Relay_Log_File: mall-mysql-relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 325</span><br><span class=\"line\">        Relay_Master_Log_File: mall-mysql-bin.000001</span><br><span class=\"line\">           <span class=\"comment\"># Yes -- 已开始</span></span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB:</span><br><span class=\"line\">          Replicate_Ignore_DB:</span><br><span class=\"line\">           Replicate_Do_Table:</span><br><span class=\"line\">       Replicate_Ignore_Table:</span><br><span class=\"line\">      Replicate_Wild_Do_Table:</span><br><span class=\"line\">  Replicate_Wild_Ignore_Table:</span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error:</span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 617</span><br><span class=\"line\">              Relay_Log_Space: 537</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File:</span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File:</span><br><span class=\"line\">           Master_SSL_CA_Path:</span><br><span class=\"line\">              Master_SSL_Cert:</span><br><span class=\"line\">            Master_SSL_Cipher:</span><br><span class=\"line\">               Master_SSL_Key:</span><br><span class=\"line\">        Seconds_Behind_Master: 0</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error:</span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error:</span><br><span class=\"line\">  Replicate_Ignore_Server_Ids:</span><br><span class=\"line\">             Master_Server_Id: 101</span><br><span class=\"line\">                  Master_UUID: 25cb5d93-e4df-11ec-86da-0242ac110003</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State: Slave has <span class=\"built_in\">read</span> all relay <span class=\"built_in\">log</span>; waiting <span class=\"keyword\">for</span> more updates</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind:</span><br><span class=\"line\">      Last_IO_Error_Timestamp:</span><br><span class=\"line\">     Last_SQL_Error_Timestamp:</span><br><span class=\"line\">               Master_SSL_Crl:</span><br><span class=\"line\">           Master_SSL_Crlpath:</span><br><span class=\"line\">           Retrieved_Gtid_Set:</span><br><span class=\"line\">            Executed_Gtid_Set:</span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB:</span><br><span class=\"line\">                 Channel_Name:</span><br><span class=\"line\">           Master_TLS_Version:</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li><strong>主从复制测试</strong></li>\n</ol>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">- </span>主机新建库-使用库-新建表-插入数据，ok</span><br><span class=\"line\"><span class=\"bullet\">- </span>从机使用库-查看记录，ok</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis-集群\"><a href=\"#Redis-集群\" class=\"headerlink\" title=\"Redis 集群\"></a>Redis 集群</h3><h4 id=\"搭建-Redis-集群\"><a href=\"#搭建-Redis-集群\" class=\"headerlink\" title=\"搭建 Redis 集群\"></a>搭建 Redis 集群</h4><blockquote>\n<p>3 主 3 从 redis 集群扩缩容配置案例架构说明</p>\n<p><a href=\"https://www.processon.com/view/link/629e20255653bb03f2cc0a14\">https://www.processon.com/view/link/629e20255653bb03f2cc0a14</a></p>\n</blockquote>\n<ol>\n<li><strong>新建 6 个 docker 容器 redis 实例</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-1 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6381</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-2 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6382</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-3 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6383</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-4 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6384</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-5 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6385</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-6 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6386</span><br></pre></td></tr></table></figure>\n\n<p>==如果运行成功，效果如下：==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606234533.png\" alt=\"image-20220606234533562\"></p>\n<blockquote>\n<p>命令分步解释：</p>\n<ul>\n<li><p>docker run：创建并运行 docker 容器实例</p>\n</li>\n<li><p>–name redis-node-6：容器名字</p>\n</li>\n<li><p>–net host：使用宿主机的 IP 和端口，默认</p>\n</li>\n<li><p>–privileged=true：获取宿主机 root 用户权限</p>\n</li>\n<li><p>-v /data/redis/share/redis-node-6:/data：容器卷，宿主机地址:docker 内部地址</p>\n</li>\n<li><p>redis:6.0.8：redis 镜像和版本号</p>\n</li>\n<li><p>–cluster-enabled yes：开启 redis 集群</p>\n</li>\n<li><p>–appendonly yes：开启持久化</p>\n</li>\n<li><p>–port 6386：redis 端口号</p>\n</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li><strong>进入容器 redis-node-1 并为 6 台机器构建集群关系</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">[root@88231 ~]<span class=\"comment\"># docker exec -it redis-node-1 /bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建主从关系</span></span><br><span class=\"line\"><span class=\"comment\"># 注意，进入docker容器后才能执行一下命令，且注意自己的真实IP地址</span></span><br><span class=\"line\">redis-cli --cluster create 192.168.88.231:6381 192.168.88.231:6382 192.168.88.231:6383 192.168.88.231:6384 192.168.88.231:6385 192.168.88.231:6386 --cluster-replicas 1</span><br><span class=\"line\"><span class=\"comment\"># --cluster-replicas 1 表示为每个master创建一个slave节点</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235150.png\" alt=\"image-20220606235150386\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235242.png\" alt=\"image-20220606235242475\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220606235333.png\" alt=\"image-20220606235332969\"></p>\n<p>==一切 OK 的话，3 主 3 从搞定==</p>\n<ol start=\"3\">\n<li><strong>链接进入 6381 作为切入点，查看集群状态</strong></li>\n</ol>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@<span class=\"number\">88231</span>:/data# redis-cli -p <span class=\"number\">6381</span></span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6381</span>&gt; keys *</span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6381</span>&gt; cluster info</span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6381</span>&gt; cluster nodes</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220607000338.png\" alt=\"image-20220607000338016\" style=\"zoom:50%;\" />\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220607000524.png\" alt=\"image-20220607000524306\"></p>\n<h4 id=\"主从容错切换迁移\"><a href=\"#主从容错切换迁移\" class=\"headerlink\" title=\"主从容错切换迁移\"></a>主从容错切换迁移</h4><h5 id=\"数据读写存储\"><a href=\"#数据读写存储\" class=\"headerlink\" title=\"数据读写存储\"></a>数据读写存储</h5><ol>\n<li>启动 6 个 redis 构成的集群并通过 exec 进入</li>\n<li>对 6381 新增两个 key</li>\n<li>防止路由失效加参数 -c 并新增两个 key</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222235.png\" alt=\"image-20220609222228049\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222420.png\" alt=\"image-20220609222420357\"></p>\n<ol start=\"4\">\n<li>查看集群信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609222613.png\" alt=\"image-20220609222613143\"></p>\n<h5 id=\"容错切换迁移\"><a href=\"#容错切换迁移\" class=\"headerlink\" title=\"容错切换迁移\"></a>容错切换迁移</h5><ol>\n<li>主 6381 和从机切换，先停止主机 6381</li>\n<li>6381 主机停了，对应的真实从机上位</li>\n<li>6381 作为 1 号主机分配的从机以实际情况为准，具体是几号机器就是几号</li>\n<li>再次查看集群信息</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609223136.png\" alt=\"image-20220609223136321\"></p>\n<blockquote>\n<p>==6381 宕机了，6385 上位成了新的 master==</p>\n<p>备注：本次操作 6381 为主节点，对应的从节点是 6385，对应关系是随机的，每次操作以实际情况为准</p>\n</blockquote>\n<ol start=\"5\">\n<li>启动 6381 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start redis-node-1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609224043.png\" alt=\"image-20220609224042839\"></p>\n<ol start=\"6\">\n<li>再停 6385 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop redis-node-5</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609224750.png\" alt=\"image-20220609224750744\"></p>\n<ol start=\"7\">\n<li>再启 6385 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start redis-node-5</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>==发现主从节点又恢复之前的状态了==</p>\n</blockquote>\n<ol start=\"8\">\n<li>查看集群状态</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>自己IP:6381</span><br><span class=\"line\"></span><br><span class=\"line\">可以看到主节点分配的</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609230337.png\" alt=\"image-20220609230337692\"></p>\n<h5 id=\"主从扩容案例\"><a href=\"#主从扩容案例\" class=\"headerlink\" title=\"主从扩容案例\"></a>主从扩容案例</h5><ol>\n<li>新建 6387、6388 两个节点+新建后启动+查看是否是 8 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name redis-node-7 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6387</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d --name redis-node-8 --net host --privileged=<span class=\"literal\">true</span> -v /data/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled <span class=\"built_in\">yes</span> --appendonly <span class=\"built_in\">yes</span> --port 6388</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>进入 6387 容器实例内部</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node-7 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将新增的 6387 节点（空槽号）作为 master 节点加入集群</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> add-node </span>自己实际IP地址:6387 自己实际IP地址:6381</span><br><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> add-node </span>192.168.88.231:6387 192.168.88.231:6381</span><br><span class=\"line\">6387 就是将要作为master新增节点</span><br><span class=\"line\">6381 就是原来集群节点里面的领路人，相当于6387拜拜6381的码头从而找到组织加入集群</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609231034.png\" alt=\"image-20220609231034192\"></p>\n<ol start=\"4\">\n<li>检查集群情况第 1 次</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>真实ip地址:6381</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609231423.png\" alt=\"image-20220609231423755\"></p>\n<ol start=\"5\">\n<li>重新分派槽号</li>\n</ol>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重新分派槽号</span><br><span class=\"line\"></span><br><span class=\"line\">命令:redis-<span class=\"keyword\">cli</span> --<span class=\"keyword\">cluster</span> reshard IP地址:端口号</span><br><span class=\"line\"></span><br><span class=\"line\">redis-<span class=\"keyword\">cli</span> --<span class=\"keyword\">cluster</span> reshard 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609232741.png\" alt=\"image-20220609232741435\"></p>\n<ol start=\"6\">\n<li>检查集群情况第 2 次</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 真实ip地址:6381</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster check 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233201.png\" alt=\"image-20220609233201196\"></p>\n<blockquote>\n<p>==槽号分派说明==</p>\n<p>为什么 6387 是 3 个新的区间，以前的还是连续？</p>\n<p>重新分配成本太高，所以前 3 家各自匀出来一部分，从 6381/6382/6383 三个旧节点分别匀出 1364 个坑位给新节点 6387</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233346.png\" alt=\"image-20220609233346240\"></p>\n<ol start=\"7\">\n<li>为主节点 6387 分配从节点 6388</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：redis-cli --cluster<span class=\"built_in\"> add-node </span>ip:新slave端口 ip:新master端口 --cluster-slave --cluster-master-id 新主机节点ID</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> add-node </span>192.168.88.231:6388 192.168.88.231:6387 --cluster-slave --cluster-master-id 7206137ce4e66c0464fa0fa00472202ce5b16792</span><br><span class=\"line\">-------这个是6387的编号，按照自己实际情况</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233720.png\" alt=\"image-20220609233720722\"></p>\n<ol start=\"8\">\n<li>检查集群第 3 次</li>\n</ol>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster<span class=\"built_in\"> check </span>192.168.88.231:6382</span><br><span class=\"line\"></span><br><span class=\"line\">4 主 4 从</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220609233902.png\" alt=\"image-20220609233902550\"></p>\n<h5 id=\"主从缩容案例\"><a href=\"#主从缩容案例\" class=\"headerlink\" title=\"主从缩容案例\"></a>主从缩容案例</h5><blockquote>\n<p>目的：6387 和 6388 下线</p>\n</blockquote>\n<ol>\n<li>检查集群情况 - 获得 6388 的节点 ID</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231:6382</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223609.png\" alt=\"image-20220610223609176\"></p>\n<ol start=\"2\">\n<li>将 6388 删除 从集群中将 4 号从节点 6388 删除</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：redis-cli --cluster del-node ip:从机端口 从机6388节点ID</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster del-node 192.168.88.231:6388 1fedf6a6f9acfbdba6951a532cd2d68e4546898e</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223709.png\" alt=\"image-20220610223709085\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231:6382</span><br></pre></td></tr></table></figure>\n\n<p>==检查一下发现，6388 被删除了，只剩下七台机器了。==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610223901.png\" alt=\"image-20220610223900954\"></p>\n<ol start=\"3\">\n<li>将 6387 的槽号清空，重新分配，本例将清出来的槽号都给 6381</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster reshard 192.168.88.231:6381</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610224116.png\" alt=\"image-20220610224116496\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610224735.png\" alt=\"image-20220610224657149\"></p>\n<blockquote>\n<p>将 6387 节点的槽号都分配给 6381</p>\n</blockquote>\n<ol start=\"4\">\n<li>检查集群情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231 6382</span><br><span class=\"line\"></span><br><span class=\"line\">4096 个槽位都指给 6381，它变成了 8192 个槽位，相当于全部都给 6381了</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225027.png\" alt=\"image-20220610225027291\"></p>\n<ol start=\"5\">\n<li>删除 6387 节点</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令：redis-cli --cluster del-node ip:端口 6387节点ID</span><br><span class=\"line\"></span><br><span class=\"line\">redis-cli --cluster del-node 192.168.88.231:6387 7206137ce4e66c0464fa0fa00472202ce5b16792</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225145.png\" alt=\"image-20220610225144956\"></p>\n<ol start=\"6\">\n<li>再次检查集群情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 192.168.88.231 6382</span><br><span class=\"line\"></span><br><span class=\"line\">恢复之前的 3 主 3 从，缩容成功！</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220610225344.png\" alt=\"image-20220610225344237\"></p>\n<h2 id=\"DockerFile\"><a href=\"#DockerFile\" class=\"headerlink\" title=\"DockerFile\"></a>DockerFile</h2><h3 id=\"Dockerfile-介绍\"><a href=\"#Dockerfile-介绍\" class=\"headerlink\" title=\"Dockerfile 介绍\"></a>Dockerfile 介绍</h3><p><code>Dockerfile</code> 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p>\n<blockquote>\n<p>官网：<a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></p>\n</blockquote>\n<p>构建步骤：</p>\n<ol>\n<li>编写一个 <code>Dockerfile</code> 文件</li>\n<li><code>docker bulid</code> 构建为一个镜像</li>\n<li><code>docker run</code> 运行镜像</li>\n<li><code>docker push</code> 发布镜像（DockerHub. 阿里云镜像仓库）</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611202748.png\" alt=\"image-20220611202748238\"></p>\n<h3 id=\"Dockerfile-构建过程\"><a href=\"#Dockerfile-构建过程\" class=\"headerlink\" title=\"Dockerfile 构建过程\"></a>Dockerfile 构建过程</h3><h4 id=\"Dockerfile-基础知识\"><a href=\"#Dockerfile-基础知识\" class=\"headerlink\" title=\"Dockerfile 基础知识\"></a>Dockerfile 基础知识</h4><ol>\n<li>每个保留关键字（指令）都==必须是大写字母==且后面要跟随至少一个参数</li>\n<li>指令按照从上到下，顺序执行</li>\n<li><code>#</code> 表示注释</li>\n<li>每条指令都会创建一个新的镜像层并对镜像进行提交</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211230224706.png\" alt=\"image-20211230224659329\"></p>\n<h4 id=\"Docker-执行-Dockerfile-的大致流程\"><a href=\"#Docker-执行-Dockerfile-的大致流程\" class=\"headerlink\" title=\"Docker 执行 Dockerfile 的大致流程\"></a>Docker 执行 Dockerfile 的大致流程</h4><ol>\n<li>docker 从基础镜像运行一个容器</li>\n<li>执行一条指令并对容器做出修改</li>\n<li>docker 再基于刚提交的镜像运行一个新容器</li>\n<li>执行 Dockerfile 中的下一条指令知道所有指令都执行完成</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>从应用软件的角度看，<code>Dockerfile</code>、<code>Docker镜像</code>与<code>Docker容器</code>分别代表软件的三个不同阶段：</p>\n<ul>\n<li><code>Dockerfile</code>是软件的原材料</li>\n<li><code>Docker镜像</code>是软件的交付品</li>\n<li><code>Docker容器</code>则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例</li>\n</ul>\n<p>==Dockerfile 面向开发，Docker 镜像成为交付标准，Docker 容器则涉及部署与运维，三者缺一不可，合力充当 Docker 体系的基石==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611204149.png\" alt=\"image-20220611204149366\"></p>\n<ol>\n<li><p>Dockerfile，需要定义一个 Dockerfile，Dockerfile 定义了进程需要的一切东西。Dockerfile 涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计 namespace 的权限控制)等等;</p>\n</li>\n<li><p>Docker 镜像，在用 Dockerfile 定义一个文件之后，docker build 时会产生一个 Docker 镜像，当运行 Docker 镜像时会真正开始提供服务;</p>\n</li>\n<li><p>Docker 容器，容器是直接提供服务的。</p>\n</li>\n</ol>\n<h3 id=\"DockerFile-的保留字指令\"><a href=\"#DockerFile-的保留字指令\" class=\"headerlink\" title=\"DockerFile 的保留字指令\"></a>DockerFile 的保留字指令</h3><ul>\n<li><p><code>FROM</code>：基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是 FROM</p>\n</li>\n<li><p><code>MAINTAINER</code>：镜像维护者的姓名和邮箱地址</p>\n</li>\n<li><p><code>RUN</code>：容器构建时需要运行的命令，包含两种格式：</p>\n<ul>\n<li>shell 格式：</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611204952.png\" alt=\"image-20220611204952312\"></p>\n<ul>\n<li>exec 格式：</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611205003.png\" alt=\"image-20220611205003786\"></p>\n<ul>\n<li><code>RUN</code> 是在 <code>docker build</code> 时运行</li>\n</ul>\n</li>\n<li><p><code>EXPOSE</code>：当前容器对外暴露出的端口</p>\n</li>\n<li><p><code>WORKDIR</code>：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p>\n</li>\n<li><p><code>USER</code>：指定该镜像以什么样的用户去执行，如果都不指定，默认是 root</p>\n</li>\n<li><p><code>ENV</code>：用来在构建镜像过程中设置环境变量</p>\n<ul>\n<li>```<br>ENV MY_PATH /usr/mytest<br>这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样；<br>也可以在其它指令中直接使用这些环境变量，比如：WORKDIR $MY_PATH<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `<span class=\"keyword\">ADD</span><span class=\"language-bash\">`：将宿主机目录下的文件拷贝进镜像且会自动处理 URL 和解压 tar 压缩包</span></span><br><span class=\"line\"></span><br><span class=\"line\">- `<span class=\"keyword\">COPY</span><span class=\"language-bash\">`：类似 ADD，拷贝文件和目录到镜像中</span></span><br><span class=\"line\"></span><br><span class=\"line\">  - ```dockerfile</span><br><span class=\"line\">    <span class=\"comment\"># 将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">COPY</span><span class=\"language-bash\"> src dest</span></span><br><span class=\"line\">    <span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;dest&quot;</span>]</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># &lt;src源路径&gt;：源文件或者源目录</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;dest目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><code>VOLUME</code>：容器数据卷，用于数据保存和持久化工作</p>\n</li>\n<li><p><code>CMD</code>：指定容器启动后的要干的事情</p>\n<ul>\n<li><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220611210408.png\" alt=\"image-20220611210408046\"></li>\n<li><strong>注意：Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</strong></li>\n<li>它和前面 <code>RUN</code> 命令的区别：<ul>\n<li><code>CMD</code> 是在 <code>docker run</code> 时运行</li>\n<li><code>RUN</code> 是在 <code>docker build</code> 时运行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>ENTRYPOINT</code>：也是用来指定一个容器启动时要运行的命令</p>\n<ul>\n<li><p>类似于 CMD 指令，<strong>但是 ENTRYPOINT 不会被 docker run 后面的命令覆盖</strong>， 而且这些命令行参数<strong>会被当作参数送给 ENTRYPOINT 指令指定的程序</strong></p>\n</li>\n<li><p><code>ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;...]</code></p>\n</li>\n<li><p>ENTRYPOINT 可以和 CMD 一起用，一般是<strong>变参</strong>才会使用 CMD，这里的 CMD 等于是在给 ENTRYPOINT 传参。当指定了 ENTRYPOINT 后，CMD 的含义就发生了变化，不再是直接运行其命令而是将 CMD 的内容作为参数传递给 ENTRYPOINT 指令，他两个组合会变成 <code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></p>\n</li>\n<li><p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数</p>\n</li>\n<li><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效</p>\n</li>\n</ul>\n</li>\n<li><p>小总结</p>\n<ul>\n<li><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220618230538.png\" alt=\"image-20220618230538863\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实战案例\"><a href=\"#实战案例\" class=\"headerlink\" title=\"实战案例\"></a>实战案例</h3><p>自定义镜像 ==&gt; <code>mycentosjava8</code></p>\n<p><strong>要求：</strong></p>\n<ul>\n<li>Centos7 镜像具备 vim+ifconfig+jdk8</li>\n<li>准备 jdk8 的安装包（<code>jdk-8u251-linux-x64.tar.gz</code>）</li>\n</ul>\n<ol>\n<li><strong>准备编写 Dockerfile 文件</strong></li>\n</ol>\n<p>在 <code>/home</code> 目录下建一个 <code>myfile</code> 文件夹，并将 <code>jdk8</code> 的安装包放进去：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619202515.png\" alt=\"image-20220619202508648\"></p>\n<p><code>Dockerfile</code> 文件内容如下：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos:centos7</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Kyire6&lt;kyire666.outlook.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> MYPATH /usr/local</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"variable\">$MYPATH</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装vim编辑器</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install vim</span></span><br><span class=\"line\"><span class=\"comment\">#安装ifconfig命令查看网络IP</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install net-tools</span></span><br><span class=\"line\"><span class=\"comment\">#安装java8及lib库</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install glibc.i686</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> /usr/local/java</span></span><br><span class=\"line\"><span class=\"comment\">#ADD 是相对路径jar,把jdk-8u251-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> jdk-8u251-linux-x64.tar.gz /usr/local/java/</span></span><br><span class=\"line\"><span class=\"comment\">#配置java环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class=\"number\">8.0</span>_251</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$MYPATH</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;success--------------ok&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> /bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><strong>执行构建命令</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t 新镜像名:TAG .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如</span></span><br><span class=\"line\">docker build -t centosjava8:1.0 .</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：命令要在 <code>Dockerfile</code> 的同级目录下执行，不要忘了命令结尾的 <code>.</code></strong></p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619203258.png\" alt=\"image-20220619203258616\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619204718.png\" alt=\"image-20220619204718396\"></p>\n<ol start=\"3\">\n<li><strong>运行容器</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it centosjava8:1.0 /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619212101.png\" alt=\"image-20220619212100997\"></p>\n<h3 id=\"虚悬镜像\"><a href=\"#虚悬镜像\" class=\"headerlink\" title=\"虚悬镜像\"></a>虚悬镜像</h3><p>虚悬镜像就是仓库名、标签都是 <code>&lt;none&gt;</code> 的镜像，也称为 <code>dangling image</code></p>\n<p><strong>用 Dockerfile 生成一个</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编写 Dockerfile 文件</span></span><br><span class=\"line\">vim Dockerfile</span><br><span class=\"line\"><span class=\"keyword\">from</span> ubuntu</span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;action is success&#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build 镜像</span></span><br><span class=\"line\">docker build .</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619214708.png\" alt=\"image-20220619214708171\"></p>\n<p><strong>查看虚悬镜像</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -f dangling=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619214819.png\" alt=\"image-20220619214819128\"></p>\n<p><strong>删除所有虚悬镜像</strong></p>\n<p>虚悬镜像已经失去存在价值，可以删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image prune</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220619215102.png\" alt=\"image-20220619215102621\"></p>\n<h3 id=\"发布自己的镜像\"><a href=\"#发布自己的镜像\" class=\"headerlink\" title=\"发布自己的镜像\"></a>发布自己的镜像</h3><blockquote>\n<p>DockerHub</p>\n</blockquote>\n<ol>\n<li><p>地址 <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a> 注册自己的账号！</p>\n</li>\n<li><p>确保这个账号可以登录</p>\n</li>\n<li><p>在服务器上提交自己的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ouwen ~]# docker login --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class=\"line\"></span><br><span class=\"line\">Log in to a Docker registry.</span><br><span class=\"line\">If no server is specified, the default is defined by the daemon.</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -p, --password string   Password</span><br><span class=\"line\">      --password-stdin    Take the password from stdin</span><br><span class=\"line\">  -u, --username string   Username</span><br><span class=\"line\">[root@ouwen ~]# docker login -u ouwen666</span><br><span class=\"line\">Password:</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <code>docker login</code> 登录之后就可以提交镜像了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1. 使用 docker tag 命令修改镜像版本</span></span><br><span class=\"line\">[root@ouwen ~]# docker tag 352abc3918b1 ouwen666/tomcat:1.0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2. 使用 docker push 命令提交镜像到 DockerHub</span></span><br><span class=\"line\">[root@ouwen ~]# docker push ouwen666/tomcat:1.0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103135111.png\" alt=\"image-20220103135111272\"></p>\n<blockquote>\n<p>发现：提交的时候也是按照镜像的层级来的！</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>阿里云镜像</p>\n</blockquote>\n<ol>\n<li><p>登录阿里云</p>\n</li>\n<li><p>找到容器镜像服务</p>\n</li>\n<li><p>创建镜像仓库</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103140835.png\" alt=\"image-20220103140835560\"></p>\n</li>\n<li><p>浏览仓库信息</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103140926.png\" alt=\"image-20220103140926596\"></p>\n</li>\n</ol>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220103142038.png\" alt=\"image-20220103142038290\"></p>\n<h2 id=\"Docker-网络\"><a href=\"#Docker-网络\" class=\"headerlink\" title=\"Docker 网络\"></a>Docker 网络</h2><h3 id=\"docker0-网卡\"><a href=\"#docker0-网卡\" class=\"headerlink\" title=\"docker0 网卡\"></a><code>docker0</code> 网卡</h3><p>docker 服务启动后，会产生一个名为 <code>docker0</code> 的虚拟网桥，使用 <code>ip addr</code> 查看本机 ip</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220104001129.png\" alt=\"image-20220103235821684\"></p>\n<h3 id=\"docker-网络常用命令\"><a href=\"#docker-网络常用命令\" class=\"headerlink\" title=\"docker 网络常用命令\"></a>docker 网络常用命令</h3><h4 id=\"All-命令\"><a href=\"#All-命令\" class=\"headerlink\" title=\"All 命令\"></a>All 命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220625214901.png\" alt=\"image-20220625214854077\"></p>\n<h4 id=\"查看网络\"><a href=\"#查看网络\" class=\"headerlink\" title=\"查看网络\"></a>查看网络</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220625215035.png\" alt=\"image-20220625215035376\"></p>\n<h4 id=\"查看网络源数据\"><a href=\"#查看网络源数据\" class=\"headerlink\" title=\"查看网络源数据\"></a>查看网络源数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network inspect xxx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002156.png\" alt=\"image-20220626002156711\"></p>\n<h4 id=\"创建网络\"><a href=\"#创建网络\" class=\"headerlink\" title=\"创建网络\"></a>创建网络</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create xxx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除网络\"><a href=\"#删除网络\" class=\"headerlink\" title=\"删除网络\"></a>删除网络</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network <span class=\"built_in\">rm</span> xxx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002407.png\" alt=\"image-20220626002407749\"></p>\n<blockquote>\n<p><strong>docker 网络能干嘛？</strong></p>\n<ul>\n<li>容器间的互联和通信以及端口映射</li>\n<li>容器 IP 变动时可以通过服务名直接进行网络通信，进而不受到影响</li>\n</ul>\n</blockquote>\n<h3 id=\"网络模式\"><a href=\"#网络模式\" class=\"headerlink\" title=\"网络模式\"></a>网络模式</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002547.png\" alt=\"image-20220626002547570\"></p>\n<ul>\n<li>bridge 模式：使用 –network bridge 指定，默认使用 docker0</li>\n<li>host 模式：使用 –network host 指定</li>\n<li>none 模式：使用 –network none 指定</li>\n<li>container 模式：使用 –network container:NAME 或者容器 ID 指定</li>\n</ul>\n<p><strong>容器实例内默认网络 IP 生产规则</strong></p>\n<ol>\n<li>先启动两个 Ubuntu 容器实例</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626002940.png\" alt=\"image-20220626002940194\"></p>\n<ol start=\"2\">\n<li><code>docker inspect 容器 ID or 容器名字</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003252.png\" alt=\"image-20220626003252589\"></p>\n<ol start=\"3\">\n<li>关闭 u2 实例，新建 u3，查看 IP 变化</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003453.png\" alt=\"image-20220626003453087\"></p>\n<blockquote>\n<p>结论：</p>\n<p><strong>docker 容器内部的 IP 是有可能会发生变化的</strong></p>\n</blockquote>\n<h4 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"bridge\"></a>bridge</h4><p>Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），该桥接网络的名称为 docker0，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看 bridge 网络的详细信息，并通过 <span class=\"keyword\">grep</span> 获取名称项</span><br><span class=\"line\">docker network <span class=\"keyword\">inspect</span> bridge | <span class=\"keyword\">grep</span> name</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626003931.png\" alt=\"image-20220626003931893\"></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig <span class=\"string\">| grep docker</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004014.png\" alt=\"image-20220626004014292\"></p>\n<blockquote>\n<p><strong>说明：</strong></p>\n<ol>\n<li><p>Docker 使用 Linux 桥接，在宿主机虚拟一个 Docker 容器网桥(docker0)，Docker 启动一个容器时会根据 Docker 网桥的网段分配给容器一个 IP 地址，称为 Container-IP，同时 Docker 网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的 Container-IP 直接通信</p>\n</li>\n<li><p>docker run 的时候，没有指定 network 的话默认使用的网桥模式就是 bridge，使用的就是 docker0。在宿主机 ifconfig,就可以看到 docker0 和自己 create 的 network(后面讲)eth0，eth1，eth2……代表网卡一，网卡二，网卡三……，lo 代表 127.0.0.1，即 localhost，inet addr 用来表示网卡的 IP 地址</p>\n</li>\n<li><p>网桥 docker0 创建一对对等虚拟设备接口一个叫 veth，另一个叫 eth0，成对匹配</p>\n<ol>\n<li>整个宿主机的网桥模式都是 docker0，类似一个交换机有一堆接口，每个接口叫 veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫 veth pair）</li>\n<li>每个容器实例内部也有一块网卡，每个接口叫 eth0</li>\n<li>docker0 上面的每个 veth 匹配某个容器实例内部的 eth0，两两配对，一一匹配</li>\n</ol>\n</li>\n</ol>\n<p><strong>通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下,会从这个网关下各自拿到分配的 ip，此时两个容器的网络是互通的。</strong></p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004158.png\" alt=\"image-20220626004158705\"></p>\n<p><strong>两两匹配验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8080   --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8082:8080   --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004537.png\" alt=\"image-20220626004536998\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004743.png\" alt=\"image-20220626004743381\"></p>\n<h4 id=\"host\"><a href=\"#host\" class=\"headerlink\" title=\"host\"></a>host</h4><p>直接使用宿主机的 IP 地址与外界进行通信，不再需要额外进行 NAT 转换。</p>\n<blockquote>\n<p><strong>说明：</strong></p>\n<p>容器将不会获得一个独立的 Network Namespace， 而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡而是使用宿主机的 IP 和端口。</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626004852.png\" alt=\"image-20220626004852511\"></p>\n<p><strong>验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8083:8080 --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005212.png\" alt=\"image-20220626005212574\"></p>\n<p><strong>问题：</strong></p>\n<p>docker 容器启动时出现了警告</p>\n<p><strong>原因：</strong></p>\n<p>docker 启动时指定 –network=host 或 -net=host，如果还指定了 -p 映射端口，那这个时候就会有此警告，并且通过-p 设置的参数将不会起到任何作用，端口号会以主机端口号为主，重复时则递增。</p>\n<p><strong>解决:</strong></p>\n<p>解决的办法就是使用 docker 的其他网络模式，例如 –network=bridge，这样就可以解决问题，或者直接无视…</p>\n<p><strong>正确做法：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --network host --name tomcat83 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>这样就不会出现之前的警告了，查看容器实例内部：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005512.png\" alt=\"image-20220626005512017\"></p>\n<blockquote>\n<p>没有设置-p 的端口映射了，如何访问启动的 tomcat83？</p>\n<p>http://宿主机IP:8080/</p>\n<p><strong>在 CentOS 里面用默认的火狐浏览器访问容器内的 tomcat83 看到访问成功，因为此时容器的 IP 借用主机的，所以容器共享宿主机网络 IP，这样的好处是外部主机与容器可以直接通信。</strong></p>\n</blockquote>\n<h4 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h4><p>在 none 模式下，并不为 Docker 容器进行任何网络配置。 也就是说，这个 Docker 容器没有网卡、IP、路由等信息，只有一个 lo，需要我们自己为 Docker 容器添加网卡、配置 IP 等。禁用网络功能，只有 lo 标识(就是 127.0.0.1 表示本地回环)</p>\n<p><strong>验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8084:8080 --network none --name tomcat84 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>进入容器内部查看</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005846.png\" alt=\"image-20220626005846474\"></p>\n<p>在容器外部查看</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626005936.png\" alt=\"image-20220626005935898\"></p>\n<h4 id=\"container\"><a href=\"#container\" class=\"headerlink\" title=\"container\"></a>container</h4><p>新建的容器和已经存在的一个容器共享一个网络 IP 配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010017.png\" alt=\"image-20220626010017092\"></p>\n<p><strong>验证</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8085:8080 --name tomcat85 billygoo/tomcat8-jdk8</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8086:8080 --network container:tomcat85 --name tomcat86 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010148.png\" alt=\"image-20220626010148299\"></p>\n<p>相当于 tomcat86 和 tomcat85 公用同一个 ip 同一个端口，导致端口冲突！</p>\n<p><strong>换一个镜像进行验证</strong></p>\n<blockquote>\n<p>Alpine 操作系统是一个面向安全的轻型 Linux 发行版</p>\n<p>Alpine Linux 是一款独立的、非商业的通用 Linux 发行版，专为追求安全性、简单性和资源效率的用户而设计。 可能很多人没听说过这个 Linux 发行版本，但是经常用 Docker 的朋友可能都用过，因为他小，简单，安全而著称，所以作为基础镜像是非常好的一个选择，可谓是麻雀虽小但五脏俱全，镜像非常小巧，不到 6M 的大小，所以特别适合容器打包。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name alpine1  alpine /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -it --network container:alpine1 --name alpine2  alpine /bin/sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010511.png\" alt=\"image-20220626010511330\"></p>\n<p>假如此时关闭 alpine1，再看看 alpin2</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010625.png\" alt=\"image-20220626010625716\"></p>\n<p>发现 <code>107: eth0@if108</code> 已经消失</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010751.png\" alt=\"image-20220626010751877\"></p>\n<h3 id=\"自定义网络\"><a href=\"#自定义网络\" class=\"headerlink\" title=\"自定义网络\"></a>自定义网络</h3><h4 id=\"过时的-link\"><a href=\"#过时的-link\" class=\"headerlink\" title=\"过时的 link\"></a>过时的 link</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626010828.png\" alt=\"image-20220626010828576\"></p>\n<h4 id=\"使用自定义网络的好处\"><a href=\"#使用自定义网络的好处\" class=\"headerlink\" title=\"使用自定义网络的好处\"></a>使用自定义网络的好处</h4><p><strong>before</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8080   --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class=\"line\">docker run -d -p 8082:8080   --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<p>启动成功使用 docker exec 进入到容器内部</p>\n<p><strong>按照 IP 地址 ping 是 OK 的</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626011951.png\" alt=\"image-20220626011951406\"></p>\n<p>但是无法按照服务名 ping</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012135.png\" alt=\"image-20220626012135798\"></p>\n<p><strong>after</strong></p>\n<p>自定义桥接网络，自定义网络默认使用的就是桥接网络 – bridge</p>\n<ol>\n<li>新建自定义网络</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012308.png\" alt=\"image-20220626012308361\"></p>\n<ol start=\"2\">\n<li>新建容器并加入上一步新建的自定义网络</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8081:8080 --network my_network  --name tomcat81 billygoo/tomcat8-jdk8</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8082:8080 --network my_network  --name tomcat82 billygoo/tomcat8-jdk8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>互相 ping 测试</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012536.png\" alt=\"image-20220626012536459\"></p>\n<blockquote>\n<p><strong>结论</strong></p>\n<p><strong><em>自定义网络本身就维护好了主机名和 ip 的对应关系（ip 和域名都能通）</em></strong></p>\n</blockquote>\n<h2 id=\"Docker-平台架构图解\"><a href=\"#Docker-平台架构图解\" class=\"headerlink\" title=\"Docker 平台架构图解\"></a>Docker 平台架构图解</h2><h3 id=\"整体说明\"><a href=\"#整体说明\" class=\"headerlink\" title=\"整体说明\"></a>整体说明</h3><p>从其架构和运行流程来看，Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。</p>\n<p>Docker 运行的基本流程为：</p>\n<ol>\n<li>用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。</li>\n<li>Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。</li>\n<li>Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。</li>\n<li>Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver 将下载镜像以 Graph 的形式存储。</li>\n<li>当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境。</li>\n<li>当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。</li>\n<li>Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作。</li>\n</ol>\n<h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220626012732.png\" alt=\"image-20220626012732507\"></p>\n<h2 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h2><blockquote>\n<p>官方文档：<a href=\"https://docs.docker.com/compose/\">https://docs.docker.com/compose/</a></p>\n</blockquote>\n<h3 id=\"什么是-Docker-Compose\"><a href=\"#什么是-Docker-Compose\" class=\"headerlink\" title=\"什么是 Docker Compose\"></a>什么是 Docker Compose</h3><p><code>Docker Compose</code> 是一个用于定义和运行多容器 <code>Docker</code> 应用程序的工具。使用 <code>Compose</code>，您可以使用 <code>YAML</code> 文件来配置应用程序的服务。然后，使用单个命令，从配置创建并启动所有服务</p>\n<p>使用 <code>Docker Compose</code> 基本上有以下三步：</p>\n<ol>\n<li>使用 定义应用的环境，以便可以在任何位置重现它。<code>Dockerfile</code></li>\n<li>定义构成应用的服务，以便它们可以在隔离的环境中一起运行。<code>docker-compose.yml</code></li>\n<li>运行<a href=\"https://docs.docker.com/compose/cli-command/\">Docker Compose</a>将启动并运行整个应用。您也可以使用 docker-compose 二进制文件运行。<code>docker compose up``docker-compose up</code></li>\n</ol>\n<p><code>docker-compose.yml</code> 示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.9&quot;</span>  <span class=\"comment\"># optional since v1.27.0</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:5000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">.:/code</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">logvolume01:/var/log</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">logvolume01:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Docker-Compose\"><a href=\"#安装-Docker-Compose\" class=\"headerlink\" title=\"安装 Docker Compose\"></a>安装 Docker Compose</h3><ol>\n<li>下载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 官网地址</span></span><br><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 国内镜像</span></span><br><span class=\"line\">sudo curl -L <span class=\"string\">&quot;https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220404124103.png\" alt=\"image-20220404124103270\"></p>\n<ol start=\"2\">\n<li>给 <code>docker-compose</code> 文件授可执行权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试安装是否成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>卸载 <code>docker-compose</code></li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220404124418.png\" alt=\"image-20220404124418121\"></p>\n<h3 id=\"Compose-核心概念\"><a href=\"#Compose-核心概念\" class=\"headerlink\" title=\"Compose 核心概念\"></a>Compose 核心概念</h3><p><strong>一文件</strong></p>\n<p><code>docker-compose.yml</code></p>\n<p><strong>两要素</strong></p>\n<ul>\n<li>服务（service)</li>\n</ul>\n<p>一个个应用容器实例，比如订单微服务、库存微服务、mysql 容器、nginx 容器或者 redis 容器</p>\n<ul>\n<li>工程（project）</li>\n</ul>\n<p>由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义</p>\n<h3 id=\"Compose-使用的三个步骤\"><a href=\"#Compose-使用的三个步骤\" class=\"headerlink\" title=\"Compose 使用的三个步骤\"></a>Compose 使用的三个步骤</h3><ol>\n<li>编写 Dockerfile 定义各个微服务应用并构建出对应的镜像文件</li>\n<li>使用 docker-compose.yml 定义一个完整业务单元，安排好整体应用中的各个容器服务</li>\n<li>最后，执行 docker-compose up 命令 来启动并运行整个应用程序，完成一键部署上线</li>\n</ol>\n<h3 id=\"Compose-常用命令\"><a href=\"#Compose-常用命令\" class=\"headerlink\" title=\"Compose 常用命令\"></a>Compose 常用命令</h3><p><strong>查看帮助信息</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose -h|<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>命令选项</strong></p>\n<ul>\n<li>-f, –file FILE 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定；</li>\n<li>-p, –project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名；</li>\n<li>–x-networking 使用 Docker 的可拔插网络后端特性；</li>\n<li>–x-network-driver DRIVER 指定网络后端的驱动，默认为 bridge；</li>\n<li>–verbose 输出更多调试信息；</li>\n<li>-v, –version 打印版本并退出；</li>\n<li>-H, –host HOST，远程操作 docker，被操作的 docker 需要开放 2375 端口</li>\n</ul>\n<p><strong>常用命令</strong></p>\n<ul>\n<li><strong>up</strong>：启动所有 docker-compose 服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br><span class=\"line\"><span class=\"comment\"># 启动所有docker-compose服务并后台运行</span></span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>down</strong>：停止并删除容器、网络、卷</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>exec</strong>：进入容器实例内部</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose <span class=\"built_in\">exec</span> docker-compose.yml文件中写的服务<span class=\"built_in\">id</span> /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ps</strong>：展示当前 docker-compose 编排过的运行的所有容器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose ps</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>top</strong>：展示当前 docker-compose 编排过的容器进程</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose top</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>logs</strong>：查看容器输出日志</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose logs yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>build</strong>：构建或者重新构建服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>start</strong>：启动服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose start yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>stop</strong>：停止服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose stop yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>restart</strong>：重启服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose restart yml里面的服务<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>config</strong>：检查配置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有问题才输出</span></span><br><span class=\"line\">docker-compose config -q</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>scale</strong>：设置指定服务运行容器的个数，以 <code>service=num</code> 形式指定</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose scale yml里面的服务<span class=\"built_in\">id</span>=实例个数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-compose-yml-文件规则\"><a href=\"#docker-compose-yml-文件规则\" class=\"headerlink\" title=\"docker-compose.yml 文件规则\"></a>docker-compose.yml 文件规则</h3><p>官网地址：<a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/\">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p>\n<ul>\n<li><strong>version</strong>：指定 docker-compose.yml 文件的写法格式</li>\n<li><strong>services</strong>：服务，多个容器集合</li>\n<li><strong>build</strong>：配置构建时，Compose 会利用它自动构建镜像，该值可以是一个路径，也可以是一个对象，用于指定 Dockerfile 参数</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">build:</span> <span class=\"string\">./dir</span></span><br><span class=\"line\"><span class=\"string\">---------------</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">context:</span> <span class=\"string\">./dir</span></span><br><span class=\"line\">    <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span></span><br><span class=\"line\">    <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"attr\">buildno:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>command</strong>：覆盖容器启动后默认执行的命令</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">command:</span> <span class=\"string\">bundle</span> <span class=\"string\">exec</span> <span class=\"string\">thin</span> <span class=\"string\">-p</span> <span class=\"number\">3000</span></span><br><span class=\"line\"><span class=\"string\">----------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">command:</span> [<span class=\"string\">bundle</span>,<span class=\"string\">exec</span>,<span class=\"string\">thin</span>,<span class=\"string\">-p</span>,<span class=\"number\">3000</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dns</strong>：配置 dns 服务器，可以是一个值或列表</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dns:</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></span><br><span class=\"line\"><span class=\"string\">------------</span></span><br><span class=\"line\"><span class=\"attr\">dns:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">9.9</span><span class=\"number\">.9</span><span class=\"number\">.9</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>dns_search</strong>：配置 DNS 搜索域，可以是一个值或列表</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dns_search:</span> <span class=\"string\">example.com</span></span><br><span class=\"line\"><span class=\"string\">------------------------</span></span><br><span class=\"line\"><span class=\"attr\">dns_search:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dc1.example.com</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">dc2.example.com</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>environment</strong>：环境变量配置，可以用数组或字典两种方式</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"attr\">RACK_ENV:</span> <span class=\"string\">development</span></span><br><span class=\"line\">    <span class=\"attr\">SHOW:</span> <span class=\"string\">&#x27;ture&#x27;</span></span><br><span class=\"line\"><span class=\"string\">-------------------------</span></span><br><span class=\"line\"><span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">RACK_ENV=development</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">SHOW=ture</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>env_file</strong>：从文件中获取环境变量，可以指定一个文件路径或路径列表，其优先级低于 environment 指定的环境变量</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env_file:</span> <span class=\"string\">.env</span></span><br><span class=\"line\"><span class=\"string\">---------------</span></span><br><span class=\"line\"><span class=\"attr\">env_file:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./common.env</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>expose</strong>：暴露端口，只将端口暴露给连接的服务，而不暴露给主机</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">expose:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;3000&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>image</strong>：指定服务所使用的镜像</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">java</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>network_mode</strong>：设置网络模式</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;bridge&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;host&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;service:[service name]&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;container:[container name/id]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>ports</strong>：对外暴露的端口定义，和 expose 对应</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ports:</span>   <span class=\"comment\"># 暴露端口信息  - &quot;宿主机端口:容器暴露端口&quot;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&quot;8763:8763&quot;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&quot;8763:8763&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>links</strong>：将指定容器连接到当前连接，可以设置别名，避免 ip 方式导致的容器重启动态改变的无法连接情况</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links:</span>    <span class=\"comment\"># 指定服务名称:别名</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker-compose-eureka-server:compose-eureka</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>volumes</strong>：卷挂载路径</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">/lib</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">/var</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-轻量级可视化工具-Portainer\"><a href=\"#Docker-轻量级可视化工具-Portainer\" class=\"headerlink\" title=\"Docker 轻量级可视化工具 Portainer\"></a>Docker 轻量级可视化工具 Portainer</h2><p>Portainer 是一款轻量级的应用，它提供了图形化界面，用于方便地管理 Docker 环境，包括单机环境和集群环境。</p>\n<p>docker 命令安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方版本</span></span><br><span class=\"line\">docker run -d -p 8000:8000 -p 9010:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 中文版本</span></span><br><span class=\"line\">docker run -d --restart=always --name=<span class=\"string\">&quot;portainer&quot;</span> -p 9010:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data 6053537/portainer-ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># EE 商业版本（public 为中文汉化资源）</span></span><br><span class=\"line\">docker run -d -p 8000:8000 -p 9010:9000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /u01/portainer/portainer_data:/data -v /u01/portainer/public:/public portainer/portainer-ee:2.10.0</span><br></pre></td></tr></table></figure>\n\n<p>第一次登录需要创建 admin 用户，访问地址：<code>xxx.xxx.xxx.xxx:9010</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203605.png\" alt=\"image-20211218203604987\"></p>\n<p>选择 local 选项卡后本地 docker 详细信息展示</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203652.png\" alt=\"image-20211218203652466\"></p>\n<p>管理本地环境</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211218203840.png\" alt=\"image-20211218203840461\"></p>\n<h2 id=\"Docker-Swarm\"><a href=\"#Docker-Swarm\" class=\"headerlink\" title=\"Docker Swarm\"></a>Docker Swarm</h2><blockquote>\n<p>官方文档：<a href=\"https://docs.docker.com/engine/swarm/\">https://docs.docker.com/engine/swarm/</a></p>\n</blockquote>\n<h3 id=\"什么是-Docker-Swarm\"><a href=\"#什么是-Docker-Swarm\" class=\"headerlink\" title=\"什么是 Docker Swarm\"></a>什么是 Docker Swarm</h3><p>Swarm 是 <a href=\"https://www.docker.com/\">Docker</a> 官方提供的一款集群管理工具，其主要作用是把若干台 Docker 主机抽象为一个整体，并且通过一个入口统一管理这些 Docker 主机上的各种 Docker 资源。</p>\n<p>Docker Swarm 和 Docker Compose 一样，都是 Docker 官方容器编排项目，但不同的是，Docker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务。</p>\n<h3 id=\"Docker-Swarm-架构图\"><a href=\"#Docker-Swarm-架构图\" class=\"headerlink\" title=\"Docker Swarm 架构图\"></a>Docker Swarm 架构图</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220405181654.png\" alt=\"image-20220405181654649\"></p>\n<p>上图可以看出，Swarm 是典型的 master-slave 结构，通过发现服务来选举 manager。manager 是中心管理节点，各个 node 上运行 agent 接受 manager 的统一管理，集群会自动通过 Raft 协议分布式选举出 manager 节点，无需额外的发现服务支持，避免了单点的瓶颈问题，同时也内置了 DNS 的负载均衡和对外部负载均衡机制的集成支持。</p>\n<h3 id=\"Swarm-关键概念\"><a href=\"#Swarm-关键概念\" class=\"headerlink\" title=\"Swarm 关键概念\"></a>Swarm 关键概念</h3><ul>\n<li><strong>Swarm（群）</strong></li>\n</ul>\n<p>嵌入在 Docker 引擎中的集群管理和编排功能是使用<a href=\"https://github.com/docker/swarmkit/\">swarmkit 构建的</a>。<code>Swarmkit</code> 是一个单独的项目，它实现了 Docker 的编排层并直接在 Docker 中使用。</p>\n<p>一个 swarm 由多个 Docker 主机组成，它们以<strong>swarm 模式</strong>运行并充当管理器（管理成员资格和委托）和工作人员（运行 <a href=\"https://docs.docker.com/engine/swarm/key-concepts/#services-and-tasks\">swarm 服务</a>）。给定的 Docker 主机可以是管理员、工作人员或同时执行这两种角色。创建服务时，您需要定义其最佳状态（副本数量、可用的网络和存储资源、服务向外界公开的端口等等）。Docker 致力于维护所需的状态。例如，如果一个工作节点变得不可用，Docker 会将该节点的任务安排在其他节点上。<em>任务</em>是一个 正在运行的容器，它是一个集群服务的一部分，由一个集群管理器管理，而不是一个独立的容器。</p>\n<p>swarm 服务相对于独立容器的主要优势之一是您可以修改服务的配置，包括它所连接的网络和卷，而无需手动重新启动服务。Docker 将更新配置，停止具有过期配置的服务任务，并创建与所需配置匹配的新任务。</p>\n<p>当 Docker 在 swarm 模式下运行时，您仍然可以在任何参与 swarm 的 Docker 主机以及 swarm 服务上运行独立容器。独立容器和 swarm 服务之间的一个关键区别在于，只有 <code>swarm manager</code> 可以管理 swarm，而独立容器可以在任何守护进程上启动。Docker 守护进程可以作为管理者、工作者或两者兼而有之。</p>\n<p>就像您可以使用<a href=\"https://docs.docker.com/compose/\">Docker Compose</a>定义和运行容器一样，您可以定义和运行<a href=\"https://docs.docker.com/engine/swarm/services/\">Swarm 服务</a>堆栈。</p>\n<ul>\n<li><strong>Node（节点）</strong></li>\n</ul>\n<p><strong>节点</strong>是参与 swarm 的 Docker 引擎的一个实例。您也可以将其视为 Docker 节点。您可以在单个物理计算机或云服务器上运行一个或多个节点，但生产群部署通常包括分布在多个物理和云计算机上的 Docker 节点。</p>\n<p>要将应用程序部署到 swarm，您需要向 <strong>管理器节点</strong>提交服务定义。管理节点将称为 <a href=\"https://docs.docker.com/engine/swarm/key-concepts/#services-and-tasks\">任务</a>的工作单元分派给工作节点。</p>\n<p>管理器节点还执行维护集群所需状态所需的编排和集群管理功能。管理器节点选举一个领导者来执行编排任务。</p>\n<p><strong>工作节点</strong>接收并执行从管理节点分派的任务。默认情况下，管理器节点也将服务作为工作节点运行，但您可以将它们配置为专门运行管理器任务并成为仅管理器节点。代理在每个工作节点上运行并报告分配给它的任务。<code>worker</code> 节点将其分配的任务的当前状态通知给 <code>manager</code> 节点，以便 <code>manager</code> 可以保持每个 <code>worker</code> 的期望状态。</p>\n<ul>\n<li><strong>Service（服务）</strong></li>\n</ul>\n<p><strong>服务</strong>是要在管理节点或工作节点上执行的任务的定义。它是 swarm 系统的<strong>中心结构</strong>，也是用户与 swarm 交互的主要根源。</p>\n<p>创建服务时，您需要指定要使用的容器映像以及在运行的容器中执行的命令。</p>\n<p>在<strong>复制服务</strong>模型中，群管理器根据您在所需状态中设置的规模在节点之间分配特定数量的副本任务。</p>\n<p>对于<strong>全局服务</strong>，swarm 在集群中的每个可用节点上为服务运行一个任务。</p>\n<ul>\n<li><strong>Task（任务）</strong></li>\n</ul>\n<p>一个<strong>任务</strong>携带一个 Docker 容器和在容器内运行的命令。它是 swarm 的<strong>原子调度单元</strong>。Manager 节点根据服务规模中设置的副本数将任务分配给工作节点。一旦任务被分配给一个节点，它就不能移动到另一个节点。它只能在分配的节点上运行或失败。</p>\n<ul>\n<li><strong>Load balancing（负载均衡）</strong></li>\n</ul>\n<p>swarm 管理器使用<strong>入口负载平衡</strong>将您希望在外部提供给 swarm 的服务公开。swarm manager 可以自动为服务分配一个<strong>PublishedPort</strong>，或者您可以为该服务配置一个 PublishedPort。您可以指定任何未使用的端口。如果不指定端口，swarm manager 会为服务分配一个 <code>30000-32767</code> 范围内的端口。</p>\n<p>外部组件（例如云负载均衡器）可以访问集群中任何节点的 PublishedPort 上的服务，无论该节点当前是否正在运行该服务的任务。swarm 中的所有节点将入口连接路由到正在运行的任务实例。</p>\n<p>Swarm 模式有一个内部 <code>DNS</code> 组件，它自动为 swarm 中的每个服务分配一个 DNS 条目。swarm manager 使用<strong>内部负载平衡</strong>根据服务的 DNS 名称在集群内的服务之间分配请求。</p>\n<h3 id=\"Swarm-工作原理\"><a href=\"#Swarm-工作原理\" class=\"headerlink\" title=\"Swarm 工作原理\"></a>Swarm 工作原理</h3><h4 id=\"节点如何工作\"><a href=\"#节点如何工作\" class=\"headerlink\" title=\"节点如何工作\"></a>节点如何工作</h4><p>Swarm 集群由管理节点（Manager）和工作节点（Work）构成。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220716220722.png\" alt=\"image-20220716220722605\"></p>\n<h5 id=\"管理节点\"><a href=\"#管理节点\" class=\"headerlink\" title=\"管理节点\"></a>管理节点</h5><p>Manager 节点处理集群管理任务：</p>\n<ul>\n<li>维护集群状态</li>\n<li>调度服务</li>\n<li>服务群模式<a href=\"https://docs.docker.com/engine/api/\">HTTP API 端点</a></li>\n</ul>\n<p>使用<a href=\"https://raft.github.io/raft.pdf\">Raft</a>实现，管理器维护整个 swarm 和在其上运行的所有服务的一致内部状态。出于测试目的，可以使用单个管理器运行 swarm。如果单管理器集群中的管理器发生故障，您的服务将继续运行，但您需要创建一个新集群才能恢复。</p>\n<p>为了利用 swarm 模式的容错特性，Docker 建议您根据组织的高可用性要求实现奇数个节点。当您有多个管理器时，您可以从管理器节点的故障中恢复而无需停机。</p>\n<ul>\n<li>一个三管理器群最多可以容忍一名管理器的损失。</li>\n<li>一个五管理器群最多可以同时丢失两个管理器节点。</li>\n<li>一个<code>N</code>管理器集群最多可以容忍丢失 <code>(N-1)/2</code>管理器。</li>\n<li>Docker 建议一个 swarm 最多使用七个管理器节点。</li>\n</ul>\n<blockquote>\n<p><strong>重要提示</strong>：添加更多管理器并不意味着增加可扩展性或提高性能。一般来说，情况正好相反。</p>\n</blockquote>\n<h5 id=\"工作节点\"><a href=\"#工作节点\" class=\"headerlink\" title=\"工作节点\"></a>工作节点</h5><p>工作节点也是 Docker 引擎的实例，其唯一目的是执行容器。Worker 节点不参与 Raft 分布式状态，不做调度决策，也不服务于 swarm 模式的 HTTP API。</p>\n<p>您可以创建一个由一个管理器节点组成的集群，但如果没有至少一个管理器节点，您就不能拥有一个工作程序节点。默认情况下，所有 manager 也是 worker。在单个管理节点集群中，您可以运行类似 <code>docker service create</code> 的命令，并且调度程序将所有任务放在本地引擎上。</p>\n<p>要防止调度程序将任务放置在多节点集群中的管理器节点上，请将管理器节点的可用性设置为 <code>Drain</code>。调度器优雅地停止 <code>Drain</code> 模式节点上的任务，并在一个 <code>Active</code> 节点上调度任务。调度程序不会将新任务分配给 <code>Drain</code> 可用的节点。</p>\n<p>请参阅<a href=\"https://docs.docker.com/engine/reference/commandline/node_update/\">docker node update</a> 命令行参考以了解如何更改节点可用性。</p>\n<h4 id=\"服务如何运作\"><a href=\"#服务如何运作\" class=\"headerlink\" title=\"服务如何运作\"></a>服务如何运作</h4><p>要在 Docker 引擎处于 swarm 模式时部署应用程序映像，您需要创建一个服务。通常，服务是某个更大应用程序上下文中微服务的映像。服务的示例可能包括 HTTP 服务器、数据库或您希望在分布式环境中运行的任何其他类型的可执行程序。</p>\n<p>创建服务时，您需要指定要使用的容器映像以及在运行的容器中执行的命令。您还可以定义服务的选项，包括：</p>\n<ul>\n<li>swarm 使服务在 swarm 外部可用的端口</li>\n<li>服务连接到集群中的其他服务的覆盖网络</li>\n<li>CPU 和内存限制和预留</li>\n<li>滚动更新策略</li>\n<li>在 swarm 中运行的图像的副本数</li>\n</ul>\n<h5 id=\"服务、任务和容器\"><a href=\"#服务、任务和容器\" class=\"headerlink\" title=\"服务、任务和容器\"></a>服务、任务和容器</h5><p>当您将服务部署到 swarm 时，swarm manager 接受您的服务定义作为服务的所需状态。然后，它将集群中的节点上的服务安排为一个或多个副本任务。这些任务在 swarm 中的节点上彼此独立运行。</p>\n<p>例如，假设您想在 nginx 的三个实例之间进行负载平衡。下图显示了具有三个副本的 nginx 服务。nginx 的三个实例中的每一个都是 swarm 中的一个任务。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717111642.png\" alt=\"image-20220717111642619\"></p>\n<p>容器是一个独立的进程。在 swarm 模式模型中，每个任务只调用一个容器。任务类似于调度程序放置容器的“槽”。一旦容器处于活动状态，调度程序就会识别出任务处于运行状态。如果容器未通过健康检查或终止，则任务终止。</p>\n<h5 id=\"任务和调度\"><a href=\"#任务和调度\" class=\"headerlink\" title=\"任务和调度\"></a>任务和调度</h5><p>任务是 swarm 中调度的原子单元。当您通过创建或更新服务来声明所需的服务状态时，编排器通过调度任务来实现所需的状态。例如，您定义了一个服务，该服务指示协调器始终保持三个 HTTP 侦听器实例运行。编排器通过创建三个任务来响应。每个任务都是调度程序通过生成容器来填充的槽。容器是任务的实例化。如果 HTTP 侦听器任务随后未能通过其健康检查或崩溃，编排器将创建一个新的副本任务来生成一个新容器。</p>\n<p>任务是一种单向机制。它通过一系列状态单调地进行：分配、准备、运行等。如果任务失败，编排器将删除任务及其容器，然后根据服务指定的所需状态创建一个新任务来替换它。</p>\n<p>Docker swarm 模式的底层逻辑是一个通用的调度器和编排器。服务和任务抽象本身并不知道它们实现的容器。假设您可以实现其他类型的任务，例如虚拟机任务或非容器化流程任务。调度器和编排器不知道任务的类型。但是，当前版本的 Docker 只支持容器任务。</p>\n<p>下图显示了 swarm 模式如何接受服务创建请求并将任务调度到工作节点。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717231629.png\" alt=\"image-20220717231629076\"></p>\n<h5 id=\"待办服务（pending）\"><a href=\"#待办服务（pending）\" class=\"headerlink\" title=\"待办服务（pending）\"></a>待办服务（pending）</h5><p>一个服务可以这样配置，使得当前在 swarm 中的任何节点都不能运行它的任务。在这种情况下，服务保持状态<code>pending</code>。以下是服务可能保持状态的几个示例<code>pending</code>。</p>\n<blockquote>\n<p><strong>注意</strong>：如果您的唯一目的是阻止部署服务，请将服务缩放到 0，而不是尝试将其配置为保留在<code>pending</code>.</p>\n</blockquote>\n<ul>\n<li>如果所有节点都已暂停或耗尽，并且您创建了一项服务，则该服务将处于挂起状态，直到节点可用为止。实际上，第一个可用的节点会获得所有任务，因此这在生产环境中不是一件好事。</li>\n<li>您可以为服务保留特定数量的内存。如果 swarm 中没有节点具有所需的内存量，则服务将保持挂起状态，直到可以运行其任务的节点可用。如果您指定一个非常大的值，例如 500 GB，则该任务将永远保持挂起状态，除非您确实有一个可以满足它的节点。</li>\n<li>您可以对服务施加放置约束，并且这些约束可能无法在给定时间得到遵守。</li>\n</ul>\n<p>这种行为说明您的任务的要求和配置与当前的 swarm 状态并没有紧密联系。作为 swarm 的管理员，您声明了您的 swarm 所需的状态，并且管理器与 swarm 中的节点一起创建该状态。您不需要对 swarm 上的任务进行微观管理。</p>\n<h5 id=\"部署模式\"><a href=\"#部署模式\" class=\"headerlink\" title=\"部署模式\"></a>部署模式</h5><p>有两种类型的服务部署，复制的（<code>replicated</code>）和全局的（<code>global</code>）。</p>\n<p>对于复制服务，您指定要运行的相同任务的数量。例如，您决定部署具有三个副本的 HTTP 服务，每个副本提供相同的内容。</p>\n<p>全局服务是在每个节点上运行一个任务的服务。没有预先指定的任务数量。每次将节点添加到 swarm 时，编排器都会创建一个任务，调度器会将任务分配给新节点。全局服务的良好候选者是监控代理、防病毒扫描程序或您希望在集群中的每个节点上运行的其他类型的容器。</p>\n<p>下图显示了黄色的三服务副本和灰色的全局服务。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220717232121.png\" alt=\"image-20220717232121078\"></p>\n<h4 id=\"Swarm-任务状态\"><a href=\"#Swarm-任务状态\" class=\"headerlink\" title=\"Swarm 任务状态\"></a>Swarm 任务状态</h4><p>Docker 允许创建可以启动任务的服务。服务是对所需状态的描述，而任务完成工作。工作按以下顺序安排在 swarm 节点上：</p>\n<ol>\n<li>通过使用创建服务<code>docker service create</code>。</li>\n<li>请求转到 Docker 管理器节点。</li>\n<li>Docker 管理器节点安排服务在特定节点上运行。</li>\n<li>每个服务可以启动多个任务。</li>\n<li>每个任务都有一个生命周期，其状态包括 <code>NEW</code>、<code>PENDING</code> 和 <code>COMPLETE</code>。</li>\n</ol>\n<p>任务是运行一次即可完成的执行单元。当一个任务停止时，它不会再次执行，但一个新的任务可能会取代它。</p>\n<p>任务通过多个状态前进，直到它们完成或失败。任务在 <code>NEW</code> 状态中初始化。任务通过多个状态向前推进，并且其状态不会后退。例如，任务永远不会从 <code>COMPLETE</code> 到 <code>RUNNING</code>。</p>\n<p>任务按以下顺序通过状态：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">任务状态</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>NEW</code></td>\n<td align=\"left\">任务已初始化。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PENDING</code></td>\n<td align=\"left\">分配了任务的资源。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ASSIGNED</code></td>\n<td align=\"left\">Docker 将任务分配给节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ACCEPTED</code></td>\n<td align=\"left\">该任务已被工作节点接受。如果工作节点拒绝任务，则状态更改为<code>REJECTED</code>。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PREPARING</code></td>\n<td align=\"left\">Docker 正在准备任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>STARTING</code></td>\n<td align=\"left\">Docker 正在启动任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>RUNNING</code></td>\n<td align=\"left\">任务正在执行。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>COMPLETE</code></td>\n<td align=\"left\">任务退出，没有错误代码。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>FAILED</code></td>\n<td align=\"left\">任务以错误代码退出。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>SHUTDOWN</code></td>\n<td align=\"left\">Docker 请求关闭任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>REJECTED</code></td>\n<td align=\"left\">工作节点拒绝了该任务。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ORPHANED</code></td>\n<td align=\"left\">节点关闭时间过长。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>REMOVE</code></td>\n<td align=\"left\">该任务不是终端，但相关服务已被删除或缩小。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>查看任务状态</strong></p>\n<p>运行 docker service ps <service-name>以获取任务的状态。该 <code>CURRENT STATE</code> 字段显示任务的状态以及它在那里的时间。</p>\n</blockquote>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><h4 id=\"创建-Swarm\"><a href=\"#创建-Swarm\" class=\"headerlink\" title=\"创建 Swarm\"></a>创建 Swarm</h4><ol>\n<li>运行以下命令来创建一个新的 swarm：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm init --advertise-addr &lt;MANAGER-IP&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>例如：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm init --advertise-addr 192.168.88.230</span><br><span class=\"line\">Swarm initialized: current node (uo7m7w01d5wfdjt0qn9m3aau4) is now a manager.</span><br><span class=\"line\"></span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-3abelxhlyvhm54klavpbr06r5 192.168.88.230:2377</span><br><span class=\"line\"></span><br><span class=\"line\">To add a manager to this swarm, run <span class=\"string\">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该 <code>--advertise-addr</code> 标志将管理节点配置为将其地址发布为 <code>192.168.88.230</code>。 swarm 中的其他节点必须能够访问该 IP 地址的 manager。</p>\n<p>输出包括将新节点加入 swarm 的命令。根据 <code>--token</code> 标志的值，节点将作为 manager 或 worker 加入。</p>\n</blockquote>\n<ol start=\"3\">\n<li>运行<code>docker info</code>查看 swarm 的当前状态：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker info</span><br><span class=\"line\"> Containers: 3</span><br><span class=\"line\">  Running: 3</span><br><span class=\"line\">  Paused: 0</span><br><span class=\"line\">  Stopped: 0</span><br><span class=\"line\"> Images: 4</span><br><span class=\"line\"> ...snip...</span><br><span class=\"line\"> Swarm: active</span><br><span class=\"line\">  NodeID: uo7m7w01d5wfdjt0qn9m3aau4</span><br><span class=\"line\">  Is Manager: <span class=\"literal\">true</span></span><br><span class=\"line\">  ClusterID: ym3kr78wgx258lawn3iclgxwq</span><br><span class=\"line\">  Managers: 1</span><br><span class=\"line\">  Nodes: 3</span><br><span class=\"line\">  ...snip...</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>运行<code>docker node ls</code>命令查看节点信息：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker node <span class=\"built_in\">ls</span></span><br><span class=\"line\">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class=\"line\">uo7m7w01d5wfdjt0qn9m3aau4 *   88230      Ready     Active         Leader           20.10.13</span><br><span class=\"line\">p4tlkfxa4d2ne1diq0mtlifs9     88233      Ready     Active                          20.10.17</span><br><span class=\"line\">oawv9cs597brq8h5hzis3ynlc     88237      Ready     Active                          20.10.17</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将节点添加到-Swarm\"><a href=\"#将节点添加到-Swarm\" class=\"headerlink\" title=\"将节点添加到 Swarm\"></a>将节点添加到 Swarm</h4><p>当你创建了一个带有管理节点的 swarm 时，你就可以添加工作节点了。</p>\n<ol>\n<li>运行创建 Swarm 中 <code>docker swarm init</code> 步骤生成的命令，以创建一个加入现有 swarm 的工作节点：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-3abelxhlyvhm54klavpbr06r5 192.168.88.230:2377</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果没有可用的命令，可以在管理节点上运行以下命令来生成工作节点的加入命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm join-token worker</span><br><span class=\"line\">To add a worker to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-3abelxhlyvhm54klavpbr06r5 192.168.88.230:2377</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>生成管理节点的加入命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker swarm join-token manager</span><br><span class=\"line\">To add a manager to this swarm, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    docker swarm <span class=\"built_in\">join</span> --token SWMTKN-1-63d99h3uln0k8qfne7w39qt6f1tv4yddvevyzwh3uzhhfl73wf-0so9mhkgy8btr579ho4pfza9n 192.168.88.230:2377</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h4><p>先在要删除的节点上运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker swarm leave</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>manage</code> 节点上运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node <span class=\"built_in\">rm</span> NODE </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点提升\"><a href=\"#节点提升\" class=\"headerlink\" title=\"节点提升\"></a>节点提升</h4><p><strong>用法</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node promote NODE [NODE...]</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<p>将节点提升为 <code>manager</code>。该命令只能在 <code>manage node</code> 上执行。</p>\n<blockquote>\n<p><strong>笔记</strong></p>\n<p>这是一个集群管理命令，必须在 swarm manager 节点上执行。</p>\n</blockquote>\n<h4 id=\"节点降级\"><a href=\"#节点降级\" class=\"headerlink\" title=\"节点降级\"></a>节点降级</h4><p><strong>用法</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker node demote NODE [NODE...]</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<p>降级现有 <code>manager</code>，使其不再是 <code>manager</code>。</p>\n<blockquote>\n<p><strong>笔记</strong></p>\n<p>这是一个集群管理命令，必须在 swarm manager 节点上执行。</p>\n</blockquote>\n<h4 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h4><ol>\n<li>在管理节点上运行以下命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br><span class=\"line\">ktcjndh4nj4nbwp461idnob0y</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>该 <code>docker service create</code> 命令创建服务。</li>\n<li>该 <code>--name</code> 标志命名服务 <code>helloworld</code>。</li>\n<li>该 <code>--replicas</code> 标志指定 1 个正在运行的实例的所需状态。</li>\n<li>参数 <code>alpine ping docker.com</code> 将服务定义为执行命令的 Alpine Linux 容器 <code>ping docker.com</code>。</li>\n</ul>\n<ol start=\"2\">\n<li>运行 <code>docker service ls</code> 查看正在运行的服务列表：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service <span class=\"built_in\">ls</span></span><br><span class=\"line\">ID             NAME         MODE         REPLICAS   IMAGE           PORTS</span><br><span class=\"line\">ktcjndh4nj4n   helloworld   replicated   1/1        alpine:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h4><p>将服务部署到 swarm 后，可以使用 <code>Docker CLI</code> 查看有关在 swarm 中运行的服务的详细信息。</p>\n<ol>\n<li>运行 <code>docker service inspect --pretty &lt;SERVICE-ID&gt;</code> 以易于阅读的格式显示有关服务的详细信息。</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">docker</span> <span class=\"string\">service</span> <span class=\"string\">inspect</span> <span class=\"string\">--pretty</span> <span class=\"string\">helloworld</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ID:</span>\t\t<span class=\"string\">ktcjndh4nj4nbwp461idnob0y</span></span><br><span class=\"line\"><span class=\"attr\">Name:</span>\t\t<span class=\"string\">helloworld</span></span><br><span class=\"line\"><span class=\"attr\">Service Mode:</span>\t<span class=\"string\">Replicated</span></span><br><span class=\"line\"> <span class=\"attr\">Replicas:</span>\t<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">Placement:</span></span><br><span class=\"line\"><span class=\"attr\">ContainerSpec:</span></span><br><span class=\"line\"> <span class=\"attr\">Image:</span>\t\t<span class=\"string\">alpine</span></span><br><span class=\"line\"> <span class=\"attr\">Args:</span>\t\t<span class=\"string\">ping</span> <span class=\"string\">docker.com</span></span><br><span class=\"line\"> <span class=\"attr\">Init:</span>\t\t<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">Resources:</span></span><br><span class=\"line\"><span class=\"attr\">Endpoint Mode:</span>\t<span class=\"string\">vip</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>提示</strong>：要以 json 格式返回服务详细信息，请运行不带 <code>--pretty</code> 标志的相同命令。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service inspect helloworld</span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;ID&quot;</span>: <span class=\"string\">&quot;ktcjndh4nj4nbwp461idnob0y&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Version&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Index&quot;</span>: 28</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;CreatedAt&quot;</span>: <span class=\"string\">&quot;2022-04-05T15:00:31.72873489Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;UpdatedAt&quot;</span>: <span class=\"string\">&quot;2022-04-05T15:00:31.72873489Z&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Spec&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Name&quot;</span>: <span class=\"string\">&quot;helloworld&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;TaskTemplate&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;ContainerSpec&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Image&quot;</span>: <span class=\"string\">&quot;alpine&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Args&quot;</span>: [</span><br><span class=\"line\">                        <span class=\"string\">&quot;ping&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;docker.com&quot;</span></span><br><span class=\"line\">                    ],</span><br><span class=\"line\">                    <span class=\"string\">&quot;Init&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;StopGracePeriod&quot;</span>: 10000000000,</span><br><span class=\"line\">                    <span class=\"string\">&quot;DNSConfig&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Isolation&quot;</span>: <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;Resources&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Limits&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Reservations&quot;</span>: &#123;&#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;RestartPolicy&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Condition&quot;</span>: <span class=\"string\">&quot;any&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Delay&quot;</span>: 5000000000,</span><br><span class=\"line\">                    <span class=\"string\">&quot;MaxAttempts&quot;</span>: 0</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;Placement&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;ForceUpdate&quot;</span>: 0,</span><br><span class=\"line\">                <span class=\"string\">&quot;Runtime&quot;</span>: <span class=\"string\">&quot;container&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;Mode&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Replicated&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;Replicas&quot;</span>: 1</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;EndpointSpec&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;Mode&quot;</span>: <span class=\"string\">&quot;vip&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;Endpoint&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Spec&quot;</span>: &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行 <code>docker service ps &lt;SERVICE-ID&gt;</code> 查看哪些节点正在运行该服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID             NAME           IMAGE           NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class=\"line\">3s1myvuaoc0k   helloworld.1.3s1myvuaoc0kdvlaz4fgz3usk   alpine:latest   8886      Running         Running 31 minutes ago</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，服务的一个实例正在节点 <code>helloworld</code> 上运行 。<code>8886</code> 您可能会看到该服务在您的管理器节点上运行。默认情况下，swarm 中的管理节点可以像工作节点一样执行任务。</p>\n<p>Swarm 还向您显示服务任务的 <code>DESIRED STATE</code> 和 <code>CURRENT STATE</code>，以便您可以查看任务是否根据服务定义运行。</p>\n<ol start=\"3\">\n<li>在运行 <code>docker ps</code> 任务的节点上运行以查看有关任务容器的详细信息。</li>\n</ol>\n<blockquote>\n<p><strong>提示</strong>：如果<code>helloworld</code>在管理节点以外的节点上运行，则必须 ssh 到该节点。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br><span class=\"line\">CONTAINER ID   IMAGE           COMMAND             CREATED          STATUS          PORTS     NAMES</span><br><span class=\"line\">3128610843c3   alpine:latest   <span class=\"string\">&quot;ping docker.com&quot;</span>   38 minutes ago   Up 38 minutes    helloworld.1.3s1myvuaoc0kdvlaz4fgz3usk</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展服务\"><a href=\"#扩展服务\" class=\"headerlink\" title=\"扩展服务\"></a>扩展服务</h4><p>将服务部署到 swarm 后，您就可以使用 <code>Docker CLI</code> 扩展服务中的容器数量了。在服务中运行的容器称为“任务”。</p>\n<ol>\n<li>运行以下命令以更改在 swarm 中运行的服务的所需状态</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service scale &lt;SERVICE-ID&gt;=&lt;NUMBER-OF-TASKS&gt;</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service scale helloworld=5</span><br><span class=\"line\">hellworld scaled to 5</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>运行 <code>docker service ps &lt;SERVICE-ID&gt;</code> 查看更新的任务列表：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps helloworld</span><br><span class=\"line\">ID             NAME           IMAGE           NODE      DESIRED STATE   CURRENT STATE                ERROR     PORTS</span><br><span class=\"line\">3s1myvuaoc0k   helloworld.1   alpine:latest   8886      Running         Running 43 minutes ago</span><br><span class=\"line\">sub0vfkz17t1   helloworld.2   alpine:latest   88235     Running         Running 53 seconds ago</span><br><span class=\"line\">qiiwkq8eaw4c   helloworld.3   alpine:latest   88236     Running         Running about a minute ago</span><br><span class=\"line\">272jo44c63qd   helloworld.4   alpine:latest   88236     Running         Running about a minute ago</span><br><span class=\"line\">vx61pv6vzm9y   helloworld.5   alpine:latest   8886      Running         Running 2 minutes ago</span><br></pre></td></tr></table></figure>\n\n<p>您可以看到 swarm 创建了 4 个新任务以扩展到总共 5 个正在运行的 Alpine Linux 实例。任务分布在 swarm 的三个节点之间。</p>\n<h4 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h4><ol>\n<li>运行 <code>docker service rm helloworld</code> 以删除 <code>helloworld</code> 服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service <span class=\"built_in\">rm</span> helloworld</span><br><span class=\"line\">helloworld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应用滚动更新\"><a href=\"#应用滚动更新\" class=\"headerlink\" title=\"应用滚动更新\"></a>应用滚动更新</h4><ol>\n<li>将您的 Redis 标签部署到 swarm 并为 swarm 配置 10 秒的更新延迟。请注意，以下示例显示了较旧的 Redis 标记：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service create \\</span><br><span class=\"line\">  --replicas 3 \\</span><br><span class=\"line\">  --name redis \\</span><br><span class=\"line\">  --update-delay 10s \\</span><br><span class=\"line\">  redis:3.0.6</span><br><span class=\"line\">pvud31bgvl7e5ljf6xuxcn7dh</span><br></pre></td></tr></table></figure>\n\n<p>您在服务部署时配置滚动更新策略。</p>\n<p>该 <code>--update-delay</code> 标志配置更新服务任务或任务集之间的时间延迟。您可以将时间描述 <code>T</code> 为秒数 <code>Ts</code>、分钟数 <code>Tm</code> 或小时数的组合 <code>Th</code>。所以 <code>10m30s</code> 表示延迟 10 分 30 秒。</p>\n<p>默认情况下，调度程序一次更新 1 个任务。您可以传递该 <code>--update-parallelism</code> 标志来配置调度程序同时更新的最大服务任务数。</p>\n<p>默认情况下，当单个任务的更新返回状态为 时 <code>RUNNING</code>，调度程序会安排另一个任务进行更新，直到所有任务都更新完毕。如果在更新期间的任何时间任务返回 <code>FAILED</code>，调度程序会暂停更新。您可以使用或 的 <code>--update-failure-action</code> 标志来控制行为 。<code>docker service create</code> <code>docker service update</code></p>\n<ol start=\"2\">\n<li>检查<code>redis</code>服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service inspect --pretty redis</span><br><span class=\"line\"></span><br><span class=\"line\">ID:\t\tpvud31bgvl7e5ljf6xuxcn7dh</span><br><span class=\"line\">Name:\t\tredis</span><br><span class=\"line\">Service Mode:\tReplicated</span><br><span class=\"line\"> Replicas:\t3</span><br><span class=\"line\">Placement:</span><br><span class=\"line\">UpdateConfig:</span><br><span class=\"line\"> Parallelism:\t1</span><br><span class=\"line\"> Delay:\t\t10s</span><br><span class=\"line\">ContainerSpec:</span><br><span class=\"line\"> Image:\t\tredis:3.0.6</span><br><span class=\"line\"> Init:\t\t<span class=\"literal\">false</span></span><br><span class=\"line\">Resources:</span><br><span class=\"line\">Endpoint Mode:\tvip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>现在您可以更新 <code>redis</code>， swarm manager 根据 <code>UpdateConfig</code> 策略将更新应用到节点：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service update --image redis:3.0.7 redis</span><br><span class=\"line\">redis</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，调度程序按如下方式应用滚动更新：</p>\n<ul>\n<li>停止第一个任务。</li>\n<li>为已停止的任务安排更新。</li>\n<li>启动更新任务的容器。</li>\n<li>如果一个任务的更新返回<code>RUNNING</code>，等待指定的延迟时间然后开始下一个任务。</li>\n<li>如果在更新期间的任何时间，任务返回<code>FAILED</code>，则暂停更新。</li>\n</ul>\n<ol start=\"4\">\n<li>运行 <code>docker service inspect --pretty redis</code> 以查看处于所需状态的新图像：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service inspect --pretty redis</span><br><span class=\"line\"></span><br><span class=\"line\">ID:\t\tpvud31bgvl7e5ljf6xuxcn7dh</span><br><span class=\"line\">Name:\t\tredis</span><br><span class=\"line\">Service Mode:\tReplicated</span><br><span class=\"line\"> Replicas:\t3</span><br><span class=\"line\">Placement:</span><br><span class=\"line\">UpdateConfig:</span><br><span class=\"line\"> Parallelism:\t1</span><br><span class=\"line\"> Delay:\t\t10s</span><br><span class=\"line\">ContainerSpec:</span><br><span class=\"line\"> Image:\t\tredis:3.0.7</span><br><span class=\"line\"> Init:\t\t<span class=\"literal\">false</span></span><br><span class=\"line\">Resources:</span><br><span class=\"line\">Endpoint Mode:\tvip</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行 <code>docker service ps &lt;SERVICE-ID&gt;</code> 以观看滚动更新：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker service ps redis</span><br><span class=\"line\">ID             NAME          IMAGE         NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class=\"line\">s3uwdrtssguv   redis.1       redis:3.0.7   88236     Running         Running 3 minutes ago</span><br><span class=\"line\">9nav9b094si0    \\_ redis.1   redis:3.0.6   88236     Shutdown        Shutdown 5 minutes ago</span><br><span class=\"line\">tdy6tqfhweo4   redis.2       redis:3.0.7   88235     Running         Running 2 minutes ago</span><br><span class=\"line\">t9vr0kt1h8av    \\_ redis.2   redis:3.0.6   88235     Shutdown        Shutdown 3 minutes ago</span><br><span class=\"line\">xjc6v95dayhv   redis.3       redis:3.0.7   8886      Running         Running 3 minutes ago</span><br><span class=\"line\">biy701m9tvat    \\_ redis.3   redis:3.0.6   8886      Shutdown        Shutdown 4 minutes ago</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"排空一个节点\"><a href=\"#排空一个节点\" class=\"headerlink\" title=\"排空一个节点\"></a>排空一个节点</h4><p>有时，例如计划的维护时间，您需要将节点设置为 <code>DRAIN</code> 可用。<code>DRAIN</code> 可用性阻止节点从集群管理器接收新任务。这也意味着管理器停止在节点上运行的任务，并在可用的节点上启动副本任务 <code>ACTIVE</code>。</p>\n<blockquote>\n<p><strong>重要</strong>：将节点设置为 <code>DRAIN</code> 不会从该节点删除独立容器，例如使用 Docker 引擎 API 创建的 <code>docker run</code> 容器 <code>docker-compose up</code>。一个节点的状态，包括 <code>DRAIN</code>，只影响节点调度 swarm 服务工作负载的能力。</p>\n</blockquote>\n<ol>\n<li>运行 <code>docker node update --availability drain &lt;NODE-ID&gt;</code> 以排空已分配任务的节点：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker node update --availability drain worker1</span><br><span class=\"line\">work1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>检查节点其可用性：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker node inspect --pretty worker1</span><br></pre></td></tr></table></figure>\n\n<p><code>AVAILABILITY</code> 属性值为 <code>Drain</code></p>\n<h2 id=\"Docker-Stack\"><a href=\"#Docker-Stack\" class=\"headerlink\" title=\"Docker Stack\"></a>Docker Stack</h2><h3 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h3><p>指定与服务的部署和运行有关的配置。只在 swarm 模式下才会有用。</p>\n<figure class=\"highlight nestedtext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">version</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3.7&quot;</span></span><br><span class=\"line\"><span class=\"attribute\">services</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">  <span class=\"attribute\">redis</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">    <span class=\"attribute\">image</span><span class=\"punctuation\">:</span> <span class=\"string\">redis:alpine</span></span><br><span class=\"line\">    <span class=\"attribute\">deploy</span><span class=\"punctuation\">:</span></span><br><span class=\"line\"><span class=\"attribute\">sssssssss</span></span><br><span class=\"line\"><span class=\"attribute\">      endpoint_mode</span><span class=\"punctuation\">:</span> <span class=\"string\">dnsrr</span></span><br><span class=\"line\">      <span class=\"attribute\">labels</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">        <span class=\"attribute\">description</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;This redis service label&quot;</span></span><br><span class=\"line\">      <span class=\"attribute\">resources</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">        <span class=\"attribute\">limits</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">          <span class=\"attribute\">cpus</span><span class=\"punctuation\">:</span> <span class=\"string\">&#x27;0.50&#x27;</span></span><br><span class=\"line\">          <span class=\"attribute\">memory</span><span class=\"punctuation\">:</span> <span class=\"string\">50M</span></span><br><span class=\"line\">        <span class=\"attribute\">reservations</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">          <span class=\"attribute\">cpus</span><span class=\"punctuation\">:</span> <span class=\"string\">&#x27;0.25&#x27;</span></span><br><span class=\"line\">          <span class=\"attribute\">memory</span><span class=\"punctuation\">:</span> <span class=\"string\">20M</span></span><br><span class=\"line\">      <span class=\"attribute\">restart_policy</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">        <span class=\"attribute\">condition</span><span class=\"punctuation\">:</span> <span class=\"string\">on-failure</span></span><br><span class=\"line\">        <span class=\"attribute\">delay</span><span class=\"punctuation\">:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">        <span class=\"attribute\">max_attempts</span><span class=\"punctuation\">:</span> <span class=\"string\">3</span></span><br><span class=\"line\">        <span class=\"attribute\">window</span><span class=\"punctuation\">:</span> <span class=\"string\">120s</span></span><br></pre></td></tr></table></figure>\n\n<p>可以选参数：</p>\n<p><strong>endpoint_mode</strong>：访问集群服务的方式。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">endpoint_mode:</span> vip</span><br><span class=\"line\"><span class=\"meta\"># Docker 集群服务一个对外的虚拟 ip。所有的请求都会通过这个虚拟 ip 到达集群服务内部的机器。</span></span><br><span class=\"line\"><span class=\"symbol\">endpoint_mode:</span> dnsrr</span><br><span class=\"line\"><span class=\"meta\"># DNS 轮询（DNSRR）。所有的请求会自动轮询获取到集群 ip 列表中的一个 ip 地址。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>labels</strong>：在服务上设置标签。可以用容器上的 labels（跟 deploy 同级的配置） 覆盖 deploy 下的 labels。</p>\n<p><strong>mode</strong>：指定服务提供的模式。</p>\n<ul>\n<li><p><strong>replicated</strong>：复制服务，复制指定服务到集群的机器上。</p>\n</li>\n<li><p><strong>global</strong>：全局服务，服务将部署至集群的每个节点。</p>\n</li>\n<li><p>图解：下图中黄色的方块是 replicated 模式的运行情况，灰色方块是 global 模式的运行情况。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220713152904.png\" alt=\"img\"></p>\n</li>\n</ul>\n<p><strong>replicas：mode</strong> 为 replicated 时，需要使用此参数配置具体运行的节点数量。</p>\n<p><strong>resources</strong>：配置服务器资源使用的限制，例如上例子，配置 redis 集群运行需要的 cpu 的百分比 和 内存的占用。避免占用资源过高出现异常。</p>\n<p><strong>restart_policy</strong>：配置如何在退出容器时重新启动容器。</p>\n<ul>\n<li>condition：可选 none，on-failure 或者 any（默认值：any）。</li>\n<li>delay：设置多久之后重启（默认值：0）。</li>\n<li>max_attempts：尝试重新启动容器的次数，超出次数，则不再尝试（默认值：一直重试）。</li>\n<li>window：设置容器重启超时时间（默认值：0）。</li>\n</ul>\n<p><strong>rollback_config</strong>：配置在更新失败的情况下应如何回滚服务。</p>\n<ul>\n<li>parallelism：一次要回滚的容器数。如果设置为 0，则所有容器将同时回滚。</li>\n<li>delay：每个容器组回滚之间等待的时间（默认为 0s）。</li>\n<li>failure_action：如果回滚失败，该怎么办。其中一个 continue 或者 pause（默认 pause）。</li>\n<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为 0s）。</li>\n<li>max_failure_ratio：在回滚期间可以容忍的故障率（默认为 0）。</li>\n<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first ）。</li>\n</ul>\n<p><strong>update_config</strong>：配置应如何更新服务，对于配置滚动更新很有用。</p>\n<ul>\n<li>parallelism：一次更新的容器数。</li>\n<li>delay：在更新一组容器之间等待的时间。</li>\n<li>failure_action：如果更新失败，该怎么办。其中一个 continue，rollback 或者 pause （默认：pause）。</li>\n<li>monitor：每个容器更新后，持续观察是否失败了的时间 (ns|us|ms|s|m|h)（默认为 0s）。</li>\n<li>max_failure_ratio：在更新过程中可以容忍的故障率。</li>\n<li>order：回滚期间的操作顺序。其中一个 stop-first（串行回滚），或者 start-first（并行回滚）（默认 stop-first）。</li>\n</ul>\n<p><strong>注</strong>：仅支持 V3.4 及更高版本。</p>\n","categories":[{"name":"Linux","path":"api/categories/Linux.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"},{"name":"容器","path":"api/tags/容器.json"}]}