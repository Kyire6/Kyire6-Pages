{"title":"ElasticSearch 的概述和使用","slug":"ElasticSearch 的概述和使用","date":"2021-05-04T08:25:44.000Z","updated":"2021-05-04T08:26:26.000Z","comments":true,"path":"api/articles/ElasticSearch 的概述和使用.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223554.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223607.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223616.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223627.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503224753.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503225150.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503225236.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503230107.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503230537.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233229.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233731.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233752.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233835.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503234155.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503234530.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235339.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235352.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235436.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235452.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235510.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235943.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000047.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000351.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000943.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001030.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001209.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001411.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001513.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001619.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002138.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002239.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002816.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002902.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003207.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003219.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003418.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003608.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003757.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003924.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004712.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004741.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004901.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005345.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005803.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005944.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010155.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010602.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010722.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011018.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011149.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011607.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011736.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011831.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012021.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012126.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012405.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012855.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012909.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504013020.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014024.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014306.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014541.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131313.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131324.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131333.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131416.webp","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504133033.webp"],"content":"<h2 id=\"ElasticSearch-概述\"><a href=\"#ElasticSearch-概述\" class=\"headerlink\" title=\"ElasticSearch 概述\"></a>ElasticSearch 概述</h2><p>Elaticsearch，简称为 es， es 是一个开源的<strong>高扩展</strong>的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储、检索数据</strong>；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别（大数据时代）的数据。es 也使用 Java 开发并使用 Lucene 作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong>来隐藏 Lucene 的复杂性，从而让全文搜索变得简单。</p>\n<p>据国际权威的数据库产品评测机构 DB Engines 的统计，在 2016 年 1 月，ElasticSearch 已超过 Solr 等，<strong>成为排名第一的搜索引擎类应用。</strong></p>\n<h2 id=\"ES-和-solr-的差别\"><a href=\"#ES-和-solr-的差别\" class=\"headerlink\" title=\"ES 和 solr 的差别\"></a>ES 和 solr 的差别</h2><h3 id=\"Elasticsearch-简介\"><a href=\"#Elasticsearch-简介\" class=\"headerlink\" title=\"Elasticsearch 简介\"></a>Elasticsearch 简介</h3><p>Elasticsearch 是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。</p>\n<p>它用于<strong>全文搜索、结构化搜索、分析</strong>以及将这三者混合使用：</p>\n<p>维基百科使用 Elasticsearch 提供全文搜索并高亮关键字，以及输入实时搜索(search-asyou-type)和搜索纠错(did-you-mean)等搜索建议功能。</p>\n<p>英国卫报使用 Elasticsearch 结合用户日志和社交网络数据提供给他们的编辑以实时的反馈，以便及时了解公众对新发表的文章的回应。</p>\n<p>StackOverflow 结合全文搜索与地理位置查询，以及 more-like-this 功能来找到相关的问题和答案。</p>\n<p>Github 使用 Elasticsearch 检索 1300 亿行的代码。</p>\n<p>但是 Elasticsearch 不仅用于大型企业，它还让像 DataDog 以及 Klout 这样的创业公司将最初的想法变成可扩展的解决方案。</p>\n<p>Elasticsearch 可以在你的笔记本上运行，也可以在数以百计的服务器上处理 PB 级别的数据 。</p>\n<p>Elasticsearch 是一个基于 Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene 可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</p>\n<p>但是，Lucene 只是一个库。想要使用它，你必须使用 Java 来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene 非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p>\n<p>Elasticsearch 也使用 Java 开发并使用 Lucene 作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong>来隐藏 Lucene 的复杂性，从而让全文搜索变得简单。</p>\n<h3 id=\"Solr-简介\"><a href=\"#Solr-简介\" class=\"headerlink\" title=\"Solr 简介\"></a>Solr 简介</h3><p>Solr 是 Apache 下的一个顶级开源项目，采用 Java 开发，它是基于 Lucene 的全文搜索服务器。Solr 提供了比 Lucene 更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化</p>\n<p>Solr 可以独立运行，运行在 Jetty、Tomcat 等这些 Servlet 容器中，Solr 索引的实现方法很简单，<strong>用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr 根据 xml 文档添加、删除、更新索引</strong>。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回 Xml、json 等格式的查询结果进行解析，组织页面布局。Solr 不提供构建 UI 的功能，Solr 提供了一个管理界面，通过管理界面可以查询 Solr 的配置和运行情况。</p>\n<p>solr 是基于 lucene 开发企业级搜索服务器，实际上就是封装了 lucene。</p>\n<p>Solr 是一个独立的企业级搜索应用服务器，它对外提供类似于==Web-service 的 API 接口==。用户可以通过 http 请求，向搜索引擎服务器提交一定格式的文件，生成索引；也可以通过提出查找请求，并得到返回结果。</p>\n<h3 id=\"Lucene-简介\"><a href=\"#Lucene-简介\" class=\"headerlink\" title=\"Lucene 简介\"></a>Lucene 简介</h3><p>Lucene 是 apache 软件基金会 4 jakarta 项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。Lucene 的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene 是一套用于全文检索和搜寻的开源程式库，由 Apache 软件基金会支持和提供。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。<strong>在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库</strong>。人们经常提到信息检索程序库，虽然与搜索引擎有关，但不应该将信息检索程序库与搜索引擎相混淆。</p>\n<p>Lucene 是一个全文检索引擎的架构。那什么是全文搜索引擎？</p>\n<p>全文搜索引擎是名副其实的搜索引擎，国外具代表性的有 Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut 等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p>\n<p>从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的 7 家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如 Lycos 引擎。</p>\n<h3 id=\"Elasticsearch-和-Solr-比较\"><a href=\"#Elasticsearch-和-Solr-比较\" class=\"headerlink\" title=\"Elasticsearch 和 Solr 比较\"></a>Elasticsearch 和 Solr 比较</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223554.png\" alt=\"image-20210503223554497\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223607.png\" alt=\"image-20210503223607286\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223616.png\" alt=\"image-20210503223616904\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223627.png\" alt=\"image-20210503223627835\"></p>\n<h3 id=\"ElasticSearch-vs-Solr-总结\"><a href=\"#ElasticSearch-vs-Solr-总结\" class=\"headerlink\" title=\"ElasticSearch vs Solr 总结\"></a>ElasticSearch vs Solr 总结</h3><ol>\n<li>es 基本是开箱即用（解压就可以用 ! ），非常简单。Solr 安装略微复杂一丢丢！</li>\n<li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能。</li>\n<li>Solr 支持更多格式的数据，比如 JSON、XML、CSV，而 Elasticsearch 仅支持 json 文件格式。</li>\n<li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要 kibana 友好支撑~!</li>\n<li>Solr 查询快，但更新索引时慢（即插入删除慢），用于电商等查询多的应用；<ul>\n<li>ES 建立索引快（即查询慢），<strong>即实时性查询快</strong>，用于 facebook 新浪等搜索。</li>\n<li>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用</li>\n</ul>\n</li>\n<li>Solr 比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而 Elasticsearch 相对开发维护者较少，更新太快，学习使用成本较高。（趋势！）</li>\n</ol>\n<h2 id=\"ElasticSearch-安装\"><a href=\"#ElasticSearch-安装\" class=\"headerlink\" title=\"ElasticSearch 安装\"></a>ElasticSearch 安装</h2><p>声明：JDK1.8 ，最低要求！ ElasticSearch 客户端，界面工具！<br>Java 开发，ElasticSearch 的版本和我们之后对应的 Java 的核心 jar 包！ 版本对应！JDK 环境是正常！</p>\n<blockquote>\n<p>下载</p>\n</blockquote>\n<p>官网：<a href=\"https://www.elastic.co/\">https://www.elastic.co/</a></p>\n<p>下载地址：<a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></p>\n<blockquote>\n<p>window 下安装！</p>\n</blockquote>\n<h3 id=\"解压就可以使用了！\"><a href=\"#解压就可以使用了！\" class=\"headerlink\" title=\"解压就可以使用了！\"></a>解压就可以使用了！</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503224753.png\" alt=\"image-20210503224753729\"></p>\n<h3 id=\"熟悉目录！\"><a href=\"#熟悉目录！\" class=\"headerlink\" title=\"熟悉目录！\"></a>熟悉目录！</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin 启动文件</span><br><span class=\"line\">config 配置文件</span><br><span class=\"line\">    log4j2 日志配置文件</span><br><span class=\"line\">    jvm.options java 虚拟机相关的配置</span><br><span class=\"line\">    elasticsearch.yml  elasticsearch 的配置文件！ 默认 <span class=\"number\">9200</span> 端口！ 跨域！</span><br><span class=\"line\">lib   相关jar包</span><br><span class=\"line\">logs   日志！</span><br><span class=\"line\">modules 功能模块</span><br><span class=\"line\">plugins 插件！</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动，访问-9200\"><a href=\"#启动，访问-9200\" class=\"headerlink\" title=\"启动，访问 9200\"></a>启动，访问 9200</h3><p>运行<code>bin/elasticsearch.bat</code>，启动！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503225150.png\" alt=\"image-20210503225150680\"></p>\n<h3 id=\"访问测试！\"><a href=\"#访问测试！\" class=\"headerlink\" title=\"访问测试！\"></a>访问测试！</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503225236.png\" alt=\"image-20210503225235923\"></p>\n<blockquote>\n<p>安装可视化界面插件 es head 的插件</p>\n</blockquote>\n<p>需要 node.js 环境</p>\n<ol>\n<li><p>下载地址：<a href=\"https://links.jianshu.com/go?to=https://github.com/mobz/elasticsearch-head/\">https://github.com/mobz/elasticsearch-head/</a></p>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure></li>\n<li><p>连接测试发现，存在跨域问题：配置 es</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>重启 es 服务器，然后再次连接</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503230107.png\" alt=\"image-20210503230107069\"></p>\n</li>\n</ol>\n<p>初学，就把 es 当做一个数据库！ （可以建立索引（库），文档（库中的数据！））</p>\n<p><strong>这个 head 我们就把它当做数据展示工具！我们后面所有的查询，去 Kibana 进行！</strong></p>\n<blockquote>\n<p>了解 ELK</p>\n</blockquote>\n<p>ELK 是 Elasticsearch、Logstash、Kibana 三大开源框架首字母大写简称。市面上也被成为 ElasticStack。其中 Elasticsearch 是一个基于 Lucene、分布式、通过 Restful 方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用 Elasticsearch 作为底层支持框架，可见 Elasticsearch 提供的搜索能力确实强大,市面上很多时候我们简称 Elasticsearch 为 es。Logstash 是 ELK 的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka 等）。Kibana 可以将 elasticsearch 的数据通过友好<br>的页面展示出来，提供实时分析的功能。</p>\n<p>市面上很多开发只要提到 ELK 能够一致说出它是一个日志分析架构技术栈总称，但实际上 ELK 不仅仅适用于日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503230537.webp\" alt=\"img\"></p>\n<blockquote>\n<p>安装 Kibana</p>\n</blockquote>\n<p>Kibana 是一个针对 Elasticsearch 的开源分析及可视化平台，用来搜索、查看交互存储在 Elasticsearch 索引中的数据。使用 Kibana，可以通过各种图表进行高级数据分析及展示。Kibana 让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示 Elasticsearch 查询动态。设置 Kibana 非常简单。无需编码或者额外的基础架构，几分钟内就可以完成 Kibana 安装并启动 Elasticsearch 索引监测。</p>\n<p>官网：<a href=\"https://www.elastic.co/cn/kibana\">https://www.elastic.co/cn/kibana</a></p>\n<p>Kibana 版本要和 Es 一致！</p>\n<blockquote>\n<p>启动测试！</p>\n</blockquote>\n<p>1、解压后的目录</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233229.png\" alt=\"image-20210503233229181\" style=\"zoom:67%;\" />\n\n<p>2、启动<code>kibana.bat</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233731.png\" alt=\"image-20210503233731775\"></p>\n<p>3、访问测试</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233752.png\" alt=\"image-20210503233752142\"></p>\n<p>4、开发工具！ （Post、curl、head、谷歌浏览器插件测试！）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233835.png\" alt=\"image-20210503233835622\"></p>\n<p>5、汉化！自己修改 kibana 配置即可！ zh-CN！</p>\n<p>kibaba.yml 文件末尾添加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">i18n.locale:</span> <span class=\"string\">&quot;zn-CH&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503234155.png\" alt=\"image-20210503234155128\"></p>\n<h2 id=\"ES-核心概念\"><a href=\"#ES-核心概念\" class=\"headerlink\" title=\"ES 核心概念\"></a>ES 核心概念</h2><ol>\n<li>索引</li>\n<li>字段类型（mapping）</li>\n<li>文档（documents）</li>\n</ol>\n<blockquote>\n<p>概述</p>\n</blockquote>\n<p>在前面的学习中，我们已经掌握了 es 是什么，同时也把 es 的服务已经安装启动，那么 es 是如何去存储数据，数据结构是什么，又是如何实现搜索的呢？我们先来聊聊 ElasticSearch 的相关概念吧！</p>\n<p><strong>集群，节点，索引，类型，文档，分片，映射是什么？</strong></p>\n<blockquote>\n<p>elasticsearch 是面向文档，关系行数据库 和 elasticsearch 客观的对比！一切都是 JSON！</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>Relational DB</strong></th>\n<th align=\"center\"><strong>Elasticsearch</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据库(database)</td>\n<td align=\"center\">索引(indices)</td>\n</tr>\n<tr>\n<td align=\"center\">表(tables)</td>\n<td align=\"center\">types</td>\n</tr>\n<tr>\n<td align=\"center\">行(rows)</td>\n<td align=\"center\">documents</td>\n</tr>\n<tr>\n<td align=\"center\">字段(columns)</td>\n<td align=\"center\">fields</td>\n</tr>\n</tbody></table>\n<p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多 个文档(行)，每个文档中又包含多个字段(列)。</p>\n<p><strong>物理设计：</strong></p>\n<p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移</p>\n<p>一个人就是一个集群！默认的集群名称就是 elaticsearh</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503234530.webp\" alt=\"img\"></p>\n<p><strong>逻辑设计：</strong></p>\n<p>一个索引类型中，包含多个文档，比如说文档 1，文档 2。 当我们索引一篇文档时，可以通过这样的一各顺序找到 它: 索引 ▷ 类型 ▷ 文档 ID ，通过这个组合我们就能索引到某个具体的文档。 注意:ID 不必是整数，实际上它是个字符串。</p>\n<blockquote>\n<p>文档</p>\n</blockquote>\n<p>就是我们的一条条数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user</span><br><span class=\"line\">1  zhangsan  18</span><br><span class=\"line\">2  ouwen  3</span><br></pre></td></tr></table></figure>\n\n<p>之前说 elasticsearch 是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch 中，文档有几个 重要属性 :</p>\n<ul>\n<li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含 key:value！</li>\n<li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！ {就是一个 json 对象！fastjson 进行自动转换！}</li>\n<li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在 elasticsearch 中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</li>\n</ul>\n<p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符 串也可以是整形。因为 elasticsearch 会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在 elasticsearch 中，类型有时候也称为映射类型。</p>\n<blockquote>\n<p>类型</p>\n</blockquote>\n<p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射，比如 name 映 射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么 elasticsearch 是怎么做的呢?elasticsearch 会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch 就开始猜，如果这个值是 18，那么 elasticsearch 会认为它是整形。 但是 elasticsearch 也可能猜不对， 所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别 整什么幺蛾子。</p>\n<blockquote>\n<p>索引</p>\n</blockquote>\n<p>就是数据库！</p>\n<p>索引是映射类型的容器，elasticsearch 中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。 然后它们被存储到了各个分片上了。 我们来研究下分片是如何工作的。</p>\n<p>物理设计 ：节点和分片 如何工作</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235339.webp\" alt=\"img\"></p>\n<p>一个集群至少有一个节点，而一个节点就是一个 elasricsearch 进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个 5 个分片 ( primary shard ,又称主分片 ) 构成的，每一个主分片会有一个副本 ( replica shard ,又称复制分片 )</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235352.webp\" alt=\"img\"></p>\n<p>上图是一个有 3 个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉 了，数据也不至于丢失。 实际上，一个分片是一个 Lucene 索引，一个包含倒排索引的文件目录，<strong>倒排索引</strong>的结构使 得 elasticsearch 在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。 不过，等等，倒排索引是什 么鬼?</p>\n<blockquote>\n<p>倒排索引</p>\n</blockquote>\n<p>elasticsearch 使用的是一种称为倒排索引的结构，采用 Lucene 倒排索作为底层。这种结构适用于快速的全文搜索， 一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例如，现在有两个文档， 每个文档包含如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Study every day, good good up to forever  <span class=\"comment\"># 文档1包含的内容</span></span><br><span class=\"line\">To forever, study every day, good good up <span class=\"comment\"># 文档2包含的内容</span></span><br></pre></td></tr></table></figure>\n\n<p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词(或称为词条或者 tokens)，然后创建一个包含所有不重 复的词条的排序列表，然后列出每个词条出现在哪个文档 :</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235436.png\" alt=\"image-20210503235436309\" style=\"zoom:50%;\" />\n\n<p>现在，我们试图搜索 to forever，只需要查看包含每个词条的文档 score</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235452.png\" alt=\"image-20210503235452613\" style=\"zoom:50%;\" />\n\n<p>两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在，这两个包含关键字的文档都将返回。</p>\n<p>再来看一个示例，比如我们通过博客标签来搜索博客文章。那么倒排索引列表就是这样的一个结构 :</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235510.webp\" alt=\"img\"></p>\n<p>如果要搜索含有 python 标签的文章，那相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。只需要 查看标签这一栏，然后获取相关的文章 ID 即可。完全过滤掉无关的所有数据，提高效率！</p>\n<p>elasticsearch 的索引和 Lucene 的索引对比</p>\n<p>在 elasticsearch 中， 索引 （库）这个词被频繁使用，这就是术语的使用。 在 elasticsearch 中，索引被分为多个分片，每份 分片是一个 Lucene 的索引。所以一个 elasticsearch 索引是由多个 Lucene 索引组成的。别问为什么，谁让 elasticsearch 使用 Lucene 作为底层呢! 如无特指，说起索引都是指 elasticsearch 的索引。</p>\n<h2 id=\"IK-分词器插件\"><a href=\"#IK-分词器插件\" class=\"headerlink\" title=\"IK 分词器插件\"></a>IK 分词器插件</h2><blockquote>\n<p>什么是 IK 分词器？</p>\n</blockquote>\n<p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，比如 “我爱狂神” 会被分为”我”,”爱”,”狂”,”神”，这显然是不符合要求的，所以我们需要安装中文分词器 ik 来解决这个问题。</p>\n<p>如果要使用中文，建议使用 ik 分词器！</p>\n<p>IK 提供了两个分词算法：ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word 为最细粒度划分！</p>\n<blockquote>\n<p>安装</p>\n</blockquote>\n<p>1、<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\">https://github.com/medcl/elasticsearch-analysis-ik</a></p>\n<p>2、下载完毕后，放入到我们的 elasticsearch 插件即可</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235943.png\" alt=\"image-20210503235943039\"></p>\n<p>3、重启观察 ES，可以看到 ik 分词器被加载了！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000047.png\" alt=\"image-20210504000047514\"></p>\n<p>4、elasticsearch-plugin 可以通过这个命令来查看加载进来的插件</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000351.png\" alt=\"image-20210504000146656\"></p>\n<p>5、使用 kibana 进行测试</p>\n<blockquote>\n<p>查看不同的分词效果</p>\n</blockquote>\n<p>ik_smart 为最少切分</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000943.png\" alt=\"image-20210504000856743\"></p>\n<p>ik_max_word 为最细粒度划分，穷尽词库的可能！字典！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001030.png\" alt=\"image-20210504001030482\"></p>\n<blockquote>\n<p>我们输入 超级喜欢狂神说 Java</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001209.webp\" alt=\"img\"></p>\n<p>发现问题：狂神说被拆开了！</p>\n<p>这种自己需要的词，需要自己加到我们的分词器的字典中！</p>\n<blockquote>\n<p>ik 分词器增加自己的配置！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001411.png\" alt=\"image-20210504001411652\"></p>\n<p>重启 es，看细节！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001513.png\" alt=\"image-20210504001513405\"></p>\n<p>再次测试一下狂神说，看下效果！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001619.png\" alt=\"image-20210504001619667\"></p>\n<h2 id=\"Rest-风格说明\"><a href=\"#Rest-风格说明\" class=\"headerlink\" title=\"Rest 风格说明\"></a>Rest 风格说明</h2><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>\n<p>基本 Rest 命令说明：</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>url 地址</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PUT</td>\n<td>localhost:9200/索引名称/类型名称/文档 id</td>\n<td>创建文档（指定文档 id）</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>localhost:9200/索引名称/类型名称</td>\n<td>创建文档（随机文档 id）</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>localhost:9200/索引名称/类型名称/文档 id/_update</td>\n<td>修改文档</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>localhost:9200/索引名称/类型名称/文档 id</td>\n<td>删除文档</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>localhost:9200/索引名称/类型名称/文档 id</td>\n<td>查询文档通过文档 id</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>localhost:9200/索引名称/类型名称/_search</td>\n<td>查询所有数据</td>\n</tr>\n</tbody></table>\n<h2 id=\"关于索引的基本操作\"><a href=\"#关于索引的基本操作\" class=\"headerlink\" title=\"关于索引的基本操作\"></a>关于索引的基本操作</h2><h3 id=\"创建一个索引！\"><a href=\"#创建一个索引！\" class=\"headerlink\" title=\"创建一个索引！\"></a>创建一个索引！</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /索引名/~类型名~/文档id</span><br><span class=\"line\">&#123;请求体&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002138.png\" alt=\"image-20210504002137968\"></p>\n<p>完成了自动增加了索引！数据也成功的添加了，这就是我说大家在初期可以把它当做数据库学习的原因！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002239.png\" alt=\"image-20210504002239404\"></p>\n<p>那么 name 这个字段用不用指定类型呢。毕竟我们关系型数据库 是需要指定类型的啊 !</p>\n<ul>\n<li>字符串类型<br>text 、 keyword</li>\n<li>数值类型<br>long, integer, short, byte, double, float, half_float, scaled_float</li>\n<li>日期类型<br>date</li>\n<li>布尔值类型<br>boolean</li>\n<li>二进制类型<br>binary</li>\n<li>等等…..</li>\n</ul>\n<h3 id=\"指定字段的类型\"><a href=\"#指定字段的类型\" class=\"headerlink\" title=\"指定字段的类型\"></a>指定字段的类型</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002816.png\" alt=\"image-20210504002816478\"></p>\n<p>获得这个规则！ 可以通过 GET 请求获取具体的信息！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002902.png\" alt=\"image-20210504002902783\"></p>\n<h3 id=\"查看默认的信息\"><a href=\"#查看默认的信息\" class=\"headerlink\" title=\"查看默认的信息\"></a>查看默认的信息</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003207.png\" alt=\"image-20210504003207460\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003219.png\" alt=\"image-20210504003219494\"></p>\n<p>如果自己的文档字段没有指定，那么 es 就会给我们默认配置字段类型！</p>\n<p><strong>扩展</strong>： 通过命令 elasticsearch 索引情况！ 通过<code>GET _cat/</code> 可以获得 es 的当前的很多信息！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003418.png\" alt=\"image-20210504003418475\"></p>\n<blockquote>\n<p>修改 提交还是使用 PUT 即可！ 然后覆盖！最新办法！</p>\n</blockquote>\n<p>曾经！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003608.png\" alt=\"image-20210504003608862\"></p>\n<p>现在的方法！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003757.png\" alt=\"image-20210504003757886\"></p>\n<blockquote>\n<p>删除索引！</p>\n</blockquote>\n<p>通过 DELETE 命令实现删除、 根据你的请求来判断是删除索引还是删除文档记录！</p>\n<p>使用 RESTFUL 风格是我们 ES 推荐大家使用的！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003924.png\" alt=\"image-20210504003924263\"></p>\n<h2 id=\"关于文档的基本操作（重点）\"><a href=\"#关于文档的基本操作（重点）\" class=\"headerlink\" title=\"关于文档的基本操作（重点）\"></a>关于文档的基本操作（重点）</h2><blockquote>\n<p>基本操作</p>\n</blockquote>\n<h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /ouwen/user/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;小红&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">22</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我是一个美女&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;睡觉&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;靓女&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;吃饭&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004712.png\" alt=\"image-20210504004712396\"></p>\n<h3 id=\"获取数据-GET\"><a href=\"#获取数据-GET\" class=\"headerlink\" title=\"获取数据 GET\"></a>获取数据 GET</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004741.png\" alt=\"image-20210504004741798\"></p>\n<h3 id=\"更新数据-PUT\"><a href=\"#更新数据-PUT\" class=\"headerlink\" title=\"更新数据 PUT\"></a>更新数据 PUT</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004901.png\" alt=\"image-20210504004901746\"></p>\n<h3 id=\"Post-update-推荐使用这种更新方式！\"><a href=\"#Post-update-推荐使用这种更新方式！\" class=\"headerlink\" title=\"Post _update , 推荐使用这种更新方式！\"></a>Post _update , 推荐使用这种更新方式！</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005345.png\"></p>\n<h3 id=\"简单地搜索！\"><a href=\"#简单地搜索！\" class=\"headerlink\" title=\"简单地搜索！\"></a>简单地搜索！</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET ouwen<span class=\"regexp\">/user/</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>简答的条件查询，可以根据默认的映射规则，产生基本的查询！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005803.png\" alt=\"image-20210504005803020\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005944.png\" alt=\"image-20210504005944771\"></p>\n<h3 id=\"复杂操作搜索-select-排序，分页，高亮，模糊查询，精准查询！\"><a href=\"#复杂操作搜索-select-排序，分页，高亮，模糊查询，精准查询！\" class=\"headerlink\" title=\"复杂操作搜索 select ( 排序，分页，高亮，模糊查询，精准查询！)\"></a>复杂操作搜索 select ( 排序，分页，高亮，模糊查询，精准查询！)</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010155.png\" alt=\"image-20210504010146616\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010602.png\" alt=\"image-20210504010602133\"></p>\n<p>输出结果，不想要那么多！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010722.png\" alt=\"image-20210504010722580\"> 我们之后使用 Java 操作 es ，所有的方法和对象就是这里面的 key！</p>\n<blockquote>\n<p>排序！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011018.png\" alt=\"image-20210504011018343\"></p>\n<blockquote>\n<p>分页查询！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011149.png\" alt=\"image-20210504011149220\"></p>\n<p>数据下标还是从 0 开始的，和学的所有数据结构是一样的！</p>\n<p><code>/search/&#123;current&#125;/&#123;pagesize&#125;</code></p>\n<blockquote>\n<p>布尔值查询</p>\n</blockquote>\n<p><strong>must （and）</strong>，所有的条件都要符合 where id = 1 and name = xxx</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011607.png\" alt=\"image-20210504011607517\"></p>\n<p><strong>should（or）</strong>，所有的条件都要符合 where id = 1 or name = xxx</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011736.png\" alt=\"image-20210504011736768\"></p>\n<p><strong>must_not （not）</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011831.png\" alt=\"image-20210504011831232\"></p>\n<p><strong>过滤器 filter</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012021.png\" alt=\"image-20210504012021112\"></p>\n<ul>\n<li>gt 大于</li>\n<li>gte 大于等于</li>\n<li>lt 小于</li>\n<li>lte 小于等于！</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012126.png\" alt=\"image-20210504012126745\"></p>\n<blockquote>\n<p>匹配多个条件！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012405.png\" alt=\"image-20210504012405631\"></p>\n<blockquote>\n<p>精确查询！</p>\n</blockquote>\n<p>term 查询是直接通过倒排索引指定的词条进程精确查找的！</p>\n<p><strong>关于分词：</strong></p>\n<ul>\n<li>term ，直接查询精确的</li>\n<li>match，会使用分词器解析！（先分析文档，然后在通过分析的文档进行查询！）</li>\n</ul>\n<p><strong>两个类型 <code>text</code> <code>keyword</code></strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012855.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012909.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504013020.webp\" alt=\"img\"></p>\n<blockquote>\n<p>多个值匹配精确查询</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014024.webp\" alt=\"img\"></p>\n<blockquote>\n<p>高亮查询！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014306.png\" alt=\"image-20210504014305845\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014541.png\" alt=\"image-20210504014541346\"></p>\n<h2 id=\"集成-SpringBoot\"><a href=\"#集成-SpringBoot\" class=\"headerlink\" title=\"集成 SpringBoot\"></a>集成 SpringBoot</h2><blockquote>\n<p>找官方文档！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131313.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131324.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131333.webp\" alt=\"img\"></p>\n<p>1、找到原生的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>7.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、找对象</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131416.webp\" alt=\"img\"></p>\n<p>3、分析这个类中的方法即可！</p>\n<blockquote>\n<p>配置基本的项目</p>\n</blockquote>\n<p>源码中提供对象！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504133033.webp\" alt=\"img\"></p>\n<p>虽然这里导入 3 个类，静态内部类，核心类就一个！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Elasticsearch rest client infrastructure configurations.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> Brian Clozel</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> Stephane Nicoll</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RestClientConfigurations</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestClientBuilderConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// RestClientBuilder</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestClientBuilder <span class=\"title function_\">elasticsearchRestClientBuilder</span><span class=\"params\">(RestClientProperties</span></span><br><span class=\"line\"><span class=\"params\">                                                         properties,</span></span><br><span class=\"line\"><span class=\"params\">                                                         ObjectProvider&lt;RestClientBuilderCustomizer&gt; builderCustomizers)</span> &#123;</span><br><span class=\"line\">            HttpHost[] hosts =</span><br><span class=\"line\">                properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::<span class=\"keyword\">new</span>);</span><br><span class=\"line\">            <span class=\"type\">RestClientBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> RestClient.builder(hosts);</span><br><span class=\"line\">            <span class=\"type\">PropertyMapper</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> PropertyMapper.get();</span><br><span class=\"line\">            map.from(properties::getUsername).whenHasText().to((username) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"type\">CredentialsProvider</span> <span class=\"variable\">credentialsProvider</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                    <span class=\"title class_\">BasicCredentialsProvider</span>();</span><br><span class=\"line\">                <span class=\"type\">Credentials</span> <span class=\"variable\">credentials</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                    <span class=\"title class_\">UsernamePasswordCredentials</span>(properties.getUsername(),</span><br><span class=\"line\">                                                properties.getPassword());</span><br><span class=\"line\">                credentialsProvider.setCredentials(AuthScope.ANY, credentials);</span><br><span class=\"line\">                builder.setHttpClientConfigCallback(</span><br><span class=\"line\">                    (httpClientBuilder) -&gt;</span><br><span class=\"line\">                    httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            builder.setRequestConfigCallback((requestConfigBuilder) -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                map.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMill</span><br><span class=\"line\">                                                                               is)</span><br><span class=\"line\">                    .to(requestConfigBuilder::setConnectTimeout);</span><br><span class=\"line\"></span><br><span class=\"line\">                map.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis)</span><br><span class=\"line\">                    .to(requestConfigBuilder::setSocketTimeout);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> requestConfigBuilder;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            builderCustomizers.orderedStream().forEach((customizer) -&gt;</span><br><span class=\"line\">                                                       customizer.customize(builder));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnClass(RestHighLevelClient.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestHighLevelClientConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// RestHighLevelClient 高级客户端，也是我们这里要讲，后面项目会用到的客户端</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestHighLevelClient <span class=\"title function_\">elasticsearchRestHighLevelClient</span><span class=\"params\">(RestClientBuilder</span></span><br><span class=\"line\"><span class=\"params\">                                                             restClientBuilder)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestHighLevelClient</span>(restClientBuilder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestClient <span class=\"title function_\">elasticsearchRestClient</span><span class=\"params\">(RestClientBuilder builder,</span></span><br><span class=\"line\"><span class=\"params\">                                           ObjectProvider&lt;RestHighLevelClient&gt; restHighLevelClient)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">RestHighLevelClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> restHighLevelClient.getIfUnique();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (client != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> client.getLowLevelClient();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestClientFallbackConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// RestClient 普通的客户端！</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestClient <span class=\"title function_\">elasticsearchRestClient</span><span class=\"params\">(RestClientBuilder builder)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>具体的 API 测试！</p>\n</blockquote>\n<ol>\n<li>创建索引</li>\n<li>判断索引是否存在</li>\n<li>删除索引</li>\n<li>创建文档</li>\n<li>crud 文档！</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONString;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.index.query.TermQueryBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.search.SearchHit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.search.fetch.subphase.FetchSourceContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JunjieEsApiApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(&quot;restHighLevelClient&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestHighLevelClient client;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试索引的创建 Request</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testCreateIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、创建索引对象</span></span><br><span class=\"line\">        <span class=\"type\">CreateIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CreateIndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2、客户端执行请求 IndicesClient 请求后获得响应结果</span></span><br><span class=\"line\">        <span class=\"type\">CreateIndexResponse</span> <span class=\"variable\">createIndexResponse</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(createIndexResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试获取索引 判断其是否存在</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testExistIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">GetIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetIndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">exists</span> <span class=\"operator\">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(exists);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试删除索引</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">DeleteIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteIndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AcknowledgedResponse</span> <span class=\"variable\">delete</span> <span class=\"operator\">=</span> client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(delete.isAcknowledged());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试添加文档</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testAddDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;欧文&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建请求</span></span><br><span class=\"line\">        <span class=\"type\">IndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//规则 PUT /ouwen_index/_doc/1</span></span><br><span class=\"line\">        request.id(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        request.timeout(TimeValue.timeValueSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将我们的数据放入请求 json</span></span><br><span class=\"line\">        request.source(JSONUtil.toJsonStr(user), XContentType.JSON);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端发送请求</span></span><br><span class=\"line\">        <span class=\"type\">IndexResponse</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> client.index(request, RequestOptions.DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(index.toString());</span><br><span class=\"line\">        System.out.println(index.status()); <span class=\"comment\">//对应命令返回的状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取文档，判断是否存在</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testIsExists</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">GetRequest</span> <span class=\"variable\">getRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//不获取返回的 _source 的上下文 效率更高</span></span><br><span class=\"line\">        getRequest.fetchSourceContext(<span class=\"keyword\">new</span> <span class=\"title class_\">FetchSourceContext</span>(<span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">exists</span> <span class=\"operator\">=</span> client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(exists);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获得文档的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testGetDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">GetRequest</span> <span class=\"variable\">getRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">GetResponse</span> <span class=\"variable\">getResponse</span> <span class=\"operator\">=</span> client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        <span class=\"comment\">//打印文档的内容</span></span><br><span class=\"line\">        System.out.println(getResponse.getSourceAsString());</span><br><span class=\"line\">        <span class=\"comment\">//返回的全部内容跟命令是一样的</span></span><br><span class=\"line\">        System.out.println(getResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新文档的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testUpdateDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">UpdateRequest</span> <span class=\"variable\">updateRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        updateRequest.timeout(<span class=\"string\">&quot;1s&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen666&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        updateRequest.doc(JSONUtil.toJsonStr(user), XContentType.JSON);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">UpdateResponse</span> <span class=\"variable\">updateResponse</span> <span class=\"operator\">=</span> client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(updateResponse.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除文档的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">DeleteRequest</span> <span class=\"variable\">deleteRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        deleteRequest.timeout(<span class=\"string\">&quot;1s&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">DeleteResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(response.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//批量添加数据</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testBulkRequest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">BulkRequest</span> <span class=\"variable\">bulkRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BulkRequest</span>();</span><br><span class=\"line\">        bulkRequest.timeout(<span class=\"string\">&quot;60s&quot;</span>);</span><br><span class=\"line\">        List&lt;User&gt; users = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;User&gt;();</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen1&quot;</span>, <span class=\"number\">63</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen2&quot;</span>, <span class=\"number\">53</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen3&quot;</span>, <span class=\"number\">43</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;junjie1&quot;</span>, <span class=\"number\">33</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;junjie2&quot;</span>, <span class=\"number\">23</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;junjie3&quot;</span>, <span class=\"number\">13</span>));</span><br><span class=\"line\">        <span class=\"comment\">//处理批量请求</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class=\"line\">            bulkRequest.add(<span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>)</span><br><span class=\"line\">                    .id(<span class=\"string\">&quot;&quot;</span> + (i + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .source(JSONUtil.toJsonStr(users.get(i)), XContentType.JSON));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">BulkResponse</span> <span class=\"variable\">responses</span> <span class=\"operator\">=</span> client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(responses.hasFailures()); <span class=\"comment\">//是否失败 false代表成功</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询</span></span><br><span class=\"line\">    <span class=\"comment\">// SearchRequest 搜索请求</span></span><br><span class=\"line\">    <span class=\"comment\">// SearchSourceBuilder 条件构造</span></span><br><span class=\"line\">    <span class=\"comment\">// HighlightBuilder 构建高亮</span></span><br><span class=\"line\">    <span class=\"comment\">// TermQueryBuilder 精确查询</span></span><br><span class=\"line\">    <span class=\"comment\">// MatchAllQueryBuilder</span></span><br><span class=\"line\">    <span class=\"comment\">// xxx QueryBuilder 对应我们刚才看到的命令！</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testSearch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">SearchRequest</span> <span class=\"variable\">searchRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//构建搜索条件</span></span><br><span class=\"line\">        <span class=\"type\">SearchSourceBuilder</span> <span class=\"variable\">sourceBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchSourceBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询条件，我们可以使用 QueryBuilders 工具来实现</span></span><br><span class=\"line\">        <span class=\"comment\">// QueryBuilders.termQuery 精确</span></span><br><span class=\"line\">        <span class=\"comment\">// QueryBuilders.matchAllQuery() 匹配所有</span></span><br><span class=\"line\">        <span class=\"type\">TermQueryBuilder</span> <span class=\"variable\">termQuery</span> <span class=\"operator\">=</span> QueryBuilders.termQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;ouwen1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        sourceBuilder.query(termQuery);</span><br><span class=\"line\">        sourceBuilder.timeout(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeValue</span>(<span class=\"number\">60</span>, TimeUnit.SECONDS));</span><br><span class=\"line\">        searchRequest.source(sourceBuilder);</span><br><span class=\"line\">        <span class=\"type\">SearchResponse</span> <span class=\"variable\">search</span> <span class=\"operator\">=</span> client.search(searchRequest,RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(JSONUtil.toJsonStr(search.getHits()));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==========================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SearchHit hit : search.getHits()) &#123;</span><br><span class=\"line\">            System.out.println(hit.getSourceAsMap());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<h2 id=\"ElasticSearch-概述\"><a href=\"#ElasticSearch-概述\" class=\"headerlink\" title=\"ElasticSearch 概述\"></a>ElasticSearch 概述</h2><p>Elaticsearch，简称为 es， es 是一个开源的<strong>高扩展</strong>的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储、检索数据</strong>；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别（大数据时代）的数据。es 也使用 Java 开发并使用 Lucene 作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong>来隐藏 Lucene 的复杂性，从而让全文搜索变得简单。</p>\n<p>据国际权威的数据库产品评测机构 DB Engines 的统计，在 2016 年 1 月，ElasticSearch 已超过 Solr 等，<strong>成为排名第一的搜索引擎类应用。</strong></p>\n<h2 id=\"ES-和-solr-的差别\"><a href=\"#ES-和-solr-的差别\" class=\"headerlink\" title=\"ES 和 solr 的差别\"></a>ES 和 solr 的差别</h2><h3 id=\"Elasticsearch-简介\"><a href=\"#Elasticsearch-简介\" class=\"headerlink\" title=\"Elasticsearch 简介\"></a>Elasticsearch 简介</h3><p>Elasticsearch 是一个实时分布式搜索和分析引擎。它让你以前所未有的速度处理大数据成为可能。</p>\n<p>它用于<strong>全文搜索、结构化搜索、分析</strong>以及将这三者混合使用：</p>\n<p>维基百科使用 Elasticsearch 提供全文搜索并高亮关键字，以及输入实时搜索(search-asyou-type)和搜索纠错(did-you-mean)等搜索建议功能。</p>\n<p>英国卫报使用 Elasticsearch 结合用户日志和社交网络数据提供给他们的编辑以实时的反馈，以便及时了解公众对新发表的文章的回应。</p>\n<p>StackOverflow 结合全文搜索与地理位置查询，以及 more-like-this 功能来找到相关的问题和答案。</p>\n<p>Github 使用 Elasticsearch 检索 1300 亿行的代码。</p>\n<p>但是 Elasticsearch 不仅用于大型企业，它还让像 DataDog 以及 Klout 这样的创业公司将最初的想法变成可扩展的解决方案。</p>\n<p>Elasticsearch 可以在你的笔记本上运行，也可以在数以百计的服务器上处理 PB 级别的数据 。</p>\n<p>Elasticsearch 是一个基于 Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene 可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</p>\n<p>但是，Lucene 只是一个库。想要使用它，你必须使用 Java 来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene 非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p>\n<p>Elasticsearch 也使用 Java 开发并使用 Lucene 作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的<strong>RESTful API</strong>来隐藏 Lucene 的复杂性，从而让全文搜索变得简单。</p>\n<h3 id=\"Solr-简介\"><a href=\"#Solr-简介\" class=\"headerlink\" title=\"Solr 简介\"></a>Solr 简介</h3><p>Solr 是 Apache 下的一个顶级开源项目，采用 Java 开发，它是基于 Lucene 的全文搜索服务器。Solr 提供了比 Lucene 更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化</p>\n<p>Solr 可以独立运行，运行在 Jetty、Tomcat 等这些 Servlet 容器中，Solr 索引的实现方法很简单，<strong>用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr 根据 xml 文档添加、删除、更新索引</strong>。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回 Xml、json 等格式的查询结果进行解析，组织页面布局。Solr 不提供构建 UI 的功能，Solr 提供了一个管理界面，通过管理界面可以查询 Solr 的配置和运行情况。</p>\n<p>solr 是基于 lucene 开发企业级搜索服务器，实际上就是封装了 lucene。</p>\n<p>Solr 是一个独立的企业级搜索应用服务器，它对外提供类似于==Web-service 的 API 接口==。用户可以通过 http 请求，向搜索引擎服务器提交一定格式的文件，生成索引；也可以通过提出查找请求，并得到返回结果。</p>\n<h3 id=\"Lucene-简介\"><a href=\"#Lucene-简介\" class=\"headerlink\" title=\"Lucene 简介\"></a>Lucene 简介</h3><p>Lucene 是 apache 软件基金会 4 jakarta 项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。Lucene 的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene 是一套用于全文检索和搜寻的开源程式库，由 Apache 软件基金会支持和提供。Lucene 提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。<strong>在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库</strong>。人们经常提到信息检索程序库，虽然与搜索引擎有关，但不应该将信息检索程序库与搜索引擎相混淆。</p>\n<p>Lucene 是一个全文检索引擎的架构。那什么是全文搜索引擎？</p>\n<p>全文搜索引擎是名副其实的搜索引擎，国外具代表性的有 Google、Fast/AllTheWeb、AltaVista、Inktomi、Teoma、WiseNut 等，国内著名的有百度（Baidu）。它们都是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户，因此他们是真正的搜索引擎。</p>\n<p>从搜索结果来源的角度，全文搜索引擎又可细分为两种，一种是拥有自己的检索程序（Indexer），俗称“蜘蛛”（Spider）程序或“机器人”（Robot）程序，并自建网页数据库，搜索结果直接从自身的数据库中调用，如上面提到的 7 家引擎；另一种则是租用其他引擎的数据库，并按自定的格式排列搜索结果，如 Lycos 引擎。</p>\n<h3 id=\"Elasticsearch-和-Solr-比较\"><a href=\"#Elasticsearch-和-Solr-比较\" class=\"headerlink\" title=\"Elasticsearch 和 Solr 比较\"></a>Elasticsearch 和 Solr 比较</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223554.png\" alt=\"image-20210503223554497\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223607.png\" alt=\"image-20210503223607286\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223616.png\" alt=\"image-20210503223616904\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503223627.png\" alt=\"image-20210503223627835\"></p>\n<h3 id=\"ElasticSearch-vs-Solr-总结\"><a href=\"#ElasticSearch-vs-Solr-总结\" class=\"headerlink\" title=\"ElasticSearch vs Solr 总结\"></a>ElasticSearch vs Solr 总结</h3><ol>\n<li>es 基本是开箱即用（解压就可以用 ! ），非常简单。Solr 安装略微复杂一丢丢！</li>\n<li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能。</li>\n<li>Solr 支持更多格式的数据，比如 JSON、XML、CSV，而 Elasticsearch 仅支持 json 文件格式。</li>\n<li>Solr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要 kibana 友好支撑~!</li>\n<li>Solr 查询快，但更新索引时慢（即插入删除慢），用于电商等查询多的应用；<ul>\n<li>ES 建立索引快（即查询慢），<strong>即实时性查询快</strong>，用于 facebook 新浪等搜索。</li>\n<li>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用</li>\n</ul>\n</li>\n<li>Solr 比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而 Elasticsearch 相对开发维护者较少，更新太快，学习使用成本较高。（趋势！）</li>\n</ol>\n<h2 id=\"ElasticSearch-安装\"><a href=\"#ElasticSearch-安装\" class=\"headerlink\" title=\"ElasticSearch 安装\"></a>ElasticSearch 安装</h2><p>声明：JDK1.8 ，最低要求！ ElasticSearch 客户端，界面工具！<br>Java 开发，ElasticSearch 的版本和我们之后对应的 Java 的核心 jar 包！ 版本对应！JDK 环境是正常！</p>\n<blockquote>\n<p>下载</p>\n</blockquote>\n<p>官网：<a href=\"https://www.elastic.co/\">https://www.elastic.co/</a></p>\n<p>下载地址：<a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></p>\n<blockquote>\n<p>window 下安装！</p>\n</blockquote>\n<h3 id=\"解压就可以使用了！\"><a href=\"#解压就可以使用了！\" class=\"headerlink\" title=\"解压就可以使用了！\"></a>解压就可以使用了！</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503224753.png\" alt=\"image-20210503224753729\"></p>\n<h3 id=\"熟悉目录！\"><a href=\"#熟悉目录！\" class=\"headerlink\" title=\"熟悉目录！\"></a>熟悉目录！</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin 启动文件</span><br><span class=\"line\">config 配置文件</span><br><span class=\"line\">    log4j2 日志配置文件</span><br><span class=\"line\">    jvm.options java 虚拟机相关的配置</span><br><span class=\"line\">    elasticsearch.yml  elasticsearch 的配置文件！ 默认 <span class=\"number\">9200</span> 端口！ 跨域！</span><br><span class=\"line\">lib   相关jar包</span><br><span class=\"line\">logs   日志！</span><br><span class=\"line\">modules 功能模块</span><br><span class=\"line\">plugins 插件！</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动，访问-9200\"><a href=\"#启动，访问-9200\" class=\"headerlink\" title=\"启动，访问 9200\"></a>启动，访问 9200</h3><p>运行<code>bin/elasticsearch.bat</code>，启动！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503225150.png\" alt=\"image-20210503225150680\"></p>\n<h3 id=\"访问测试！\"><a href=\"#访问测试！\" class=\"headerlink\" title=\"访问测试！\"></a>访问测试！</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503225236.png\" alt=\"image-20210503225235923\"></p>\n<blockquote>\n<p>安装可视化界面插件 es head 的插件</p>\n</blockquote>\n<p>需要 node.js 环境</p>\n<ol>\n<li><p>下载地址：<a href=\"https://links.jianshu.com/go?to=https://github.com/mobz/elasticsearch-head/\">https://github.com/mobz/elasticsearch-head/</a></p>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure></li>\n<li><p>连接测试发现，存在跨域问题：配置 es</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">http.cors.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">http.cors.allow-origin:</span> <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>重启 es 服务器，然后再次连接</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503230107.png\" alt=\"image-20210503230107069\"></p>\n</li>\n</ol>\n<p>初学，就把 es 当做一个数据库！ （可以建立索引（库），文档（库中的数据！））</p>\n<p><strong>这个 head 我们就把它当做数据展示工具！我们后面所有的查询，去 Kibana 进行！</strong></p>\n<blockquote>\n<p>了解 ELK</p>\n</blockquote>\n<p>ELK 是 Elasticsearch、Logstash、Kibana 三大开源框架首字母大写简称。市面上也被成为 ElasticStack。其中 Elasticsearch 是一个基于 Lucene、分布式、通过 Restful 方式进行交互的近实时搜索平台框架。像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用 Elasticsearch 作为底层支持框架，可见 Elasticsearch 提供的搜索能力确实强大,市面上很多时候我们简称 Elasticsearch 为 es。Logstash 是 ELK 的中央数据流引擎，用于从不同目标（文件/数据存储/MQ）收集的不同格式数据，经过过滤后支持输出到不同目的地（文件/MQ/redis/elasticsearch/kafka 等）。Kibana 可以将 elasticsearch 的数据通过友好<br>的页面展示出来，提供实时分析的功能。</p>\n<p>市面上很多开发只要提到 ELK 能够一致说出它是一个日志分析架构技术栈总称，但实际上 ELK 不仅仅适用于日志分析，它还可以支持其它任何数据分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503230537.webp\" alt=\"img\"></p>\n<blockquote>\n<p>安装 Kibana</p>\n</blockquote>\n<p>Kibana 是一个针对 Elasticsearch 的开源分析及可视化平台，用来搜索、查看交互存储在 Elasticsearch 索引中的数据。使用 Kibana，可以通过各种图表进行高级数据分析及展示。Kibana 让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示 Elasticsearch 查询动态。设置 Kibana 非常简单。无需编码或者额外的基础架构，几分钟内就可以完成 Kibana 安装并启动 Elasticsearch 索引监测。</p>\n<p>官网：<a href=\"https://www.elastic.co/cn/kibana\">https://www.elastic.co/cn/kibana</a></p>\n<p>Kibana 版本要和 Es 一致！</p>\n<blockquote>\n<p>启动测试！</p>\n</blockquote>\n<p>1、解压后的目录</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233229.png\" alt=\"image-20210503233229181\" style=\"zoom:67%;\" />\n\n<p>2、启动<code>kibana.bat</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233731.png\" alt=\"image-20210503233731775\"></p>\n<p>3、访问测试</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233752.png\" alt=\"image-20210503233752142\"></p>\n<p>4、开发工具！ （Post、curl、head、谷歌浏览器插件测试！）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503233835.png\" alt=\"image-20210503233835622\"></p>\n<p>5、汉化！自己修改 kibana 配置即可！ zh-CN！</p>\n<p>kibaba.yml 文件末尾添加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">i18n.locale:</span> <span class=\"string\">&quot;zn-CH&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503234155.png\" alt=\"image-20210503234155128\"></p>\n<h2 id=\"ES-核心概念\"><a href=\"#ES-核心概念\" class=\"headerlink\" title=\"ES 核心概念\"></a>ES 核心概念</h2><ol>\n<li>索引</li>\n<li>字段类型（mapping）</li>\n<li>文档（documents）</li>\n</ol>\n<blockquote>\n<p>概述</p>\n</blockquote>\n<p>在前面的学习中，我们已经掌握了 es 是什么，同时也把 es 的服务已经安装启动，那么 es 是如何去存储数据，数据结构是什么，又是如何实现搜索的呢？我们先来聊聊 ElasticSearch 的相关概念吧！</p>\n<p><strong>集群，节点，索引，类型，文档，分片，映射是什么？</strong></p>\n<blockquote>\n<p>elasticsearch 是面向文档，关系行数据库 和 elasticsearch 客观的对比！一切都是 JSON！</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>Relational DB</strong></th>\n<th align=\"center\"><strong>Elasticsearch</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">数据库(database)</td>\n<td align=\"center\">索引(indices)</td>\n</tr>\n<tr>\n<td align=\"center\">表(tables)</td>\n<td align=\"center\">types</td>\n</tr>\n<tr>\n<td align=\"center\">行(rows)</td>\n<td align=\"center\">documents</td>\n</tr>\n<tr>\n<td align=\"center\">字段(columns)</td>\n<td align=\"center\">fields</td>\n</tr>\n</tbody></table>\n<p>elasticsearch(集群)中可以包含多个索引(数据库)，每个索引中可以包含多个类型(表)，每个类型下又包含多 个文档(行)，每个文档中又包含多个字段(列)。</p>\n<p><strong>物理设计：</strong></p>\n<p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移</p>\n<p>一个人就是一个集群！默认的集群名称就是 elaticsearh</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503234530.webp\" alt=\"img\"></p>\n<p><strong>逻辑设计：</strong></p>\n<p>一个索引类型中，包含多个文档，比如说文档 1，文档 2。 当我们索引一篇文档时，可以通过这样的一各顺序找到 它: 索引 ▷ 类型 ▷ 文档 ID ，通过这个组合我们就能索引到某个具体的文档。 注意:ID 不必是整数，实际上它是个字符串。</p>\n<blockquote>\n<p>文档</p>\n</blockquote>\n<p>就是我们的一条条数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user</span><br><span class=\"line\">1  zhangsan  18</span><br><span class=\"line\">2  ouwen  3</span><br></pre></td></tr></table></figure>\n\n<p>之前说 elasticsearch 是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch 中，文档有几个 重要属性 :</p>\n<ul>\n<li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含 key:value！</li>\n<li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！ {就是一个 json 对象！fastjson 进行自动转换！}</li>\n<li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在 elasticsearch 中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</li>\n</ul>\n<p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符 串也可以是整形。因为 elasticsearch 会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在 elasticsearch 中，类型有时候也称为映射类型。</p>\n<blockquote>\n<p>类型</p>\n</blockquote>\n<p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射，比如 name 映 射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么 elasticsearch 是怎么做的呢?elasticsearch 会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch 就开始猜，如果这个值是 18，那么 elasticsearch 会认为它是整形。 但是 elasticsearch 也可能猜不对， 所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别 整什么幺蛾子。</p>\n<blockquote>\n<p>索引</p>\n</blockquote>\n<p>就是数据库！</p>\n<p>索引是映射类型的容器，elasticsearch 中的索引是一个非常大的文档集合。索引存储了映射类型的字段和其他设置。 然后它们被存储到了各个分片上了。 我们来研究下分片是如何工作的。</p>\n<p>物理设计 ：节点和分片 如何工作</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235339.webp\" alt=\"img\"></p>\n<p>一个集群至少有一个节点，而一个节点就是一个 elasricsearch 进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个 5 个分片 ( primary shard ,又称主分片 ) 构成的，每一个主分片会有一个副本 ( replica shard ,又称复制分片 )</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235352.webp\" alt=\"img\"></p>\n<p>上图是一个有 3 个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉 了，数据也不至于丢失。 实际上，一个分片是一个 Lucene 索引，一个包含倒排索引的文件目录，<strong>倒排索引</strong>的结构使 得 elasticsearch 在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。 不过，等等，倒排索引是什 么鬼?</p>\n<blockquote>\n<p>倒排索引</p>\n</blockquote>\n<p>elasticsearch 使用的是一种称为倒排索引的结构，采用 Lucene 倒排索作为底层。这种结构适用于快速的全文搜索， 一个索引由文档中所有不重复的列表构成，对于每一个词，都有一个包含它的文档列表。 例如，现在有两个文档， 每个文档包含如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Study every day, good good up to forever  <span class=\"comment\"># 文档1包含的内容</span></span><br><span class=\"line\">To forever, study every day, good good up <span class=\"comment\"># 文档2包含的内容</span></span><br></pre></td></tr></table></figure>\n\n<p>为了创建倒排索引，我们首先要将每个文档拆分成独立的词(或称为词条或者 tokens)，然后创建一个包含所有不重 复的词条的排序列表，然后列出每个词条出现在哪个文档 :</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235436.png\" alt=\"image-20210503235436309\" style=\"zoom:50%;\" />\n\n<p>现在，我们试图搜索 to forever，只需要查看包含每个词条的文档 score</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235452.png\" alt=\"image-20210503235452613\" style=\"zoom:50%;\" />\n\n<p>两个文档都匹配，但是第一个文档比第二个匹配程度更高。如果没有别的条件，现在，这两个包含关键字的文档都将返回。</p>\n<p>再来看一个示例，比如我们通过博客标签来搜索博客文章。那么倒排索引列表就是这样的一个结构 :</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235510.webp\" alt=\"img\"></p>\n<p>如果要搜索含有 python 标签的文章，那相对于查找所有原始数据而言，查找倒排索引后的数据将会快的多。只需要 查看标签这一栏，然后获取相关的文章 ID 即可。完全过滤掉无关的所有数据，提高效率！</p>\n<p>elasticsearch 的索引和 Lucene 的索引对比</p>\n<p>在 elasticsearch 中， 索引 （库）这个词被频繁使用，这就是术语的使用。 在 elasticsearch 中，索引被分为多个分片，每份 分片是一个 Lucene 的索引。所以一个 elasticsearch 索引是由多个 Lucene 索引组成的。别问为什么，谁让 elasticsearch 使用 Lucene 作为底层呢! 如无特指，说起索引都是指 elasticsearch 的索引。</p>\n<h2 id=\"IK-分词器插件\"><a href=\"#IK-分词器插件\" class=\"headerlink\" title=\"IK 分词器插件\"></a>IK 分词器插件</h2><blockquote>\n<p>什么是 IK 分词器？</p>\n</blockquote>\n<p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个词，比如 “我爱狂神” 会被分为”我”,”爱”,”狂”,”神”，这显然是不符合要求的，所以我们需要安装中文分词器 ik 来解决这个问题。</p>\n<p>如果要使用中文，建议使用 ik 分词器！</p>\n<p>IK 提供了两个分词算法：ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word 为最细粒度划分！</p>\n<blockquote>\n<p>安装</p>\n</blockquote>\n<p>1、<a href=\"https://github.com/medcl/elasticsearch-analysis-ik\">https://github.com/medcl/elasticsearch-analysis-ik</a></p>\n<p>2、下载完毕后，放入到我们的 elasticsearch 插件即可</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503235943.png\" alt=\"image-20210503235943039\"></p>\n<p>3、重启观察 ES，可以看到 ik 分词器被加载了！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000047.png\" alt=\"image-20210504000047514\"></p>\n<p>4、elasticsearch-plugin 可以通过这个命令来查看加载进来的插件</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000351.png\" alt=\"image-20210504000146656\"></p>\n<p>5、使用 kibana 进行测试</p>\n<blockquote>\n<p>查看不同的分词效果</p>\n</blockquote>\n<p>ik_smart 为最少切分</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504000943.png\" alt=\"image-20210504000856743\"></p>\n<p>ik_max_word 为最细粒度划分，穷尽词库的可能！字典！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001030.png\" alt=\"image-20210504001030482\"></p>\n<blockquote>\n<p>我们输入 超级喜欢狂神说 Java</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001209.webp\" alt=\"img\"></p>\n<p>发现问题：狂神说被拆开了！</p>\n<p>这种自己需要的词，需要自己加到我们的分词器的字典中！</p>\n<blockquote>\n<p>ik 分词器增加自己的配置！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001411.png\" alt=\"image-20210504001411652\"></p>\n<p>重启 es，看细节！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001513.png\" alt=\"image-20210504001513405\"></p>\n<p>再次测试一下狂神说，看下效果！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504001619.png\" alt=\"image-20210504001619667\"></p>\n<h2 id=\"Rest-风格说明\"><a href=\"#Rest-风格说明\" class=\"headerlink\" title=\"Rest 风格说明\"></a>Rest 风格说明</h2><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>\n<p>基本 Rest 命令说明：</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>url 地址</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PUT</td>\n<td>localhost:9200/索引名称/类型名称/文档 id</td>\n<td>创建文档（指定文档 id）</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>localhost:9200/索引名称/类型名称</td>\n<td>创建文档（随机文档 id）</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>localhost:9200/索引名称/类型名称/文档 id/_update</td>\n<td>修改文档</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>localhost:9200/索引名称/类型名称/文档 id</td>\n<td>删除文档</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>localhost:9200/索引名称/类型名称/文档 id</td>\n<td>查询文档通过文档 id</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>localhost:9200/索引名称/类型名称/_search</td>\n<td>查询所有数据</td>\n</tr>\n</tbody></table>\n<h2 id=\"关于索引的基本操作\"><a href=\"#关于索引的基本操作\" class=\"headerlink\" title=\"关于索引的基本操作\"></a>关于索引的基本操作</h2><h3 id=\"创建一个索引！\"><a href=\"#创建一个索引！\" class=\"headerlink\" title=\"创建一个索引！\"></a>创建一个索引！</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /索引名/~类型名~/文档id</span><br><span class=\"line\">&#123;请求体&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002138.png\" alt=\"image-20210504002137968\"></p>\n<p>完成了自动增加了索引！数据也成功的添加了，这就是我说大家在初期可以把它当做数据库学习的原因！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002239.png\" alt=\"image-20210504002239404\"></p>\n<p>那么 name 这个字段用不用指定类型呢。毕竟我们关系型数据库 是需要指定类型的啊 !</p>\n<ul>\n<li>字符串类型<br>text 、 keyword</li>\n<li>数值类型<br>long, integer, short, byte, double, float, half_float, scaled_float</li>\n<li>日期类型<br>date</li>\n<li>布尔值类型<br>boolean</li>\n<li>二进制类型<br>binary</li>\n<li>等等…..</li>\n</ul>\n<h3 id=\"指定字段的类型\"><a href=\"#指定字段的类型\" class=\"headerlink\" title=\"指定字段的类型\"></a>指定字段的类型</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002816.png\" alt=\"image-20210504002816478\"></p>\n<p>获得这个规则！ 可以通过 GET 请求获取具体的信息！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504002902.png\" alt=\"image-20210504002902783\"></p>\n<h3 id=\"查看默认的信息\"><a href=\"#查看默认的信息\" class=\"headerlink\" title=\"查看默认的信息\"></a>查看默认的信息</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003207.png\" alt=\"image-20210504003207460\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003219.png\" alt=\"image-20210504003219494\"></p>\n<p>如果自己的文档字段没有指定，那么 es 就会给我们默认配置字段类型！</p>\n<p><strong>扩展</strong>： 通过命令 elasticsearch 索引情况！ 通过<code>GET _cat/</code> 可以获得 es 的当前的很多信息！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003418.png\" alt=\"image-20210504003418475\"></p>\n<blockquote>\n<p>修改 提交还是使用 PUT 即可！ 然后覆盖！最新办法！</p>\n</blockquote>\n<p>曾经！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003608.png\" alt=\"image-20210504003608862\"></p>\n<p>现在的方法！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003757.png\" alt=\"image-20210504003757886\"></p>\n<blockquote>\n<p>删除索引！</p>\n</blockquote>\n<p>通过 DELETE 命令实现删除、 根据你的请求来判断是删除索引还是删除文档记录！</p>\n<p>使用 RESTFUL 风格是我们 ES 推荐大家使用的！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504003924.png\" alt=\"image-20210504003924263\"></p>\n<h2 id=\"关于文档的基本操作（重点）\"><a href=\"#关于文档的基本操作（重点）\" class=\"headerlink\" title=\"关于文档的基本操作（重点）\"></a>关于文档的基本操作（重点）</h2><blockquote>\n<p>基本操作</p>\n</blockquote>\n<h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /ouwen/user/<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;小红&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">22</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我是一个美女&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;睡觉&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;靓女&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;吃饭&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004712.png\" alt=\"image-20210504004712396\"></p>\n<h3 id=\"获取数据-GET\"><a href=\"#获取数据-GET\" class=\"headerlink\" title=\"获取数据 GET\"></a>获取数据 GET</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004741.png\" alt=\"image-20210504004741798\"></p>\n<h3 id=\"更新数据-PUT\"><a href=\"#更新数据-PUT\" class=\"headerlink\" title=\"更新数据 PUT\"></a>更新数据 PUT</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504004901.png\" alt=\"image-20210504004901746\"></p>\n<h3 id=\"Post-update-推荐使用这种更新方式！\"><a href=\"#Post-update-推荐使用这种更新方式！\" class=\"headerlink\" title=\"Post _update , 推荐使用这种更新方式！\"></a>Post _update , 推荐使用这种更新方式！</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005345.png\"></p>\n<h3 id=\"简单地搜索！\"><a href=\"#简单地搜索！\" class=\"headerlink\" title=\"简单地搜索！\"></a>简单地搜索！</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET ouwen<span class=\"regexp\">/user/</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>简答的条件查询，可以根据默认的映射规则，产生基本的查询！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005803.png\" alt=\"image-20210504005803020\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504005944.png\" alt=\"image-20210504005944771\"></p>\n<h3 id=\"复杂操作搜索-select-排序，分页，高亮，模糊查询，精准查询！\"><a href=\"#复杂操作搜索-select-排序，分页，高亮，模糊查询，精准查询！\" class=\"headerlink\" title=\"复杂操作搜索 select ( 排序，分页，高亮，模糊查询，精准查询！)\"></a>复杂操作搜索 select ( 排序，分页，高亮，模糊查询，精准查询！)</h3><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010155.png\" alt=\"image-20210504010146616\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010602.png\" alt=\"image-20210504010602133\"></p>\n<p>输出结果，不想要那么多！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504010722.png\" alt=\"image-20210504010722580\"> 我们之后使用 Java 操作 es ，所有的方法和对象就是这里面的 key！</p>\n<blockquote>\n<p>排序！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011018.png\" alt=\"image-20210504011018343\"></p>\n<blockquote>\n<p>分页查询！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011149.png\" alt=\"image-20210504011149220\"></p>\n<p>数据下标还是从 0 开始的，和学的所有数据结构是一样的！</p>\n<p><code>/search/&#123;current&#125;/&#123;pagesize&#125;</code></p>\n<blockquote>\n<p>布尔值查询</p>\n</blockquote>\n<p><strong>must （and）</strong>，所有的条件都要符合 where id = 1 and name = xxx</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011607.png\" alt=\"image-20210504011607517\"></p>\n<p><strong>should（or）</strong>，所有的条件都要符合 where id = 1 or name = xxx</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011736.png\" alt=\"image-20210504011736768\"></p>\n<p><strong>must_not （not）</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504011831.png\" alt=\"image-20210504011831232\"></p>\n<p><strong>过滤器 filter</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012021.png\" alt=\"image-20210504012021112\"></p>\n<ul>\n<li>gt 大于</li>\n<li>gte 大于等于</li>\n<li>lt 小于</li>\n<li>lte 小于等于！</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012126.png\" alt=\"image-20210504012126745\"></p>\n<blockquote>\n<p>匹配多个条件！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012405.png\" alt=\"image-20210504012405631\"></p>\n<blockquote>\n<p>精确查询！</p>\n</blockquote>\n<p>term 查询是直接通过倒排索引指定的词条进程精确查找的！</p>\n<p><strong>关于分词：</strong></p>\n<ul>\n<li>term ，直接查询精确的</li>\n<li>match，会使用分词器解析！（先分析文档，然后在通过分析的文档进行查询！）</li>\n</ul>\n<p><strong>两个类型 <code>text</code> <code>keyword</code></strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012855.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504012909.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504013020.webp\" alt=\"img\"></p>\n<blockquote>\n<p>多个值匹配精确查询</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014024.webp\" alt=\"img\"></p>\n<blockquote>\n<p>高亮查询！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014306.png\" alt=\"image-20210504014305845\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504014541.png\" alt=\"image-20210504014541346\"></p>\n<h2 id=\"集成-SpringBoot\"><a href=\"#集成-SpringBoot\" class=\"headerlink\" title=\"集成 SpringBoot\"></a>集成 SpringBoot</h2><blockquote>\n<p>找官方文档！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131313.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131324.webp\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131333.webp\" alt=\"img\"></p>\n<p>1、找到原生的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.elasticsearch.client<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>7.6.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、找对象</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504131416.webp\" alt=\"img\"></p>\n<p>3、分析这个类中的方法即可！</p>\n<blockquote>\n<p>配置基本的项目</p>\n</blockquote>\n<p>源码中提供对象！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210504133033.webp\" alt=\"img\"></p>\n<p>虽然这里导入 3 个类，静态内部类，核心类就一个！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Elasticsearch rest client infrastructure configurations.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> Brian Clozel</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> Stephane Nicoll</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RestClientConfigurations</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestClientBuilderConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// RestClientBuilder</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestClientBuilder <span class=\"title function_\">elasticsearchRestClientBuilder</span><span class=\"params\">(RestClientProperties</span></span><br><span class=\"line\"><span class=\"params\">                                                         properties,</span></span><br><span class=\"line\"><span class=\"params\">                                                         ObjectProvider&lt;RestClientBuilderCustomizer&gt; builderCustomizers)</span> &#123;</span><br><span class=\"line\">            HttpHost[] hosts =</span><br><span class=\"line\">                properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::<span class=\"keyword\">new</span>);</span><br><span class=\"line\">            <span class=\"type\">RestClientBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> RestClient.builder(hosts);</span><br><span class=\"line\">            <span class=\"type\">PropertyMapper</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> PropertyMapper.get();</span><br><span class=\"line\">            map.from(properties::getUsername).whenHasText().to((username) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"type\">CredentialsProvider</span> <span class=\"variable\">credentialsProvider</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                    <span class=\"title class_\">BasicCredentialsProvider</span>();</span><br><span class=\"line\">                <span class=\"type\">Credentials</span> <span class=\"variable\">credentials</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                    <span class=\"title class_\">UsernamePasswordCredentials</span>(properties.getUsername(),</span><br><span class=\"line\">                                                properties.getPassword());</span><br><span class=\"line\">                credentialsProvider.setCredentials(AuthScope.ANY, credentials);</span><br><span class=\"line\">                builder.setHttpClientConfigCallback(</span><br><span class=\"line\">                    (httpClientBuilder) -&gt;</span><br><span class=\"line\">                    httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            builder.setRequestConfigCallback((requestConfigBuilder) -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                map.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMill</span><br><span class=\"line\">                                                                               is)</span><br><span class=\"line\">                    .to(requestConfigBuilder::setConnectTimeout);</span><br><span class=\"line\"></span><br><span class=\"line\">                map.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis)</span><br><span class=\"line\">                    .to(requestConfigBuilder::setSocketTimeout);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> requestConfigBuilder;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            builderCustomizers.orderedStream().forEach((customizer) -&gt;</span><br><span class=\"line\">                                                       customizer.customize(builder));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnClass(RestHighLevelClient.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestHighLevelClientConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// RestHighLevelClient 高级客户端，也是我们这里要讲，后面项目会用到的客户端</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestHighLevelClient <span class=\"title function_\">elasticsearchRestHighLevelClient</span><span class=\"params\">(RestClientBuilder</span></span><br><span class=\"line\"><span class=\"params\">                                                             restClientBuilder)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestHighLevelClient</span>(restClientBuilder);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestClient <span class=\"title function_\">elasticsearchRestClient</span><span class=\"params\">(RestClientBuilder builder,</span></span><br><span class=\"line\"><span class=\"params\">                                           ObjectProvider&lt;RestHighLevelClient&gt; restHighLevelClient)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">RestHighLevelClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> restHighLevelClient.getIfUnique();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (client != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> client.getLowLevelClient();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestClientFallbackConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// RestClient 普通的客户端！</span></span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        RestClient <span class=\"title function_\">elasticsearchRestClient</span><span class=\"params\">(RestClientBuilder builder)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>具体的 API 测试！</p>\n</blockquote>\n<ol>\n<li>创建索引</li>\n<li>判断索引是否存在</li>\n<li>删除索引</li>\n<li>创建文档</li>\n<li>crud 文档！</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONString;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.luojunjie.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.index.query.TermQueryBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.search.SearchHit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.search.fetch.subphase.FetchSourceContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JunjieEsApiApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(&quot;restHighLevelClient&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestHighLevelClient client;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试索引的创建 Request</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testCreateIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、创建索引对象</span></span><br><span class=\"line\">        <span class=\"type\">CreateIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CreateIndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2、客户端执行请求 IndicesClient 请求后获得响应结果</span></span><br><span class=\"line\">        <span class=\"type\">CreateIndexResponse</span> <span class=\"variable\">createIndexResponse</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(createIndexResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试获取索引 判断其是否存在</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testExistIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">GetIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetIndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">exists</span> <span class=\"operator\">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(exists);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试删除索引</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">DeleteIndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteIndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AcknowledgedResponse</span> <span class=\"variable\">delete</span> <span class=\"operator\">=</span> client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(delete.isAcknowledged());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试添加文档</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testAddDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建对象</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;欧文&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        <span class=\"comment\">//创建请求</span></span><br><span class=\"line\">        <span class=\"type\">IndexRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//规则 PUT /ouwen_index/_doc/1</span></span><br><span class=\"line\">        request.id(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        request.timeout(TimeValue.timeValueSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将我们的数据放入请求 json</span></span><br><span class=\"line\">        request.source(JSONUtil.toJsonStr(user), XContentType.JSON);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端发送请求</span></span><br><span class=\"line\">        <span class=\"type\">IndexResponse</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> client.index(request, RequestOptions.DEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(index.toString());</span><br><span class=\"line\">        System.out.println(index.status()); <span class=\"comment\">//对应命令返回的状态</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取文档，判断是否存在</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testIsExists</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">GetRequest</span> <span class=\"variable\">getRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//不获取返回的 _source 的上下文 效率更高</span></span><br><span class=\"line\">        getRequest.fetchSourceContext(<span class=\"keyword\">new</span> <span class=\"title class_\">FetchSourceContext</span>(<span class=\"literal\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">exists</span> <span class=\"operator\">=</span> client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(exists);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获得文档的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testGetDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">GetRequest</span> <span class=\"variable\">getRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">GetResponse</span> <span class=\"variable\">getResponse</span> <span class=\"operator\">=</span> client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        <span class=\"comment\">//打印文档的内容</span></span><br><span class=\"line\">        System.out.println(getResponse.getSourceAsString());</span><br><span class=\"line\">        <span class=\"comment\">//返回的全部内容跟命令是一样的</span></span><br><span class=\"line\">        System.out.println(getResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新文档的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testUpdateDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">UpdateRequest</span> <span class=\"variable\">updateRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UpdateRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        updateRequest.timeout(<span class=\"string\">&quot;1s&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen666&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        updateRequest.doc(JSONUtil.toJsonStr(user), XContentType.JSON);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">UpdateResponse</span> <span class=\"variable\">updateResponse</span> <span class=\"operator\">=</span> client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(updateResponse.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除文档的内容</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDeleteDocument</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">DeleteRequest</span> <span class=\"variable\">deleteRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DeleteRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        deleteRequest.timeout(<span class=\"string\">&quot;1s&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">DeleteResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> client.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(response.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//批量添加数据</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testBulkRequest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">BulkRequest</span> <span class=\"variable\">bulkRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BulkRequest</span>();</span><br><span class=\"line\">        bulkRequest.timeout(<span class=\"string\">&quot;60s&quot;</span>);</span><br><span class=\"line\">        List&lt;User&gt; users = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;User&gt;();</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen1&quot;</span>, <span class=\"number\">63</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen2&quot;</span>, <span class=\"number\">53</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;ouwen3&quot;</span>, <span class=\"number\">43</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;junjie1&quot;</span>, <span class=\"number\">33</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;junjie2&quot;</span>, <span class=\"number\">23</span>));</span><br><span class=\"line\">        users.add(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;junjie3&quot;</span>, <span class=\"number\">13</span>));</span><br><span class=\"line\">        <span class=\"comment\">//处理批量请求</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class=\"line\">            bulkRequest.add(<span class=\"keyword\">new</span> <span class=\"title class_\">IndexRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>)</span><br><span class=\"line\">                    .id(<span class=\"string\">&quot;&quot;</span> + (i + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    .source(JSONUtil.toJsonStr(users.get(i)), XContentType.JSON));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">BulkResponse</span> <span class=\"variable\">responses</span> <span class=\"operator\">=</span> client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(responses.hasFailures()); <span class=\"comment\">//是否失败 false代表成功</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查询</span></span><br><span class=\"line\">    <span class=\"comment\">// SearchRequest 搜索请求</span></span><br><span class=\"line\">    <span class=\"comment\">// SearchSourceBuilder 条件构造</span></span><br><span class=\"line\">    <span class=\"comment\">// HighlightBuilder 构建高亮</span></span><br><span class=\"line\">    <span class=\"comment\">// TermQueryBuilder 精确查询</span></span><br><span class=\"line\">    <span class=\"comment\">// MatchAllQueryBuilder</span></span><br><span class=\"line\">    <span class=\"comment\">// xxx QueryBuilder 对应我们刚才看到的命令！</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testSearch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">SearchRequest</span> <span class=\"variable\">searchRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchRequest</span>(<span class=\"string\">&quot;ouwen_index&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//构建搜索条件</span></span><br><span class=\"line\">        <span class=\"type\">SearchSourceBuilder</span> <span class=\"variable\">sourceBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SearchSourceBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询条件，我们可以使用 QueryBuilders 工具来实现</span></span><br><span class=\"line\">        <span class=\"comment\">// QueryBuilders.termQuery 精确</span></span><br><span class=\"line\">        <span class=\"comment\">// QueryBuilders.matchAllQuery() 匹配所有</span></span><br><span class=\"line\">        <span class=\"type\">TermQueryBuilder</span> <span class=\"variable\">termQuery</span> <span class=\"operator\">=</span> QueryBuilders.termQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;ouwen1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        sourceBuilder.query(termQuery);</span><br><span class=\"line\">        sourceBuilder.timeout(<span class=\"keyword\">new</span> <span class=\"title class_\">TimeValue</span>(<span class=\"number\">60</span>, TimeUnit.SECONDS));</span><br><span class=\"line\">        searchRequest.source(sourceBuilder);</span><br><span class=\"line\">        <span class=\"type\">SearchResponse</span> <span class=\"variable\">search</span> <span class=\"operator\">=</span> client.search(searchRequest,RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(JSONUtil.toJsonStr(search.getHits()));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==========================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SearchHit hit : search.getHits()) &#123;</span><br><span class=\"line\">            System.out.println(hit.getSourceAsMap());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"后端开发","path":"api/categories/后端开发.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"ES","path":"api/tags/ES.json"}]}