{"title":"常用编程环境与开发工具安装手册","slug":"常用编程环境与开发工具安装手册","date":"2022-04-02T15:48:47.000Z","updated":"2023-05-01T06:03:16.000Z","comments":true,"path":"api/articles/常用编程环境与开发工具安装手册.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194438.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194604.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194833.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401195240.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401195615.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308133517.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308153603.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308154746.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308155428.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174609.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174531.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174831.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174954.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175748.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175816.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175908.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112501.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112942.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112649.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180153.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180807.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181055.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181122.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181408.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181600.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181914.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181940.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182209.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182301.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182435.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182812.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182917.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183107.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183223.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183455.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184117.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184218.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310094719.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310095750.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100359.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100539.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101013.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101538.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102203.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102427.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102744.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102836.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220312001027.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310103242.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112707.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112815.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112952.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310113332.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114012.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114702.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115055.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115245.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115628.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135008.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135103.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135300.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154144.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154618.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155756.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155938.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310160044.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310163924.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164207.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164225.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164928.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170455.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170935.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171234.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171348.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172047.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172445.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172805.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173325.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173704.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135315.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135418.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135630.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314134759.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314134841.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314140021.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314140634.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143339.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143433.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143552.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143936.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314144935.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145010.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145707.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145907.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145956.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314150017.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314152655.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314152725.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155314.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155850.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155911.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804165746.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804165940.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804170315.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804170439.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804171225.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173336.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173609.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173822.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804174154.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804174504.png"],"content":"<blockquote>\n<p><strong>安装目录示分区大小而定，不可盲目复制命令进行安装！</strong></p>\n</blockquote>\n<h2 id=\"安装-Docker-容器服务\"><a href=\"#安装-Docker-容器服务\" class=\"headerlink\" title=\"安装 Docker 容器服务\"></a>安装 Docker 容器服务</h2><h3 id=\"CentOS-安装\"><a href=\"#CentOS-安装\" class=\"headerlink\" title=\"CentOS 安装\"></a>CentOS 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 卸载旧的版本</span></span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 安装yum-utils包（提供 yum-config-manager 程序）</span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 设置镜像的仓库</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo <span class=\"comment\"># 默认是国外的，十分慢！</span></span><br><span class=\"line\"><span class=\"comment\"># 建议使用阿里云的镜像地址</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新yum软件包索引</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 安装docker相关的 docker-ce docker-compose （默认为最新版）</span></span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 安装指定版本</span></span><br><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin -y</span><br><span class=\"line\">sudo yum install docker-ce-20.10.13 docker-ce-cli-20.10.13 containerd.io docker-compose-plugin -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6. 启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7. 使用docker version查看是否安装成功</span></span><br><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ubuntu-安装\"><a href=\"#Ubuntu-安装\" class=\"headerlink\" title=\"Ubuntu 安装\"></a>Ubuntu 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 卸载旧的版本</span></span><br><span class=\"line\">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 更新软件包索引并安装软件包，以允许通过 HTTPS 使用存储库：aptapt</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    gnupg-agent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 添加 Docker 的官方 GPG 密钥：</span></span><br><span class=\"line\">sudo curl -fsSL http://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br><span class=\"line\"><span class=\"comment\"># 4. 设置存储库</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=<span class=\"subst\">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] http://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$(. /etc/os-release &amp;&amp; echo <span class=\"string\">&quot;<span class=\"variable\">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \\</span><br><span class=\"line\">  sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 如果您使用 Ubuntu 衍生发行版，例如 Linux Mint，则可能需要使用 UBUNTU_CODENAME 而不是 VERSION_CODENAME</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 更新包索引，并安装最新版本的 Docker 引擎、容器和 Docker Compose</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定版本</span></span><br><span class=\"line\">sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先列出存储库中的可用版本</span></span><br><span class=\"line\">apt-cache madison docker-ce</span><br><span class=\"line\"> docker-ce | 5:20.10.18~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span><br><span class=\"line\"> docker-ce | 5:20.10.17~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span><br><span class=\"line\"> docker-ce | 5:20.10.16~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 取出其中的版本号，例如：5:20.10.17~3-0~ubuntu-focal</span></span><br><span class=\"line\">sudo apt-get install docker-ce=5:20.10.17~3-0~ubuntu-focal docker-ce-cli=5:20.10.17~3-0~ubuntu-focal containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6. 启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7. 使用docker version查看是否安装成功</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DockerHub-国内网络无法访问，如何下载镜像文件，离线导入\"><a href=\"#DockerHub-国内网络无法访问，如何下载镜像文件，离线导入\" class=\"headerlink\" title=\"DockerHub 国内网络无法访问，如何下载镜像文件，离线导入\"></a>DockerHub 国内网络无法访问，如何下载镜像文件，离线导入</h3><p><a href=\"https://wkdaily.cpolar.cn/archives/gc\">使用 Github Action 构建 docker 镜像</a></p>\n<h2 id=\"安装-MiniKube-单机-K8S-服务\"><a href=\"#安装-MiniKube-单机-K8S-服务\" class=\"headerlink\" title=\"安装 MiniKube 单机 K8S 服务\"></a>安装 MiniKube 单机 K8S 服务</h2><blockquote>\n<p><strong>安装环境：CentOS 8</strong></p>\n</blockquote>\n<h3 id=\"安装-kubectl\"><a href=\"#安装-kubectl\" class=\"headerlink\" title=\"安装 kubectl\"></a>安装 kubectl</h3><blockquote>\n<p><a href=\"https://kubernetes.io/zh-cn/docs/tasks/tools/\">安装工具 | Kubernetes</a></p>\n</blockquote>\n<h3 id=\"安装-MiniKube\"><a href=\"#安装-MiniKube\" class=\"headerlink\" title=\"安装 MiniKube\"></a>安装 MiniKube</h3><blockquote>\n<p><a href=\"https://minikube.kubernetes.ac.cn/docs/start/?arch=/windows/x86-64/stable/.exe+download\">minikube start | minikube 中文</a></p>\n</blockquote>\n<p>常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 minikube</span></span><br><span class=\"line\">minikube start --driver=<span class=\"string\">&#x27;docker&#x27;</span> --cache-images=<span class=\"literal\">true</span>  --kubernetes-version=<span class=\"string\">&#x27;v1.31.0&#x27;</span> --registry-mirror=<span class=\"string\">&#x27;https://hub.geekery.cn&#x27;</span> --base-image=<span class=\"string\">&#x27;registry.cn-hangzhou.aliyuncs.com/google_containers/kicbase:v0.0.45&#x27;</span> --listen-address=0.0.0.0 --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启 dashboard</span></span><br><span class=\"line\">minikube dashboard</span><br><span class=\"line\"><span class=\"comment\"># 启动端口转发，提供 dashboard 供外部访问</span></span><br><span class=\"line\">kubectl port-forward -n kubernetes-dashboard svc/kubernetes-dashboard 8080:80 --address 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启 nginx ingress controller 插件</span></span><br><span class=\"line\"><span class=\"comment\"># 1.手动加载国内镜像</span></span><br><span class=\"line\">minikube image load registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:v1.12.0-beta.0</span><br><span class=\"line\">minikube image load registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.4</span><br><span class=\"line\"><span class=\"comment\"># 2.开启插件</span></span><br><span class=\"line\">minikube addons <span class=\"built_in\">enable</span> ingress --images=<span class=\"string\">&quot;KubeWebhookCertgenCreate=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.4,KubeWebhookCertgenPatch=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.4,IngressController=google_containers/nginx-ingress-controller:v1.12.0-beta.0&quot;</span> --registries=<span class=\"string\">&quot;IngressController=registry.cn-hangzhou.aliyuncs.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布应用</span></span><br><span class=\"line\"><span class=\"comment\"># 前提</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 nfs 共享文件夹，供 pod 内的容器访问</span></span><br><span class=\"line\"><span class=\"comment\"># 后端</span></span><br><span class=\"line\"><span class=\"comment\"># 1.导入打包好的后端应用 docker 镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 Minikube 的 Docker 环境</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(minikube -p minikube docker-env)</span><br><span class=\"line\"><span class=\"comment\"># 导入镜像到 Minikube</span></span><br><span class=\"line\">docker load -i vxtcip-boot-v1.0.0.tar</span><br><span class=\"line\"><span class=\"comment\"># 2.编写 deployment 配置文件（yaml）</span></span><br><span class=\"line\"><span class=\"comment\"># 略...</span></span><br><span class=\"line\"><span class=\"comment\"># 3.部署 deployment</span></span><br><span class=\"line\">kubectl apply -f *-deployment.yaml</span><br><span class=\"line\"><span class=\"comment\"># 重启 deployment</span></span><br><span class=\"line\">kubectl rollout restart -n <span class=\"variable\">$&#123;namespace-name&#125;</span> deployment <span class=\"variable\">$&#123;deployment-name&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 删除 deployment</span></span><br><span class=\"line\">kubectl delete -n <span class=\"variable\">$&#123;namespace-name&#125;</span> deployment <span class=\"variable\">$&#123;deployment-name&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Kubernetes-集群和-KubeSphere\"><a href=\"#安装-Kubernetes-集群和-KubeSphere\" class=\"headerlink\" title=\"安装 Kubernetes 集群和 KubeSphere\"></a>安装 Kubernetes 集群和 KubeSphere</h2><blockquote>\n<p>官方文档: <a href=\"https://www.kubesphere.io/zh/docs/v4.1/03-installation-and-upgrade/02-install-kubesphere/02-install-kubernetes-and-kubesphere/\">在 Linux 上安装 Kubernetes 和 KubeSphere</a></p>\n<p>参考博客：<a href=\"https://www.kubesphere.io/zh/blogs/kubesphere-4.1.2-deployment-and-extension-installation/#23-%E9%83%A8%E7%BD%B2-k8s-%E9%9B%86%E7%BE%A4\">33 张高清大图，带你玩转 KubeSphere 4.1.2 部署与扩展组件安装</a></p>\n</blockquote>\n<h3 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h3><h4 id=\"安装-Ansible-自动化运维工具（用于批量执行脚本-命令）\"><a href=\"#安装-Ansible-自动化运维工具（用于批量执行脚本-命令）\" class=\"headerlink\" title=\"安装 Ansible 自动化运维工具（用于批量执行脚本/命令）\"></a>安装 Ansible 自动化运维工具（用于批量执行脚本/命令）</h4><p>参考本文《Ansible 安装与配置》</p>\n<h4 id=\"操作系统基础配置\"><a href=\"#操作系统基础配置\" class=\"headerlink\" title=\"操作系统基础配置\"></a>操作系统基础配置</h4><p>可使用 Ansible 批量在集群机器上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置主机名(每台机器都需要配置，按照不同的 hostname 执行)</span></span><br><span class=\"line\">hostnamectl set-hostname k8s-control-1</span><br><span class=\"line\"><span class=\"comment\"># 配置DNS(已配置则忽略)</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;echo &quot;nameserver 114.114.114.114&quot; &gt; /etc/resolv.conf&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置服务器时区</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;timedatectl set-timezone Asia/Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置时间同步</span></span><br><span class=\"line\"><span class=\"comment\"># - 安装 chrony 作为时间同步软件</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;yum install chrony -y&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># - 编辑配置文件 /etc/chrony.conf，修改 ntp 服务器配置</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&quot;sed -i &#x27;s/^pool pool.*/pool cn.pool.ntp.org iburst/g&#x27; /etc/chrony.conf&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># - 重启并设置 chrony 服务开机自启动</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;systemctl enable chronyd --now&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># - 验证 chrony 同步状态</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;chronyc sourcestats -v&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 关闭系统防火墙</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;systemctl stop firewalld &amp;&amp; systemctl disable firewalld&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 禁用 SELinux</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&quot;sed -i &#x27;s/^SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 安装必须依赖</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;yum install curl socat conntrack ebtables ipset ipvsadm -y&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"磁盘配置\"><a href=\"#磁盘配置\" class=\"headerlink\" title=\"磁盘配置\"></a>磁盘配置</h4><p>每台服务器新增一块数据盘 <strong>/dev/sdb</strong>，用于 <strong>Containerd</strong> 和 <strong>Kubernetes Pod</strong> 的持久化存储</p>\n<p>为了满足用户在上线后数据盘容量不足时，可以实现动态扩容的需求。本文采用了 LVM 的方式配置磁盘</p>\n<h5 id=\"使用-LVM-配置硬盘，并挂载到数据目录\"><a href=\"#使用-LVM-配置硬盘，并挂载到数据目录\" class=\"headerlink\" title=\"使用 LVM 配置硬盘，并挂载到数据目录\"></a>使用 LVM 配置硬盘，并挂载到数据目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 PV</span></span><br><span class=\"line\">pvcreate /dev/sdb</span><br><span class=\"line\"><span class=\"comment\"># 创建 VG</span></span><br><span class=\"line\">vgcreate data /dev/sdb</span><br><span class=\"line\"><span class=\"comment\"># 创建 LV（使用所有空间，VG 名字为 data，LV 名字为 lvdata）</span></span><br><span class=\"line\">lvcreate -l 100%VG data -n lvdata、</span><br><span class=\"line\"><span class=\"comment\"># 格式化磁盘</span></span><br><span class=\"line\">mkfs.xfs /dev/mapper/data-lvdata</span><br><span class=\"line\"><span class=\"comment\"># 手工挂载</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /u01</span><br><span class=\"line\">mount /dev/mapper/data-lvdata /u01/</span><br><span class=\"line\"><span class=\"comment\"># 开机自动挂载</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -1 /etc/mtab &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\"># 创建 OpenEBS 本地数据根目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/openebs/local</span><br><span class=\"line\"><span class=\"comment\"># 创建 Containerd 数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/containerd</span><br><span class=\"line\"><span class=\"comment\"># 创建 Containerd 数据目录软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /u01/containerd /var/lib/containerd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-Kubernetes-集群\"><a href=\"#部署-Kubernetes-集群\" class=\"headerlink\" title=\"部署 Kubernetes 集群\"></a>部署 Kubernetes 集群</h3><p>使用 KubeSphere 出品的 KubeKey 工具，可以根据配置文件一键部署 K8S 高可用集群</p>\n<p>选择一台 control 节点作为部署节点，执行下面的操作</p>\n<h4 id=\"下载-KubeKey\"><a href=\"#下载-KubeKey\" class=\"headerlink\" title=\"下载 KubeKey\"></a>下载 KubeKey</h4><ul>\n<li><p>下载最新版的 KubeKey（<strong>v3.1.7</strong>）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /u01/kubekey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /u01/kubekey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择中文区下载(访问 GitHub 受限时使用)</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KKZONE=cn</span><br><span class=\"line\">curl -sfL https://get-kk.kubesphere.io | sh -</span><br></pre></td></tr></table></figure></li>\n<li><p>查看 KubeKey 支持的 Kubernetes 版本列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kk version --show-supported-k8s</span><br></pre></td></tr></table></figure>\n\n<p>选择稳定且兼容性高的较新版本，本文选择的是 <strong>v1.28.15</strong></p>\n</li>\n</ul>\n<h4 id=\"创建-Kubernetes-集群部署配置\"><a href=\"#创建-Kubernetes-集群部署配置\" class=\"headerlink\" title=\"创建 Kubernetes 集群部署配置\"></a>创建 Kubernetes 集群部署配置</h4><ol>\n<li><p>创建集群配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kk create config -f ksp-k8s-v12815.yaml --with-kubernetes v1.28.15</span><br></pre></td></tr></table></figure></li>\n<li><p>修改配置文件</p>\n</li>\n</ol>\n<p>本文采用 3 个节点同时作为 control-plane、etcd 和 worker 节点</p>\n<p>请使用编辑器，编辑配置文件 <code>ksp-k8s-v12815.yaml</code>，修改 <strong>kind: Cluster</strong> 小节中 hosts 和 roleGroups 等信息，修改说明如下：</p>\n<ul>\n<li>hosts：指定节点的 IP、ssh 用户、ssh 密码</li>\n<li>roleGroups：指定 3 个 etcd、control-plane 节点，并复用为 worker 节点</li>\n<li>internalLoadbalancer： 启用内置的 HAProxy 负载均衡器</li>\n<li>domain：自定义域名 <strong>lb.opsxlab.cn</strong>，没特殊需求可使用默认值 <strong>lb.kubesphere.local</strong></li>\n<li>clusterName：自定义 <strong>opsxlab.cn</strong>，没特殊需求可使用默认值 <strong>cluster.local</strong></li>\n<li>autoRenewCerts：该参数可以实现证书到期自动续期，默认为 <strong>true</strong></li>\n<li>containerManager：容器运行时使用 <strong>containerd</strong></li>\n<li>storage.openebs.basePath：<strong>默认没有，新增配置</strong>，指定 openebs 默认存储路径为 <strong>/data/openebs/local</strong></li>\n<li>registry.privateRegistry：<strong>可选配置，</strong> 解决 Docker 官方镜像不可用的问题</li>\n<li>registry.namespaceOverride： <strong>可选配置，</strong> 解决 Docker 官方镜像不可用的问题</li>\n</ul>\n<p>修改后的完整示例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubekey.kubesphere.io/v1alpha2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">vansys</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">k8s-control-1</span>, <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.101</span>, <span class=\"attr\">internalAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.101</span>, <span class=\"attr\">user:</span> <span class=\"string\">root</span>, <span class=\"attr\">password:</span> <span class=\"string\">&quot;xxx&quot;</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">k8s-control-2</span>, <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.102</span>, <span class=\"attr\">internalAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.102</span>, <span class=\"attr\">user:</span> <span class=\"string\">root</span>, <span class=\"attr\">password:</span> <span class=\"string\">&quot;xxx&quot;</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">k8s-control-3</span>, <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.103</span>, <span class=\"attr\">internalAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.103</span>, <span class=\"attr\">user:</span> <span class=\"string\">root</span>, <span class=\"attr\">password:</span> <span class=\"string\">&quot;xxx&quot;</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">roleGroups:</span></span><br><span class=\"line\">    <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-3</span></span><br><span class=\"line\">    <span class=\"attr\">control-plane:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-3</span></span><br><span class=\"line\">    <span class=\"attr\">worker:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-3</span></span><br><span class=\"line\">  <span class=\"attr\">controlPlaneEndpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">domain:</span> <span class=\"string\">lb.kubesphere.local</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6443</span></span><br><span class=\"line\">  <span class=\"attr\">kubernetes:</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1.28.15</span></span><br><span class=\"line\">    <span class=\"attr\">clusterName:</span> <span class=\"string\">cluster.local</span></span><br><span class=\"line\">    <span class=\"attr\">autoRenewCerts:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">containerManager:</span> <span class=\"string\">containerd</span></span><br><span class=\"line\">  <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">kubekey</span></span><br><span class=\"line\">  <span class=\"attr\">network:</span></span><br><span class=\"line\">    <span class=\"attr\">plugin:</span> <span class=\"string\">calico</span></span><br><span class=\"line\">    <span class=\"attr\">kubePodsCIDR:</span> <span class=\"number\">10.233</span><span class=\"number\">.64</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\">    <span class=\"attr\">kubeServiceCIDR:</span> <span class=\"number\">10.233</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\">    <span class=\"attr\">enableMultusCNI:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">storage:</span></span><br><span class=\"line\">    <span class=\"attr\">openebs:</span></span><br><span class=\"line\">      <span class=\"attr\">basePath:</span> <span class=\"string\">/u01/openebs/local</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用 KubeSphere 在阿里云的镜像仓库，避免国内拉不下镜像的问题</span></span><br><span class=\"line\">    <span class=\"attr\">privateRegistry:</span> <span class=\"string\">&quot;registry.cn-beijing.aliyuncs.com&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">namespaceOverride:</span> <span class=\"string\">&quot;kubesphereio&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">registryMirrors:</span> []</span><br><span class=\"line\">    <span class=\"attr\">insecureRegistries:</span> []</span><br><span class=\"line\">  <span class=\"attr\">addons:</span> []</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署-Kubernetes-集群-1\"><a href=\"#部署-Kubernetes-集群-1\" class=\"headerlink\" title=\"部署 Kubernetes 集群\"></a>部署 Kubernetes 集群</h4><p>使用上面创建的配置文件，执行下面的命令，创建 K8S 集群</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> KKZONE=cn</span><br><span class=\"line\">./kk create cluster -f ksp-k8s-v12815.yaml</span><br></pre></td></tr></table></figure>\n\n<p>命令执行后，首先 <strong>Kubekey</strong> 会检查部署 K8S 的依赖及其他详细要求。通过检查后，系统将提示您确认安装。输入 <strong>yes</strong> 并按 <strong>ENTER</strong> 继续部署</p>\n<p>部署完成需要大约 10-20 分钟左右，具体需要看网速跟机器配置，若部署成功，会在终端显示如下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20:10:23 CST Pipeline[CreateClusterPipeline] execute successfully</span><br><span class=\"line\">Installation is complete.</span><br><span class=\"line\"></span><br><span class=\"line\">Please check the result using the <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        kubectl get pod -A</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证-Kubernetes-集群状态\"><a href=\"#验证-Kubernetes-集群状态\" class=\"headerlink\" title=\"验证 Kubernetes 集群状态\"></a>验证 Kubernetes 集群状态</h4><p>在 control-1 控制节点使用 kubectl 命令验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看集群节点信息</span></span><br><span class=\"line\">kubectl get nodes -o wide</span><br><span class=\"line\"><span class=\"comment\"># 查看 Pod 信息</span></span><br><span class=\"line\">kubectl get pods -A -o wide</span><br><span class=\"line\"><span class=\"comment\"># 查看 Image 列表</span></span><br><span class=\"line\">crictl images <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h4><p>安装 Kubernetes 时出现如下日志，且 kubeadm 初始化集群超时</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">detected <span class=\"keyword\">that</span> <span class=\"keyword\">the</span> sandbox image <span class=\"string\">&quot;registry.k8s.io/pause:3.8&quot;</span> <span class=\"keyword\">of</span> <span class=\"keyword\">the</span> container runtime <span class=\"keyword\">is</span> inconsistent <span class=\"keyword\">with</span> <span class=\"keyword\">that</span> used <span class=\"keyword\">by</span> kubeadm. It <span class=\"keyword\">is</span> recommended <span class=\"keyword\">that</span> using <span class=\"string\">&quot;registry.cn-beijing.aliyuncs.com/kubesphereio/pause:3.9&quot;</span> <span class=\"keyword\">as</span> <span class=\"keyword\">the</span> CRI sandbox image</span><br></pre></td></tr></table></figure>\n\n<p>问题原因：containerd 配置的 sandbox image 跟 kubeadm 配置的不一致</p>\n<p>解决办法：将 <code>/etc/containerd/config.toml</code> 配置文件中的 sandbox_image 修改为 KubeKey 创建集群的配置文件中 <code>privateRegistry</code> 仓库的镜像，保持跟 kubeadm 的一致</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class=\"line\">  <span class=\"attr\">sandbox_image</span> = <span class=\"string\">&quot;registry.cn-beijing.aliyuncs.com/kubesphereio/pause:3.9&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis-缓存服务安装部署\"><a href=\"#Redis-缓存服务安装部署\" class=\"headerlink\" title=\"Redis 缓存服务安装部署\"></a>Redis 缓存服务安装部署</h2><p>这里下载的是 <code>redis-5.0.8.tar.gz</code> 安装包，并将其直接放在了 <code>opt</code> ⽬ 录下</p>\n<h3 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h3><p>1、在 <code>/usr/local/</code> 下创建 <code>redis</code> ⽂ 件夹并进 ⼊</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> redis</span><br><span class=\"line\"><span class=\"built_in\">cd</span> redis</span><br></pre></td></tr></table></figure>\n\n<p>2、将 <code>Redis</code> 安装包解压到 <code>/usr/local/redis</code> 中即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf /opt/redis-5.0.8.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>解压完之后， <code>/usr/local/redis</code> ⽬ 录中会出现 ⼀ 个 <code>redis-5.0.8.tar.gz</code> 的 ⽬ 录</p>\n<h3 id=\"编译并安装\"><a href=\"#编译并安装\" class=\"headerlink\" title=\"编译并安装\"></a>编译并安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> redis-5.0.8/</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将-Redis-安装为系统服务并后台启动\"><a href=\"#将-Redis-安装为系统服务并后台启动\" class=\"headerlink\" title=\"将 Redis 安装为系统服务并后台启动\"></a>将 Redis 安装为系统服务并后台启动</h3><p>进入 <code>utils</code> 目录，并执行如下脚本即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> utils/</span><br><span class=\"line\">./install_server.sh</span><br></pre></td></tr></table></figure>\n\n<p>此处我全部选择默认配置，有需要可以按需选择</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194438.png\" alt=\"image-20220401194430903\"></p>\n<h3 id=\"查看-Redis-服务启动情况\"><a href=\"#查看-Redis-服务启动情况\" class=\"headerlink\" title=\"查看 Redis 服务启动情况\"></a>查看 Redis 服务启动情况</h3><p>直接执行如下命令来查看 Redis 的启动结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status redis_6379.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 扩展</span></span><br><span class=\"line\">启动：systemctl start redis_6379.service</span><br><span class=\"line\">停止：systemctl stop redis_6379.service</span><br><span class=\"line\">重启：systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194604.png\" alt=\"image-20220401194604551\"></p>\n<h3 id=\"启动-Redis-客户端并测试\"><a href=\"#启动-Redis-客户端并测试\" class=\"headerlink\" title=\"启动 Redis 客户端并测试\"></a>启动 Redis 客户端并测试</h3><p>启动自带的 <code>redis-cli</code> 客户端，测试通过：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194833.png\" alt=\"image-20220401194833905\" style=\"zoom:50%;\" />\n\n<p>但是此时只能在本地访问，无法远程连接，因此还需要做部分设置</p>\n<h3 id=\"运行远程连接\"><a href=\"#运行远程连接\" class=\"headerlink\" title=\"运行远程连接\"></a>运行远程连接</h3><p>编辑 <code>redis</code> 配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>bind 127.0.0.1</code> 修改为 <code>0.0.0.0</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401195240.png\" alt=\"image-20220401195240594\"></p>\n<p>保存然后重启 <code>Redis</code> 服务即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置访问密码\"><a href=\"#设置访问密码\" class=\"headerlink\" title=\"设置访问密码\"></a>设置访问密码</h3><p>编辑 <code>redis</code> 配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到如下内容：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#requirepass foobared</span></span><br></pre></td></tr></table></figure>\n\n<p>去掉注释，将 <code>foobared</code> 修改为自己想要的密码，保存即可。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">requirepass</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>保存然后重启 <code>Redis</code> 服务即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>\n\n<p>这样后续的访问需要先输入密码认证通过：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401195615.png\" alt=\"image-20220401195615345\"></p>\n<h2 id=\"WEB-服务器-Nginx-安装部署\"><a href=\"#WEB-服务器-Nginx-安装部署\" class=\"headerlink\" title=\"WEB 服务器 Nginx 安装部署\"></a>WEB 服务器 Nginx 安装部署</h2><p>这 ⾥ 下载的是 <code>nginx-1.17.10.tar.gz</code> 安装包，并将其直接放在了 <code>opt</code> ⽬ 录下</p>\n<h3 id=\"解压安装包-1\"><a href=\"#解压安装包-1\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h3><p>1、在 <code>/usr/local/</code> 下创建 <code>nginx</code> ⽂ 件夹并进 ⼊</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> nginx</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx</span><br></pre></td></tr></table></figure>\n\n<p>2、将 <code>Nginx</code> 安装包解压到 <code>/usr/local/nginx</code> 中即可</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> zxvf /opt/nginx-<span class=\"number\">1</span>.<span class=\"number\">17</span>.<span class=\"number\">10</span>.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>解压完之后， <code>/usr/local/nginx</code> ⽬ 录中会出现 ⼀ 个 <code>nginx-1.17.10</code> 的 ⽬ 录</p>\n<h3 id=\"预先安装额外的依赖\"><a href=\"#预先安装额外的依赖\" class=\"headerlink\" title=\"预先安装额外的依赖\"></a>预先安装额外的依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install pcre-devel openssl openssl-devel gcc gcc-c++ autoconf automake make</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译安装-Nginx\"><a href=\"#编译安装-Nginx\" class=\"headerlink\" title=\"编译安装 Nginx\"></a>编译安装 Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.17.10</span><br><span class=\"line\"><span class=\"comment\"># 使用 --prefix= 可以指定目录安装</span></span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，Nginx 的可执 ⾏⽂ 件位置位于</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-Nginx\"><a href=\"#启动-Nginx\" class=\"headerlink\" title=\"启动 Nginx\"></a>启动 Nginx</h3><p>直接执 ⾏ 如下命令即可：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>如果想停 ⽌ Nginx 服务，可执 ⾏：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s stop</span><br></pre></td></tr></table></figure>\n\n<p>如果修改了配置 ⽂ 件后想重新加载 Nginx，可执 ⾏：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>注意其配置 ⽂ 件位于：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Centos6-9-注册为系统服务，并开机自启\"><a href=\"#Centos6-9-注册为系统服务，并开机自启\" class=\"headerlink\" title=\"Centos6.9 注册为系统服务，并开机自启\"></a>Centos6.9 注册为系统服务，并开机自启</h3><p>首先，在 linux 系统的/etc/init.d/目录下创建 nginx 文件，使用如下命令：</p>\n<p><code>vi /etc/init.d/nginx</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># nginx - this script starts and stops the nginx daemon</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig:   - 85 15</span></span><br><span class=\"line\"><span class=\"comment\"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \\</span></span><br><span class=\"line\"><span class=\"comment\">#               proxy and IMAP/POP3 proxy server</span></span><br><span class=\"line\"><span class=\"comment\"># processname: nginx</span></span><br><span class=\"line\"><span class=\"comment\"># config:      /etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"comment\"># config:      /etc/sysconfig/nginx</span></span><br><span class=\"line\"><span class=\"comment\"># pidfile:     /var/run/nginx.pid</span></span><br><span class=\"line\"><span class=\"comment\"># Source function library.</span></span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"><span class=\"comment\"># Source networking configuration.</span></span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"><span class=\"comment\"># Check that networking is up.</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$NETWORKING</span>&quot;</span> = <span class=\"string\">&quot;no&quot;</span> ] &amp;&amp; <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"comment\"># 这里根据实际安装位置修改</span></span><br><span class=\"line\">nginx=<span class=\"string\">&quot;/usr/local/nginx/sbin/nginx&quot;</span></span><br><span class=\"line\">prog=$(<span class=\"built_in\">basename</span> <span class=\"variable\">$nginx</span>)</span><br><span class=\"line\"><span class=\"comment\"># 这里根据实际配置文件位置修改</span></span><br><span class=\"line\">NGINX_CONF_FILE=<span class=\"string\">&quot;/usr/local/nginx/conf&quot;</span></span><br><span class=\"line\">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class=\"line\">lockfile=/var/lock/subsys/nginx</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">make_dirs</span></span>() &#123;</span><br><span class=\"line\">   <span class=\"comment\"># make required directories</span></span><br><span class=\"line\">   user=`<span class=\"variable\">$nginx</span> -V 2&gt;&amp;1 | grep <span class=\"string\">&quot;configure arguments:&quot;</span> | sed <span class=\"string\">&#x27;s/[^*]*--user=\\([^ ]*\\).*/\\1/g&#x27;</span> -`</span><br><span class=\"line\">   <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;`grep <span class=\"variable\">$user</span> /etc/passwd`&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">       useradd -M -s /bin/nologin <span class=\"variable\">$user</span></span><br><span class=\"line\">   <span class=\"keyword\">fi</span></span><br><span class=\"line\">   options=`<span class=\"variable\">$nginx</span> -V 2&gt;&amp;1 | grep <span class=\"string\">&#x27;configure arguments:&#x27;</span>`</span><br><span class=\"line\">   <span class=\"keyword\">for</span> opt <span class=\"keyword\">in</span> <span class=\"variable\">$options</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> [ `<span class=\"built_in\">echo</span> <span class=\"variable\">$opt</span> | grep <span class=\"string\">&#x27;.*-temp-path&#x27;</span>` ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">           value=`<span class=\"built_in\">echo</span> <span class=\"variable\">$opt</span> | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot;=&quot;</span> -f 2`</span><br><span class=\"line\">           <span class=\"keyword\">if</span> [ ! -d <span class=\"string\">&quot;<span class=\"variable\">$value</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">               <span class=\"comment\"># echo &quot;creating&quot; $value</span></span><br><span class=\"line\">               <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$value</span> &amp;&amp; <span class=\"built_in\">chown</span> -R <span class=\"variable\">$user</span> <span class=\"variable\">$value</span></span><br><span class=\"line\">           <span class=\"keyword\">fi</span></span><br><span class=\"line\">       <span class=\"keyword\">fi</span></span><br><span class=\"line\">   <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">    [ -x <span class=\"variable\">$nginx</span> ] || <span class=\"built_in\">exit</span> 5</span><br><span class=\"line\">    [ -f <span class=\"variable\">$NGINX_CONF_FILE</span> ] || <span class=\"built_in\">exit</span> 6</span><br><span class=\"line\">    make_dirs</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot;Starting <span class=\"variable\">$prog</span>: &quot;</span></span><br><span class=\"line\">    daemon <span class=\"variable\">$nginx</span> -c <span class=\"variable\">$NGINX_CONF_FILE</span></span><br><span class=\"line\">    retval=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    [ <span class=\"variable\">$retval</span> -eq 0 ] &amp;&amp; <span class=\"built_in\">touch</span> <span class=\"variable\">$lockfile</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot;Stopping <span class=\"variable\">$prog</span>: &quot;</span></span><br><span class=\"line\">    killproc <span class=\"variable\">$prog</span> -QUIT</span><br><span class=\"line\">    retval=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    [ <span class=\"variable\">$retval</span> -eq 0 ] &amp;&amp; <span class=\"built_in\">rm</span> -f <span class=\"variable\">$lockfile</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">restart</span></span>() &#123;</span><br><span class=\"line\">    configtest || <span class=\"built_in\">return</span> $?</span><br><span class=\"line\">    stop</span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">    start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">reload</span></span>() &#123;</span><br><span class=\"line\">    configtest || <span class=\"built_in\">return</span> $?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot;Reloading <span class=\"variable\">$prog</span>: &quot;</span></span><br><span class=\"line\">    killproc <span class=\"variable\">$nginx</span> -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">force_reload</span></span>() &#123;</span><br><span class=\"line\">    restart</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">configtest</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"variable\">$nginx</span> -t -c <span class=\"variable\">$NGINX_CONF_FILE</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">rh_status</span></span>() &#123;</span><br><span class=\"line\">    status <span class=\"variable\">$prog</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">rh_status_q</span></span>() &#123;</span><br><span class=\"line\">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        rh_status_q &amp;&amp; <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        rh_status_q || <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart|configtest)</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload)</span><br><span class=\"line\">        rh_status_q || <span class=\"built_in\">exit</span> 7</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    force-reload)</span><br><span class=\"line\">        force_reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">        rh_status</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    condrestart|try-restart)</span><br><span class=\"line\">        rh_status_q || <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> $<span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 2</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n\n<p>保存脚本文件，并修改权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改文件权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> a+x /etc/init.d/nginx</span><br><span class=\"line\"><span class=\"comment\"># 添加为系统服务</span></span><br><span class=\"line\">chkconfig --add /etc/init.d/nginx</span><br><span class=\"line\"><span class=\"comment\"># 服务启动/停止命令</span></span><br><span class=\"line\">service nginx start</span><br><span class=\"line\">service nginx stop</span><br><span class=\"line\"><span class=\"comment\"># 设置终端模式开机启动</span></span><br><span class=\"line\">chkconfig nginx on</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS7-注册为系统服务，并开机自启\"><a href=\"#CentOS7-注册为系统服务，并开机自启\" class=\"headerlink\" title=\"CentOS7 注册为系统服务，并开机自启\"></a>CentOS7 注册为系统服务，并开机自启</h3><p>在系统中创建服务脚本，命令如下：</p>\n<p><code>vi /usr/lib/systemd/system/nginx.service</code></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"keyword\">Description</span>=nginx - web server</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>logs/nginx.pid</span><br><span class=\"line\">ExecStartPre=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -t -c /u</span>sr<span class=\"regexp\">/local/</span>nginx<span class=\"regexp\">/conf/</span>nginx.conf</span><br><span class=\"line\">ExecStart=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -c /u</span>sr<span class=\"regexp\">/local/</span>nginx<span class=\"regexp\">/conf/</span>nginx.conf</span><br><span class=\"line\">ExecReload=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reload</span><br><span class=\"line\">ExecStop=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s stop</span><br><span class=\"line\">ExecQuit=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s quit</span><br><span class=\"line\">PrivateTmp=<span class=\"keyword\">true</span></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>重新加载系统服务，并设置开机自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新加载系统服务</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl start nginx.service</span><br><span class=\"line\"><span class=\"comment\"># 开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JDK（Java-环境）安装\"><a href=\"#JDK（Java-环境）安装\" class=\"headerlink\" title=\"JDK（Java 环境）安装\"></a>JDK（Java 环境）安装</h2><blockquote>\n<p>注意：这 ⾥ 安装的是 Oracle JDK</p>\n</blockquote>\n<h3 id=\"准备-JDK-安装包\"><a href=\"#准备-JDK-安装包\" class=\"headerlink\" title=\"准备 JDK 安装包\"></a>准备 JDK 安装包</h3><p>我这里下载的是 <code>jdk-8u251-linux-x64.tar.gz</code> 安装包，并将其放在了 <code>/opt</code> 目录下</p>\n<h3 id=\"卸载已有的-OPENJDK（如果有）\"><a href=\"#卸载已有的-OPENJDK（如果有）\" class=\"headerlink\" title=\"卸载已有的 OPENJDK（如果有）\"></a>卸载已有的 OPENJDK（如果有）</h3><p>如果系统 ⾃ 带有 <code>OpenJDK</code>，可以按照如下步骤提前卸载之。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep java</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308133517.png\" alt=\"image-20220308132559705\"></p>\n<p>接下来可以将 <code>java</code> 开头的安装包均卸载即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64</span><br><span class=\"line\">yum -y remove java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64</span><br><span class=\"line\">... 省略 ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建目录并解压\"><a href=\"#创建目录并解压\" class=\"headerlink\" title=\"创建目录并解压\"></a>创建目录并解压</h3><p>1、在 <code>/usr/local/</code> 下创建 <code>java</code> 文件夹并进入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> java</span><br><span class=\"line\"><span class=\"built_in\">cd</span> java</span><br></pre></td></tr></table></figure>\n\n<p>2、将上 ⾯ 准备好的 JDK 安装包解压到 /usr/local/java 中即可</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf <span class=\"regexp\">/opt/</span>jdk-<span class=\"number\">8</span>u251-linux-x64.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>解压完之后， /usr/local/java ⽬ 录中会出现 ⼀ 个 jdk1.8.0_251 的 ⽬ 录</p>\n<h3 id=\"配置-JDK-环境变量\"><a href=\"#配置-JDK-环境变量\" class=\"headerlink\" title=\"配置 JDK 环境变量\"></a>配置 JDK 环境变量</h3><p>编辑 <code>/etc/profile</code> 文件，在文件尾部加入如下 <code>JDK</code> 环境配置即可</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">JAVA_HOME</span>=/usr/local/java/jdk1.8.0_251</span><br><span class=\"line\"><span class=\"attribute\">CLASSPATH</span>=<span class=\"variable\">$JAVA_HOME</span>/lib/</span><br><span class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$JAVA_HOME/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>\n\n<p>然后执 ⾏ 如下命令让环境变量 ⽣ 效</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">source</span> <span class=\"regexp\">/etc/</span>profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证-JDK-安装结果\"><a href=\"#验证-JDK-安装结果\" class=\"headerlink\" title=\"验证 JDK 安装结果\"></a>验证 JDK 安装结果</h3><p>输入如下命令即可检查安装结果：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -<span class=\"built_in\">version</span></span><br><span class=\"line\"></span><br><span class=\"line\">javac</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308153603.png\" alt=\"image-20220308153602981\"></p>\n<h2 id=\"Maven-项目构建和管理工具安装\"><a href=\"#Maven-项目构建和管理工具安装\" class=\"headerlink\" title=\"Maven 项目构建和管理工具安装\"></a>Maven 项目构建和管理工具安装</h2><h3 id=\"准备-MAVEN-安装包并解压\"><a href=\"#准备-MAVEN-安装包并解压\" class=\"headerlink\" title=\"准备 MAVEN 安装包并解压\"></a>准备 MAVEN 安装包并解压</h3><p>这 ⾥ 下载的是 <code>apache-maven-3.6.3-bin.tar.gz</code> 安装包，并将其放置于提前创建好的 <code>/usr/local/maven</code> ⽬ 录下。</p>\n<p>执 ⾏ 命令解压之：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf /opt/apache-maven-3.6.3-bin.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>即可在当前 ⽬ 录得到 /usr/local/maven/apache-maven-3.6.3 ⽬ 录</p>\n<h3 id=\"配置-MAVEN-加速镜像源\"><a href=\"#配置-MAVEN-加速镜像源\" class=\"headerlink\" title=\"配置 MAVEN 加速镜像源\"></a>配置 MAVEN 加速镜像源</h3><p>这 ⾥ 配置的是阿 ⾥ 云的 maven 镜像源。</p>\n<p>编辑修改 <code>/usr/local/maven/apache-maven-3.6.3/conf/settings.xml</code> ⽂ 件，在 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 标签对 ⾥ 添加如下内容即可：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308154746.png\" alt=\"image-20220308154746010\"></p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>因为下载的是 ⼆ 进制版安装包，所以解压完，配置好环境变量即可使用了。</p>\n<p>编辑修改 <code>/etc/profile</code> ⽂ 件，在 ⽂ 件尾部添加如下内容，配置 <code>maven</code> 的安装路径</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">MAVEN_HOME</span>=/usr/local/maven/apache-maven-3.6.3</span><br><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">PATH</span>=<span class=\"variable\">$MAVEN_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>接下来执行 <code>source /etc/profile</code> 来刷新环境变量，让 <code>maven</code> 环境的路径配置生效</p>\n<h3 id=\"检验安装结果\"><a href=\"#检验安装结果\" class=\"headerlink\" title=\"检验安装结果\"></a>检验安装结果</h3><p>执 ⾏ <code>mvn –v</code> ，能打印出 <code>maven</code> 版本信息说明安装、配置成功：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308155428.png\" alt=\"image-20220308155428868\"></p>\n<h2 id=\"Jenkins-安装与配置\"><a href=\"#Jenkins-安装与配置\" class=\"headerlink\" title=\"Jenkins 安装与配置\"></a>Jenkins 安装与配置</h2><h3 id=\"安装-Jenkins-Master\"><a href=\"#安装-Jenkins-Master\" class=\"headerlink\" title=\"安装 Jenkins Master\"></a>安装 Jenkins Master</h3><blockquote>\n<p><a href=\"https://www.jenkins.io/zh/doc/book/installing/\">Jenkins 官方安装文档</a></p>\n</blockquote>\n<p><strong>Docker 安装 Jenkins（推荐）</strong></p>\n<ul>\n<li><p>使用 Docker 安装 Jenkins</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用命令直接安装（包含构建工具）</span></span><br><span class=\"line\">docker run -d --name jenkins --restart always \\</span><br><span class=\"line\">--user root -p <span class=\"number\">8080</span>:<span class=\"number\">8080</span> -p <span class=\"number\">50000</span>:<span class=\"number\">50000</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>jenkins_home:<span class=\"regexp\">/var/</span>jenkins_home \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/maven/</span>apache-maven-<span class=\"number\">3.6</span>.<span class=\"number\">3</span>:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/maven/</span>apache-maven-<span class=\"number\">3.6</span>.<span class=\"number\">3</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251 \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>run<span class=\"regexp\">/docker.sock:/</span>var<span class=\"regexp\">/run/</span>docker.sock \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 简易安装</span></span><br><span class=\"line\">docker run -d --name jenkins --restart always \\</span><br><span class=\"line\">--user root -p <span class=\"number\">8080</span>:<span class=\"number\">8080</span> -p <span class=\"number\">50000</span>:<span class=\"number\">50000</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/u01/</span>jenkins_home:<span class=\"regexp\">/var/</span>jenkins_home \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>run<span class=\"regexp\">/docker.sock:/</span>var<span class=\"regexp\">/run/</span>docker.sock \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>War 安装 Jenkins</strong></p>\n<ul>\n<li>获取 Jenkins 安装包</li>\n</ul>\n<p>下载页面：<a href=\"https://jenkins.io/zh/download/\">https://jenkins.io/zh/download/</a></p>\n<p>安装文件：jenkins.war</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、将最新的稳定Jenkins WAR包 下载到您计算机上的相应目录。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、在下载的目录内打开一个终端/命令提示符窗口到。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、运行命令java -jar jenkins.war</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、浏览http:<span class=\"comment\">//localhost:8080并等到*Unlock Jenkins*页面出现。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、继续使用Post-installation setup wizard后面步骤设置向导。</span><br></pre></td></tr></table></figure>\n\n<p><strong>解锁 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174609.png\" alt=\"image-20220309174609417\"></p>\n<p>获取并输入 admin 账户密码（我这里是 docker 安装的，目录是映射到指定位置的，密码实际存放路径以提示为主）</p>\n<p><code>cat /var/jenkins_home/secrets/initialAdminPassword</code></p>\n<p><strong>跳过插件安装</strong></p>\n<p>因为 Jenkins 插件需要连接默认官网下载，速度非常慢，而且容易安装失败，所以我们暂时先跳过插件安装。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174531.png\" alt=\"image-20220309174531892\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174831.png\" alt=\"image-20220309174831016\"></p>\n<p><strong>添加一个管理员账户，并进入 Jenkins 后台</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174954.png\" alt=\"image-20220309174953956\"></p>\n<p><strong>保存并完成</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175748.png\" alt=\"image-20220309175748708\"></p>\n<p><strong>开始使用 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175816.png\" alt=\"image-20220309175816074\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175908.png\" alt=\"image-20220309175908276\"></p>\n<h3 id=\"安装-Jenkins-Slave\"><a href=\"#安装-Jenkins-Slave\" class=\"headerlink\" title=\"安装 Jenkins Slave\"></a>安装 Jenkins Slave</h3><p><code>系统设置 &gt; 节点管理 &gt; 新建节点</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112501.png\" alt=\"image-20220315112454277\"></p>\n<p><strong><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112942.png\" alt=\"image-20220315112942218\" style=\"zoom:67%;\" /></strong></p>\n<p>下载 <code>agent.jar</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112649.png\" alt=\"image-20220315112649284\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建agent目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /dev/jenkinsagent</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /dev/jenkinsagent</span><br><span class=\"line\">wget http://192.168.88.230:8080/jnlpJars/agent.jar</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 编写启动脚本</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 0bdf5bac23b7d4e66880934b25bda0f353509529b7f843ebb688614ba389680e &gt; secret-file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar agent.jar -jnlpUrl http://192.168.88.230:8080/computer/build/jenkins-agent.jnlp -secret @secret-file -workDir <span class=\"string\">&quot;/u01/jenkins-agent&quot;</span> 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 启动agent</span></span><br><span class=\"line\">sh -x start.sh</span><br><span class=\"line\">ps aux | grep agent</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Jenkins-插件管理\"><a href=\"#Jenkins-插件管理\" class=\"headerlink\" title=\"Jenkins 插件管理\"></a>Jenkins 插件管理</h3><p>Jenkins 本身不提供很多功能，我们可以通过使用插件来满足我们的使用。例如从 Gitlab 拉取代码，使用 Maven 构建项目等功能需要依靠插件完成。接下来演示如何下载插件。</p>\n<p><strong>修改 Jenkins 插件下载地址</strong></p>\n<p>Jenkins 国外官方插件地址下载速度非常慢，所以可以修改为国内插件地址：</p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180153.png\" alt=\"image-20220309180153473\"></p>\n<p>这样做是为了把 Jenkins 官方的插件列表下载到本地，接着修改地址文件，替换为国内插件地址：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入配置目录 （目录视情况而定，安装的jenkins_home下）</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/var/jenkins_home/updates</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">sed -i &#x27;s/http:\\/\\<span class=\"string\">/updates.jenkins</span>\u0002ci.org\\<span class=\"string\">/download/https</span>:\\/\\<span class=\"string\">/mirrors.tuna.tsinghua.edu.cn</span>\\<span class=\"string\">/jenkins/g</span>&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\\/\\<span class=\"string\">/www.google.com/https</span>:\\/\\<span class=\"string\">/www.baidu.com/g</span>&#x27; default.json</span><br></pre></td></tr></table></figure>\n\n<p>最后，Manage Plugins 点击 Advanced，把 Update Site 改为国内插件下载地址</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180807.png\" alt=\"image-20220309180807037\"></p>\n<p>Sumbit 后，在浏览器输入： <a href=\"http://120.78.204.65:8180/restart\">http://120.78.204.65:8180/restart</a> ，重启 Jenkins。</p>\n<p><strong>下载中文汉化插件</strong></p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available，搜索&quot;Chinese&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181055.png\" alt=\"image-20220309181055822\"></p>\n<p>完成后如下图所示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181122.png\" alt=\"image-20220309181122066\"></p>\n<p>重启 Jenkins 之后，就看到 Jenkins 汉化了！（PS：某些菜单可能会汉化失败）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181408.png\" alt=\"image-20220309181408200\"></p>\n<h3 id=\"Jenkins-用户权限管理\"><a href=\"#Jenkins-用户权限管理\" class=\"headerlink\" title=\"Jenkins 用户权限管理\"></a>Jenkins 用户权限管理</h3><p>我们可以利用 <code>Role-based Authorization Strategy</code> 插件来管理 Jenkins 用户权限</p>\n<p><strong>安装 Role-based Authorization Strategy 插件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181600.png\" alt=\"image-20220309181600238\"></p>\n<p><strong>开启权限全局安全配置</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181914.png\" alt=\"image-20220309181914873\"></p>\n<p>授权策略切换为 “Role-Based Strategy”，保存</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181940.png\" alt=\"image-20220309181940124\"></p>\n<p><strong>创建角色</strong></p>\n<p>在系统管理页面进入 Manage and Assign Roles</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182209.png\" alt=\"image-20220309182209559\"></p>\n<p>点击 “Manage Roles”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182301.png\" alt=\"image-20220309182301430\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182435.png\" alt=\"image-20220309182435102\"></p>\n<p><code>Global roles（全局角色）</code>：管理员等高级用户可以创建基于全局的角色</p>\n<p><code>Item roles（项目角色）</code>： 针对某个或者某些项目的角色</p>\n<p><code>Node roles（节点角色）</code>：节点相关的权限</p>\n<p>我们添加以下三个角色：</p>\n<ul>\n<li>baseRole：该角色为全局角色。这个角色需要绑定 Overall 下面的 Read 权限，是为了给所有用户绑定最基本的 Jenkins 访问权限。注意：如果不给后续用户绑定这个角色，会报错误：<code>用户名 is missing the Overall/Read permission</code></li>\n<li>role1：该角色为项目角色。使用正则表达式绑定 <code>.vx-chx.\\*</code>，意思是只能操作 vx-chx 开头的项目。</li>\n<li>role2：该角色为项目角色。使用正则表达式绑定 <code>.vx-phm.\\*</code>，意思是只能操作 vx-phm 开头的项目。</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182812.png\" alt=\"image-20220309182812353\"></p>\n<p>保存</p>\n<p><strong>创建用户</strong></p>\n<p>在系统管理页面进入 Manage Users</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182917.png\" alt=\"image-20220309182917026\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183107.png\" alt=\"image-20220309183107565\"></p>\n<p>分别创建两个用户：vxchx 和 vxphm</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183223.png\" alt=\"image-20220309183223041\"></p>\n<p><strong>给用户分配角色</strong></p>\n<p>系统管理页面进入 Manage and Assign Roles，点击 Assign Roles</p>\n<p>绑定规则如下：</p>\n<ul>\n<li><p>vxchx 用户分别绑定 baseRole 和 role1 角色</p>\n</li>\n<li><p>vxphm 用户分别绑定 baseRole 和 role2 角色</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183455.png\" alt=\"image-20220309183455591\"></p>\n</li>\n</ul>\n<p>保存</p>\n<p><strong>创建项目测试权限</strong></p>\n<p>以 admin 管理员账户创建两个项目，分别为 vx-chx-test 和 vx-phm-test</p>\n<p>结果为： vxchx 用户登录，只能看到 vx-chx-test 项目 vxphm 用户登录，只能看到 vx-phm-test 项目</p>\n<h3 id=\"Jenkins-凭证管理\"><a href=\"#Jenkins-凭证管理\" class=\"headerlink\" title=\"Jenkins 凭证管理\"></a>Jenkins 凭证管理</h3><p>凭据可以用来存储需要密文保护的数据库密码、Gitlab 密码信息、Docker 私有仓库密码等，以便 Jenkins 可以和这些第三方的应用进行交互。</p>\n<p><strong>安装 Credentials Binding 插件</strong></p>\n<p>要在 Jenkins 使用凭证管理功能，需要安装 <code>Credentials Binding</code> 插件</p>\n<blockquote>\n<p>注：新版本已经默认安装了此插件，这里无需另外再安装了</p>\n</blockquote>\n<p>系统管理中选择 <code>Manage Credentials</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184117.png\" alt=\"image-20220309184117479\"></p>\n<p>可以添加的凭证有 5 种：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184218.png\" alt=\"image-20220309184218399\"></p>\n<ul>\n<li>Username with password：用户名和密码</li>\n<li>SSH Username with private key： 使用 SSH 用户和密钥</li>\n<li>Secret file：需要保密的文本文件，使用时 Jenkins 会将文件复制到一个临时目录中，再将文件路径 设置到一个变量中，等构建结束后，所复制的 Secret file 就会被删除。</li>\n<li>GitHub App：GitHub 的 API 令牌</li>\n<li>Secret text：需要保存的一个加密的文本串，如钉钉机器人或 Github 的 api token</li>\n<li>Certificate：通过上传证书文件的方式</li>\n</ul>\n<p>常用的凭证类型有：<strong>Username with password（用户密码）</strong> 和 <strong>SSH Username with private key（SSH 密钥）</strong></p>\n<p>接下来以使用 Git 工具到 Gitlab 拉取项目源码为例，演示 Jenkins 的如何管理 Gitlab 的凭证。</p>\n<p><strong>安装 Git 插件和 Git 工具</strong></p>\n<p>为了让 Jenkins 支持从 Gitlab 拉取源码，需要安装 Git 插件以及在服务器上安装 Git 工具。</p>\n<p>Git 插件安装：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310094719.png\" alt=\"image-20220310094712046\"></p>\n<p>服务器上安装 Git 工具（以 CentOS7 为例）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install git -y</span><br><span class=\"line\"><span class=\"comment\"># 安装后查看版本</span></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>用户密码类型</strong></p>\n<p>1）创建凭据</p>\n<p><code>Jenkins -&gt; 凭证 -&gt; 系统 -&gt; 全局凭据 -&gt; 添加凭据</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310095750.png\" alt=\"image-20220310095750604\"></p>\n<p>选择 “Username with password”，输入 Gitlab 的用户名和密码，点击 “确定”。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100359.png\" alt=\"image-20220310100359012\"></p>\n<p><strong>SSH 密钥类型</strong></p>\n<p>SSH 免密登录示意图</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100539.png\" alt=\"image-20220310100539140\"></p>\n<p>1）使用 root 用户生成公钥和私钥</p>\n<p><code>ssh-keygen -t rsa</code></p>\n<p>在/root/.ssh/目录保存了公钥和使用</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101013.png\" alt=\"image-20220310101013313\" style=\"zoom:67%;\" />\n\n<p>id_rsa：私钥文件</p>\n<p>id_rsa.pub：公钥文件</p>\n<p>2）把生成的公钥放在 Gitlab 中</p>\n<p><code>登录gitlab -&gt; 点击头像 -&gt; Settings -&gt; SSH Keys</code></p>\n<p>复制刚才 id_rsa.pub 文件的内容到这里，点击 “Add Key”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101538.png\" alt=\"image-20220310101538008\"></p>\n<p>3）在 Jenkins 中添加凭证，配置私钥</p>\n<p>在 Jenkins 添加一个新的凭证，类型为 “SSH Username with private key”，把刚才生成私有文件内容复制过来</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102203.png\" alt=\"image-20220310102203814\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102427.png\" alt=\"image-20220310102427213\"></p>\n<h3 id=\"Jenkins-关联-JDK-和-Maven\"><a href=\"#Jenkins-关联-JDK-和-Maven\" class=\"headerlink\" title=\"Jenkins 关联 JDK 和 Maven\"></a>Jenkins 关联 JDK 和 Maven</h3><p><strong>关联 JDK</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; JDK -&gt; 新增JDK，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102744.png\" alt=\"image-20220310102744563\"></p>\n<p><strong>关联 Maven</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; Maven -&gt; 新增Maven，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102836.png\" alt=\"image-20220310102835922\"></p>\n<h3 id=\"Jenkins-关闭跨站请求伪造保护\"><a href=\"#Jenkins-关闭跨站请求伪造保护\" class=\"headerlink\" title=\"Jenkins 关闭跨站请求伪造保护\"></a>Jenkins 关闭跨站请求伪造保护</h3><ul>\n<li>Docker 容器运行</li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、进入运行的容器</span></span><br><span class=\"line\">docker exec -u root -<span class=\"keyword\">it</span> 你的Jenkins容器名称或者容器<span class=\"built_in\">id</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、输入命令，编辑jenkins启动配置文件</span></span><br><span class=\"line\">vi /usr/<span class=\"keyword\">local</span>/bin/jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、在图中标记处，加入以下配置</span></span><br><span class=\"line\">-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、重启容器</span></span><br><span class=\"line\">docker restart jenkins</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220312001027.png\" alt=\"image-20220312001020531\"></p>\n<h3 id=\"添加-Jenkins-全局变量\"><a href=\"#添加-Jenkins-全局变量\" class=\"headerlink\" title=\"添加 Jenkins 全局变量\"></a><strong>添加 Jenkins 全局变量</strong></h3><p><code>Jenkins -&gt; 系统管理 -&gt; 全局属性 -&gt; 添加三个环境变量，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310103242.png\" alt=\"image-20220310103241974\"></p>\n<h3 id=\"Jenkins-数据迁移和备份\"><a href=\"#Jenkins-数据迁移和备份\" class=\"headerlink\" title=\"Jenkins 数据迁移和备份\"></a>Jenkins 数据迁移和备份</h3><p>将安装 Jenkins 的机器上的 <code>jenkins_home</code> 目录下的 config.xml 文件，jobs 文件夹，users 文件夹和 plugins 文件夹打包</p>\n<ul>\n<li>config.xml 是存放配置信息的</li>\n<li>jobs 是存放创建的工程项目的</li>\n<li>users 是存放用户账信息的</li>\n<li>plugins 是存放插件的</li>\n</ul>\n<h3 id=\"Jenkins-删除构建历史\"><a href=\"#Jenkins-删除构建历史\" class=\"headerlink\" title=\"Jenkins 删除构建历史\"></a>Jenkins 删除构建历史</h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//项目名称</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> jobName = <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//删除小于等于maxNumber的构建历史</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> maxNumber = xxx</span><br><span class=\"line\"></span><br><span class=\"line\">Jenkins.instance.getItemByFullName(jobName).builds.findAll &#123;</span><br><span class=\"line\">  it.number &lt;= maxNumber</span><br><span class=\"line\">&#125;.each &#123;</span><br><span class=\"line\">  it.delete()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins-构建-Maven-项目\"><a href=\"#Jenkins-构建-Maven-项目\" class=\"headerlink\" title=\"Jenkins 构建 Maven 项目\"></a>Jenkins 构建 Maven 项目</h2><blockquote>\n<p>构建方式均采用 Jar 包方式，War 方式参考 <a href=\"http://doc.jeecg.com/2043887\">WAR 部署方案 · JeecgBoot 开发文档</a></p>\n</blockquote>\n<h3 id=\"Jenkins-项目构建类型\"><a href=\"#Jenkins-项目构建类型\" class=\"headerlink\" title=\"Jenkins 项目构建类型\"></a>Jenkins 项目构建类型</h3><p>Jenkins 中自动构建项目的类型有很多，常用的有以下三种：</p>\n<ul>\n<li>自由风格软件项目（FreeStyle Project）</li>\n<li>Maven 项目（Maven Project）</li>\n<li>流水线项目（Pipeline Project）</li>\n</ul>\n<p>每种类型的构建其实都可以完成一样的构建过程与结果，只是在操作方式、灵活度等方面有所区别，在实际开发中可以根据自己的需求和习惯来选择。（PS：个人推荐使用流水线类型，因为灵活度非常高）</p>\n<h3 id=\"自由风格项目构建\"><a href=\"#自由风格项目构建\" class=\"headerlink\" title=\"自由风格项目构建\"></a>自由风格项目构建</h3><p>下面演示创建一个自由风格项目来完成项目的集成过程：</p>\n<p><code>拉取代码 -&gt; 编译 -&gt; 打包 -&gt; 部署</code></p>\n<p><strong>拉取代码</strong></p>\n<p>1）创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112707.png\" alt=\"image-20220310112707895\"></p>\n<p>2）源码管理，从 Gitlab 拉取代码</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112815.png\" alt=\"image-20220310112815147\"></p>\n<p><strong>编译打包</strong></p>\n<p><code>构建 -&gt; 添加构建步骤 -&gt; 执行shell</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;开始编译和打包&quot;</span></span><br><span class=\"line\">mvn clean package</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;编译和打包结束&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112952.png\" alt=\"image-20220310112952936\"></p>\n<p><strong>部署</strong></p>\n<p>把项目部署到远程的服务器上，并启动</p>\n<p>1）安装 <code>Publish Over SSH</code> 插件</p>\n<p>Jenkins 本身无法实现远程部署到服务器上的功能，需要安装 <code>Publish Over SSH</code> 插件实现</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310113332.png\" alt=\"image-20220310113332137\"></p>\n<p>2）配置 <code>Publish over SSH</code>，添加 SSH 服务器</p>\n<p><code>打开系统管理 -&gt; 系统配置 -&gt; 拉到底部，选择Publish over SSH区域选择新增</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114012.png\" alt=\"image-20220310114012322\"></p>\n<p><code>点击高级 -&gt; 填写服务器密码</code>（也可选择 ssh 验证，在 Jenkins 中配置本机私钥，将公钥发送到目标机器，即可完成无密码登录）</p>\n<p><code>发送命令：ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.xxx.xxx</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114702.png\" alt=\"image-20220310114702171\"></p>\n<ul>\n<li>Passphrase： 密码（目标机器的密码）</li>\n<li>Path to key：key 文件（私钥）的路径</li>\n<li>SSH Server Name： 标识的名字（随便你取什么）</li>\n<li>Hostname： 需要连接 ssh 的主机名或 ip 地址，此处填写应用服务器 IP（建议 ip）</li>\n<li>Username： 用户名</li>\n<li>Remote Directory： 远程目录(要发布的目录, 比如/usr/local/tomcat/webapps/)</li>\n</ul>\n<p>3）添加构建步骤</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115055.png\" alt=\"image-20220310115055853\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115245.png\" alt=\"image-20220310115245384\"></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 脚本参考</span></span><br><span class=\"line\"><span class=\"attribute\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">cd</span> /apps</span><br><span class=\"line\"><span class=\"attribute\">ps</span> -ef|grep jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar|grep -v grep|awk &#x27;&#123;print $<span class=\"number\">2</span>&#125;&#x27;|xargs kill -s <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">BUILD_ID</span>=dontKillMe</span><br><span class=\"line\"><span class=\"attribute\">nohup</span> java -jar jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar &gt; jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.log <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure>\n\n<p>4）点击 “立即构建”，开始构建过程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115628.png\" alt=\"image-20220310115628609\"></p>\n<p>5）构建成功，并自动化部署，访问测试！</p>\n<h3 id=\"Maven-项目构建\"><a href=\"#Maven-项目构建\" class=\"headerlink\" title=\"Maven 项目构建\"></a>Maven 项目构建</h3><p>1）安装 Maven Integration Plugin（高版本的 Jenkins 已预装了此插件）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135008.png\" alt=\"image-20220310135008339\"></p>\n<p>2）创建 Maven 项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135103.png\" alt=\"image-20220310135103444\"></p>\n<p>3）配置项目</p>\n<p>拉取代码和远程部署的过程和自由风格项目一样，只是 “构建” 部分不同</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135300.png\" alt=\"image-20220310135300799\"></p>\n<h3 id=\"Pipeline-流水线项目构建\"><a href=\"#Pipeline-流水线项目构建\" class=\"headerlink\" title=\"Pipeline 流水线项目构建(*)\"></a>Pipeline 流水线项目构建(*)</h3><h4 id=\"Pipeline-简介\"><a href=\"#Pipeline-简介\" class=\"headerlink\" title=\"Pipeline 简介\"></a>Pipeline 简介</h4><p><strong>1）概念</strong></p>\n<p>Pipeline，简单来说，就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p>\n<p><strong>2）使用 Pipeline 有以下好处（来自翻译自官方文档）：</strong></p>\n<p>代码：Pipeline 以代码的形式实现，通常被检入源代码控制，使团队能够编辑，审查和迭代其传送流 程。持久：无论是计划内的还是计划外的服务器重启。Pipeline 都是可恢复的。可停止：Pipeline 可接 收交互式输入，以确定是否继续执行 Pipeline。多功能：Pipeline 支持现实世界中复杂的持续交付要求。它支持 fork/join、循环执行，并行执行任务的功能。可扩展：Pipeline 插件支持其 DSL 的自定义扩展，以及与其他插件集成的多个选项。</p>\n<p><strong>3）如何创建 Jenkins Pipeline 呢？</strong></p>\n<ul>\n<li>Pipeline 脚本是由 <strong>Groovy</strong> 语言实现的，但是我们没必要单独去学习 Groovy</li>\n<li>Pipeline 支持两种语法：<strong>Declarative</strong>(声明式)和 <strong>Scripted Pipeline</strong>(脚本式)语法</li>\n<li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中（一般我们都推荐在 Jenkins 中直接从源代码控制(SCM)中直接载入 Jenkinsfile Pipeline 这种方法）。</li>\n</ul>\n<h4 id=\"Pipeline-语法快速入门\"><a href=\"#Pipeline-语法快速入门\" class=\"headerlink\" title=\"Pipeline 语法快速入门\"></a>Pipeline 语法快速入门</h4><p><strong>1）Declarative 声明式-Pipeline</strong></p>\n<p>创建一个流水线项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154144.png\" alt=\"image-20220310154144897\"></p>\n<p><code>流水线 -&gt; 选择HelloWorld模板</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154618.png\" alt=\"image-20220310154618000\"></p>\n<p>生成的内容如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Hello&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>stages：</strong> 代表整个流水线的所有执行阶段。通常 stages 只有 1 个，里面包含多个 stage</p>\n</li>\n<li><p><strong>stage：</strong> 代表流水线中的某个阶段，可能出现 n 个。一般分为拉取代码，编译构建，部署等阶段。</p>\n</li>\n<li><p><strong>steps：</strong> 代表一个阶段内需要执行的逻辑。steps 里面是 shell 脚本，git 拉取代码，ssh 远程发布等任意内容。</p>\n</li>\n</ul>\n<p>编写一个简单声明式的 Pipeline：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;编译构建&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;项目部署&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击构建，进入 <code>Blue Ocean</code> 可以看到整个构建过程</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155756.png\" alt=\"image-20220310155756052\" style=\"zoom: 150%;\" />\n\n<p><strong>2）Scripted Pipeline 脚本式-Pipeline</strong></p>\n<p>创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155938.png\" alt=\"image-20220310155938728\"></p>\n<p>选择 <code>Scripted Pipeline&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310160044.png\" alt=\"image-20220310160044398\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> mvnHome</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Preparation&#x27;</span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Results&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Node：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，后续讲到 Jenkins 的 Master-Slave 架构的时候用到。</li>\n<li>Stage：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如： Build、Test、Deploy，Stage 是一个逻辑分组的概念。</li>\n<li>Step：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像， 由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令 一样。</li>\n</ul>\n<p>编写一个简单的脚本式 Pipeline</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    def mvnHome</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;拉取代码&#x27;</span></span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;编译构建&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;项目部署&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构建结果和声明式一样！</p>\n<p><strong>Pipeline Script from SCM</strong></p>\n<p>刚才我们都是直接在 Jenkins 的 UI 界面编写 Pipeline 代码，这样不方便脚本维护，建议把 Pipeline 脚本放在项目中（一起进行版本控制）</p>\n<p><strong>1）在项目根目录建立 Jenkinsfile 文件，把内容复制到该文件中</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310163924.png\" alt=\"image-20220310163924603\" style=\"zoom:67%;\" />\n\n<p>把 Jenkinsfile 上传到 Gitlab</p>\n<p><strong>2）在项目中引用该文件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164207.png\" alt=\"image-20220310164207097\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164225.png\" alt=\"image-20220310164225747\"></p>\n<h3 id=\"Jenkinsfile\"><a href=\"#Jenkinsfile\" class=\"headerlink\" title=\"Jenkinsfile\"></a>Jenkinsfile</h3><h4 id=\"Jenkinsfile-环境变量\"><a href=\"#Jenkinsfile-环境变量\" class=\"headerlink\" title=\"Jenkinsfile 环境变量\"></a>Jenkinsfile 环境变量</h4><table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BRANCH_NAME</td>\n<td>在 multibranch 项目中，BRANCH_NAME 用于标明构建分支的名称。</td>\n</tr>\n<tr>\n<td>CHANGE_ID</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更 ID，比如 Pull Request</td>\n</tr>\n<tr>\n<td>CHANGE_URL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的 URL</td>\n</tr>\n<tr>\n<td>CHANGE_TITLE</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的标题</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_DISPLAY_NAME</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的显示名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_EMAIL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的邮件地址</td>\n</tr>\n<tr>\n<td>CHANGE_TARGET</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于合并后的分支信息等</td>\n</tr>\n<tr>\n<td>BUILD_NUMBER</td>\n<td>当前的构建编号</td>\n</tr>\n<tr>\n<td>BUILD_ID</td>\n<td>在 1.597 版本后引进，表示当前构建 ID</td>\n</tr>\n<tr>\n<td>BUILD_DISPLAY_NAME</td>\n<td>当前构建的显示信息</td>\n</tr>\n<tr>\n<td>JOB_NAME</td>\n<td>构建 Job 的全称，包含项目信息</td>\n</tr>\n<tr>\n<td>JOB_BASE_NAME</td>\n<td>除去项目信息的 Job 名称</td>\n</tr>\n<tr>\n<td>BUILD_TAG</td>\n<td>构建标签</td>\n</tr>\n<tr>\n<td>EXECUTOR_NUMBER</td>\n<td>执行器编号，用于标识构建器的不同编号</td>\n</tr>\n<tr>\n<td>NODE_NAME</td>\n<td>构建节点的名称</td>\n</tr>\n<tr>\n<td>NODE_LABELS</td>\n<td>节点标签</td>\n</tr>\n<tr>\n<td>WORKSPACE</td>\n<td>构建时使用的工作空间的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_HOME</td>\n<td>JENKINS 根目录的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_URL</td>\n<td>Jenkins 的 URL 信息</td>\n</tr>\n<tr>\n<td>BUILD_URL</td>\n<td>构建的 URL 信息</td>\n</tr>\n<tr>\n<td>JOB_URL</td>\n<td>构建 Job 的 URL 信息</td>\n</tr>\n<tr>\n<td>GIT_COMMIT</td>\n<td>git 提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_COMMIT</td>\n<td>当前分支上次提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_SUCCESSFUL_COMMIT</td>\n<td>当前分支上次成功构建时提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_BRANCH</td>\n<td>远程分支名称</td>\n</tr>\n<tr>\n<td>GIT_LOCAL_BRANCH</td>\n<td>本地分支名称</td>\n</tr>\n<tr>\n<td>GIT_URL</td>\n<td>远程 URL 地址</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_NAME</td>\n<td>Git 提交者的名称</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_NAME</td>\n<td>Git Author 的名称</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_EMAIL</td>\n<td>Git 提交者的 email 地址</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_EMAIL</td>\n<td>Git Author 的 email 地址</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION</td>\n<td>Mercurial 的版本 ID 信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_SHORT</td>\n<td>Mercurial 的版本 ID 缩写</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_NUMBER</td>\n<td>Mercurial 的版本号信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_BRANCH</td>\n<td>分支版本信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REPOSITORY_URL</td>\n<td>仓库 URL 信息</td>\n</tr>\n<tr>\n<td>SVN_REVISION</td>\n<td>Subversion 的当前版本信息</td>\n</tr>\n<tr>\n<td>SVN_URL</td>\n<td>当前工作空间中被 checkout 的 Subversion 工程的 URL 地址信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的构建触发器\"><a href=\"#常用的构建触发器\" class=\"headerlink\" title=\"常用的构建触发器\"></a>常用的构建触发器</h3><p>Jenkins 内置 4 种构建触发器：</p>\n<ul>\n<li>触发远程构建</li>\n<li>其他工程构建后触发（Build after other projects are build）</li>\n<li>定时构建（Build periodically）</li>\n<li>轮询 SCM（Poll SCM）</li>\n<li>GitHub 钩子触发的 GIT SCM 轮询（GitHub hook trigger for GITScm polling）</li>\n</ul>\n<p><strong>触发远程构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164928.png\" alt=\"image-20220310164928630\"></p>\n<p>触发构建 url：<a href=\"http://192.168.88.86:8180/job/vx-phm/build?token\">http://192.168.88.86:8180/job/vx-phm/build?token</a> = abcabc</p>\n<p><strong>其他工程构建后触发</strong></p>\n<p>1）创建 pre_job 流水线工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170455.png\" alt=\"image-20220310170454942\"></p>\n<p>2）配置需要触发的工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170935.png\" alt=\"image-20220310170935519\"></p>\n<p><strong>定时构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171234.png\" alt=\"image-20220310171234011\"></p>\n<p>定时字符串从左往右分别为： 分 时 日 月 周</p>\n<p>一些定时表达式的例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每30分钟构建一次：H代表形参 H/30 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span> 10:02 10:32</span><br><span class=\"line\"></span><br><span class=\"line\">每2个小时构建一次: H H/2 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天的8点，12点，22点，一天构建3次： (多个时间点中间用逗号隔开) 0 8,12,22 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每天中午12点定时构建一次 H 12 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天下午18点定时构建一次 H 18 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">在每个小时的前半个小时内的每10分钟 H(0-29)/10 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每两小时一次，每个工作日上午9点到下午5点(也许是上午10:38，下午12:38，下午2:38，下午</span><br><span class=\"line\">4:38) H H(9-16)/2 <span class=\"emphasis\">* *</span> 1-5</span><br></pre></td></tr></table></figure>\n\n<p><strong>轮询 SCM</strong></p>\n<p>轮询 SCM，是指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171348.png\" alt=\"image-20220310171348558\"></p>\n<p>注意：此构建触发器，Jenkins 会定时扫描本地整个项目的代码，增大系统的开销，不建议使用。</p>\n<h3 id=\"Git-Hook-自动触发构建\"><a href=\"#Git-Hook-自动触发构建\" class=\"headerlink\" title=\"Git Hook 自动触发构建(*)\"></a>Git Hook 自动触发构建(*)</h3><p>刚才我们看到在 Jenkins 的内置构建触发器中，轮询 SCM 可以实现 Gitlab 代码更新，项目自动构建，但是该方案的性能不佳。那有没有更好的方案呢？有的。就是利用 Gitlab 的 webhook 实现代码 push 到仓库，立即触发项目自动构建。</p>\n<p><strong>安装 Gitlab Hook 插件</strong></p>\n<p>需要安装两个插件：</p>\n<p>Gitlab Hook 和 Gitlab</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172047.png\" alt=\"image-20220310172047813\"></p>\n<p><strong>Jenkins 设置自动构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172445.png\" alt=\"image-20220310172445870\"></p>\n<p>等会需要把生成的 webhook URL 配置到 Gitlab 中。</p>\n<p><strong>Gitlab 配置 webhook</strong></p>\n<p>1）开启 webhook 功能</p>\n<p><code>使用root账户登录到后台，点击Admin Area -&gt; Settings -&gt; Network</code></p>\n<p><code>勾选&quot;Allow requests to the local network from web hooks and services&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172805.png\" alt=\"image-20220310172805087\"></p>\n<p>2）在项目中添加 webhook</p>\n<p><code>点击项目 -&gt; Settings -&gt; Webhooks</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173325.png\" alt=\"image-20220310173325550\"></p>\n<p>注意：以下设置必须完成，否则会报错！</p>\n<p><code>系统管理 -&gt; 系统配置</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173704.png\" alt=\"image-20220310173704682\"></p>\n<h2 id=\"SonarQube-平台安装与配置\"><a href=\"#SonarQube-平台安装与配置\" class=\"headerlink\" title=\"SonarQube 平台安装与配置\"></a>SonarQube 平台安装与配置</h2><h3 id=\"认识-SonarQube\"><a href=\"#认识-SonarQube\" class=\"headerlink\" title=\"认识 SonarQube\"></a>认识 SonarQube</h3><p>SonarQube 是一款用于代码质量管理的开源工具，是静态代码检查工具，采用 B/S 架构它主要用于管理源代码的质量，可以支持众多计算机语言，比如 php，java, C#, go，C/C++, Cobol, JavaScrip, Groovy 等。sonar 可以通过 PMD，CheckStyle，Findbugs 等等代码规则检测工具来检测你的代码，帮助你发现代码的漏洞，Bug，异味等信息。</p>\n<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><ul>\n<li>一台 SonarQube Server 启动 3 个主要过程：<ul>\n<li>Web 服务器，供开发人员，管理人员浏览高质量的快照并配置 SonarQube 实例</li>\n<li>基于 Elasticsearch 的 Search Server 从 UI 进行后退搜索</li>\n<li>Compute Engine 服务器，负责处理代码分析报告并将其保存在 SonarQube 数据库中</li>\n</ul>\n</li>\n<li>一个 SonarQube 数据库要存储：<ul>\n<li>SonarQube 实例的配置（安全性，插件设置等）</li>\n<li>项目，视图等的质量快照。</li>\n</ul>\n</li>\n<li>服务器上安装了多个 SonarQube 插件，可能包括语言，SCM，集成，身份验证和管理插件</li>\n<li>在构建/持续集成服务器上运行一个或多个 SonarScanner，以分析项目</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135315.png\" alt=\"image-20220314135314928\"></p>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><p>开发人员在 IDE 开发代码，可以安装 SonarLint 插件进行提交前代码扫描 当开发人员提交代码到版本控制系统中，自动触发 jenkins 进行代码扫描</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135418.png\" alt=\"image-20220314135418834\"></p>\n<h4 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h4><p>开源社区版、开发版、企业版、数据中心版</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135630.png\" alt=\"image-20220314135630641\"></p>\n<h3 id=\"Docker-安装-SonarQube\"><a href=\"#Docker-安装-SonarQube\" class=\"headerlink\" title=\"Docker 安装 SonarQube\"></a>Docker 安装 SonarQube</h3><p>这里采用 docker 容器进行安装，简单快捷</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/sonarqube/&#123;data,extensions,logs&#125;</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 -R /u01/cicd/sonarqube/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 调整</span></span><br><span class=\"line\">sysctl -w vm.max_map_count=262144</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 运行</span></span><br><span class=\"line\">docker run -d -p 9000:9000 -p 9092:9092 --name sonarqube \\</span><br><span class=\"line\">\t-v /u01/sonarqube/data:/opt/sonarqube/data \\</span><br><span class=\"line\">\t-v /u01/sonarqube/extensions:/opt/sonarqube/extensions \\</span><br><span class=\"line\">\t-v /u01/sonarqube/logs:/opt/sonarqube/logs \\</span><br><span class=\"line\">\t-e SONAR_JDBC_USERNAME=sonar \\</span><br><span class=\"line\">\t-e SONAR_JDBC_PASSWORD=sonar \\</span><br><span class=\"line\">\t-e SONAR_JDBC_URL=<span class=\"string\">&quot;jdbc:postgresql://192.168.88.236:5432/sonar &quot;</span> \\</span><br><span class=\"line\">\t--restart = always \\</span><br><span class=\"line\">\t--privileged = <span class=\"literal\">true</span> \\</span><br><span class=\"line\">    sonarqube: 8.9.9-community</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 验证</span></span><br><span class=\"line\">docker logs -f sonarqube</span><br></pre></td></tr></table></figure>\n\n<p>访问：<a href=\"http://192.168.88.235:9000/\">http://192.168.88.235:9000/</a></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314134759.png\" alt=\"image-20220314134752470\" style=\"zoom:67%;\" />\n\n<p>默认账号：admin/admin</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314134841.png\" alt=\"image-20220314134841587\" style=\"zoom:67%;\" />\n\n<h3 id=\"配置-Scanner\"><a href=\"#配置-Scanner\" class=\"headerlink\" title=\"配置 Scanner\"></a>配置 Scanner</h3><p><strong>安装</strong></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取安装包</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>binaries.sonarsource.com<span class=\"regexp\">/Distribution/</span>sonar-scanner-cli/sonar-scanner-cli-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压到指定目录</span></span><br><span class=\"line\">unzip -o -d  <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner /</span>opt/sonar-scanner-cli-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑环境变量</span></span><br><span class=\"line\">vim <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\">export SCANNER_HOME =<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux</span><br><span class=\"line\">export PATH = <span class=\"variable\">$PATH</span>:$ SCANNER_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使环境变量生效</span></span><br><span class=\"line\">source <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">sonar-scanner -v</span><br><span class=\"line\">INFO: Scanner configuration file: <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner-4.6.0.2311-linux/</span>conf/sonar-scanner.properties</span><br><span class=\"line\">INFO: Project root configuration file: NONE</span><br><span class=\"line\">INFO: SonarScanner <span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span></span><br><span class=\"line\">INFO: Java <span class=\"number\">11.0</span>.<span class=\"number\">3</span> AdoptOpenJDK (<span class=\"number\">64</span>-bit)</span><br><span class=\"line\">INFO: Linux <span class=\"number\">4.18</span>.<span class=\"number\">0</span>-<span class=\"number\">80</span>.el8.x86_64 amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改使用的 jdk</span></span><br><span class=\"line\">vim <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux<span class=\"regexp\">/bin/</span>sonar-scanner</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SonarQube-平台配置管理\"><a href=\"#SonarQube-平台配置管理\" class=\"headerlink\" title=\"SonarQube 平台配置管理\"></a>SonarQube 平台配置管理</h3><h4 id=\"安装中文插件\"><a href=\"#安装中文插件\" class=\"headerlink\" title=\"安装中文插件\"></a>安装中文插件</h4><p><strong>在线安装：操作如下图</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314140021.png\" alt=\"image-20220314140021697\"></p>\n<h4 id=\"配置强制登录\"><a href=\"#配置强制登录\" class=\"headerlink\" title=\"配置强制登录\"></a>配置强制登录</h4><p>默认所有的项目都可以公开的查看，在企业内肯定要配置成私有的。只有登录后才能查看</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314140634.png\" alt=\"image-20220314140634628\" style=\"zoom:67%;\" />\n\n<h3 id=\"Jenkins-配置-SonarScanner\"><a href=\"#Jenkins-配置-SonarScanner\" class=\"headerlink\" title=\"Jenkins 配置 SonarScanner\"></a>Jenkins 配置 SonarScanner</h3><p>创建 SonarQube 账户 token</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143339.png\" alt=\"image-20220314143339207\" style=\"zoom:67%;\" />\n\n<p>将 token 保存到 Jenkins 凭据中</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143433.png\" alt=\"image-20220314143433728\" style=\"zoom:67%;\" />\n\n<p>在 Jenkins 中安装<code>SonarQube Scanner</code>插件</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143552.png\" alt=\"image-20220314143552551\" style=\"zoom:67%;\" />\n\n<p><code>系统管理 -&gt; 系统配置 -&gt; 往下翻找到SonarQube servers -&gt; Add SonarQube -&gt; 添加服务器，选择凭据</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143936.png\" alt=\"image-20220314143936259\" style=\"zoom:67%;\" />\n\n<h3 id=\"IDEA-配置-SonarLint-插件\"><a href=\"#IDEA-配置-SonarLint-插件\" class=\"headerlink\" title=\"IDEA 配置 SonarLint 插件\"></a>IDEA 配置 SonarLint 插件</h3><p>Token：a3268ff16b2d08b4582ff6a97342cc9d11b4e456</p>\n<h2 id=\"Nexus-制品库安装与配置\"><a href=\"#Nexus-制品库安装与配置\" class=\"headerlink\" title=\"Nexus 制品库安装与配置\"></a>Nexus 制品库安装与配置</h2><h3 id=\"Docker-安装部署-Nexus-制品库\"><a href=\"#Docker-安装部署-Nexus-制品库\" class=\"headerlink\" title=\"Docker 安装部署 Nexus 制品库\"></a>Docker 安装部署 Nexus 制品库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 拉取镜像</span></span><br><span class=\"line\">docker pull sonatype/nexus3:3.30.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/cicd/nexus3/data</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 -R /u01/cicd/nexus3/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 启动容器</span></span><br><span class=\"line\">docker run -itd \\</span><br><span class=\"line\">--privileged = <span class=\"literal\">true</span> --name = nexus3 \\</span><br><span class=\"line\">-p 8081:8081 \\</span><br><span class=\"line\">-v /u01/cicd/nexus3/data:/nexus-data \\</span><br><span class=\"line\">sonatype/nexus3:3.30.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 验证</span></span><br><span class=\"line\">docker logs nexus3 -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 日志中出现 “Started Sonatype Nexus OSS 3.30.0-01” 为启动成功</span></span><br><span class=\"line\"><span class=\"comment\">## http://your-ip-addr: 8081 访问测试</span></span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，默认的 admin 密码存储在了数据目录，获取初始化密码</p>\n<p><code>docker exec -i nexus3 cat /nexus-data/admin.password</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314144935.png\" alt=\"image-20220314144935748\" style=\"zoom:67%;\" />\n\n<p>登录后更新密码</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145010.png\" alt=\"image-20220314145010632\" style=\"zoom:67%;\" />\n\n<h3 id=\"Nexus-制品库搭建\"><a href=\"#Nexus-制品库搭建\" class=\"headerlink\" title=\"Nexus 制品库搭建\"></a>Nexus 制品库搭建</h3><h4 id=\"搭建-Maven-私服（代理仓库）\"><a href=\"#搭建-Maven-私服（代理仓库）\" class=\"headerlink\" title=\"搭建 Maven 私服（代理仓库）\"></a>搭建 Maven 私服（代理仓库）</h4><p>默认安装 nexus 后会自动创建的</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145707.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<p>私服：将外网仓库代理到企业内部本地仓库中。图中的地址可以自定义修改</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145907.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<h4 id=\"搭建制品库（本地仓库）\"><a href=\"#搭建制品库（本地仓库）\" class=\"headerlink\" title=\"搭建制品库（本地仓库）\"></a>搭建制品库（本地仓库）</h4><p>新建 raw 类型的仓库</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145956.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<p>设置仓库的信息</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314150017.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<h3 id=\"上传制品\"><a href=\"#上传制品\" class=\"headerlink\" title=\"上传制品\"></a>上传制品</h3><p>在 nexus 中新建一个<code>maven-hostd</code>仓库，同时在 maven 的配置文件<code>settings.xml</code>中配置 maven-hostd 认证。具体配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span> maven-hosted <span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span> admin <span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span> wx123!@#<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意使用<code>mvn deploy</code>发布时，server.id=repository.id</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy: deploy-file</span><br><span class=\"line\">-DgroupId = xxxxxx pom 中的 groupId</span><br><span class=\"line\">-DartifactId = xxxxxx pom 中的 artifactId</span><br><span class=\"line\">-Dversion = xxxxxx pom 中的版本号 version</span><br><span class=\"line\">-Dpackaging = xxxxxx pom 中打包方式</span><br><span class=\"line\">-Dfile = xxxxxx 本地文件</span><br><span class=\"line\">-Durl = xxxxxx 仓库 url</span><br><span class=\"line\">-DrepositoryId = xxxxxx 对应的是 setting.xml（认证）</span><br></pre></td></tr></table></figure>\n\n<p>直接读取 pom 文件（方便）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy: deploy-file \\</span><br><span class=\"line\">-DgeneratePom = <span class=\"literal\">false</span> \\</span><br><span class=\"line\">-DrepositoryId = maven-hosted \\</span><br><span class=\"line\">-Durl = http://192.168.1.200:8081/repository/maven-hosted/ \\</span><br><span class=\"line\">-DpomFile = pom.xml \\</span><br><span class=\"line\">-Dfile = target/demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<p>自定义 pom 信息（灵活）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy: deploy-file -Dmaven.test.skip = <span class=\"literal\">true</span>  \\</span><br><span class=\"line\">-Dfile = target/demo-0.0.1-SNAPSHOT.jar \\</span><br><span class=\"line\">-DgroupId = com.example \\</span><br><span class=\"line\">-DartifactId = demo \\</span><br><span class=\"line\">-Dversion = 1.1.1  \\</span><br><span class=\"line\">-Dpackaging = jar \\</span><br><span class=\"line\">-DrepositoryId = maven-hosted \\</span><br><span class=\"line\">-Durl = http://192.168.1.200:8081/repository/maven-hosted/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314152655.png\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314152725.png\" alt=\"img\"></p>\n<h3 id=\"Jenkins-安装-Nexus-插件\"><a href=\"#Jenkins-安装-Nexus-插件\" class=\"headerlink\" title=\"Jenkins 安装 Nexus 插件\"></a>Jenkins 安装 Nexus 插件</h3><p>安装<code>Nexus Artifact Upload</code>插件，使用片段生成器生成 DSL</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155314.png\" alt=\"img\"></p>\n<p><strong>发布制品</strong></p>\n<p>安装<code>Maven Artifact ChoiceListProvider (Nexus)</code>插件</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155850.png\" alt=\"images\"></p>\n<p>用户选择制品，在应用服务器通过 salt、ansible 下载制品并部署</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155911.png\" alt=\"img\"></p>\n<h2 id=\"Ansible-安装与配置\"><a href=\"#Ansible-安装与配置\" class=\"headerlink\" title=\"Ansible 安装与配置\"></a>Ansible 安装与配置</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS7.6 使用 YUM 安装</span></span><br><span class=\"line\">yum install ansible -y</span><br><span class=\"line\">ansible --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Anolis OS 8.9 使用 PIP3 安装</span></span><br><span class=\"line\"><span class=\"comment\"># 升级 Python 到 3.9.x</span></span><br><span class=\"line\"><span class=\"comment\"># 下载安装包并解压</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>www.python.org<span class=\"regexp\">/ftp/</span>python<span class=\"regexp\">/3.9.5/</span>Python-<span class=\"number\">3.9</span>.<span class=\"number\">5</span>.tgz</span><br><span class=\"line\">tar zxvf Python-<span class=\"number\">3.9</span>.<span class=\"number\">5</span>.tgz</span><br><span class=\"line\">cd Python-<span class=\"number\">3.9</span>.<span class=\"number\">5</span>/</span><br><span class=\"line\"><span class=\"comment\"># 安装所需的依赖</span></span><br><span class=\"line\">dnf -y install gcc zlib* libffi-devel</span><br><span class=\"line\"><span class=\"comment\"># 编译并安装</span></span><br><span class=\"line\">.<span class=\"regexp\">/configure --prefix=/u</span>sr<span class=\"regexp\">/local/</span>python3 --enable-optimizations</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"><span class=\"comment\"># 删除老的 python3 ，并链接新版本</span></span><br><span class=\"line\">rm -rf <span class=\"regexp\">/usr/</span>bin/python3</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/python3/</span>bin<span class=\"regexp\">/python3 /u</span>sr<span class=\"regexp\">/bin/</span>python3</span><br><span class=\"line\">rm -rf <span class=\"regexp\">/usr/</span>bin/pip3</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/python3/</span>bin<span class=\"regexp\">/pip3 /u</span>sr<span class=\"regexp\">/bin/</span>pip3</span><br><span class=\"line\"><span class=\"comment\"># 查看是否正确安装 python3</span></span><br><span class=\"line\">python3 --version</span><br><span class=\"line\">pip3 --version</span><br><span class=\"line\"><span class=\"comment\"># pip3 安装 ansible</span></span><br><span class=\"line\">python3 -m pip install --user ansible</span><br><span class=\"line\"><span class=\"comment\"># 同样进行链接</span></span><br><span class=\"line\">ln -sf <span class=\"regexp\">/root/</span>.local<span class=\"regexp\">/bin/</span>ansible  <span class=\"regexp\">/usr/</span>bin/ansible</span><br><span class=\"line\">ln -sf <span class=\"regexp\">/root/</span>.local<span class=\"regexp\">/bin/</span>ansible-config <span class=\"regexp\">/usr/</span>bin/ansible-config</span><br><span class=\"line\"><span class=\"comment\"># 查看已安装的软件包</span></span><br><span class=\"line\">python3 -m pip show ansible</span><br><span class=\"line\"><span class=\"comment\"># 检查 ansible 是否被正确安装</span></span><br><span class=\"line\">ansible --version </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-Ansible-主机列表\"><a href=\"#添加-Ansible-主机列表\" class=\"headerlink\" title=\"添加 Ansible 主机列表\"></a>添加 Ansible 主机列表</h3><h4 id=\"基于密钥连接\"><a href=\"#基于密钥连接\" class=\"headerlink\" title=\"基于密钥连接\"></a>基于密钥连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成私钥和公钥（已有则忽略）</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh &amp;&amp; ssh-keygen -t rsa</span><br><span class=\"line\"><span class=\"comment\"># 批量发送到管理机器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1,2,3,6&#125;; <span class=\"keyword\">do</span> ssh-copy-id -i 192.168.1.3<span class=\"variable\">$i</span> ; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-etc-ansible-hosts-文件\"><a href=\"#配置-etc-ansible-hosts-文件\" class=\"headerlink\" title=\"配置 /etc/ansible/hosts 文件\"></a>配置 /etc/ansible/hosts 文件</h4><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[root@ansible ~]</span># vim /etc/ansible/hosts</span><br><span class=\"line\"># 方法一 主机+端口+密钥</span><br><span class=\"line\"><span class=\"string\">[webserver]</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.31:22</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.32</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.33</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.36</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 方法二 别名主机+端口+密钥</span><br><span class=\"line\"><span class=\"string\">[webserver]</span></span><br><span class=\"line\">node1 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">31</span> ansible_ssh_port=<span class=\"number\">22</span></span><br><span class=\"line\">node2 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">32</span> ansible_ssh_port=<span class=\"number\">22</span></span><br><span class=\"line\">node3 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">33</span> ansible_ssh_port=<span class=\"number\">22</span></span><br><span class=\"line\">node6 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">36</span> ansible_ssh_port=<span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试连通性\"><a href=\"#测试连通性\" class=\"headerlink\" title=\"测试连通性\"></a>测试连通性</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webserver -m ping -o</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-NPM-包管理器\"><a href=\"#安装-NPM-包管理器\" class=\"headerlink\" title=\"安装 NPM 包管理器\"></a>安装 NPM 包管理器</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载 node 安装包</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>nodejs.org<span class=\"regexp\">/dist/</span>v14.<span class=\"number\">16.1</span>/node-v14.<span class=\"number\">16.1</span>-linux-x64.tar.xz</span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/usr/</span>local/node</span><br><span class=\"line\">tar xf node-v14.<span class=\"number\">16.1</span>-linux-x64.tar.xz -C <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/node/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑环境变量</span></span><br><span class=\"line\">vim <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\">export NODE_HOME =<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/node/</span>node-v14.<span class=\"number\">16.1</span>-linux-x64</span><br><span class=\"line\">export PATH = <span class=\"variable\">$NODE_HOME</span>/bin:$ PATH</span><br><span class=\"line\"><span class=\"comment\"># 生效</span></span><br><span class=\"line\">source <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\"><span class=\"comment\"># 查看是否安装成功</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置镜像</span></span><br><span class=\"line\">npm config set registry https:<span class=\"regexp\">//</span>registry.npm.taobao.org --global</span><br><span class=\"line\">npm config set disturl https:<span class=\"regexp\">//</span>npm.taobao.org/dist --global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置软链接</span></span><br><span class=\"line\">unlink <span class=\"regexp\">/usr/</span>bin/node</span><br><span class=\"line\">whereis node</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/node/</span>node-v14.<span class=\"number\">16.1</span>-linux-x64<span class=\"regexp\">/bin/</span>node <span class=\"regexp\">/usr/</span>bin/node</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Centos6-配置-YUM\"><a href=\"#Centos6-配置-YUM\" class=\"headerlink\" title=\"Centos6 配置 YUM\"></a>Centos6 配置 YUM</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># centos6 配置 yum</span></span><br><span class=\"line\">sed -i “s|enabled = <span class=\"number\">1</span>|enabled = <span class=\"number\">0</span>|g” <span class=\"regexp\">/etc/yum</span><span class=\"regexp\">/pluginconf.d/</span>fastestmirror.conf</span><br><span class=\"line\">mv <span class=\"regexp\">/etc/yum</span>.repos.d<span class=\"regexp\">/CentOS-Base.repo /</span>etc<span class=\"regexp\">/yum.repos.d/</span>CentOS-Base.repo.backup</span><br><span class=\"line\">curl -o <span class=\"regexp\">/etc/yum</span>.repos.d<span class=\"regexp\">/CentOS-Base.repo https:/</span><span class=\"regexp\">/www.xmpan.com/</span>Centos-<span class=\"number\">6</span>-Vault-Aliyun.repo</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Minio-文件服务安装与配置\"><a href=\"#Minio-文件服务安装与配置\" class=\"headerlink\" title=\"Minio 文件服务安装与配置\"></a>Minio 文件服务安装与配置</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二进制安装</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>dl.min.io<span class=\"regexp\">/server/mi</span>nio<span class=\"regexp\">/release/</span>linux-amd64/minio</span><br><span class=\"line\">chmod +x minio</span><br><span class=\"line\">MINIO_ROOT_USER = admin MINIO_ROOT_PASSWORD = password .<span class=\"regexp\">/minio server /m</span>nt/data --console-address <span class=\"string\">&quot;: 9001&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动</span></span><br><span class=\"line\">MINIO_ROOT_USER = admin MINIO_ROOT_PASSWORD =<span class=\"string\">&#x27;wx123!@#&#x27;</span> nohup <span class=\"regexp\">/u01/mi</span>nio-server<span class=\"regexp\">/minio server /u</span>01<span class=\"regexp\">/minio-server/</span>data --console-address <span class=\"string\">&quot;: 9001&quot;</span> &gt; <span class=\"regexp\">/u01/mi</span>nio-server/minio.log <span class=\"number\">2</span> &gt;&amp;<span class=\"number\">1</span> &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker 安装</span></span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/u01/mi</span>nio/data</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p <span class=\"number\">9000</span>:<span class=\"number\">9000</span> \\</span><br><span class=\"line\">  -p <span class=\"number\">9001</span>:<span class=\"number\">9001</span> \\</span><br><span class=\"line\">  --name minio \\</span><br><span class=\"line\">  -v <span class=\"regexp\">/u01/mi</span>nio<span class=\"regexp\">/data:/</span>data \\</span><br><span class=\"line\">  -v <span class=\"regexp\">/u01/mi</span>nio<span class=\"regexp\">/config:/</span>root/.minio \\</span><br><span class=\"line\">  -e <span class=\"string\">&quot;MINIO_ROOT_USER = q5H0EO1pbv&quot;</span> \\</span><br><span class=\"line\">  -e <span class=\"string\">&quot;MINIO_ROOT_PASSWORD = Wyk1dkn4Xp&quot;</span> \\</span><br><span class=\"line\">  -e MINIO_SERVER_URL = http:<span class=\"regexp\">//</span><span class=\"number\">192.168</span>.<span class=\"number\">88.200</span>:<span class=\"number\">9000</span> \\</span><br><span class=\"line\">  -e MINIO_BROWSER_REDIRECT_URL = http:<span class=\"regexp\">//</span><span class=\"number\">192.168</span>.<span class=\"number\">88.200</span>:<span class=\"number\">9001</span> \\</span><br><span class=\"line\">  quay.io<span class=\"regexp\">/minio/mi</span>nio server /data \\</span><br><span class=\"line\">  --address <span class=\"string\">&quot;: 9000&quot;</span> --console-address <span class=\"string\">&quot;: 9001&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GitStats-代码统计工具安装与配置\"><a href=\"#GitStats-代码统计工具安装与配置\" class=\"headerlink\" title=\"GitStats 代码统计工具安装与配置\"></a>GitStats 代码统计工具安装与配置</h2><h3 id=\"安装-Ruby-环境\"><a href=\"#安装-Ruby-环境\" class=\"headerlink\" title=\"安装 Ruby 环境\"></a>安装 Ruby 环境</h3><p>GitStats 需要 ruby-2.5 以上环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载：</span></span><br><span class=\"line\">wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压：</span></span><br><span class=\"line\">tar -zxvf ruby-2.5.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入目录：</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ruby-2.5.0</span><br><span class=\"line\"><span class=\"comment\"># 创建安装目录：</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /usr/local/ruby</span><br><span class=\"line\"><span class=\"comment\"># 安装必备依赖</span></span><br><span class=\"line\">yum -y install gcc openssl-devel make</span><br><span class=\"line\"><span class=\"comment\"># 配置并制定安装位置：</span></span><br><span class=\"line\">./configure --prefix =/usr/local/ruby</span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">make  &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">安装完成输入  ruby -v 提示/usr/bin/ruby: No such file or directory</span><br><span class=\"line\"></span><br><span class=\"line\">解决问题之前，先确认一个情况，输入命令 /usr/local/ruby/bin/ruby --version</span><br><span class=\"line\"></span><br><span class=\"line\">如果有版本信息，那说明 ruby 被装到了该目录下，而非系统认为的 /usr/bin/ruby</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法是在系统默认运行 ruby 的位置 [/usr/bin/ruby] 创建一个 symlink（相当于 win 下的快捷方式），指向 ruby 的实际位置 [/usr/local/ruby/bin/ruby]</span><br><span class=\"line\"></span><br><span class=\"line\">建立软链接</span><br><span class=\"line\">命令是  <span class=\"built_in\">ln</span> -s /usr/local/ruby/bin/ruby /usr/bin/ruby</span><br><span class=\"line\">再输入   ruby -v           OK 完成</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">附赠：要是安装 gem 也出现这种情况 [-bash: /usr/bin/gem: No such file or directory] 也是同理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/ruby/bin/gem /usr/bin/gem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前仓库地址</span></span><br><span class=\"line\">gem sources -l</span><br><span class=\"line\"><span class=\"comment\">#配置阿里云仓库源</span></span><br><span class=\"line\">gem sources -a http://mirrors.aliyun.com/rubygems/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-GitStats\"><a href=\"#安装-GitStats\" class=\"headerlink\" title=\"安装 GitStats\"></a>安装 GitStats</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 git_stats</span></span><br><span class=\"line\">gem install git_stats</span><br><span class=\"line\"><span class=\"comment\"># 安装 locate</span></span><br><span class=\"line\">yum install mlocate -y</span><br><span class=\"line\">updatedb</span><br><span class=\"line\"><span class=\"comment\"># find 命令查找 git_stats 目录</span></span><br><span class=\"line\">find / -name <span class=\"string\">&#x27;git_stats&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 进入到配置目录</span></span><br><span class=\"line\">cd <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/ruby/</span>lib<span class=\"regexp\">/ruby/g</span>ems<span class=\"regexp\">/2.5.0/g</span>ems<span class=\"regexp\">/git_stats-1.0.17/</span>config<span class=\"regexp\">/locales/</span></span><br><span class=\"line\">cp zh_tw_default.yml zh_default.yml</span><br><span class=\"line\"><span class=\"comment\">#修改以下 2 个 yml, 将最上边的 zh_tw 调整为 zh_cn，其余不变</span></span><br><span class=\"line\">vim zh_default.yml</span><br><span class=\"line\">vim zh.yml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若报以下错误</span></span><br><span class=\"line\">ERROR:  Error installing git_stats:</span><br><span class=\"line\">\tThe last version of nokogiri (~&gt; <span class=\"number\">1.6</span>) to support your Ruby &amp; RubyGems was <span class=\"number\">1.12</span>.<span class=\"number\">5</span>. Try installing it with `gem install nokogiri -v <span class=\"number\">1.12</span>.<span class=\"number\">5</span>` and then running the current command again</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">gem install nokogiri -v <span class=\"number\">1.12</span>.<span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量，放到末尾</span></span><br><span class=\"line\">vim <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\">PATH =<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/ruby/</span>bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">export PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使之生效</span></span><br><span class=\"line\">source <span class=\"regexp\">/etc/</span>profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-GitStats-生成报告\"><a href=\"#使用-GitStats-生成报告\" class=\"headerlink\" title=\"使用 GitStats 生成报告\"></a>使用 GitStats 生成报告</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个项目文件夹</span></span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/u01/gi</span>t-project</span><br><span class=\"line\"><span class=\"comment\"># 创建一个报告生成文件夹</span></span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/var/</span>www/git-report</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 git 将项目 clone 到项目文件夹中</span></span><br><span class=\"line\">git clone xxx.git</span><br><span class=\"line\"><span class=\"comment\"># 切换到项目根目录，使用 git_stats 生成报告</span></span><br><span class=\"line\">git_stats generate -o <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/git-report/</span>xxx --language zh_cn</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-nginx-访问\"><a href=\"#配置-nginx-访问\" class=\"headerlink\" title=\"配置 nginx 访问\"></a>配置 nginx 访问</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">8098</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  <span class=\"number\">192.168.88.235</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"section\">location</span> /vansysboot &#123;</span><br><span class=\"line\">            <span class=\"attribute\">alias</span>   /var/www/git-report/vansysboot;</span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Prometheus-Grafana-监控平台\"><a href=\"#安装-Prometheus-Grafana-监控平台\" class=\"headerlink\" title=\"安装 Prometheus + Grafana 监控平台\"></a>安装 Prometheus + Grafana 监控平台</h2><blockquote>\n<p>官网：<a href=\"https://prometheus.io/\">https://prometheus.io/</a></p>\n<p>下载地址：<a href=\"https://prometheus.io/download/\">https://prometheus.io/download/</a></p>\n</blockquote>\n<h3 id=\"安装-Prometheus-Server\"><a href=\"#安装-Prometheus-Server\" class=\"headerlink\" title=\"安装 Prometheus Server\"></a>安装 Prometheus Server</h3><p><code>Prometheus</code> 基于 <code>Golang</code> 编写，编译后的软件包，不依赖于任何的第三方依赖。只需要下载对应平台的二进制包，解压并且添加基本的配置即可正常启动 <code>Prometheus Server</code>。</p>\n<h4 id=\"上传安装包\"><a href=\"#上传安装包\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>上传 <code>prometheus-2.29.1.linux-amd64.tar.gz</code> 到虚拟机的 <code>/opt</code> 目录</p>\n<h4 id=\"解压安装包-2\"><a href=\"#解压安装包-2\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf prometheus-2.37.0.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> prometheus-2.37.0.linux-amd64.tar.gz prometheus-2.37.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改配置文件-prometheus-yml\"><a href=\"#修改配置文件-prometheus-yml\" class=\"headerlink\" title=\"修改配置文件 prometheus.yml\"></a>修改配置文件 prometheus.yml</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> prometheus-2.37.0</span><br><span class=\"line\">vim prometheus.yml</span><br></pre></td></tr></table></figure>\n\n<p>在 scrape_configs 配置项下添加配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加 PushGateway 监控配置</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;pushgateway&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;192.168.88.231:9091&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">instance:</span> <span class=\"string\">pushgateway</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 Node Exporter 监控配置</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;node exporter&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;192.168.88.230:9100&#x27;</span>, <span class=\"string\">&#x27;192.168.88.231:9100&#x27;</span>, <span class=\"string\">&#x27;192.168.88.232:9100&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置说明：</strong></p>\n<ol>\n<li><p><strong>global 配置块</strong>：控制 Prometheus 服务器的全局配置</p>\n<ul>\n<li>scrape_interval：配置拉取数据的时间间隔，默认为 1 分钟。</li>\n<li>evaluation_interval：规则验证（生成 alert）的时间间隔，默认为 1 分钟。</li>\n</ul>\n</li>\n<li><p><strong>rule_files 配置块</strong>：规则配置文件</p>\n</li>\n<li><p><strong>scrape_configs 配置块</strong>：配置采集目标相关， prometheus 监视的目标。Prometheus自身的运行信息可以通过  HTTP 访问，所以 Prometheus 可以监控自己的运行数据。</p>\n<ul>\n<li><p>job_name：监控作业的名称</p>\n</li>\n<li><p>static_configs：表示静态目标配置，就是固定从某个 target 拉取数据</p>\n</li>\n<li><p>targets ： 指 定 监 控 的 目 标 ， 其 实 就 是 从 哪 儿 拉 取 数 据 。 Prometheus 会从 <a href=\"http://ip:9090/metrics\">http://ip:9090/metrics</a> 上拉取数据。</p>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p><em>Prometheus 是可以在运行时自动加载配置的。启动时需要添加：–web.enable-lifecycle</em></p>\n<p><em>重载配置命令：<code>curl -X POST http://127.0.0.1:9090/-/reload</code></em></p>\n</blockquote>\n<h3 id=\"安装-Node-Exporter\"><a href=\"#安装-Node-Exporter\" class=\"headerlink\" title=\"安装 Node Exporter\"></a>安装 Node Exporter</h3><p>在 <code>Prometheus</code> 的架构设计中，<code>Prometheus Server</code> 主要负责数据的收集，存储并且对外提供数据查询支持，而实际的监控样本数据的收集则是由 <code>Exporter</code> 完成。因此为了能够监控到某些东西，如主机的 <code>CPU</code> 使用率，我们需要使用到 <code>Exporter</code>。<code>Prometheus</code> 周期性的从 <code>Exporter</code> 暴露的 HTTP 服务地址（通常是 <code>/metrics</code> ）拉取监控样本数据。</p>\n<p><code>Exporter</code> 可以是一个相对开放的概念，其可以是一个独立运行的程序独立于监控目标以外，也可以是直接内置在监控目标中。只要能够向 <code>Prometheus</code> 提供标准格式的监控样本数据即可。</p>\n<p>为了能够采集到主机的运行指标如 CPU, 内存，磁盘等信息。我们可以使用 <code>Node Exporter</code>。<code>Node Exporter</code> 同样采用 <code>Golang</code> 编写，并且不存在任何的第三方依赖，只需要下载，解压即可运行。</p>\n<h4 id=\"上传安装包-1\"><a href=\"#上传安装包-1\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>上传 <code>node_exporter-1.4.0-rc.0.linux-amd64.tar.gz</code> 到虚拟机的 <code>/opt</code> 目录</p>\n<h4 id=\"解压安装包-3\"><a href=\"#解压安装包-3\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf node_exporter-1.4.0-rc.0.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> node_exporter-1.4.0-rc.0.linux-amd64.tar.gz node_exporter-1.4.0-rc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动并访问端点查看是否成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行启动命令</span></span><br><span class=\"line\">./node_exporter</span><br></pre></td></tr></table></figure>\n\n<p>浏览器输入：<a href=\"http://ip:9100/metrics%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%BD%93%E5%89%8D\">http://ip:9100/metrics，可以看到当前</a> node exporter 获取到的当前主机的所有监控数据。</p>\n<h4 id=\"节点分发\"><a href=\"#节点分发\" class=\"headerlink\" title=\"节点分发\"></a>节点分发</h4><p>将解压的目录分发到要监控的节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xsync node_exporter-1.4.0-rc</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加文件分发脚本</strong></p>\n<p>创建脚本文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/bin/xsync</span><br></pre></td></tr></table></figure>\n\n<p>脚本内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 判断参数是否足够</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> Not Enounh Arguement!</span><br><span class=\"line\"> <span class=\"built_in\">exit</span>;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历所有的机器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> 192.168.88.230 192.168.88.231 192.168.88.232 </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> ==== ==== ====  <span class=\"variable\">$host</span> ============</span><br><span class=\"line\"> <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 判断文件是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -e <span class=\"variable\">$file</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"comment\"># 获取父目录</span></span><br><span class=\"line\">   pdir = $(<span class=\"built_in\">cd</span> -P $(<span class=\"built_in\">dirname</span> <span class=\"variable\">$file</span>); <span class=\"built_in\">pwd</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 获取当前目录的名称</span></span><br><span class=\"line\">   fname = $(<span class=\"built_in\">basename</span> $ file)</span><br><span class=\"line\">   ssh <span class=\"variable\">$host</span> <span class=\"string\">&quot;mkdir -p $ pdir &quot;</span></span><br><span class=\"line\">   rsync -av <span class=\"variable\">$pdir</span>/$ fname <span class=\"variable\">$host</span>:$ pdir</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$file</span> does not exists!</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"> <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>若报错 <code>bash: rsync: command not found</code>，请在目标机器上安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Centos</span></span><br><span class=\"line\">yum install rsync -y </span><br></pre></td></tr></table></figure>\n\n\n\n<p>赋予执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/bin/xsync</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行条件</strong></p>\n<p>使用 ssh 密钥验证登录，这样在传输文件时就不需要进行二次验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 ssh 私钥（若有这忽略）</span></span><br><span class=\"line\">ssh-keygen -f ~/.ssh/id_rsa -N <span class=\"string\">&#x27;&#x27;</span> </span><br><span class=\"line\"><span class=\"comment\"># 循环把公钥传递到服务器上，免密登录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> 192.168.88.230 192.168.88.231 192.168.88.232  </span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">  ssh-copy-id <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据提示输入密码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h4><h5 id=\"centos6\"><a href=\"#centos6\" class=\"headerlink\" title=\"centos6\"></a>centos6</h5><ol>\n<li>创建自启动脚本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/init.d/node_exporter</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#\t/etc/rc.d/init.d/node_exporter</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 80 80</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># config: /etc/prometheus/node_exporter.conf</span></span><br><span class=\"line\"><span class=\"comment\"># pidfile: /var/run/prometheus/node_exporter.pid</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Source function library.</span></span><br><span class=\"line\">. /etc/init.d/functions</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">RETVAL = 0</span><br><span class=\"line\">PROG = <span class=\"string\">&quot;node_exporter&quot;</span></span><br><span class=\"line\">DAEMON_SYSCONFIG =/etc/sysconfig/<span class=\"variable\">$&#123;PROG&#125;</span></span><br><span class=\"line\">DAEMON =/usr/bin/<span class=\"variable\">$&#123;PROG&#125;</span> <span class=\"comment\">#要把安装目录下/u01/module/node_exporter/node_exporter 可执行文件拷贝到/usr/bin 目录下</span></span><br><span class=\"line\">PID_FILE =/var/run/prometheus/<span class=\"variable\">$&#123;PROG&#125;</span>.pid</span><br><span class=\"line\">LOCK_FILE =/var/lock/subsys/<span class=\"variable\">$&#123;PROG&#125;</span></span><br><span class=\"line\">LOG_FILE =/var/log/prometheus/node_exporter.log</span><br><span class=\"line\">DAEMON_USER = <span class=\"string\">&quot;prometheus&quot;</span></span><br><span class=\"line\">FQDN =$(hostname)</span><br><span class=\"line\">GOMAXPROCS =$(grep -c ^processor /proc/cpuinfo)</span><br><span class=\"line\"> </span><br><span class=\"line\">. <span class=\"variable\">$&#123;DAEMON_SYSCONFIG&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> check_status &gt; /dev/null; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;node_exporter is already running&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot; Starting node_exporter: &quot;</span></span><br><span class=\"line\">  daemonize -u <span class=\"variable\">$&#123;DAEMON_USER&#125;</span> -p <span class=\"variable\">$&#123;PID_FILE&#125;</span> -l <span class=\"variable\">$&#123;LOCK_FILE&#125;</span> -a -e <span class=\"variable\">$&#123;LOG_FILE&#125;</span> -o <span class=\"variable\">$&#123;LOG_FILE&#125;</span> <span class=\"variable\">$&#123;DAEMON&#125;</span> <span class=\"variable\">$&#123;ARGS&#125;</span></span><br><span class=\"line\">  RETVAL =$?</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot; Stopping node_exporter: &quot;</span></span><br><span class=\"line\">    killproc -p <span class=\"variable\">$&#123;PID_FILE&#125;</span> -d 10 <span class=\"variable\">$&#123;DAEMON&#125;</span></span><br><span class=\"line\">    RETVAL =$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    [ <span class=\"variable\">$RETVAL</span> = 0 ] &amp;&amp; <span class=\"built_in\">rm</span> -f <span class=\"variable\">$&#123;LOCK_FILE&#125;</span> <span class=\"variable\">$&#123;PID_FILE&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_status</span></span>() &#123;</span><br><span class=\"line\">    status -p <span class=\"variable\">$&#123;PID_FILE&#125;</span> <span class=\"variable\">$&#123;DAEMON&#125;</span></span><br><span class=\"line\">    RETVAL =$?</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span> &quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">\tcheck_status</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload|force-reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        N =/etc/init.d/<span class=\"variable\">$&#123;NAME&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot; Usage: <span class=\"variable\">$N</span> &#123;start|stop|status|restart|force-reload&#125;&quot;</span> &gt;&amp;2</span><br><span class=\"line\">        RETVAL = 2</span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$&#123;RETVAL&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编辑etc/sysconfig/node_exporter</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>sysconfig/node_exporter  </span><br><span class=\"line\"><span class=\"comment\">##添加如下内容</span></span><br><span class=\"line\">ARGS = <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建启动脚本中对应文件和目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##开机脚本赋权</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /etc/init.d/node_exporter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##拷贝可执行文件到/usr/bin/</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /u01/node_exporter-1.4.0-rc/node_exporter /usr/bin/node_exporter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 添加用户组 </span></span><br><span class=\"line\">groupadd -r prometheus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /usr/hostonnet/prometheus/</span><br><span class=\"line\">useradd -r -g prometheus -s /sbin/nologin -d /usr/hostonnet/prometheus/ -c <span class=\"string\">&quot;prometheus Daemons&quot;</span> prometheus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 家目录修改属主</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R prometheus: prometheus /usr/hostonnet/prometheus/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建运行目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/run/prometheus/</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/run/prometheus/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建 pid 文件，并赋权</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> /var/run/prometheus/node_exporter.pid</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/run/prometheus/node_exporter.pid </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建日志目录，并创建日志文件，赋权，修改属主</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/log/prometheus/</span><br><span class=\"line\"><span class=\"built_in\">touch</span> /var/log/prometheus/node_exporter.log</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/log/prometheus</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/log/prometheus/node_exporter.log</span><br><span class=\"line\"><span class=\"built_in\">chown</span> prometheus: prometheus /var/log/prometheus/node_exporter.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量执行语句</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /etc/init.d/node_exporter &amp;&amp; <span class=\"built_in\">cp</span> /u01/node_exporter-1.4.0-rc/node_exporter /usr/bin/node_exporter &amp;&amp; groupadd -r prometheus &amp;&amp; <span class=\"built_in\">mkdir</span> -p /usr/hostonnet/prometheus/ &amp;&amp; useradd -r -g prometheus -s /sbin/nologin -d /usr/hostonnet/prometheus/ -c <span class=\"string\">&quot;prometheus Daemons&quot;</span> prometheus &amp;&amp; <span class=\"built_in\">chown</span> -R prometheus: prometheus /usr/hostonnet/prometheus/ &amp;&amp; <span class=\"built_in\">mkdir</span> -p /var/run/prometheus/ &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/run/prometheus/ &amp;&amp; <span class=\"built_in\">touch</span> /var/run/prometheus/node_exporter.pid &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/run/prometheus/node_exporter.pid &amp;&amp; <span class=\"built_in\">mkdir</span> -p /var/log/prometheus/ &amp;&amp; <span class=\"built_in\">touch</span> /var/log/prometheus/node_exporter.log &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/log/prometheus &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/log/prometheus/node_exporter.log &amp;&amp; <span class=\"built_in\">chown</span> prometheus: prometheus /var/log/prometheus/node_exporter.log</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>安装daemonize</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh daemonize-1.6.0-1.el6.rf.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行node_exporter</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动 node_exporter 并设置开机自启动</span></span><br><span class=\"line\">cd <span class=\"regexp\">/etc/i</span>nit.d<span class=\"regexp\">/ &amp;&amp; ./</span>node_exporter start &amp;&amp; chkconfig node_exporter on  </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"centos7\"><a href=\"#centos7\" class=\"headerlink\" title=\"centos7\"></a>centos7</h5><ol>\n<li>创建 service 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /usr/lib/systemd/system/node_exporter.service</span><br></pre></td></tr></table></figure>\n\n<p>文件内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span> = node_export</span><br><span class=\"line\"><span class=\"attr\">Documentation</span> = https://github.com/prometheus/node_exporter</span><br><span class=\"line\"><span class=\"attr\">After</span> = network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Type</span> = simple</span><br><span class=\"line\"><span class=\"attr\">User</span> = root</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span> = /u01/node_exporter-<span class=\"number\">1.4</span>.<span class=\"number\">0</span>-rc/node_exporter</span><br><span class=\"line\"><span class=\"attr\">Restart</span> = <span class=\"literal\">on</span>-failure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span> = multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>分发文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xsync /usr/lib/systemd/system/node_exporter.service</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>设置开机自启并启动（所有机器都执行）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开机自启</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> node_exporter.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">sudo systemctl start node_exporter.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Alertmanager\"><a href=\"#安装-Alertmanager\" class=\"headerlink\" title=\"安装 Alertmanager\"></a>安装 Alertmanager</h3><h4 id=\"上传安装包-2\"><a href=\"#上传安装包-2\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>上传 <code>alertmanager-0.24.0.linux-amd64.tar.gz</code> 到虚拟机的 <code>/opt</code> 目录</p>\n<h4 id=\"解压安装包-4\"><a href=\"#解压安装包-4\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf alertmanager-0.24.0.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> alertmanager-0.24.0.linux-amd64.tar.gz alertmanager-0.24.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-Prometheus-Server-和-Alertmanager\"><a href=\"#启动-Prometheus-Server-和-Alertmanager\" class=\"headerlink\" title=\"启动 Prometheus Server 和 Alertmanager\"></a>启动 Prometheus Server 和 Alertmanager</h3><h4 id=\"在-Prometheus-Server-目录下执行启动命令\"><a href=\"#在-Prometheus-Server-目录下执行启动命令\" class=\"headerlink\" title=\"在 Prometheus Server 目录下执行启动命令\"></a>在 Prometheus Server 目录下执行启动命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./prometheus --config.file = prometheus.yml --web.enable-lifecycle &gt; ./prometheus.log 2 &gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-Alertmanager-目录下启动\"><a href=\"#在-Alertmanager-目录下启动\" class=\"headerlink\" title=\"在 Alertmanager 目录下启动\"></a>在 Alertmanager 目录下启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./alertmanager --config.file = alertmanager.yml &gt; ./alertmanager.log 2 &gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Grafana-数据展示\"><a href=\"#安装-Grafana-数据展示\" class=\"headerlink\" title=\"安装 Grafana 数据展示\"></a>安装 Grafana 数据展示</h3><p>grafana 是一款采用 Go 语言编写的开源应用，主要用于大规模指标数据的可视化展现，是网络架构和应用分析中最流行的时序数据展示工具，目前已经支持绝大部分常用的时序数据库。</p>\n<blockquote>\n<p>下载地址：<a href=\"https://grafana.com/grafana/download\">https://grafana.com/grafana/download</a></p>\n</blockquote>\n<h4 id=\"上传安装包-3\"><a href=\"#上传安装包-3\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>将 <code>grafana-enterprise-9.0.6.linux-amd64.tar.gz</code> 上传至 <code>/opt</code> 目录下</p>\n<h4 id=\"解压安装包-5\"><a href=\"#解压安装包-5\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf grafana-enterprise-9.0.6.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> grafana-enterprise-9.0.6.linux-amd64.tar.gz grafana-enterprise-9.0.6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动 grafana 服务</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./bin/grafana-server web &gt; ./grafana.log 2 &gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>打开浏览器，访问：<code>http://ip:3000</code>，默认用户名/密码：<code>admin</code></li>\n</ol>\n<h3 id=\"Grafana-与-Prometheus-数据对接\"><a href=\"#Grafana-与-Prometheus-数据对接\" class=\"headerlink\" title=\"Grafana 与 Prometheus 数据对接\"></a>Grafana 与 Prometheus 数据对接</h3><h4 id=\"添加-Prometheus-数据源\"><a href=\"#添加-Prometheus-数据源\" class=\"headerlink\" title=\"添加 Prometheus 数据源\"></a>添加 Prometheus 数据源</h4><ol>\n<li><code>配置 -&gt; 数据源 -&gt; 添加数据源</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804165746.png\" alt=\"image-20220804165739264\"></p>\n<ol start=\"2\">\n<li>选择 <code>Prometheus</code> 数据源</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804165940.png\" alt=\"image-20220804165940226\"></p>\n<ol start=\"3\">\n<li>配置 Prometheus Server 地址</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804170315.png\" alt=\"image-20220804170315289\"></p>\n<ol start=\"4\">\n<li>点击下方的 Save&amp;Test</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804170439.png\" alt=\"image-20220804170439669\"></p>\n<ol start=\"5\">\n<li>点击 Back 返回即可，可以看到 Data Sources 页面，出现了添加的 Prometheus：</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804171225.png\" alt=\"image-20220804171224982\"></p>\n<h4 id=\"添加仪表盘-Dashboard\"><a href=\"#添加仪表盘-Dashboard\" class=\"headerlink\" title=\"添加仪表盘 Dashboard\"></a>添加仪表盘 Dashboard</h4><p>手动一个个添加 Dashboard 比较繁琐，Grafana 社区鼓励用户分享 Dashboard，通过 <a href=\"https://grafana.com/grafana/dashboards\">https://grafana.com/grafana/dashboards</a> 网站，可以找到大量可直接使用的 Dashboard 模板。</p>\n<p>Grafana 中所有的 Dashboard 通过 JSON 进行共享，下载并且导入这些 JSON 文件，就可以直接使用这些已经定义好的 Dashboard。</p>\n<ol>\n<li>选择一款中文版本的 <code>Node Exporter</code> 仪表板</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173336.png\" alt=\"image-20220804173336648\"></p>\n<ol start=\"2\">\n<li>下载模板 json 文件</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173609.png\" alt=\"image-20220804173609120\"></p>\n<ol start=\"3\">\n<li>在 Grafana 中导入模板</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173822.png\" alt=\"image-20220804173822051\"></p>\n<ol start=\"4\">\n<li>导入之后选择 <code>Prometheus</code> 数据源即可</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804174154.png\" alt=\"image-20220804174153940\"></p>\n<ol start=\"5\">\n<li>导入成功之后就能看到炫酷的仪表板</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804174504.png\" alt=\"image-20220804174503814\"></p>\n<h3 id=\"安装-OracleDB-Exporter-监控-Oracle-数据库\"><a href=\"#安装-OracleDB-Exporter-监控-Oracle-数据库\" class=\"headerlink\" title=\"安装 OracleDB Exporter 监控 Oracle 数据库\"></a>安装 OracleDB Exporter 监控 Oracle 数据库</h3><blockquote>\n<p>GitHub 仓库：<a href=\"https://github.com/iamseth/oracledb_exporter\">iamseth/oracledb_exporter: Prometheus Oracle database exporter. (github.com)</a></p>\n<p>Grafana 面板：<a href=\"https://grafana.com/grafana/dashboards/11121-oracledb/\">Oracledb监控-性能与表空间 | Grafana Labs</a></p>\n<p>以下步骤是采用 Docker 进行安装</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、拉取最新版本镜像</span></span><br><span class=\"line\">docker pull ghcr.io/iamseth/oracledb_exporter: 0.5.0</span><br><span class=\"line\"><span class=\"comment\"># 2、使用 docker run 命令启动</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：1、--link 连接 oracle 数据库容器，这样在 oracledb_exporter 容器中可以直接使用容器名字代替 IP 地址进行通信</span></span><br><span class=\"line\"><span class=\"comment\"># \t   2、若密码中含有 !@#$ 等特殊字符，可以使用 URLEncode 进行转义</span></span><br><span class=\"line\">docker run -d --name oracledb_exporter --<span class=\"built_in\">link</span> = oracle11g -p 9161:9161 -e <span class=\"string\">&#x27;DATA_SOURCE_NAME = oracle://sys: 123456@oracle11g: 1521/orcl&#x27;</span> ghcr.io/iamseth/oracledb_exporter: 0.5.0</span><br><span class=\"line\"><span class=\"comment\"># 3、使用 culr 访问指标情况</span></span><br><span class=\"line\">curl -l http://127.0.0.1:9161/metric</span><br><span class=\"line\"><span class=\"comment\"># 4、接入 Prometheus</span></span><br><span class=\"line\">在 prometheus.yml 中添加一段配置：</span><br><span class=\"line\">  - job_name: oracledb_exporter</span><br><span class=\"line\">    metrics_path: /metrics</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [<span class=\"string\">&#x27;chxdb21.vansys.com: 15090&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Docker-安装服务\"><a href=\"#使用-Docker-安装服务\" class=\"headerlink\" title=\"使用 Docker 安装服务\"></a>使用 Docker 安装服务</h2><h3 id=\"Docker-安装-ClickHouse-数据库\"><a href=\"#Docker-安装-ClickHouse-数据库\" class=\"headerlink\" title=\"Docker 安装 ClickHouse 数据库\"></a>Docker 安装 ClickHouse 数据库</h3><blockquote>\n<p>前提：请先安装好 Docker 容器服务（<a href=\"https://blog.kyire.site/2022/04/02/2f74bb89.html#%E5%AE%89%E8%A3%85-Docker-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\">安装 Docker 容器服务</a>）</p>\n</blockquote>\n<ol>\n<li>创建目录并更改权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/clickhouse/&#123;data, config, <span class=\"built_in\">log</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 777 /u01/clickhouse/&#123;data, config, <span class=\"built_in\">log</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull yandex/clickhouse-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建临时容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -d --name = clickhouse-server \\</span><br><span class=\"line\">--<span class=\"built_in\">ulimit</span> nofile = 262144:262144 \\</span><br><span class=\"line\">-p 8123:8123 -p 9009:9009 -p 9000:9000 \\</span><br><span class=\"line\">yandex/clickhouse-server: latest</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>复制临时容器内配置文件到宿主机</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> clickhouse-server:/etc/clickhouse-server/config.xml /u01/clickhouse/config/config.xml</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> clickhouse-server:/etc/clickhouse-server/users.xml /u01/clickhouse/config/users.xml</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>停掉临时容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> -f clickhouse-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>default用户配置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 sha256sum 密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 随机生成密码</span></span><br><span class=\"line\">PASSWORD = $(<span class=\"built_in\">base64</span> &lt; /dev/urandom | <span class=\"built_in\">head</span> -c8); <span class=\"built_in\">echo</span> <span class=\"string\">&quot;$ PASSWORD &quot;</span>; <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;<span class=\"variable\">$PASSWORD</span> &quot;</span> | <span class=\"built_in\">sha256sum</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">会输出明码和 SHA256 密码（每个人生成的不一样）</span><br><span class=\"line\">jQ+72k17</span><br><span class=\"line\">a70b3173bfef01aff0d2472fd1f86a4be647aed4e0624f1b6c867a69072e1273</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成指定密码 wx123456</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;wx123456&quot;</span>; <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;wx123456&quot;</span> | <span class=\"built_in\">sha256sum</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">wx123456</span><br><span class=\"line\">37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开 users.xml 文件 default 用户设置密码为 123456</span></span><br><span class=\"line\">vim /u01/clickhouse/config/users.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将文件中 &lt;password&gt; &lt;/password&gt; 改为以下内容</span></span><br><span class=\"line\">&lt;password_sha256_hex&gt; 37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86 &lt;/password_sha256_hex&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 default 用户改为只读</span></span><br><span class=\"line\"><span class=\"comment\"># 将 &lt;profile&gt; default &lt;/profile&gt; 改为以下内容</span></span><br><span class=\"line\">&lt;profile&gt; <span class=\"built_in\">readonly</span> &lt;/profile&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>新增root用户</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 root 用户密码 wx123456</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;wx123456&quot;</span>; <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;wx123456&quot;</span> | <span class=\"built_in\">sha256sum</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">wx123456</span><br><span class=\"line\">37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开 users.xml 文件 </span></span><br><span class=\"line\">vim /u01/clickhouse/config/users.xml</span><br><span class=\"line\"><span class=\"comment\"># 在 &lt;/default&gt; 下一行添加以下内容</span></span><br><span class=\"line\">&lt;root&gt;</span><br><span class=\"line\">&lt;password_sha256_hex&gt; 37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86 &lt;/password_sha256_hex&gt;</span><br><span class=\"line\">    &lt;networks incl=<span class=\"string\">&quot;networks&quot;</span> replace=<span class=\"string\">&quot;replace&quot;</span>&gt;</span><br><span class=\"line\">            &lt;ip&gt;::/0 &lt;/ip&gt;</span><br><span class=\"line\">    &lt;/networks&gt;</span><br><span class=\"line\">    &lt;profile&gt; default &lt;/profile&gt;</span><br><span class=\"line\">    &lt;quota&gt; default &lt;/quota&gt;</span><br><span class=\"line\">&lt;/root&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>部署clickhouse-server</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name clickhouse-server \\</span><br><span class=\"line\">--privileged = <span class=\"literal\">true</span> --restart = always \\</span><br><span class=\"line\">--<span class=\"built_in\">ulimit</span> nofile = 262144:262144 \\</span><br><span class=\"line\">-p 8123:8123 \\</span><br><span class=\"line\">-p 9000:9000 \\</span><br><span class=\"line\">-p 9009:9009 \\</span><br><span class=\"line\">-v /u01/clickhouse/data:/var/lib/clickhouse: rw \\</span><br><span class=\"line\">-v /u01/clickhouse/log:/var/log/clickhouse-server: rw \\</span><br><span class=\"line\">-v /u01/clickhouse/config/config.xml:/etc/clickhouse-server/config.xml \\</span><br><span class=\"line\">-v /u01/clickhouse/config/users.xml:/etc/clickhouse-server/users.xml \\</span><br><span class=\"line\">yandex/clickhouse-server: latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker-安装-ElasticSearch-搜索引擎\"><a href=\"#Docker-安装-ElasticSearch-搜索引擎\" class=\"headerlink\" title=\"Docker 安装 ElasticSearch 搜索引擎\"></a>Docker 安装 ElasticSearch 搜索引擎</h3><blockquote>\n<p>前提：请先安装好 Docker 容器服务（<a href=\"https://blog.kyire.site/2022/04/02/2f74bb89.html#%E5%AE%89%E8%A3%85-Docker-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\">安装 Docker 容器服务</a>）</p>\n</blockquote>\n<ol>\n<li>创建目录、配置文件并修改权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 es 相关挂载目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /hd/docker/es/&#123;config, data, plugins&#125;</span><br><span class=\"line\"><span class=\"comment\"># 创建文件</span></span><br><span class=\"line\">vi /hd/docker/es/config/elasticsearch.yml</span><br><span class=\"line\">http.host: 0.0.0.0</span><br><span class=\"line\">http.cors.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">http.cors.allow-origin: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">http.cors.allow-headers: Authorization</span><br><span class=\"line\">xpack.security.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">xpack.security.transport.ssl.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置目录权限，否则会报错</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./config/elasticsearch.yml</span><br><span class=\"line\"><span class=\"comment\"># 设置为目录 777 权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 777 /hd/docker/es</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elasticsearch: 7.17.4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name es --restart = always -p 9200:9200 -p 9300:9300 \\</span><br><span class=\"line\">-e <span class=\"string\">&quot;ES_JAVA_OPTS =-Xms512m -Xmx1024m&quot;</span> \\</span><br><span class=\"line\">-v /hd/docker/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\</span><br><span class=\"line\">-v /hd/docker/es/data:/usr/share/elasticsearch/data \\</span><br><span class=\"line\">-v /hd/docker/es/plugins:/usr/share/elasticsearch/plugins \\</span><br><span class=\"line\">-d elasticsearch: 7.17.4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>配置 es 访问密码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入容器内部</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it es /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置密码命令</span></span><br><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>访问网页 <code>http://localhost:9200</code>（账号密码：<code>elastic</code>/<code>123456</code>）</li>\n</ol>\n<h3 id=\"Docker-安装-Nginx-Proxy-Manager-代理管理平台\"><a href=\"#Docker-安装-Nginx-Proxy-Manager-代理管理平台\" class=\"headerlink\" title=\"Docker 安装 Nginx Proxy Manager 代理管理平台\"></a>Docker 安装 Nginx Proxy Manager 代理管理平台</h3><blockquote>\n<p>前提：请先安装好 Docker 容器服务（<a href=\"https://blog.kyire.site/2022/04/02/2f74bb89.html#%E5%AE%89%E8%A3%85-Docker-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\">安装 Docker 容器服务</a>）</p>\n</blockquote>\n<ol>\n<li>创建 <code>docker-compose.yml</code></li>\n</ol>\n<p><strong>使用 network_mode: host 与宿主机共享网络</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;2691432189/nginx-proxy-manager-monitor-zh: latest&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>部署运行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>登录管理平台</li>\n</ol>\n<p>容器运行成功后，使用浏览器访问 <code>81</code> 端口。</p>\n<p><a href=\"http://127.0.0.1:81/\">http://127.0.0.1:81</a></p>\n<p>默认管理员信息：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Email:</span>    admin@example.com</span><br><span class=\"line\"><span class=\"symbol\">Password:</span> changeme</span><br></pre></td></tr></table></figure>\n\n<p>登录之后系统会要求修改详细信息和密码</p>\n<ol start=\"4\">\n<li>快速升级</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br><span class=\"line\">docker-compose pull</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker-安装-Redis-服务\"><a href=\"#Docker-安装-Redis-服务\" class=\"headerlink\" title=\"Docker 安装 Redis 服务\"></a>Docker 安装 Redis 服务</h3><ol>\n<li>拉取 <code>Redis</code> 镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取最新版本</span></span><br><span class=\"line\">docker pull redis</span><br><span class=\"line\"><span class=\"comment\"># 指定版本号</span></span><br><span class=\"line\">docker pull redis: 5.0.8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>启动 <code>Redis</code> 容器</li>\n</ol>\n<blockquote>\n<p>建议使用配置文件启动，先从 Redis 官网下载标准配置文件（也可以自己准备一个）</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建配置文件存放目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/software/redis/conf</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /u01/software/redis/conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载 redis.conf 配置文件</span></span><br><span class=\"line\">wget http://download.redis.io/redis-stable/redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 给配置文件授权</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\">1、注释 <span class=\"built_in\">bind</span> 127.0.0.1，开启远程访问</span><br><span class=\"line\">2、关闭保护模式 protected-mode no</span><br><span class=\"line\">3、设置密码 requirepass 123456</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 Redis 容器</span></span><br><span class=\"line\">docker run -p 6379:6379 --name redis --restart = always \\</span><br><span class=\"line\">-v /u01/software/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /u01/software/redis/data:/data \\</span><br><span class=\"line\">-itd redis redis-server /etc/redis/redis.conf \\</span><br><span class=\"line\">--appendonly <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux-下静默安装-Oracle-19c\"><a href=\"#Linux-下静默安装-Oracle-19c\" class=\"headerlink\" title=\"Linux 下静默安装 Oracle 19c\"></a>Linux 下静默安装 Oracle 19c</h2><h3 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><h4 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h4><p>官网下载：<a href=\"https://www.oracle.com/database/technologies/oracle19c-linux-downloads.html\">下载地址 | 点击跳转</a></p>\n<h4 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h4><table>\n<thead>\n<tr>\n<th>事项</th>\n<th>详情</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作系统</td>\n<td>Centos 7.9</td>\n</tr>\n<tr>\n<td>数据库版本</td>\n<td>19.3.0</td>\n</tr>\n<tr>\n<td>CPU</td>\n<td>Intel(R) Xeon(R) Silver 4210R CPU @ 2.40GHz</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>32GB</td>\n</tr>\n<tr>\n<td>Swap</td>\n<td>15GB</td>\n</tr>\n</tbody></table>\n<h3 id=\"准备安装环境\"><a href=\"#准备安装环境\" class=\"headerlink\" title=\"准备安装环境\"></a>准备安装环境</h3><h4 id=\"服务器环境检查\"><a href=\"#服务器环境检查\" class=\"headerlink\" title=\"服务器环境检查\"></a>服务器环境检查</h4><ol>\n<li>检查缺少了那些依赖包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --query --queryformat <span class=\"string\">&quot;%&#123;NAME&#125;-%&#123;VERSION&#125;.%&#123;RELEASE&#125; (%&#123;ARCH&#125;)\\n&quot;</span> bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel make sysstat elfutils-libelf elfutils-libelf-devel fontconfig-devel libxcb smartmontools libX11 libXau libXtst libXrender libXrender-devel</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 yum 安装缺少的依赖</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y <span class=\"variable\">$NOT_INSTALLED</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建-Oracle-用户组\"><a href=\"#创建-Oracle-用户组\" class=\"headerlink\" title=\"创建 Oracle 用户组\"></a>创建 Oracle 用户组</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd oinstall &amp;&amp; groupadd dba &amp;&amp; groupadd asmdba &amp;&amp; groupadd backupdba &amp;&amp; groupadd dgdba &amp;&amp; groupadd kmdba &amp;&amp; groupadd racdba &amp;&amp; groupadd oper &amp;&amp; useradd -g oinstall -G dba, asmdba, backupdba, dgdba, kmdba, racdba, oper -m oracle</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-hosts-文件\"><a href=\"#配置-hosts-文件\" class=\"headerlink\" title=\"配置 hosts 文件\"></a>配置 hosts 文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置系统内核参数\"><a href=\"#配置系统内核参数\" class=\"headerlink\" title=\"配置系统内核参数\"></a>配置系统内核参数</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 /etc/sysctl.conf 文件</span></span><br><span class=\"line\">vi /etc/sysctl.conf</span><br><span class=\"line\">fs.aio-max-nr = 1048576</span><br><span class=\"line\">fs.file-max = 6815744</span><br><span class=\"line\">kernel.shmall = 16451328</span><br><span class=\"line\">kernel.shmmax = 33692319744</span><br><span class=\"line\">kernel.shmmni = 4096</span><br><span class=\"line\">kernel.sem = 250 32000 100 128</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class=\"line\">net.core.rmem_default = 262144</span><br><span class=\"line\">net.core.rmem_max = 4194304</span><br><span class=\"line\">net.core.wmem_default = 262144</span><br><span class=\"line\">net.core.wmem_max = 1048576</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 sysctl -p 使配置生效</span></span><br><span class=\"line\">/sbin/sysctl -p</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关闭-SELINUX-跟防火墙\"><a href=\"#关闭-SELINUX-跟防火墙\" class=\"headerlink\" title=\"关闭 SELINUX 跟防火墙\"></a>关闭 SELINUX 跟防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 /etc/selinux/config 中 SELINUX 配置是否是 disabled</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/selinux/config</span><br><span class=\"line\"><span class=\"comment\"># This file controls the state of SELinux on the system.</span></span><br><span class=\"line\"><span class=\"comment\"># SELINUX = can take one of these three values:</span></span><br><span class=\"line\"><span class=\"comment\">#     enforcing - SELinux security policy is enforced.</span></span><br><span class=\"line\"><span class=\"comment\">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class=\"line\"><span class=\"comment\">#     disabled - No SELinux policy is loaded.</span></span><br><span class=\"line\">SELINUX = disabled</span><br><span class=\"line\"><span class=\"comment\"># SELINUXTYPE = can take one of three two values:</span></span><br><span class=\"line\"><span class=\"comment\">#     targeted - Targeted processes are protected,</span></span><br><span class=\"line\"><span class=\"comment\">#     minimum - Modification of targeted policy. Only selected processes are protected. </span></span><br><span class=\"line\"><span class=\"comment\">#     mls - Multi Level Security protection.</span></span><br><span class=\"line\">SELINUXTYPE = targeted </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看防火墙状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭防火墙服务</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\"># 停止防火墙服务开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置用户环境\"><a href=\"#配置用户环境\" class=\"headerlink\" title=\"配置用户环境\"></a>配置用户环境</h4><ol>\n<li>配置 oracle 用户环境变量</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换 oracle 用户</span></span><br><span class=\"line\">su - oracle</span><br><span class=\"line\"><span class=\"comment\"># 编辑 .bash_profile 文件，在文件末尾添加</span></span><br><span class=\"line\">vi .bash_profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_BASE =/u01/app/oracle</span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_HOME =/u01/app/oracle/product/19.3.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH = <span class=\"variable\">$PATH</span>:$ ORACLE_HOME/bin:/usr/local/bin</span><br><span class=\"line\"><span class=\"comment\"># 修改为具体的机器名称 /etc/hosts 配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_HOSTNAME = xxx</span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_SID = orcl</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH = <span class=\"variable\">$ORACLE_HOME</span>/lib:$ ORACLE_HOME/rdbms/lib:<span class=\"variable\">$ORACLE_HOME</span>/network/lib:/lib:/usr/lib</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH = <span class=\"variable\">$ORACLE_HOME</span>/jlib:$ ORACLE_HOME/rdbms/jlib:<span class=\"variable\">$ORACLE_HOME</span>/network/jlib</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改用户的 shell 限制</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 /etc/security/limits.conf  文件末尾添加</span></span><br><span class=\"line\">vi /etc/security/limits.conf </span><br><span class=\"line\">@oinstall soft nofile 2048</span><br><span class=\"line\">@oinstall hard nofile 65536</span><br><span class=\"line\">@oinstall soft <span class=\"built_in\">nproc</span> 16384</span><br><span class=\"line\">@oinstall soft stack 10240</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><p>响应文件模板存放位置：</p>\n<ul>\n<li>软件：/u01/app/oracle/product/19.5.0/install/response/db_install.rsp</li>\n<li>监听：/u01/app/oracle/product/19.5.0/assistants/netca/netca.rsp</li>\n<li>建库：/u01/app/oracle/product/19.5.0/assistants/dbca/dbca.rsp</li>\n</ul>\n<h4 id=\"解压安装包-6\"><a href=\"#解压安装包-6\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 oracle 安装目录（root 用户）</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/app/oracle/product/19.3.0</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R oracle: oinstall /u01/app</span><br><span class=\"line\"><span class=\"comment\"># 切换到 oracle 用户解压</span></span><br><span class=\"line\">su - oracle</span><br><span class=\"line\">unzip LINUX.X64_193000_db_home.zip -d <span class=\"variable\">$ORACLE_HOME</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令行静默安装\"><a href=\"#命令行静默安装\" class=\"headerlink\" title=\"命令行静默安装\"></a>命令行静默安装</h4><h4 id=\"配置响应文件\"><a href=\"#配置响应文件\" class=\"headerlink\" title=\"配置响应文件\"></a>配置响应文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份 db_install.rsp 文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_HOME</span>/install/response</span><br><span class=\"line\"><span class=\"built_in\">cp</span> db_install.rsp db_install.rsp.bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑 db_install.rsp 文件，修改以下参数</span></span><br><span class=\"line\">oracle.install.option = INSTALL_DB_SWONLY</span><br><span class=\"line\">UNIX_GROUP_NAME = oinstall</span><br><span class=\"line\">INVENTORY_LOCATION =/u01/app/oraInventory</span><br><span class=\"line\">ORACLE_HOME =/u01/app/oracle/product/19.3.0</span><br><span class=\"line\">ORACLE_BASE =/u01/app/oracle</span><br><span class=\"line\">oracle.install.db.InstallEdition = EE</span><br><span class=\"line\">oracle.install.db.OSDBA_GROUP = dba</span><br><span class=\"line\">oracle.install.db.OSOPER_GROUP = oper</span><br><span class=\"line\">oracle.install.db.OSBACKUPDBA_GROUP = backupdba</span><br><span class=\"line\">oracle.install.db.OSDGDBA_GROUP = dgdba</span><br><span class=\"line\">oracle.install.db.OSKMDBA_GROUP = kmdba</span><br><span class=\"line\">oracle.install.db.OSRACDBA_GROUP = racdba</span><br><span class=\"line\">oracle.install.db.rootconfig.executeRootScript = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行安装\"><a href=\"#执行安装\" class=\"headerlink\" title=\"执行安装\"></a>执行安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./runInstaller -silent -responseFile <span class=\"variable\">$ORACLE_HOME</span>/install/response/db_install.rsp</span><br></pre></td></tr></table></figure>\n\n<p><strong>若出现安装错误，请根据提示查看日志，分析错误原因</strong></p>\n<h4 id=\"安装成功根据提示使用-root-用户执行脚本\"><a href=\"#安装成功根据提示使用-root-用户执行脚本\" class=\"headerlink\" title=\"安装成功根据提示使用 root 用户执行脚本\"></a>安装成功根据提示使用 root 用户执行脚本</h4><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh <span class=\"regexp\">/u01/</span>app<span class=\"regexp\">/oraInventory/</span>orainstRoot.sh</span><br><span class=\"line\">sh <span class=\"regexp\">/u01/</span>app<span class=\"regexp\">/oracle/</span>product<span class=\"regexp\">/19.3.0/</span>root.sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看相关执行日志，若没有错误，表示已经安装完成</strong></p>\n<h3 id=\"创建数据库实例\"><a href=\"#创建数据库实例\" class=\"headerlink\" title=\"创建数据库实例\"></a>创建数据库实例</h3><h4 id=\"配置监听\"><a href=\"#配置监听\" class=\"headerlink\" title=\"配置监听\"></a>配置监听</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建监听</span></span><br><span class=\"line\">netca /silent /responseFile <span class=\"variable\">$ORACLE_HOME</span>/assistants/netca/netca.rsp</span><br><span class=\"line\"><span class=\"comment\"># 查看监听状态</span></span><br><span class=\"line\">lsnrctl status</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份 dbca.rsp 响应文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_HOME</span>/assistants/dbca</span><br><span class=\"line\"><span class=\"built_in\">cp</span> dbca.rsp dbca.rsp.bak</span><br><span class=\"line\"><span class=\"comment\"># 配置 dbca.rsp 响应文件</span></span><br><span class=\"line\">vi dbca.rsp</span><br><span class=\"line\"><span class=\"comment\"># 主要修改以下参数</span></span><br><span class=\"line\">gdbName = orcl</span><br><span class=\"line\">sid = orcl</span><br><span class=\"line\">databaseConfigType = SI</span><br><span class=\"line\">templateName = General_Purpose.dbc</span><br><span class=\"line\">sysPassword = Qwer1234</span><br><span class=\"line\">systemPassword = Qwer1234</span><br><span class=\"line\">emConfiguration = DBEXPRESS</span><br><span class=\"line\">dbsnmpPassword = Qwer1234</span><br><span class=\"line\">datafileDestination =/u01/app/oracle/oradata</span><br><span class=\"line\">characterSet = ZHS16GBK</span><br><span class=\"line\">totalMemory = 8192</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行安装-1\"><a href=\"#执行安装-1\" class=\"headerlink\" title=\"执行安装\"></a>执行安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbca -silent -createDatabase -responseFile <span class=\"variable\">$ORACLE_HOME</span>/assistants/dbca/dbca.rsp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接 sqlplus</span></span><br><span class=\"line\">sqlplus / as sysdba</span><br><span class=\"line\"><span class=\"comment\"># 查看实例的运行状态</span></span><br><span class=\"line\">select instance_name, status from v<span class=\"variable\">$instance</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完全卸载-Oracle-数据库\"><a href=\"#完全卸载-Oracle-数据库\" class=\"headerlink\" title=\"完全卸载 Oracle 数据库\"></a>完全卸载 Oracle 数据库</h3><h5 id=\"停止数据库服务\"><a href=\"#停止数据库服务\" class=\"headerlink\" title=\"停止数据库服务\"></a>停止数据库服务</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接 sqlplus</span></span><br><span class=\"line\">sqlplus / as sysdba</span><br><span class=\"line\"><span class=\"comment\"># 停止数据库服务</span></span><br><span class=\"line\">shutdown immediate;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"停止数据库监听\"><a href=\"#停止数据库监听\" class=\"headerlink\" title=\"停止数据库监听\"></a>停止数据库监听</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止数据库监听</span></span><br><span class=\"line\">lsnrctl stop</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-deinstall-工具进行卸载\"><a href=\"#使用-deinstall-工具进行卸载\" class=\"headerlink\" title=\"使用 deinstall 工具进行卸载\"></a>使用 deinstall 工具进行卸载</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行 deinstall 工具，按提示进行操作</span></span><br><span class=\"line\">/u01/app/oracle/product/19.3.0/deinstall/deinstall</span><br><span class=\"line\"><span class=\"comment\"># 执行结束后按提示使用 root 用户执行脚本</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/oraInst.loc</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /opt/ORCLfmap</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -r /etc/oratab</span><br></pre></td></tr></table></figure>\n\n","more":"<blockquote>\n<p><strong>安装目录示分区大小而定，不可盲目复制命令进行安装！</strong></p>\n</blockquote>\n<h2 id=\"安装-Docker-容器服务\"><a href=\"#安装-Docker-容器服务\" class=\"headerlink\" title=\"安装 Docker 容器服务\"></a>安装 Docker 容器服务</h2><h3 id=\"CentOS-安装\"><a href=\"#CentOS-安装\" class=\"headerlink\" title=\"CentOS 安装\"></a>CentOS 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 卸载旧的版本</span></span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 安装yum-utils包（提供 yum-config-manager 程序）</span></span><br><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 设置镜像的仓库</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo <span class=\"comment\"># 默认是国外的，十分慢！</span></span><br><span class=\"line\"><span class=\"comment\"># 建议使用阿里云的镜像地址</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新yum软件包索引</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 安装docker相关的 docker-ce docker-compose （默认为最新版）</span></span><br><span class=\"line\">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 安装指定版本</span></span><br><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin -y</span><br><span class=\"line\">sudo yum install docker-ce-20.10.13 docker-ce-cli-20.10.13 containerd.io docker-compose-plugin -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6. 启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7. 使用docker version查看是否安装成功</span></span><br><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ubuntu-安装\"><a href=\"#Ubuntu-安装\" class=\"headerlink\" title=\"Ubuntu 安装\"></a>Ubuntu 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 卸载旧的版本</span></span><br><span class=\"line\">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 更新软件包索引并安装软件包，以允许通过 HTTPS 使用存储库：aptapt</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    gnupg-agent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 添加 Docker 的官方 GPG 密钥：</span></span><br><span class=\"line\">sudo curl -fsSL http://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br><span class=\"line\"><span class=\"comment\"># 4. 设置存储库</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> \\</span><br><span class=\"line\">  <span class=\"string\">&quot;deb [arch=<span class=\"subst\">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] http://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$(. /etc/os-release &amp;&amp; echo <span class=\"string\">&quot;<span class=\"variable\">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \\</span><br><span class=\"line\">  sudo <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 如果您使用 Ubuntu 衍生发行版，例如 Linux Mint，则可能需要使用 UBUNTU_CODENAME 而不是 VERSION_CODENAME</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 更新包索引，并安装最新版本的 Docker 引擎、容器和 Docker Compose</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定版本</span></span><br><span class=\"line\">sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先列出存储库中的可用版本</span></span><br><span class=\"line\">apt-cache madison docker-ce</span><br><span class=\"line\"> docker-ce | 5:20.10.18~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span><br><span class=\"line\"> docker-ce | 5:20.10.17~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span><br><span class=\"line\"> docker-ce | 5:20.10.16~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 取出其中的版本号，例如：5:20.10.17~3-0~ubuntu-focal</span></span><br><span class=\"line\">sudo apt-get install docker-ce=5:20.10.17~3-0~ubuntu-focal docker-ce-cli=5:20.10.17~3-0~ubuntu-focal containerd.io docker-compose-plugin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6. 启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7. 使用docker version查看是否安装成功</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DockerHub-国内网络无法访问，如何下载镜像文件，离线导入\"><a href=\"#DockerHub-国内网络无法访问，如何下载镜像文件，离线导入\" class=\"headerlink\" title=\"DockerHub 国内网络无法访问，如何下载镜像文件，离线导入\"></a>DockerHub 国内网络无法访问，如何下载镜像文件，离线导入</h3><p><a href=\"https://wkdaily.cpolar.cn/archives/gc\">使用 Github Action 构建 docker 镜像</a></p>\n<h2 id=\"安装-MiniKube-单机-K8S-服务\"><a href=\"#安装-MiniKube-单机-K8S-服务\" class=\"headerlink\" title=\"安装 MiniKube 单机 K8S 服务\"></a>安装 MiniKube 单机 K8S 服务</h2><blockquote>\n<p><strong>安装环境：CentOS 8</strong></p>\n</blockquote>\n<h3 id=\"安装-kubectl\"><a href=\"#安装-kubectl\" class=\"headerlink\" title=\"安装 kubectl\"></a>安装 kubectl</h3><blockquote>\n<p><a href=\"https://kubernetes.io/zh-cn/docs/tasks/tools/\">安装工具 | Kubernetes</a></p>\n</blockquote>\n<h3 id=\"安装-MiniKube\"><a href=\"#安装-MiniKube\" class=\"headerlink\" title=\"安装 MiniKube\"></a>安装 MiniKube</h3><blockquote>\n<p><a href=\"https://minikube.kubernetes.ac.cn/docs/start/?arch=/windows/x86-64/stable/.exe+download\">minikube start | minikube 中文</a></p>\n</blockquote>\n<p>常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 minikube</span></span><br><span class=\"line\">minikube start --driver=<span class=\"string\">&#x27;docker&#x27;</span> --cache-images=<span class=\"literal\">true</span>  --kubernetes-version=<span class=\"string\">&#x27;v1.31.0&#x27;</span> --registry-mirror=<span class=\"string\">&#x27;https://hub.geekery.cn&#x27;</span> --base-image=<span class=\"string\">&#x27;registry.cn-hangzhou.aliyuncs.com/google_containers/kicbase:v0.0.45&#x27;</span> --listen-address=0.0.0.0 --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启 dashboard</span></span><br><span class=\"line\">minikube dashboard</span><br><span class=\"line\"><span class=\"comment\"># 启动端口转发，提供 dashboard 供外部访问</span></span><br><span class=\"line\">kubectl port-forward -n kubernetes-dashboard svc/kubernetes-dashboard 8080:80 --address 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启 nginx ingress controller 插件</span></span><br><span class=\"line\"><span class=\"comment\"># 1.手动加载国内镜像</span></span><br><span class=\"line\">minikube image load registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:v1.12.0-beta.0</span><br><span class=\"line\">minikube image load registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.4</span><br><span class=\"line\"><span class=\"comment\"># 2.开启插件</span></span><br><span class=\"line\">minikube addons <span class=\"built_in\">enable</span> ingress --images=<span class=\"string\">&quot;KubeWebhookCertgenCreate=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.4,KubeWebhookCertgenPatch=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.4.4,IngressController=google_containers/nginx-ingress-controller:v1.12.0-beta.0&quot;</span> --registries=<span class=\"string\">&quot;IngressController=registry.cn-hangzhou.aliyuncs.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布应用</span></span><br><span class=\"line\"><span class=\"comment\"># 前提</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 nfs 共享文件夹，供 pod 内的容器访问</span></span><br><span class=\"line\"><span class=\"comment\"># 后端</span></span><br><span class=\"line\"><span class=\"comment\"># 1.导入打包好的后端应用 docker 镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 Minikube 的 Docker 环境</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(minikube -p minikube docker-env)</span><br><span class=\"line\"><span class=\"comment\"># 导入镜像到 Minikube</span></span><br><span class=\"line\">docker load -i vxtcip-boot-v1.0.0.tar</span><br><span class=\"line\"><span class=\"comment\"># 2.编写 deployment 配置文件（yaml）</span></span><br><span class=\"line\"><span class=\"comment\"># 略...</span></span><br><span class=\"line\"><span class=\"comment\"># 3.部署 deployment</span></span><br><span class=\"line\">kubectl apply -f *-deployment.yaml</span><br><span class=\"line\"><span class=\"comment\"># 重启 deployment</span></span><br><span class=\"line\">kubectl rollout restart -n <span class=\"variable\">$&#123;namespace-name&#125;</span> deployment <span class=\"variable\">$&#123;deployment-name&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 删除 deployment</span></span><br><span class=\"line\">kubectl delete -n <span class=\"variable\">$&#123;namespace-name&#125;</span> deployment <span class=\"variable\">$&#123;deployment-name&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Kubernetes-集群和-KubeSphere\"><a href=\"#安装-Kubernetes-集群和-KubeSphere\" class=\"headerlink\" title=\"安装 Kubernetes 集群和 KubeSphere\"></a>安装 Kubernetes 集群和 KubeSphere</h2><blockquote>\n<p>官方文档: <a href=\"https://www.kubesphere.io/zh/docs/v4.1/03-installation-and-upgrade/02-install-kubesphere/02-install-kubernetes-and-kubesphere/\">在 Linux 上安装 Kubernetes 和 KubeSphere</a></p>\n<p>参考博客：<a href=\"https://www.kubesphere.io/zh/blogs/kubesphere-4.1.2-deployment-and-extension-installation/#23-%E9%83%A8%E7%BD%B2-k8s-%E9%9B%86%E7%BE%A4\">33 张高清大图，带你玩转 KubeSphere 4.1.2 部署与扩展组件安装</a></p>\n</blockquote>\n<h3 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h3><h4 id=\"安装-Ansible-自动化运维工具（用于批量执行脚本-命令）\"><a href=\"#安装-Ansible-自动化运维工具（用于批量执行脚本-命令）\" class=\"headerlink\" title=\"安装 Ansible 自动化运维工具（用于批量执行脚本/命令）\"></a>安装 Ansible 自动化运维工具（用于批量执行脚本/命令）</h4><p>参考本文《Ansible 安装与配置》</p>\n<h4 id=\"操作系统基础配置\"><a href=\"#操作系统基础配置\" class=\"headerlink\" title=\"操作系统基础配置\"></a>操作系统基础配置</h4><p>可使用 Ansible 批量在集群机器上执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置主机名(每台机器都需要配置，按照不同的 hostname 执行)</span></span><br><span class=\"line\">hostnamectl set-hostname k8s-control-1</span><br><span class=\"line\"><span class=\"comment\"># 配置DNS(已配置则忽略)</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;echo &quot;nameserver 114.114.114.114&quot; &gt; /etc/resolv.conf&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置服务器时区</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;timedatectl set-timezone Asia/Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 配置时间同步</span></span><br><span class=\"line\"><span class=\"comment\"># - 安装 chrony 作为时间同步软件</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;yum install chrony -y&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># - 编辑配置文件 /etc/chrony.conf，修改 ntp 服务器配置</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&quot;sed -i &#x27;s/^pool pool.*/pool cn.pool.ntp.org iburst/g&#x27; /etc/chrony.conf&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># - 重启并设置 chrony 服务开机自启动</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;systemctl enable chronyd --now&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># - 验证 chrony 同步状态</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;chronyc sourcestats -v&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 关闭系统防火墙</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;systemctl stop firewalld &amp;&amp; systemctl disable firewalld&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 禁用 SELinux</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&quot;sed -i &#x27;s/^SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 安装必须依赖</span></span><br><span class=\"line\">ansible k8s -m shell -a <span class=\"string\">&#x27;yum install curl socat conntrack ebtables ipset ipvsadm -y&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"磁盘配置\"><a href=\"#磁盘配置\" class=\"headerlink\" title=\"磁盘配置\"></a>磁盘配置</h4><p>每台服务器新增一块数据盘 <strong>/dev/sdb</strong>，用于 <strong>Containerd</strong> 和 <strong>Kubernetes Pod</strong> 的持久化存储</p>\n<p>为了满足用户在上线后数据盘容量不足时，可以实现动态扩容的需求。本文采用了 LVM 的方式配置磁盘</p>\n<h5 id=\"使用-LVM-配置硬盘，并挂载到数据目录\"><a href=\"#使用-LVM-配置硬盘，并挂载到数据目录\" class=\"headerlink\" title=\"使用 LVM 配置硬盘，并挂载到数据目录\"></a>使用 LVM 配置硬盘，并挂载到数据目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 PV</span></span><br><span class=\"line\">pvcreate /dev/sdb</span><br><span class=\"line\"><span class=\"comment\"># 创建 VG</span></span><br><span class=\"line\">vgcreate data /dev/sdb</span><br><span class=\"line\"><span class=\"comment\"># 创建 LV（使用所有空间，VG 名字为 data，LV 名字为 lvdata）</span></span><br><span class=\"line\">lvcreate -l 100%VG data -n lvdata、</span><br><span class=\"line\"><span class=\"comment\"># 格式化磁盘</span></span><br><span class=\"line\">mkfs.xfs /dev/mapper/data-lvdata</span><br><span class=\"line\"><span class=\"comment\"># 手工挂载</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /u01</span><br><span class=\"line\">mount /dev/mapper/data-lvdata /u01/</span><br><span class=\"line\"><span class=\"comment\"># 开机自动挂载</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -1 /etc/mtab &gt;&gt; /etc/fstab</span><br><span class=\"line\"><span class=\"comment\"># 创建 OpenEBS 本地数据根目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/openebs/local</span><br><span class=\"line\"><span class=\"comment\"># 创建 Containerd 数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/containerd</span><br><span class=\"line\"><span class=\"comment\"># 创建 Containerd 数据目录软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /u01/containerd /var/lib/containerd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-Kubernetes-集群\"><a href=\"#部署-Kubernetes-集群\" class=\"headerlink\" title=\"部署 Kubernetes 集群\"></a>部署 Kubernetes 集群</h3><p>使用 KubeSphere 出品的 KubeKey 工具，可以根据配置文件一键部署 K8S 高可用集群</p>\n<p>选择一台 control 节点作为部署节点，执行下面的操作</p>\n<h4 id=\"下载-KubeKey\"><a href=\"#下载-KubeKey\" class=\"headerlink\" title=\"下载 KubeKey\"></a>下载 KubeKey</h4><ul>\n<li><p>下载最新版的 KubeKey（<strong>v3.1.7</strong>）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /u01/kubekey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /u01/kubekey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择中文区下载(访问 GitHub 受限时使用)</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> KKZONE=cn</span><br><span class=\"line\">curl -sfL https://get-kk.kubesphere.io | sh -</span><br></pre></td></tr></table></figure></li>\n<li><p>查看 KubeKey 支持的 Kubernetes 版本列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kk version --show-supported-k8s</span><br></pre></td></tr></table></figure>\n\n<p>选择稳定且兼容性高的较新版本，本文选择的是 <strong>v1.28.15</strong></p>\n</li>\n</ul>\n<h4 id=\"创建-Kubernetes-集群部署配置\"><a href=\"#创建-Kubernetes-集群部署配置\" class=\"headerlink\" title=\"创建 Kubernetes 集群部署配置\"></a>创建 Kubernetes 集群部署配置</h4><ol>\n<li><p>创建集群配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kk create config -f ksp-k8s-v12815.yaml --with-kubernetes v1.28.15</span><br></pre></td></tr></table></figure></li>\n<li><p>修改配置文件</p>\n</li>\n</ol>\n<p>本文采用 3 个节点同时作为 control-plane、etcd 和 worker 节点</p>\n<p>请使用编辑器，编辑配置文件 <code>ksp-k8s-v12815.yaml</code>，修改 <strong>kind: Cluster</strong> 小节中 hosts 和 roleGroups 等信息，修改说明如下：</p>\n<ul>\n<li>hosts：指定节点的 IP、ssh 用户、ssh 密码</li>\n<li>roleGroups：指定 3 个 etcd、control-plane 节点，并复用为 worker 节点</li>\n<li>internalLoadbalancer： 启用内置的 HAProxy 负载均衡器</li>\n<li>domain：自定义域名 <strong>lb.opsxlab.cn</strong>，没特殊需求可使用默认值 <strong>lb.kubesphere.local</strong></li>\n<li>clusterName：自定义 <strong>opsxlab.cn</strong>，没特殊需求可使用默认值 <strong>cluster.local</strong></li>\n<li>autoRenewCerts：该参数可以实现证书到期自动续期，默认为 <strong>true</strong></li>\n<li>containerManager：容器运行时使用 <strong>containerd</strong></li>\n<li>storage.openebs.basePath：<strong>默认没有，新增配置</strong>，指定 openebs 默认存储路径为 <strong>/data/openebs/local</strong></li>\n<li>registry.privateRegistry：<strong>可选配置，</strong> 解决 Docker 官方镜像不可用的问题</li>\n<li>registry.namespaceOverride： <strong>可选配置，</strong> 解决 Docker 官方镜像不可用的问题</li>\n</ul>\n<p>修改后的完整示例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubekey.kubesphere.io/v1alpha2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">vansys</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">k8s-control-1</span>, <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.101</span>, <span class=\"attr\">internalAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.101</span>, <span class=\"attr\">user:</span> <span class=\"string\">root</span>, <span class=\"attr\">password:</span> <span class=\"string\">&quot;xxx&quot;</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">k8s-control-2</span>, <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.102</span>, <span class=\"attr\">internalAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.102</span>, <span class=\"attr\">user:</span> <span class=\"string\">root</span>, <span class=\"attr\">password:</span> <span class=\"string\">&quot;xxx&quot;</span>&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">k8s-control-3</span>, <span class=\"attr\">address:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.103</span>, <span class=\"attr\">internalAddress:</span> <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.103</span>, <span class=\"attr\">user:</span> <span class=\"string\">root</span>, <span class=\"attr\">password:</span> <span class=\"string\">&quot;xxx&quot;</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">roleGroups:</span></span><br><span class=\"line\">    <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-3</span></span><br><span class=\"line\">    <span class=\"attr\">control-plane:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-3</span></span><br><span class=\"line\">    <span class=\"attr\">worker:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">k8s-control-3</span></span><br><span class=\"line\">  <span class=\"attr\">controlPlaneEndpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">domain:</span> <span class=\"string\">lb.kubesphere.local</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6443</span></span><br><span class=\"line\">  <span class=\"attr\">kubernetes:</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1.28.15</span></span><br><span class=\"line\">    <span class=\"attr\">clusterName:</span> <span class=\"string\">cluster.local</span></span><br><span class=\"line\">    <span class=\"attr\">autoRenewCerts:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">containerManager:</span> <span class=\"string\">containerd</span></span><br><span class=\"line\">  <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">kubekey</span></span><br><span class=\"line\">  <span class=\"attr\">network:</span></span><br><span class=\"line\">    <span class=\"attr\">plugin:</span> <span class=\"string\">calico</span></span><br><span class=\"line\">    <span class=\"attr\">kubePodsCIDR:</span> <span class=\"number\">10.233</span><span class=\"number\">.64</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\">    <span class=\"attr\">kubeServiceCIDR:</span> <span class=\"number\">10.233</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/18</span></span><br><span class=\"line\">    <span class=\"attr\">enableMultusCNI:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">storage:</span></span><br><span class=\"line\">    <span class=\"attr\">openebs:</span></span><br><span class=\"line\">      <span class=\"attr\">basePath:</span> <span class=\"string\">/u01/openebs/local</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用 KubeSphere 在阿里云的镜像仓库，避免国内拉不下镜像的问题</span></span><br><span class=\"line\">    <span class=\"attr\">privateRegistry:</span> <span class=\"string\">&quot;registry.cn-beijing.aliyuncs.com&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">namespaceOverride:</span> <span class=\"string\">&quot;kubesphereio&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">registryMirrors:</span> []</span><br><span class=\"line\">    <span class=\"attr\">insecureRegistries:</span> []</span><br><span class=\"line\">  <span class=\"attr\">addons:</span> []</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署-Kubernetes-集群-1\"><a href=\"#部署-Kubernetes-集群-1\" class=\"headerlink\" title=\"部署 Kubernetes 集群\"></a>部署 Kubernetes 集群</h4><p>使用上面创建的配置文件，执行下面的命令，创建 K8S 集群</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> KKZONE=cn</span><br><span class=\"line\">./kk create cluster -f ksp-k8s-v12815.yaml</span><br></pre></td></tr></table></figure>\n\n<p>命令执行后，首先 <strong>Kubekey</strong> 会检查部署 K8S 的依赖及其他详细要求。通过检查后，系统将提示您确认安装。输入 <strong>yes</strong> 并按 <strong>ENTER</strong> 继续部署</p>\n<p>部署完成需要大约 10-20 分钟左右，具体需要看网速跟机器配置，若部署成功，会在终端显示如下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20:10:23 CST Pipeline[CreateClusterPipeline] execute successfully</span><br><span class=\"line\">Installation is complete.</span><br><span class=\"line\"></span><br><span class=\"line\">Please check the result using the <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        kubectl get pod -A</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证-Kubernetes-集群状态\"><a href=\"#验证-Kubernetes-集群状态\" class=\"headerlink\" title=\"验证 Kubernetes 集群状态\"></a>验证 Kubernetes 集群状态</h4><p>在 control-1 控制节点使用 kubectl 命令验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看集群节点信息</span></span><br><span class=\"line\">kubectl get nodes -o wide</span><br><span class=\"line\"><span class=\"comment\"># 查看 Pod 信息</span></span><br><span class=\"line\">kubectl get pods -A -o wide</span><br><span class=\"line\"><span class=\"comment\"># 查看 Image 列表</span></span><br><span class=\"line\">crictl images <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h4><p>安装 Kubernetes 时出现如下日志，且 kubeadm 初始化集群超时</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">detected <span class=\"keyword\">that</span> <span class=\"keyword\">the</span> sandbox image <span class=\"string\">&quot;registry.k8s.io/pause:3.8&quot;</span> <span class=\"keyword\">of</span> <span class=\"keyword\">the</span> container runtime <span class=\"keyword\">is</span> inconsistent <span class=\"keyword\">with</span> <span class=\"keyword\">that</span> used <span class=\"keyword\">by</span> kubeadm. It <span class=\"keyword\">is</span> recommended <span class=\"keyword\">that</span> using <span class=\"string\">&quot;registry.cn-beijing.aliyuncs.com/kubesphereio/pause:3.9&quot;</span> <span class=\"keyword\">as</span> <span class=\"keyword\">the</span> CRI sandbox image</span><br></pre></td></tr></table></figure>\n\n<p>问题原因：containerd 配置的 sandbox image 跟 kubeadm 配置的不一致</p>\n<p>解决办法：将 <code>/etc/containerd/config.toml</code> 配置文件中的 sandbox_image 修改为 KubeKey 创建集群的配置文件中 <code>privateRegistry</code> 仓库的镜像，保持跟 kubeadm 的一致</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class=\"line\">  <span class=\"attr\">sandbox_image</span> = <span class=\"string\">&quot;registry.cn-beijing.aliyuncs.com/kubesphereio/pause:3.9&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis-缓存服务安装部署\"><a href=\"#Redis-缓存服务安装部署\" class=\"headerlink\" title=\"Redis 缓存服务安装部署\"></a>Redis 缓存服务安装部署</h2><p>这里下载的是 <code>redis-5.0.8.tar.gz</code> 安装包，并将其直接放在了 <code>opt</code> ⽬ 录下</p>\n<h3 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h3><p>1、在 <code>/usr/local/</code> 下创建 <code>redis</code> ⽂ 件夹并进 ⼊</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> redis</span><br><span class=\"line\"><span class=\"built_in\">cd</span> redis</span><br></pre></td></tr></table></figure>\n\n<p>2、将 <code>Redis</code> 安装包解压到 <code>/usr/local/redis</code> 中即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf /opt/redis-5.0.8.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>解压完之后， <code>/usr/local/redis</code> ⽬ 录中会出现 ⼀ 个 <code>redis-5.0.8.tar.gz</code> 的 ⽬ 录</p>\n<h3 id=\"编译并安装\"><a href=\"#编译并安装\" class=\"headerlink\" title=\"编译并安装\"></a>编译并安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> redis-5.0.8/</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将-Redis-安装为系统服务并后台启动\"><a href=\"#将-Redis-安装为系统服务并后台启动\" class=\"headerlink\" title=\"将 Redis 安装为系统服务并后台启动\"></a>将 Redis 安装为系统服务并后台启动</h3><p>进入 <code>utils</code> 目录，并执行如下脚本即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> utils/</span><br><span class=\"line\">./install_server.sh</span><br></pre></td></tr></table></figure>\n\n<p>此处我全部选择默认配置，有需要可以按需选择</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194438.png\" alt=\"image-20220401194430903\"></p>\n<h3 id=\"查看-Redis-服务启动情况\"><a href=\"#查看-Redis-服务启动情况\" class=\"headerlink\" title=\"查看 Redis 服务启动情况\"></a>查看 Redis 服务启动情况</h3><p>直接执行如下命令来查看 Redis 的启动结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status redis_6379.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 扩展</span></span><br><span class=\"line\">启动：systemctl start redis_6379.service</span><br><span class=\"line\">停止：systemctl stop redis_6379.service</span><br><span class=\"line\">重启：systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194604.png\" alt=\"image-20220401194604551\"></p>\n<h3 id=\"启动-Redis-客户端并测试\"><a href=\"#启动-Redis-客户端并测试\" class=\"headerlink\" title=\"启动 Redis 客户端并测试\"></a>启动 Redis 客户端并测试</h3><p>启动自带的 <code>redis-cli</code> 客户端，测试通过：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401194833.png\" alt=\"image-20220401194833905\" style=\"zoom:50%;\" />\n\n<p>但是此时只能在本地访问，无法远程连接，因此还需要做部分设置</p>\n<h3 id=\"运行远程连接\"><a href=\"#运行远程连接\" class=\"headerlink\" title=\"运行远程连接\"></a>运行远程连接</h3><p>编辑 <code>redis</code> 配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>bind 127.0.0.1</code> 修改为 <code>0.0.0.0</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401195240.png\" alt=\"image-20220401195240594\"></p>\n<p>保存然后重启 <code>Redis</code> 服务即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置访问密码\"><a href=\"#设置访问密码\" class=\"headerlink\" title=\"设置访问密码\"></a>设置访问密码</h3><p>编辑 <code>redis</code> 配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到如下内容：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#requirepass foobared</span></span><br></pre></td></tr></table></figure>\n\n<p>去掉注释，将 <code>foobared</code> 修改为自己想要的密码，保存即可。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">requirepass</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>保存然后重启 <code>Redis</code> 服务即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart redis_6379.service</span><br></pre></td></tr></table></figure>\n\n<p>这样后续的访问需要先输入密码认证通过：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220401195615.png\" alt=\"image-20220401195615345\"></p>\n<h2 id=\"WEB-服务器-Nginx-安装部署\"><a href=\"#WEB-服务器-Nginx-安装部署\" class=\"headerlink\" title=\"WEB 服务器 Nginx 安装部署\"></a>WEB 服务器 Nginx 安装部署</h2><p>这 ⾥ 下载的是 <code>nginx-1.17.10.tar.gz</code> 安装包，并将其直接放在了 <code>opt</code> ⽬ 录下</p>\n<h3 id=\"解压安装包-1\"><a href=\"#解压安装包-1\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h3><p>1、在 <code>/usr/local/</code> 下创建 <code>nginx</code> ⽂ 件夹并进 ⼊</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> nginx</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx</span><br></pre></td></tr></table></figure>\n\n<p>2、将 <code>Nginx</code> 安装包解压到 <code>/usr/local/nginx</code> 中即可</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">tar</span> zxvf /opt/nginx-<span class=\"number\">1</span>.<span class=\"number\">17</span>.<span class=\"number\">10</span>.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>解压完之后， <code>/usr/local/nginx</code> ⽬ 录中会出现 ⼀ 个 <code>nginx-1.17.10</code> 的 ⽬ 录</p>\n<h3 id=\"预先安装额外的依赖\"><a href=\"#预先安装额外的依赖\" class=\"headerlink\" title=\"预先安装额外的依赖\"></a>预先安装额外的依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install pcre-devel openssl openssl-devel gcc gcc-c++ autoconf automake make</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译安装-Nginx\"><a href=\"#编译安装-Nginx\" class=\"headerlink\" title=\"编译安装 Nginx\"></a>编译安装 Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.17.10</span><br><span class=\"line\"><span class=\"comment\"># 使用 --prefix= 可以指定目录安装</span></span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，Nginx 的可执 ⾏⽂ 件位置位于</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-Nginx\"><a href=\"#启动-Nginx\" class=\"headerlink\" title=\"启动 Nginx\"></a>启动 Nginx</h3><p>直接执 ⾏ 如下命令即可：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx</span><br></pre></td></tr></table></figure>\n\n<p>如果想停 ⽌ Nginx 服务，可执 ⾏：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s stop</span><br></pre></td></tr></table></figure>\n\n<p>如果修改了配置 ⽂ 件后想重新加载 Nginx，可执 ⾏：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>注意其配置 ⽂ 件位于：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Centos6-9-注册为系统服务，并开机自启\"><a href=\"#Centos6-9-注册为系统服务，并开机自启\" class=\"headerlink\" title=\"Centos6.9 注册为系统服务，并开机自启\"></a>Centos6.9 注册为系统服务，并开机自启</h3><p>首先，在 linux 系统的/etc/init.d/目录下创建 nginx 文件，使用如下命令：</p>\n<p><code>vi /etc/init.d/nginx</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># nginx - this script starts and stops the nginx daemon</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig:   - 85 15</span></span><br><span class=\"line\"><span class=\"comment\"># description:  NGINX is an HTTP(S) server, HTTP(S) reverse \\</span></span><br><span class=\"line\"><span class=\"comment\">#               proxy and IMAP/POP3 proxy server</span></span><br><span class=\"line\"><span class=\"comment\"># processname: nginx</span></span><br><span class=\"line\"><span class=\"comment\"># config:      /etc/nginx/nginx.conf</span></span><br><span class=\"line\"><span class=\"comment\"># config:      /etc/sysconfig/nginx</span></span><br><span class=\"line\"><span class=\"comment\"># pidfile:     /var/run/nginx.pid</span></span><br><span class=\"line\"><span class=\"comment\"># Source function library.</span></span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"><span class=\"comment\"># Source networking configuration.</span></span><br><span class=\"line\">. /etc/sysconfig/network</span><br><span class=\"line\"><span class=\"comment\"># Check that networking is up.</span></span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"variable\">$NETWORKING</span>&quot;</span> = <span class=\"string\">&quot;no&quot;</span> ] &amp;&amp; <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"comment\"># 这里根据实际安装位置修改</span></span><br><span class=\"line\">nginx=<span class=\"string\">&quot;/usr/local/nginx/sbin/nginx&quot;</span></span><br><span class=\"line\">prog=$(<span class=\"built_in\">basename</span> <span class=\"variable\">$nginx</span>)</span><br><span class=\"line\"><span class=\"comment\"># 这里根据实际配置文件位置修改</span></span><br><span class=\"line\">NGINX_CONF_FILE=<span class=\"string\">&quot;/usr/local/nginx/conf&quot;</span></span><br><span class=\"line\">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class=\"line\">lockfile=/var/lock/subsys/nginx</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">make_dirs</span></span>() &#123;</span><br><span class=\"line\">   <span class=\"comment\"># make required directories</span></span><br><span class=\"line\">   user=`<span class=\"variable\">$nginx</span> -V 2&gt;&amp;1 | grep <span class=\"string\">&quot;configure arguments:&quot;</span> | sed <span class=\"string\">&#x27;s/[^*]*--user=\\([^ ]*\\).*/\\1/g&#x27;</span> -`</span><br><span class=\"line\">   <span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;`grep <span class=\"variable\">$user</span> /etc/passwd`&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">       useradd -M -s /bin/nologin <span class=\"variable\">$user</span></span><br><span class=\"line\">   <span class=\"keyword\">fi</span></span><br><span class=\"line\">   options=`<span class=\"variable\">$nginx</span> -V 2&gt;&amp;1 | grep <span class=\"string\">&#x27;configure arguments:&#x27;</span>`</span><br><span class=\"line\">   <span class=\"keyword\">for</span> opt <span class=\"keyword\">in</span> <span class=\"variable\">$options</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> [ `<span class=\"built_in\">echo</span> <span class=\"variable\">$opt</span> | grep <span class=\"string\">&#x27;.*-temp-path&#x27;</span>` ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">           value=`<span class=\"built_in\">echo</span> <span class=\"variable\">$opt</span> | <span class=\"built_in\">cut</span> -d <span class=\"string\">&quot;=&quot;</span> -f 2`</span><br><span class=\"line\">           <span class=\"keyword\">if</span> [ ! -d <span class=\"string\">&quot;<span class=\"variable\">$value</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">               <span class=\"comment\"># echo &quot;creating&quot; $value</span></span><br><span class=\"line\">               <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$value</span> &amp;&amp; <span class=\"built_in\">chown</span> -R <span class=\"variable\">$user</span> <span class=\"variable\">$value</span></span><br><span class=\"line\">           <span class=\"keyword\">fi</span></span><br><span class=\"line\">       <span class=\"keyword\">fi</span></span><br><span class=\"line\">   <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">    [ -x <span class=\"variable\">$nginx</span> ] || <span class=\"built_in\">exit</span> 5</span><br><span class=\"line\">    [ -f <span class=\"variable\">$NGINX_CONF_FILE</span> ] || <span class=\"built_in\">exit</span> 6</span><br><span class=\"line\">    make_dirs</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot;Starting <span class=\"variable\">$prog</span>: &quot;</span></span><br><span class=\"line\">    daemon <span class=\"variable\">$nginx</span> -c <span class=\"variable\">$NGINX_CONF_FILE</span></span><br><span class=\"line\">    retval=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    [ <span class=\"variable\">$retval</span> -eq 0 ] &amp;&amp; <span class=\"built_in\">touch</span> <span class=\"variable\">$lockfile</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot;Stopping <span class=\"variable\">$prog</span>: &quot;</span></span><br><span class=\"line\">    killproc <span class=\"variable\">$prog</span> -QUIT</span><br><span class=\"line\">    retval=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    [ <span class=\"variable\">$retval</span> -eq 0 ] &amp;&amp; <span class=\"built_in\">rm</span> -f <span class=\"variable\">$lockfile</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">restart</span></span>() &#123;</span><br><span class=\"line\">    configtest || <span class=\"built_in\">return</span> $?</span><br><span class=\"line\">    stop</span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\">    start</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">reload</span></span>() &#123;</span><br><span class=\"line\">    configtest || <span class=\"built_in\">return</span> $?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot;Reloading <span class=\"variable\">$prog</span>: &quot;</span></span><br><span class=\"line\">    killproc <span class=\"variable\">$nginx</span> -HUP</span><br><span class=\"line\">    RETVAL=$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">force_reload</span></span>() &#123;</span><br><span class=\"line\">    restart</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">configtest</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"variable\">$nginx</span> -t -c <span class=\"variable\">$NGINX_CONF_FILE</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">rh_status</span></span>() &#123;</span><br><span class=\"line\">    status <span class=\"variable\">$prog</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">rh_status_q</span></span>() &#123;</span><br><span class=\"line\">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        rh_status_q &amp;&amp; <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        rh_status_q || <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart|configtest)</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload)</span><br><span class=\"line\">        rh_status_q || <span class=\"built_in\">exit</span> 7</span><br><span class=\"line\">        <span class=\"variable\">$1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    force-reload)</span><br><span class=\"line\">        force_reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">        rh_status</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    condrestart|try-restart)</span><br><span class=\"line\">        rh_status_q || <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> $<span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 2</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n\n<p>保存脚本文件，并修改权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改文件权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> a+x /etc/init.d/nginx</span><br><span class=\"line\"><span class=\"comment\"># 添加为系统服务</span></span><br><span class=\"line\">chkconfig --add /etc/init.d/nginx</span><br><span class=\"line\"><span class=\"comment\"># 服务启动/停止命令</span></span><br><span class=\"line\">service nginx start</span><br><span class=\"line\">service nginx stop</span><br><span class=\"line\"><span class=\"comment\"># 设置终端模式开机启动</span></span><br><span class=\"line\">chkconfig nginx on</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS7-注册为系统服务，并开机自启\"><a href=\"#CentOS7-注册为系统服务，并开机自启\" class=\"headerlink\" title=\"CentOS7 注册为系统服务，并开机自启\"></a>CentOS7 注册为系统服务，并开机自启</h3><p>在系统中创建服务脚本，命令如下：</p>\n<p><code>vi /usr/lib/systemd/system/nginx.service</code></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"keyword\">Description</span>=nginx - web server</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>logs/nginx.pid</span><br><span class=\"line\">ExecStartPre=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -t -c /u</span>sr<span class=\"regexp\">/local/</span>nginx<span class=\"regexp\">/conf/</span>nginx.conf</span><br><span class=\"line\">ExecStart=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -c /u</span>sr<span class=\"regexp\">/local/</span>nginx<span class=\"regexp\">/conf/</span>nginx.conf</span><br><span class=\"line\">ExecReload=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s reload</span><br><span class=\"line\">ExecStop=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s stop</span><br><span class=\"line\">ExecQuit=<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/nginx/</span>sbin/nginx -s quit</span><br><span class=\"line\">PrivateTmp=<span class=\"keyword\">true</span></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>重新加载系统服务，并设置开机自启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新加载系统服务</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl start nginx.service</span><br><span class=\"line\"><span class=\"comment\"># 开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JDK（Java-环境）安装\"><a href=\"#JDK（Java-环境）安装\" class=\"headerlink\" title=\"JDK（Java 环境）安装\"></a>JDK（Java 环境）安装</h2><blockquote>\n<p>注意：这 ⾥ 安装的是 Oracle JDK</p>\n</blockquote>\n<h3 id=\"准备-JDK-安装包\"><a href=\"#准备-JDK-安装包\" class=\"headerlink\" title=\"准备 JDK 安装包\"></a>准备 JDK 安装包</h3><p>我这里下载的是 <code>jdk-8u251-linux-x64.tar.gz</code> 安装包，并将其放在了 <code>/opt</code> 目录下</p>\n<h3 id=\"卸载已有的-OPENJDK（如果有）\"><a href=\"#卸载已有的-OPENJDK（如果有）\" class=\"headerlink\" title=\"卸载已有的 OPENJDK（如果有）\"></a>卸载已有的 OPENJDK（如果有）</h3><p>如果系统 ⾃ 带有 <code>OpenJDK</code>，可以按照如下步骤提前卸载之。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep java</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308133517.png\" alt=\"image-20220308132559705\"></p>\n<p>接下来可以将 <code>java</code> 开头的安装包均卸载即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64</span><br><span class=\"line\">yum -y remove java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64</span><br><span class=\"line\">... 省略 ...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建目录并解压\"><a href=\"#创建目录并解压\" class=\"headerlink\" title=\"创建目录并解压\"></a>创建目录并解压</h3><p>1、在 <code>/usr/local/</code> 下创建 <code>java</code> 文件夹并进入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> java</span><br><span class=\"line\"><span class=\"built_in\">cd</span> java</span><br></pre></td></tr></table></figure>\n\n<p>2、将上 ⾯ 准备好的 JDK 安装包解压到 /usr/local/java 中即可</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf <span class=\"regexp\">/opt/</span>jdk-<span class=\"number\">8</span>u251-linux-x64.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>解压完之后， /usr/local/java ⽬ 录中会出现 ⼀ 个 jdk1.8.0_251 的 ⽬ 录</p>\n<h3 id=\"配置-JDK-环境变量\"><a href=\"#配置-JDK-环境变量\" class=\"headerlink\" title=\"配置 JDK 环境变量\"></a>配置 JDK 环境变量</h3><p>编辑 <code>/etc/profile</code> 文件，在文件尾部加入如下 <code>JDK</code> 环境配置即可</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">JAVA_HOME</span>=/usr/local/java/jdk1.8.0_251</span><br><span class=\"line\"><span class=\"attribute\">CLASSPATH</span>=<span class=\"variable\">$JAVA_HOME</span>/lib/</span><br><span class=\"line\"><span class=\"attribute\">PATH</span>=<span class=\"variable\">$PATH</span>:$JAVA_HOME/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>\n\n<p>然后执 ⾏ 如下命令让环境变量 ⽣ 效</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">source</span> <span class=\"regexp\">/etc/</span>profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"验证-JDK-安装结果\"><a href=\"#验证-JDK-安装结果\" class=\"headerlink\" title=\"验证 JDK 安装结果\"></a>验证 JDK 安装结果</h3><p>输入如下命令即可检查安装结果：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -<span class=\"built_in\">version</span></span><br><span class=\"line\"></span><br><span class=\"line\">javac</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308153603.png\" alt=\"image-20220308153602981\"></p>\n<h2 id=\"Maven-项目构建和管理工具安装\"><a href=\"#Maven-项目构建和管理工具安装\" class=\"headerlink\" title=\"Maven 项目构建和管理工具安装\"></a>Maven 项目构建和管理工具安装</h2><h3 id=\"准备-MAVEN-安装包并解压\"><a href=\"#准备-MAVEN-安装包并解压\" class=\"headerlink\" title=\"准备 MAVEN 安装包并解压\"></a>准备 MAVEN 安装包并解压</h3><p>这 ⾥ 下载的是 <code>apache-maven-3.6.3-bin.tar.gz</code> 安装包，并将其放置于提前创建好的 <code>/usr/local/maven</code> ⽬ 录下。</p>\n<p>执 ⾏ 命令解压之：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf /opt/apache-maven-3.6.3-bin.tar.gz -C ./</span><br></pre></td></tr></table></figure>\n\n<p>即可在当前 ⽬ 录得到 /usr/local/maven/apache-maven-3.6.3 ⽬ 录</p>\n<h3 id=\"配置-MAVEN-加速镜像源\"><a href=\"#配置-MAVEN-加速镜像源\" class=\"headerlink\" title=\"配置 MAVEN 加速镜像源\"></a>配置 MAVEN 加速镜像源</h3><p>这 ⾥ 配置的是阿 ⾥ 云的 maven 镜像源。</p>\n<p>编辑修改 <code>/usr/local/maven/apache-maven-3.6.3/conf/settings.xml</code> ⽂ 件，在 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 标签对 ⾥ 添加如下内容即可：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308154746.png\" alt=\"image-20220308154746010\"></p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>因为下载的是 ⼆ 进制版安装包，所以解压完，配置好环境变量即可使用了。</p>\n<p>编辑修改 <code>/etc/profile</code> ⽂ 件，在 ⽂ 件尾部添加如下内容，配置 <code>maven</code> 的安装路径</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">MAVEN_HOME</span>=/usr/local/maven/apache-maven-3.6.3</span><br><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">PATH</span>=<span class=\"variable\">$MAVEN_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n<p>接下来执行 <code>source /etc/profile</code> 来刷新环境变量，让 <code>maven</code> 环境的路径配置生效</p>\n<h3 id=\"检验安装结果\"><a href=\"#检验安装结果\" class=\"headerlink\" title=\"检验安装结果\"></a>检验安装结果</h3><p>执 ⾏ <code>mvn –v</code> ，能打印出 <code>maven</code> 版本信息说明安装、配置成功：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220308155428.png\" alt=\"image-20220308155428868\"></p>\n<h2 id=\"Jenkins-安装与配置\"><a href=\"#Jenkins-安装与配置\" class=\"headerlink\" title=\"Jenkins 安装与配置\"></a>Jenkins 安装与配置</h2><h3 id=\"安装-Jenkins-Master\"><a href=\"#安装-Jenkins-Master\" class=\"headerlink\" title=\"安装 Jenkins Master\"></a>安装 Jenkins Master</h3><blockquote>\n<p><a href=\"https://www.jenkins.io/zh/doc/book/installing/\">Jenkins 官方安装文档</a></p>\n</blockquote>\n<p><strong>Docker 安装 Jenkins（推荐）</strong></p>\n<ul>\n<li><p>使用 Docker 安装 Jenkins</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用命令直接安装（包含构建工具）</span></span><br><span class=\"line\">docker run -d --name jenkins --restart always \\</span><br><span class=\"line\">--user root -p <span class=\"number\">8080</span>:<span class=\"number\">8080</span> -p <span class=\"number\">50000</span>:<span class=\"number\">50000</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>jenkins_home:<span class=\"regexp\">/var/</span>jenkins_home \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/maven/</span>apache-maven-<span class=\"number\">3.6</span>.<span class=\"number\">3</span>:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/maven/</span>apache-maven-<span class=\"number\">3.6</span>.<span class=\"number\">3</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251 \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>run<span class=\"regexp\">/docker.sock:/</span>var<span class=\"regexp\">/run/</span>docker.sock \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 简易安装</span></span><br><span class=\"line\">docker run -d --name jenkins --restart always \\</span><br><span class=\"line\">--user root -p <span class=\"number\">8080</span>:<span class=\"number\">8080</span> -p <span class=\"number\">50000</span>:<span class=\"number\">50000</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/u01/</span>jenkins_home:<span class=\"regexp\">/var/</span>jenkins_home \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>run<span class=\"regexp\">/docker.sock:/</span>var<span class=\"regexp\">/run/</span>docker.sock \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>War 安装 Jenkins</strong></p>\n<ul>\n<li>获取 Jenkins 安装包</li>\n</ul>\n<p>下载页面：<a href=\"https://jenkins.io/zh/download/\">https://jenkins.io/zh/download/</a></p>\n<p>安装文件：jenkins.war</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、将最新的稳定Jenkins WAR包 下载到您计算机上的相应目录。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、在下载的目录内打开一个终端/命令提示符窗口到。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、运行命令java -jar jenkins.war</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、浏览http:<span class=\"comment\">//localhost:8080并等到*Unlock Jenkins*页面出现。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、继续使用Post-installation setup wizard后面步骤设置向导。</span><br></pre></td></tr></table></figure>\n\n<p><strong>解锁 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174609.png\" alt=\"image-20220309174609417\"></p>\n<p>获取并输入 admin 账户密码（我这里是 docker 安装的，目录是映射到指定位置的，密码实际存放路径以提示为主）</p>\n<p><code>cat /var/jenkins_home/secrets/initialAdminPassword</code></p>\n<p><strong>跳过插件安装</strong></p>\n<p>因为 Jenkins 插件需要连接默认官网下载，速度非常慢，而且容易安装失败，所以我们暂时先跳过插件安装。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174531.png\" alt=\"image-20220309174531892\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174831.png\" alt=\"image-20220309174831016\"></p>\n<p><strong>添加一个管理员账户，并进入 Jenkins 后台</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174954.png\" alt=\"image-20220309174953956\"></p>\n<p><strong>保存并完成</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175748.png\" alt=\"image-20220309175748708\"></p>\n<p><strong>开始使用 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175816.png\" alt=\"image-20220309175816074\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175908.png\" alt=\"image-20220309175908276\"></p>\n<h3 id=\"安装-Jenkins-Slave\"><a href=\"#安装-Jenkins-Slave\" class=\"headerlink\" title=\"安装 Jenkins Slave\"></a>安装 Jenkins Slave</h3><p><code>系统设置 &gt; 节点管理 &gt; 新建节点</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112501.png\" alt=\"image-20220315112454277\"></p>\n<p><strong><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112942.png\" alt=\"image-20220315112942218\" style=\"zoom:67%;\" /></strong></p>\n<p>下载 <code>agent.jar</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220315112649.png\" alt=\"image-20220315112649284\" style=\"zoom:67%;\" />\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建agent目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /dev/jenkinsagent</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /dev/jenkinsagent</span><br><span class=\"line\">wget http://192.168.88.230:8080/jnlpJars/agent.jar</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 编写启动脚本</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 0bdf5bac23b7d4e66880934b25bda0f353509529b7f843ebb688614ba389680e &gt; secret-file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar agent.jar -jnlpUrl http://192.168.88.230:8080/computer/build/jenkins-agent.jnlp -secret @secret-file -workDir <span class=\"string\">&quot;/u01/jenkins-agent&quot;</span> 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 启动agent</span></span><br><span class=\"line\">sh -x start.sh</span><br><span class=\"line\">ps aux | grep agent</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Jenkins-插件管理\"><a href=\"#Jenkins-插件管理\" class=\"headerlink\" title=\"Jenkins 插件管理\"></a>Jenkins 插件管理</h3><p>Jenkins 本身不提供很多功能，我们可以通过使用插件来满足我们的使用。例如从 Gitlab 拉取代码，使用 Maven 构建项目等功能需要依靠插件完成。接下来演示如何下载插件。</p>\n<p><strong>修改 Jenkins 插件下载地址</strong></p>\n<p>Jenkins 国外官方插件地址下载速度非常慢，所以可以修改为国内插件地址：</p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180153.png\" alt=\"image-20220309180153473\"></p>\n<p>这样做是为了把 Jenkins 官方的插件列表下载到本地，接着修改地址文件，替换为国内插件地址：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入配置目录 （目录视情况而定，安装的jenkins_home下）</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/var/jenkins_home/updates</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">sed -i &#x27;s/http:\\/\\<span class=\"string\">/updates.jenkins</span>\u0002ci.org\\<span class=\"string\">/download/https</span>:\\/\\<span class=\"string\">/mirrors.tuna.tsinghua.edu.cn</span>\\<span class=\"string\">/jenkins/g</span>&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\\/\\<span class=\"string\">/www.google.com/https</span>:\\/\\<span class=\"string\">/www.baidu.com/g</span>&#x27; default.json</span><br></pre></td></tr></table></figure>\n\n<p>最后，Manage Plugins 点击 Advanced，把 Update Site 改为国内插件下载地址</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180807.png\" alt=\"image-20220309180807037\"></p>\n<p>Sumbit 后，在浏览器输入： <a href=\"http://120.78.204.65:8180/restart\">http://120.78.204.65:8180/restart</a> ，重启 Jenkins。</p>\n<p><strong>下载中文汉化插件</strong></p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available，搜索&quot;Chinese&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181055.png\" alt=\"image-20220309181055822\"></p>\n<p>完成后如下图所示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181122.png\" alt=\"image-20220309181122066\"></p>\n<p>重启 Jenkins 之后，就看到 Jenkins 汉化了！（PS：某些菜单可能会汉化失败）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181408.png\" alt=\"image-20220309181408200\"></p>\n<h3 id=\"Jenkins-用户权限管理\"><a href=\"#Jenkins-用户权限管理\" class=\"headerlink\" title=\"Jenkins 用户权限管理\"></a>Jenkins 用户权限管理</h3><p>我们可以利用 <code>Role-based Authorization Strategy</code> 插件来管理 Jenkins 用户权限</p>\n<p><strong>安装 Role-based Authorization Strategy 插件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181600.png\" alt=\"image-20220309181600238\"></p>\n<p><strong>开启权限全局安全配置</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181914.png\" alt=\"image-20220309181914873\"></p>\n<p>授权策略切换为 “Role-Based Strategy”，保存</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181940.png\" alt=\"image-20220309181940124\"></p>\n<p><strong>创建角色</strong></p>\n<p>在系统管理页面进入 Manage and Assign Roles</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182209.png\" alt=\"image-20220309182209559\"></p>\n<p>点击 “Manage Roles”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182301.png\" alt=\"image-20220309182301430\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182435.png\" alt=\"image-20220309182435102\"></p>\n<p><code>Global roles（全局角色）</code>：管理员等高级用户可以创建基于全局的角色</p>\n<p><code>Item roles（项目角色）</code>： 针对某个或者某些项目的角色</p>\n<p><code>Node roles（节点角色）</code>：节点相关的权限</p>\n<p>我们添加以下三个角色：</p>\n<ul>\n<li>baseRole：该角色为全局角色。这个角色需要绑定 Overall 下面的 Read 权限，是为了给所有用户绑定最基本的 Jenkins 访问权限。注意：如果不给后续用户绑定这个角色，会报错误：<code>用户名 is missing the Overall/Read permission</code></li>\n<li>role1：该角色为项目角色。使用正则表达式绑定 <code>.vx-chx.\\*</code>，意思是只能操作 vx-chx 开头的项目。</li>\n<li>role2：该角色为项目角色。使用正则表达式绑定 <code>.vx-phm.\\*</code>，意思是只能操作 vx-phm 开头的项目。</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182812.png\" alt=\"image-20220309182812353\"></p>\n<p>保存</p>\n<p><strong>创建用户</strong></p>\n<p>在系统管理页面进入 Manage Users</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182917.png\" alt=\"image-20220309182917026\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183107.png\" alt=\"image-20220309183107565\"></p>\n<p>分别创建两个用户：vxchx 和 vxphm</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183223.png\" alt=\"image-20220309183223041\"></p>\n<p><strong>给用户分配角色</strong></p>\n<p>系统管理页面进入 Manage and Assign Roles，点击 Assign Roles</p>\n<p>绑定规则如下：</p>\n<ul>\n<li><p>vxchx 用户分别绑定 baseRole 和 role1 角色</p>\n</li>\n<li><p>vxphm 用户分别绑定 baseRole 和 role2 角色</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183455.png\" alt=\"image-20220309183455591\"></p>\n</li>\n</ul>\n<p>保存</p>\n<p><strong>创建项目测试权限</strong></p>\n<p>以 admin 管理员账户创建两个项目，分别为 vx-chx-test 和 vx-phm-test</p>\n<p>结果为： vxchx 用户登录，只能看到 vx-chx-test 项目 vxphm 用户登录，只能看到 vx-phm-test 项目</p>\n<h3 id=\"Jenkins-凭证管理\"><a href=\"#Jenkins-凭证管理\" class=\"headerlink\" title=\"Jenkins 凭证管理\"></a>Jenkins 凭证管理</h3><p>凭据可以用来存储需要密文保护的数据库密码、Gitlab 密码信息、Docker 私有仓库密码等，以便 Jenkins 可以和这些第三方的应用进行交互。</p>\n<p><strong>安装 Credentials Binding 插件</strong></p>\n<p>要在 Jenkins 使用凭证管理功能，需要安装 <code>Credentials Binding</code> 插件</p>\n<blockquote>\n<p>注：新版本已经默认安装了此插件，这里无需另外再安装了</p>\n</blockquote>\n<p>系统管理中选择 <code>Manage Credentials</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184117.png\" alt=\"image-20220309184117479\"></p>\n<p>可以添加的凭证有 5 种：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184218.png\" alt=\"image-20220309184218399\"></p>\n<ul>\n<li>Username with password：用户名和密码</li>\n<li>SSH Username with private key： 使用 SSH 用户和密钥</li>\n<li>Secret file：需要保密的文本文件，使用时 Jenkins 会将文件复制到一个临时目录中，再将文件路径 设置到一个变量中，等构建结束后，所复制的 Secret file 就会被删除。</li>\n<li>GitHub App：GitHub 的 API 令牌</li>\n<li>Secret text：需要保存的一个加密的文本串，如钉钉机器人或 Github 的 api token</li>\n<li>Certificate：通过上传证书文件的方式</li>\n</ul>\n<p>常用的凭证类型有：<strong>Username with password（用户密码）</strong> 和 <strong>SSH Username with private key（SSH 密钥）</strong></p>\n<p>接下来以使用 Git 工具到 Gitlab 拉取项目源码为例，演示 Jenkins 的如何管理 Gitlab 的凭证。</p>\n<p><strong>安装 Git 插件和 Git 工具</strong></p>\n<p>为了让 Jenkins 支持从 Gitlab 拉取源码，需要安装 Git 插件以及在服务器上安装 Git 工具。</p>\n<p>Git 插件安装：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310094719.png\" alt=\"image-20220310094712046\"></p>\n<p>服务器上安装 Git 工具（以 CentOS7 为例）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install git -y</span><br><span class=\"line\"><span class=\"comment\"># 安装后查看版本</span></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>用户密码类型</strong></p>\n<p>1）创建凭据</p>\n<p><code>Jenkins -&gt; 凭证 -&gt; 系统 -&gt; 全局凭据 -&gt; 添加凭据</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310095750.png\" alt=\"image-20220310095750604\"></p>\n<p>选择 “Username with password”，输入 Gitlab 的用户名和密码，点击 “确定”。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100359.png\" alt=\"image-20220310100359012\"></p>\n<p><strong>SSH 密钥类型</strong></p>\n<p>SSH 免密登录示意图</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100539.png\" alt=\"image-20220310100539140\"></p>\n<p>1）使用 root 用户生成公钥和私钥</p>\n<p><code>ssh-keygen -t rsa</code></p>\n<p>在/root/.ssh/目录保存了公钥和使用</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101013.png\" alt=\"image-20220310101013313\" style=\"zoom:67%;\" />\n\n<p>id_rsa：私钥文件</p>\n<p>id_rsa.pub：公钥文件</p>\n<p>2）把生成的公钥放在 Gitlab 中</p>\n<p><code>登录gitlab -&gt; 点击头像 -&gt; Settings -&gt; SSH Keys</code></p>\n<p>复制刚才 id_rsa.pub 文件的内容到这里，点击 “Add Key”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101538.png\" alt=\"image-20220310101538008\"></p>\n<p>3）在 Jenkins 中添加凭证，配置私钥</p>\n<p>在 Jenkins 添加一个新的凭证，类型为 “SSH Username with private key”，把刚才生成私有文件内容复制过来</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102203.png\" alt=\"image-20220310102203814\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102427.png\" alt=\"image-20220310102427213\"></p>\n<h3 id=\"Jenkins-关联-JDK-和-Maven\"><a href=\"#Jenkins-关联-JDK-和-Maven\" class=\"headerlink\" title=\"Jenkins 关联 JDK 和 Maven\"></a>Jenkins 关联 JDK 和 Maven</h3><p><strong>关联 JDK</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; JDK -&gt; 新增JDK，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102744.png\" alt=\"image-20220310102744563\"></p>\n<p><strong>关联 Maven</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; Maven -&gt; 新增Maven，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102836.png\" alt=\"image-20220310102835922\"></p>\n<h3 id=\"Jenkins-关闭跨站请求伪造保护\"><a href=\"#Jenkins-关闭跨站请求伪造保护\" class=\"headerlink\" title=\"Jenkins 关闭跨站请求伪造保护\"></a>Jenkins 关闭跨站请求伪造保护</h3><ul>\n<li>Docker 容器运行</li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、进入运行的容器</span></span><br><span class=\"line\">docker exec -u root -<span class=\"keyword\">it</span> 你的Jenkins容器名称或者容器<span class=\"built_in\">id</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、输入命令，编辑jenkins启动配置文件</span></span><br><span class=\"line\">vi /usr/<span class=\"keyword\">local</span>/bin/jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、在图中标记处，加入以下配置</span></span><br><span class=\"line\">-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、重启容器</span></span><br><span class=\"line\">docker restart jenkins</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220312001027.png\" alt=\"image-20220312001020531\"></p>\n<h3 id=\"添加-Jenkins-全局变量\"><a href=\"#添加-Jenkins-全局变量\" class=\"headerlink\" title=\"添加 Jenkins 全局变量\"></a><strong>添加 Jenkins 全局变量</strong></h3><p><code>Jenkins -&gt; 系统管理 -&gt; 全局属性 -&gt; 添加三个环境变量，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310103242.png\" alt=\"image-20220310103241974\"></p>\n<h3 id=\"Jenkins-数据迁移和备份\"><a href=\"#Jenkins-数据迁移和备份\" class=\"headerlink\" title=\"Jenkins 数据迁移和备份\"></a>Jenkins 数据迁移和备份</h3><p>将安装 Jenkins 的机器上的 <code>jenkins_home</code> 目录下的 config.xml 文件，jobs 文件夹，users 文件夹和 plugins 文件夹打包</p>\n<ul>\n<li>config.xml 是存放配置信息的</li>\n<li>jobs 是存放创建的工程项目的</li>\n<li>users 是存放用户账信息的</li>\n<li>plugins 是存放插件的</li>\n</ul>\n<h3 id=\"Jenkins-删除构建历史\"><a href=\"#Jenkins-删除构建历史\" class=\"headerlink\" title=\"Jenkins 删除构建历史\"></a>Jenkins 删除构建历史</h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//项目名称</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> jobName = <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//删除小于等于maxNumber的构建历史</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> maxNumber = xxx</span><br><span class=\"line\"></span><br><span class=\"line\">Jenkins.instance.getItemByFullName(jobName).builds.findAll &#123;</span><br><span class=\"line\">  it.number &lt;= maxNumber</span><br><span class=\"line\">&#125;.each &#123;</span><br><span class=\"line\">  it.delete()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins-构建-Maven-项目\"><a href=\"#Jenkins-构建-Maven-项目\" class=\"headerlink\" title=\"Jenkins 构建 Maven 项目\"></a>Jenkins 构建 Maven 项目</h2><blockquote>\n<p>构建方式均采用 Jar 包方式，War 方式参考 <a href=\"http://doc.jeecg.com/2043887\">WAR 部署方案 · JeecgBoot 开发文档</a></p>\n</blockquote>\n<h3 id=\"Jenkins-项目构建类型\"><a href=\"#Jenkins-项目构建类型\" class=\"headerlink\" title=\"Jenkins 项目构建类型\"></a>Jenkins 项目构建类型</h3><p>Jenkins 中自动构建项目的类型有很多，常用的有以下三种：</p>\n<ul>\n<li>自由风格软件项目（FreeStyle Project）</li>\n<li>Maven 项目（Maven Project）</li>\n<li>流水线项目（Pipeline Project）</li>\n</ul>\n<p>每种类型的构建其实都可以完成一样的构建过程与结果，只是在操作方式、灵活度等方面有所区别，在实际开发中可以根据自己的需求和习惯来选择。（PS：个人推荐使用流水线类型，因为灵活度非常高）</p>\n<h3 id=\"自由风格项目构建\"><a href=\"#自由风格项目构建\" class=\"headerlink\" title=\"自由风格项目构建\"></a>自由风格项目构建</h3><p>下面演示创建一个自由风格项目来完成项目的集成过程：</p>\n<p><code>拉取代码 -&gt; 编译 -&gt; 打包 -&gt; 部署</code></p>\n<p><strong>拉取代码</strong></p>\n<p>1）创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112707.png\" alt=\"image-20220310112707895\"></p>\n<p>2）源码管理，从 Gitlab 拉取代码</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112815.png\" alt=\"image-20220310112815147\"></p>\n<p><strong>编译打包</strong></p>\n<p><code>构建 -&gt; 添加构建步骤 -&gt; 执行shell</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;开始编译和打包&quot;</span></span><br><span class=\"line\">mvn clean package</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;编译和打包结束&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112952.png\" alt=\"image-20220310112952936\"></p>\n<p><strong>部署</strong></p>\n<p>把项目部署到远程的服务器上，并启动</p>\n<p>1）安装 <code>Publish Over SSH</code> 插件</p>\n<p>Jenkins 本身无法实现远程部署到服务器上的功能，需要安装 <code>Publish Over SSH</code> 插件实现</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310113332.png\" alt=\"image-20220310113332137\"></p>\n<p>2）配置 <code>Publish over SSH</code>，添加 SSH 服务器</p>\n<p><code>打开系统管理 -&gt; 系统配置 -&gt; 拉到底部，选择Publish over SSH区域选择新增</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114012.png\" alt=\"image-20220310114012322\"></p>\n<p><code>点击高级 -&gt; 填写服务器密码</code>（也可选择 ssh 验证，在 Jenkins 中配置本机私钥，将公钥发送到目标机器，即可完成无密码登录）</p>\n<p><code>发送命令：ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.xxx.xxx</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114702.png\" alt=\"image-20220310114702171\"></p>\n<ul>\n<li>Passphrase： 密码（目标机器的密码）</li>\n<li>Path to key：key 文件（私钥）的路径</li>\n<li>SSH Server Name： 标识的名字（随便你取什么）</li>\n<li>Hostname： 需要连接 ssh 的主机名或 ip 地址，此处填写应用服务器 IP（建议 ip）</li>\n<li>Username： 用户名</li>\n<li>Remote Directory： 远程目录(要发布的目录, 比如/usr/local/tomcat/webapps/)</li>\n</ul>\n<p>3）添加构建步骤</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115055.png\" alt=\"image-20220310115055853\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115245.png\" alt=\"image-20220310115245384\"></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 脚本参考</span></span><br><span class=\"line\"><span class=\"attribute\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">cd</span> /apps</span><br><span class=\"line\"><span class=\"attribute\">ps</span> -ef|grep jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar|grep -v grep|awk &#x27;&#123;print $<span class=\"number\">2</span>&#125;&#x27;|xargs kill -s <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">BUILD_ID</span>=dontKillMe</span><br><span class=\"line\"><span class=\"attribute\">nohup</span> java -jar jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar &gt; jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.log <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure>\n\n<p>4）点击 “立即构建”，开始构建过程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115628.png\" alt=\"image-20220310115628609\"></p>\n<p>5）构建成功，并自动化部署，访问测试！</p>\n<h3 id=\"Maven-项目构建\"><a href=\"#Maven-项目构建\" class=\"headerlink\" title=\"Maven 项目构建\"></a>Maven 项目构建</h3><p>1）安装 Maven Integration Plugin（高版本的 Jenkins 已预装了此插件）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135008.png\" alt=\"image-20220310135008339\"></p>\n<p>2）创建 Maven 项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135103.png\" alt=\"image-20220310135103444\"></p>\n<p>3）配置项目</p>\n<p>拉取代码和远程部署的过程和自由风格项目一样，只是 “构建” 部分不同</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135300.png\" alt=\"image-20220310135300799\"></p>\n<h3 id=\"Pipeline-流水线项目构建\"><a href=\"#Pipeline-流水线项目构建\" class=\"headerlink\" title=\"Pipeline 流水线项目构建(*)\"></a>Pipeline 流水线项目构建(*)</h3><h4 id=\"Pipeline-简介\"><a href=\"#Pipeline-简介\" class=\"headerlink\" title=\"Pipeline 简介\"></a>Pipeline 简介</h4><p><strong>1）概念</strong></p>\n<p>Pipeline，简单来说，就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p>\n<p><strong>2）使用 Pipeline 有以下好处（来自翻译自官方文档）：</strong></p>\n<p>代码：Pipeline 以代码的形式实现，通常被检入源代码控制，使团队能够编辑，审查和迭代其传送流 程。持久：无论是计划内的还是计划外的服务器重启。Pipeline 都是可恢复的。可停止：Pipeline 可接 收交互式输入，以确定是否继续执行 Pipeline。多功能：Pipeline 支持现实世界中复杂的持续交付要求。它支持 fork/join、循环执行，并行执行任务的功能。可扩展：Pipeline 插件支持其 DSL 的自定义扩展，以及与其他插件集成的多个选项。</p>\n<p><strong>3）如何创建 Jenkins Pipeline 呢？</strong></p>\n<ul>\n<li>Pipeline 脚本是由 <strong>Groovy</strong> 语言实现的，但是我们没必要单独去学习 Groovy</li>\n<li>Pipeline 支持两种语法：<strong>Declarative</strong>(声明式)和 <strong>Scripted Pipeline</strong>(脚本式)语法</li>\n<li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中（一般我们都推荐在 Jenkins 中直接从源代码控制(SCM)中直接载入 Jenkinsfile Pipeline 这种方法）。</li>\n</ul>\n<h4 id=\"Pipeline-语法快速入门\"><a href=\"#Pipeline-语法快速入门\" class=\"headerlink\" title=\"Pipeline 语法快速入门\"></a>Pipeline 语法快速入门</h4><p><strong>1）Declarative 声明式-Pipeline</strong></p>\n<p>创建一个流水线项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154144.png\" alt=\"image-20220310154144897\"></p>\n<p><code>流水线 -&gt; 选择HelloWorld模板</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154618.png\" alt=\"image-20220310154618000\"></p>\n<p>生成的内容如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Hello&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>stages：</strong> 代表整个流水线的所有执行阶段。通常 stages 只有 1 个，里面包含多个 stage</p>\n</li>\n<li><p><strong>stage：</strong> 代表流水线中的某个阶段，可能出现 n 个。一般分为拉取代码，编译构建，部署等阶段。</p>\n</li>\n<li><p><strong>steps：</strong> 代表一个阶段内需要执行的逻辑。steps 里面是 shell 脚本，git 拉取代码，ssh 远程发布等任意内容。</p>\n</li>\n</ul>\n<p>编写一个简单声明式的 Pipeline：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;编译构建&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;项目部署&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击构建，进入 <code>Blue Ocean</code> 可以看到整个构建过程</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155756.png\" alt=\"image-20220310155756052\" style=\"zoom: 150%;\" />\n\n<p><strong>2）Scripted Pipeline 脚本式-Pipeline</strong></p>\n<p>创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155938.png\" alt=\"image-20220310155938728\"></p>\n<p>选择 <code>Scripted Pipeline&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310160044.png\" alt=\"image-20220310160044398\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> mvnHome</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Preparation&#x27;</span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Results&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Node：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，后续讲到 Jenkins 的 Master-Slave 架构的时候用到。</li>\n<li>Stage：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如： Build、Test、Deploy，Stage 是一个逻辑分组的概念。</li>\n<li>Step：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像， 由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令 一样。</li>\n</ul>\n<p>编写一个简单的脚本式 Pipeline</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    def mvnHome</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;拉取代码&#x27;</span></span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;编译构建&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;项目部署&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构建结果和声明式一样！</p>\n<p><strong>Pipeline Script from SCM</strong></p>\n<p>刚才我们都是直接在 Jenkins 的 UI 界面编写 Pipeline 代码，这样不方便脚本维护，建议把 Pipeline 脚本放在项目中（一起进行版本控制）</p>\n<p><strong>1）在项目根目录建立 Jenkinsfile 文件，把内容复制到该文件中</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310163924.png\" alt=\"image-20220310163924603\" style=\"zoom:67%;\" />\n\n<p>把 Jenkinsfile 上传到 Gitlab</p>\n<p><strong>2）在项目中引用该文件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164207.png\" alt=\"image-20220310164207097\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164225.png\" alt=\"image-20220310164225747\"></p>\n<h3 id=\"Jenkinsfile\"><a href=\"#Jenkinsfile\" class=\"headerlink\" title=\"Jenkinsfile\"></a>Jenkinsfile</h3><h4 id=\"Jenkinsfile-环境变量\"><a href=\"#Jenkinsfile-环境变量\" class=\"headerlink\" title=\"Jenkinsfile 环境变量\"></a>Jenkinsfile 环境变量</h4><table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BRANCH_NAME</td>\n<td>在 multibranch 项目中，BRANCH_NAME 用于标明构建分支的名称。</td>\n</tr>\n<tr>\n<td>CHANGE_ID</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更 ID，比如 Pull Request</td>\n</tr>\n<tr>\n<td>CHANGE_URL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的 URL</td>\n</tr>\n<tr>\n<td>CHANGE_TITLE</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的标题</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_DISPLAY_NAME</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的显示名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_EMAIL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的邮件地址</td>\n</tr>\n<tr>\n<td>CHANGE_TARGET</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于合并后的分支信息等</td>\n</tr>\n<tr>\n<td>BUILD_NUMBER</td>\n<td>当前的构建编号</td>\n</tr>\n<tr>\n<td>BUILD_ID</td>\n<td>在 1.597 版本后引进，表示当前构建 ID</td>\n</tr>\n<tr>\n<td>BUILD_DISPLAY_NAME</td>\n<td>当前构建的显示信息</td>\n</tr>\n<tr>\n<td>JOB_NAME</td>\n<td>构建 Job 的全称，包含项目信息</td>\n</tr>\n<tr>\n<td>JOB_BASE_NAME</td>\n<td>除去项目信息的 Job 名称</td>\n</tr>\n<tr>\n<td>BUILD_TAG</td>\n<td>构建标签</td>\n</tr>\n<tr>\n<td>EXECUTOR_NUMBER</td>\n<td>执行器编号，用于标识构建器的不同编号</td>\n</tr>\n<tr>\n<td>NODE_NAME</td>\n<td>构建节点的名称</td>\n</tr>\n<tr>\n<td>NODE_LABELS</td>\n<td>节点标签</td>\n</tr>\n<tr>\n<td>WORKSPACE</td>\n<td>构建时使用的工作空间的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_HOME</td>\n<td>JENKINS 根目录的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_URL</td>\n<td>Jenkins 的 URL 信息</td>\n</tr>\n<tr>\n<td>BUILD_URL</td>\n<td>构建的 URL 信息</td>\n</tr>\n<tr>\n<td>JOB_URL</td>\n<td>构建 Job 的 URL 信息</td>\n</tr>\n<tr>\n<td>GIT_COMMIT</td>\n<td>git 提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_COMMIT</td>\n<td>当前分支上次提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_SUCCESSFUL_COMMIT</td>\n<td>当前分支上次成功构建时提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_BRANCH</td>\n<td>远程分支名称</td>\n</tr>\n<tr>\n<td>GIT_LOCAL_BRANCH</td>\n<td>本地分支名称</td>\n</tr>\n<tr>\n<td>GIT_URL</td>\n<td>远程 URL 地址</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_NAME</td>\n<td>Git 提交者的名称</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_NAME</td>\n<td>Git Author 的名称</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_EMAIL</td>\n<td>Git 提交者的 email 地址</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_EMAIL</td>\n<td>Git Author 的 email 地址</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION</td>\n<td>Mercurial 的版本 ID 信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_SHORT</td>\n<td>Mercurial 的版本 ID 缩写</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_NUMBER</td>\n<td>Mercurial 的版本号信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_BRANCH</td>\n<td>分支版本信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REPOSITORY_URL</td>\n<td>仓库 URL 信息</td>\n</tr>\n<tr>\n<td>SVN_REVISION</td>\n<td>Subversion 的当前版本信息</td>\n</tr>\n<tr>\n<td>SVN_URL</td>\n<td>当前工作空间中被 checkout 的 Subversion 工程的 URL 地址信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的构建触发器\"><a href=\"#常用的构建触发器\" class=\"headerlink\" title=\"常用的构建触发器\"></a>常用的构建触发器</h3><p>Jenkins 内置 4 种构建触发器：</p>\n<ul>\n<li>触发远程构建</li>\n<li>其他工程构建后触发（Build after other projects are build）</li>\n<li>定时构建（Build periodically）</li>\n<li>轮询 SCM（Poll SCM）</li>\n<li>GitHub 钩子触发的 GIT SCM 轮询（GitHub hook trigger for GITScm polling）</li>\n</ul>\n<p><strong>触发远程构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164928.png\" alt=\"image-20220310164928630\"></p>\n<p>触发构建 url：<a href=\"http://192.168.88.86:8180/job/vx-phm/build?token\">http://192.168.88.86:8180/job/vx-phm/build?token</a> = abcabc</p>\n<p><strong>其他工程构建后触发</strong></p>\n<p>1）创建 pre_job 流水线工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170455.png\" alt=\"image-20220310170454942\"></p>\n<p>2）配置需要触发的工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170935.png\" alt=\"image-20220310170935519\"></p>\n<p><strong>定时构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171234.png\" alt=\"image-20220310171234011\"></p>\n<p>定时字符串从左往右分别为： 分 时 日 月 周</p>\n<p>一些定时表达式的例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每30分钟构建一次：H代表形参 H/30 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span> 10:02 10:32</span><br><span class=\"line\"></span><br><span class=\"line\">每2个小时构建一次: H H/2 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天的8点，12点，22点，一天构建3次： (多个时间点中间用逗号隔开) 0 8,12,22 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每天中午12点定时构建一次 H 12 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天下午18点定时构建一次 H 18 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">在每个小时的前半个小时内的每10分钟 H(0-29)/10 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每两小时一次，每个工作日上午9点到下午5点(也许是上午10:38，下午12:38，下午2:38，下午</span><br><span class=\"line\">4:38) H H(9-16)/2 <span class=\"emphasis\">* *</span> 1-5</span><br></pre></td></tr></table></figure>\n\n<p><strong>轮询 SCM</strong></p>\n<p>轮询 SCM，是指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171348.png\" alt=\"image-20220310171348558\"></p>\n<p>注意：此构建触发器，Jenkins 会定时扫描本地整个项目的代码，增大系统的开销，不建议使用。</p>\n<h3 id=\"Git-Hook-自动触发构建\"><a href=\"#Git-Hook-自动触发构建\" class=\"headerlink\" title=\"Git Hook 自动触发构建(*)\"></a>Git Hook 自动触发构建(*)</h3><p>刚才我们看到在 Jenkins 的内置构建触发器中，轮询 SCM 可以实现 Gitlab 代码更新，项目自动构建，但是该方案的性能不佳。那有没有更好的方案呢？有的。就是利用 Gitlab 的 webhook 实现代码 push 到仓库，立即触发项目自动构建。</p>\n<p><strong>安装 Gitlab Hook 插件</strong></p>\n<p>需要安装两个插件：</p>\n<p>Gitlab Hook 和 Gitlab</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172047.png\" alt=\"image-20220310172047813\"></p>\n<p><strong>Jenkins 设置自动构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172445.png\" alt=\"image-20220310172445870\"></p>\n<p>等会需要把生成的 webhook URL 配置到 Gitlab 中。</p>\n<p><strong>Gitlab 配置 webhook</strong></p>\n<p>1）开启 webhook 功能</p>\n<p><code>使用root账户登录到后台，点击Admin Area -&gt; Settings -&gt; Network</code></p>\n<p><code>勾选&quot;Allow requests to the local network from web hooks and services&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172805.png\" alt=\"image-20220310172805087\"></p>\n<p>2）在项目中添加 webhook</p>\n<p><code>点击项目 -&gt; Settings -&gt; Webhooks</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173325.png\" alt=\"image-20220310173325550\"></p>\n<p>注意：以下设置必须完成，否则会报错！</p>\n<p><code>系统管理 -&gt; 系统配置</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173704.png\" alt=\"image-20220310173704682\"></p>\n<h2 id=\"SonarQube-平台安装与配置\"><a href=\"#SonarQube-平台安装与配置\" class=\"headerlink\" title=\"SonarQube 平台安装与配置\"></a>SonarQube 平台安装与配置</h2><h3 id=\"认识-SonarQube\"><a href=\"#认识-SonarQube\" class=\"headerlink\" title=\"认识 SonarQube\"></a>认识 SonarQube</h3><p>SonarQube 是一款用于代码质量管理的开源工具，是静态代码检查工具，采用 B/S 架构它主要用于管理源代码的质量，可以支持众多计算机语言，比如 php，java, C#, go，C/C++, Cobol, JavaScrip, Groovy 等。sonar 可以通过 PMD，CheckStyle，Findbugs 等等代码规则检测工具来检测你的代码，帮助你发现代码的漏洞，Bug，异味等信息。</p>\n<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><ul>\n<li>一台 SonarQube Server 启动 3 个主要过程：<ul>\n<li>Web 服务器，供开发人员，管理人员浏览高质量的快照并配置 SonarQube 实例</li>\n<li>基于 Elasticsearch 的 Search Server 从 UI 进行后退搜索</li>\n<li>Compute Engine 服务器，负责处理代码分析报告并将其保存在 SonarQube 数据库中</li>\n</ul>\n</li>\n<li>一个 SonarQube 数据库要存储：<ul>\n<li>SonarQube 实例的配置（安全性，插件设置等）</li>\n<li>项目，视图等的质量快照。</li>\n</ul>\n</li>\n<li>服务器上安装了多个 SonarQube 插件，可能包括语言，SCM，集成，身份验证和管理插件</li>\n<li>在构建/持续集成服务器上运行一个或多个 SonarScanner，以分析项目</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135315.png\" alt=\"image-20220314135314928\"></p>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><p>开发人员在 IDE 开发代码，可以安装 SonarLint 插件进行提交前代码扫描 当开发人员提交代码到版本控制系统中，自动触发 jenkins 进行代码扫描</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135418.png\" alt=\"image-20220314135418834\"></p>\n<h4 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h4><p>开源社区版、开发版、企业版、数据中心版</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314135630.png\" alt=\"image-20220314135630641\"></p>\n<h3 id=\"Docker-安装-SonarQube\"><a href=\"#Docker-安装-SonarQube\" class=\"headerlink\" title=\"Docker 安装 SonarQube\"></a>Docker 安装 SonarQube</h3><p>这里采用 docker 容器进行安装，简单快捷</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/sonarqube/&#123;data,extensions,logs&#125;</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 -R /u01/cicd/sonarqube/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 调整</span></span><br><span class=\"line\">sysctl -w vm.max_map_count=262144</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 运行</span></span><br><span class=\"line\">docker run -d -p 9000:9000 -p 9092:9092 --name sonarqube \\</span><br><span class=\"line\">\t-v /u01/sonarqube/data:/opt/sonarqube/data \\</span><br><span class=\"line\">\t-v /u01/sonarqube/extensions:/opt/sonarqube/extensions \\</span><br><span class=\"line\">\t-v /u01/sonarqube/logs:/opt/sonarqube/logs \\</span><br><span class=\"line\">\t-e SONAR_JDBC_USERNAME=sonar \\</span><br><span class=\"line\">\t-e SONAR_JDBC_PASSWORD=sonar \\</span><br><span class=\"line\">\t-e SONAR_JDBC_URL=<span class=\"string\">&quot;jdbc:postgresql://192.168.88.236:5432/sonar &quot;</span> \\</span><br><span class=\"line\">\t--restart = always \\</span><br><span class=\"line\">\t--privileged = <span class=\"literal\">true</span> \\</span><br><span class=\"line\">    sonarqube: 8.9.9-community</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 验证</span></span><br><span class=\"line\">docker logs -f sonarqube</span><br></pre></td></tr></table></figure>\n\n<p>访问：<a href=\"http://192.168.88.235:9000/\">http://192.168.88.235:9000/</a></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314134759.png\" alt=\"image-20220314134752470\" style=\"zoom:67%;\" />\n\n<p>默认账号：admin/admin</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314134841.png\" alt=\"image-20220314134841587\" style=\"zoom:67%;\" />\n\n<h3 id=\"配置-Scanner\"><a href=\"#配置-Scanner\" class=\"headerlink\" title=\"配置 Scanner\"></a>配置 Scanner</h3><p><strong>安装</strong></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取安装包</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>binaries.sonarsource.com<span class=\"regexp\">/Distribution/</span>sonar-scanner-cli/sonar-scanner-cli-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压到指定目录</span></span><br><span class=\"line\">unzip -o -d  <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner /</span>opt/sonar-scanner-cli-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑环境变量</span></span><br><span class=\"line\">vim <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\">export SCANNER_HOME =<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux</span><br><span class=\"line\">export PATH = <span class=\"variable\">$PATH</span>:$ SCANNER_HOME/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使环境变量生效</span></span><br><span class=\"line\">source <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">sonar-scanner -v</span><br><span class=\"line\">INFO: Scanner configuration file: <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner-4.6.0.2311-linux/</span>conf/sonar-scanner.properties</span><br><span class=\"line\">INFO: Project root configuration file: NONE</span><br><span class=\"line\">INFO: SonarScanner <span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span></span><br><span class=\"line\">INFO: Java <span class=\"number\">11.0</span>.<span class=\"number\">3</span> AdoptOpenJDK (<span class=\"number\">64</span>-bit)</span><br><span class=\"line\">INFO: Linux <span class=\"number\">4.18</span>.<span class=\"number\">0</span>-<span class=\"number\">80</span>.el8.x86_64 amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改使用的 jdk</span></span><br><span class=\"line\">vim <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/sonar-scanner/</span>sonar-scanner-<span class=\"number\">4.6</span>.<span class=\"number\">0.2311</span>-linux<span class=\"regexp\">/bin/</span>sonar-scanner</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SonarQube-平台配置管理\"><a href=\"#SonarQube-平台配置管理\" class=\"headerlink\" title=\"SonarQube 平台配置管理\"></a>SonarQube 平台配置管理</h3><h4 id=\"安装中文插件\"><a href=\"#安装中文插件\" class=\"headerlink\" title=\"安装中文插件\"></a>安装中文插件</h4><p><strong>在线安装：操作如下图</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314140021.png\" alt=\"image-20220314140021697\"></p>\n<h4 id=\"配置强制登录\"><a href=\"#配置强制登录\" class=\"headerlink\" title=\"配置强制登录\"></a>配置强制登录</h4><p>默认所有的项目都可以公开的查看，在企业内肯定要配置成私有的。只有登录后才能查看</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314140634.png\" alt=\"image-20220314140634628\" style=\"zoom:67%;\" />\n\n<h3 id=\"Jenkins-配置-SonarScanner\"><a href=\"#Jenkins-配置-SonarScanner\" class=\"headerlink\" title=\"Jenkins 配置 SonarScanner\"></a>Jenkins 配置 SonarScanner</h3><p>创建 SonarQube 账户 token</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143339.png\" alt=\"image-20220314143339207\" style=\"zoom:67%;\" />\n\n<p>将 token 保存到 Jenkins 凭据中</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143433.png\" alt=\"image-20220314143433728\" style=\"zoom:67%;\" />\n\n<p>在 Jenkins 中安装<code>SonarQube Scanner</code>插件</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143552.png\" alt=\"image-20220314143552551\" style=\"zoom:67%;\" />\n\n<p><code>系统管理 -&gt; 系统配置 -&gt; 往下翻找到SonarQube servers -&gt; Add SonarQube -&gt; 添加服务器，选择凭据</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314143936.png\" alt=\"image-20220314143936259\" style=\"zoom:67%;\" />\n\n<h3 id=\"IDEA-配置-SonarLint-插件\"><a href=\"#IDEA-配置-SonarLint-插件\" class=\"headerlink\" title=\"IDEA 配置 SonarLint 插件\"></a>IDEA 配置 SonarLint 插件</h3><p>Token：a3268ff16b2d08b4582ff6a97342cc9d11b4e456</p>\n<h2 id=\"Nexus-制品库安装与配置\"><a href=\"#Nexus-制品库安装与配置\" class=\"headerlink\" title=\"Nexus 制品库安装与配置\"></a>Nexus 制品库安装与配置</h2><h3 id=\"Docker-安装部署-Nexus-制品库\"><a href=\"#Docker-安装部署-Nexus-制品库\" class=\"headerlink\" title=\"Docker 安装部署 Nexus 制品库\"></a>Docker 安装部署 Nexus 制品库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 拉取镜像</span></span><br><span class=\"line\">docker pull sonatype/nexus3:3.30.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建数据目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/cicd/nexus3/data</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 -R /u01/cicd/nexus3/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 启动容器</span></span><br><span class=\"line\">docker run -itd \\</span><br><span class=\"line\">--privileged = <span class=\"literal\">true</span> --name = nexus3 \\</span><br><span class=\"line\">-p 8081:8081 \\</span><br><span class=\"line\">-v /u01/cicd/nexus3/data:/nexus-data \\</span><br><span class=\"line\">sonatype/nexus3:3.30.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 验证</span></span><br><span class=\"line\">docker logs nexus3 -f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 日志中出现 “Started Sonatype Nexus OSS 3.30.0-01” 为启动成功</span></span><br><span class=\"line\"><span class=\"comment\">## http://your-ip-addr: 8081 访问测试</span></span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，默认的 admin 密码存储在了数据目录，获取初始化密码</p>\n<p><code>docker exec -i nexus3 cat /nexus-data/admin.password</code></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314144935.png\" alt=\"image-20220314144935748\" style=\"zoom:67%;\" />\n\n<p>登录后更新密码</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145010.png\" alt=\"image-20220314145010632\" style=\"zoom:67%;\" />\n\n<h3 id=\"Nexus-制品库搭建\"><a href=\"#Nexus-制品库搭建\" class=\"headerlink\" title=\"Nexus 制品库搭建\"></a>Nexus 制品库搭建</h3><h4 id=\"搭建-Maven-私服（代理仓库）\"><a href=\"#搭建-Maven-私服（代理仓库）\" class=\"headerlink\" title=\"搭建 Maven 私服（代理仓库）\"></a>搭建 Maven 私服（代理仓库）</h4><p>默认安装 nexus 后会自动创建的</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145707.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<p>私服：将外网仓库代理到企业内部本地仓库中。图中的地址可以自定义修改</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145907.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<h4 id=\"搭建制品库（本地仓库）\"><a href=\"#搭建制品库（本地仓库）\" class=\"headerlink\" title=\"搭建制品库（本地仓库）\"></a>搭建制品库（本地仓库）</h4><p>新建 raw 类型的仓库</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314145956.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<p>设置仓库的信息</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314150017.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<h3 id=\"上传制品\"><a href=\"#上传制品\" class=\"headerlink\" title=\"上传制品\"></a>上传制品</h3><p>在 nexus 中新建一个<code>maven-hostd</code>仓库，同时在 maven 的配置文件<code>settings.xml</code>中配置 maven-hostd 认证。具体配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span> maven-hosted <span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span> admin <span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span> wx123!@#<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意使用<code>mvn deploy</code>发布时，server.id=repository.id</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy: deploy-file</span><br><span class=\"line\">-DgroupId = xxxxxx pom 中的 groupId</span><br><span class=\"line\">-DartifactId = xxxxxx pom 中的 artifactId</span><br><span class=\"line\">-Dversion = xxxxxx pom 中的版本号 version</span><br><span class=\"line\">-Dpackaging = xxxxxx pom 中打包方式</span><br><span class=\"line\">-Dfile = xxxxxx 本地文件</span><br><span class=\"line\">-Durl = xxxxxx 仓库 url</span><br><span class=\"line\">-DrepositoryId = xxxxxx 对应的是 setting.xml（认证）</span><br></pre></td></tr></table></figure>\n\n<p>直接读取 pom 文件（方便）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy: deploy-file \\</span><br><span class=\"line\">-DgeneratePom = <span class=\"literal\">false</span> \\</span><br><span class=\"line\">-DrepositoryId = maven-hosted \\</span><br><span class=\"line\">-Durl = http://192.168.1.200:8081/repository/maven-hosted/ \\</span><br><span class=\"line\">-DpomFile = pom.xml \\</span><br><span class=\"line\">-Dfile = target/demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<p>自定义 pom 信息（灵活）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn deploy: deploy-file -Dmaven.test.skip = <span class=\"literal\">true</span>  \\</span><br><span class=\"line\">-Dfile = target/demo-0.0.1-SNAPSHOT.jar \\</span><br><span class=\"line\">-DgroupId = com.example \\</span><br><span class=\"line\">-DartifactId = demo \\</span><br><span class=\"line\">-Dversion = 1.1.1  \\</span><br><span class=\"line\">-Dpackaging = jar \\</span><br><span class=\"line\">-DrepositoryId = maven-hosted \\</span><br><span class=\"line\">-Durl = http://192.168.1.200:8081/repository/maven-hosted/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314152655.png\" alt=\"img\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314152725.png\" alt=\"img\"></p>\n<h3 id=\"Jenkins-安装-Nexus-插件\"><a href=\"#Jenkins-安装-Nexus-插件\" class=\"headerlink\" title=\"Jenkins 安装 Nexus 插件\"></a>Jenkins 安装 Nexus 插件</h3><p>安装<code>Nexus Artifact Upload</code>插件，使用片段生成器生成 DSL</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155314.png\" alt=\"img\"></p>\n<p><strong>发布制品</strong></p>\n<p>安装<code>Maven Artifact ChoiceListProvider (Nexus)</code>插件</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155850.png\" alt=\"images\"></p>\n<p>用户选择制品，在应用服务器通过 salt、ansible 下载制品并部署</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220314155911.png\" alt=\"img\"></p>\n<h2 id=\"Ansible-安装与配置\"><a href=\"#Ansible-安装与配置\" class=\"headerlink\" title=\"Ansible 安装与配置\"></a>Ansible 安装与配置</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS7.6 使用 YUM 安装</span></span><br><span class=\"line\">yum install ansible -y</span><br><span class=\"line\">ansible --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Anolis OS 8.9 使用 PIP3 安装</span></span><br><span class=\"line\"><span class=\"comment\"># 升级 Python 到 3.9.x</span></span><br><span class=\"line\"><span class=\"comment\"># 下载安装包并解压</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>www.python.org<span class=\"regexp\">/ftp/</span>python<span class=\"regexp\">/3.9.5/</span>Python-<span class=\"number\">3.9</span>.<span class=\"number\">5</span>.tgz</span><br><span class=\"line\">tar zxvf Python-<span class=\"number\">3.9</span>.<span class=\"number\">5</span>.tgz</span><br><span class=\"line\">cd Python-<span class=\"number\">3.9</span>.<span class=\"number\">5</span>/</span><br><span class=\"line\"><span class=\"comment\"># 安装所需的依赖</span></span><br><span class=\"line\">dnf -y install gcc zlib* libffi-devel</span><br><span class=\"line\"><span class=\"comment\"># 编译并安装</span></span><br><span class=\"line\">.<span class=\"regexp\">/configure --prefix=/u</span>sr<span class=\"regexp\">/local/</span>python3 --enable-optimizations</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"><span class=\"comment\"># 删除老的 python3 ，并链接新版本</span></span><br><span class=\"line\">rm -rf <span class=\"regexp\">/usr/</span>bin/python3</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/python3/</span>bin<span class=\"regexp\">/python3 /u</span>sr<span class=\"regexp\">/bin/</span>python3</span><br><span class=\"line\">rm -rf <span class=\"regexp\">/usr/</span>bin/pip3</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/python3/</span>bin<span class=\"regexp\">/pip3 /u</span>sr<span class=\"regexp\">/bin/</span>pip3</span><br><span class=\"line\"><span class=\"comment\"># 查看是否正确安装 python3</span></span><br><span class=\"line\">python3 --version</span><br><span class=\"line\">pip3 --version</span><br><span class=\"line\"><span class=\"comment\"># pip3 安装 ansible</span></span><br><span class=\"line\">python3 -m pip install --user ansible</span><br><span class=\"line\"><span class=\"comment\"># 同样进行链接</span></span><br><span class=\"line\">ln -sf <span class=\"regexp\">/root/</span>.local<span class=\"regexp\">/bin/</span>ansible  <span class=\"regexp\">/usr/</span>bin/ansible</span><br><span class=\"line\">ln -sf <span class=\"regexp\">/root/</span>.local<span class=\"regexp\">/bin/</span>ansible-config <span class=\"regexp\">/usr/</span>bin/ansible-config</span><br><span class=\"line\"><span class=\"comment\"># 查看已安装的软件包</span></span><br><span class=\"line\">python3 -m pip show ansible</span><br><span class=\"line\"><span class=\"comment\"># 检查 ansible 是否被正确安装</span></span><br><span class=\"line\">ansible --version </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-Ansible-主机列表\"><a href=\"#添加-Ansible-主机列表\" class=\"headerlink\" title=\"添加 Ansible 主机列表\"></a>添加 Ansible 主机列表</h3><h4 id=\"基于密钥连接\"><a href=\"#基于密钥连接\" class=\"headerlink\" title=\"基于密钥连接\"></a>基于密钥连接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成私钥和公钥（已有则忽略）</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh &amp;&amp; ssh-keygen -t rsa</span><br><span class=\"line\"><span class=\"comment\"># 批量发送到管理机器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1,2,3,6&#125;; <span class=\"keyword\">do</span> ssh-copy-id -i 192.168.1.3<span class=\"variable\">$i</span> ; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-etc-ansible-hosts-文件\"><a href=\"#配置-etc-ansible-hosts-文件\" class=\"headerlink\" title=\"配置 /etc/ansible/hosts 文件\"></a>配置 /etc/ansible/hosts 文件</h4><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[root@ansible ~]</span># vim /etc/ansible/hosts</span><br><span class=\"line\"># 方法一 主机+端口+密钥</span><br><span class=\"line\"><span class=\"string\">[webserver]</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.31:22</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.32</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.33</span></span><br><span class=\"line\"><span class=\"number\">192.168.1.36</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 方法二 别名主机+端口+密钥</span><br><span class=\"line\"><span class=\"string\">[webserver]</span></span><br><span class=\"line\">node1 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">31</span> ansible_ssh_port=<span class=\"number\">22</span></span><br><span class=\"line\">node2 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">32</span> ansible_ssh_port=<span class=\"number\">22</span></span><br><span class=\"line\">node3 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">33</span> ansible_ssh_port=<span class=\"number\">22</span></span><br><span class=\"line\">node6 ansible_ssh_host=<span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">1</span>.<span class=\"number\">36</span> ansible_ssh_port=<span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试连通性\"><a href=\"#测试连通性\" class=\"headerlink\" title=\"测试连通性\"></a>测试连通性</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible webserver -m ping -o</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-NPM-包管理器\"><a href=\"#安装-NPM-包管理器\" class=\"headerlink\" title=\"安装 NPM 包管理器\"></a>安装 NPM 包管理器</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载 node 安装包</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>nodejs.org<span class=\"regexp\">/dist/</span>v14.<span class=\"number\">16.1</span>/node-v14.<span class=\"number\">16.1</span>-linux-x64.tar.xz</span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/usr/</span>local/node</span><br><span class=\"line\">tar xf node-v14.<span class=\"number\">16.1</span>-linux-x64.tar.xz -C <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/node/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑环境变量</span></span><br><span class=\"line\">vim <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\">export NODE_HOME =<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/node/</span>node-v14.<span class=\"number\">16.1</span>-linux-x64</span><br><span class=\"line\">export PATH = <span class=\"variable\">$NODE_HOME</span>/bin:$ PATH</span><br><span class=\"line\"><span class=\"comment\"># 生效</span></span><br><span class=\"line\">source <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\"><span class=\"comment\"># 查看是否安装成功</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置镜像</span></span><br><span class=\"line\">npm config set registry https:<span class=\"regexp\">//</span>registry.npm.taobao.org --global</span><br><span class=\"line\">npm config set disturl https:<span class=\"regexp\">//</span>npm.taobao.org/dist --global</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置软链接</span></span><br><span class=\"line\">unlink <span class=\"regexp\">/usr/</span>bin/node</span><br><span class=\"line\">whereis node</span><br><span class=\"line\">ln -s <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/node/</span>node-v14.<span class=\"number\">16.1</span>-linux-x64<span class=\"regexp\">/bin/</span>node <span class=\"regexp\">/usr/</span>bin/node</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Centos6-配置-YUM\"><a href=\"#Centos6-配置-YUM\" class=\"headerlink\" title=\"Centos6 配置 YUM\"></a>Centos6 配置 YUM</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># centos6 配置 yum</span></span><br><span class=\"line\">sed -i “s|enabled = <span class=\"number\">1</span>|enabled = <span class=\"number\">0</span>|g” <span class=\"regexp\">/etc/yum</span><span class=\"regexp\">/pluginconf.d/</span>fastestmirror.conf</span><br><span class=\"line\">mv <span class=\"regexp\">/etc/yum</span>.repos.d<span class=\"regexp\">/CentOS-Base.repo /</span>etc<span class=\"regexp\">/yum.repos.d/</span>CentOS-Base.repo.backup</span><br><span class=\"line\">curl -o <span class=\"regexp\">/etc/yum</span>.repos.d<span class=\"regexp\">/CentOS-Base.repo https:/</span><span class=\"regexp\">/www.xmpan.com/</span>Centos-<span class=\"number\">6</span>-Vault-Aliyun.repo</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Minio-文件服务安装与配置\"><a href=\"#Minio-文件服务安装与配置\" class=\"headerlink\" title=\"Minio 文件服务安装与配置\"></a>Minio 文件服务安装与配置</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二进制安装</span></span><br><span class=\"line\">wget https:<span class=\"regexp\">//</span>dl.min.io<span class=\"regexp\">/server/mi</span>nio<span class=\"regexp\">/release/</span>linux-amd64/minio</span><br><span class=\"line\">chmod +x minio</span><br><span class=\"line\">MINIO_ROOT_USER = admin MINIO_ROOT_PASSWORD = password .<span class=\"regexp\">/minio server /m</span>nt/data --console-address <span class=\"string\">&quot;: 9001&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动</span></span><br><span class=\"line\">MINIO_ROOT_USER = admin MINIO_ROOT_PASSWORD =<span class=\"string\">&#x27;wx123!@#&#x27;</span> nohup <span class=\"regexp\">/u01/mi</span>nio-server<span class=\"regexp\">/minio server /u</span>01<span class=\"regexp\">/minio-server/</span>data --console-address <span class=\"string\">&quot;: 9001&quot;</span> &gt; <span class=\"regexp\">/u01/mi</span>nio-server/minio.log <span class=\"number\">2</span> &gt;&amp;<span class=\"number\">1</span> &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker 安装</span></span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/u01/mi</span>nio/data</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p <span class=\"number\">9000</span>:<span class=\"number\">9000</span> \\</span><br><span class=\"line\">  -p <span class=\"number\">9001</span>:<span class=\"number\">9001</span> \\</span><br><span class=\"line\">  --name minio \\</span><br><span class=\"line\">  -v <span class=\"regexp\">/u01/mi</span>nio<span class=\"regexp\">/data:/</span>data \\</span><br><span class=\"line\">  -v <span class=\"regexp\">/u01/mi</span>nio<span class=\"regexp\">/config:/</span>root/.minio \\</span><br><span class=\"line\">  -e <span class=\"string\">&quot;MINIO_ROOT_USER = q5H0EO1pbv&quot;</span> \\</span><br><span class=\"line\">  -e <span class=\"string\">&quot;MINIO_ROOT_PASSWORD = Wyk1dkn4Xp&quot;</span> \\</span><br><span class=\"line\">  -e MINIO_SERVER_URL = http:<span class=\"regexp\">//</span><span class=\"number\">192.168</span>.<span class=\"number\">88.200</span>:<span class=\"number\">9000</span> \\</span><br><span class=\"line\">  -e MINIO_BROWSER_REDIRECT_URL = http:<span class=\"regexp\">//</span><span class=\"number\">192.168</span>.<span class=\"number\">88.200</span>:<span class=\"number\">9001</span> \\</span><br><span class=\"line\">  quay.io<span class=\"regexp\">/minio/mi</span>nio server /data \\</span><br><span class=\"line\">  --address <span class=\"string\">&quot;: 9000&quot;</span> --console-address <span class=\"string\">&quot;: 9001&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GitStats-代码统计工具安装与配置\"><a href=\"#GitStats-代码统计工具安装与配置\" class=\"headerlink\" title=\"GitStats 代码统计工具安装与配置\"></a>GitStats 代码统计工具安装与配置</h2><h3 id=\"安装-Ruby-环境\"><a href=\"#安装-Ruby-环境\" class=\"headerlink\" title=\"安装 Ruby 环境\"></a>安装 Ruby 环境</h3><p>GitStats 需要 ruby-2.5 以上环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载：</span></span><br><span class=\"line\">wget https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压：</span></span><br><span class=\"line\">tar -zxvf ruby-2.5.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入目录：</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ruby-2.5.0</span><br><span class=\"line\"><span class=\"comment\"># 创建安装目录：</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /usr/local/ruby</span><br><span class=\"line\"><span class=\"comment\"># 安装必备依赖</span></span><br><span class=\"line\">yum -y install gcc openssl-devel make</span><br><span class=\"line\"><span class=\"comment\"># 配置并制定安装位置：</span></span><br><span class=\"line\">./configure --prefix =/usr/local/ruby</span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">make  &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">安装完成输入  ruby -v 提示/usr/bin/ruby: No such file or directory</span><br><span class=\"line\"></span><br><span class=\"line\">解决问题之前，先确认一个情况，输入命令 /usr/local/ruby/bin/ruby --version</span><br><span class=\"line\"></span><br><span class=\"line\">如果有版本信息，那说明 ruby 被装到了该目录下，而非系统认为的 /usr/bin/ruby</span><br><span class=\"line\"></span><br><span class=\"line\">解决方法是在系统默认运行 ruby 的位置 [/usr/bin/ruby] 创建一个 symlink（相当于 win 下的快捷方式），指向 ruby 的实际位置 [/usr/local/ruby/bin/ruby]</span><br><span class=\"line\"></span><br><span class=\"line\">建立软链接</span><br><span class=\"line\">命令是  <span class=\"built_in\">ln</span> -s /usr/local/ruby/bin/ruby /usr/bin/ruby</span><br><span class=\"line\">再输入   ruby -v           OK 完成</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">附赠：要是安装 gem 也出现这种情况 [-bash: /usr/bin/gem: No such file or directory] 也是同理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/ruby/bin/gem /usr/bin/gem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前仓库地址</span></span><br><span class=\"line\">gem sources -l</span><br><span class=\"line\"><span class=\"comment\">#配置阿里云仓库源</span></span><br><span class=\"line\">gem sources -a http://mirrors.aliyun.com/rubygems/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-GitStats\"><a href=\"#安装-GitStats\" class=\"headerlink\" title=\"安装 GitStats\"></a>安装 GitStats</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 git_stats</span></span><br><span class=\"line\">gem install git_stats</span><br><span class=\"line\"><span class=\"comment\"># 安装 locate</span></span><br><span class=\"line\">yum install mlocate -y</span><br><span class=\"line\">updatedb</span><br><span class=\"line\"><span class=\"comment\"># find 命令查找 git_stats 目录</span></span><br><span class=\"line\">find / -name <span class=\"string\">&#x27;git_stats&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 进入到配置目录</span></span><br><span class=\"line\">cd <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/ruby/</span>lib<span class=\"regexp\">/ruby/g</span>ems<span class=\"regexp\">/2.5.0/g</span>ems<span class=\"regexp\">/git_stats-1.0.17/</span>config<span class=\"regexp\">/locales/</span></span><br><span class=\"line\">cp zh_tw_default.yml zh_default.yml</span><br><span class=\"line\"><span class=\"comment\">#修改以下 2 个 yml, 将最上边的 zh_tw 调整为 zh_cn，其余不变</span></span><br><span class=\"line\">vim zh_default.yml</span><br><span class=\"line\">vim zh.yml</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若报以下错误</span></span><br><span class=\"line\">ERROR:  Error installing git_stats:</span><br><span class=\"line\">\tThe last version of nokogiri (~&gt; <span class=\"number\">1.6</span>) to support your Ruby &amp; RubyGems was <span class=\"number\">1.12</span>.<span class=\"number\">5</span>. Try installing it with `gem install nokogiri -v <span class=\"number\">1.12</span>.<span class=\"number\">5</span>` and then running the current command again</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">gem install nokogiri -v <span class=\"number\">1.12</span>.<span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量，放到末尾</span></span><br><span class=\"line\">vim <span class=\"regexp\">/etc/</span>profile</span><br><span class=\"line\">PATH =<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/ruby/</span>bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">export PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使之生效</span></span><br><span class=\"line\">source <span class=\"regexp\">/etc/</span>profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-GitStats-生成报告\"><a href=\"#使用-GitStats-生成报告\" class=\"headerlink\" title=\"使用 GitStats 生成报告\"></a>使用 GitStats 生成报告</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个项目文件夹</span></span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/u01/gi</span>t-project</span><br><span class=\"line\"><span class=\"comment\"># 创建一个报告生成文件夹</span></span><br><span class=\"line\">mkdir -p <span class=\"regexp\">/var/</span>www/git-report</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 git 将项目 clone 到项目文件夹中</span></span><br><span class=\"line\">git clone xxx.git</span><br><span class=\"line\"><span class=\"comment\"># 切换到项目根目录，使用 git_stats 生成报告</span></span><br><span class=\"line\">git_stats generate -o <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/git-report/</span>xxx --language zh_cn</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-nginx-访问\"><a href=\"#配置-nginx-访问\" class=\"headerlink\" title=\"配置 nginx 访问\"></a>配置 nginx 访问</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">8098</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  <span class=\"number\">192.168.88.235</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"section\">location</span> /vansysboot &#123;</span><br><span class=\"line\">            <span class=\"attribute\">alias</span>   /var/www/git-report/vansysboot;</span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Prometheus-Grafana-监控平台\"><a href=\"#安装-Prometheus-Grafana-监控平台\" class=\"headerlink\" title=\"安装 Prometheus + Grafana 监控平台\"></a>安装 Prometheus + Grafana 监控平台</h2><blockquote>\n<p>官网：<a href=\"https://prometheus.io/\">https://prometheus.io/</a></p>\n<p>下载地址：<a href=\"https://prometheus.io/download/\">https://prometheus.io/download/</a></p>\n</blockquote>\n<h3 id=\"安装-Prometheus-Server\"><a href=\"#安装-Prometheus-Server\" class=\"headerlink\" title=\"安装 Prometheus Server\"></a>安装 Prometheus Server</h3><p><code>Prometheus</code> 基于 <code>Golang</code> 编写，编译后的软件包，不依赖于任何的第三方依赖。只需要下载对应平台的二进制包，解压并且添加基本的配置即可正常启动 <code>Prometheus Server</code>。</p>\n<h4 id=\"上传安装包\"><a href=\"#上传安装包\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>上传 <code>prometheus-2.29.1.linux-amd64.tar.gz</code> 到虚拟机的 <code>/opt</code> 目录</p>\n<h4 id=\"解压安装包-2\"><a href=\"#解压安装包-2\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf prometheus-2.37.0.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> prometheus-2.37.0.linux-amd64.tar.gz prometheus-2.37.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改配置文件-prometheus-yml\"><a href=\"#修改配置文件-prometheus-yml\" class=\"headerlink\" title=\"修改配置文件 prometheus.yml\"></a>修改配置文件 prometheus.yml</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> prometheus-2.37.0</span><br><span class=\"line\">vim prometheus.yml</span><br></pre></td></tr></table></figure>\n\n<p>在 scrape_configs 配置项下添加配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加 PushGateway 监控配置</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;pushgateway&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;192.168.88.231:9091&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">instance:</span> <span class=\"string\">pushgateway</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 Node Exporter 监控配置</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;node exporter&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;192.168.88.230:9100&#x27;</span>, <span class=\"string\">&#x27;192.168.88.231:9100&#x27;</span>, <span class=\"string\">&#x27;192.168.88.232:9100&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置说明：</strong></p>\n<ol>\n<li><p><strong>global 配置块</strong>：控制 Prometheus 服务器的全局配置</p>\n<ul>\n<li>scrape_interval：配置拉取数据的时间间隔，默认为 1 分钟。</li>\n<li>evaluation_interval：规则验证（生成 alert）的时间间隔，默认为 1 分钟。</li>\n</ul>\n</li>\n<li><p><strong>rule_files 配置块</strong>：规则配置文件</p>\n</li>\n<li><p><strong>scrape_configs 配置块</strong>：配置采集目标相关， prometheus 监视的目标。Prometheus自身的运行信息可以通过  HTTP 访问，所以 Prometheus 可以监控自己的运行数据。</p>\n<ul>\n<li><p>job_name：监控作业的名称</p>\n</li>\n<li><p>static_configs：表示静态目标配置，就是固定从某个 target 拉取数据</p>\n</li>\n<li><p>targets ： 指 定 监 控 的 目 标 ， 其 实 就 是 从 哪 儿 拉 取 数 据 。 Prometheus 会从 <a href=\"http://ip:9090/metrics\">http://ip:9090/metrics</a> 上拉取数据。</p>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p><em>Prometheus 是可以在运行时自动加载配置的。启动时需要添加：–web.enable-lifecycle</em></p>\n<p><em>重载配置命令：<code>curl -X POST http://127.0.0.1:9090/-/reload</code></em></p>\n</blockquote>\n<h3 id=\"安装-Node-Exporter\"><a href=\"#安装-Node-Exporter\" class=\"headerlink\" title=\"安装 Node Exporter\"></a>安装 Node Exporter</h3><p>在 <code>Prometheus</code> 的架构设计中，<code>Prometheus Server</code> 主要负责数据的收集，存储并且对外提供数据查询支持，而实际的监控样本数据的收集则是由 <code>Exporter</code> 完成。因此为了能够监控到某些东西，如主机的 <code>CPU</code> 使用率，我们需要使用到 <code>Exporter</code>。<code>Prometheus</code> 周期性的从 <code>Exporter</code> 暴露的 HTTP 服务地址（通常是 <code>/metrics</code> ）拉取监控样本数据。</p>\n<p><code>Exporter</code> 可以是一个相对开放的概念，其可以是一个独立运行的程序独立于监控目标以外，也可以是直接内置在监控目标中。只要能够向 <code>Prometheus</code> 提供标准格式的监控样本数据即可。</p>\n<p>为了能够采集到主机的运行指标如 CPU, 内存，磁盘等信息。我们可以使用 <code>Node Exporter</code>。<code>Node Exporter</code> 同样采用 <code>Golang</code> 编写，并且不存在任何的第三方依赖，只需要下载，解压即可运行。</p>\n<h4 id=\"上传安装包-1\"><a href=\"#上传安装包-1\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>上传 <code>node_exporter-1.4.0-rc.0.linux-amd64.tar.gz</code> 到虚拟机的 <code>/opt</code> 目录</p>\n<h4 id=\"解压安装包-3\"><a href=\"#解压安装包-3\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf node_exporter-1.4.0-rc.0.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> node_exporter-1.4.0-rc.0.linux-amd64.tar.gz node_exporter-1.4.0-rc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动并访问端点查看是否成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行启动命令</span></span><br><span class=\"line\">./node_exporter</span><br></pre></td></tr></table></figure>\n\n<p>浏览器输入：<a href=\"http://ip:9100/metrics%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%BD%93%E5%89%8D\">http://ip:9100/metrics，可以看到当前</a> node exporter 获取到的当前主机的所有监控数据。</p>\n<h4 id=\"节点分发\"><a href=\"#节点分发\" class=\"headerlink\" title=\"节点分发\"></a>节点分发</h4><p>将解压的目录分发到要监控的节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xsync node_exporter-1.4.0-rc</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加文件分发脚本</strong></p>\n<p>创建脚本文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/bin/xsync</span><br></pre></td></tr></table></figure>\n\n<p>脚本内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 判断参数是否足够</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -lt 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> Not Enounh Arguement!</span><br><span class=\"line\"> <span class=\"built_in\">exit</span>;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历所有的机器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> 192.168.88.230 192.168.88.231 192.168.88.232 </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"> <span class=\"built_in\">echo</span> ==== ==== ====  <span class=\"variable\">$host</span> ============</span><br><span class=\"line\"> <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 判断文件是否存在</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -e <span class=\"variable\">$file</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"comment\"># 获取父目录</span></span><br><span class=\"line\">   pdir = $(<span class=\"built_in\">cd</span> -P $(<span class=\"built_in\">dirname</span> <span class=\"variable\">$file</span>); <span class=\"built_in\">pwd</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 获取当前目录的名称</span></span><br><span class=\"line\">   fname = $(<span class=\"built_in\">basename</span> $ file)</span><br><span class=\"line\">   ssh <span class=\"variable\">$host</span> <span class=\"string\">&quot;mkdir -p $ pdir &quot;</span></span><br><span class=\"line\">   rsync -av <span class=\"variable\">$pdir</span>/$ fname <span class=\"variable\">$host</span>:$ pdir</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$file</span> does not exists!</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"> <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>若报错 <code>bash: rsync: command not found</code>，请在目标机器上安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Centos</span></span><br><span class=\"line\">yum install rsync -y </span><br></pre></td></tr></table></figure>\n\n\n\n<p>赋予执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x /usr/bin/xsync</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行条件</strong></p>\n<p>使用 ssh 密钥验证登录，这样在传输文件时就不需要进行二次验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 ssh 私钥（若有这忽略）</span></span><br><span class=\"line\">ssh-keygen -f ~/.ssh/id_rsa -N <span class=\"string\">&#x27;&#x27;</span> </span><br><span class=\"line\"><span class=\"comment\"># 循环把公钥传递到服务器上，免密登录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> 192.168.88.230 192.168.88.231 192.168.88.232  </span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">  ssh-copy-id <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据提示输入密码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h4><h5 id=\"centos6\"><a href=\"#centos6\" class=\"headerlink\" title=\"centos6\"></a>centos6</h5><ol>\n<li>创建自启动脚本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/init.d/node_exporter</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#\t/etc/rc.d/init.d/node_exporter</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 80 80</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># config: /etc/prometheus/node_exporter.conf</span></span><br><span class=\"line\"><span class=\"comment\"># pidfile: /var/run/prometheus/node_exporter.pid</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Source function library.</span></span><br><span class=\"line\">. /etc/init.d/functions</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">RETVAL = 0</span><br><span class=\"line\">PROG = <span class=\"string\">&quot;node_exporter&quot;</span></span><br><span class=\"line\">DAEMON_SYSCONFIG =/etc/sysconfig/<span class=\"variable\">$&#123;PROG&#125;</span></span><br><span class=\"line\">DAEMON =/usr/bin/<span class=\"variable\">$&#123;PROG&#125;</span> <span class=\"comment\">#要把安装目录下/u01/module/node_exporter/node_exporter 可执行文件拷贝到/usr/bin 目录下</span></span><br><span class=\"line\">PID_FILE =/var/run/prometheus/<span class=\"variable\">$&#123;PROG&#125;</span>.pid</span><br><span class=\"line\">LOCK_FILE =/var/lock/subsys/<span class=\"variable\">$&#123;PROG&#125;</span></span><br><span class=\"line\">LOG_FILE =/var/log/prometheus/node_exporter.log</span><br><span class=\"line\">DAEMON_USER = <span class=\"string\">&quot;prometheus&quot;</span></span><br><span class=\"line\">FQDN =$(hostname)</span><br><span class=\"line\">GOMAXPROCS =$(grep -c ^processor /proc/cpuinfo)</span><br><span class=\"line\"> </span><br><span class=\"line\">. <span class=\"variable\">$&#123;DAEMON_SYSCONFIG&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> check_status &gt; /dev/null; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;node_exporter is already running&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot; Starting node_exporter: &quot;</span></span><br><span class=\"line\">  daemonize -u <span class=\"variable\">$&#123;DAEMON_USER&#125;</span> -p <span class=\"variable\">$&#123;PID_FILE&#125;</span> -l <span class=\"variable\">$&#123;LOCK_FILE&#125;</span> -a -e <span class=\"variable\">$&#123;LOG_FILE&#125;</span> -o <span class=\"variable\">$&#123;LOG_FILE&#125;</span> <span class=\"variable\">$&#123;DAEMON&#125;</span> <span class=\"variable\">$&#123;ARGS&#125;</span></span><br><span class=\"line\">  RETVAL =$?</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">&quot; Stopping node_exporter: &quot;</span></span><br><span class=\"line\">    killproc -p <span class=\"variable\">$&#123;PID_FILE&#125;</span> -d 10 <span class=\"variable\">$&#123;DAEMON&#125;</span></span><br><span class=\"line\">    RETVAL =$?</span><br><span class=\"line\">    <span class=\"built_in\">echo</span></span><br><span class=\"line\">    [ <span class=\"variable\">$RETVAL</span> = 0 ] &amp;&amp; <span class=\"built_in\">rm</span> -f <span class=\"variable\">$&#123;LOCK_FILE&#125;</span> <span class=\"variable\">$&#123;PID_FILE&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_status</span></span>() &#123;</span><br><span class=\"line\">    status -p <span class=\"variable\">$&#123;PID_FILE&#125;</span> <span class=\"variable\">$&#123;DAEMON&#125;</span></span><br><span class=\"line\">    RETVAL =$?</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span> &quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    start)</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    stop)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    status)</span><br><span class=\"line\">\tcheck_status</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    reload|force-reload)</span><br><span class=\"line\">        reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    restart)</span><br><span class=\"line\">        stop</span><br><span class=\"line\">        start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        N =/etc/init.d/<span class=\"variable\">$&#123;NAME&#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot; Usage: <span class=\"variable\">$N</span> &#123;start|stop|status|restart|force-reload&#125;&quot;</span> &gt;&amp;2</span><br><span class=\"line\">        RETVAL = 2</span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$&#123;RETVAL&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编辑etc/sysconfig/node_exporter</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>sysconfig/node_exporter  </span><br><span class=\"line\"><span class=\"comment\">##添加如下内容</span></span><br><span class=\"line\">ARGS = <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建启动脚本中对应文件和目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##开机脚本赋权</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /etc/init.d/node_exporter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##拷贝可执行文件到/usr/bin/</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /u01/node_exporter-1.4.0-rc/node_exporter /usr/bin/node_exporter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 添加用户组 </span></span><br><span class=\"line\">groupadd -r prometheus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /usr/hostonnet/prometheus/</span><br><span class=\"line\">useradd -r -g prometheus -s /sbin/nologin -d /usr/hostonnet/prometheus/ -c <span class=\"string\">&quot;prometheus Daemons&quot;</span> prometheus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 家目录修改属主</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R prometheus: prometheus /usr/hostonnet/prometheus/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建运行目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/run/prometheus/</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/run/prometheus/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建 pid 文件，并赋权</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> /var/run/prometheus/node_exporter.pid</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/run/prometheus/node_exporter.pid </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建日志目录，并创建日志文件，赋权，修改属主</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /var/log/prometheus/</span><br><span class=\"line\"><span class=\"built_in\">touch</span> /var/log/prometheus/node_exporter.log</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/log/prometheus</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /var/log/prometheus/node_exporter.log</span><br><span class=\"line\"><span class=\"built_in\">chown</span> prometheus: prometheus /var/log/prometheus/node_exporter.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量执行语句</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 /etc/init.d/node_exporter &amp;&amp; <span class=\"built_in\">cp</span> /u01/node_exporter-1.4.0-rc/node_exporter /usr/bin/node_exporter &amp;&amp; groupadd -r prometheus &amp;&amp; <span class=\"built_in\">mkdir</span> -p /usr/hostonnet/prometheus/ &amp;&amp; useradd -r -g prometheus -s /sbin/nologin -d /usr/hostonnet/prometheus/ -c <span class=\"string\">&quot;prometheus Daemons&quot;</span> prometheus &amp;&amp; <span class=\"built_in\">chown</span> -R prometheus: prometheus /usr/hostonnet/prometheus/ &amp;&amp; <span class=\"built_in\">mkdir</span> -p /var/run/prometheus/ &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/run/prometheus/ &amp;&amp; <span class=\"built_in\">touch</span> /var/run/prometheus/node_exporter.pid &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/run/prometheus/node_exporter.pid &amp;&amp; <span class=\"built_in\">mkdir</span> -p /var/log/prometheus/ &amp;&amp; <span class=\"built_in\">touch</span> /var/log/prometheus/node_exporter.log &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/log/prometheus &amp;&amp; <span class=\"built_in\">chmod</span> 777 /var/log/prometheus/node_exporter.log &amp;&amp; <span class=\"built_in\">chown</span> prometheus: prometheus /var/log/prometheus/node_exporter.log</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>安装daemonize</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh daemonize-1.6.0-1.el6.rf.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>运行node_exporter</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动 node_exporter 并设置开机自启动</span></span><br><span class=\"line\">cd <span class=\"regexp\">/etc/i</span>nit.d<span class=\"regexp\">/ &amp;&amp; ./</span>node_exporter start &amp;&amp; chkconfig node_exporter on  </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"centos7\"><a href=\"#centos7\" class=\"headerlink\" title=\"centos7\"></a>centos7</h5><ol>\n<li>创建 service 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /usr/lib/systemd/system/node_exporter.service</span><br></pre></td></tr></table></figure>\n\n<p>文件内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[Unit]</span></span><br><span class=\"line\"><span class=\"attr\">Description</span> = node_export</span><br><span class=\"line\"><span class=\"attr\">Documentation</span> = https://github.com/prometheus/node_exporter</span><br><span class=\"line\"><span class=\"attr\">After</span> = network.target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Service]</span></span><br><span class=\"line\"><span class=\"attr\">Type</span> = simple</span><br><span class=\"line\"><span class=\"attr\">User</span> = root</span><br><span class=\"line\"><span class=\"attr\">ExecStart</span> = /u01/node_exporter-<span class=\"number\">1.4</span>.<span class=\"number\">0</span>-rc/node_exporter</span><br><span class=\"line\"><span class=\"attr\">Restart</span> = <span class=\"literal\">on</span>-failure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[Install]</span></span><br><span class=\"line\"><span class=\"attr\">WantedBy</span> = multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>分发文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xsync /usr/lib/systemd/system/node_exporter.service</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>设置开机自启并启动（所有机器都执行）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开机自启</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> node_exporter.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">sudo systemctl start node_exporter.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Alertmanager\"><a href=\"#安装-Alertmanager\" class=\"headerlink\" title=\"安装 Alertmanager\"></a>安装 Alertmanager</h3><h4 id=\"上传安装包-2\"><a href=\"#上传安装包-2\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>上传 <code>alertmanager-0.24.0.linux-amd64.tar.gz</code> 到虚拟机的 <code>/opt</code> 目录</p>\n<h4 id=\"解压安装包-4\"><a href=\"#解压安装包-4\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf alertmanager-0.24.0.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> alertmanager-0.24.0.linux-amd64.tar.gz alertmanager-0.24.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-Prometheus-Server-和-Alertmanager\"><a href=\"#启动-Prometheus-Server-和-Alertmanager\" class=\"headerlink\" title=\"启动 Prometheus Server 和 Alertmanager\"></a>启动 Prometheus Server 和 Alertmanager</h3><h4 id=\"在-Prometheus-Server-目录下执行启动命令\"><a href=\"#在-Prometheus-Server-目录下执行启动命令\" class=\"headerlink\" title=\"在 Prometheus Server 目录下执行启动命令\"></a>在 Prometheus Server 目录下执行启动命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./prometheus --config.file = prometheus.yml --web.enable-lifecycle &gt; ./prometheus.log 2 &gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-Alertmanager-目录下启动\"><a href=\"#在-Alertmanager-目录下启动\" class=\"headerlink\" title=\"在 Alertmanager 目录下启动\"></a>在 Alertmanager 目录下启动</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./alertmanager --config.file = alertmanager.yml &gt; ./alertmanager.log 2 &gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Grafana-数据展示\"><a href=\"#安装-Grafana-数据展示\" class=\"headerlink\" title=\"安装 Grafana 数据展示\"></a>安装 Grafana 数据展示</h3><p>grafana 是一款采用 Go 语言编写的开源应用，主要用于大规模指标数据的可视化展现，是网络架构和应用分析中最流行的时序数据展示工具，目前已经支持绝大部分常用的时序数据库。</p>\n<blockquote>\n<p>下载地址：<a href=\"https://grafana.com/grafana/download\">https://grafana.com/grafana/download</a></p>\n</blockquote>\n<h4 id=\"上传安装包-3\"><a href=\"#上传安装包-3\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h4><p>将 <code>grafana-enterprise-9.0.6.linux-amd64.tar.gz</code> 上传至 <code>/opt</code> 目录下</p>\n<h4 id=\"解压安装包-5\"><a href=\"#解压安装包-5\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><ol>\n<li>解压到 <code>/u01/module</code> 目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf grafana-enterprise-9.0.6.linux-amd64.tar.gz -C /u01/module</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改目录名</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /u01/module</span><br><span class=\"line\"><span class=\"built_in\">mv</span> grafana-enterprise-9.0.6.linux-amd64.tar.gz grafana-enterprise-9.0.6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动 grafana 服务</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> ./bin/grafana-server web &gt; ./grafana.log 2 &gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>打开浏览器，访问：<code>http://ip:3000</code>，默认用户名/密码：<code>admin</code></li>\n</ol>\n<h3 id=\"Grafana-与-Prometheus-数据对接\"><a href=\"#Grafana-与-Prometheus-数据对接\" class=\"headerlink\" title=\"Grafana 与 Prometheus 数据对接\"></a>Grafana 与 Prometheus 数据对接</h3><h4 id=\"添加-Prometheus-数据源\"><a href=\"#添加-Prometheus-数据源\" class=\"headerlink\" title=\"添加 Prometheus 数据源\"></a>添加 Prometheus 数据源</h4><ol>\n<li><code>配置 -&gt; 数据源 -&gt; 添加数据源</code></li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804165746.png\" alt=\"image-20220804165739264\"></p>\n<ol start=\"2\">\n<li>选择 <code>Prometheus</code> 数据源</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804165940.png\" alt=\"image-20220804165940226\"></p>\n<ol start=\"3\">\n<li>配置 Prometheus Server 地址</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804170315.png\" alt=\"image-20220804170315289\"></p>\n<ol start=\"4\">\n<li>点击下方的 Save&amp;Test</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804170439.png\" alt=\"image-20220804170439669\"></p>\n<ol start=\"5\">\n<li>点击 Back 返回即可，可以看到 Data Sources 页面，出现了添加的 Prometheus：</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804171225.png\" alt=\"image-20220804171224982\"></p>\n<h4 id=\"添加仪表盘-Dashboard\"><a href=\"#添加仪表盘-Dashboard\" class=\"headerlink\" title=\"添加仪表盘 Dashboard\"></a>添加仪表盘 Dashboard</h4><p>手动一个个添加 Dashboard 比较繁琐，Grafana 社区鼓励用户分享 Dashboard，通过 <a href=\"https://grafana.com/grafana/dashboards\">https://grafana.com/grafana/dashboards</a> 网站，可以找到大量可直接使用的 Dashboard 模板。</p>\n<p>Grafana 中所有的 Dashboard 通过 JSON 进行共享，下载并且导入这些 JSON 文件，就可以直接使用这些已经定义好的 Dashboard。</p>\n<ol>\n<li>选择一款中文版本的 <code>Node Exporter</code> 仪表板</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173336.png\" alt=\"image-20220804173336648\"></p>\n<ol start=\"2\">\n<li>下载模板 json 文件</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173609.png\" alt=\"image-20220804173609120\"></p>\n<ol start=\"3\">\n<li>在 Grafana 中导入模板</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804173822.png\" alt=\"image-20220804173822051\"></p>\n<ol start=\"4\">\n<li>导入之后选择 <code>Prometheus</code> 数据源即可</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804174154.png\" alt=\"image-20220804174153940\"></p>\n<ol start=\"5\">\n<li>导入成功之后就能看到炫酷的仪表板</li>\n</ol>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220804174504.png\" alt=\"image-20220804174503814\"></p>\n<h3 id=\"安装-OracleDB-Exporter-监控-Oracle-数据库\"><a href=\"#安装-OracleDB-Exporter-监控-Oracle-数据库\" class=\"headerlink\" title=\"安装 OracleDB Exporter 监控 Oracle 数据库\"></a>安装 OracleDB Exporter 监控 Oracle 数据库</h3><blockquote>\n<p>GitHub 仓库：<a href=\"https://github.com/iamseth/oracledb_exporter\">iamseth/oracledb_exporter: Prometheus Oracle database exporter. (github.com)</a></p>\n<p>Grafana 面板：<a href=\"https://grafana.com/grafana/dashboards/11121-oracledb/\">Oracledb监控-性能与表空间 | Grafana Labs</a></p>\n<p>以下步骤是采用 Docker 进行安装</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、拉取最新版本镜像</span></span><br><span class=\"line\">docker pull ghcr.io/iamseth/oracledb_exporter: 0.5.0</span><br><span class=\"line\"><span class=\"comment\"># 2、使用 docker run 命令启动</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：1、--link 连接 oracle 数据库容器，这样在 oracledb_exporter 容器中可以直接使用容器名字代替 IP 地址进行通信</span></span><br><span class=\"line\"><span class=\"comment\"># \t   2、若密码中含有 !@#$ 等特殊字符，可以使用 URLEncode 进行转义</span></span><br><span class=\"line\">docker run -d --name oracledb_exporter --<span class=\"built_in\">link</span> = oracle11g -p 9161:9161 -e <span class=\"string\">&#x27;DATA_SOURCE_NAME = oracle://sys: 123456@oracle11g: 1521/orcl&#x27;</span> ghcr.io/iamseth/oracledb_exporter: 0.5.0</span><br><span class=\"line\"><span class=\"comment\"># 3、使用 culr 访问指标情况</span></span><br><span class=\"line\">curl -l http://127.0.0.1:9161/metric</span><br><span class=\"line\"><span class=\"comment\"># 4、接入 Prometheus</span></span><br><span class=\"line\">在 prometheus.yml 中添加一段配置：</span><br><span class=\"line\">  - job_name: oracledb_exporter</span><br><span class=\"line\">    metrics_path: /metrics</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [<span class=\"string\">&#x27;chxdb21.vansys.com: 15090&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Docker-安装服务\"><a href=\"#使用-Docker-安装服务\" class=\"headerlink\" title=\"使用 Docker 安装服务\"></a>使用 Docker 安装服务</h2><h3 id=\"Docker-安装-ClickHouse-数据库\"><a href=\"#Docker-安装-ClickHouse-数据库\" class=\"headerlink\" title=\"Docker 安装 ClickHouse 数据库\"></a>Docker 安装 ClickHouse 数据库</h3><blockquote>\n<p>前提：请先安装好 Docker 容器服务（<a href=\"https://blog.kyire.site/2022/04/02/2f74bb89.html#%E5%AE%89%E8%A3%85-Docker-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\">安装 Docker 容器服务</a>）</p>\n</blockquote>\n<ol>\n<li>创建目录并更改权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/clickhouse/&#123;data, config, <span class=\"built_in\">log</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 777 /u01/clickhouse/&#123;data, config, <span class=\"built_in\">log</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull yandex/clickhouse-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建临时容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -d --name = clickhouse-server \\</span><br><span class=\"line\">--<span class=\"built_in\">ulimit</span> nofile = 262144:262144 \\</span><br><span class=\"line\">-p 8123:8123 -p 9009:9009 -p 9000:9000 \\</span><br><span class=\"line\">yandex/clickhouse-server: latest</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>复制临时容器内配置文件到宿主机</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">cp</span> clickhouse-server:/etc/clickhouse-server/config.xml /u01/clickhouse/config/config.xml</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> clickhouse-server:/etc/clickhouse-server/users.xml /u01/clickhouse/config/users.xml</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>停掉临时容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">rm</span> -f clickhouse-server</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>default用户配置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 sha256sum 密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 随机生成密码</span></span><br><span class=\"line\">PASSWORD = $(<span class=\"built_in\">base64</span> &lt; /dev/urandom | <span class=\"built_in\">head</span> -c8); <span class=\"built_in\">echo</span> <span class=\"string\">&quot;$ PASSWORD &quot;</span>; <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;<span class=\"variable\">$PASSWORD</span> &quot;</span> | <span class=\"built_in\">sha256sum</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">会输出明码和 SHA256 密码（每个人生成的不一样）</span><br><span class=\"line\">jQ+72k17</span><br><span class=\"line\">a70b3173bfef01aff0d2472fd1f86a4be647aed4e0624f1b6c867a69072e1273</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成指定密码 wx123456</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;wx123456&quot;</span>; <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;wx123456&quot;</span> | <span class=\"built_in\">sha256sum</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">wx123456</span><br><span class=\"line\">37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开 users.xml 文件 default 用户设置密码为 123456</span></span><br><span class=\"line\">vim /u01/clickhouse/config/users.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将文件中 &lt;password&gt; &lt;/password&gt; 改为以下内容</span></span><br><span class=\"line\">&lt;password_sha256_hex&gt; 37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86 &lt;/password_sha256_hex&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 default 用户改为只读</span></span><br><span class=\"line\"><span class=\"comment\"># 将 &lt;profile&gt; default &lt;/profile&gt; 改为以下内容</span></span><br><span class=\"line\">&lt;profile&gt; <span class=\"built_in\">readonly</span> &lt;/profile&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>新增root用户</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 root 用户密码 wx123456</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;wx123456&quot;</span>; <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;wx123456&quot;</span> | <span class=\"built_in\">sha256sum</span> | <span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">wx123456</span><br><span class=\"line\">37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开 users.xml 文件 </span></span><br><span class=\"line\">vim /u01/clickhouse/config/users.xml</span><br><span class=\"line\"><span class=\"comment\"># 在 &lt;/default&gt; 下一行添加以下内容</span></span><br><span class=\"line\">&lt;root&gt;</span><br><span class=\"line\">&lt;password_sha256_hex&gt; 37acf78e288b1323fae2115749edcf696b6190d8c8ca1cbc66e39b10e22f2a86 &lt;/password_sha256_hex&gt;</span><br><span class=\"line\">    &lt;networks incl=<span class=\"string\">&quot;networks&quot;</span> replace=<span class=\"string\">&quot;replace&quot;</span>&gt;</span><br><span class=\"line\">            &lt;ip&gt;::/0 &lt;/ip&gt;</span><br><span class=\"line\">    &lt;/networks&gt;</span><br><span class=\"line\">    &lt;profile&gt; default &lt;/profile&gt;</span><br><span class=\"line\">    &lt;quota&gt; default &lt;/quota&gt;</span><br><span class=\"line\">&lt;/root&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>部署clickhouse-server</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name clickhouse-server \\</span><br><span class=\"line\">--privileged = <span class=\"literal\">true</span> --restart = always \\</span><br><span class=\"line\">--<span class=\"built_in\">ulimit</span> nofile = 262144:262144 \\</span><br><span class=\"line\">-p 8123:8123 \\</span><br><span class=\"line\">-p 9000:9000 \\</span><br><span class=\"line\">-p 9009:9009 \\</span><br><span class=\"line\">-v /u01/clickhouse/data:/var/lib/clickhouse: rw \\</span><br><span class=\"line\">-v /u01/clickhouse/log:/var/log/clickhouse-server: rw \\</span><br><span class=\"line\">-v /u01/clickhouse/config/config.xml:/etc/clickhouse-server/config.xml \\</span><br><span class=\"line\">-v /u01/clickhouse/config/users.xml:/etc/clickhouse-server/users.xml \\</span><br><span class=\"line\">yandex/clickhouse-server: latest</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker-安装-ElasticSearch-搜索引擎\"><a href=\"#Docker-安装-ElasticSearch-搜索引擎\" class=\"headerlink\" title=\"Docker 安装 ElasticSearch 搜索引擎\"></a>Docker 安装 ElasticSearch 搜索引擎</h3><blockquote>\n<p>前提：请先安装好 Docker 容器服务（<a href=\"https://blog.kyire.site/2022/04/02/2f74bb89.html#%E5%AE%89%E8%A3%85-Docker-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\">安装 Docker 容器服务</a>）</p>\n</blockquote>\n<ol>\n<li>创建目录、配置文件并修改权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 es 相关挂载目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /hd/docker/es/&#123;config, data, plugins&#125;</span><br><span class=\"line\"><span class=\"comment\"># 创建文件</span></span><br><span class=\"line\">vi /hd/docker/es/config/elasticsearch.yml</span><br><span class=\"line\">http.host: 0.0.0.0</span><br><span class=\"line\">http.cors.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">http.cors.allow-origin: <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">http.cors.allow-headers: Authorization</span><br><span class=\"line\">xpack.security.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">xpack.security.transport.ssl.enabled: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置目录权限，否则会报错</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./config/elasticsearch.yml</span><br><span class=\"line\"><span class=\"comment\"># 设置为目录 777 权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 777 /hd/docker/es</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elasticsearch: 7.17.4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name es --restart = always -p 9200:9200 -p 9300:9300 \\</span><br><span class=\"line\">-e <span class=\"string\">&quot;ES_JAVA_OPTS =-Xms512m -Xmx1024m&quot;</span> \\</span><br><span class=\"line\">-v /hd/docker/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\</span><br><span class=\"line\">-v /hd/docker/es/data:/usr/share/elasticsearch/data \\</span><br><span class=\"line\">-v /hd/docker/es/plugins:/usr/share/elasticsearch/plugins \\</span><br><span class=\"line\">-d elasticsearch: 7.17.4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>配置 es 访问密码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入容器内部</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it es /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置密码命令</span></span><br><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>访问网页 <code>http://localhost:9200</code>（账号密码：<code>elastic</code>/<code>123456</code>）</li>\n</ol>\n<h3 id=\"Docker-安装-Nginx-Proxy-Manager-代理管理平台\"><a href=\"#Docker-安装-Nginx-Proxy-Manager-代理管理平台\" class=\"headerlink\" title=\"Docker 安装 Nginx Proxy Manager 代理管理平台\"></a>Docker 安装 Nginx Proxy Manager 代理管理平台</h3><blockquote>\n<p>前提：请先安装好 Docker 容器服务（<a href=\"https://blog.kyire.site/2022/04/02/2f74bb89.html#%E5%AE%89%E8%A3%85-Docker-%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1\">安装 Docker 容器服务</a>）</p>\n</blockquote>\n<ol>\n<li>创建 <code>docker-compose.yml</code></li>\n</ol>\n<p><strong>使用 network_mode: host 与宿主机共享网络</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;2691432189/nginx-proxy-manager-monitor-zh: latest&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>部署运行</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>登录管理平台</li>\n</ol>\n<p>容器运行成功后，使用浏览器访问 <code>81</code> 端口。</p>\n<p><a href=\"http://127.0.0.1:81/\">http://127.0.0.1:81</a></p>\n<p>默认管理员信息：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Email:</span>    admin@example.com</span><br><span class=\"line\"><span class=\"symbol\">Password:</span> changeme</span><br></pre></td></tr></table></figure>\n\n<p>登录之后系统会要求修改详细信息和密码</p>\n<ol start=\"4\">\n<li>快速升级</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose down</span><br><span class=\"line\">docker-compose pull</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker-安装-Redis-服务\"><a href=\"#Docker-安装-Redis-服务\" class=\"headerlink\" title=\"Docker 安装 Redis 服务\"></a>Docker 安装 Redis 服务</h3><ol>\n<li>拉取 <code>Redis</code> 镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取最新版本</span></span><br><span class=\"line\">docker pull redis</span><br><span class=\"line\"><span class=\"comment\"># 指定版本号</span></span><br><span class=\"line\">docker pull redis: 5.0.8</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>启动 <code>Redis</code> 容器</li>\n</ol>\n<blockquote>\n<p>建议使用配置文件启动，先从 Redis 官网下载标准配置文件（也可以自己准备一个）</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建配置文件存放目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/software/redis/conf</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /u01/software/redis/conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载 redis.conf 配置文件</span></span><br><span class=\"line\">wget http://download.redis.io/redis-stable/redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 给配置文件授权</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 777 redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\">1、注释 <span class=\"built_in\">bind</span> 127.0.0.1，开启远程访问</span><br><span class=\"line\">2、关闭保护模式 protected-mode no</span><br><span class=\"line\">3、设置密码 requirepass 123456</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 Redis 容器</span></span><br><span class=\"line\">docker run -p 6379:6379 --name redis --restart = always \\</span><br><span class=\"line\">-v /u01/software/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /u01/software/redis/data:/data \\</span><br><span class=\"line\">-itd redis redis-server /etc/redis/redis.conf \\</span><br><span class=\"line\">--appendonly <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux-下静默安装-Oracle-19c\"><a href=\"#Linux-下静默安装-Oracle-19c\" class=\"headerlink\" title=\"Linux 下静默安装 Oracle 19c\"></a>Linux 下静默安装 Oracle 19c</h2><h3 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><h4 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h4><p>官网下载：<a href=\"https://www.oracle.com/database/technologies/oracle19c-linux-downloads.html\">下载地址 | 点击跳转</a></p>\n<h4 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h4><table>\n<thead>\n<tr>\n<th>事项</th>\n<th>详情</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作系统</td>\n<td>Centos 7.9</td>\n</tr>\n<tr>\n<td>数据库版本</td>\n<td>19.3.0</td>\n</tr>\n<tr>\n<td>CPU</td>\n<td>Intel(R) Xeon(R) Silver 4210R CPU @ 2.40GHz</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>32GB</td>\n</tr>\n<tr>\n<td>Swap</td>\n<td>15GB</td>\n</tr>\n</tbody></table>\n<h3 id=\"准备安装环境\"><a href=\"#准备安装环境\" class=\"headerlink\" title=\"准备安装环境\"></a>准备安装环境</h3><h4 id=\"服务器环境检查\"><a href=\"#服务器环境检查\" class=\"headerlink\" title=\"服务器环境检查\"></a>服务器环境检查</h4><ol>\n<li>检查缺少了那些依赖包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --query --queryformat <span class=\"string\">&quot;%&#123;NAME&#125;-%&#123;VERSION&#125;.%&#123;RELEASE&#125; (%&#123;ARCH&#125;)\\n&quot;</span> bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel make sysstat elfutils-libelf elfutils-libelf-devel fontconfig-devel libxcb smartmontools libX11 libXau libXtst libXrender libXrender-devel</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 yum 安装缺少的依赖</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y <span class=\"variable\">$NOT_INSTALLED</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建-Oracle-用户组\"><a href=\"#创建-Oracle-用户组\" class=\"headerlink\" title=\"创建 Oracle 用户组\"></a>创建 Oracle 用户组</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd oinstall &amp;&amp; groupadd dba &amp;&amp; groupadd asmdba &amp;&amp; groupadd backupdba &amp;&amp; groupadd dgdba &amp;&amp; groupadd kmdba &amp;&amp; groupadd racdba &amp;&amp; groupadd oper &amp;&amp; useradd -g oinstall -G dba, asmdba, backupdba, dgdba, kmdba, racdba, oper -m oracle</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-hosts-文件\"><a href=\"#配置-hosts-文件\" class=\"headerlink\" title=\"配置 hosts 文件\"></a>配置 hosts 文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置系统内核参数\"><a href=\"#配置系统内核参数\" class=\"headerlink\" title=\"配置系统内核参数\"></a>配置系统内核参数</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 /etc/sysctl.conf 文件</span></span><br><span class=\"line\">vi /etc/sysctl.conf</span><br><span class=\"line\">fs.aio-max-nr = 1048576</span><br><span class=\"line\">fs.file-max = 6815744</span><br><span class=\"line\">kernel.shmall = 16451328</span><br><span class=\"line\">kernel.shmmax = 33692319744</span><br><span class=\"line\">kernel.shmmni = 4096</span><br><span class=\"line\">kernel.sem = 250 32000 100 128</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class=\"line\">net.core.rmem_default = 262144</span><br><span class=\"line\">net.core.rmem_max = 4194304</span><br><span class=\"line\">net.core.wmem_default = 262144</span><br><span class=\"line\">net.core.wmem_max = 1048576</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 sysctl -p 使配置生效</span></span><br><span class=\"line\">/sbin/sysctl -p</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关闭-SELINUX-跟防火墙\"><a href=\"#关闭-SELINUX-跟防火墙\" class=\"headerlink\" title=\"关闭 SELINUX 跟防火墙\"></a>关闭 SELINUX 跟防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 /etc/selinux/config 中 SELINUX 配置是否是 disabled</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/selinux/config</span><br><span class=\"line\"><span class=\"comment\"># This file controls the state of SELinux on the system.</span></span><br><span class=\"line\"><span class=\"comment\"># SELINUX = can take one of these three values:</span></span><br><span class=\"line\"><span class=\"comment\">#     enforcing - SELinux security policy is enforced.</span></span><br><span class=\"line\"><span class=\"comment\">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class=\"line\"><span class=\"comment\">#     disabled - No SELinux policy is loaded.</span></span><br><span class=\"line\">SELINUX = disabled</span><br><span class=\"line\"><span class=\"comment\"># SELINUXTYPE = can take one of three two values:</span></span><br><span class=\"line\"><span class=\"comment\">#     targeted - Targeted processes are protected,</span></span><br><span class=\"line\"><span class=\"comment\">#     minimum - Modification of targeted policy. Only selected processes are protected. </span></span><br><span class=\"line\"><span class=\"comment\">#     mls - Multi Level Security protection.</span></span><br><span class=\"line\">SELINUXTYPE = targeted </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看防火墙状态</span></span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭防火墙服务</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\"># 停止防火墙服务开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置用户环境\"><a href=\"#配置用户环境\" class=\"headerlink\" title=\"配置用户环境\"></a>配置用户环境</h4><ol>\n<li>配置 oracle 用户环境变量</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换 oracle 用户</span></span><br><span class=\"line\">su - oracle</span><br><span class=\"line\"><span class=\"comment\"># 编辑 .bash_profile 文件，在文件末尾添加</span></span><br><span class=\"line\">vi .bash_profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_BASE =/u01/app/oracle</span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_HOME =/u01/app/oracle/product/19.3.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH = <span class=\"variable\">$PATH</span>:$ ORACLE_HOME/bin:/usr/local/bin</span><br><span class=\"line\"><span class=\"comment\"># 修改为具体的机器名称 /etc/hosts 配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_HOSTNAME = xxx</span><br><span class=\"line\"><span class=\"built_in\">export</span> ORACLE_SID = orcl</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH = <span class=\"variable\">$ORACLE_HOME</span>/lib:$ ORACLE_HOME/rdbms/lib:<span class=\"variable\">$ORACLE_HOME</span>/network/lib:/lib:/usr/lib</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH = <span class=\"variable\">$ORACLE_HOME</span>/jlib:$ ORACLE_HOME/rdbms/jlib:<span class=\"variable\">$ORACLE_HOME</span>/network/jlib</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改用户的 shell 限制</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 /etc/security/limits.conf  文件末尾添加</span></span><br><span class=\"line\">vi /etc/security/limits.conf </span><br><span class=\"line\">@oinstall soft nofile 2048</span><br><span class=\"line\">@oinstall hard nofile 65536</span><br><span class=\"line\">@oinstall soft <span class=\"built_in\">nproc</span> 16384</span><br><span class=\"line\">@oinstall soft stack 10240</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><p>响应文件模板存放位置：</p>\n<ul>\n<li>软件：/u01/app/oracle/product/19.5.0/install/response/db_install.rsp</li>\n<li>监听：/u01/app/oracle/product/19.5.0/assistants/netca/netca.rsp</li>\n<li>建库：/u01/app/oracle/product/19.5.0/assistants/dbca/dbca.rsp</li>\n</ul>\n<h4 id=\"解压安装包-6\"><a href=\"#解压安装包-6\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 oracle 安装目录（root 用户）</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /u01/app/oracle/product/19.3.0</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R oracle: oinstall /u01/app</span><br><span class=\"line\"><span class=\"comment\"># 切换到 oracle 用户解压</span></span><br><span class=\"line\">su - oracle</span><br><span class=\"line\">unzip LINUX.X64_193000_db_home.zip -d <span class=\"variable\">$ORACLE_HOME</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令行静默安装\"><a href=\"#命令行静默安装\" class=\"headerlink\" title=\"命令行静默安装\"></a>命令行静默安装</h4><h4 id=\"配置响应文件\"><a href=\"#配置响应文件\" class=\"headerlink\" title=\"配置响应文件\"></a>配置响应文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份 db_install.rsp 文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_HOME</span>/install/response</span><br><span class=\"line\"><span class=\"built_in\">cp</span> db_install.rsp db_install.rsp.bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑 db_install.rsp 文件，修改以下参数</span></span><br><span class=\"line\">oracle.install.option = INSTALL_DB_SWONLY</span><br><span class=\"line\">UNIX_GROUP_NAME = oinstall</span><br><span class=\"line\">INVENTORY_LOCATION =/u01/app/oraInventory</span><br><span class=\"line\">ORACLE_HOME =/u01/app/oracle/product/19.3.0</span><br><span class=\"line\">ORACLE_BASE =/u01/app/oracle</span><br><span class=\"line\">oracle.install.db.InstallEdition = EE</span><br><span class=\"line\">oracle.install.db.OSDBA_GROUP = dba</span><br><span class=\"line\">oracle.install.db.OSOPER_GROUP = oper</span><br><span class=\"line\">oracle.install.db.OSBACKUPDBA_GROUP = backupdba</span><br><span class=\"line\">oracle.install.db.OSDGDBA_GROUP = dgdba</span><br><span class=\"line\">oracle.install.db.OSKMDBA_GROUP = kmdba</span><br><span class=\"line\">oracle.install.db.OSRACDBA_GROUP = racdba</span><br><span class=\"line\">oracle.install.db.rootconfig.executeRootScript = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行安装\"><a href=\"#执行安装\" class=\"headerlink\" title=\"执行安装\"></a>执行安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./runInstaller -silent -responseFile <span class=\"variable\">$ORACLE_HOME</span>/install/response/db_install.rsp</span><br></pre></td></tr></table></figure>\n\n<p><strong>若出现安装错误，请根据提示查看日志，分析错误原因</strong></p>\n<h4 id=\"安装成功根据提示使用-root-用户执行脚本\"><a href=\"#安装成功根据提示使用-root-用户执行脚本\" class=\"headerlink\" title=\"安装成功根据提示使用 root 用户执行脚本\"></a>安装成功根据提示使用 root 用户执行脚本</h4><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh <span class=\"regexp\">/u01/</span>app<span class=\"regexp\">/oraInventory/</span>orainstRoot.sh</span><br><span class=\"line\">sh <span class=\"regexp\">/u01/</span>app<span class=\"regexp\">/oracle/</span>product<span class=\"regexp\">/19.3.0/</span>root.sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看相关执行日志，若没有错误，表示已经安装完成</strong></p>\n<h3 id=\"创建数据库实例\"><a href=\"#创建数据库实例\" class=\"headerlink\" title=\"创建数据库实例\"></a>创建数据库实例</h3><h4 id=\"配置监听\"><a href=\"#配置监听\" class=\"headerlink\" title=\"配置监听\"></a>配置监听</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建监听</span></span><br><span class=\"line\">netca /silent /responseFile <span class=\"variable\">$ORACLE_HOME</span>/assistants/netca/netca.rsp</span><br><span class=\"line\"><span class=\"comment\"># 查看监听状态</span></span><br><span class=\"line\">lsnrctl status</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份 dbca.rsp 响应文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$ORACLE_HOME</span>/assistants/dbca</span><br><span class=\"line\"><span class=\"built_in\">cp</span> dbca.rsp dbca.rsp.bak</span><br><span class=\"line\"><span class=\"comment\"># 配置 dbca.rsp 响应文件</span></span><br><span class=\"line\">vi dbca.rsp</span><br><span class=\"line\"><span class=\"comment\"># 主要修改以下参数</span></span><br><span class=\"line\">gdbName = orcl</span><br><span class=\"line\">sid = orcl</span><br><span class=\"line\">databaseConfigType = SI</span><br><span class=\"line\">templateName = General_Purpose.dbc</span><br><span class=\"line\">sysPassword = Qwer1234</span><br><span class=\"line\">systemPassword = Qwer1234</span><br><span class=\"line\">emConfiguration = DBEXPRESS</span><br><span class=\"line\">dbsnmpPassword = Qwer1234</span><br><span class=\"line\">datafileDestination =/u01/app/oracle/oradata</span><br><span class=\"line\">characterSet = ZHS16GBK</span><br><span class=\"line\">totalMemory = 8192</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"执行安装-1\"><a href=\"#执行安装-1\" class=\"headerlink\" title=\"执行安装\"></a>执行安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbca -silent -createDatabase -responseFile <span class=\"variable\">$ORACLE_HOME</span>/assistants/dbca/dbca.rsp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接 sqlplus</span></span><br><span class=\"line\">sqlplus / as sysdba</span><br><span class=\"line\"><span class=\"comment\"># 查看实例的运行状态</span></span><br><span class=\"line\">select instance_name, status from v<span class=\"variable\">$instance</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完全卸载-Oracle-数据库\"><a href=\"#完全卸载-Oracle-数据库\" class=\"headerlink\" title=\"完全卸载 Oracle 数据库\"></a>完全卸载 Oracle 数据库</h3><h5 id=\"停止数据库服务\"><a href=\"#停止数据库服务\" class=\"headerlink\" title=\"停止数据库服务\"></a>停止数据库服务</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接 sqlplus</span></span><br><span class=\"line\">sqlplus / as sysdba</span><br><span class=\"line\"><span class=\"comment\"># 停止数据库服务</span></span><br><span class=\"line\">shutdown immediate;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"停止数据库监听\"><a href=\"#停止数据库监听\" class=\"headerlink\" title=\"停止数据库监听\"></a>停止数据库监听</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止数据库监听</span></span><br><span class=\"line\">lsnrctl stop</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用-deinstall-工具进行卸载\"><a href=\"#使用-deinstall-工具进行卸载\" class=\"headerlink\" title=\"使用 deinstall 工具进行卸载\"></a>使用 deinstall 工具进行卸载</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行 deinstall 工具，按提示进行操作</span></span><br><span class=\"line\">/u01/app/oracle/product/19.3.0/deinstall/deinstall</span><br><span class=\"line\"><span class=\"comment\"># 执行结束后按提示使用 root 用户执行脚本</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /etc/oraInst.loc</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /opt/ORCLfmap</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -r /etc/oratab</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"Linux","path":"api/categories/Linux.json"}],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"笔记","path":"api/tags/笔记.json"}]}