{"title":"Redis 缓存数据库","slug":"Redis数据库","date":"2021-05-17T08:25:44.000Z","updated":"2021-05-17T08:26:26.000Z","comments":true,"path":"api/articles/Redis数据库.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420135521.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420134715.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420134812.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420211847.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502131730.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132313.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132426.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132621.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502143650.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502234526.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502234703.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503001012.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503002524.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503102342.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503105120.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503105216.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143056.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143817.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143857.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144252.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144546.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144822.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144919.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503145247.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153104.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153133.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153155.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503160753.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503162204.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503162814.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503163100.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503163113.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503174711.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503180007.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503180127.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503181753.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503181828.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183005.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183137.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183210.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183725.png"],"content":"<h2 id=\"为什么要用-Nosql\"><a href=\"#为什么要用-Nosql\" class=\"headerlink\" title=\"为什么要用 Nosql\"></a>为什么要用 Nosql</h2><blockquote>\n<p>1、单机 MySQL 的年代！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420135521.png\"></p>\n<p>90 年代，一个基本的网站访问量一般不会太大，单个数据库完全足够！</p>\n<p>那个时候，更多的去使用静态网页 HTML ==&gt; 服务器根本没有太大的压力！</p>\n<p>思考一下，这种情况下：整个网站的瓶颈是什么？</p>\n<ol>\n<li>数据量如果太大，一个机器放不下了！</li>\n<li>数据的索引（ B + Tree），一个机器内存也放不下</li>\n<li>访问量（读写混合），一个服务器承受不了</li>\n</ol>\n<p>只要你开始出现以上的三种情况之一，那么你就必须晋级！</p>\n<blockquote>\n<p>2、Memcached（缓存）+ MySQL + 垂直拆分（读写分离）</p>\n</blockquote>\n<p>网站 80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！</p>\n<p>发展过程：优化数据结构和索引 –&gt; 文件缓存（IO）–&gt; Memcached（当时最热门的技术！）</p>\n<blockquote>\n<p>3、分库分表 + 水平拆分 + MySQL 集群</p>\n</blockquote>\n<p>技术和业务在发展的同时，对人的要求也越来越高！</p>\n<p>==本质：数据库（读、写）==</p>\n<p>早些年 MyISAM：表锁，十分影响效率！高并发下就会出现严重的锁问题</p>\n<p>转战 Innodb：行锁</p>\n<p>慢慢的就开始使用分库分表来解决写的压力！MySQL 在那个年代就推出了 表分区！这个并没有多少公司使用！</p>\n<p>MySQL 的集群，很好的满足那个年代的需求！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420134715.png\" alt=\"img\"></p>\n<blockquote>\n<p>4、最近的年代</p>\n</blockquote>\n<p>如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql 数据库就能轻松解决这些问题。目前一个基本的互联网项目：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420134812.png\" alt=\"img\"></p>\n<blockquote>\n<p>为什么要用 NoSQL！</p>\n</blockquote>\n<p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！这时候我们就需要使用 NoSQL 数据库的，Nosql 可以很好的处理以上的情况！</p>\n<h2 id=\"什么是-NoSQL\"><a href=\"#什么是-NoSQL\" class=\"headerlink\" title=\"什么是 NoSQL\"></a>什么是 NoSQL</h2><blockquote>\n<p>NoSQL</p>\n</blockquote>\n<p>NoSQL = Not Only SQL（不仅仅是 SQL）</p>\n<p>Not Only Structured Query Language</p>\n<p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p>\n<p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p>\n<p>NoSQL 泛指非关系型数据库，随着 web2.0 互联网的诞生，传统的关系型数据库很难对付 web2.0 时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL 在当今大数据环境下发展的十分迅速，Redis 是发展最快的。</p>\n<blockquote>\n<p>NoSQL 特点</p>\n</blockquote>\n<ol>\n<li>方便扩展（数据之间没有关系，很好扩展！）</li>\n<li>大数据量高性能（Redis 一秒可以写 8 万次，读 11 万次，NoSQL 的缓存记录级，是一种细粒度的缓存，性能会比较高！）</li>\n<li>数据类型是多样型的！（不需要事先设计数据库，随取随用）</li>\n<li>传统的 RDBMS 和 NoSQL</li>\n</ol>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">传统的 RDBMS</span><br><span class=\"line\"><span class=\"bullet\">- </span>结构化组织</span><br><span class=\"line\"><span class=\"bullet\">- </span>SQL</span><br><span class=\"line\"><span class=\"bullet\">- </span>数据和关系都存在单独的表中 row col</span><br><span class=\"line\"><span class=\"bullet\">- </span>操作，数据定义语言</span><br><span class=\"line\"><span class=\"bullet\">- </span>严格的一致性</span><br><span class=\"line\"><span class=\"bullet\">- </span>严格的事务</span><br><span class=\"line\"><span class=\"bullet\">- </span>...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NoSQL</span><br><span class=\"line\"><span class=\"bullet\">- </span>不仅仅是数据</span><br><span class=\"line\"><span class=\"bullet\">- </span>没有固定的查询语言</span><br><span class=\"line\"><span class=\"bullet\">- </span>键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class=\"line\"><span class=\"bullet\">- </span>最终一致性</span><br><span class=\"line\"><span class=\"bullet\">- </span>CAP定理和BASE</span><br><span class=\"line\"><span class=\"bullet\">- </span>高性能，高可用，高可扩</span><br><span class=\"line\"><span class=\"bullet\">- </span>...</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>了解：3V+3 高</p>\n</blockquote>\n<ul>\n<li><p>大数据时代的 3V ：主要是描述问题的</p>\n<ul>\n<li>海量 Velume</li>\n<li>多样 Variety</li>\n<li>实时 Velocity</li>\n</ul>\n</li>\n<li><p>大数据时代的 3 高 ： 主要是对程序的要求</p>\n<ul>\n<li>高并发</li>\n<li>高可扩</li>\n<li>高性能</li>\n</ul>\n</li>\n</ul>\n<p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p>\n<h2 id=\"NoSQL-的四大分类\"><a href=\"#NoSQL-的四大分类\" class=\"headerlink\" title=\"NoSQL 的四大分类\"></a>NoSQL 的四大分类</h2><p><strong>KV 键值对</strong></p>\n<ul>\n<li>新浪：Redis</li>\n<li>美团：Redis + Tair</li>\n<li>阿里、百度：Redis + memecache</li>\n</ul>\n<p><strong>文档型数据库（bson 格式 和 json 一样）</strong></p>\n<ul>\n<li>mongoDB<ul>\n<li>MongoDB 是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档！</li>\n<li>MongoDB 是一个介于关系型数据库和非关系型数据库中间的产品！MongoDB 是非关系型数据库汇总功能最丰富的，最像关系型数据库的！</li>\n</ul>\n</li>\n<li>CouchDB</li>\n</ul>\n<p><strong>列存储数据库</strong></p>\n<ul>\n<li>HBase</li>\n<li>分布式文件系统</li>\n</ul>\n<p><strong>图关系数据库</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420211847.png\" alt=\"image-20210420211847626\"></p>\n<ul>\n<li>他不是存图形，放的是关系，比如：朋友圈社交网络，广告推荐！</li>\n<li><strong>Neo4j</strong>，infoGrid</li>\n</ul>\n<h1 id=\"Redis-入门\"><a href=\"#Redis-入门\" class=\"headerlink\" title=\"Redis 入门\"></a>Redis 入门</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>Redis 是什么？</p>\n</blockquote>\n<p>Redis（Remote Dictionary Server )，即远程字典服务。</p>\n<p>是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。</p>\n<p>与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave(主从)同步。</p>\n<blockquote>\n<p>Redis 能干嘛？</p>\n</blockquote>\n<ol>\n<li>内存存储、持久化，内存中是断电即失、所以说持久化很重要（RDB、AOF）</li>\n<li>效率高，可以用于高速缓存</li>\n<li>发布订阅系统</li>\n<li>地图信息分析</li>\n<li>计时器、计数器（浏览量！）</li>\n<li>……</li>\n</ol>\n<blockquote>\n<p>特性</p>\n</blockquote>\n<ol>\n<li>多样的数据类型</li>\n<li>持久化</li>\n<li>集群</li>\n<li>事务</li>\n<li>…</li>\n</ol>\n<h2 id=\"环境搭建（省略）\"><a href=\"#环境搭建（省略）\" class=\"headerlink\" title=\"环境搭建（省略）\"></a>环境搭建（省略）</h2><p><a href=\"https://www.runoob.com/redis/redis-install.html\">Redis 安装 | 菜鸟教程 (runoob.com)</a></p>\n<h2 id=\"测试性能\"><a href=\"#测试性能\" class=\"headerlink\" title=\"测试性能\"></a>测试性能</h2><p><strong>redis-benchmark</strong> 是一个压力测试工具！</p>\n<p>官方自带的性能测试工具！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-benchmark [option] [option value]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502131730.png\" alt=\"image-20210502131730085\"></p>\n<p>我们来简单测试一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试100个并发连接 100000个请求</span></span><br><span class=\"line\">redis-benchmark localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132313.png\" alt=\"image-20210502132313424\"></p>\n<p>如何查看这些分析呢？</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132426.png\" alt=\"image-20210502132426480\"></p>\n<h2 id=\"基础的知识\"><a href=\"#基础的知识\" class=\"headerlink\" title=\"基础的知识\"></a>基础的知识</h2><p><strong>redis 默认有 16 个数据库</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132621.png\" alt=\"image-20210502132621114\"></p>\n<p>默认使用的是第 0 个</p>\n<p>可以使用<code>select</code>进行切换数据库！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; select 3 <span class=\"comment\">#切换数据库</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; DBSIZE <span class=\"comment\">#查看db大小</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; <span class=\"built_in\">set</span> name ouwen <span class=\"comment\">#设置key-value</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; DBSIZE <span class=\"comment\">#查看db大小</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; get name <span class=\"comment\">#获取value</span></span><br><span class=\"line\"><span class=\"string\">&quot;ouwen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379[3]&gt; keys * <span class=\"comment\">#获取所有key</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;name&quot;</span></span><br><span class=\"line\">127.0.0.1:6379[3]&gt; FLUSHDB <span class=\"comment\">#清除当前数据库</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; FLUSHALL <span class=\"comment\">#清除全部数据库</span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Redis 是单线程的！</p>\n</blockquote>\n<p><strong>Redis 到底有多快？</strong></p>\n<p>Redis 采用的是基于内存的采用的是<strong>单进程单线程</strong>模型的 <strong>KV 数据库</strong>，<strong>由 C 语言编写</strong>，官方提供的数据是可以达到 100000+的 QPS（每秒内查询次数）。这个数据不比采用单进程多线程的同样基于内存的 KV 数据库 Memcached 差！</p>\n<p><strong>Redis 为什么这么快？</strong></p>\n<ol>\n<li>完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O(1)；</li>\n<li>数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</li>\n<li>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</li>\n<li>使用多路 I/O 复用模型，非阻塞 IO；</li>\n<li>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</li>\n</ol>\n<p>以上几点都比较好理解，下边我们针对多路 I/O 复用模型进行简单的探讨：</p>\n<p><strong>多路 I/O 复用模型</strong></p>\n<p>多路 I/O 复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有 I/O 事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll 是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。</p>\n<p><strong>这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。</strong>采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络 IO 的时间消耗），且 Redis 在内存中操作数据的速度非常快，也就是说内存内的操作不会成为影响 Redis 性能的瓶颈，主要由以上几点造就了 Redis 具有很高的吞吐量。</p>\n<p><strong>那么为什么 Redis 是单线程的？</strong></p>\n<p>我们首先要明白，上边的种种分析，都是为了营造一个 Redis 很快的氛围！官方 FAQ 表示，因为 Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章地采用单线程的方案了（毕竟采用多线程会有很多麻烦！）。</p>\n<h1 id=\"五大数据类型\"><a href=\"#五大数据类型\" class=\"headerlink\" title=\"五大数据类型\"></a>五大数据类型</h1><blockquote>\n<p>官方文档</p>\n</blockquote>\n<p>Redis 是一个开源（BSD 许可）的，内存中的数据结构存储系统，它可以用作==数据库、缓存和消息中间 件 MQ==。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合 （sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间 （geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA 脚本（Lua scripting）， LRU 驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis 哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>\n<h2 id=\"Redis-Key\"><a href=\"#Redis-Key\" class=\"headerlink\" title=\"Redis-Key\"></a>Redis-Key</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-del.html\">DEL key</a> <br />该命令用于在 key 存在时删除 key。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-dump.html\">DUMP key</a> <br />序列化给定 key ，并返回被序列化的值。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-exists.html\">EXISTS key</a> <br />检查给定 key 是否存在。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-expire.html\">EXPIRE key seconds</a> <br />为给定 key 设置过期时间，以秒计。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-expireat.html\">EXPIREAT key timestamp</a> <br />EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-pexpire.html\">PEXPIRE key milliseconds</a> <br />设置 key 的过期时间以毫秒计。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-pexpireat.html\">PEXPIREAT key milliseconds-timestamp</a> <br />设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-keys.html\">KEYS pattern</a> <br />查找所有符合给定模式( pattern)的 key 。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-move.html\">MOVE key db</a> <br />将当前数据库的 key 移动到给定的数据库 db 当中。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-persist.html\">PERSIST key</a> <br />移除 key 的过期时间，key 将持久保持。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-pttl.html\">PTTL key</a> <br />以毫秒为单位返回 key 的剩余的过期时间。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-ttl.html\">TTL key</a> <br />以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-randomkey.html\">RANDOMKEY<br /></a> 从当前数据库中随机返回一个 key 。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-rename.html\">RENAME key newkey</a> <br />修改 key 的名称</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-renamenx.html\">RENAMENX key newkey</a> <br />仅当 newkey 不存在时，将 key 改名为 newkey 。</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\">[SCAN cursor <a href=\"https://www.runoob.com/redis/keys-scan.html\">MATCH pattern] [COUNT count]</a> <br />迭代数据库中的数据库键。</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-type.html\">TYPE key</a> <br />返回 key 所储存的值的类型。</td>\n</tr>\n</tbody></table>\n<h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-set.html\">SET key value</a> <br />设置指定 key 的值</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-get.html\">GET key</a> <br />获取指定 key 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-getrange.html\">GETRANGE key start end</a> <br />返回 key 中字符串值的子字符</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-getset.html\">GETSET key value</a> <br />将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-getbit.html\">GETBIT key offset</a> <br />对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-mget.html\">MGET key1 [key2..]</a> <br />获取所有(一个或多个)给定 key 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setbit.html\">SETBIT key offset value</a> <br />对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setex.html\">SETEX key seconds value</a> <br />将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setnx.html\">SETNX key value</a> <br />只有在 key 不存在时设置 key 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setrange.html\">SETRANGE key offset value</a> <br />用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-strlen.html\">STRLEN key</a> <br />返回 key 所储存的字符串值的长度。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-mset.html\">MSET key value [key value …]</a> <br />同时设置一个或多个 key-value 对。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-msetnx.html\">MSETNX key value[key value …]</a> <br />同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-psetex.html\">PSETEX key milliseconds value</a> <br />这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-incr.html\">INCR key</a> <br />将 key 中储存的数字值增一。</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-incrby.html\">INCRBY key increment</a> <br />将 key 所储存的值加上给定的增量值（increment） 。</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-incrbyfloat.html\">INCRBYFLOAT key increment</a> <br />将 key 所储存的值加上给定的浮点增量值（increment） 。</td>\n</tr>\n<tr>\n<td align=\"left\">18</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-decr.html\">DECR key</a> <br />将 key 中储存的数字值减一。</td>\n</tr>\n<tr>\n<td align=\"left\">19</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-decrby.html\">DECRBY key decrement</a> <br />key 所储存的值减去给定的减量值（decrement） 。</td>\n</tr>\n<tr>\n<td align=\"left\">20</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-append.html\">APPEND key value</a> <br />如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 v1 <span class=\"comment\"># 设置值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1 <span class=\"comment\"># 获得值</span></span><br><span class=\"line\"><span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys * <span class=\"comment\"># 获得所有的key</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;key1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; EXISTS key1 <span class=\"comment\"># 判断某一个key是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; APPEND key1 <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\"># 追加字符串，如果当前key不存在，就相当于setkey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;v1hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN key1 <span class=\"comment\"># 获取字符串的长度！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; APPEND key1 <span class=\"string\">&quot;,kaungshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 17</span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN key1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 17</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;v1hello,kaungshen&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># i++</span></span><br><span class=\"line\"><span class=\"comment\"># 步长 i+=</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> views 0 <span class=\"comment\"># 初始浏览量为0</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; incr views <span class=\"comment\"># 自增1 浏览量变为1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; incr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; decr views <span class=\"comment\"># 自减1 浏览量-1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; decr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; decr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY views 10 <span class=\"comment\"># 可以设置步长，指定增量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY views 10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 19</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY views 5</span><br><span class=\"line\">bilibili：狂神说Java(<span class=\"built_in\">integer</span>) 14</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 字符串范围 range</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 <span class=\"string\">&quot;hello,kuangshen&quot;</span> <span class=\"comment\"># 设置 key1 的值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;hello,kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GETRANGE key1 0 3 <span class=\"comment\"># 截取字符串 [0,3]</span></span><br><span class=\"line\"><span class=\"string\">&quot;hell&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GETRANGE key1 0 -1 <span class=\"comment\"># 获取全部的字符串 和 get key是一样的</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello,kuangshen&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 替换！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key2 abcdefg</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key2</span><br><span class=\"line\"><span class=\"string\">&quot;abcdefg&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SETRANGE key2 1 xx <span class=\"comment\"># 替换指定位置开始的字符串！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get key2</span><br><span class=\"line\"><span class=\"string\">&quot;axxdefg&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># setex (set with expire) # 设置过期时间</span></span><br><span class=\"line\"><span class=\"comment\"># setnx (set if not exist) # 不存在在设置 （在分布式锁中会常常使用！）</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setex key3 30 <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\"># 设置key3 的值为 hello,30秒后过期</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 26</span><br><span class=\"line\">127.0.0.1:6379&gt; get key3</span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;redis&quot;</span> <span class=\"comment\"># 如果mykey 不存在，创建mykey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;key2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;mykey&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;key1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;MongoDB&quot;</span> <span class=\"comment\"># 如果mykey存在，创建失败！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get mykey</span><br><span class=\"line\"><span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">mset</span><br><span class=\"line\">mget</span><br><span class=\"line\">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class=\"comment\"># 同时设置多个值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;k1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;k2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;k3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mget k1 k2 k3 <span class=\"comment\"># 同时获取多个值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">bilibili：狂神说Java数据结构是相同的！</span><br><span class=\"line\">String类似的使用场景：value除了是我们的字符串还可以是我们的数字！</span><br><span class=\"line\">计数器</span><br><span class=\"line\">统计多单位的数量</span><br><span class=\"line\">粉丝数</span><br><span class=\"line\">对象缓存存储！</span><br><span class=\"line\">List（列表）</span><br><span class=\"line\">基本的数据类型，列表</span><br><span class=\"line\">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class=\"comment\"># msetnx 是一个原子性的操作，要么一起成功，要么一起</span></span><br><span class=\"line\">失败！</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get k4</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"><span class=\"comment\"># 对象</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class=\"comment\"># 设置一个user:1 对象 值为 json字符来保存一个对象！</span></span><br><span class=\"line\"><span class=\"comment\"># 这里的key是一个巧妙的设计： user:&#123;id&#125;:&#123;filed&#125; , 如此设计在Redis中是完全OK了！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">getset <span class=\"comment\"># 先get然后在set</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getset db redis <span class=\"comment\"># 如果不存在值，则返回 nil</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get db</span><br><span class=\"line\"><span class=\"string\">&quot;redis</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; getset db mongodb # 如果存在值，获取原来的值，并设置新的值</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>redis<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; get db</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>mongodb<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>数据结构是相同的！</p>\n<p>String 类似的使用场景：value 除了是我们的字符串还可以是我们的数字！</p>\n<ul>\n<li>计数器</li>\n<li>统计多单位的数量</li>\n<li>粉丝数</li>\n<li>对象缓存存储！</li>\n</ul>\n<h2 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>\n<p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过 40 亿个元素)。</p>\n<p>基本的数据类型，列表</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502143650.png\" alt=\"image-20210502143650744\"></p>\n<p>在 redis 里面，我们可以把 list 玩成 ，栈、队列、阻塞队列！</p>\n<p>所有的 list 命令都是用 l 开头的，Redis 不区分大小命令</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-blpop.html\">BLPOP key1 [key2] timeout</a> <br />移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-brpop.html\">BRPOP key1 [key2] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-brpoplpush.html\">BRPOPLPUSH source destination timeout</a> <br />从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lindex.html\">LINDEX key index</a> <br />通过索引获取列表中的元素</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-linsert.html\">LINSERT key BEFORE|AFTER pivot value</a> <br />在列表的元素前或者后插入元素</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-llen.html\">LLEN key</a> <br />获取列表长度</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lpop.html\">LPOP key</a> <br />移出并获取列表的第一个元素</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lpush.html\">LPUSH key value1 [value2]</a> <br />将一个或多个值插入到列表头部</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lpushx.html\">LPUSHX key value</a> <br />将一个值插入到已存在的列表头部</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lrange.html\">LRANGE key start stop</a> <br />获取列表指定范围内的元素</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lrem.html\">LREM key count value</a> <br />移除列表元素</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lset.html\">LSET key index value</a> <br />通过索引设置列表元素的值</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-ltrim.html\">LTRIM key start stop</a> <br />对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpop.html\">RPOP key</a> <br />移除列表的最后一个元素，返回值为移除的元素。</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpoplpush.html\">RPOPLPUSH source destination</a> <br />移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpush.html\">RPUSH key value1 [value2]</a> <br />在列表中添加一个或多个值</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpushx.html\">RPUSHX key value</a> <br />为已存在的列表添加值</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list one <span class=\"comment\"># 将一个值或者多个值，插入到列表头部 （左）</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list two</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1 <span class=\"comment\"># 获取list中值！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 1 <span class=\"comment\"># 通过区间获取具体的值！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush list righr <span class=\"comment\"># 将一个值或者多个值，插入到列表位部 （右）</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;righr&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">LPOP</span><br><span class=\"line\">RPOP</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;righr&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Lpop list <span class=\"comment\"># 移除list的第一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Rpop list <span class=\"comment\"># 移除list的最后一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;righr&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">Lindex</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lindex list 1 <span class=\"comment\"># 通过下标获得 list 中的某一个值！</span></span><br><span class=\"line\"><span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lindex list 0</span><br><span class=\"line\"><span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">Llen</span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list one</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list two</span><br><span class=\"line\">bilibili：狂神说Java(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; Llen list <span class=\"comment\"># 返回列表的长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">移除指定的值！</span><br><span class=\"line\">取关 uid</span><br><span class=\"line\">Lrem</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 1 one <span class=\"comment\"># 移除list集合中指定个数的value，精确匹配</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 1 three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 2 three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">trim 修剪。； list 截断!</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello3&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim mylist 1 2 <span class=\"comment\"># 通过下标截取指定的长度，这个list已经被改变了，截断了</span></span><br><span class=\"line\">只剩下截取的元素！</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">rpoplpush <span class=\"comment\"># 移除列表的最后一个元素，将他移动到新的列表中！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpush mylist <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">bilibili：狂神说Java小结</span><br><span class=\"line\">他实际上是一个链表，before Node after ， left，right 都可以插入值</span><br><span class=\"line\">如果key 不存在，创建新的链表</span><br><span class=\"line\">如果key存在，新增内容</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; rpush mylist <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; rpush mylist <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; rpoplpush mylist myotherlist <span class=\"comment\"># 移除列表的最后一个元素，将他移动到新的</span></span><br><span class=\"line\">列表中！</span><br><span class=\"line\"><span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1 <span class=\"comment\"># 查看原来的列表</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange myotherlist 0 -1 <span class=\"comment\"># 查看目标列表中，确实存在改值！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">lset 将列表中指定下标的值替换为另外一个值，更新操作</span><br><span class=\"line\">127.0.0.1:6379&gt; EXISTS list <span class=\"comment\"># 判断这个列表是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 0 item <span class=\"comment\"># 如果不存在列表我们去更新就会报错</span></span><br><span class=\"line\">(error) ERR no such key</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list value1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class=\"line\">1) <span class=\"string\">&quot;value1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 0 item <span class=\"comment\"># 如果存在，更新当前下标的值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class=\"line\">1) <span class=\"string\">&quot;item&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 1 other <span class=\"comment\"># 如果不存在，则会报错！</span></span><br><span class=\"line\">(error) ERR index out of range</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">linsert <span class=\"comment\"># 将某个具体的value插入到列把你中某个元素的前面或者后面！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LINSERT mylist before <span class=\"string\">&quot;world&quot;</span> <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LINSERT mylist after world new</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;new&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小结</p>\n</blockquote>\n<ul>\n<li>它实际上是一个链表，before Node after ，left right 都可以插入值</li>\n<li>如果 key 不存在，创建新的链表</li>\n<li>如果 key 存在，新增内容</li>\n<li>如果移除了所有值，空链表，也代表不存在！</li>\n<li>在两边插入或者改动值，效率最高！中间元素，相对来说效率会低一点~</li>\n<li>消息排队！消息队列（LPUSH RPOP），栈（LPUSH LPOP）</li>\n</ul>\n<h2 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h2><p>set 中的值是不能重复的！</p>\n<p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>\n<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\n<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储 40 多亿个成员)。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sadd.html\">SADD key member1 [member2]</a> <br />向集合添加一个或多个成员</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-scard.html\">SCARD key</a> <br />获取集合的成员数</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sdiff.html\">SDIFF key1 [key2]</a> <br />返回第一个集合与其他集合之间的差异。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sdiffstore.html\">SDIFFSTORE destination key1 [key2]</a> <br />返回给定所有集合的差集并存储在 destination 中</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sinter.html\">SINTER key1 [key2]</a> <br />返回给定所有集合的交集</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sinterstore.html\">SINTERSTORE destination key1 [key2]</a> <br />返回给定所有集合的交集并存储在 destination 中</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sismember.html\">SISMEMBER key member</a> <br />判断 member 元素是否是集合 key 的成员</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-smembers.html\">SMEMBERS key</a> <br />返回集合中的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-smove.html\">SMOVE source destination member</a> <br />将 member 元素从 source 集合移动到 destination 集合</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-spop.html\">SPOP key</a> <br />移除并返回集合中的一个随机元素</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-srandmember.html\">SRANDMEMBER key [count]</a> <br />返回集合中一个或多个随机数</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-srem.html\">SREM key member1 [member2]</a> <br />移除集合中一个或多个成员</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sunion.html\">SUNION key1 [key2]</a><br />返回所有给定集合的并集</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sunionstore.html\">SUNIONSTORE destination key1 [key2]</a> <br />所有给定集合的并集存储在 destination 集合中</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sscan.html\">SSCAN key cursor [MATCH pattern] [COUNT count]</a> <br />迭代集合中的元素</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\"># set集合中添加匀速</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset <span class=\"comment\"># 查看指定set的所有值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER myset hello <span class=\"comment\"># 判断某一个值是不是在set集合中！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER myset world</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; scard myset <span class=\"comment\"># 获取set集合中的内容元素个数！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">rem</span><br><span class=\"line\">127.0.0.1:6379&gt; srem myset hello <span class=\"comment\"># 移除set集合中的指定元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; scard myset</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> 无序不重复集合。抽随机！</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset <span class=\"comment\"># 随机抽选出一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset 2 <span class=\"comment\"># 随机抽选出指定个数的元素</span></span><br><span class=\"line\">bilibili：狂神说Java1) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset <span class=\"comment\"># 随机抽选出一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">删除定的key，随机删除key！</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop myset <span class=\"comment\"># 随机删除一些set集合中的元素！</span></span><br><span class=\"line\"><span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop myset</span><br><span class=\"line\"><span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">将一个指定的值，移动到另外一个<span class=\"built_in\">set</span>集合！</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset2 <span class=\"string\">&quot;set2&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smove myset myset2 <span class=\"string\">&quot;kuangshen&quot;</span> <span class=\"comment\"># 将一个指定的值，移动到另外一个set集</span></span><br><span class=\"line\">合！</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class=\"line\">1) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;set2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">微博，B站，共同关注！(并集)</span><br><span class=\"line\">数字集合类：</span><br><span class=\"line\">- 差集 SDIFF</span><br><span class=\"line\">- 交集</span><br><span class=\"line\">- 并集</span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFF key1 key2 <span class=\"comment\"># 差集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SINTER key1 key2 <span class=\"comment\"># 交集 共同好友就可以这样实现</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SUNION key1 key2 <span class=\"comment\"># 并集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>bilibili：狂神说 Java 微博，A 用户将所有关注的人放在一个 set 集合中！将它的粉丝也放在一个集合中！<br>共同关注，共同爱好，二度好友，推荐好友！（六度分割理论）</p>\n<h2 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h2><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>\n<p>Redis 中每个 hash 可以存储 232 - 1 键值对（40 多亿）。</p>\n<p>Map 集合，key-map! 时候这个值是一个 map 集合！ 本质和 String 类型没有太大区别，还是一个简单的 key-vlaue！</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hdel.html\">HDEL key field1 [field2]</a> <br />删除一个或多个哈希表字段</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hexists.html\">HEXISTS key field</a> <br />查看哈希表 key 中，指定的字段是否存在。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hget.html\">HGET key field</a> <br />获取存储在哈希表中指定字段的值。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hgetall.html\">HGETALL key</a> <br />获取在哈希表中指定 key 的所有字段和值</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hincrby.html\">HINCRBY key field increment</a> <br />为哈希表 key 中的指定字段的整数值加上增量 increment 。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hincrbyfloat.html\">HINCRBYFLOAT key field increment</a> <br />为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hkeys.html\">HKEYS key</a> <br />获取所有哈希表中的字段</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hlen.html\">HLEN key</a> <br />获取哈希表中字段的数量</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hmget.html\">HMGET key field1 [field2]</a> <br />获取所有给定字段的值</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hmset.html\">HMSET key field1 value1 [field2 value2 ]</a> <br />同时将多个 field-value (域-值)对设置到哈希表 key 中。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hset.html\">HSET key field value</a> <br />将哈希表 key 中的字段 field 的值设为 value 。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hsetnx.html\">HSETNX key field value</a> <br />只有在字段 field 不存在时，设置哈希表字段的值。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hvals.html\">HVALS key</a> <br />获取哈希表中所有值。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hscan.html\">HSCAN key cursor [MATCH pattern] [COUNT count]</a> <br />迭代哈希表中的键值对。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hset myhash field1 kuangshen <span class=\"comment\"># set一个具体 key-vlaue</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget myhash field1 <span class=\"comment\"># 获取一个字段值</span></span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world <span class=\"comment\"># set多个 key-vlaue</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget myhash field1 field2 <span class=\"comment\"># 获取多个字段值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall myhash <span class=\"comment\"># 获取全部的数据，</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hdel myhash field1 <span class=\"comment\"># 删除hash指定key字段！对应的value值也就消失了！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall myhash</span><br><span class=\"line\">1) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">hlen</span><br><span class=\"line\">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class=\"line\">1) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hlen myhash <span class=\"comment\"># 获取hash表的字段数量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HEXISTS myhash field1 <span class=\"comment\"># 判断hash中指定字段是否存在！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HEXISTS myhash field3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 只获得所有field</span></span><br><span class=\"line\"><span class=\"comment\"># 只获得所有value</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys myhash <span class=\"comment\"># 只获得所有field</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">bilibili：狂神说Javahash变更的数据 user name age,尤其是是用户信息之类的，经常变动的信息！ <span class=\"built_in\">hash</span> 更适合于对象的</span><br><span class=\"line\">存储，String更加适合字符串存储！</span><br><span class=\"line\">Zset（有序集合）</span><br><span class=\"line\">在<span class=\"built_in\">set</span>的基础上，增加了一个值，<span class=\"built_in\">set</span> k1 v1 zset k1 score1 v1</span><br><span class=\"line\">127.0.0.1:6379&gt; hvals myhash <span class=\"comment\"># 只获得所有value</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">incr decr</span><br><span class=\"line\">127.0.0.1:6379&gt; hset myhash field3 5 <span class=\"comment\">#指定增量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY myhash field3 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY myhash field3 -1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx myhash field4 hello <span class=\"comment\"># 如果不存在则可以设置</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx myhash field4 world <span class=\"comment\"># 如果存在则不能设置</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p>hash 变更的数据 user name age，尤其是是用户信息之类的，经常变动的信息！ hash 更适合于对象的 存储，String 更加适合字符串存储！</p>\n<h2 id=\"Zset（有序集合）\"><a href=\"#Zset（有序集合）\" class=\"headerlink\" title=\"Zset（有序集合）\"></a>Zset（有序集合）</h2><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储 40 多亿个成员)。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zadd.html\">ZADD key score1 member1 [score2 member2]</a> <br />向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zcard.html\">ZCARD key</a> <br />获取有序集合的成员数</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zcount.html\">ZCOUNT key min max</a> <br />计算在有序集合中指定区间分数的成员数</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zincrby.html\">ZINCRBY key increment member</a> <br />有序集合中对指定成员的分数加上增量 increment</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zinterstore.html\">ZINTERSTORE destination numkeys key [key …]</a> <br />计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zlexcount.html\">ZLEXCOUNT key min max</a> <br />在有序集合中计算指定字典区间内成员数量</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrange.html\">ZRANGE key start stop [WITHSCORES]</a> <br />通过索引区间返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrangebylex.html\">ZRANGEBYLEX key min max [LIMIT offset count]</a> <br />通过字典区间返回有序集合的成员</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrangebyscore.html\">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</a> <br />通过分数返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrank.html\">ZRANK key member</a> <br />返回有序集合中指定成员的索引</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrem.html\">ZREM key member [member …]</a> <br />移除有序集合中的一个或多个成员</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebylex.html\">ZREMRANGEBYLEX key min max</a> <br />移除有序集合中给定的字典区间的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html\">ZREMRANGEBYRANK key start stop</a> <br />移除有序集合中给定的排名区间的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html\">ZREMRANGEBYSCORE key min max</a> <br />移除有序集合中给定的分数区间的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrange.html\">ZREVRANGE key start stop [WITHSCORES]</a> <br />返回有序集中指定区间内的成员，通过索引，分数从高到低</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html\">ZREVRANGEBYSCORE key max min [WITHSCORES]</a> <br />返回有序集中指定分数区间内的成员，分数从高到低排序</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrank.html\">ZREVRANK key member</a> <br />返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>\n</tr>\n<tr>\n<td align=\"left\">18</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zscore.html\">ZSCORE key member</a> <br />返回有序集中，成员的分数值</td>\n</tr>\n<tr>\n<td align=\"left\">19</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zunionstore.html\">ZUNIONSTORE destination numkeys key [key …]</a> <br />计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>\n</tr>\n<tr>\n<td align=\"left\">20</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zscan.html\">ZSCAN key cursor [MATCH pattern] [COUNT count]</a> <br />迭代有序集合中的元素（包括元素成员和元素分值）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd myset 1 one <span class=\"comment\"># 添加一个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 2 two 3 three <span class=\"comment\"># 添加多个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">排序如何实现</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 2500 xiaohong <span class=\"comment\"># 添加三个用户</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 5000 zhangsan</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 500 kaungshen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># ZRANGEBYSCORE key min max</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf <span class=\"comment\"># 显示全部的用户 从小到大！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 <span class=\"comment\"># 从大到进行排序！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores <span class=\"comment\"># 显示全部的用户并且附带成</span></span><br><span class=\"line\">绩</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;5000&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 withscores <span class=\"comment\"># 显示工资小于2500员工的升</span></span><br><span class=\"line\">序排序！</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 移除rem中的元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem salary xiaohong <span class=\"comment\"># 移除有序集合中的指定元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zcard salary <span class=\"comment\"># 获取有序集合中的个数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 1 hello</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 2 world 3 kuangshen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount myset 1 3 <span class=\"comment\"># 获取指定区间的成员数量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount myset 1 2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<p>其与的一些 API，通过我们的学习吗，你们剩下的如果工作中有需要，这个时候你可以去查查看官方文 档！</p>\n<p>案例思路：set 排序 存储班级成绩表，工资表排序！</p>\n<p>普通消息，1， 重要消息 2，带权重进行判断！</p>\n<p>排行榜应用实现，取 Top N 测试！</p>\n<h1 id=\"三种特殊数据类型\"><a href=\"#三种特殊数据类型\" class=\"headerlink\" title=\"三种特殊数据类型\"></a>三种特殊数据类型</h1><h2 id=\"Geospatial-地理位置\"><a href=\"#Geospatial-地理位置\" class=\"headerlink\" title=\"Geospatial 地理位置\"></a>Geospatial 地理位置</h2><p>朋友的定位，附近的人，打车距离计算？</p>\n<p>Redis 的 Geo 在 Redis3.2 版本就推出了！ 这个功能可以推算地理位置的信息，两地之间的距离，方圆 几里的人！</p>\n<p>可以查询一些测试数据：<a href=\"http://www.jsons.cn/lngcode/\">城市经纬度查询-国内城市经度纬度在线查询工具 (jsons.cn)</a></p>\n<p>Redis GEO 操作方法有：</p>\n<ul>\n<li>geoadd：添加地理位置的坐标。</li>\n<li>geopos：获取地理位置的坐标。</li>\n<li>geodist：计算两个位置之间的距离。</li>\n<li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li>\n<li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li>\n<li>geohash：返回一个或多个位置对象的 geohash 值。</li>\n</ul>\n<blockquote>\n<p>geoadd</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># getadd 添加地理位置</span></span><br><span class=\"line\"><span class=\"comment\"># 规则：两级无法直接添加，我们一般会下载城市数据，直接通过java程序一次性导入！</span></span><br><span class=\"line\"><span class=\"comment\"># 有效的经度从-180度到180度。</span></span><br><span class=\"line\"><span class=\"comment\"># 有效的纬度从-85.05112878度到85.05112878度。</span></span><br><span class=\"line\"><span class=\"comment\"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span></span><br><span class=\"line\"><span class=\"comment\"># 127.0.0.1:6379&gt; geoadd china:city 39.90 116.40 beijin</span></span><br><span class=\"line\">(error) ERR invalid longitude,latitude pair 39.900000,116.400000</span><br><span class=\"line\"><span class=\"comment\"># 参数 key 值（）</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqi 114.05 22.52 shengzhen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>geopos</p>\n</blockquote>\n<p>获得当前定位：一定是一个坐标值！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEOPOS china:city beijing <span class=\"comment\"># 获取指定的城市的经度和纬度！</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;116.39999896287918091&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;39.90000009167092543&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEOPOS china:city beijing chongqi</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;116.39999896287918091&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;39.90000009167092543&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEODIST</p>\n</blockquote>\n<p>两人之间的距离！</p>\n<p>单位：</p>\n<ul>\n<li>m 表示单位为米</li>\n<li>km 表示单位为千米</li>\n<li>mi 表示单位为英里</li>\n<li>ft 表示单位为英尺</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEODIST china:city beijing shanghai km <span class=\"comment\"># 查看上海到北京的直线距离</span></span><br><span class=\"line\"><span class=\"string\">&quot;1067.3788&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEODIST china:city beijing chongqi km <span class=\"comment\"># 查看重庆到北京的直线距离</span></span><br><span class=\"line\"><span class=\"string\">&quot;1464.0708&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>georadius 以给定的经纬度为中心， 找出某一半径内的元素</p>\n</blockquote>\n<p>我附近的人？ （获得所有附近的人的地址，定位！）通过半径来查询！</p>\n<p>获得指定数量的人，200</p>\n<p>所有数据应该都录入：china:city ，才会让结果更加清晰！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km <span class=\"comment\"># 以110，30 这个经纬度为中心，寻</span></span><br><span class=\"line\">找方圆1000km内的城市</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist <span class=\"comment\"># 显示到中间距离的位置</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;483.8340&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord <span class=\"comment\"># 显示他人的定位信息</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">&quot;108.96000176668167114&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;34.25999964418929977&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 1 <span class=\"comment\">#</span></span><br><span class=\"line\">筛选出指定的结果！</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 2</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;483.8340&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;108.96000176668167114&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;34.25999964418929977&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEORADIUSBYMEMBER</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 找出位于指定元素周围的其他元素！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;beijing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city shanghai 400 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEOHASH 命令 - 返回一个或多个位置元素的 Geohash 表示</p>\n</blockquote>\n<p>该命令将返回 11 个字符的 Geohash 字符串~</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将二维的经纬度转换为一维的字符串，如果两个字符串越接近，那么则距离越近！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geohash china:city beijing chongqi</span><br><span class=\"line\">1) <span class=\"string\">&quot;wx4fbxxfke0&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;wm5xzrybty0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEO 底层的实现原理其实就是 Zset！我们可以使用过 Zset 命令来操作 geo！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZRANGE china:city 0 -1 <span class=\"comment\"># 查看地图中全部的元素</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;shanghai&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;beijing&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem china:city beijing <span class=\"comment\"># 移除指定元素！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE china:city 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hyperloglog\"><a href=\"#Hyperloglog\" class=\"headerlink\" title=\"Hyperloglog\"></a>Hyperloglog</h2><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\n<blockquote>\n<p>什么是基数？</p>\n</blockquote>\n<p>A {1,3,5,7,8,7}</p>\n<p>B{1,3,5,7,8}</p>\n<p>基数（不重复的元素） = 5，可以接受误差！</p>\n<p>优点：占用的内存是固定，2^64 不同的元素的基数，只需要废 12KB 内存！如果要从内存角度来比较的 话 Hyperloglog 首选！</p>\n<p><strong>网页的 UV （一个人访问一个网站多次，但是还是算作一个人！）</strong></p>\n<p>传统的方式， set 保存用户的 id，然后就可以统计 set 中的元素数量作为标准判断 !</p>\n<p>这个方式如果保存大量的用户 id，就会比较麻烦！我们的目的是为了计数，而不是保存用户 id；</p>\n<p>0.81% 错误率！ 统计 UV 任务，可以忽略不计的！</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfadd.html\">PFADD key element [element …]</a> <br />添加指定元素到 HyperLogLog 中。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfcount.html\">PFCOUNT key [key …]</a> <br />返回给定 HyperLogLog 的基数估算值。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfmerge.html\">PFMERGE destkey sourcekey [sourcekey …]</a> <br />将多个 HyperLogLog 合并为一个 HyperLogLog</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>测试使用</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; PFadd mykey a b c d e f g h i j <span class=\"comment\"># 创建第一组元素 mykey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey <span class=\"comment\"># 统计 mykey 元素的基数数量</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; PFadd mykey2 i j z x c v b n m <span class=\"comment\"># 创建第二组元素 mykey2</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2 <span class=\"comment\"># 合并两组 mykey mykey2 =&gt; mykey3 并集</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey3 <span class=\"comment\"># 看并集的数量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 15</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h2><p>为什么其他教程都不喜欢讲这些？这些在生活中或者开发中，都有十分多的应用场景，学习了，就是就 是多一个思路！</p>\n<p>技多不压身！</p>\n<blockquote>\n<p>位储存</p>\n</blockquote>\n<p>统计用户信息，活跃，不活跃！ 登录 、 未登录！ 打卡，365 打卡！ 两个状态的，都可以使用 Bitmaps！</p>\n<p>Bitmap 位图，数据结构！ 都是操作二进制位来进行记录，就只有 0 和 1 两个状态！</p>\n<p>365 天 = 365 bit 1 字节 = 8bit 46 个字节左右！</p>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502234526.png\" alt=\"image-20210502234525977\"></p>\n<p>使用 bitmap 来记录 周一到周日的打卡！</p>\n<p>周一：1 周二：0 周三：0 周四：1 ……</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502234703.png\" alt=\"image-20210502234703108\"></p>\n<p>查看某一天是否有打卡！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; getbit sign 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit sign 6</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p>统计操作，统计 打卡的天数！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bitcount sign <span class=\"comment\"># 统计这周的打卡记录，就可以看到是否有全勤！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><p>Redis 事务本质：一组命令的集合！ 一个事务中的所有命令都会被序列化，在事务执行过程的中，会按 照顺序执行！</p>\n<p>一次性、顺序性、排他性！执行一系列的命令！</p>\n<p><code>------ 队列 set set set 执行------</code></p>\n<p>==Redis 事务没有没有隔离级别的概念！==</p>\n<p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！Exec</p>\n<p>==Redis 单条命令式保存原子性的，但是事务不保证原子性！==</p>\n<p>redis 的事务：</p>\n<ul>\n<li>开启事务（multi）</li>\n<li>命令入队（……）</li>\n<li>执行事务（exec）</li>\n</ul>\n<blockquote>\n<p>正常执行事务！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 开启事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"comment\"># 命令入队</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> <span class=\"comment\"># 执行事务</span></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">4) OK</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>放弃事务</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 开启事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; DISCARD <span class=\"comment\"># 取消事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get k4 <span class=\"comment\"># 事务队列中命令都不会被执行！</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编译型异常（代码有问题！命令有错！），事务中所有的命令都不会执行！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; getset k3 <span class=\"comment\"># 错误的命令</span></span><br><span class=\"line\">(error) ERR wrong number of arguments <span class=\"keyword\">for</span> <span class=\"string\">&#x27;getset&#x27;</span> <span class=\"built_in\">command</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 v5</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> <span class=\"comment\"># 执行事务报错！</span></span><br><span class=\"line\">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class=\"line\">127.0.0.1:6379&gt; get k5 <span class=\"comment\"># 所有的命令都不会被执行！</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>运行时异常（1/0）， 如果事务队列中存在语法性，那么执行命令的时候，其他命令是可以正常执行 的，错误命令抛出异常！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; incr k1 <span class=\"comment\"># 会执行的时候失败！</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (error) ERR value is not an <span class=\"built_in\">integer</span> or out of range <span class=\"comment\"># 虽然第一条命令报错了，但是依旧正常执行成功了！</span></span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) OK</span><br><span class=\"line\">4) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\"><span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\"><span class=\"string\">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>监控！ Watch （面试常问！）</p>\n</blockquote>\n<p>悲观锁：</p>\n<ul>\n<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li>\n</ul>\n<p>乐观锁：</p>\n<ul>\n<li>很乐观，认为什么时候都不会出问题，所以不会上锁！ 更新数据的时候去判断一下，在此期间是否 有人修改过这个数据</li>\n<li>获取 version</li>\n<li>更新的时候比较 version</li>\n</ul>\n<blockquote>\n<p>Redis 监视测试</p>\n</blockquote>\n<p>正常执行成功！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> money 100</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> out 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; watch money <span class=\"comment\"># 监视 money 对象</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功！</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY out 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 80</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 20</span><br></pre></td></tr></table></figure>\n\n<p>测试多线程修改值 , 使用 watch 可以当做 redis 的乐观锁操作！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; watch money <span class=\"comment\"># 监视 money</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY money 10</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY out 10</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> <span class=\"comment\"># 执行之前，另外一个线程，修改了我们的值，这个时候，就会导致事务执行失败！</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<p>如果修改失败，获取最新的值就好</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503001012.png\" alt=\"image-20210503001012808\"></p>\n<h1 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h1><p>我们要使用 Java 来操作 Redis，知其然并知其所以然，授人以渔！ 学习不能急躁，慢慢来会很快！</p>\n<blockquote>\n<p>什么是 Jedis 是 Redis 官方推荐的 java 连接开发工具！ 使用 Java 操作 Redis 中间件！如果你要使用 java 操作 redis，那么一定要对 jedis 十分熟悉！</p>\n</blockquote>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p>1、导入对应的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导入jedis的包--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--fastjson--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.62<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编码测试</p>\n<ul>\n<li>连接数据库</li>\n<li>操作命令</li>\n<li>断开连接！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-05-03 0:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPing</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、 new Jedis 对象即可</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">        jedis.auth(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2、jedis 所有的命令就是我们之前学习的所有指令！所以之前的指令学习很重要！</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(jedis.ping());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503002524.png\" alt=\"image-20210503002523989\"></p>\n<h2 id=\"常用的-API\"><a href=\"#常用的-API\" class=\"headerlink\" title=\"常用的 API\"></a>常用的 API</h2><ul>\n<li>string</li>\n<li>list</li>\n<li>set</li>\n<li>hash</li>\n<li>zset</li>\n<li>geo</li>\n<li>bitmap</li>\n<li>hyperloglog</li>\n</ul>\n<blockquote>\n<p>所有的 api 命令，就是我们对应的上面学习的指令，一个都没有变化！</p>\n</blockquote>\n<blockquote>\n<p>事务</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-05-03 0:31</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestTX</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、 new Jedis 对象即可</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">        jedis.auth(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        jedis.flushDB();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">JSONObject</span> <span class=\"variable\">jsonObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;ouwen&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">        <span class=\"type\">Transaction</span> <span class=\"variable\">multi</span> <span class=\"operator\">=</span> jedis.multi();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> jsonObject.toJSONString();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user1&quot;</span>,result);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user2&quot;</span>,result);</span><br><span class=\"line\">            <span class=\"comment\">//执行事务</span></span><br><span class=\"line\">            multi.exec();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//放弃事务</span></span><br><span class=\"line\">            multi.discard();</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(jedis.get(<span class=\"string\">&quot;user1&quot;</span>));</span><br><span class=\"line\">            System.out.println(jedis.get(<span class=\"string\">&quot;user2&quot;</span>));</span><br><span class=\"line\">            <span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">            jedis.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringBoot-整合\"><a href=\"#SpringBoot-整合\" class=\"headerlink\" title=\"SpringBoot 整合\"></a>SpringBoot 整合</h1><p>SpringBoot 操作数据：spring-data jpa jdbc mongodb redis！</p>\n<p>SpringData 也是和 SpringBoot 齐名的项目！</p>\n<p>说明： 在 SpringBoot2.x 之后，原来使用的 jedis 被替换为了 lettuce?</p>\n<p>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接 池！ 更像 BIO 模式</p>\n<p>lettuce : 采用 netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据 了，更像 NIO 模式</p>\n<p>源码分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span> <span class=\"comment\">// 我们可以自己定义一个</span></span><br><span class=\"line\">redisTemplate来替换这个默认的！</span><br><span class=\"line\"><span class=\"keyword\">public</span> RedisTemplate&lt;Object, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> UnknownHostException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化！</span></span><br><span class=\"line\">    <span class=\"comment\">// 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 &lt;String, Object&gt;</span></span><br><span class=\"line\">    RedisTemplate&lt;Object, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span> <span class=\"comment\">// 由于 String 是redis中最常使用的类型，所以说单独提出来了一个bean！</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> StringRedisTemplate <span class=\"title function_\">stringRedisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class=\"line\">\t<span class=\"keyword\">throws</span> UnknownHostException &#123;</span><br><span class=\"line\">    <span class=\"type\">StringRedisTemplate</span> <span class=\"variable\">template</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisTemplate</span>();</span><br><span class=\"line\">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>整合测试一下</p>\n</blockquote>\n<p>1、导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、配置连接</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>3、测试！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Redis02SpringbootApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// redisTemplate 操作不同的类型，api和我们的指令是一样的</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForValue 操作字符串 类似string</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForList</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForSet</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForZSet</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForHash</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForGeo</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForHyperLogLog</span></span><br><span class=\"line\">        <span class=\"comment\">//redisTemplate.opsForValue();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取redis连接对象</span></span><br><span class=\"line\">        <span class=\"comment\">//RedisConnection conn = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class=\"line\">        <span class=\"comment\">//conn.flushAll();</span></span><br><span class=\"line\">        <span class=\"comment\">//conn.flushDb();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;mykey&quot;</span>,<span class=\"string\">&quot;湖南长沙&quot;</span>);</span><br><span class=\"line\">        System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">&quot;mykey&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503102342.png\" alt=\"image-20210503102342174\"></p>\n<p>我们来编写一个自己的 RedisTemplete</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-05-03 10:24</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！</span></span><br><span class=\"line\">    <span class=\"comment\">// 自己定义了一个 RedisTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory</span></span><br><span class=\"line\"><span class=\"params\">                                                               factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;String,</span><br><span class=\"line\">                Object&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(factory);</span><br><span class=\"line\">        <span class=\"comment\">// Json序列化配置</span></span><br><span class=\"line\">        <span class=\"type\">Jackson2JsonRedisSerializer</span> <span class=\"variable\">jackson2JsonRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                <span class=\"title class_\">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">om</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        <span class=\"comment\">// String 的序列化</span></span><br><span class=\"line\">        <span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">stringRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// key采用String的序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的key也采用String的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的 redis 操作，其实对于 java 开发人员来说，十分的简单，更重要是要去理解 redis 的思想和每一种数 据结构的用处和作用场景！</p>\n<h1 id=\"Redis-conf-详解\"><a href=\"#Redis-conf-详解\" class=\"headerlink\" title=\"Redis.conf 详解\"></a>Redis.conf 详解</h1><p>启动的时候，就通过配置文件来启动！</p>\n<p>工作中，一些小小的配置，可以让你脱颖而出！</p>\n<blockquote>\n<p>单位</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503105120.png\" alt=\"image-20210503105120545\"></p>\n<p>配置文件对大小写不敏感！</p>\n<blockquote>\n<p>包含</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503105216.png\" alt=\"image-20210503105216614\"></p>\n<p>就是好比我们学习 Spring、Improt， include</p>\n<blockquote>\n<p>网络</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1 <span class=\"comment\"># 绑定的ip</span></span><br><span class=\"line\">protected-mode <span class=\"built_in\">yes</span> <span class=\"comment\"># 保护模式</span></span><br><span class=\"line\">port 6379 <span class=\"comment\"># 端口设置</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通用 GENERAL</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize <span class=\"built_in\">yes</span> <span class=\"comment\"># 以守护进程的方式运行，默认是 no，我们需要自己开启为yes！</span></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid <span class=\"comment\"># 如果以后台的方式运行，我们就需要指定一个 pid 文件！</span></span><br><span class=\"line\"><span class=\"comment\"># 日志</span></span><br><span class=\"line\"><span class=\"comment\"># Specify the server verbosity level.</span></span><br><span class=\"line\"><span class=\"comment\"># This can be one of:</span></span><br><span class=\"line\"><span class=\"comment\"># debug (a lot of information, useful for development/testing)</span></span><br><span class=\"line\"><span class=\"comment\"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class=\"line\"><span class=\"comment\"># notice (moderately verbose, what you want in production probably) 生产环境</span></span><br><span class=\"line\"><span class=\"comment\"># warning (only very important / critical messages are logged)</span></span><br><span class=\"line\">loglevel notice</span><br><span class=\"line\">logfile <span class=\"string\">&quot;&quot;</span> <span class=\"comment\"># 日志的文件位置名</span></span><br><span class=\"line\">databases 16 <span class=\"comment\"># 数据库的数量，默认是 16 个数据库</span></span><br><span class=\"line\">always-show-logo <span class=\"built_in\">yes</span> <span class=\"comment\"># 是否总是显示LOGO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>快照</p>\n</blockquote>\n<p>持久化， 在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb. aof</p>\n<p>redis 是内存数据库，如果没有持久化，那么数据断电就会丢失！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作</span></span><br><span class=\"line\">save 900 1</span><br><span class=\"line\"><span class=\"comment\"># 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作</span></span><br><span class=\"line\">save 300 10</span><br><span class=\"line\"><span class=\"comment\"># 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作</span></span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"><span class=\"comment\"># 我们之后学习持久化，会自己定义这个测试！</span></span><br><span class=\"line\">stop-writes-on-bgsave-error <span class=\"built_in\">yes</span> <span class=\"comment\"># 持久化如果出错，是否还需要继续工作！</span></span><br><span class=\"line\">rdbcompression <span class=\"built_in\">yes</span> <span class=\"comment\"># 是否压缩 rdb 文件，需要消耗一些cpu资源！</span></span><br><span class=\"line\">rdbchecksum <span class=\"built_in\">yes</span> <span class=\"comment\"># 保存rdb文件的时候，进行错误的检查校验！</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> ./ <span class=\"comment\"># rdb 文件保存的目录！</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SECURITY 安全</p>\n</blockquote>\n<p>可以设置 redis 密码，默认是没有密码的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass <span class=\"comment\"># 获取redis的密码</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; config <span class=\"built_in\">set</span> requirepass <span class=\"string\">&quot;123456&quot;</span> <span class=\"comment\"># 设置redis的密码</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass <span class=\"comment\"># 发现所有的命令都没有权限了</span></span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6379&gt; auth 123456 <span class=\"comment\"># 使用密码进行登录！</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass</span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>限制 CLIENTS</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxclients 10000 <span class=\"comment\"># 设置能连接上redis的最大客户端的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory &lt;bytes&gt; <span class=\"comment\"># redis 配置最大的内存容量</span></span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory-policy noeviction <span class=\"comment\"># 内存到达上限之后的处理策略</span></span><br><span class=\"line\">    1、volatile-lru：只对设置了过期时间的key进行LRU（默认值）</span><br><span class=\"line\">    2、allkeys-lru ： 删除lru算法的key</span><br><span class=\"line\">    3、volatile-random：随机删除即将过期key</span><br><span class=\"line\">    4、allkeys-random：随机删除</span><br><span class=\"line\">    5、volatile-ttl ： 删除即将过期的</span><br><span class=\"line\">    6、noeviction ： 永不过期，返回错误</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>APPEND ONLY 模式 aof 配置</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly no <span class=\"comment\"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span> <span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always # 每次修改都会 sync。消耗性能</span></span><br><span class=\"line\">appendfsync everysec <span class=\"comment\"># 每秒执行一次 sync，可能会丢失这1s的数据！</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis-持久化\"><a href=\"#Redis-持久化\" class=\"headerlink\" title=\"Redis 持久化\"></a>Redis 持久化</h1><p>面试和工作，持久化都是重点！</p>\n<p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘 ，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p>\n<h2 id=\"RDB（Redis-DataBase）\"><a href=\"#RDB（Redis-DataBase）\" class=\"headerlink\" title=\"RDB（Redis DataBase）\"></a>RDB（Redis DataBase）</h2><blockquote>\n<p>什么是 RDB？</p>\n</blockquote>\n<p>在主从复制中，rdb 就是备用了，放在从机上。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143056.png\" alt=\"image-20210503143056239\"></p>\n<p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的 Snapshot 快照，它恢复时是将快 照文件直接读到内存里。</p>\n<p>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程 都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的。 这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。RDB 的缺点是最后一次持久化后的数据可能丢失。我们默认的就是 RDB，一般情况下不需要修改这个配置！</p>\n<p>==rdb 保存的文件是 dump.rdb== 都是在我们的配置文件中快照中进行配置的！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143817.png\" alt=\"image-20210503143817471\"></p>\n<blockquote>\n<p>触发机制</p>\n</blockquote>\n<p>1、save 的规则满足的情况下，会自动触发 rdb 规则</p>\n<p>2、执行 flushall 命令，也会触发我们的 rdb 规则！</p>\n<p>3、退出 redis，也会产生 rdb 文件！ 备份就自动生成一个 dump.rdb</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143857.png\" alt=\"image-20210503143856958\"></p>\n<blockquote>\n<p>如何恢复 rdb 文件！</p>\n</blockquote>\n<p>1、只需要将 rdb 文件放在我们 redis 启动目录就可以，redis 启动的时候会自动检查 dump.rdb 恢复其中 的数据！</p>\n<p>2、查看需要存在的位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; config get <span class=\"built_in\">dir</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;dir&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;/usr/local/bin&quot;</span> <span class=\"comment\"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、适合大规模的数据恢复！</p>\n<p>2、对数据的完整性要不高！</p>\n<p><strong>缺点：</strong></p>\n<p>1、需要一定的时间间隔进程操作！如果 redis 意外宕机了，这个最后一次修改数据就没有的了！</p>\n<p>2、fork 进程的时候，会占用一定的内容空间！</p>\n<h2 id=\"AOF（Append-Only-File）\"><a href=\"#AOF（Append-Only-File）\" class=\"headerlink\" title=\"AOF（Append Only File）\"></a>AOF（Append Only File）</h2><p>将我们的所有命令都记录下来，history，恢复的时候就把这个文件全部在执行一遍！</p>\n<blockquote>\n<p>是什么？</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144252.png\"></p>\n<p>以日志的形式来记录每个写操作，将 Redis 执行过的所有指令记录下来（读操作不记录），只许追加文件 但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件 的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>\n<p>==AOF 保存的是<code>appendonly.aof</code>文件==</p>\n<blockquote>\n<p>append</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144546.png\" alt=\"image-20210503144546005\"></p>\n<p>默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly 改为 yes 就开启了 aof！ 重启，redis 就可以生效了！</p>\n<p>如果这个 aof 文件有错误，这时候 redis 是启动不起来的，我们需要修复这个 aof 文件</p>\n<p>redis 给我们提供了一个工具 <code>redis-check-aof --fix</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144822.png\" alt=\"image-20210503144822428\"></p>\n<p>如果文件正常，重启就可以直接恢复了！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144919.png\" alt=\"image-20210503144919410\"></p>\n<blockquote>\n<p>重写规则说明</p>\n</blockquote>\n<p>aof 默认就是文件的无限追加，文件会越来越大！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503145247.png\" alt=\"image-20210503145247104\"></p>\n<p>如果 aof 文件大于 64m，太大了！ fork 一个新的进程来将我们的文件进行重写！</p>\n<blockquote>\n<p>优点和缺点！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly no <span class=\"comment\"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span> <span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always # 每次修改都会 sync。消耗性能</span></span><br><span class=\"line\">appendfsync everysec <span class=\"comment\"># 每秒执行一次 sync，可能会丢失这1s的数据！</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、每一次修改都同步，文件的完整会更加好！</p>\n<p>2、每秒同步一次，可能会丢失一秒的数据</p>\n<p>3、从不同步，效率最高的！</p>\n<p><strong>缺点：</strong></p>\n<p>1、相对于数据文件来说，aof 远远大于 rdb，修复的速度也比 rdb 慢！</p>\n<p>2、Aof 运行效率也要比 rdb 慢，所以我们 redis 默认的配置就是 rdb 持久化！</p>\n<p><strong>扩展：</strong></p>\n<p>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p>\n<p>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始 的数据，AOF 命令以 Redis 协议追加保存每次写的操作到文件末尾，Redis 还能对 AOF 文件进行后台重 写，使得 AOF 文件的体积不至于过大。</p>\n<p>3、==只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化==</p>\n<p>4、同时开启两种持久化方式</p>\n<ul>\n<li>在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li>\n<li>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件，那要不要只使用 AOF 呢？作者 建议不要，因为 RDB 更适合用于备份数据库（AOF 在不断变化不好备份），快速重启，而且不会有 AOF 可能潜在的 Bug，留着作为一个万一的手段。</li>\n</ul>\n<p>5、性能建议</p>\n<ul>\n<li>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够 了，只保留 save 900 1 这条规则。</li>\n<li>如果 Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只 load 自 己的 AOF 文件就可以了，代价一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产 生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值 64M 太小了，可以设到 5G 以上，默认超过原大小 100%大小重 写可以改到适当的数值。</li>\n<li>如果不 Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔 IO，也 减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时倒掉，会丢失十几分钟的数据， 启动脚本也要比较两个 Master/Slave 中的 RDB 文件，载入较新的那个，微博就是这种架构。</li>\n</ul>\n<h1 id=\"Redis-发布订阅\"><a href=\"#Redis-发布订阅\" class=\"headerlink\" title=\"Redis 发布订阅\"></a>Redis 发布订阅</h1><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。微信、 微博、关注系统！</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<p>订阅/发布消息图：</p>\n<p>第一个：消息发送者， 第二个：频道 第三个：消息订阅者！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153104.png\" alt=\"image-20210503153104671\"></p>\n<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的 关系：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153133.png\" alt=\"image-20210503153133504\"></p>\n<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153155.png\" alt=\"image-20210503153155660\"></p>\n<blockquote>\n<p>命令</p>\n</blockquote>\n<p>这些命令被广泛用于构建即时通信应用，比如网络聊天室(chatroom)和实时广播、实时提醒等。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-psubscribe.html\">PSUBSCRIBE pattern [pattern …]</a> <br />订阅一个或多个符合给定模式的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">[PUBSUB subcommand <a href=\"https://www.runoob.com/redis/pub-sub-pubsub.html\">argument [argument …]</a> <br />查看订阅与发布系统状态。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-publish.html\">PUBLISH channel message</a> <br />将信息发送到指定的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">[PUNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-punsubscribe.html\">pattern [pattern …]</a> <br />退订所有给定模式的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-subscribe.html\">SUBSCRIBE channel [channel …]</a> <br />订阅给定的一个或多个频道的信息。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">[UNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-unsubscribe.html\">channel [channel …]</a> <br />指退订给定的频道。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p><strong>订阅端：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ouwen owconfig]<span class=\"comment\"># ../</span></span><br><span class=\"line\">-bash: ../: Is a directory</span><br><span class=\"line\">[root@ouwen owconfig]<span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SUBSCRIBE ouwenshuo</span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) <span class=\"string\">&quot;subscribe&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;ouwenshuo&quot;</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;message&quot;</span> <span class=\"comment\">#消息</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;ouwenshuo&quot;</span> <span class=\"comment\">#哪个频道的消息</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello redis&quot;</span> <span class=\"comment\">#消息内容</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>发送端：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; PUBLISH ouwenshuo <span class=\"string\">&quot;hello redis&quot;</span> <span class=\"comment\">#发布者发布消息到频道！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>原理</p>\n</blockquote>\n<p>Redis 是使用 C 实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，借此加深对 Redis 的理解。</p>\n<p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p>\n<p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 频道！， 而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键， 就是将客户端添加到给定 channel 的订阅链表中。</p>\n<p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>\n<p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在 Redis 中，你可以设定对某一个 key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应 的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>\n<p><strong>使用场景：</strong></p>\n<p>1、实时消息系统！</p>\n<p>2、实时聊天！（频道当做聊天室，将信息回显给所有人即可！）</p>\n<p>3、订阅，关注系统都是可以的！ 稍微复杂的场景我们就会使用 消息中间件 MQ （）</p>\n<h1 id=\"Redis-主从复制\"><a href=\"#Redis-主从复制\" class=\"headerlink\" title=\"Redis 主从复制\"></a>Redis 主从复制</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点 (master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。 Master 以写为主，Slave 以读为主。</p>\n<p>默认情况下，每台 Redis 服务器都是主节点；</p>\n<p>且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p>\n<p><strong>主从复制的作用主要包括：</strong></p>\n<p>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p>\n<p>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务 的冗余。</p>\n<p>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 （即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点），分担服务器负载；尤其是在写 少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。</p>\n<p>4、高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</p>\n<p><strong>一般来说，要将 Redis 运用于工程项目中，只使用一台 Redis 是万万不能的（宕机），原因如下：</strong></p>\n<p>1、从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较 大；</p>\n<p>2、从容量上，单个 Redis 服务器内存容量有限，就算一台 Redis 服务器内存容量为 256G，也不能将所有 内存用作 Redis 存储内存，一般来说，单台 Redis 最大使用内存不应该超过 20G。 电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p>\n<p><strong>对于这种场景，我们可以使如下这种架构：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503160753.png\" alt=\"image-20210503160753106\"></p>\n<p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主 二从！</p>\n<p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用 Redis！</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>只配置从库，不用配置主库！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; info replication <span class=\"comment\"># 查看当前库的信息</span></span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master <span class=\"comment\"># 角色 master</span></span><br><span class=\"line\">connected_slaves:0 <span class=\"comment\"># 没有从机</span></span><br><span class=\"line\">master_replid:b63c90e6c501143759cb0e7f450bd1eb0c70882a</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:0</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:0</span><br><span class=\"line\">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>\n\n<p>复制 3 个配置文件，然后修改对应的信息：</p>\n<p>1、端口</p>\n<p>2、pid 名字</p>\n<p>3、log 文件名字</p>\n<p>4、dump.rdb 名字</p>\n<p>修改完毕之后，启动我们的 3 个 redis 服务器，可以通过进程信息查看~</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503162204.png\" alt=\"image-20210503162204439\"></p>\n<h2 id=\"一主二从\"><a href=\"#一主二从\" class=\"headerlink\" title=\"一主二从\"></a>一主二从</h2><p>默认情况下，每台 Redis 服务器都是主节点；==我们一般情况下只用配置从机就好了！</p>\n<p>认老大！ 一主 （79）二从（80，81）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379 <span class=\"comment\">#SLAVEOF host port 找谁当自己的老大 认主机</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:slave <span class=\"comment\">#当前角色是从机</span></span><br><span class=\"line\">master_host:127.0.0.1 <span class=\"comment\">#可以看到主机的信息</span></span><br><span class=\"line\">master_port:6379</span><br><span class=\"line\">master_link_status:up</span><br><span class=\"line\">master_last_io_seconds_ago:2</span><br><span class=\"line\">master_sync_in_progress:0</span><br><span class=\"line\">slave_repl_offset:0</span><br><span class=\"line\">slave_priority:100</span><br><span class=\"line\">slave_read_only:1</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_replid:e3379979becc4e424bf681c1a5fe7672bee18d37</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在主机中查看</span></span><br><span class=\"line\">127.0.0.1:6379&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1 <span class=\"comment\">#多了从机的配置</span></span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6380,state=online,offset=28,lag=0 <span class=\"comment\">#可以查看从机的信息</span></span><br><span class=\"line\">master_replid:e3379979becc4e424bf681c1a5fe7672bee18d37</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:28</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:28</span><br></pre></td></tr></table></figure>\n\n<p>如果两个都配置完了，就是有两个从机的</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503162814.png\" alt=\"image-20210503162814852\"></p>\n<p>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的！</p>\n<blockquote>\n<p>细节</p>\n</blockquote>\n<p>主机可以写，从机不能写只能读！主机中的所有信息和数据，都会自动被从机保存！</p>\n<p>主机写：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503163100.png\" alt=\"image-20210503163059937\"></p>\n<p>从机只能读取内容！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503163113.png\" alt=\"image-20210503163113429\"></p>\n<p>测试：主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！</p>\n<p>如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从 主机中获取值！</p>\n<blockquote>\n<p>复制原理</p>\n</blockquote>\n<p>Slave 启动成功连接到 master 后会发送一个 sync 同步命令</p>\n<p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行 完毕之后，<strong>master 将传送整个数据文件到 slave，并完成一次完全同步。</strong></p>\n<ul>\n<li><p>全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p>\n</li>\n<li><p>增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步</p>\n</li>\n</ul>\n<p><strong>但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中 看到！</strong></p>\n<blockquote>\n<p>层层链路</p>\n</blockquote>\n<p>上一个 M 链接下一个 S！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503174711.png\" alt=\"image-20210503174711032\"></p>\n<p>这时候也可以完成我们的主从复制！</p>\n<blockquote>\n<p>如果没有老大了，这个时候能不能选择一个老大出来呢？ 手动！</p>\n</blockquote>\n<p><strong>谋朝篡位</strong></p>\n<p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code> 让自己变成主机！其他的节点就可以手动连 接到最新的这个主节点（手动）！如果这个时候老大修复了，那就重新连接！</p>\n<h1 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h1><p>（自动选举老大的模式）</p>\n<blockquote>\n<p>概述</p>\n</blockquote>\n<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工 干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑 哨兵模式。Redis 从 2.8 开始正式提供了 Sentinel（哨兵） 架构来解决这个问题。</p>\n<p>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数<strong>自动将从库转换为主库</strong>。</p>\n<p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例。</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503180007.png\" alt=\"image-20210503180007839\"></p>\n<p>这里的哨兵有两个作用</p>\n<ul>\n<li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器。</li>\n<li>当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li>\n</ul>\n<p>然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503180127.png\" alt=\"image-20210503180127096\"></p>\n<p>假设主服务器宕机，哨兵 1 先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵 1 主观的认 为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover[故障转移]操作。 切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为 <strong>客观下线</strong>。</p>\n<blockquote>\n<p>测试！</p>\n</blockquote>\n<p>目前的状态是：一主二从！</p>\n<p>1、配置哨兵配置文件 <code>sentinel.conf</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sentinel monitor 被监控的名称 host port 1</span></span><br><span class=\"line\">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>\n\n<p>后面的这个数字 1，代表主机挂了，slave 投票看让谁接替成为主机，票数最多的，就会成为主机！</p>\n<p>2、启动哨兵</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ouwen bin]<span class=\"comment\"># redis-sentinel owconfig/sentinel.conf</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.144 <span class=\"comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.144 <span class=\"comment\"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=5922, just started</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.144 <span class=\"comment\"># Configuration loaded</span></span><br><span class=\"line\">                _._</span><br><span class=\"line\">           _.-``__ <span class=\"string\">&#x27;&#x27;</span>-._</span><br><span class=\"line\">      _.-``    `.  `_.  <span class=\"string\">&#x27;&#x27;</span>-._           Redis 5.0.8 (00000000/0) 64 bit</span><br><span class=\"line\">  .-`` .-```.  ```\\/    _.,_ <span class=\"string\">&#x27;&#x27;</span>-._</span><br><span class=\"line\"> (    <span class=\"string\">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class=\"line\"><span class=\"string\"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class=\"string\">&#x27;|     Port: 26379</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 5922</span><br><span class=\"line\">  `-._    `-._  `-./  _.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span>_.-<span class=\"string\">&#x27;|</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-&#x27;</span>_.-<span class=\"string\">&#x27;    |           http://redis.io</span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-&#x27;</span>_.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span>_.-<span class=\"string\">&#x27;|</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-&#x27;</span>_.-<span class=\"string\">&#x27;    |</span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-&#x27;</span>_.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\">      `-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\">          `-._        _.-<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">              `-.__.-&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.145 <span class=\"comment\"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.150 <span class=\"comment\"># Sentinel ID is 0ab5ef20110ebfc67bc2a5e93addbe0871ffd748</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.150 <span class=\"comment\"># +monitor master myredis 127.0.0.1 6379 quorum 1</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.151 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.156 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br></pre></td></tr></table></figure>\n\n<p>如果 Master 节点断开了，这个时候就会从从机中随机选择一个服务器！（这里面有一个投票算法！）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503181753.png\" alt=\"image-20210503181752988\"></p>\n<p><strong>哨兵日志：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503181828.png\" alt=\"image-20210503181828520\"></p>\n<p>如果主机此时回来了，==只能归并到新的主机下，当做从机==，这就是哨兵模式的规则！</p>\n<blockquote>\n<p>哨兵模式</p>\n</blockquote>\n<p><strong>优点：</strong></p>\n<p>1、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</p>\n<p>2、主从可以切换，故障可以转移，系统的可用性就会更好</p>\n<p>3、哨兵模式就是主从模式的升级，手动到自动，更加健壮！</p>\n<p><strong>缺点：</strong></p>\n<p>1、Redis 不好做在线扩容的，集群容量一旦达到上限，在线扩容就会十分麻烦！</p>\n<p>2、实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</p>\n<blockquote>\n<p>哨兵模式的全部配置！！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example sentinel.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class=\"line\">port 26379</span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel的工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /tmp</span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel监控的redis主节点的 ip port</span></span><br><span class=\"line\"><span class=\"comment\"># master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class=\"line\"><span class=\"comment\"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class=\"line\"><span class=\"comment\"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class=\"line\"><span class=\"comment\"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class=\"line\">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class=\"line\"><span class=\"comment\"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 30000</span><br><span class=\"line\"><span class=\"comment\"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class=\"line\">sentinel parallel-syncs mymaster 1</span><br><span class=\"line\"><span class=\"comment\"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span></span><br><span class=\"line\"><span class=\"comment\">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class=\"line\"><span class=\"comment\">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那</span></span><br><span class=\"line\">里同步数据时。</span><br><span class=\"line\"><span class=\"comment\">#3.当想要取消一个正在进行的failover所需要的时间。</span></span><br><span class=\"line\"><span class=\"comment\">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，</span></span><br><span class=\"line\">slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><span class=\"line\"><span class=\"comment\"># 默认三分钟</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class=\"line\">sentinel failover-timeout mymaster 180000</span><br><span class=\"line\"><span class=\"comment\"># SCRIPTS EXECUTION</span></span><br><span class=\"line\"><span class=\"comment\">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知</span></span><br><span class=\"line\">相关人员。</span><br><span class=\"line\"><span class=\"comment\">#对于脚本的运行结果有以下规则：</span></span><br><span class=\"line\"><span class=\"comment\">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class=\"line\"><span class=\"comment\">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class=\"line\"><span class=\"comment\">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class=\"line\"><span class=\"comment\">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class=\"line\"><span class=\"comment\">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class=\"line\"><span class=\"comment\">#通知脚本</span></span><br><span class=\"line\"><span class=\"comment\"># shell编程</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class=\"line\">sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class=\"line\"><span class=\"comment\"># 客户端重新配置主节点参数脚本</span></span><br><span class=\"line\"><span class=\"comment\"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class=\"line\"><span class=\"comment\"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;role&gt;是“leader”或者“observer”中的一个。</span></span><br><span class=\"line\"><span class=\"comment\"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class=\"line\"><span class=\"comment\"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class=\"line\">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh <span class=\"comment\"># 一般都是由运维来配置！</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis-缓存穿透和雪崩\"><a href=\"#Redis-缓存穿透和雪崩\" class=\"headerlink\" title=\"Redis 缓存穿透和雪崩\"></a>Redis 缓存穿透和雪崩</h1><blockquote>\n<p>服务的高可用问题！</p>\n</blockquote>\n<p>在这里我们不会详细的区分析解决方案的底层！</p>\n<p>Redis 缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一 些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p>\n<p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183005.png\" alt=\"image-20210503183005078\"></p>\n<h2 id=\"缓存穿透（查不到）\"><a href=\"#缓存穿透（查不到）\" class=\"headerlink\" title=\"缓存穿透（查不到）\"></a>缓存穿透（查不到）</h2><blockquote>\n<p>概念</p>\n</blockquote>\n<p>缓存穿透的概念很简单，用户想要查询一个数据，发现 redis 内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒 杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>布隆过滤器</strong></p>\n<p>布隆过滤器是一种数据结构，对所有可能查询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力；</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183137.png\" alt=\"image-20210503183137788\" style=\"zoom: 50%;\" />\n\n<p><strong>缓存空对象</strong></p>\n<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183210.png\" alt=\"image-20210503183210887\" style=\"zoom:50%;\" />\n\n<p>但是这种方法会存在两个问题：</p>\n<p>1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多 的空值的键；</p>\n<p>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于 需要保持一致性的业务会有影响。</p>\n<h2 id=\"缓存击穿（量太大，缓存过期！）\"><a href=\"#缓存击穿（量太大，缓存过期！）\" class=\"headerlink\" title=\"缓存击穿（量太大，缓存过期！）\"></a>缓存击穿（量太大，缓存过期！）</h2><blockquote>\n<p>概述</p>\n</blockquote>\n<p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一 个屏障上凿开了一个洞。</p>\n<p>当某个 key 在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>设置热点数据永不过期</strong></p>\n<p>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p>\n<p><strong>加互斥锁</strong></p>\n<p>分布式锁：使用分布式锁，保证对于每个 key 同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><blockquote>\n<p>概念</p>\n</blockquote>\n<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机~</p>\n<p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商 品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183725.png\" alt=\"image-20210503183725407\"></p>\n<p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>redis 高可用</strong></p>\n<p>这个思想的含义是，既然 redis 有可能挂掉，那我多增设几台 redis，这样一台挂掉之后其他的还可以继续 工作，其实就是搭建的集群。（异地多活！）</p>\n<p><strong>限流降级</strong></p>\n<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对 某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</p>\n<p><strong>数据预热</strong></p>\n<p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数 据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>\n","more":"<h2 id=\"为什么要用-Nosql\"><a href=\"#为什么要用-Nosql\" class=\"headerlink\" title=\"为什么要用 Nosql\"></a>为什么要用 Nosql</h2><blockquote>\n<p>1、单机 MySQL 的年代！</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420135521.png\"></p>\n<p>90 年代，一个基本的网站访问量一般不会太大，单个数据库完全足够！</p>\n<p>那个时候，更多的去使用静态网页 HTML ==&gt; 服务器根本没有太大的压力！</p>\n<p>思考一下，这种情况下：整个网站的瓶颈是什么？</p>\n<ol>\n<li>数据量如果太大，一个机器放不下了！</li>\n<li>数据的索引（ B + Tree），一个机器内存也放不下</li>\n<li>访问量（读写混合），一个服务器承受不了</li>\n</ol>\n<p>只要你开始出现以上的三种情况之一，那么你就必须晋级！</p>\n<blockquote>\n<p>2、Memcached（缓存）+ MySQL + 垂直拆分（读写分离）</p>\n</blockquote>\n<p>网站 80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！</p>\n<p>发展过程：优化数据结构和索引 –&gt; 文件缓存（IO）–&gt; Memcached（当时最热门的技术！）</p>\n<blockquote>\n<p>3、分库分表 + 水平拆分 + MySQL 集群</p>\n</blockquote>\n<p>技术和业务在发展的同时，对人的要求也越来越高！</p>\n<p>==本质：数据库（读、写）==</p>\n<p>早些年 MyISAM：表锁，十分影响效率！高并发下就会出现严重的锁问题</p>\n<p>转战 Innodb：行锁</p>\n<p>慢慢的就开始使用分库分表来解决写的压力！MySQL 在那个年代就推出了 表分区！这个并没有多少公司使用！</p>\n<p>MySQL 的集群，很好的满足那个年代的需求！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420134715.png\" alt=\"img\"></p>\n<blockquote>\n<p>4、最近的年代</p>\n</blockquote>\n<p>如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql 数据库就能轻松解决这些问题。目前一个基本的互联网项目：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420134812.png\" alt=\"img\"></p>\n<blockquote>\n<p>为什么要用 NoSQL！</p>\n</blockquote>\n<p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！这时候我们就需要使用 NoSQL 数据库的，Nosql 可以很好的处理以上的情况！</p>\n<h2 id=\"什么是-NoSQL\"><a href=\"#什么是-NoSQL\" class=\"headerlink\" title=\"什么是 NoSQL\"></a>什么是 NoSQL</h2><blockquote>\n<p>NoSQL</p>\n</blockquote>\n<p>NoSQL = Not Only SQL（不仅仅是 SQL）</p>\n<p>Not Only Structured Query Language</p>\n<p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p>\n<p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p>\n<p>NoSQL 泛指非关系型数据库，随着 web2.0 互联网的诞生，传统的关系型数据库很难对付 web2.0 时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL 在当今大数据环境下发展的十分迅速，Redis 是发展最快的。</p>\n<blockquote>\n<p>NoSQL 特点</p>\n</blockquote>\n<ol>\n<li>方便扩展（数据之间没有关系，很好扩展！）</li>\n<li>大数据量高性能（Redis 一秒可以写 8 万次，读 11 万次，NoSQL 的缓存记录级，是一种细粒度的缓存，性能会比较高！）</li>\n<li>数据类型是多样型的！（不需要事先设计数据库，随取随用）</li>\n<li>传统的 RDBMS 和 NoSQL</li>\n</ol>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">传统的 RDBMS</span><br><span class=\"line\"><span class=\"bullet\">- </span>结构化组织</span><br><span class=\"line\"><span class=\"bullet\">- </span>SQL</span><br><span class=\"line\"><span class=\"bullet\">- </span>数据和关系都存在单独的表中 row col</span><br><span class=\"line\"><span class=\"bullet\">- </span>操作，数据定义语言</span><br><span class=\"line\"><span class=\"bullet\">- </span>严格的一致性</span><br><span class=\"line\"><span class=\"bullet\">- </span>严格的事务</span><br><span class=\"line\"><span class=\"bullet\">- </span>...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NoSQL</span><br><span class=\"line\"><span class=\"bullet\">- </span>不仅仅是数据</span><br><span class=\"line\"><span class=\"bullet\">- </span>没有固定的查询语言</span><br><span class=\"line\"><span class=\"bullet\">- </span>键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class=\"line\"><span class=\"bullet\">- </span>最终一致性</span><br><span class=\"line\"><span class=\"bullet\">- </span>CAP定理和BASE</span><br><span class=\"line\"><span class=\"bullet\">- </span>高性能，高可用，高可扩</span><br><span class=\"line\"><span class=\"bullet\">- </span>...</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>了解：3V+3 高</p>\n</blockquote>\n<ul>\n<li><p>大数据时代的 3V ：主要是描述问题的</p>\n<ul>\n<li>海量 Velume</li>\n<li>多样 Variety</li>\n<li>实时 Velocity</li>\n</ul>\n</li>\n<li><p>大数据时代的 3 高 ： 主要是对程序的要求</p>\n<ul>\n<li>高并发</li>\n<li>高可扩</li>\n<li>高性能</li>\n</ul>\n</li>\n</ul>\n<p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p>\n<h2 id=\"NoSQL-的四大分类\"><a href=\"#NoSQL-的四大分类\" class=\"headerlink\" title=\"NoSQL 的四大分类\"></a>NoSQL 的四大分类</h2><p><strong>KV 键值对</strong></p>\n<ul>\n<li>新浪：Redis</li>\n<li>美团：Redis + Tair</li>\n<li>阿里、百度：Redis + memecache</li>\n</ul>\n<p><strong>文档型数据库（bson 格式 和 json 一样）</strong></p>\n<ul>\n<li>mongoDB<ul>\n<li>MongoDB 是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档！</li>\n<li>MongoDB 是一个介于关系型数据库和非关系型数据库中间的产品！MongoDB 是非关系型数据库汇总功能最丰富的，最像关系型数据库的！</li>\n</ul>\n</li>\n<li>CouchDB</li>\n</ul>\n<p><strong>列存储数据库</strong></p>\n<ul>\n<li>HBase</li>\n<li>分布式文件系统</li>\n</ul>\n<p><strong>图关系数据库</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210420211847.png\" alt=\"image-20210420211847626\"></p>\n<ul>\n<li>他不是存图形，放的是关系，比如：朋友圈社交网络，广告推荐！</li>\n<li><strong>Neo4j</strong>，infoGrid</li>\n</ul>\n<h1 id=\"Redis-入门\"><a href=\"#Redis-入门\" class=\"headerlink\" title=\"Redis 入门\"></a>Redis 入门</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>Redis 是什么？</p>\n</blockquote>\n<p>Redis（Remote Dictionary Server )，即远程字典服务。</p>\n<p>是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。</p>\n<p>与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave(主从)同步。</p>\n<blockquote>\n<p>Redis 能干嘛？</p>\n</blockquote>\n<ol>\n<li>内存存储、持久化，内存中是断电即失、所以说持久化很重要（RDB、AOF）</li>\n<li>效率高，可以用于高速缓存</li>\n<li>发布订阅系统</li>\n<li>地图信息分析</li>\n<li>计时器、计数器（浏览量！）</li>\n<li>……</li>\n</ol>\n<blockquote>\n<p>特性</p>\n</blockquote>\n<ol>\n<li>多样的数据类型</li>\n<li>持久化</li>\n<li>集群</li>\n<li>事务</li>\n<li>…</li>\n</ol>\n<h2 id=\"环境搭建（省略）\"><a href=\"#环境搭建（省略）\" class=\"headerlink\" title=\"环境搭建（省略）\"></a>环境搭建（省略）</h2><p><a href=\"https://www.runoob.com/redis/redis-install.html\">Redis 安装 | 菜鸟教程 (runoob.com)</a></p>\n<h2 id=\"测试性能\"><a href=\"#测试性能\" class=\"headerlink\" title=\"测试性能\"></a>测试性能</h2><p><strong>redis-benchmark</strong> 是一个压力测试工具！</p>\n<p>官方自带的性能测试工具！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-benchmark [option] [option value]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502131730.png\" alt=\"image-20210502131730085\"></p>\n<p>我们来简单测试一下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试100个并发连接 100000个请求</span></span><br><span class=\"line\">redis-benchmark localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132313.png\" alt=\"image-20210502132313424\"></p>\n<p>如何查看这些分析呢？</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132426.png\" alt=\"image-20210502132426480\"></p>\n<h2 id=\"基础的知识\"><a href=\"#基础的知识\" class=\"headerlink\" title=\"基础的知识\"></a>基础的知识</h2><p><strong>redis 默认有 16 个数据库</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502132621.png\" alt=\"image-20210502132621114\"></p>\n<p>默认使用的是第 0 个</p>\n<p>可以使用<code>select</code>进行切换数据库！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; select 3 <span class=\"comment\">#切换数据库</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; DBSIZE <span class=\"comment\">#查看db大小</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; <span class=\"built_in\">set</span> name ouwen <span class=\"comment\">#设置key-value</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; DBSIZE <span class=\"comment\">#查看db大小</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; get name <span class=\"comment\">#获取value</span></span><br><span class=\"line\"><span class=\"string\">&quot;ouwen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379[3]&gt; keys * <span class=\"comment\">#获取所有key</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;name&quot;</span></span><br><span class=\"line\">127.0.0.1:6379[3]&gt; FLUSHDB <span class=\"comment\">#清除当前数据库</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\">127.0.0.1:6379[3]&gt; FLUSHALL <span class=\"comment\">#清除全部数据库</span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Redis 是单线程的！</p>\n</blockquote>\n<p><strong>Redis 到底有多快？</strong></p>\n<p>Redis 采用的是基于内存的采用的是<strong>单进程单线程</strong>模型的 <strong>KV 数据库</strong>，<strong>由 C 语言编写</strong>，官方提供的数据是可以达到 100000+的 QPS（每秒内查询次数）。这个数据不比采用单进程多线程的同样基于内存的 KV 数据库 Memcached 差！</p>\n<p><strong>Redis 为什么这么快？</strong></p>\n<ol>\n<li>完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O(1)；</li>\n<li>数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</li>\n<li>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</li>\n<li>使用多路 I/O 复用模型，非阻塞 IO；</li>\n<li>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</li>\n</ol>\n<p>以上几点都比较好理解，下边我们针对多路 I/O 复用模型进行简单的探讨：</p>\n<p><strong>多路 I/O 复用模型</strong></p>\n<p>多路 I/O 复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有 I/O 事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll 是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。</p>\n<p><strong>这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。</strong>采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络 IO 的时间消耗），且 Redis 在内存中操作数据的速度非常快，也就是说内存内的操作不会成为影响 Redis 性能的瓶颈，主要由以上几点造就了 Redis 具有很高的吞吐量。</p>\n<p><strong>那么为什么 Redis 是单线程的？</strong></p>\n<p>我们首先要明白，上边的种种分析，都是为了营造一个 Redis 很快的氛围！官方 FAQ 表示，因为 Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章地采用单线程的方案了（毕竟采用多线程会有很多麻烦！）。</p>\n<h1 id=\"五大数据类型\"><a href=\"#五大数据类型\" class=\"headerlink\" title=\"五大数据类型\"></a>五大数据类型</h1><blockquote>\n<p>官方文档</p>\n</blockquote>\n<p>Redis 是一个开源（BSD 许可）的，内存中的数据结构存储系统，它可以用作==数据库、缓存和消息中间 件 MQ==。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合 （sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间 （geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA 脚本（Lua scripting）， LRU 驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis 哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>\n<h2 id=\"Redis-Key\"><a href=\"#Redis-Key\" class=\"headerlink\" title=\"Redis-Key\"></a>Redis-Key</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-del.html\">DEL key</a> <br />该命令用于在 key 存在时删除 key。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-dump.html\">DUMP key</a> <br />序列化给定 key ，并返回被序列化的值。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-exists.html\">EXISTS key</a> <br />检查给定 key 是否存在。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-expire.html\">EXPIRE key seconds</a> <br />为给定 key 设置过期时间，以秒计。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-expireat.html\">EXPIREAT key timestamp</a> <br />EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-pexpire.html\">PEXPIRE key milliseconds</a> <br />设置 key 的过期时间以毫秒计。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-pexpireat.html\">PEXPIREAT key milliseconds-timestamp</a> <br />设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-keys.html\">KEYS pattern</a> <br />查找所有符合给定模式( pattern)的 key 。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-move.html\">MOVE key db</a> <br />将当前数据库的 key 移动到给定的数据库 db 当中。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-persist.html\">PERSIST key</a> <br />移除 key 的过期时间，key 将持久保持。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-pttl.html\">PTTL key</a> <br />以毫秒为单位返回 key 的剩余的过期时间。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-ttl.html\">TTL key</a> <br />以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-randomkey.html\">RANDOMKEY<br /></a> 从当前数据库中随机返回一个 key 。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-rename.html\">RENAME key newkey</a> <br />修改 key 的名称</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-renamenx.html\">RENAMENX key newkey</a> <br />仅当 newkey 不存在时，将 key 改名为 newkey 。</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\">[SCAN cursor <a href=\"https://www.runoob.com/redis/keys-scan.html\">MATCH pattern] [COUNT count]</a> <br />迭代数据库中的数据库键。</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/keys-type.html\">TYPE key</a> <br />返回 key 所储存的值的类型。</td>\n</tr>\n</tbody></table>\n<h2 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-set.html\">SET key value</a> <br />设置指定 key 的值</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-get.html\">GET key</a> <br />获取指定 key 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-getrange.html\">GETRANGE key start end</a> <br />返回 key 中字符串值的子字符</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-getset.html\">GETSET key value</a> <br />将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-getbit.html\">GETBIT key offset</a> <br />对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-mget.html\">MGET key1 [key2..]</a> <br />获取所有(一个或多个)给定 key 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setbit.html\">SETBIT key offset value</a> <br />对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setex.html\">SETEX key seconds value</a> <br />将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setnx.html\">SETNX key value</a> <br />只有在 key 不存在时设置 key 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-setrange.html\">SETRANGE key offset value</a> <br />用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-strlen.html\">STRLEN key</a> <br />返回 key 所储存的字符串值的长度。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-mset.html\">MSET key value [key value …]</a> <br />同时设置一个或多个 key-value 对。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-msetnx.html\">MSETNX key value[key value …]</a> <br />同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-psetex.html\">PSETEX key milliseconds value</a> <br />这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-incr.html\">INCR key</a> <br />将 key 中储存的数字值增一。</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-incrby.html\">INCRBY key increment</a> <br />将 key 所储存的值加上给定的增量值（increment） 。</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-incrbyfloat.html\">INCRBYFLOAT key increment</a> <br />将 key 所储存的值加上给定的浮点增量值（increment） 。</td>\n</tr>\n<tr>\n<td align=\"left\">18</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-decr.html\">DECR key</a> <br />将 key 中储存的数字值减一。</td>\n</tr>\n<tr>\n<td align=\"left\">19</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-decrby.html\">DECRBY key decrement</a> <br />key 所储存的值减去给定的减量值（decrement） 。</td>\n</tr>\n<tr>\n<td align=\"left\">20</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/strings-append.html\">APPEND key value</a> <br />如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 v1 <span class=\"comment\"># 设置值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1 <span class=\"comment\"># 获得值</span></span><br><span class=\"line\"><span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys * <span class=\"comment\"># 获得所有的key</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;key1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; EXISTS key1 <span class=\"comment\"># 判断某一个key是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; APPEND key1 <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\"># 追加字符串，如果当前key不存在，就相当于setkey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;v1hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN key1 <span class=\"comment\"># 获取字符串的长度！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; APPEND key1 <span class=\"string\">&quot;,kaungshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 17</span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN key1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 17</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;v1hello,kaungshen&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># i++</span></span><br><span class=\"line\"><span class=\"comment\"># 步长 i+=</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> views 0 <span class=\"comment\"># 初始浏览量为0</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; incr views <span class=\"comment\"># 自增1 浏览量变为1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; incr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; decr views <span class=\"comment\"># 自减1 浏览量-1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; decr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; decr views</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY views 10 <span class=\"comment\"># 可以设置步长，指定增量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY views 10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 19</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY views 5</span><br><span class=\"line\">bilibili：狂神说Java(<span class=\"built_in\">integer</span>) 14</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 字符串范围 range</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 <span class=\"string\">&quot;hello,kuangshen&quot;</span> <span class=\"comment\"># 设置 key1 的值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;hello,kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GETRANGE key1 0 3 <span class=\"comment\"># 截取字符串 [0,3]</span></span><br><span class=\"line\"><span class=\"string\">&quot;hell&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GETRANGE key1 0 -1 <span class=\"comment\"># 获取全部的字符串 和 get key是一样的</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello,kuangshen&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 替换！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key2 abcdefg</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key2</span><br><span class=\"line\"><span class=\"string\">&quot;abcdefg&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SETRANGE key2 1 xx <span class=\"comment\"># 替换指定位置开始的字符串！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; get key2</span><br><span class=\"line\"><span class=\"string\">&quot;axxdefg&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># setex (set with expire) # 设置过期时间</span></span><br><span class=\"line\"><span class=\"comment\"># setnx (set if not exist) # 不存在在设置 （在分布式锁中会常常使用！）</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setex key3 30 <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\"># 设置key3 的值为 hello,30秒后过期</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 26</span><br><span class=\"line\">127.0.0.1:6379&gt; get key3</span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;redis&quot;</span> <span class=\"comment\"># 如果mykey 不存在，创建mykey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;key2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;mykey&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;key1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ttl key3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br><span class=\"line\">127.0.0.1:6379&gt; setnx mykey <span class=\"string\">&quot;MongoDB&quot;</span> <span class=\"comment\"># 如果mykey存在，创建失败！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get mykey</span><br><span class=\"line\"><span class=\"string\">&quot;redis&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">mset</span><br><span class=\"line\">mget</span><br><span class=\"line\">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class=\"comment\"># 同时设置多个值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;k1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;k2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;k3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mget k1 k2 k3 <span class=\"comment\"># 同时获取多个值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">bilibili：狂神说Java数据结构是相同的！</span><br><span class=\"line\">String类似的使用场景：value除了是我们的字符串还可以是我们的数字！</span><br><span class=\"line\">计数器</span><br><span class=\"line\">统计多单位的数量</span><br><span class=\"line\">粉丝数</span><br><span class=\"line\">对象缓存存储！</span><br><span class=\"line\">List（列表）</span><br><span class=\"line\">基本的数据类型，列表</span><br><span class=\"line\">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4 <span class=\"comment\"># msetnx 是一个原子性的操作，要么一起成功，要么一起</span></span><br><span class=\"line\">失败！</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get k4</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"><span class=\"comment\"># 对象</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class=\"comment\"># 设置一个user:1 对象 值为 json字符来保存一个对象！</span></span><br><span class=\"line\"><span class=\"comment\"># 这里的key是一个巧妙的设计： user:&#123;id&#125;:&#123;filed&#125; , 如此设计在Redis中是完全OK了！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">getset <span class=\"comment\"># 先get然后在set</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getset db redis <span class=\"comment\"># 如果不存在值，则返回 nil</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get db</span><br><span class=\"line\"><span class=\"string\">&quot;redis</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; getset db mongodb # 如果存在值，获取原来的值，并设置新的值</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>redis<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; get db</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>mongodb<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>数据结构是相同的！</p>\n<p>String 类似的使用场景：value 除了是我们的字符串还可以是我们的数字！</p>\n<ul>\n<li>计数器</li>\n<li>统计多单位的数量</li>\n<li>粉丝数</li>\n<li>对象缓存存储！</li>\n</ul>\n<h2 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>\n<p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过 40 亿个元素)。</p>\n<p>基本的数据类型，列表</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502143650.png\" alt=\"image-20210502143650744\"></p>\n<p>在 redis 里面，我们可以把 list 玩成 ，栈、队列、阻塞队列！</p>\n<p>所有的 list 命令都是用 l 开头的，Redis 不区分大小命令</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-blpop.html\">BLPOP key1 [key2] timeout</a> <br />移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-brpop.html\">BRPOP key1 [key2] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-brpoplpush.html\">BRPOPLPUSH source destination timeout</a> <br />从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lindex.html\">LINDEX key index</a> <br />通过索引获取列表中的元素</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-linsert.html\">LINSERT key BEFORE|AFTER pivot value</a> <br />在列表的元素前或者后插入元素</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-llen.html\">LLEN key</a> <br />获取列表长度</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lpop.html\">LPOP key</a> <br />移出并获取列表的第一个元素</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lpush.html\">LPUSH key value1 [value2]</a> <br />将一个或多个值插入到列表头部</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lpushx.html\">LPUSHX key value</a> <br />将一个值插入到已存在的列表头部</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lrange.html\">LRANGE key start stop</a> <br />获取列表指定范围内的元素</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lrem.html\">LREM key count value</a> <br />移除列表元素</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-lset.html\">LSET key index value</a> <br />通过索引设置列表元素的值</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-ltrim.html\">LTRIM key start stop</a> <br />对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpop.html\">RPOP key</a> <br />移除列表的最后一个元素，返回值为移除的元素。</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpoplpush.html\">RPOPLPUSH source destination</a> <br />移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpush.html\">RPUSH key value1 [value2]</a> <br />在列表中添加一个或多个值</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/lists-rpushx.html\">RPUSHX key value</a> <br />为已存在的列表添加值</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list one <span class=\"comment\"># 将一个值或者多个值，插入到列表头部 （左）</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list two</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LPUSH list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1 <span class=\"comment\"># 获取list中值！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 1 <span class=\"comment\"># 通过区间获取具体的值！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush list righr <span class=\"comment\"># 将一个值或者多个值，插入到列表位部 （右）</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;righr&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">LPOP</span><br><span class=\"line\">RPOP</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;righr&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Lpop list <span class=\"comment\"># 移除list的第一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Rpop list <span class=\"comment\"># 移除list的最后一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;righr&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">Lindex</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lindex list 1 <span class=\"comment\"># 通过下标获得 list 中的某一个值！</span></span><br><span class=\"line\"><span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lindex list 0</span><br><span class=\"line\"><span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">Llen</span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list one</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list two</span><br><span class=\"line\">bilibili：狂神说Java(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; Llen list <span class=\"comment\"># 返回列表的长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">移除指定的值！</span><br><span class=\"line\">取关 uid</span><br><span class=\"line\">Lrem</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 1 one <span class=\"comment\"># 移除list集合中指定个数的value，精确匹配</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 1 three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Lpush list three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem list 2 three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">trim 修剪。； list 截断!</span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello3&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim mylist 1 2 <span class=\"comment\"># 通过下标截取指定的长度，这个list已经被改变了，截断了</span></span><br><span class=\"line\">只剩下截取的元素！</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">rpoplpush <span class=\"comment\"># 移除列表的最后一个元素，将他移动到新的列表中！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpush mylist <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">bilibili：狂神说Java小结</span><br><span class=\"line\">他实际上是一个链表，before Node after ， left，right 都可以插入值</span><br><span class=\"line\">如果key 不存在，创建新的链表</span><br><span class=\"line\">如果key存在，新增内容</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; rpush mylist <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; rpush mylist <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; rpoplpush mylist myotherlist <span class=\"comment\"># 移除列表的最后一个元素，将他移动到新的</span></span><br><span class=\"line\">列表中！</span><br><span class=\"line\"><span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange mylist 0 -1 <span class=\"comment\"># 查看原来的列表</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange myotherlist 0 -1 <span class=\"comment\"># 查看目标列表中，确实存在改值！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">lset 将列表中指定下标的值替换为另外一个值，更新操作</span><br><span class=\"line\">127.0.0.1:6379&gt; EXISTS list <span class=\"comment\"># 判断这个列表是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 0 item <span class=\"comment\"># 如果不存在列表我们去更新就会报错</span></span><br><span class=\"line\">(error) ERR no such key</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush list value1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class=\"line\">1) <span class=\"string\">&quot;value1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 0 item <span class=\"comment\"># 如果存在，更新当前下标的值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class=\"line\">1) <span class=\"string\">&quot;item&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset list 1 other <span class=\"comment\"># 如果不存在，则会报错！</span></span><br><span class=\"line\">(error) ERR index out of range</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">linsert <span class=\"comment\"># 将某个具体的value插入到列把你中某个元素的前面或者后面！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; Rpush mylist <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; LINSERT mylist before <span class=\"string\">&quot;world&quot;</span> <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LINSERT mylist after world new</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;new&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小结</p>\n</blockquote>\n<ul>\n<li>它实际上是一个链表，before Node after ，left right 都可以插入值</li>\n<li>如果 key 不存在，创建新的链表</li>\n<li>如果 key 存在，新增内容</li>\n<li>如果移除了所有值，空链表，也代表不存在！</li>\n<li>在两边插入或者改动值，效率最高！中间元素，相对来说效率会低一点~</li>\n<li>消息排队！消息队列（LPUSH RPOP），栈（LPUSH LPOP）</li>\n</ul>\n<h2 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h2><p>set 中的值是不能重复的！</p>\n<p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>\n<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\n<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储 40 多亿个成员)。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sadd.html\">SADD key member1 [member2]</a> <br />向集合添加一个或多个成员</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-scard.html\">SCARD key</a> <br />获取集合的成员数</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sdiff.html\">SDIFF key1 [key2]</a> <br />返回第一个集合与其他集合之间的差异。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sdiffstore.html\">SDIFFSTORE destination key1 [key2]</a> <br />返回给定所有集合的差集并存储在 destination 中</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sinter.html\">SINTER key1 [key2]</a> <br />返回给定所有集合的交集</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sinterstore.html\">SINTERSTORE destination key1 [key2]</a> <br />返回给定所有集合的交集并存储在 destination 中</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sismember.html\">SISMEMBER key member</a> <br />判断 member 元素是否是集合 key 的成员</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-smembers.html\">SMEMBERS key</a> <br />返回集合中的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-smove.html\">SMOVE source destination member</a> <br />将 member 元素从 source 集合移动到 destination 集合</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-spop.html\">SPOP key</a> <br />移除并返回集合中的一个随机元素</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-srandmember.html\">SRANDMEMBER key [count]</a> <br />返回集合中一个或多个随机数</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-srem.html\">SREM key member1 [member2]</a> <br />移除集合中一个或多个成员</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sunion.html\">SUNION key1 [key2]</a><br />返回所有给定集合的并集</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sunionstore.html\">SUNIONSTORE destination key1 [key2]</a> <br />所有给定集合的并集存储在 destination 集合中</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sets-sscan.html\">SSCAN key cursor [MATCH pattern] [COUNT count]</a> <br />迭代集合中的元素</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;hello&quot;</span> <span class=\"comment\"># set集合中添加匀速</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset <span class=\"comment\"># 查看指定set的所有值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER myset hello <span class=\"comment\"># 判断某一个值是不是在set集合中！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SISMEMBER myset world</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; scard myset <span class=\"comment\"># 获取set集合中的内容元素个数！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">rem</span><br><span class=\"line\">127.0.0.1:6379&gt; srem myset hello <span class=\"comment\"># 移除set集合中的指定元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; scard myset</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> 无序不重复集合。抽随机！</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset <span class=\"comment\"># 随机抽选出一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset 2 <span class=\"comment\"># 随机抽选出指定个数的元素</span></span><br><span class=\"line\">bilibili：狂神说Java1) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER myset <span class=\"comment\"># 随机抽选出一个元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">删除定的key，随机删除key！</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop myset <span class=\"comment\"># 随机删除一些set集合中的元素！</span></span><br><span class=\"line\"><span class=\"string\">&quot;lovekuangshen2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop myset</span><br><span class=\"line\"><span class=\"string\">&quot;lovekuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">将一个指定的值，移动到另外一个<span class=\"built_in\">set</span>集合！</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd myset2 <span class=\"string\">&quot;set2&quot;</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smove myset myset2 <span class=\"string\">&quot;kuangshen&quot;</span> <span class=\"comment\"># 将一个指定的值，移动到另外一个set集</span></span><br><span class=\"line\">合！</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class=\"line\">1) <span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;set2&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">微博，B站，共同关注！(并集)</span><br><span class=\"line\">数字集合类：</span><br><span class=\"line\">- 差集 SDIFF</span><br><span class=\"line\">- 交集</span><br><span class=\"line\">- 并集</span><br><span class=\"line\">127.0.0.1:6379&gt; SDIFF key1 key2 <span class=\"comment\"># 差集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SINTER key1 key2 <span class=\"comment\"># 交集 共同好友就可以这样实现</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SUNION key1 key2 <span class=\"comment\"># 并集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>bilibili：狂神说 Java 微博，A 用户将所有关注的人放在一个 set 集合中！将它的粉丝也放在一个集合中！<br>共同关注，共同爱好，二度好友，推荐好友！（六度分割理论）</p>\n<h2 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h2><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>\n<p>Redis 中每个 hash 可以存储 232 - 1 键值对（40 多亿）。</p>\n<p>Map 集合，key-map! 时候这个值是一个 map 集合！ 本质和 String 类型没有太大区别，还是一个简单的 key-vlaue！</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hdel.html\">HDEL key field1 [field2]</a> <br />删除一个或多个哈希表字段</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hexists.html\">HEXISTS key field</a> <br />查看哈希表 key 中，指定的字段是否存在。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hget.html\">HGET key field</a> <br />获取存储在哈希表中指定字段的值。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hgetall.html\">HGETALL key</a> <br />获取在哈希表中指定 key 的所有字段和值</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hincrby.html\">HINCRBY key field increment</a> <br />为哈希表 key 中的指定字段的整数值加上增量 increment 。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hincrbyfloat.html\">HINCRBYFLOAT key field increment</a> <br />为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hkeys.html\">HKEYS key</a> <br />获取所有哈希表中的字段</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hlen.html\">HLEN key</a> <br />获取哈希表中字段的数量</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hmget.html\">HMGET key field1 [field2]</a> <br />获取所有给定字段的值</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hmset.html\">HMSET key field1 value1 [field2 value2 ]</a> <br />同时将多个 field-value (域-值)对设置到哈希表 key 中。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hset.html\">HSET key field value</a> <br />将哈希表 key 中的字段 field 的值设为 value 。</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hsetnx.html\">HSETNX key field value</a> <br />只有在字段 field 不存在时，设置哈希表字段的值。</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hvals.html\">HVALS key</a> <br />获取哈希表中所有值。</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hashes-hscan.html\">HSCAN key cursor [MATCH pattern] [COUNT count]</a> <br />迭代哈希表中的键值对。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hset myhash field1 kuangshen <span class=\"comment\"># set一个具体 key-vlaue</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget myhash field1 <span class=\"comment\"># 获取一个字段值</span></span><br><span class=\"line\"><span class=\"string\">&quot;kuangshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world <span class=\"comment\"># set多个 key-vlaue</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget myhash field1 field2 <span class=\"comment\"># 获取多个字段值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall myhash <span class=\"comment\"># 获取全部的数据，</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hdel myhash field1 <span class=\"comment\"># 删除hash指定key字段！对应的value值也就消失了！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall myhash</span><br><span class=\"line\">1) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">hlen</span><br><span class=\"line\">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class=\"line\">1) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hlen myhash <span class=\"comment\"># 获取hash表的字段数量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HEXISTS myhash field1 <span class=\"comment\"># 判断hash中指定字段是否存在！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HEXISTS myhash field3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 只获得所有field</span></span><br><span class=\"line\"><span class=\"comment\"># 只获得所有value</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys myhash <span class=\"comment\"># 只获得所有field</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;field2&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;field1&quot;</span></span><br><span class=\"line\">bilibili：狂神说Javahash变更的数据 user name age,尤其是是用户信息之类的，经常变动的信息！ <span class=\"built_in\">hash</span> 更适合于对象的</span><br><span class=\"line\">存储，String更加适合字符串存储！</span><br><span class=\"line\">Zset（有序集合）</span><br><span class=\"line\">在<span class=\"built_in\">set</span>的基础上，增加了一个值，<span class=\"built_in\">set</span> k1 v1 zset k1 score1 v1</span><br><span class=\"line\">127.0.0.1:6379&gt; hvals myhash <span class=\"comment\"># 只获得所有value</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">incr decr</span><br><span class=\"line\">127.0.0.1:6379&gt; hset myhash field3 5 <span class=\"comment\">#指定增量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY myhash field3 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; HINCRBY myhash field3 -1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx myhash field4 hello <span class=\"comment\"># 如果不存在则可以设置</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx myhash field4 world <span class=\"comment\"># 如果存在则不能设置</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p>hash 变更的数据 user name age，尤其是是用户信息之类的，经常变动的信息！ hash 更适合于对象的 存储，String 更加适合字符串存储！</p>\n<h2 id=\"Zset（有序集合）\"><a href=\"#Zset（有序集合）\" class=\"headerlink\" title=\"Zset（有序集合）\"></a>Zset（有序集合）</h2><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储 40 多亿个成员)。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zadd.html\">ZADD key score1 member1 [score2 member2]</a> <br />向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zcard.html\">ZCARD key</a> <br />获取有序集合的成员数</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zcount.html\">ZCOUNT key min max</a> <br />计算在有序集合中指定区间分数的成员数</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zincrby.html\">ZINCRBY key increment member</a> <br />有序集合中对指定成员的分数加上增量 increment</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zinterstore.html\">ZINTERSTORE destination numkeys key [key …]</a> <br />计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zlexcount.html\">ZLEXCOUNT key min max</a> <br />在有序集合中计算指定字典区间内成员数量</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrange.html\">ZRANGE key start stop [WITHSCORES]</a> <br />通过索引区间返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrangebylex.html\">ZRANGEBYLEX key min max [LIMIT offset count]</a> <br />通过字典区间返回有序集合的成员</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrangebyscore.html\">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</a> <br />通过分数返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrank.html\">ZRANK key member</a> <br />返回有序集合中指定成员的索引</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrem.html\">ZREM key member [member …]</a> <br />移除有序集合中的一个或多个成员</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebylex.html\">ZREMRANGEBYLEX key min max</a> <br />移除有序集合中给定的字典区间的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html\">ZREMRANGEBYRANK key start stop</a> <br />移除有序集合中给定的排名区间的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html\">ZREMRANGEBYSCORE key min max</a> <br />移除有序集合中给定的分数区间的所有成员</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrange.html\">ZREVRANGE key start stop [WITHSCORES]</a> <br />返回有序集中指定区间内的成员，通过索引，分数从高到低</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html\">ZREVRANGEBYSCORE key max min [WITHSCORES]</a> <br />返回有序集中指定分数区间内的成员，分数从高到低排序</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zrevrank.html\">ZREVRANK key member</a> <br />返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td>\n</tr>\n<tr>\n<td align=\"left\">18</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zscore.html\">ZSCORE key member</a> <br />返回有序集中，成员的分数值</td>\n</tr>\n<tr>\n<td align=\"left\">19</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zunionstore.html\">ZUNIONSTORE destination numkeys key [key …]</a> <br />计算给定的一个或多个有序集的并集，并存储在新的 key 中</td>\n</tr>\n<tr>\n<td align=\"left\">20</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/sorted-sets-zscan.html\">ZSCAN key cursor [MATCH pattern] [COUNT count]</a> <br />迭代有序集合中的元素（包括元素成员和元素分值）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd myset 1 one <span class=\"comment\"># 添加一个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 2 two 3 three <span class=\"comment\"># 添加多个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">排序如何实现</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 2500 xiaohong <span class=\"comment\"># 添加三个用户</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 5000 zhangsan</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 500 kaungshen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"comment\"># ZRANGEBYSCORE key min max</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf <span class=\"comment\"># 显示全部的用户 从小到大！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 <span class=\"comment\"># 从大到进行排序！</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores <span class=\"comment\"># 显示全部的用户并且附带成</span></span><br><span class=\"line\">绩</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;5000&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 withscores <span class=\"comment\"># 显示工资小于2500员工的升</span></span><br><span class=\"line\">序排序！</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># 移除rem中的元素</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xiaohong&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem salary xiaohong <span class=\"comment\"># 移除有序集合中的指定元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;kaungshen&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zcard salary <span class=\"comment\"># 获取有序集合中的个数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"><span class=\"comment\">##########################################################################</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 1 hello</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd myset 2 world 3 kuangshen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount myset 1 3 <span class=\"comment\"># 获取指定区间的成员数量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount myset 1 2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<p>其与的一些 API，通过我们的学习吗，你们剩下的如果工作中有需要，这个时候你可以去查查看官方文 档！</p>\n<p>案例思路：set 排序 存储班级成绩表，工资表排序！</p>\n<p>普通消息，1， 重要消息 2，带权重进行判断！</p>\n<p>排行榜应用实现，取 Top N 测试！</p>\n<h1 id=\"三种特殊数据类型\"><a href=\"#三种特殊数据类型\" class=\"headerlink\" title=\"三种特殊数据类型\"></a>三种特殊数据类型</h1><h2 id=\"Geospatial-地理位置\"><a href=\"#Geospatial-地理位置\" class=\"headerlink\" title=\"Geospatial 地理位置\"></a>Geospatial 地理位置</h2><p>朋友的定位，附近的人，打车距离计算？</p>\n<p>Redis 的 Geo 在 Redis3.2 版本就推出了！ 这个功能可以推算地理位置的信息，两地之间的距离，方圆 几里的人！</p>\n<p>可以查询一些测试数据：<a href=\"http://www.jsons.cn/lngcode/\">城市经纬度查询-国内城市经度纬度在线查询工具 (jsons.cn)</a></p>\n<p>Redis GEO 操作方法有：</p>\n<ul>\n<li>geoadd：添加地理位置的坐标。</li>\n<li>geopos：获取地理位置的坐标。</li>\n<li>geodist：计算两个位置之间的距离。</li>\n<li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li>\n<li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li>\n<li>geohash：返回一个或多个位置对象的 geohash 值。</li>\n</ul>\n<blockquote>\n<p>geoadd</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># getadd 添加地理位置</span></span><br><span class=\"line\"><span class=\"comment\"># 规则：两级无法直接添加，我们一般会下载城市数据，直接通过java程序一次性导入！</span></span><br><span class=\"line\"><span class=\"comment\"># 有效的经度从-180度到180度。</span></span><br><span class=\"line\"><span class=\"comment\"># 有效的纬度从-85.05112878度到85.05112878度。</span></span><br><span class=\"line\"><span class=\"comment\"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span></span><br><span class=\"line\"><span class=\"comment\"># 127.0.0.1:6379&gt; geoadd china:city 39.90 116.40 beijin</span></span><br><span class=\"line\">(error) ERR invalid longitude,latitude pair 39.900000,116.400000</span><br><span class=\"line\"><span class=\"comment\"># 参数 key 值（）</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqi 114.05 22.52 shengzhen</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>geopos</p>\n</blockquote>\n<p>获得当前定位：一定是一个坐标值！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEOPOS china:city beijing <span class=\"comment\"># 获取指定的城市的经度和纬度！</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;116.39999896287918091&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;39.90000009167092543&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEOPOS china:city beijing chongqi</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;116.39999896287918091&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;39.90000009167092543&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEODIST</p>\n</blockquote>\n<p>两人之间的距离！</p>\n<p>单位：</p>\n<ul>\n<li>m 表示单位为米</li>\n<li>km 表示单位为千米</li>\n<li>mi 表示单位为英里</li>\n<li>ft 表示单位为英尺</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEODIST china:city beijing shanghai km <span class=\"comment\"># 查看上海到北京的直线距离</span></span><br><span class=\"line\"><span class=\"string\">&quot;1067.3788&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEODIST china:city beijing chongqi km <span class=\"comment\"># 查看重庆到北京的直线距离</span></span><br><span class=\"line\"><span class=\"string\">&quot;1464.0708&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>georadius 以给定的经纬度为中心， 找出某一半径内的元素</p>\n</blockquote>\n<p>我附近的人？ （获得所有附近的人的地址，定位！）通过半径来查询！</p>\n<p>获得指定数量的人，200</p>\n<p>所有数据应该都录入：china:city ，才会让结果更加清晰！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km <span class=\"comment\"># 以110，30 这个经纬度为中心，寻</span></span><br><span class=\"line\">找方圆1000km内的城市</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist <span class=\"comment\"># 显示到中间距离的位置</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;483.8340&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord <span class=\"comment\"># 显示他人的定位信息</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">&quot;108.96000176668167114&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;34.25999964418929977&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 1 <span class=\"comment\">#</span></span><br><span class=\"line\">筛选出指定的结果！</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 2</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;483.8340&quot;</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">&quot;108.96000176668167114&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;34.25999964418929977&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEORADIUSBYMEMBER</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 找出位于指定元素周围的其他元素！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;beijing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city shanghai 400 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEOHASH 命令 - 返回一个或多个位置元素的 Geohash 表示</p>\n</blockquote>\n<p>该命令将返回 11 个字符的 Geohash 字符串~</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将二维的经纬度转换为一维的字符串，如果两个字符串越接近，那么则距离越近！</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geohash china:city beijing chongqi</span><br><span class=\"line\">1) <span class=\"string\">&quot;wx4fbxxfke0&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;wm5xzrybty0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>GEO 底层的实现原理其实就是 Zset！我们可以使用过 Zset 命令来操作 geo！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZRANGE china:city 0 -1 <span class=\"comment\"># 查看地图中全部的元素</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;shanghai&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;beijing&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem china:city beijing <span class=\"comment\"># 移除指定元素！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE china:city 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;chongqi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;xian&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;hangzhou&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hyperloglog\"><a href=\"#Hyperloglog\" class=\"headerlink\" title=\"Hyperloglog\"></a>Hyperloglog</h2><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\n<blockquote>\n<p>什么是基数？</p>\n</blockquote>\n<p>A {1,3,5,7,8,7}</p>\n<p>B{1,3,5,7,8}</p>\n<p>基数（不重复的元素） = 5，可以接受误差！</p>\n<p>优点：占用的内存是固定，2^64 不同的元素的基数，只需要废 12KB 内存！如果要从内存角度来比较的 话 Hyperloglog 首选！</p>\n<p><strong>网页的 UV （一个人访问一个网站多次，但是还是算作一个人！）</strong></p>\n<p>传统的方式， set 保存用户的 id，然后就可以统计 set 中的元素数量作为标准判断 !</p>\n<p>这个方式如果保存大量的用户 id，就会比较麻烦！我们的目的是为了计数，而不是保存用户 id；</p>\n<p>0.81% 错误率！ 统计 UV 任务，可以忽略不计的！</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfadd.html\">PFADD key element [element …]</a> <br />添加指定元素到 HyperLogLog 中。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfcount.html\">PFCOUNT key [key …]</a> <br />返回给定 HyperLogLog 的基数估算值。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/hyperloglog-pfmerge.html\">PFMERGE destkey sourcekey [sourcekey …]</a> <br />将多个 HyperLogLog 合并为一个 HyperLogLog</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>测试使用</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; PFadd mykey a b c d e f g h i j <span class=\"comment\"># 创建第一组元素 mykey</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey <span class=\"comment\"># 统计 mykey 元素的基数数量</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; PFadd mykey2 i j z x c v b n m <span class=\"comment\"># 创建第二组元素 mykey2</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2 <span class=\"comment\"># 合并两组 mykey mykey2 =&gt; mykey3 并集</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT mykey3 <span class=\"comment\"># 看并集的数量！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 15</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h2><p>为什么其他教程都不喜欢讲这些？这些在生活中或者开发中，都有十分多的应用场景，学习了，就是就 是多一个思路！</p>\n<p>技多不压身！</p>\n<blockquote>\n<p>位储存</p>\n</blockquote>\n<p>统计用户信息，活跃，不活跃！ 登录 、 未登录！ 打卡，365 打卡！ 两个状态的，都可以使用 Bitmaps！</p>\n<p>Bitmap 位图，数据结构！ 都是操作二进制位来进行记录，就只有 0 和 1 两个状态！</p>\n<p>365 天 = 365 bit 1 字节 = 8bit 46 个字节左右！</p>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502234526.png\" alt=\"image-20210502234525977\"></p>\n<p>使用 bitmap 来记录 周一到周日的打卡！</p>\n<p>周一：1 周二：0 周三：0 周四：1 ……</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210502234703.png\" alt=\"image-20210502234703108\"></p>\n<p>查看某一天是否有打卡！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; getbit sign 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit sign 6</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p>统计操作，统计 打卡的天数！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bitcount sign <span class=\"comment\"># 统计这周的打卡记录，就可以看到是否有全勤！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><p>Redis 事务本质：一组命令的集合！ 一个事务中的所有命令都会被序列化，在事务执行过程的中，会按 照顺序执行！</p>\n<p>一次性、顺序性、排他性！执行一系列的命令！</p>\n<p><code>------ 队列 set set set 执行------</code></p>\n<p>==Redis 事务没有没有隔离级别的概念！==</p>\n<p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！Exec</p>\n<p>==Redis 单条命令式保存原子性的，但是事务不保证原子性！==</p>\n<p>redis 的事务：</p>\n<ul>\n<li>开启事务（multi）</li>\n<li>命令入队（……）</li>\n<li>执行事务（exec）</li>\n</ul>\n<blockquote>\n<p>正常执行事务！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 开启事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"comment\"># 命令入队</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> <span class=\"comment\"># 执行事务</span></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">4) OK</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>放弃事务</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 开启事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; DISCARD <span class=\"comment\"># 取消事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get k4 <span class=\"comment\"># 事务队列中命令都不会被执行！</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>编译型异常（代码有问题！命令有错！），事务中所有的命令都不会执行！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; getset k3 <span class=\"comment\"># 错误的命令</span></span><br><span class=\"line\">(error) ERR wrong number of arguments <span class=\"keyword\">for</span> <span class=\"string\">&#x27;getset&#x27;</span> <span class=\"built_in\">command</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 v5</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> <span class=\"comment\"># 执行事务报错！</span></span><br><span class=\"line\">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class=\"line\">127.0.0.1:6379&gt; get k5 <span class=\"comment\"># 所有的命令都不会被执行！</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>运行时异常（1/0）， 如果事务队列中存在语法性，那么执行命令的时候，其他命令是可以正常执行 的，错误命令抛出异常！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; incr k1 <span class=\"comment\"># 会执行的时候失败！</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (error) ERR value is not an <span class=\"built_in\">integer</span> or out of range <span class=\"comment\"># 虽然第一条命令报错了，但是依旧正常执行成功了！</span></span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) OK</span><br><span class=\"line\">4) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\"><span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\"><span class=\"string\">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>监控！ Watch （面试常问！）</p>\n</blockquote>\n<p>悲观锁：</p>\n<ul>\n<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li>\n</ul>\n<p>乐观锁：</p>\n<ul>\n<li>很乐观，认为什么时候都不会出问题，所以不会上锁！ 更新数据的时候去判断一下，在此期间是否 有人修改过这个数据</li>\n<li>获取 version</li>\n<li>更新的时候比较 version</li>\n</ul>\n<blockquote>\n<p>Redis 监视测试</p>\n</blockquote>\n<p>正常执行成功！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> money 100</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> out 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; watch money <span class=\"comment\"># 监视 money 对象</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi <span class=\"comment\"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功！</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY out 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 80</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 20</span><br></pre></td></tr></table></figure>\n\n<p>测试多线程修改值 , 使用 watch 可以当做 redis 的乐观锁操作！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; watch money <span class=\"comment\"># 监视 money</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; DECRBY money 10</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY out 10</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> <span class=\"comment\"># 执行之前，另外一个线程，修改了我们的值，这个时候，就会导致事务执行失败！</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<p>如果修改失败，获取最新的值就好</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503001012.png\" alt=\"image-20210503001012808\"></p>\n<h1 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h1><p>我们要使用 Java 来操作 Redis，知其然并知其所以然，授人以渔！ 学习不能急躁，慢慢来会很快！</p>\n<blockquote>\n<p>什么是 Jedis 是 Redis 官方推荐的 java 连接开发工具！ 使用 Java 操作 Redis 中间件！如果你要使用 java 操作 redis，那么一定要对 jedis 十分熟悉！</p>\n</blockquote>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p>1、导入对应的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导入jedis的包--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--fastjson--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.62<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、编码测试</p>\n<ul>\n<li>连接数据库</li>\n<li>操作命令</li>\n<li>断开连接！</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-05-03 0:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPing</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、 new Jedis 对象即可</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">        jedis.auth(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2、jedis 所有的命令就是我们之前学习的所有指令！所以之前的指令学习很重要！</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(jedis.ping());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503002524.png\" alt=\"image-20210503002523989\"></p>\n<h2 id=\"常用的-API\"><a href=\"#常用的-API\" class=\"headerlink\" title=\"常用的 API\"></a>常用的 API</h2><ul>\n<li>string</li>\n<li>list</li>\n<li>set</li>\n<li>hash</li>\n<li>zset</li>\n<li>geo</li>\n<li>bitmap</li>\n<li>hyperloglog</li>\n</ul>\n<blockquote>\n<p>所有的 api 命令，就是我们对应的上面学习的指令，一个都没有变化！</p>\n</blockquote>\n<blockquote>\n<p>事务</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-05-03 0:31</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestTX</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、 new Jedis 对象即可</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">6379</span>);</span><br><span class=\"line\">        jedis.auth(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        jedis.flushDB();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">JSONObject</span> <span class=\"variable\">jsonObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;ouwen&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">        <span class=\"type\">Transaction</span> <span class=\"variable\">multi</span> <span class=\"operator\">=</span> jedis.multi();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> jsonObject.toJSONString();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user1&quot;</span>,result);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user2&quot;</span>,result);</span><br><span class=\"line\">            <span class=\"comment\">//执行事务</span></span><br><span class=\"line\">            multi.exec();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//放弃事务</span></span><br><span class=\"line\">            multi.discard();</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(jedis.get(<span class=\"string\">&quot;user1&quot;</span>));</span><br><span class=\"line\">            System.out.println(jedis.get(<span class=\"string\">&quot;user2&quot;</span>));</span><br><span class=\"line\">            <span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">            jedis.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringBoot-整合\"><a href=\"#SpringBoot-整合\" class=\"headerlink\" title=\"SpringBoot 整合\"></a>SpringBoot 整合</h1><p>SpringBoot 操作数据：spring-data jpa jdbc mongodb redis！</p>\n<p>SpringData 也是和 SpringBoot 齐名的项目！</p>\n<p>说明： 在 SpringBoot2.x 之后，原来使用的 jedis 被替换为了 lettuce?</p>\n<p>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接 池！ 更像 BIO 模式</p>\n<p>lettuce : 采用 netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据 了，更像 NIO 模式</p>\n<p>源码分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span> <span class=\"comment\">// 我们可以自己定义一个</span></span><br><span class=\"line\">redisTemplate来替换这个默认的！</span><br><span class=\"line\"><span class=\"keyword\">public</span> RedisTemplate&lt;Object, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> UnknownHostException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化！</span></span><br><span class=\"line\">    <span class=\"comment\">// 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 &lt;String, Object&gt;</span></span><br><span class=\"line\">    RedisTemplate&lt;Object, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span> <span class=\"comment\">// 由于 String 是redis中最常使用的类型，所以说单独提出来了一个bean！</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> StringRedisTemplate <span class=\"title function_\">stringRedisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span></span><br><span class=\"line\">\t<span class=\"keyword\">throws</span> UnknownHostException &#123;</span><br><span class=\"line\">    <span class=\"type\">StringRedisTemplate</span> <span class=\"variable\">template</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisTemplate</span>();</span><br><span class=\"line\">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>整合测试一下</p>\n</blockquote>\n<p>1、导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、配置连接</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>3、测试！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Redis02SpringbootApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// redisTemplate 操作不同的类型，api和我们的指令是一样的</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForValue 操作字符串 类似string</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForList</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForSet</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForZSet</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForHash</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForGeo</span></span><br><span class=\"line\">        <span class=\"comment\">// opsForHyperLogLog</span></span><br><span class=\"line\">        <span class=\"comment\">//redisTemplate.opsForValue();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取redis连接对象</span></span><br><span class=\"line\">        <span class=\"comment\">//RedisConnection conn = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class=\"line\">        <span class=\"comment\">//conn.flushAll();</span></span><br><span class=\"line\">        <span class=\"comment\">//conn.flushDb();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;mykey&quot;</span>,<span class=\"string\">&quot;湖南长沙&quot;</span>);</span><br><span class=\"line\">        System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">&quot;mykey&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503102342.png\" alt=\"image-20210503102342174\"></p>\n<p>我们来编写一个自己的 RedisTemplete</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.luojunjie.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-05-03 10:24</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用！</span></span><br><span class=\"line\">    <span class=\"comment\">// 自己定义了一个 RedisTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory</span></span><br><span class=\"line\"><span class=\"params\">                                                               factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;String,</span><br><span class=\"line\">                Object&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(factory);</span><br><span class=\"line\">        <span class=\"comment\">// Json序列化配置</span></span><br><span class=\"line\">        <span class=\"type\">Jackson2JsonRedisSerializer</span> <span class=\"variable\">jackson2JsonRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                <span class=\"title class_\">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">om</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        <span class=\"comment\">// String 的序列化</span></span><br><span class=\"line\">        <span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">stringRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// key采用String的序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的key也采用String的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所有的 redis 操作，其实对于 java 开发人员来说，十分的简单，更重要是要去理解 redis 的思想和每一种数 据结构的用处和作用场景！</p>\n<h1 id=\"Redis-conf-详解\"><a href=\"#Redis-conf-详解\" class=\"headerlink\" title=\"Redis.conf 详解\"></a>Redis.conf 详解</h1><p>启动的时候，就通过配置文件来启动！</p>\n<p>工作中，一些小小的配置，可以让你脱颖而出！</p>\n<blockquote>\n<p>单位</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503105120.png\" alt=\"image-20210503105120545\"></p>\n<p>配置文件对大小写不敏感！</p>\n<blockquote>\n<p>包含</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503105216.png\" alt=\"image-20210503105216614\"></p>\n<p>就是好比我们学习 Spring、Improt， include</p>\n<blockquote>\n<p>网络</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1 <span class=\"comment\"># 绑定的ip</span></span><br><span class=\"line\">protected-mode <span class=\"built_in\">yes</span> <span class=\"comment\"># 保护模式</span></span><br><span class=\"line\">port 6379 <span class=\"comment\"># 端口设置</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通用 GENERAL</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize <span class=\"built_in\">yes</span> <span class=\"comment\"># 以守护进程的方式运行，默认是 no，我们需要自己开启为yes！</span></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid <span class=\"comment\"># 如果以后台的方式运行，我们就需要指定一个 pid 文件！</span></span><br><span class=\"line\"><span class=\"comment\"># 日志</span></span><br><span class=\"line\"><span class=\"comment\"># Specify the server verbosity level.</span></span><br><span class=\"line\"><span class=\"comment\"># This can be one of:</span></span><br><span class=\"line\"><span class=\"comment\"># debug (a lot of information, useful for development/testing)</span></span><br><span class=\"line\"><span class=\"comment\"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class=\"line\"><span class=\"comment\"># notice (moderately verbose, what you want in production probably) 生产环境</span></span><br><span class=\"line\"><span class=\"comment\"># warning (only very important / critical messages are logged)</span></span><br><span class=\"line\">loglevel notice</span><br><span class=\"line\">logfile <span class=\"string\">&quot;&quot;</span> <span class=\"comment\"># 日志的文件位置名</span></span><br><span class=\"line\">databases 16 <span class=\"comment\"># 数据库的数量，默认是 16 个数据库</span></span><br><span class=\"line\">always-show-logo <span class=\"built_in\">yes</span> <span class=\"comment\"># 是否总是显示LOGO</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>快照</p>\n</blockquote>\n<p>持久化， 在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb. aof</p>\n<p>redis 是内存数据库，如果没有持久化，那么数据断电就会丢失！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作</span></span><br><span class=\"line\">save 900 1</span><br><span class=\"line\"><span class=\"comment\"># 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作</span></span><br><span class=\"line\">save 300 10</span><br><span class=\"line\"><span class=\"comment\"># 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作</span></span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"><span class=\"comment\"># 我们之后学习持久化，会自己定义这个测试！</span></span><br><span class=\"line\">stop-writes-on-bgsave-error <span class=\"built_in\">yes</span> <span class=\"comment\"># 持久化如果出错，是否还需要继续工作！</span></span><br><span class=\"line\">rdbcompression <span class=\"built_in\">yes</span> <span class=\"comment\"># 是否压缩 rdb 文件，需要消耗一些cpu资源！</span></span><br><span class=\"line\">rdbchecksum <span class=\"built_in\">yes</span> <span class=\"comment\"># 保存rdb文件的时候，进行错误的检查校验！</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> ./ <span class=\"comment\"># rdb 文件保存的目录！</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SECURITY 安全</p>\n</blockquote>\n<p>可以设置 redis 密码，默认是没有密码的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass <span class=\"comment\"># 获取redis的密码</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; config <span class=\"built_in\">set</span> requirepass <span class=\"string\">&quot;123456&quot;</span> <span class=\"comment\"># 设置redis的密码</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass <span class=\"comment\"># 发现所有的命令都没有权限了</span></span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6379&gt; auth 123456 <span class=\"comment\"># 使用密码进行登录！</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; config get requirepass</span><br><span class=\"line\">1) <span class=\"string\">&quot;requirepass&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>限制 CLIENTS</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxclients 10000 <span class=\"comment\"># 设置能连接上redis的最大客户端的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory &lt;bytes&gt; <span class=\"comment\"># redis 配置最大的内存容量</span></span><br><span class=\"line\"></span><br><span class=\"line\">maxmemory-policy noeviction <span class=\"comment\"># 内存到达上限之后的处理策略</span></span><br><span class=\"line\">    1、volatile-lru：只对设置了过期时间的key进行LRU（默认值）</span><br><span class=\"line\">    2、allkeys-lru ： 删除lru算法的key</span><br><span class=\"line\">    3、volatile-random：随机删除即将过期key</span><br><span class=\"line\">    4、allkeys-random：随机删除</span><br><span class=\"line\">    5、volatile-ttl ： 删除即将过期的</span><br><span class=\"line\">    6、noeviction ： 永不过期，返回错误</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>APPEND ONLY 模式 aof 配置</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly no <span class=\"comment\"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span> <span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always # 每次修改都会 sync。消耗性能</span></span><br><span class=\"line\">appendfsync everysec <span class=\"comment\"># 每秒执行一次 sync，可能会丢失这1s的数据！</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis-持久化\"><a href=\"#Redis-持久化\" class=\"headerlink\" title=\"Redis 持久化\"></a>Redis 持久化</h1><p>面试和工作，持久化都是重点！</p>\n<p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘 ，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p>\n<h2 id=\"RDB（Redis-DataBase）\"><a href=\"#RDB（Redis-DataBase）\" class=\"headerlink\" title=\"RDB（Redis DataBase）\"></a>RDB（Redis DataBase）</h2><blockquote>\n<p>什么是 RDB？</p>\n</blockquote>\n<p>在主从复制中，rdb 就是备用了，放在从机上。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143056.png\" alt=\"image-20210503143056239\"></p>\n<p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的 Snapshot 快照，它恢复时是将快 照文件直接读到内存里。</p>\n<p>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程 都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的。 这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。RDB 的缺点是最后一次持久化后的数据可能丢失。我们默认的就是 RDB，一般情况下不需要修改这个配置！</p>\n<p>==rdb 保存的文件是 dump.rdb== 都是在我们的配置文件中快照中进行配置的！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143817.png\" alt=\"image-20210503143817471\"></p>\n<blockquote>\n<p>触发机制</p>\n</blockquote>\n<p>1、save 的规则满足的情况下，会自动触发 rdb 规则</p>\n<p>2、执行 flushall 命令，也会触发我们的 rdb 规则！</p>\n<p>3、退出 redis，也会产生 rdb 文件！ 备份就自动生成一个 dump.rdb</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503143857.png\" alt=\"image-20210503143856958\"></p>\n<blockquote>\n<p>如何恢复 rdb 文件！</p>\n</blockquote>\n<p>1、只需要将 rdb 文件放在我们 redis 启动目录就可以，redis 启动的时候会自动检查 dump.rdb 恢复其中 的数据！</p>\n<p>2、查看需要存在的位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; config get <span class=\"built_in\">dir</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;dir&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;/usr/local/bin&quot;</span> <span class=\"comment\"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、适合大规模的数据恢复！</p>\n<p>2、对数据的完整性要不高！</p>\n<p><strong>缺点：</strong></p>\n<p>1、需要一定的时间间隔进程操作！如果 redis 意外宕机了，这个最后一次修改数据就没有的了！</p>\n<p>2、fork 进程的时候，会占用一定的内容空间！</p>\n<h2 id=\"AOF（Append-Only-File）\"><a href=\"#AOF（Append-Only-File）\" class=\"headerlink\" title=\"AOF（Append Only File）\"></a>AOF（Append Only File）</h2><p>将我们的所有命令都记录下来，history，恢复的时候就把这个文件全部在执行一遍！</p>\n<blockquote>\n<p>是什么？</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144252.png\"></p>\n<p>以日志的形式来记录每个写操作，将 Redis 执行过的所有指令记录下来（读操作不记录），只许追加文件 但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件 的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>\n<p>==AOF 保存的是<code>appendonly.aof</code>文件==</p>\n<blockquote>\n<p>append</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144546.png\" alt=\"image-20210503144546005\"></p>\n<p>默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly 改为 yes 就开启了 aof！ 重启，redis 就可以生效了！</p>\n<p>如果这个 aof 文件有错误，这时候 redis 是启动不起来的，我们需要修复这个 aof 文件</p>\n<p>redis 给我们提供了一个工具 <code>redis-check-aof --fix</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144822.png\" alt=\"image-20210503144822428\"></p>\n<p>如果文件正常，重启就可以直接恢复了！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503144919.png\" alt=\"image-20210503144919410\"></p>\n<blockquote>\n<p>重写规则说明</p>\n</blockquote>\n<p>aof 默认就是文件的无限追加，文件会越来越大！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503145247.png\" alt=\"image-20210503145247104\"></p>\n<p>如果 aof 文件大于 64m，太大了！ fork 一个新的进程来将我们的文件进行重写！</p>\n<blockquote>\n<p>优点和缺点！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly no <span class=\"comment\"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span> <span class=\"comment\"># 持久化的文件的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always # 每次修改都会 sync。消耗性能</span></span><br><span class=\"line\">appendfsync everysec <span class=\"comment\"># 每秒执行一次 sync，可能会丢失这1s的数据！</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优点：</strong></p>\n<p>1、每一次修改都同步，文件的完整会更加好！</p>\n<p>2、每秒同步一次，可能会丢失一秒的数据</p>\n<p>3、从不同步，效率最高的！</p>\n<p><strong>缺点：</strong></p>\n<p>1、相对于数据文件来说，aof 远远大于 rdb，修复的速度也比 rdb 慢！</p>\n<p>2、Aof 运行效率也要比 rdb 慢，所以我们 redis 默认的配置就是 rdb 持久化！</p>\n<p><strong>扩展：</strong></p>\n<p>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p>\n<p>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始 的数据，AOF 命令以 Redis 协议追加保存每次写的操作到文件末尾，Redis 还能对 AOF 文件进行后台重 写，使得 AOF 文件的体积不至于过大。</p>\n<p>3、==只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化==</p>\n<p>4、同时开启两种持久化方式</p>\n<ul>\n<li>在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li>\n<li>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件，那要不要只使用 AOF 呢？作者 建议不要，因为 RDB 更适合用于备份数据库（AOF 在不断变化不好备份），快速重启，而且不会有 AOF 可能潜在的 Bug，留着作为一个万一的手段。</li>\n</ul>\n<p>5、性能建议</p>\n<ul>\n<li>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够 了，只保留 save 900 1 这条规则。</li>\n<li>如果 Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只 load 自 己的 AOF 文件就可以了，代价一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产 生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值 64M 太小了，可以设到 5G 以上，默认超过原大小 100%大小重 写可以改到适当的数值。</li>\n<li>如果不 Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔 IO，也 减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时倒掉，会丢失十几分钟的数据， 启动脚本也要比较两个 Master/Slave 中的 RDB 文件，载入较新的那个，微博就是这种架构。</li>\n</ul>\n<h1 id=\"Redis-发布订阅\"><a href=\"#Redis-发布订阅\" class=\"headerlink\" title=\"Redis 发布订阅\"></a>Redis 发布订阅</h1><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。微信、 微博、关注系统！</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<p>订阅/发布消息图：</p>\n<p>第一个：消息发送者， 第二个：频道 第三个：消息订阅者！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153104.png\" alt=\"image-20210503153104671\"></p>\n<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的 关系：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153133.png\" alt=\"image-20210503153133504\"></p>\n<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503153155.png\" alt=\"image-20210503153155660\"></p>\n<blockquote>\n<p>命令</p>\n</blockquote>\n<p>这些命令被广泛用于构建即时通信应用，比如网络聊天室(chatroom)和实时广播、实时提醒等。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令及描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-psubscribe.html\">PSUBSCRIBE pattern [pattern …]</a> <br />订阅一个或多个符合给定模式的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">[PUBSUB subcommand <a href=\"https://www.runoob.com/redis/pub-sub-pubsub.html\">argument [argument …]</a> <br />查看订阅与发布系统状态。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-publish.html\">PUBLISH channel message</a> <br />将信息发送到指定的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">[PUNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-punsubscribe.html\">pattern [pattern …]</a> <br />退订所有给定模式的频道。</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\"><a href=\"https://www.runoob.com/redis/pub-sub-subscribe.html\">SUBSCRIBE channel [channel …]</a> <br />订阅给定的一个或多个频道的信息。</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">[UNSUBSCRIBE <a href=\"https://www.runoob.com/redis/pub-sub-unsubscribe.html\">channel [channel …]</a> <br />指退订给定的频道。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p><strong>订阅端：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ouwen owconfig]<span class=\"comment\"># ../</span></span><br><span class=\"line\">-bash: ../: Is a directory</span><br><span class=\"line\">[root@ouwen owconfig]<span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SUBSCRIBE ouwenshuo</span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) <span class=\"string\">&quot;subscribe&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;ouwenshuo&quot;</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;message&quot;</span> <span class=\"comment\">#消息</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;ouwenshuo&quot;</span> <span class=\"comment\">#哪个频道的消息</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello redis&quot;</span> <span class=\"comment\">#消息内容</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>发送端：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; PUBLISH ouwenshuo <span class=\"string\">&quot;hello redis&quot;</span> <span class=\"comment\">#发布者发布消息到频道！</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>原理</p>\n</blockquote>\n<p>Redis 是使用 C 实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，借此加深对 Redis 的理解。</p>\n<p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p>\n<p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 频道！， 而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键， 就是将客户端添加到给定 channel 的订阅链表中。</p>\n<p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>\n<p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在 Redis 中，你可以设定对某一个 key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应 的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>\n<p><strong>使用场景：</strong></p>\n<p>1、实时消息系统！</p>\n<p>2、实时聊天！（频道当做聊天室，将信息回显给所有人即可！）</p>\n<p>3、订阅，关注系统都是可以的！ 稍微复杂的场景我们就会使用 消息中间件 MQ （）</p>\n<h1 id=\"Redis-主从复制\"><a href=\"#Redis-主从复制\" class=\"headerlink\" title=\"Redis 主从复制\"></a>Redis 主从复制</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点 (master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。 Master 以写为主，Slave 以读为主。</p>\n<p>默认情况下，每台 Redis 服务器都是主节点；</p>\n<p>且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p>\n<p><strong>主从复制的作用主要包括：</strong></p>\n<p>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p>\n<p>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务 的冗余。</p>\n<p>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 （即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点），分担服务器负载；尤其是在写 少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。</p>\n<p>4、高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</p>\n<p><strong>一般来说，要将 Redis 运用于工程项目中，只使用一台 Redis 是万万不能的（宕机），原因如下：</strong></p>\n<p>1、从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较 大；</p>\n<p>2、从容量上，单个 Redis 服务器内存容量有限，就算一台 Redis 服务器内存容量为 256G，也不能将所有 内存用作 Redis 存储内存，一般来说，单台 Redis 最大使用内存不应该超过 20G。 电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p>\n<p><strong>对于这种场景，我们可以使如下这种架构：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503160753.png\" alt=\"image-20210503160753106\"></p>\n<p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主 二从！</p>\n<p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用 Redis！</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>只配置从库，不用配置主库！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; info replication <span class=\"comment\"># 查看当前库的信息</span></span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master <span class=\"comment\"># 角色 master</span></span><br><span class=\"line\">connected_slaves:0 <span class=\"comment\"># 没有从机</span></span><br><span class=\"line\">master_replid:b63c90e6c501143759cb0e7f450bd1eb0c70882a</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:0</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:0</span><br><span class=\"line\">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>\n\n<p>复制 3 个配置文件，然后修改对应的信息：</p>\n<p>1、端口</p>\n<p>2、pid 名字</p>\n<p>3、log 文件名字</p>\n<p>4、dump.rdb 名字</p>\n<p>修改完毕之后，启动我们的 3 个 redis 服务器，可以通过进程信息查看~</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503162204.png\" alt=\"image-20210503162204439\"></p>\n<h2 id=\"一主二从\"><a href=\"#一主二从\" class=\"headerlink\" title=\"一主二从\"></a>一主二从</h2><p>默认情况下，每台 Redis 服务器都是主节点；==我们一般情况下只用配置从机就好了！</p>\n<p>认老大！ 一主 （79）二从（80，81）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379 <span class=\"comment\">#SLAVEOF host port 找谁当自己的老大 认主机</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:slave <span class=\"comment\">#当前角色是从机</span></span><br><span class=\"line\">master_host:127.0.0.1 <span class=\"comment\">#可以看到主机的信息</span></span><br><span class=\"line\">master_port:6379</span><br><span class=\"line\">master_link_status:up</span><br><span class=\"line\">master_last_io_seconds_ago:2</span><br><span class=\"line\">master_sync_in_progress:0</span><br><span class=\"line\">slave_repl_offset:0</span><br><span class=\"line\">slave_priority:100</span><br><span class=\"line\">slave_read_only:1</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_replid:e3379979becc4e424bf681c1a5fe7672bee18d37</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在主机中查看</span></span><br><span class=\"line\">127.0.0.1:6379&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1 <span class=\"comment\">#多了从机的配置</span></span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6380,state=online,offset=28,lag=0 <span class=\"comment\">#可以查看从机的信息</span></span><br><span class=\"line\">master_replid:e3379979becc4e424bf681c1a5fe7672bee18d37</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:28</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:28</span><br></pre></td></tr></table></figure>\n\n<p>如果两个都配置完了，就是有两个从机的</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503162814.png\" alt=\"image-20210503162814852\"></p>\n<p>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的！</p>\n<blockquote>\n<p>细节</p>\n</blockquote>\n<p>主机可以写，从机不能写只能读！主机中的所有信息和数据，都会自动被从机保存！</p>\n<p>主机写：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503163100.png\" alt=\"image-20210503163059937\"></p>\n<p>从机只能读取内容！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503163113.png\" alt=\"image-20210503163113429\"></p>\n<p>测试：主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！</p>\n<p>如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从 主机中获取值！</p>\n<blockquote>\n<p>复制原理</p>\n</blockquote>\n<p>Slave 启动成功连接到 master 后会发送一个 sync 同步命令</p>\n<p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行 完毕之后，<strong>master 将传送整个数据文件到 slave，并完成一次完全同步。</strong></p>\n<ul>\n<li><p>全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p>\n</li>\n<li><p>增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步</p>\n</li>\n</ul>\n<p><strong>但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中 看到！</strong></p>\n<blockquote>\n<p>层层链路</p>\n</blockquote>\n<p>上一个 M 链接下一个 S！</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503174711.png\" alt=\"image-20210503174711032\"></p>\n<p>这时候也可以完成我们的主从复制！</p>\n<blockquote>\n<p>如果没有老大了，这个时候能不能选择一个老大出来呢？ 手动！</p>\n</blockquote>\n<p><strong>谋朝篡位</strong></p>\n<p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code> 让自己变成主机！其他的节点就可以手动连 接到最新的这个主节点（手动）！如果这个时候老大修复了，那就重新连接！</p>\n<h1 id=\"哨兵模式\"><a href=\"#哨兵模式\" class=\"headerlink\" title=\"哨兵模式\"></a>哨兵模式</h1><p>（自动选举老大的模式）</p>\n<blockquote>\n<p>概述</p>\n</blockquote>\n<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工 干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑 哨兵模式。Redis 从 2.8 开始正式提供了 Sentinel（哨兵） 架构来解决这个问题。</p>\n<p>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数<strong>自动将从库转换为主库</strong>。</p>\n<p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例。</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503180007.png\" alt=\"image-20210503180007839\"></p>\n<p>这里的哨兵有两个作用</p>\n<ul>\n<li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器。</li>\n<li>当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。</li>\n</ul>\n<p>然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503180127.png\" alt=\"image-20210503180127096\"></p>\n<p>假设主服务器宕机，哨兵 1 先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵 1 主观的认 为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover[故障转移]操作。 切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为 <strong>客观下线</strong>。</p>\n<blockquote>\n<p>测试！</p>\n</blockquote>\n<p>目前的状态是：一主二从！</p>\n<p>1、配置哨兵配置文件 <code>sentinel.conf</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sentinel monitor 被监控的名称 host port 1</span></span><br><span class=\"line\">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>\n\n<p>后面的这个数字 1，代表主机挂了，slave 投票看让谁接替成为主机，票数最多的，就会成为主机！</p>\n<p>2、启动哨兵</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ouwen bin]<span class=\"comment\"># redis-sentinel owconfig/sentinel.conf</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.144 <span class=\"comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.144 <span class=\"comment\"># Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=5922, just started</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.144 <span class=\"comment\"># Configuration loaded</span></span><br><span class=\"line\">                _._</span><br><span class=\"line\">           _.-``__ <span class=\"string\">&#x27;&#x27;</span>-._</span><br><span class=\"line\">      _.-``    `.  `_.  <span class=\"string\">&#x27;&#x27;</span>-._           Redis 5.0.8 (00000000/0) 64 bit</span><br><span class=\"line\">  .-`` .-```.  ```\\/    _.,_ <span class=\"string\">&#x27;&#x27;</span>-._</span><br><span class=\"line\"> (    <span class=\"string\">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class=\"line\"><span class=\"string\"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class=\"string\">&#x27;|     Port: 26379</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 5922</span><br><span class=\"line\">  `-._    `-._  `-./  _.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span>_.-<span class=\"string\">&#x27;|</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-&#x27;</span>_.-<span class=\"string\">&#x27;    |           http://redis.io</span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-&#x27;</span>_.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span>_.-<span class=\"string\">&#x27;|</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-&#x27;</span>_.-<span class=\"string\">&#x27;    |</span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-&#x27;</span>_.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\">      `-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\">          `-._        _.-<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">              `-.__.-&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.145 <span class=\"comment\"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.150 <span class=\"comment\"># Sentinel ID is 0ab5ef20110ebfc67bc2a5e93addbe0871ffd748</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.150 <span class=\"comment\"># +monitor master myredis 127.0.0.1 6379 quorum 1</span></span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.151 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class=\"line\">5922:X 03 May 2021 18:13:03.156 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br></pre></td></tr></table></figure>\n\n<p>如果 Master 节点断开了，这个时候就会从从机中随机选择一个服务器！（这里面有一个投票算法！）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503181753.png\" alt=\"image-20210503181752988\"></p>\n<p><strong>哨兵日志：</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503181828.png\" alt=\"image-20210503181828520\"></p>\n<p>如果主机此时回来了，==只能归并到新的主机下，当做从机==，这就是哨兵模式的规则！</p>\n<blockquote>\n<p>哨兵模式</p>\n</blockquote>\n<p><strong>优点：</strong></p>\n<p>1、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</p>\n<p>2、主从可以切换，故障可以转移，系统的可用性就会更好</p>\n<p>3、哨兵模式就是主从模式的升级，手动到自动，更加健壮！</p>\n<p><strong>缺点：</strong></p>\n<p>1、Redis 不好做在线扩容的，集群容量一旦达到上限，在线扩容就会十分麻烦！</p>\n<p>2、实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</p>\n<blockquote>\n<p>哨兵模式的全部配置！！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example sentinel.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class=\"line\">port 26379</span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel的工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /tmp</span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel监控的redis主节点的 ip port</span></span><br><span class=\"line\"><span class=\"comment\"># master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class=\"line\"><span class=\"comment\"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class=\"line\"><span class=\"comment\"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class=\"line\"><span class=\"comment\"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class=\"line\">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class=\"line\"><span class=\"comment\"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 30000</span><br><span class=\"line\"><span class=\"comment\"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class=\"line\">sentinel parallel-syncs mymaster 1</span><br><span class=\"line\"><span class=\"comment\"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span></span><br><span class=\"line\"><span class=\"comment\">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class=\"line\"><span class=\"comment\">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那</span></span><br><span class=\"line\">里同步数据时。</span><br><span class=\"line\"><span class=\"comment\">#3.当想要取消一个正在进行的failover所需要的时间。</span></span><br><span class=\"line\"><span class=\"comment\">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，</span></span><br><span class=\"line\">slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><span class=\"line\"><span class=\"comment\"># 默认三分钟</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class=\"line\">sentinel failover-timeout mymaster 180000</span><br><span class=\"line\"><span class=\"comment\"># SCRIPTS EXECUTION</span></span><br><span class=\"line\"><span class=\"comment\">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知</span></span><br><span class=\"line\">相关人员。</span><br><span class=\"line\"><span class=\"comment\">#对于脚本的运行结果有以下规则：</span></span><br><span class=\"line\"><span class=\"comment\">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class=\"line\"><span class=\"comment\">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class=\"line\"><span class=\"comment\">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class=\"line\"><span class=\"comment\">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class=\"line\"><span class=\"comment\">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class=\"line\"><span class=\"comment\">#通知脚本</span></span><br><span class=\"line\"><span class=\"comment\"># shell编程</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class=\"line\">sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class=\"line\"><span class=\"comment\"># 客户端重新配置主节点参数脚本</span></span><br><span class=\"line\"><span class=\"comment\"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class=\"line\"><span class=\"comment\"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;role&gt;是“leader”或者“observer”中的一个。</span></span><br><span class=\"line\"><span class=\"comment\"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class=\"line\"><span class=\"comment\"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class=\"line\">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh <span class=\"comment\"># 一般都是由运维来配置！</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis-缓存穿透和雪崩\"><a href=\"#Redis-缓存穿透和雪崩\" class=\"headerlink\" title=\"Redis 缓存穿透和雪崩\"></a>Redis 缓存穿透和雪崩</h1><blockquote>\n<p>服务的高可用问题！</p>\n</blockquote>\n<p>在这里我们不会详细的区分析解决方案的底层！</p>\n<p>Redis 缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一 些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p>\n<p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183005.png\" alt=\"image-20210503183005078\"></p>\n<h2 id=\"缓存穿透（查不到）\"><a href=\"#缓存穿透（查不到）\" class=\"headerlink\" title=\"缓存穿透（查不到）\"></a>缓存穿透（查不到）</h2><blockquote>\n<p>概念</p>\n</blockquote>\n<p>缓存穿透的概念很简单，用户想要查询一个数据，发现 redis 内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒 杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>布隆过滤器</strong></p>\n<p>布隆过滤器是一种数据结构，对所有可能查询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力；</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183137.png\" alt=\"image-20210503183137788\" style=\"zoom: 50%;\" />\n\n<p><strong>缓存空对象</strong></p>\n<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183210.png\" alt=\"image-20210503183210887\" style=\"zoom:50%;\" />\n\n<p>但是这种方法会存在两个问题：</p>\n<p>1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多 的空值的键；</p>\n<p>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于 需要保持一致性的业务会有影响。</p>\n<h2 id=\"缓存击穿（量太大，缓存过期！）\"><a href=\"#缓存击穿（量太大，缓存过期！）\" class=\"headerlink\" title=\"缓存击穿（量太大，缓存过期！）\"></a>缓存击穿（量太大，缓存过期！）</h2><blockquote>\n<p>概述</p>\n</blockquote>\n<p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一 个屏障上凿开了一个洞。</p>\n<p>当某个 key 在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>设置热点数据永不过期</strong></p>\n<p>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p>\n<p><strong>加互斥锁</strong></p>\n<p>分布式锁：使用分布式锁，保证对于每个 key 同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><blockquote>\n<p>概念</p>\n</blockquote>\n<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机~</p>\n<p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商 品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210503183725.png\" alt=\"image-20210503183725407\"></p>\n<p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>redis 高可用</strong></p>\n<p>这个思想的含义是，既然 redis 有可能挂掉，那我多增设几台 redis，这样一台挂掉之后其他的还可以继续 工作，其实就是搭建的集群。（异地多活！）</p>\n<p><strong>限流降级</strong></p>\n<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对 某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</p>\n<p><strong>数据预热</strong></p>\n<p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数 据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>\n","categories":[{"name":"中间件","path":"api/categories/中间件.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"Redis","path":"api/tags/Redis.json"}]}