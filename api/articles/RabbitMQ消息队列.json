{"title":"RabbitMQ 消息队列","slug":"RabbitMQ消息队列","date":"2021-04-19T08:25:44.000Z","updated":"2021-04-19T08:26:26.000Z","comments":true,"path":"api/articles/RabbitMQ消息队列.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211212181732.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414173139.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414173220.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414230450.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414230702.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414235259.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414231107.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414231808.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415000422.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415190334.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415190348.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415193731.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415193743.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415194629.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415201126.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416092208.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416094708.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416094717.png"],"content":"<h2 id=\"什么是-MQ\"><a href=\"#什么是-MQ\" class=\"headerlink\" title=\"什么是 MQ\"></a>什么是 MQ</h2><p>消息队列（Message Queue，简称 MQ），从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是 message 而已。其主要用途：不同进程 Process/线程 Thread 之间通信。</p>\n<p><strong>为什么会产生消息队列？有几个原因：</strong></p>\n<ul>\n<li>不同进程（process）之间传递消息时，两个进程之间耦合程度过高，改动一个进程，引发必须修改另一个进程，为了隔离这两个进程，在两进程间抽离出一层（一个模块），所有两进程之间传递的消息，都必须通过消息队列来传递，单独修改某一个进程，不会影响另一个；</li>\n<li>不同进程（process）之间传递消息时，为了实现标准化，将消息的格式规范化了，并且，某一个进程接受的消息太多，一下子无法处理完，并且也有先后顺序，必须对收到的消息进行排队，因此诞生了事实上的消息队列；</li>\n</ul>\n<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211212181732.png\"></p>\n<p><strong>RabbitMQ 简介</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414173139.png\" alt=\"img\"  />\n\n<p><strong>开发语言：Erlang - 面向并发的编程语言</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414173220.png\" alt=\"img\"  />\n\n<p><strong>AMQP 协议</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414230450.png\" alt=\"img\"></p>\n<p><strong>学习五种队列</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414230702.png\" alt=\"img\"></p>\n<h2 id=\"RabbitMQ-的第一个程序\"><a href=\"#RabbitMQ-的第一个程序\" class=\"headerlink\" title=\"RabbitMQ 的第一个程序\"></a>RabbitMQ 的第一个程序</h2><h3 id=\"第一种模型（直连）\"><a href=\"#第一种模型（直连）\" class=\"headerlink\" title=\"第一种模型（直连）\"></a>第一种模型（直连）</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414235259.png\" alt=\"image-20210414235259013\" style=\"zoom:50%;\" />\n\n<ul>\n<li>P：生产者：也就是要发送消息的程序</li>\n<li>C：消费者：消息的接受者，会一直等待消息的到来</li>\n<li>queue：消息队列，图中红色部分，类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息</li>\n</ul>\n<h4 id=\"建立一个-maven-项目\"><a href=\"#建立一个-maven-项目\" class=\"headerlink\" title=\"建立一个 maven 项目\"></a>建立一个 maven 项目</h4><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414231107.png\" alt=\"image-20210414231107272\" style=\"zoom:50%;\" />\n\n<h4 id=\"导入-RabbitMQ-的客户端依赖\"><a href=\"#导入-RabbitMQ-的客户端依赖\" class=\"headerlink\" title=\"导入 RabbitMQ 的客户端依赖\"></a>导入 RabbitMQ 的客户端依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 引入rabbitmq的相关依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.rabbitmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>amqp-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写生产者\"><a href=\"#编写生产者\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSendMessage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, TimeoutException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建连接mq的连接工厂对象</span></span><br><span class=\"line\">    <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">    <span class=\"comment\">//设置连接rabbitmq主机</span></span><br><span class=\"line\">    connectionFactory.setHost(<span class=\"string\">&quot;192.168.90.140&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置端口号</span></span><br><span class=\"line\">    connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置连接哪个虚拟主机</span></span><br><span class=\"line\">    connectionFactory.setVirtualHost(<span class=\"string\">&quot;/ems&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置访问虚拟主机的用户名和密码</span></span><br><span class=\"line\">    connectionFactory.setUsername(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">    connectionFactory.setPassword(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\">    <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取连接中的通道对象</span></span><br><span class=\"line\">    <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通道绑定对应的消息队列</span></span><br><span class=\"line\">    <span class=\"comment\">//参数一：队列名称 如果不存在自动创建</span></span><br><span class=\"line\">    <span class=\"comment\">//参数二：用来定义队列特性是否要持久化，true持久化队列 false不持久化</span></span><br><span class=\"line\">    <span class=\"comment\">//参数三：exclusive 是否独占队列 ture独占队列 false 不独占队列</span></span><br><span class=\"line\">    <span class=\"comment\">//参数四：autoDelete 是否在消费完成后自动删除队列 true 自动删除 false 不自动删除</span></span><br><span class=\"line\">    <span class=\"comment\">//参数五：额外参数</span></span><br><span class=\"line\">    channel.queueDeclare(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发布消息</span></span><br><span class=\"line\">    <span class=\"comment\">//参数一：交换机名称 参数二：队列名称 参数三：传递消息额外名称 参数四：消息的具体内容</span></span><br><span class=\"line\">    channel.basicPublish(<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;hello&quot;</span>,<span class=\"literal\">null</span>,<span class=\"string\">&quot;hello rabbitmq&quot;</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">    channel.close();</span><br><span class=\"line\">    connection.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者\"><a href=\"#编写消费者\" class=\"headerlink\" title=\"编写消费者\"></a>编写消费者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建连接工厂</span></span><br><span class=\"line\"><span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">connectionFactory.setHost(<span class=\"string\">&quot;192.168.90.140&quot;</span>);</span><br><span class=\"line\">connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">connectionFactory.setVirtualHost(<span class=\"string\">&quot;/ems&quot;</span>);</span><br><span class=\"line\">connectionFactory.setUsername(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">connectionFactory.setPassword(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建通道</span></span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道绑定对象</span></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\"><span class=\"comment\">//参数1；消费哪个队列的消息，队列名称</span></span><br><span class=\"line\"><span class=\"comment\">//参数2：开始消息的自动确认机制</span></span><br><span class=\"line\"><span class=\"comment\">//参数3：消费时的回调接口</span></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"comment\">//最后一个参数：消息队列中取出的消息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;new String(body)==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：需要在 rabbitmq 管理页面中添加用户和虚拟主机</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414231808.png\" alt=\"image-20210414231807927\"></p>\n<h4 id=\"编写连接工具类\"><a href=\"#编写连接工具类\" class=\"headerlink\" title=\"编写连接工具类\"></a>编写连接工具类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConnectionFactory connectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//重量级资源 类加载的时候执行，只执行一次</span></span><br><span class=\"line\">        connectionFactory = <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        connectionFactory.setHost(<span class=\"string\">&quot;192.168.159.140&quot;</span>);</span><br><span class=\"line\">        connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        connectionFactory.setVirtualHost(<span class=\"string\">&quot;/ems&quot;</span>);</span><br><span class=\"line\">        connectionFactory.setUsername(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">        connectionFactory.setPassword(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义提供连接的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, TimeoutException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义关闭通道和关闭连接工具方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">closeConnectionAndChanel</span><span class=\"params\">(Channel channel, Connection connection)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                channel.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种模型（work-queue）\"><a href=\"#第二种模型（work-queue）\" class=\"headerlink\" title=\"第二种模型（work queue）\"></a>第二种模型（work queue）</h3><p><code>Work queue</code>，也被称为（<code>Task queue</code>），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理，此时就可以使用 work 模型，让多个消费者绑定到一个队列，共同消费队列中的消息，队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415000422.png\" alt=\"image-20210415000422705\"></p>\n<p>角色：</p>\n<ul>\n<li>P：生产者：任务的发布者</li>\n<li>C1：消费者：领取任务并且完成任务，假设完成速度较慢</li>\n<li>C2：消费者 2：领取任务并完成任务，假设完成速度快</li>\n</ul>\n<h4 id=\"编写生产者-1\"><a href=\"#编写生产者-1\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"comment\">//获取连接通道</span></span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过通道声明队列</span></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;work&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//生产消息</span></span><br><span class=\"line\">    channel.basicPublish(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;work&quot;</span>, <span class=\"literal\">null</span>, (i + <span class=\"string\">&quot;hello work queue&quot;</span>).getBytes());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1\"><a href=\"#编写消费者-1\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者--1：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2\"><a href=\"#编写消费者-2\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者--2：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h4><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415190334.png\" alt=\"image-20210415190327510\"  />\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415190348.png\" alt=\"image-20210415190348026\"  />\n\n<p>==<strong>总结：默认情况下，RabbitMQ 将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式成为循环</strong>==</p>\n<h3 id=\"消息自动确认机制\"><a href=\"#消息自动确认机制\" class=\"headerlink\" title=\"消息自动确认机制\"></a>消息自动确认机制</h3><blockquote>\n<p>完成一项任务可能只需要几秒钟。您可能想知道，如果其中一个消费者启动了一个很长的任务，并且只完成了部分任务而死亡，会发生什么情况。在我们当前的代码中，一旦 RabbitMQ 向消费者发送消息，它就会立即标记该消息为删除。在本例中，如果您杀死一个 worker，我们将丢失它正在处理的消息。我们还将丢失所有已发送到这个特定工作器但尚未处理的消息。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//每一次只能消费一个消息</span></span><br><span class=\"line\">channel.basicQos(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//参数1：队列名称 参数2：消息自动确认 true 消费者自动向rabbitmq确认消息消费 false 不会自动确认</span></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">false</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者--1：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">        <span class=\"comment\">// 参数1：确认队列中哪个具体消息 参数2：是否开启多个消息同时确认</span></span><br><span class=\"line\">        channel.basicAck(envelope.getDeliveryTag(),<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置通道一次只能消费一个消息</li>\n<li>关闭消息的自动确认，开启手动确认消息</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415193731.png\" alt=\"image-20210415193731262\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415193743.png\" alt=\"image-20210415193743820\"></p>\n<h3 id=\"第三种模型（fanout）\"><a href=\"#第三种模型（fanout）\" class=\"headerlink\" title=\"第三种模型（fanout）\"></a>第三种模型（fanout）</h3><p>==<code>fanout</code> 扇出 也称为广播==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415194629.png\" alt=\"image-20210415194629428\"></p>\n<p>在广播模式下，消息发送流程是这样的：</p>\n<ul>\n<li>可以有多个消费者</li>\n<li>每个<strong>消费者有自己的 queue</strong>（队列）</li>\n<li>每个<strong>队列都要绑定到 Exchange</strong>（交换机）</li>\n<li><strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定</li>\n<li>交换机把消息发送给绑定过的所有队列</li>\n<li>队列的消费者都能拿到消息，实现一条消息被多个消费者消费</li>\n</ul>\n<h4 id=\"编写生产者-2\"><a href=\"#编写生产者-2\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将通道声明指定交换机 参数1：交换机名称 参数2：交换机类型 fanout 广播类型</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\">channel.basicPublish(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&quot;fanout type message&quot;</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-1\"><a href=\"#编写消费者-1-1\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道绑定交换机</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定交换机和队列</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-1\"><a href=\"#编写消费者-2-1\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道绑定交换机</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定交换机和队列</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四种模型（Routing）\"><a href=\"#第四种模型（Routing）\" class=\"headerlink\" title=\"第四种模型（Routing）\"></a>第四种模型（Routing）</h3><h4 id=\"Routing-之订阅模型-Direct（直连）\"><a href=\"#Routing-之订阅模型-Direct（直连）\" class=\"headerlink\" title=\"Routing 之订阅模型 -Direct（直连）\"></a>Routing 之订阅模型 -Direct（直连）</h4><p>==在 Fanout 模式中，一条消息，会被所有订阅的队列消息。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到 Direct 类型的 Exchange。==</p>\n<p>在 Direct 模型下：</p>\n<ul>\n<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个 <code>RoutingKey</code>（路由 key）</li>\n<li>消息的发送方在向 Exchange 发送消息是，也必须指定消息的 <code>RoutingKey</code></li>\n<li>Exchange 不再把消息交给每一个绑定的队列，而是根据消息的 <code>RoutingKey</code> 进行判断，只有队列的<code>RoutingKey</code> 与消息的 <code>RoutingKey</code> 完全一致，才会接收到消息</li>\n</ul>\n<p>流程：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415201126.png\" alt=\"image-20210415201126889\"></p>\n<p>图解：</p>\n<ul>\n<li>P：生产者，向 Exchange 发送消息，发送消息是，会指定一个 Routing Key</li>\n<li>X：Exchange（交换机），接收生产者消息，然后把消息递交给与 Routing Key 完全匹配的队列</li>\n<li>C1：消费者，其所在队列指定了需要 Routing Key 为 error 的消息</li>\n<li>C2：消费者，其所在队列指定了需要 Routing Key 为 info、 error、warning 的消息</li>\n</ul>\n<h5 id=\"编写生产者-3\"><a href=\"#编写生产者-3\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;logs_direct&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将通道声明指定交换机 参数1：交换机名称 参数2：交换机类型 direct 路由模式</span></span><br><span class=\"line\">channel.exchangeDeclare(exchangeName, <span class=\"string\">&quot;direct&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">routingKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;info&quot;</span>;</span><br><span class=\"line\">channel.basicPublish(exchangeName, routingKey, <span class=\"literal\">null</span>, (<span class=\"string\">&quot;这是direct模型发布对的基于routing key[&quot;</span>+routingKey+<span class=\"string\">&quot;]==&gt;发送的消息&quot;</span>).getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-1-2\"><a href=\"#编写消费者-1-2\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;logs_direct&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基于route key绑定队列和交换机</span></span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取消费的消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-2-2\"><a href=\"#编写消费者-2-2\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;logs_direct&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定交换机和临时队列</span></span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;info&quot;</span>);</span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;warning&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Routing-之订阅模型-Topic\"><a href=\"#Routing-之订阅模型-Topic\" class=\"headerlink\" title=\"Routing 之订阅模型 -Topic\"></a>Routing 之订阅模型 -Topic</h4><p><code>Topic</code> 类型的 <code>Exchange</code> 与 <code>Direct</code> 相比，都可以根据 <code>RoutingKey</code> 把消息路由到不用的队列。只不过 <code>Topic</code> 类型的 <code>Exchange</code> 可以让队列在绑定 <code>RoutingKey</code> 的时候使用通配符！这种模型 <code>RoutingKey</code> 一般都是由一个或多个单词组成，多个单词之间以“.”分割，例如： <code>item.insert</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416092208.png\" alt=\"image-20210416092201943\"></p>\n<h5 id=\"编写生产者-4\"><a href=\"#编写生产者-4\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明交换机以及交换机类型 topic</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;topic&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义路由key</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">routingKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;user.save&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\">channel.basicPublish(<span class=\"string\">&quot;topics&quot;</span>, routingKey, <span class=\"literal\">null</span>, (<span class=\"string\">&quot;这里是topic动态路由模型，routingKey：&quot;</span> + routingKey).getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-1-3\"><a href=\"#编写消费者-1-3\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"><span class=\"comment\">//绑定队列和交换机，动态通配符形式routingKey</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;user.*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1 ==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-2-3\"><a href=\"#编写消费者-2-3\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"><span class=\"comment\">//绑定队列和交换机，动态通配符形式routingKey</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;user.#&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2 ==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h5><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416094708.png\" alt=\"image-20210416094708394\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416094717.png\" alt=\"image-20210416094717636\"></p>\n<h2 id=\"SpringBoot-整合-RabbitMQ\"><a href=\"#SpringBoot-整合-RabbitMQ\" class=\"headerlink\" title=\"SpringBoot 整合 RabbitMQ\"></a>SpringBoot 整合 RabbitMQ</h2><h3 id=\"搭建初始环境\"><a href=\"#搭建初始环境\" class=\"headerlink\" title=\"搭建初始环境\"></a>搭建初始环境</h3><h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入spring-rabbitmq依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置配置文件\"><a href=\"#配置配置文件\" class=\"headerlink\" title=\"配置配置文件\"></a>配置配置文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">application:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-springboot</span></span><br><span class=\"line\">    <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.80</span><span class=\"number\">.140</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">ems</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">ems</span></span><br><span class=\"line\">        <span class=\"attr\">virtual-host:</span> <span class=\"string\">/ems</span></span><br></pre></td></tr></table></figure>\n\n<p>==<code>RabbitTemplate</code> 用来简化操作 使用时候直接在项目中注入即可使用==</p>\n<h3 id=\"HelloWorld-模型\"><a href=\"#HelloWorld-模型\" class=\"headerlink\" title=\"HelloWorld 模型\"></a>HelloWorld 模型</h3><h4 id=\"编写生产者-5\"><a href=\"#编写生产者-5\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//hello world</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1\"><a href=\"#编写消费者-1\" class=\"headerlink\" title=\"编写消费者\"></a>编写消费者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>  <span class=\"comment\">//持久化 不独占 不是自动删除队列</span></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;hello&quot;))</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloConsumer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message==&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Work-模型\"><a href=\"#Work-模型\" class=\"headerlink\" title=\"Work 模型\"></a>Work 模型</h3><h4 id=\"编写生产者-6\"><a href=\"#编写生产者-6\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//work</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWork</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;work&quot;</span>, <span class=\"string\">&quot;work模型&quot;</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2\"><a href=\"#编写消费者-2\" class=\"headerlink\" title=\"编写消费者\"></a>编写消费者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WorkConsumer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//一个消费者</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message1=&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//二个消费者</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message2=&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>==<strong>说明：默认在 Spring AMQP 实现中 Work 这种方式就是公平调度，如果需要实现能者多劳需要额外配置</strong>==</p>\n<h3 id=\"Fanout-广播模型\"><a href=\"#Fanout-广播模型\" class=\"headerlink\" title=\"Fanout 广播模型\"></a>Fanout 广播模型</h3><h4 id=\"编写生产者-7\"><a href=\"#编写生产者-7\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//fanout 广播</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFanout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;Fanout的模型发送的消息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-4\"><a href=\"#编写消费者-1-4\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,//绑定临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;) //绑定的交换机</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1=&quot;</span>+message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-4\"><a href=\"#编写消费者-2-4\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,//绑定临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;) //绑定的交换机</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message2=&quot;</span>+message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Routing-路由模型\"><a href=\"#Routing-路由模型\" class=\"headerlink\" title=\"Routing 路由模型\"></a>Routing 路由模型</h3><h4 id=\"编写生产者-8\"><a href=\"#编写生产者-8\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//routing 路由模式</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRoute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;directs&quot;</span>, <span class=\"string\">&quot;info&quot;</span>, <span class=\"string\">&quot;发送info的key的路由信息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-5\"><a href=\"#编写消费者-1-5\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue, //创建临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;directs&quot;, type = &quot;direct&quot;), //自定义交换机名称和类型</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;info&quot;, &quot;error&quot;, &quot;warn&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-5\"><a href=\"#编写消费者-2-5\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue, //创建临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;directs&quot;, type = &quot;direct&quot;), //自定义交换机名称和类型</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;info&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Topic-动态路由模型\"><a href=\"#Topic-动态路由模型\" class=\"headerlink\" title=\"Topic 动态路由模型\"></a>Topic 动态路由模型</h3><h4 id=\"编写生产者-9\"><a href=\"#编写生产者-9\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//topic 动态路由 订阅模式</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTopic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;user.save&quot;</span>, <span class=\"string\">&quot;user.save 路由消息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-6\"><a href=\"#编写消费者-1-6\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(type = &quot;topic&quot;, value = &quot;topics&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;user.save&quot;, &quot;user.*&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-6\"><a href=\"#编写消费者-2-6\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(type = &quot;topic&quot;, value = &quot;topics&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;user.save&quot;, &quot;user.*&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message2==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MQ-的应用场景\"><a href=\"#MQ-的应用场景\" class=\"headerlink\" title=\"MQ 的应用场景\"></a>MQ 的应用场景</h3><h4 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h4><p>==场景说明：用户注册后，需要发注册邮件和注册短信，传统的做法有两种 1. 串行的方式 2. 并行的方式==</p>\n<ul>\n<li><strong>串行方式：</strong>讲注册信息写入数据库后，发送注册邮件， 再发送注册短信，以上三个任务全部完成后才返回给客户端。这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待没有必要等待的东西。</li>\n<li><strong>并行方式：</strong>将信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回客户端，并行的方式能提高处理的时间。</li>\n<li><strong>消息队列：</strong>假设三个业务点分别使用 50ms，串行方式使用时间 150ms，并行使用时间 100ms。虽然并行已经提高了处理时间，但是，前面说过，邮件和短信不对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功，应该是写入数据库后就返回。引入消息队列后，把发送邮件，短信等不是必须的业务逻辑异步处理。</li>\n</ul>\n<h4 id=\"应用解耦\"><a href=\"#应用解耦\" class=\"headerlink\" title=\"应用解耦\"></a>应用解耦</h4><p>==场景说明：双 11 是购物狂欢节，用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口==</p>\n<p>这样做法有一个缺点：</p>\n<p>当库存系统出现故障时，订单就会失效。订单系统和库存系统高耦合，引入消息队列</p>\n<ul>\n<li><strong>订单系统：</strong>用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功</li>\n<li><strong>库存系统：</strong>订阅下单的消息，获取下单消息，进行库操作。就算库存系统出现故障，消息队列也能保证消息的可靠投递，不会导致消息丢失</li>\n</ul>\n<h4 id=\"流量削锋\"><a href=\"#流量削锋\" class=\"headerlink\" title=\"流量削锋\"></a>流量削锋</h4><p>==场景说明：秒杀活动，一般会因为流量过大，导致应用挂掉，为了解决这个问题，一般在应用前端加入消息队列。==</p>\n<p>作用：</p>\n<ol>\n<li>可以控制活动人数，超过此一定阈值的订单直接丢弃</li>\n<li>可以缓解短时间的高流量压垮应用</li>\n</ol>\n","more":"<h2 id=\"什么是-MQ\"><a href=\"#什么是-MQ\" class=\"headerlink\" title=\"什么是 MQ\"></a>什么是 MQ</h2><p>消息队列（Message Queue，简称 MQ），从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是 message 而已。其主要用途：不同进程 Process/线程 Thread 之间通信。</p>\n<p><strong>为什么会产生消息队列？有几个原因：</strong></p>\n<ul>\n<li>不同进程（process）之间传递消息时，两个进程之间耦合程度过高，改动一个进程，引发必须修改另一个进程，为了隔离这两个进程，在两进程间抽离出一层（一个模块），所有两进程之间传递的消息，都必须通过消息队列来传递，单独修改某一个进程，不会影响另一个；</li>\n<li>不同进程（process）之间传递消息时，为了实现标准化，将消息的格式规范化了，并且，某一个进程接受的消息太多，一下子无法处理完，并且也有先后顺序，必须对收到的消息进行排队，因此诞生了事实上的消息队列；</li>\n</ul>\n<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20211212181732.png\"></p>\n<p><strong>RabbitMQ 简介</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414173139.png\" alt=\"img\"  />\n\n<p><strong>开发语言：Erlang - 面向并发的编程语言</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414173220.png\" alt=\"img\"  />\n\n<p><strong>AMQP 协议</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414230450.png\" alt=\"img\"></p>\n<p><strong>学习五种队列</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414230702.png\" alt=\"img\"></p>\n<h2 id=\"RabbitMQ-的第一个程序\"><a href=\"#RabbitMQ-的第一个程序\" class=\"headerlink\" title=\"RabbitMQ 的第一个程序\"></a>RabbitMQ 的第一个程序</h2><h3 id=\"第一种模型（直连）\"><a href=\"#第一种模型（直连）\" class=\"headerlink\" title=\"第一种模型（直连）\"></a>第一种模型（直连）</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414235259.png\" alt=\"image-20210414235259013\" style=\"zoom:50%;\" />\n\n<ul>\n<li>P：生产者：也就是要发送消息的程序</li>\n<li>C：消费者：消息的接受者，会一直等待消息的到来</li>\n<li>queue：消息队列，图中红色部分，类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息</li>\n</ul>\n<h4 id=\"建立一个-maven-项目\"><a href=\"#建立一个-maven-项目\" class=\"headerlink\" title=\"建立一个 maven 项目\"></a>建立一个 maven 项目</h4><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414231107.png\" alt=\"image-20210414231107272\" style=\"zoom:50%;\" />\n\n<h4 id=\"导入-RabbitMQ-的客户端依赖\"><a href=\"#导入-RabbitMQ-的客户端依赖\" class=\"headerlink\" title=\"导入 RabbitMQ 的客户端依赖\"></a>导入 RabbitMQ 的客户端依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 引入rabbitmq的相关依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.rabbitmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>amqp-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写生产者\"><a href=\"#编写生产者\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSendMessage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, TimeoutException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建连接mq的连接工厂对象</span></span><br><span class=\"line\">    <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">    <span class=\"comment\">//设置连接rabbitmq主机</span></span><br><span class=\"line\">    connectionFactory.setHost(<span class=\"string\">&quot;192.168.90.140&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置端口号</span></span><br><span class=\"line\">    connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置连接哪个虚拟主机</span></span><br><span class=\"line\">    connectionFactory.setVirtualHost(<span class=\"string\">&quot;/ems&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置访问虚拟主机的用户名和密码</span></span><br><span class=\"line\">    connectionFactory.setUsername(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">    connectionFactory.setPassword(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\">    <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取连接中的通道对象</span></span><br><span class=\"line\">    <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通道绑定对应的消息队列</span></span><br><span class=\"line\">    <span class=\"comment\">//参数一：队列名称 如果不存在自动创建</span></span><br><span class=\"line\">    <span class=\"comment\">//参数二：用来定义队列特性是否要持久化，true持久化队列 false不持久化</span></span><br><span class=\"line\">    <span class=\"comment\">//参数三：exclusive 是否独占队列 ture独占队列 false 不独占队列</span></span><br><span class=\"line\">    <span class=\"comment\">//参数四：autoDelete 是否在消费完成后自动删除队列 true 自动删除 false 不自动删除</span></span><br><span class=\"line\">    <span class=\"comment\">//参数五：额外参数</span></span><br><span class=\"line\">    channel.queueDeclare(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发布消息</span></span><br><span class=\"line\">    <span class=\"comment\">//参数一：交换机名称 参数二：队列名称 参数三：传递消息额外名称 参数四：消息的具体内容</span></span><br><span class=\"line\">    channel.basicPublish(<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;hello&quot;</span>,<span class=\"literal\">null</span>,<span class=\"string\">&quot;hello rabbitmq&quot;</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">    channel.close();</span><br><span class=\"line\">    connection.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者\"><a href=\"#编写消费者\" class=\"headerlink\" title=\"编写消费者\"></a>编写消费者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建连接工厂</span></span><br><span class=\"line\"><span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">connectionFactory.setHost(<span class=\"string\">&quot;192.168.90.140&quot;</span>);</span><br><span class=\"line\">connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">connectionFactory.setVirtualHost(<span class=\"string\">&quot;/ems&quot;</span>);</span><br><span class=\"line\">connectionFactory.setUsername(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">connectionFactory.setPassword(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建通道</span></span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道绑定对象</span></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\"><span class=\"comment\">//参数1；消费哪个队列的消息，队列名称</span></span><br><span class=\"line\"><span class=\"comment\">//参数2：开始消息的自动确认机制</span></span><br><span class=\"line\"><span class=\"comment\">//参数3：消费时的回调接口</span></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"comment\">//最后一个参数：消息队列中取出的消息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;new String(body)==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：需要在 rabbitmq 管理页面中添加用户和虚拟主机</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210414231808.png\" alt=\"image-20210414231807927\"></p>\n<h4 id=\"编写连接工具类\"><a href=\"#编写连接工具类\" class=\"headerlink\" title=\"编写连接工具类\"></a>编写连接工具类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConnectionFactory connectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//重量级资源 类加载的时候执行，只执行一次</span></span><br><span class=\"line\">        connectionFactory = <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        connectionFactory.setHost(<span class=\"string\">&quot;192.168.159.140&quot;</span>);</span><br><span class=\"line\">        connectionFactory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        connectionFactory.setVirtualHost(<span class=\"string\">&quot;/ems&quot;</span>);</span><br><span class=\"line\">        connectionFactory.setUsername(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">        connectionFactory.setPassword(<span class=\"string\">&quot;ems&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义提供连接的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, TimeoutException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> connectionFactory.newConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义关闭通道和关闭连接工具方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">closeConnectionAndChanel</span><span class=\"params\">(Channel channel, Connection connection)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                channel.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种模型（work-queue）\"><a href=\"#第二种模型（work-queue）\" class=\"headerlink\" title=\"第二种模型（work queue）\"></a>第二种模型（work queue）</h3><p><code>Work queue</code>，也被称为（<code>Task queue</code>），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理，此时就可以使用 work 模型，让多个消费者绑定到一个队列，共同消费队列中的消息，队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415000422.png\" alt=\"image-20210415000422705\"></p>\n<p>角色：</p>\n<ul>\n<li>P：生产者：任务的发布者</li>\n<li>C1：消费者：领取任务并且完成任务，假设完成速度较慢</li>\n<li>C2：消费者 2：领取任务并完成任务，假设完成速度快</li>\n</ul>\n<h4 id=\"编写生产者-1\"><a href=\"#编写生产者-1\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"comment\">//获取连接通道</span></span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过通道声明队列</span></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;work&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//生产消息</span></span><br><span class=\"line\">    channel.basicPublish(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;work&quot;</span>, <span class=\"literal\">null</span>, (i + <span class=\"string\">&quot;hello work queue&quot;</span>).getBytes());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1\"><a href=\"#编写消费者-1\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者--1：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2\"><a href=\"#编写消费者-2\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queueDeclare(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">true</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者--2：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h4><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415190334.png\" alt=\"image-20210415190327510\"  />\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415190348.png\" alt=\"image-20210415190348026\"  />\n\n<p>==<strong>总结：默认情况下，RabbitMQ 将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式成为循环</strong>==</p>\n<h3 id=\"消息自动确认机制\"><a href=\"#消息自动确认机制\" class=\"headerlink\" title=\"消息自动确认机制\"></a>消息自动确认机制</h3><blockquote>\n<p>完成一项任务可能只需要几秒钟。您可能想知道，如果其中一个消费者启动了一个很长的任务，并且只完成了部分任务而死亡，会发生什么情况。在我们当前的代码中，一旦 RabbitMQ 向消费者发送消息，它就会立即标记该消息为删除。在本例中，如果您杀死一个 worker，我们将丢失它正在处理的消息。我们还将丢失所有已发送到这个特定工作器但尚未处理的消息。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//每一次只能消费一个消息</span></span><br><span class=\"line\">channel.basicQos(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//参数1：队列名称 参数2：消息自动确认 true 消费者自动向rabbitmq确认消息消费 false 不会自动确认</span></span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;work&quot;</span>,<span class=\"literal\">false</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者--1：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">        <span class=\"comment\">// 参数1：确认队列中哪个具体消息 参数2：是否开启多个消息同时确认</span></span><br><span class=\"line\">        channel.basicAck(envelope.getDeliveryTag(),<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置通道一次只能消费一个消息</li>\n<li>关闭消息的自动确认，开启手动确认消息</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415193731.png\" alt=\"image-20210415193731262\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415193743.png\" alt=\"image-20210415193743820\"></p>\n<h3 id=\"第三种模型（fanout）\"><a href=\"#第三种模型（fanout）\" class=\"headerlink\" title=\"第三种模型（fanout）\"></a>第三种模型（fanout）</h3><p>==<code>fanout</code> 扇出 也称为广播==</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415194629.png\" alt=\"image-20210415194629428\"></p>\n<p>在广播模式下，消息发送流程是这样的：</p>\n<ul>\n<li>可以有多个消费者</li>\n<li>每个<strong>消费者有自己的 queue</strong>（队列）</li>\n<li>每个<strong>队列都要绑定到 Exchange</strong>（交换机）</li>\n<li><strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定</li>\n<li>交换机把消息发送给绑定过的所有队列</li>\n<li>队列的消费者都能拿到消息，实现一条消息被多个消费者消费</li>\n</ul>\n<h4 id=\"编写生产者-2\"><a href=\"#编写生产者-2\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将通道声明指定交换机 参数1：交换机名称 参数2：交换机类型 fanout 广播类型</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\">channel.basicPublish(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&quot;fanout type message&quot;</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-1\"><a href=\"#编写消费者-1-1\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道绑定交换机</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定交换机和队列</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-1\"><a href=\"#编写消费者-2-1\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通道绑定交换机</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定交换机和队列</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四种模型（Routing）\"><a href=\"#第四种模型（Routing）\" class=\"headerlink\" title=\"第四种模型（Routing）\"></a>第四种模型（Routing）</h3><h4 id=\"Routing-之订阅模型-Direct（直连）\"><a href=\"#Routing-之订阅模型-Direct（直连）\" class=\"headerlink\" title=\"Routing 之订阅模型 -Direct（直连）\"></a>Routing 之订阅模型 -Direct（直连）</h4><p>==在 Fanout 模式中，一条消息，会被所有订阅的队列消息。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到 Direct 类型的 Exchange。==</p>\n<p>在 Direct 模型下：</p>\n<ul>\n<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个 <code>RoutingKey</code>（路由 key）</li>\n<li>消息的发送方在向 Exchange 发送消息是，也必须指定消息的 <code>RoutingKey</code></li>\n<li>Exchange 不再把消息交给每一个绑定的队列，而是根据消息的 <code>RoutingKey</code> 进行判断，只有队列的<code>RoutingKey</code> 与消息的 <code>RoutingKey</code> 完全一致，才会接收到消息</li>\n</ul>\n<p>流程：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210415201126.png\" alt=\"image-20210415201126889\"></p>\n<p>图解：</p>\n<ul>\n<li>P：生产者，向 Exchange 发送消息，发送消息是，会指定一个 Routing Key</li>\n<li>X：Exchange（交换机），接收生产者消息，然后把消息递交给与 Routing Key 完全匹配的队列</li>\n<li>C1：消费者，其所在队列指定了需要 Routing Key 为 error 的消息</li>\n<li>C2：消费者，其所在队列指定了需要 Routing Key 为 info、 error、warning 的消息</li>\n</ul>\n<h5 id=\"编写生产者-3\"><a href=\"#编写生产者-3\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;logs_direct&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将通道声明指定交换机 参数1：交换机名称 参数2：交换机类型 direct 路由模式</span></span><br><span class=\"line\">channel.exchangeDeclare(exchangeName, <span class=\"string\">&quot;direct&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">routingKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;info&quot;</span>;</span><br><span class=\"line\">channel.basicPublish(exchangeName, routingKey, <span class=\"literal\">null</span>, (<span class=\"string\">&quot;这是direct模型发布对的基于routing key[&quot;</span>+routingKey+<span class=\"string\">&quot;]==&gt;发送的消息&quot;</span>).getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-1-2\"><a href=\"#编写消费者-1-2\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;logs_direct&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基于route key绑定队列和交换机</span></span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取消费的消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-2-2\"><a href=\"#编写消费者-2-2\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;logs_direct&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绑定交换机和临时队列</span></span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;info&quot;</span>);</span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">channel.queueBind(queue, exchangeName, <span class=\"string\">&quot;warning&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Routing-之订阅模型-Topic\"><a href=\"#Routing-之订阅模型-Topic\" class=\"headerlink\" title=\"Routing 之订阅模型 -Topic\"></a>Routing 之订阅模型 -Topic</h4><p><code>Topic</code> 类型的 <code>Exchange</code> 与 <code>Direct</code> 相比，都可以根据 <code>RoutingKey</code> 把消息路由到不用的队列。只不过 <code>Topic</code> 类型的 <code>Exchange</code> 可以让队列在绑定 <code>RoutingKey</code> 的时候使用通配符！这种模型 <code>RoutingKey</code> 一般都是由一个或多个单词组成，多个单词之间以“.”分割，例如： <code>item.insert</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416092208.png\" alt=\"image-20210416092201943\"></p>\n<h5 id=\"编写生产者-4\"><a href=\"#编写生产者-4\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明交换机以及交换机类型 topic</span></span><br><span class=\"line\">channel.exchangeDeclare(<span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;topic&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义路由key</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">routingKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;user.save&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//发送消息</span></span><br><span class=\"line\">channel.basicPublish(<span class=\"string\">&quot;topics&quot;</span>, routingKey, <span class=\"literal\">null</span>, (<span class=\"string\">&quot;这里是topic动态路由模型，routingKey：&quot;</span> + routingKey).getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//释放资源</span></span><br><span class=\"line\">RabbitMQUtils.closeConnectionAndChanel(channel, connection);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-1-3\"><a href=\"#编写消费者-1-3\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"><span class=\"comment\">//绑定队列和交换机，动态通配符形式routingKey</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;user.*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,<span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者1 ==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写消费者-2-3\"><a href=\"#编写消费者-2-3\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> RabbitMQUtils.getConnection();</span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个临时队列</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\"><span class=\"comment\">//绑定队列和交换机，动态通配符形式routingKey</span></span><br><span class=\"line\">channel.queueBind(queue, <span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;user.#&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费消息</span></span><br><span class=\"line\">channel.basicConsume(queue, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费者2 ==&gt;&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h5><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416094708.png\" alt=\"image-20210416094708394\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210416094717.png\" alt=\"image-20210416094717636\"></p>\n<h2 id=\"SpringBoot-整合-RabbitMQ\"><a href=\"#SpringBoot-整合-RabbitMQ\" class=\"headerlink\" title=\"SpringBoot 整合 RabbitMQ\"></a>SpringBoot 整合 RabbitMQ</h2><h3 id=\"搭建初始环境\"><a href=\"#搭建初始环境\" class=\"headerlink\" title=\"搭建初始环境\"></a>搭建初始环境</h3><h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入spring-rabbitmq依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置配置文件\"><a href=\"#配置配置文件\" class=\"headerlink\" title=\"配置配置文件\"></a>配置配置文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">application:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-springboot</span></span><br><span class=\"line\">    <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.80</span><span class=\"number\">.140</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">ems</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">ems</span></span><br><span class=\"line\">        <span class=\"attr\">virtual-host:</span> <span class=\"string\">/ems</span></span><br></pre></td></tr></table></figure>\n\n<p>==<code>RabbitTemplate</code> 用来简化操作 使用时候直接在项目中注入即可使用==</p>\n<h3 id=\"HelloWorld-模型\"><a href=\"#HelloWorld-模型\" class=\"headerlink\" title=\"HelloWorld 模型\"></a>HelloWorld 模型</h3><h4 id=\"编写生产者-5\"><a href=\"#编写生产者-5\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//hello world</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1\"><a href=\"#编写消费者-1\" class=\"headerlink\" title=\"编写消费者\"></a>编写消费者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>  <span class=\"comment\">//持久化 不独占 不是自动删除队列</span></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;hello&quot;))</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloConsumer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message==&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Work-模型\"><a href=\"#Work-模型\" class=\"headerlink\" title=\"Work 模型\"></a>Work 模型</h3><h4 id=\"编写生产者-6\"><a href=\"#编写生产者-6\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//work</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWork</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;work&quot;</span>, <span class=\"string\">&quot;work模型&quot;</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2\"><a href=\"#编写消费者-2\" class=\"headerlink\" title=\"编写消费者\"></a>编写消费者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WorkConsumer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//一个消费者</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message1=&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//二个消费者</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message2=&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>==<strong>说明：默认在 Spring AMQP 实现中 Work 这种方式就是公平调度，如果需要实现能者多劳需要额外配置</strong>==</p>\n<h3 id=\"Fanout-广播模型\"><a href=\"#Fanout-广播模型\" class=\"headerlink\" title=\"Fanout 广播模型\"></a>Fanout 广播模型</h3><h4 id=\"编写生产者-7\"><a href=\"#编写生产者-7\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//fanout 广播</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFanout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;logs&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;Fanout的模型发送的消息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-4\"><a href=\"#编写消费者-1-4\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,//绑定临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;) //绑定的交换机</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1=&quot;</span>+message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-4\"><a href=\"#编写消费者-2-4\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,//绑定临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;) //绑定的交换机</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message2=&quot;</span>+message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Routing-路由模型\"><a href=\"#Routing-路由模型\" class=\"headerlink\" title=\"Routing 路由模型\"></a>Routing 路由模型</h3><h4 id=\"编写生产者-8\"><a href=\"#编写生产者-8\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//routing 路由模式</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testRoute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;directs&quot;</span>, <span class=\"string\">&quot;info&quot;</span>, <span class=\"string\">&quot;发送info的key的路由信息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-5\"><a href=\"#编写消费者-1-5\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue, //创建临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;directs&quot;, type = &quot;direct&quot;), //自定义交换机名称和类型</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;info&quot;, &quot;error&quot;, &quot;warn&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-5\"><a href=\"#编写消费者-2-5\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue, //创建临时队列</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(value = &quot;directs&quot;, type = &quot;direct&quot;), //自定义交换机名称和类型</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;info&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Topic-动态路由模型\"><a href=\"#Topic-动态路由模型\" class=\"headerlink\" title=\"Topic 动态路由模型\"></a>Topic 动态路由模型</h3><h4 id=\"编写生产者-9\"><a href=\"#编写生产者-9\" class=\"headerlink\" title=\"编写生产者\"></a>编写生产者</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入rabbitTemplate</span></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//topic 动态路由 订阅模式</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTopic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;topics&quot;</span>, <span class=\"string\">&quot;user.save&quot;</span>, <span class=\"string\">&quot;user.save 路由消息&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-1-6\"><a href=\"#编写消费者-1-6\" class=\"headerlink\" title=\"编写消费者-1\"></a>编写消费者-1</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(type = &quot;topic&quot;, value = &quot;topics&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;user.save&quot;, &quot;user.*&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read1</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message1==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写消费者-2-6\"><a href=\"#编写消费者-2-6\" class=\"headerlink\" title=\"编写消费者-2\"></a>编写消费者-2</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">    @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">        value = @Queue,</span></span><br><span class=\"line\"><span class=\"meta\">        exchange = @Exchange(type = &quot;topic&quot;, value = &quot;topics&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        key = &#123;&quot;user.save&quot;, &quot;user.*&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read2</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;message2==&gt;&quot;</span> + message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MQ-的应用场景\"><a href=\"#MQ-的应用场景\" class=\"headerlink\" title=\"MQ 的应用场景\"></a>MQ 的应用场景</h3><h4 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h4><p>==场景说明：用户注册后，需要发注册邮件和注册短信，传统的做法有两种 1. 串行的方式 2. 并行的方式==</p>\n<ul>\n<li><strong>串行方式：</strong>讲注册信息写入数据库后，发送注册邮件， 再发送注册短信，以上三个任务全部完成后才返回给客户端。这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待没有必要等待的东西。</li>\n<li><strong>并行方式：</strong>将信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回客户端，并行的方式能提高处理的时间。</li>\n<li><strong>消息队列：</strong>假设三个业务点分别使用 50ms，串行方式使用时间 150ms，并行使用时间 100ms。虽然并行已经提高了处理时间，但是，前面说过，邮件和短信不对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功，应该是写入数据库后就返回。引入消息队列后，把发送邮件，短信等不是必须的业务逻辑异步处理。</li>\n</ul>\n<h4 id=\"应用解耦\"><a href=\"#应用解耦\" class=\"headerlink\" title=\"应用解耦\"></a>应用解耦</h4><p>==场景说明：双 11 是购物狂欢节，用户下单后，订单系统需要通知库存系统，传统的做法就是订单系统调用库存系统的接口==</p>\n<p>这样做法有一个缺点：</p>\n<p>当库存系统出现故障时，订单就会失效。订单系统和库存系统高耦合，引入消息队列</p>\n<ul>\n<li><strong>订单系统：</strong>用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功</li>\n<li><strong>库存系统：</strong>订阅下单的消息，获取下单消息，进行库操作。就算库存系统出现故障，消息队列也能保证消息的可靠投递，不会导致消息丢失</li>\n</ul>\n<h4 id=\"流量削锋\"><a href=\"#流量削锋\" class=\"headerlink\" title=\"流量削锋\"></a>流量削锋</h4><p>==场景说明：秒杀活动，一般会因为流量过大，导致应用挂掉，为了解决这个问题，一般在应用前端加入消息队列。==</p>\n<p>作用：</p>\n<ol>\n<li>可以控制活动人数，超过此一定阈值的订单直接丢弃</li>\n<li>可以缓解短时间的高流量压垮应用</li>\n</ol>\n","categories":[{"name":"中间件","path":"api/categories/中间件.json"}],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"RabbitMQ","path":"api/tags/RabbitMQ.json"}]}