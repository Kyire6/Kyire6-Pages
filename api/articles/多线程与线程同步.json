{"title":"Java 多线程与线程同步","slug":"多线程与线程同步","date":"2021-04-17T08:26:44.000Z","updated":"2021-05-16T08:26:26.000Z","comments":true,"path":"api/articles/多线程与线程同步.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210402153415.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210403003514.jpeg"],"content":"<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><h3 id=\"Process-与-Thread（进程与线程）\"><a href=\"#Process-与-Thread（进程与线程）\" class=\"headerlink\" title=\"Process 与 Thread（进程与线程）\"></a>Process 与 Thread（进程与线程）</h3><ul>\n<li>说起进程，就不得不说下<strong>程序</strong>。程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</li>\n<li>而<strong>进程</strong>则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位。</li>\n<li>通常在一个进程中可以包含若干个<strong>线程</strong>，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU调度和执行的单位。</li>\n</ul>\n<h3 id=\"多线程核心概念\"><a href=\"#多线程核心概念\" class=\"headerlink\" title=\"多线程核心概念\"></a>多线程核心概念</h3><ul>\n<li>线程就是独立的执行路径；</li>\n<li>在程序运行时，就是没有自己创建线程，后台也会有多个线程，如主线程、gc线程；</li>\n<li>main()线程称之为主线程，为系统的入口，用于执行整个程序；</li>\n<li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为干预的；</li>\n<li>对同一份资源操作时，会存在资 源抢占问题，需要加入并发控制；</li>\n<li>线程会带来额外的开销，如CPU调度时间，并发控制开销；</li>\n<li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致；</li>\n</ul>\n<h3 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h3><p>共有三种方式：Thread、Runnable、Callable</p>\n<ul>\n<li>Thread.class -&gt; 继承Thread类（重点）</li>\n<li>Runnable接口 -&gt; 实现Runnable接口（重点）</li>\n<li>Callable接口 -&gt; 实现Callable接口（了解）</li>\n</ul>\n<h4 id=\"Thread\"><a href=\"#Thread\" class=\"headerlink\" title=\"Thread\"></a>Thread</h4><ol>\n<li>自定义线程类继承<strong>Thread类</strong></li>\n<li>重写**run()**方法，编写线程执行体</li>\n<li>创建线程对象，调用**start()**方法启动线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程方式一：继承Thread类，重写run()方法，调用start()开启线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：注意，线程开启不一定立即执行，由cpu调度执行</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 14:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//run方法线程体</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//main线程，主线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程对象</span></span><br><span class=\"line\">        <span class=\"type\">TestThread</span> <span class=\"variable\">testThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用start()方法开启线程</span></span><br><span class=\"line\">        testThread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Runnable\"><a href=\"#Runnable\" class=\"headerlink\" title=\"Runnable\"></a>Runnable</h4><ol>\n<li>定义MyRunnable类实现<strong>Runnable类</strong></li>\n<li>实现**run()**方法，编写线程执行体</li>\n<li>创建线程对象，调用**start()**方法启动线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程方式2：实现Runnable接口，重写run方法，执行线程需要丢入runnable接口实现类，调用start()方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 15:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//run方法线程体</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个runnable接口实现类对象</span></span><br><span class=\"line\">        <span class=\"type\">TestThread2</span> <span class=\"variable\">testThread2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class=\"line\">        <span class=\"comment\">//Thread thread = new Thread(testThread2);</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//thread.start();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(testThread2).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li><u><em>继承Thread类</em></u><ul>\n<li>子类继承Thread类具备多线程能力</li>\n<li>启动线程：子类对象.start()</li>\n<li><strong>不建议使用：避免OOP单继承局限性</strong></li>\n</ul>\n</li>\n<li><u><em>实现Runnable接口</em></u><ul>\n<li>实现接口Runnable具备多线程能力</li>\n<li>启动线程：传入目标对象+Thread对象.start()</li>\n<li><strong>推荐使用：避免单线程局限性，灵活方便，方便同一个对象被多个线程使用</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.applet.Main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 多个线程同时操作同一个对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 卖火车票的例子</span></span><br><span class=\"line\"><span class=\"comment\"> * 发现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 15:27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread3</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//票数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">ticketNums</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ticketNums &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//模拟延时</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;---&gt;拿到了第&quot;</span> + ticketNums-- + <span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestThread3</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;小明&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;小黄&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;小黑&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210402153415.png\" alt=\"image-20210402153407320\" style=\"zoom: 33%;\" />\n\n<h4 id=\"模拟龟兔赛跑\"><a href=\"#模拟龟兔赛跑\" class=\"headerlink\" title=\"模拟龟兔赛跑\"></a>模拟龟兔赛跑</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模拟龟兔赛跑</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 22:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Race</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//胜利者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String winner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//模拟兔子休息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"string\">&quot;兔子&quot;</span>) &amp;&amp; i%<span class=\"number\">10</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//判断比赛是否结束</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> gameOver(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;--&gt;跑了&quot;</span> + i + <span class=\"string\">&quot;步&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否完成</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">gameOver</span><span class=\"params\">(<span class=\"type\">int</span> steps)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有胜利者</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (winner != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (steps &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                winner = Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;winner is &quot;</span> + winner);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Race</span> <span class=\"variable\">race</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Race</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(race,<span class=\"string\">&quot;乌龟&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(race,<span class=\"string\">&quot;兔子&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Callable接口（了解）\"><a href=\"#Callable接口（了解）\" class=\"headerlink\" title=\"Callable接口（了解）\"></a>Callable接口（了解）</h4><ol>\n<li>实现Callable接口，需要返回值类型</li>\n<li>重写call方法，需要抛出异常</li>\n<li>创建目标对象</li>\n<li>创建执行服务：ExecutorService ser = Executors.newFixedThreadPool(1);</li>\n<li>提交执行：Future<Boolean> result = ser.submit(callable);</li>\n<li>获取结果：boolean r1 = result.get();</li>\n<li>关闭服务：ser.shutdownNow();</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程创建方式三：实现Callable接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：callable的好处： 1.有返回值 2.可以抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 23:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestCallable</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Boolean&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个runnable接口实现类对象</span></span><br><span class=\"line\">        <span class=\"type\">TestCallable</span> <span class=\"variable\">testCallable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCallable</span>();</span><br><span class=\"line\">        <span class=\"type\">TestCallable</span> <span class=\"variable\">testCallable1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCallable</span>();</span><br><span class=\"line\">        <span class=\"type\">TestCallable</span> <span class=\"variable\">testCallable2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCallable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建执行服务</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">ser</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//提交执行</span></span><br><span class=\"line\">        Future&lt;Boolean&gt; r1 = ser.submit(testCallable);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r2 = ser.submit(testCallable1);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r3 = ser.submit(testCallable2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取结果</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs1</span> <span class=\"operator\">=</span> r1.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs2</span> <span class=\"operator\">=</span> r2.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs3</span> <span class=\"operator\">=</span> r3.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关闭服务</span></span><br><span class=\"line\">        ser.shutdownNow();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现静态代理</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态代理模式总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * 真实对象和代理对象都要实现同一个接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理对象要代理真实角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 好处：</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理对象可以做很多真实对象做不了的事情</span></span><br><span class=\"line\"><span class=\"comment\"> * 真实对象专注做自己的事情</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 0:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StaticProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//你要结婚</span></span><br><span class=\"line\">        <span class=\"type\">You</span> <span class=\"variable\">you</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">You</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//线程中的代理模式</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; System.out.println(<span class=\"string\">&quot;我爱你&quot;</span>)).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">WeddingCompany</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">You</span>()).HappyMarry();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Marry</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//真实角色，你去结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">You</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;王老师要结婚了，超开心！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理角色，帮助你结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WeddingCompany</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//代理谁 --&gt; 真实角色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Marry target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeddingCompany</span><span class=\"params\">(Marry target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target.HappyMarry(); <span class=\"comment\">//这就是真实对象</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之后，收尾款&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之前，布置现场&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><ul>\n<li><strong>为什么要使用lambda表达式</strong><ul>\n<li>避免匿名内部类定义过多</li>\n<li>可以让你的代码看起来很简洁</li>\n<li>去掉了一堆没有意义的代码，只留下核心逻辑</li>\n</ul>\n</li>\n<li><strong>注意：<u>接口必须为函数式接口（只有一个抽象方法）</u></strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lambda;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-01 23:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.使用接口实现类</span></span><br><span class=\"line\">        <span class=\"type\">Comparator</span> <span class=\"variable\">comparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyComparetor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.使用匿名内部类</span></span><br><span class=\"line\">        <span class=\"type\">Comparator</span> <span class=\"variable\">comparator1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.使用lambda表达式来实现接口</span></span><br><span class=\"line\">        <span class=\"type\">Comparator</span> <span class=\"variable\">comparator2</span> <span class=\"operator\">=</span> (a,b) -&gt; a-b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComparetor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparator</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Comparator</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><ul>\n<li>lambda表达式只能有一行代码的情况下才能简化成一行，如果有多行，那么就用代码块包裹</li>\n<li>前提是接口为函数式接口（接口中只有一个方法）</li>\n<li>多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h3><h4 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210403003514.jpeg\" alt=\"img\"></p>\n<ol>\n<li><p>**新建(NEW)**：新创建了一个线程对象。</p>\n</li>\n<li><p>**可运行(RUNNABLE)**：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。</p>\n</li>\n<li><p>**运行(RUNNING)**：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。</p>\n</li>\n<li><p>**阻塞(BLOCKED)**：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种： </p>\n<blockquote>\n<p>(一). 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。<br>(二). 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。<br>(三). 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</p>\n</blockquote>\n</li>\n<li><p>**死亡(DEAD)**：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>\n</li>\n</ol>\n<h4 id=\"线程方法\"><a href=\"#线程方法\" class=\"headerlink\" title=\"线程方法\"></a>线程方法</h4><table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">setPriority(int newPriority)</td>\n<td align=\"center\">更改线程的优先级</td>\n</tr>\n<tr>\n<td align=\"center\">static void sleep(long millis)</td>\n<td align=\"center\">在指定毫秒数内让当前正在执行的线程休眠</td>\n</tr>\n<tr>\n<td align=\"center\">void join()</td>\n<td align=\"center\">等待该线程终止</td>\n</tr>\n<tr>\n<td align=\"center\">static void yield()</td>\n<td align=\"center\">暂停当前正在执行的线程对象，并执行其他线程</td>\n</tr>\n<tr>\n<td align=\"center\">void interrupt()</td>\n<td align=\"center\">中断线程，别用这个方式</td>\n</tr>\n<tr>\n<td align=\"center\">boolean isAlive()</td>\n<td align=\"center\">测试线程是否处于活动状态</td>\n</tr>\n</tbody></table>\n<h4 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h4><ul>\n<li>不推荐使用JDK提供的stop()、destroy()方法。*<u>【已废弃】</u>*</li>\n<li>推荐线程自己停止下来</li>\n<li>建议使用一个标志位进行终止变量，当flag=false，则终止线程运行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.generic.NEW;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试stop</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.建议线程正常停止 --&gt; 利用次数，不建议死循环</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.建议使用标志位 --&gt;设置一个标志位</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.不要使用stop()获取destroy()等过时或者JDK不建议使用的方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 0:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestStop</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.设置一个标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;run...Thread&quot;</span> + i++);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.设置一个公开的方法停止线程，转换标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestStop</span> <span class=\"variable\">testStop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestStop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(testStop).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main&quot;</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">900</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用stop方法切换标志位，让线程停止</span></span><br><span class=\"line\">                testStop.stop();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程该停止了&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程休眠\"><a href=\"#线程休眠\" class=\"headerlink\" title=\"线程休眠\"></a>线程休眠</h4><ul>\n<li>sleep(时间)指定当前线程线程阻塞的毫秒数</li>\n<li>sleep存在异常InterruptedException</li>\n<li>sleep时间达到后线程进入就绪状态</li>\n<li>sleep可以模拟网络延时，倒计时等</li>\n<li>每一个对象都有一个锁，sleep不会释放锁</li>\n</ul>\n<h4 id=\"线程礼让\"><a href=\"#线程礼让\" class=\"headerlink\" title=\"线程礼让\"></a>线程礼让</h4><ul>\n<li>礼让线程，让当前正在执行的线程暂停，但不堵塞</li>\n<li>将线程从运行状态转为就绪状态</li>\n<li>**<u>让cpu重新调度，礼让不一定成功，看cpu心情</u>*</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试礼让线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 礼让不一定成功，看cpu心情</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 1:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestYield</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyYield</span> <span class=\"variable\">myYield</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyYield</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">&quot;a&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">&quot;b&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyYield</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;线程正在执行&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//礼让</span></span><br><span class=\"line\">        Thread.yield();</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;线程停止执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h4><ul>\n<li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>\n<li>可以想象成插队</li>\n</ul>\n<h4 id=\"观测线程状态\"><a href=\"#观测线程状态\" class=\"headerlink\" title=\"观测线程状态\"></a>观测线程状态</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 观察测试线程的状态</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 1:11</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;///&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察状态</span></span><br><span class=\"line\">        Thread.<span class=\"type\">State</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> thread.getState();</span><br><span class=\"line\">        System.out.println(state);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察启动后</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        state = thread.getState();</span><br><span class=\"line\">        System.out.println(state);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//只要线程不终止，就一直输出状态</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (state != Thread.State.TERMINATED)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"comment\">//更新线程状态</span></span><br><span class=\"line\">            state = thread.getState();</span><br><span class=\"line\">            System.out.println(state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h4><ul>\n<li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度那个线程来执行</li>\n<li>线程的优先级用数字表示，范围从1~10<ul>\n<li>Thread.MIN_PRIORITY = 1</li>\n<li>Thread.MAX_PRIORITY = 10</li>\n<li>Thread.NORM_PRIORITY = 5</li>\n</ul>\n</li>\n<li>使用以下方式改变或获取优先级<ul>\n<li>getPriority()、setPriority(int xxx)</li>\n</ul>\n</li>\n</ul>\n<p><em><u><strong>注意：优先级的设定一定要在启动之前；优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看cpu的调度</strong></u></em></p>\n<h4 id=\"守护-daemon-线程\"><a href=\"#守护-daemon-线程\" class=\"headerlink\" title=\"守护(daemon)线程\"></a>守护(daemon)线程</h4><ul>\n<li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li>\n<li>虚拟机必须确保用户线程执行完毕</li>\n<li>虚拟机不用等待守护线程执行完毕</li>\n<li>如，后台记录操作日志，监控内存，垃圾回收等待</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试守护线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 上帝守护你</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 1:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestDaemon</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">God</span> <span class=\"variable\">god</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">God</span>();</span><br><span class=\"line\">        <span class=\"type\">You</span> <span class=\"variable\">you</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">You</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(god);</span><br><span class=\"line\">        <span class=\"comment\">//默认是false表示是用户线程，正常的线程都是用户线程</span></span><br><span class=\"line\">        thread.setDaemon(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(you).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上帝</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">God</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;====上帝保佑你&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//你</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">You</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">36500</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你一生都开心的或者&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====goodbyte&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多线程常见面试题\"><a href=\"#多线程常见面试题\" class=\"headerlink\" title=\"多线程常见面试题\"></a>多线程常见面试题</h3><h4 id=\"1、Java中实现多线程有几种方法\"><a href=\"#1、Java中实现多线程有几种方法\" class=\"headerlink\" title=\"1、Java中实现多线程有几种方法\"></a>1、Java中实现多线程有几种方法</h4><ul>\n<li>继承Thread类</li>\n<li>实现Runnable接口</li>\n<li>实现Callable接口，通过FutureTask包装器来创建Thread线程</li>\n<li>使用ExecutorService、Callable、Future实现有返回值的多线程（实际上就是使用ExecutorService管理上面三种方式）</li>\n</ul>\n<h4 id=\"2、如何停止一个正在运行的线程\"><a href=\"#2、如何停止一个正在运行的线程\" class=\"headerlink\" title=\"2、如何停止一个正在运行的线程\"></a>2、如何停止一个正在运行的线程</h4><ul>\n<li>使用退出标志，使线程正常退出，也就是当线程的run方法执行完毕后终止</li>\n<li>使用stop、destroy方法强行停止线程，不过不推荐这个方法</li>\n<li>使用interrupt方法中断线程</li>\n</ul>\n<h4 id=\"3、notify-和notifyAll-有什么区别\"><a href=\"#3、notify-和notifyAll-有什么区别\" class=\"headerlink\" title=\"3、notify()和notifyAll()有什么区别\"></a>3、notify()和notifyAll()有什么区别</h4><ul>\n<li>notifyAll()唤醒所有等待线程，notify()随机唤醒一个</li>\n<li>notify()使用不当可能会造成死锁</li>\n</ul>\n<h4 id=\"4、sleep-和wait-有什么区别？\"><a href=\"#4、sleep-和wait-有什么区别？\" class=\"headerlink\" title=\"4、sleep()和wait() 有什么区别？\"></a>4、sleep()和wait() 有什么区别？</h4><ul>\n<li>来自不同的类，sleep()Thread类的一个静态方法，wait()是Object类的一个成员方法</li>\n<li>sleep()不会释放锁，执行此方法的线程暂停指定的时间</li>\n<li>而wait()会释放锁，进入等待该对象的等待锁定池中         </li>\n</ul>\n<h4 id=\"5、Thread-类中的start-和-run-方法有什么区别？\"><a href=\"#5、Thread-类中的start-和-run-方法有什么区别？\" class=\"headerlink\" title=\"5、Thread 类中的start() 和 run() 方法有什么区别？\"></a>5、Thread 类中的start() 和 run() 方法有什么区别？</h4><ul>\n<li>start()方法是用来启动被创建的线程，此时线程为就绪状态，等待cpu的调度执行，而cpu调度执行时就是执行run()方法中的内容，当run()方法完成后，线程也就终止了。</li>\n<li>直接调用run()方法并不能起到多线程的作用，只是作为普通方法进行调用，程序中也就只有main主线程一个线程。</li>\n</ul>\n<h4 id=\"6、为什么wait-notify-和-notifyAll这些方法不在thread类里面？\"><a href=\"#6、为什么wait-notify-和-notifyAll这些方法不在thread类里面？\" class=\"headerlink\" title=\"6、为什么wait, notify 和 notifyAll这些方法不在thread类里面？\"></a>6、为什么wait, notify 和 notifyAll这些方法不在thread类里面？</h4><p>明显的原因是Java中提供的锁是对象级的而不是线程级的，每个对象都有一把锁，通过线程获得。锁是属于对象的。</p>\n<h2 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h2><p>多个线程操作同一个资源</p>\n<h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p><u>并发：<strong>同一个对象</strong>被<strong>多个线程</strong>同时操作</u></p>\n<p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步，线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面的线程使用完毕，下一个线程再使用。</p>\n<h3 id=\"队列和锁\"><a href=\"#队列和锁\" class=\"headerlink\" title=\"队列和锁\"></a>队列和锁</h3><p><strong>队列+锁</strong>才能解决多线程的安全性</p>\n<h3 id=\"线程同步-1\"><a href=\"#线程同步-1\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><p>由于同一进程的多个线程共享一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<strong>锁机制synchronized</strong>，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可。但存在以下问题：</p>\n<ul>\n<li>一个线程持有锁会导致其他所有需要此锁的线程挂起；</li>\n<li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题；</li>\n</ul>\n<h3 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h3><ul>\n<li>synchronized关键字，它包括两种用法：synchronized方法和synchronized块</li>\n<li>synchronized方法控制“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</li>\n<li><em><u><strong>缺陷：若将一个大的方法声明为synchronized将会影响效率</strong></u></em></li>\n</ul>\n<h3 id=\"同步块\"><a href=\"#同步块\" class=\"headerlink\" title=\"同步块\"></a>同步块</h3><ul>\n<li>同步块：synchronized**(Obj)**{}</li>\n<li>Obj称之为同步监视器<ul>\n<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>\n<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class</li>\n</ul>\n</li>\n<li>同步监视器的执行过程<ol>\n<li>第一个线程访问，锁定同步监视器，执行其中代码</li>\n<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>\n<li>第一个线程访问完毕，解锁同步监视器</li>\n<li>第二个线程方法，发现同步监视器没有锁，然后锁定并访问</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有<strong>“两个以上对象的锁”</strong>时，就可能会发生“死锁”的问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sync;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 14:07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeadLock</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Makeup</span> <span class=\"variable\">g1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Makeup</span>(<span class=\"number\">0</span>,<span class=\"string\">&quot;灰姑凉&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Makeup</span> <span class=\"variable\">g2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Makeup</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;白雪公主&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        g1.start();</span><br><span class=\"line\">        g2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//口红</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lipstick</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//镜子</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Mirror</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Makeup</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//需要的资源只有一份，用static来保证只有一份</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Lipstick</span> <span class=\"variable\">lipstick</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Lipstick</span>();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Mirror</span> <span class=\"variable\">mirror</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Mirror</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//选择</span></span><br><span class=\"line\">    <span class=\"type\">int</span> choice;</span><br><span class=\"line\">    <span class=\"comment\">//使用化妆品的人</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    Makeup(<span class=\"type\">int</span> choice, String name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.choice = choice;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//化妆</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            makeup();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//化妆，互相持有对方的锁，就是需要对方的资源</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeup</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (choice == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获得口红的锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lipstick) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得口红的锁&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"comment\">//一秒钟后想获得镜子的锁</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (mirror) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得镜子的锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获得镜子的锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lipstick) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得镜子的锁&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                <span class=\"comment\">//两秒钟后想获得口红的锁</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (mirror) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得口红的锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>产生死锁的四个必要条件：</p>\n<ul>\n<li>互斥条件：一个资源每次只能被一个进程使用</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li>\n<li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</li>\n<li>循环等待条件：若干个进程之间形成一种头尾相接的循环等待资源关系</li>\n</ul>\n<h3 id=\"Lock锁\"><a href=\"#Lock锁\" class=\"headerlink\" title=\"Lock锁\"></a>Lock锁</h3><p>常用实现类：ReentrantLock（可重入锁）</p>\n<h4 id=\"synchronized与Lock的对比\"><a href=\"#synchronized与Lock的对比\" class=\"headerlink\" title=\"synchronized与Lock的对比\"></a>synchronized与Lock的对比</h4><ul>\n<li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，除了作用域自动释放</li>\n<li>Lock只有代码块锁，synchronized有代码块和方法锁</li>\n<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li>\n<li>优先使用顺序：<ul>\n<li>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h3><p>Java提供了几个方法解决线程之间的通信问题</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>wait()</td>\n<td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td>wait(long timeout)</td>\n<td>指定等待的毫秒数</td>\n</tr>\n<tr>\n<td>notify()</td>\n<td>唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td>notifyAll()</td>\n<td>唤醒同一对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>\n</tr>\n</tbody></table>\n<h4 id=\"并发协作模型“生产者-消费者模式”-–-gt-管程法\"><a href=\"#并发协作模型“生产者-消费者模式”-–-gt-管程法\" class=\"headerlink\" title=\"并发协作模型“生产者/消费者模式” –&gt; 管程法\"></a>并发协作模型“生产者/消费者模式” –&gt; 管程法</h4><ul>\n<li>生产者：负责生产数据的模块</li>\n<li>消费者：负责处理数据的模块</li>\n<li>缓冲区：消费者不能直接使用生产者的数据，他们之间又个缓冲区</li>\n</ul>\n<p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据</strong></p>\n<h4 id=\"并发协作模型“生产者-消费者模式”-–-gt-信号灯法\"><a href=\"#并发协作模型“生产者-消费者模式”-–-gt-信号灯法\" class=\"headerlink\" title=\"并发协作模型“生产者/消费者模式” –&gt; 信号灯法\"></a>并发协作模型“生产者/消费者模式” –&gt; 信号灯法</h4><p>通过一个标志判断是否等待/唤醒</p>\n<h3 id=\"使用线程池\"><a href=\"#使用线程池\" class=\"headerlink\" title=\"使用线程池\"></a>使用线程池</h3><ul>\n<li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。类似生活中的公共交通工具。</li>\n<li>好处：<ul>\n<li>提高响应速度（减少了创建新线程的时间）</li>\n<li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li>\n<li>便于线程管理（···）<ul>\n<li>corePoolSize：核心池的大小</li>\n<li>maximumPoolSize：最大线程数</li>\n<li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用：<ul>\n<li>JDK5.0起提供了线程池相关的API：<strong>ExecutorService</strong>和<strong>Executors</strong></li>\n<li>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor<ul>\n<li><code>void execute(Runnable command)</code>：执行任务/命令，没有返回值，一般用来执行Runnable</li>\n<li><code>&lt;T&gt;Future&lt;T&gt; submit(Callable&lt;T&gt; task) </code>：执行任务，有返回值，一般用来执行Callable</li>\n<li><code>void shutdown()</code>：关闭连接池</li>\n</ul>\n</li>\n<li>Executors：工具类，线程池的工厂类，用于创建并返回不同类型的线程池</li>\n</ul>\n</li>\n</ul>\n","more":"<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><h3 id=\"Process-与-Thread（进程与线程）\"><a href=\"#Process-与-Thread（进程与线程）\" class=\"headerlink\" title=\"Process 与 Thread（进程与线程）\"></a>Process 与 Thread（进程与线程）</h3><ul>\n<li>说起进程，就不得不说下<strong>程序</strong>。程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</li>\n<li>而<strong>进程</strong>则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位。</li>\n<li>通常在一个进程中可以包含若干个<strong>线程</strong>，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU调度和执行的单位。</li>\n</ul>\n<h3 id=\"多线程核心概念\"><a href=\"#多线程核心概念\" class=\"headerlink\" title=\"多线程核心概念\"></a>多线程核心概念</h3><ul>\n<li>线程就是独立的执行路径；</li>\n<li>在程序运行时，就是没有自己创建线程，后台也会有多个线程，如主线程、gc线程；</li>\n<li>main()线程称之为主线程，为系统的入口，用于执行整个程序；</li>\n<li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为干预的；</li>\n<li>对同一份资源操作时，会存在资 源抢占问题，需要加入并发控制；</li>\n<li>线程会带来额外的开销，如CPU调度时间，并发控制开销；</li>\n<li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致；</li>\n</ul>\n<h3 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h3><p>共有三种方式：Thread、Runnable、Callable</p>\n<ul>\n<li>Thread.class -&gt; 继承Thread类（重点）</li>\n<li>Runnable接口 -&gt; 实现Runnable接口（重点）</li>\n<li>Callable接口 -&gt; 实现Callable接口（了解）</li>\n</ul>\n<h4 id=\"Thread\"><a href=\"#Thread\" class=\"headerlink\" title=\"Thread\"></a>Thread</h4><ol>\n<li>自定义线程类继承<strong>Thread类</strong></li>\n<li>重写**run()**方法，编写线程执行体</li>\n<li>创建线程对象，调用**start()**方法启动线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程方式一：继承Thread类，重写run()方法，调用start()开启线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：注意，线程开启不一定立即执行，由cpu调度执行</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 14:59</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//run方法线程体</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//main线程，主线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程对象</span></span><br><span class=\"line\">        <span class=\"type\">TestThread</span> <span class=\"variable\">testThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用start()方法开启线程</span></span><br><span class=\"line\">        testThread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Runnable\"><a href=\"#Runnable\" class=\"headerlink\" title=\"Runnable\"></a>Runnable</h4><ol>\n<li>定义MyRunnable类实现<strong>Runnable类</strong></li>\n<li>实现**run()**方法，编写线程执行体</li>\n<li>创建线程对象，调用**start()**方法启动线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程方式2：实现Runnable接口，重写run方法，执行线程需要丢入runnable接口实现类，调用start()方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 15:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//run方法线程体</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个runnable接口实现类对象</span></span><br><span class=\"line\">        <span class=\"type\">TestThread2</span> <span class=\"variable\">testThread2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class=\"line\">        <span class=\"comment\">//Thread thread = new Thread(testThread2);</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//thread.start();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(testThread2).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li><u><em>继承Thread类</em></u><ul>\n<li>子类继承Thread类具备多线程能力</li>\n<li>启动线程：子类对象.start()</li>\n<li><strong>不建议使用：避免OOP单继承局限性</strong></li>\n</ul>\n</li>\n<li><u><em>实现Runnable接口</em></u><ul>\n<li>实现接口Runnable具备多线程能力</li>\n<li>启动线程：传入目标对象+Thread对象.start()</li>\n<li><strong>推荐使用：避免单线程局限性，灵活方便，方便同一个对象被多个线程使用</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.applet.Main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 多个线程同时操作同一个对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 卖火车票的例子</span></span><br><span class=\"line\"><span class=\"comment\"> * 发现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 15:27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread3</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//票数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">ticketNums</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ticketNums &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//模拟延时</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;---&gt;拿到了第&quot;</span> + ticketNums-- + <span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestThread3</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;小明&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;小黄&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;小黑&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210402153415.png\" alt=\"image-20210402153407320\" style=\"zoom: 33%;\" />\n\n<h4 id=\"模拟龟兔赛跑\"><a href=\"#模拟龟兔赛跑\" class=\"headerlink\" title=\"模拟龟兔赛跑\"></a>模拟龟兔赛跑</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 模拟龟兔赛跑</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 22:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Race</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//胜利者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String winner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//模拟兔子休息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"string\">&quot;兔子&quot;</span>) &amp;&amp; i%<span class=\"number\">10</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//判断比赛是否结束</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> gameOver(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;--&gt;跑了&quot;</span> + i + <span class=\"string\">&quot;步&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断是否完成</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">gameOver</span><span class=\"params\">(<span class=\"type\">int</span> steps)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否有胜利者</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (winner != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (steps &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                winner = Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;winner is &quot;</span> + winner);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Race</span> <span class=\"variable\">race</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Race</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(race,<span class=\"string\">&quot;乌龟&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(race,<span class=\"string\">&quot;兔子&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Callable接口（了解）\"><a href=\"#Callable接口（了解）\" class=\"headerlink\" title=\"Callable接口（了解）\"></a>Callable接口（了解）</h4><ol>\n<li>实现Callable接口，需要返回值类型</li>\n<li>重写call方法，需要抛出异常</li>\n<li>创建目标对象</li>\n<li>创建执行服务：ExecutorService ser = Executors.newFixedThreadPool(1);</li>\n<li>提交执行：Future<Boolean> result = ser.submit(callable);</li>\n<li>获取结果：boolean r1 = result.get();</li>\n<li>关闭服务：ser.shutdownNow();</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程创建方式三：实现Callable接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 总结：callable的好处： 1.有返回值 2.可以抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-02 23:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestCallable</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Boolean&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个runnable接口实现类对象</span></span><br><span class=\"line\">        <span class=\"type\">TestCallable</span> <span class=\"variable\">testCallable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCallable</span>();</span><br><span class=\"line\">        <span class=\"type\">TestCallable</span> <span class=\"variable\">testCallable1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCallable</span>();</span><br><span class=\"line\">        <span class=\"type\">TestCallable</span> <span class=\"variable\">testCallable2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestCallable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建执行服务</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">ser</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//提交执行</span></span><br><span class=\"line\">        Future&lt;Boolean&gt; r1 = ser.submit(testCallable);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r2 = ser.submit(testCallable1);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r3 = ser.submit(testCallable2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取结果</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs1</span> <span class=\"operator\">=</span> r1.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs2</span> <span class=\"operator\">=</span> r2.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs3</span> <span class=\"operator\">=</span> r3.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关闭服务</span></span><br><span class=\"line\">        ser.shutdownNow();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程---&quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现静态代理</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态代理模式总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * 真实对象和代理对象都要实现同一个接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理对象要代理真实角色</span></span><br><span class=\"line\"><span class=\"comment\"> * 好处：</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理对象可以做很多真实对象做不了的事情</span></span><br><span class=\"line\"><span class=\"comment\"> * 真实对象专注做自己的事情</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 0:01</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StaticProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//你要结婚</span></span><br><span class=\"line\">        <span class=\"type\">You</span> <span class=\"variable\">you</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">You</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//线程中的代理模式</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; System.out.println(<span class=\"string\">&quot;我爱你&quot;</span>)).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">WeddingCompany</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">You</span>()).HappyMarry();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Marry</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//真实角色，你去结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">You</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;王老师要结婚了，超开心！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理角色，帮助你结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WeddingCompany</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//代理谁 --&gt; 真实角色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Marry target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeddingCompany</span><span class=\"params\">(Marry target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target.HappyMarry(); <span class=\"comment\">//这就是真实对象</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之后，收尾款&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之前，布置现场&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><ul>\n<li><strong>为什么要使用lambda表达式</strong><ul>\n<li>避免匿名内部类定义过多</li>\n<li>可以让你的代码看起来很简洁</li>\n<li>去掉了一堆没有意义的代码，只留下核心逻辑</li>\n</ul>\n</li>\n<li><strong>注意：<u>接口必须为函数式接口（只有一个抽象方法）</u></strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lambda;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-01 23:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLambda</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1.使用接口实现类</span></span><br><span class=\"line\">        <span class=\"type\">Comparator</span> <span class=\"variable\">comparator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyComparetor</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.使用匿名内部类</span></span><br><span class=\"line\">        <span class=\"type\">Comparator</span> <span class=\"variable\">comparator1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.使用lambda表达式来实现接口</span></span><br><span class=\"line\">        <span class=\"type\">Comparator</span> <span class=\"variable\">comparator2</span> <span class=\"operator\">=</span> (a,b) -&gt; a-b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComparetor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparator</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Comparator</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h5 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h5><ul>\n<li>lambda表达式只能有一行代码的情况下才能简化成一行，如果有多行，那么就用代码块包裹</li>\n<li>前提是接口为函数式接口（接口中只有一个方法）</li>\n<li>多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h3><h4 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h4><p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210403003514.jpeg\" alt=\"img\"></p>\n<ol>\n<li><p>**新建(NEW)**：新创建了一个线程对象。</p>\n</li>\n<li><p>**可运行(RUNNABLE)**：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。</p>\n</li>\n<li><p>**运行(RUNNING)**：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。</p>\n</li>\n<li><p>**阻塞(BLOCKED)**：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种： </p>\n<blockquote>\n<p>(一). 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。<br>(二). 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。<br>(三). 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</p>\n</blockquote>\n</li>\n<li><p>**死亡(DEAD)**：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p>\n</li>\n</ol>\n<h4 id=\"线程方法\"><a href=\"#线程方法\" class=\"headerlink\" title=\"线程方法\"></a>线程方法</h4><table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">setPriority(int newPriority)</td>\n<td align=\"center\">更改线程的优先级</td>\n</tr>\n<tr>\n<td align=\"center\">static void sleep(long millis)</td>\n<td align=\"center\">在指定毫秒数内让当前正在执行的线程休眠</td>\n</tr>\n<tr>\n<td align=\"center\">void join()</td>\n<td align=\"center\">等待该线程终止</td>\n</tr>\n<tr>\n<td align=\"center\">static void yield()</td>\n<td align=\"center\">暂停当前正在执行的线程对象，并执行其他线程</td>\n</tr>\n<tr>\n<td align=\"center\">void interrupt()</td>\n<td align=\"center\">中断线程，别用这个方式</td>\n</tr>\n<tr>\n<td align=\"center\">boolean isAlive()</td>\n<td align=\"center\">测试线程是否处于活动状态</td>\n</tr>\n</tbody></table>\n<h4 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h4><ul>\n<li>不推荐使用JDK提供的stop()、destroy()方法。*<u>【已废弃】</u>*</li>\n<li>推荐线程自己停止下来</li>\n<li>建议使用一个标志位进行终止变量，当flag=false，则终止线程运行</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.bcel.internal.generic.NEW;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试stop</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.建议线程正常停止 --&gt; 利用次数，不建议死循环</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.建议使用标志位 --&gt;设置一个标志位</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.不要使用stop()获取destroy()等过时或者JDK不建议使用的方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 0:45</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestStop</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.设置一个标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;run...Thread&quot;</span> + i++);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.设置一个公开的方法停止线程，转换标志位</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">TestStop</span> <span class=\"variable\">testStop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestStop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(testStop).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main&quot;</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">900</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用stop方法切换标志位，让线程停止</span></span><br><span class=\"line\">                testStop.stop();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程该停止了&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程休眠\"><a href=\"#线程休眠\" class=\"headerlink\" title=\"线程休眠\"></a>线程休眠</h4><ul>\n<li>sleep(时间)指定当前线程线程阻塞的毫秒数</li>\n<li>sleep存在异常InterruptedException</li>\n<li>sleep时间达到后线程进入就绪状态</li>\n<li>sleep可以模拟网络延时，倒计时等</li>\n<li>每一个对象都有一个锁，sleep不会释放锁</li>\n</ul>\n<h4 id=\"线程礼让\"><a href=\"#线程礼让\" class=\"headerlink\" title=\"线程礼让\"></a>线程礼让</h4><ul>\n<li>礼让线程，让当前正在执行的线程暂停，但不堵塞</li>\n<li>将线程从运行状态转为就绪状态</li>\n<li>**<u>让cpu重新调度，礼让不一定成功，看cpu心情</u>*</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试礼让线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 礼让不一定成功，看cpu心情</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 1:00</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestYield</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyYield</span> <span class=\"variable\">myYield</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyYield</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">&quot;a&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">&quot;b&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyYield</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;线程正在执行&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//礼让</span></span><br><span class=\"line\">        Thread.yield();</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;线程停止执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h4><ul>\n<li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>\n<li>可以想象成插队</li>\n</ul>\n<h4 id=\"观测线程状态\"><a href=\"#观测线程状态\" class=\"headerlink\" title=\"观测线程状态\"></a>观测线程状态</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 观察测试线程的状态</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 1:11</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;///&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察状态</span></span><br><span class=\"line\">        Thread.<span class=\"type\">State</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> thread.getState();</span><br><span class=\"line\">        System.out.println(state);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察启动后</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        state = thread.getState();</span><br><span class=\"line\">        System.out.println(state);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//只要线程不终止，就一直输出状态</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (state != Thread.State.TERMINATED)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"comment\">//更新线程状态</span></span><br><span class=\"line\">            state = thread.getState();</span><br><span class=\"line\">            System.out.println(state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h4><ul>\n<li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度那个线程来执行</li>\n<li>线程的优先级用数字表示，范围从1~10<ul>\n<li>Thread.MIN_PRIORITY = 1</li>\n<li>Thread.MAX_PRIORITY = 10</li>\n<li>Thread.NORM_PRIORITY = 5</li>\n</ul>\n</li>\n<li>使用以下方式改变或获取优先级<ul>\n<li>getPriority()、setPriority(int xxx)</li>\n</ul>\n</li>\n</ul>\n<p><em><u><strong>注意：优先级的设定一定要在启动之前；优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看cpu的调度</strong></u></em></p>\n<h4 id=\"守护-daemon-线程\"><a href=\"#守护-daemon-线程\" class=\"headerlink\" title=\"守护(daemon)线程\"></a>守护(daemon)线程</h4><ul>\n<li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li>\n<li>虚拟机必须确保用户线程执行完毕</li>\n<li>虚拟机不用等待守护线程执行完毕</li>\n<li>如，后台记录操作日志，监控内存，垃圾回收等待</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试守护线程</span></span><br><span class=\"line\"><span class=\"comment\"> * 上帝守护你</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 1:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestDaemon</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">God</span> <span class=\"variable\">god</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">God</span>();</span><br><span class=\"line\">        <span class=\"type\">You</span> <span class=\"variable\">you</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">You</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(god);</span><br><span class=\"line\">        <span class=\"comment\">//默认是false表示是用户线程，正常的线程都是用户线程</span></span><br><span class=\"line\">        thread.setDaemon(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(you).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上帝</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">God</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;====上帝保佑你&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//你</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">You</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">36500</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你一生都开心的或者&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;====goodbyte&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多线程常见面试题\"><a href=\"#多线程常见面试题\" class=\"headerlink\" title=\"多线程常见面试题\"></a>多线程常见面试题</h3><h4 id=\"1、Java中实现多线程有几种方法\"><a href=\"#1、Java中实现多线程有几种方法\" class=\"headerlink\" title=\"1、Java中实现多线程有几种方法\"></a>1、Java中实现多线程有几种方法</h4><ul>\n<li>继承Thread类</li>\n<li>实现Runnable接口</li>\n<li>实现Callable接口，通过FutureTask包装器来创建Thread线程</li>\n<li>使用ExecutorService、Callable、Future实现有返回值的多线程（实际上就是使用ExecutorService管理上面三种方式）</li>\n</ul>\n<h4 id=\"2、如何停止一个正在运行的线程\"><a href=\"#2、如何停止一个正在运行的线程\" class=\"headerlink\" title=\"2、如何停止一个正在运行的线程\"></a>2、如何停止一个正在运行的线程</h4><ul>\n<li>使用退出标志，使线程正常退出，也就是当线程的run方法执行完毕后终止</li>\n<li>使用stop、destroy方法强行停止线程，不过不推荐这个方法</li>\n<li>使用interrupt方法中断线程</li>\n</ul>\n<h4 id=\"3、notify-和notifyAll-有什么区别\"><a href=\"#3、notify-和notifyAll-有什么区别\" class=\"headerlink\" title=\"3、notify()和notifyAll()有什么区别\"></a>3、notify()和notifyAll()有什么区别</h4><ul>\n<li>notifyAll()唤醒所有等待线程，notify()随机唤醒一个</li>\n<li>notify()使用不当可能会造成死锁</li>\n</ul>\n<h4 id=\"4、sleep-和wait-有什么区别？\"><a href=\"#4、sleep-和wait-有什么区别？\" class=\"headerlink\" title=\"4、sleep()和wait() 有什么区别？\"></a>4、sleep()和wait() 有什么区别？</h4><ul>\n<li>来自不同的类，sleep()Thread类的一个静态方法，wait()是Object类的一个成员方法</li>\n<li>sleep()不会释放锁，执行此方法的线程暂停指定的时间</li>\n<li>而wait()会释放锁，进入等待该对象的等待锁定池中         </li>\n</ul>\n<h4 id=\"5、Thread-类中的start-和-run-方法有什么区别？\"><a href=\"#5、Thread-类中的start-和-run-方法有什么区别？\" class=\"headerlink\" title=\"5、Thread 类中的start() 和 run() 方法有什么区别？\"></a>5、Thread 类中的start() 和 run() 方法有什么区别？</h4><ul>\n<li>start()方法是用来启动被创建的线程，此时线程为就绪状态，等待cpu的调度执行，而cpu调度执行时就是执行run()方法中的内容，当run()方法完成后，线程也就终止了。</li>\n<li>直接调用run()方法并不能起到多线程的作用，只是作为普通方法进行调用，程序中也就只有main主线程一个线程。</li>\n</ul>\n<h4 id=\"6、为什么wait-notify-和-notifyAll这些方法不在thread类里面？\"><a href=\"#6、为什么wait-notify-和-notifyAll这些方法不在thread类里面？\" class=\"headerlink\" title=\"6、为什么wait, notify 和 notifyAll这些方法不在thread类里面？\"></a>6、为什么wait, notify 和 notifyAll这些方法不在thread类里面？</h4><p>明显的原因是Java中提供的锁是对象级的而不是线程级的，每个对象都有一把锁，通过线程获得。锁是属于对象的。</p>\n<h2 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h2><p>多个线程操作同一个资源</p>\n<h3 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h3><p><u>并发：<strong>同一个对象</strong>被<strong>多个线程</strong>同时操作</u></p>\n<p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步，线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面的线程使用完毕，下一个线程再使用。</p>\n<h3 id=\"队列和锁\"><a href=\"#队列和锁\" class=\"headerlink\" title=\"队列和锁\"></a>队列和锁</h3><p><strong>队列+锁</strong>才能解决多线程的安全性</p>\n<h3 id=\"线程同步-1\"><a href=\"#线程同步-1\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><p>由于同一进程的多个线程共享一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<strong>锁机制synchronized</strong>，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可。但存在以下问题：</p>\n<ul>\n<li>一个线程持有锁会导致其他所有需要此锁的线程挂起；</li>\n<li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题；</li>\n</ul>\n<h3 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h3><ul>\n<li>synchronized关键字，它包括两种用法：synchronized方法和synchronized块</li>\n<li>synchronized方法控制“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</li>\n<li><em><u><strong>缺陷：若将一个大的方法声明为synchronized将会影响效率</strong></u></em></li>\n</ul>\n<h3 id=\"同步块\"><a href=\"#同步块\" class=\"headerlink\" title=\"同步块\"></a>同步块</h3><ul>\n<li>同步块：synchronized**(Obj)**{}</li>\n<li>Obj称之为同步监视器<ul>\n<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>\n<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身，或者是class</li>\n</ul>\n</li>\n<li>同步监视器的执行过程<ol>\n<li>第一个线程访问，锁定同步监视器，执行其中代码</li>\n<li>第二个线程访问，发现同步监视器被锁定，无法访问</li>\n<li>第一个线程访问完毕，解锁同步监视器</li>\n<li>第二个线程方法，发现同步监视器没有锁，然后锁定并访问</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有<strong>“两个以上对象的锁”</strong>时，就可能会发生“死锁”的问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> sync;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> IRVING</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-04-03 14:07</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeadLock</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Makeup</span> <span class=\"variable\">g1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Makeup</span>(<span class=\"number\">0</span>,<span class=\"string\">&quot;灰姑凉&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Makeup</span> <span class=\"variable\">g2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Makeup</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;白雪公主&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        g1.start();</span><br><span class=\"line\">        g2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//口红</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lipstick</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//镜子</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Mirror</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Makeup</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//需要的资源只有一份，用static来保证只有一份</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Lipstick</span> <span class=\"variable\">lipstick</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Lipstick</span>();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Mirror</span> <span class=\"variable\">mirror</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Mirror</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//选择</span></span><br><span class=\"line\">    <span class=\"type\">int</span> choice;</span><br><span class=\"line\">    <span class=\"comment\">//使用化妆品的人</span></span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    Makeup(<span class=\"type\">int</span> choice, String name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.choice = choice;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//化妆</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            makeup();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//化妆，互相持有对方的锁，就是需要对方的资源</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeup</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (choice == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获得口红的锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lipstick) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得口红的锁&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"comment\">//一秒钟后想获得镜子的锁</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (mirror) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得镜子的锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获得镜子的锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lipstick) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得镜子的锁&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                <span class=\"comment\">//两秒钟后想获得口红的锁</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (mirror) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot;获得口红的锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>产生死锁的四个必要条件：</p>\n<ul>\n<li>互斥条件：一个资源每次只能被一个进程使用</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li>\n<li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</li>\n<li>循环等待条件：若干个进程之间形成一种头尾相接的循环等待资源关系</li>\n</ul>\n<h3 id=\"Lock锁\"><a href=\"#Lock锁\" class=\"headerlink\" title=\"Lock锁\"></a>Lock锁</h3><p>常用实现类：ReentrantLock（可重入锁）</p>\n<h4 id=\"synchronized与Lock的对比\"><a href=\"#synchronized与Lock的对比\" class=\"headerlink\" title=\"synchronized与Lock的对比\"></a>synchronized与Lock的对比</h4><ul>\n<li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，除了作用域自动释放</li>\n<li>Lock只有代码块锁，synchronized有代码块和方法锁</li>\n<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li>\n<li>优先使用顺序：<ul>\n<li>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h3><p>Java提供了几个方法解决线程之间的通信问题</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>wait()</td>\n<td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td>wait(long timeout)</td>\n<td>指定等待的毫秒数</td>\n</tr>\n<tr>\n<td>notify()</td>\n<td>唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td>notifyAll()</td>\n<td>唤醒同一对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>\n</tr>\n</tbody></table>\n<h4 id=\"并发协作模型“生产者-消费者模式”-–-gt-管程法\"><a href=\"#并发协作模型“生产者-消费者模式”-–-gt-管程法\" class=\"headerlink\" title=\"并发协作模型“生产者/消费者模式” –&gt; 管程法\"></a>并发协作模型“生产者/消费者模式” –&gt; 管程法</h4><ul>\n<li>生产者：负责生产数据的模块</li>\n<li>消费者：负责处理数据的模块</li>\n<li>缓冲区：消费者不能直接使用生产者的数据，他们之间又个缓冲区</li>\n</ul>\n<p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据</strong></p>\n<h4 id=\"并发协作模型“生产者-消费者模式”-–-gt-信号灯法\"><a href=\"#并发协作模型“生产者-消费者模式”-–-gt-信号灯法\" class=\"headerlink\" title=\"并发协作模型“生产者/消费者模式” –&gt; 信号灯法\"></a>并发协作模型“生产者/消费者模式” –&gt; 信号灯法</h4><p>通过一个标志判断是否等待/唤醒</p>\n<h3 id=\"使用线程池\"><a href=\"#使用线程池\" class=\"headerlink\" title=\"使用线程池\"></a>使用线程池</h3><ul>\n<li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。类似生活中的公共交通工具。</li>\n<li>好处：<ul>\n<li>提高响应速度（减少了创建新线程的时间）</li>\n<li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li>\n<li>便于线程管理（···）<ul>\n<li>corePoolSize：核心池的大小</li>\n<li>maximumPoolSize：最大线程数</li>\n<li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用：<ul>\n<li>JDK5.0起提供了线程池相关的API：<strong>ExecutorService</strong>和<strong>Executors</strong></li>\n<li>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor<ul>\n<li><code>void execute(Runnable command)</code>：执行任务/命令，没有返回值，一般用来执行Runnable</li>\n<li><code>&lt;T&gt;Future&lt;T&gt; submit(Callable&lt;T&gt; task) </code>：执行任务，有返回值，一般用来执行Callable</li>\n<li><code>void shutdown()</code>：关闭连接池</li>\n</ul>\n</li>\n<li>Executors：工具类，线程池的工厂类，用于创建并返回不同类型的线程池</li>\n</ul>\n</li>\n</ul>\n","categories":[{"name":"后端开发","path":"api/categories/后端开发.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"Java","path":"api/tags/Java.json"}]}