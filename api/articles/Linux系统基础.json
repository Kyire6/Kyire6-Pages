{"title":"Linux 系统基础","slug":"Linux系统基础","date":"2021-06-23T08:24:44.000Z","updated":"2021-06-23T08:24:44.000Z","comments":true,"path":"api/articles/Linux系统基础.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421091705.jpeg","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421091730.jpeg","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421092008.jpeg","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095447.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095548.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095524.jpeg","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421201636.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421224446.jpeg","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210422001208.jpeg","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210422001803.jpeg"],"content":"<h2 id=\"入门概述\"><a href=\"#入门概述\" class=\"headerlink\" title=\"入门概述\"></a>入门概述</h2><blockquote>\n<p>我们为什么要学习 Linux？</p>\n</blockquote>\n<p>linux 诞生了这么多年，以前还喊着如何能取代 windows 系统，现在这个口号已经小多了，任何事物发展都有其局限性都有其天花板。就如同在国内再搞一个社交软件取代腾讯一样，想想而已基本不可能，因为用户已经习惯于使用微信交流，不是说技术上实现不了解而是老百姓已经习惯了，想让他们不用，即使他们自己不用亲戚朋友还是要用，没有办法的事情。</p>\n<p>用习惯了 windows 操作系统，再让大家切换到别的操作系统基本上是不可能的事情，改变一个人已经养成的习惯太难。没有办法深入到普通老百姓的生活中，并不意味着 linux 就没有用武之地了。在服务器端，在开发领域 linux 倒是越来越受欢迎，很多程序员都觉得不懂点 linux 都觉得不好意思，linux 在开源社区的地位依然岿然不动。</p>\n<p>尤其是作为一个后端程序员，是必须要掌握 Linux 的，因为这都成为了你找工作的基础门槛了，所以不得不学习！</p>\n<blockquote>\n<p>Linux 简介</p>\n</blockquote>\n<p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p>\n<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p>\n<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>\n<blockquote>\n<p>Linux 发行版</p>\n</blockquote>\n<p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421091705.jpeg\" alt=\"img\"></p>\n<p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421091730.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>Linux 应用领域</p>\n</blockquote>\n<p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p>\n<p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p>\n<ul>\n<li>巴西联邦政府由于支持 Linux 而世界闻名。</li>\n<li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li>\n<li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li>\n<li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li>\n<li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li>\n<li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li>\n<li>法国和德国同样开始逐步采用 Linux。</li>\n</ul>\n<blockquote>\n<p>Linux VS Windows</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421092008.jpeg\" alt=\"img\"></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>省略…</p>\n<h2 id=\"走进-Linux-系统\"><a href=\"#走进-Linux-系统\" class=\"headerlink\" title=\"走进 Linux 系统\"></a>走进 Linux 系统</h2><blockquote>\n<p>开机登录</p>\n</blockquote>\n<p>开机会启动许多程序。它们在 Windows 叫做”服务”（service），在 Linux 就叫做”守护进程”（daemon）。</p>\n<p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给 login 程序来验证用户的身份，密码是不显示的，输完回车即可！</p>\n<p>一般来说，用户的登录方式有三种：</p>\n<ul>\n<li>命令行登录</li>\n<li>ssh 登录</li>\n<li>图形界面登录</li>\n</ul>\n<p>最高权限账户为 root，可以操作一切！</p>\n<blockquote>\n<p>关机</p>\n</blockquote>\n<p>在 linux 领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p>\n<p>关机指令为：shutdown：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sync</span> <span class=\"comment\"># 将数据由内存同步到硬盘中。</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown <span class=\"comment\"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h 10 <span class=\"comment\"># 这个命令告诉大家，计算机将在10分钟后关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h now <span class=\"comment\"># 立马关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h 20:25 <span class=\"comment\"># 系统会在今天20:25关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h +10 <span class=\"comment\"># 十分钟后关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –r now <span class=\"comment\"># 系统立马重启</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –r +10 <span class=\"comment\"># 系统十分钟后重启</span></span><br><span class=\"line\"></span><br><span class=\"line\">reboot <span class=\"comment\"># 就是重启，等同于 shutdown –r now</span></span><br><span class=\"line\"></span><br><span class=\"line\">halt <span class=\"comment\"># 关闭系统，等同于shutdown –h now 和 poweroff</span></span><br></pre></td></tr></table></figure>\n\n<p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p>\n<blockquote>\n<p>系统目录结构</p>\n</blockquote>\n<p>登录系统后，在当前命令窗口下输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /</span><br></pre></td></tr></table></figure>\n\n<p>你会看到如下图所示：</p>\n<p>本地虚拟机：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095447.png\" alt=\"image-20210421095447557\"></p>\n<p>云服务器：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095548.png\" alt=\"img\"></p>\n<p>树状目录结构：（Linux 的一切资源都挂载在这个 / 根节点下）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095524.jpeg\" alt=\"img\"></p>\n<p><strong>以下是对这些目录的解释：</strong></p>\n<ul>\n<li><code>/bin</code>：bin 是 Binary 的缩写, 这个目录存放着最经常使用的命令。</li>\n<li><code>/boot</code>： 这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li>\n<li><code>/dev</code> ： dev 是 Device(设备)的缩写, 存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li>\n<li>==<code>/etc</code>： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。==</li>\n<li>==<code>/home</code>：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。==</li>\n<li><code>/lib</code>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。</li>\n<li><code>/lost+found</code>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li>\n<li><code>/media</code>：linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。</li>\n<li><code>/mnt</code>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li>\n<li>==<code>/opt</code>：这是给主机额外安装软件所摆放的目录。比如你安装一个 ORACLE 数据库则就可以放到这个目录下。默认是空的。==</li>\n<li><code>/proc</code>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li>\n<li>==<code>/root</code>：该目录为系统管理员，也称作超级权限者的用户主目录。==</li>\n<li><code>/sbin</code>：s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。</li>\n<li><code>/srv</code>：该目录存放一些服务启动之后需要提取的数据。</li>\n<li><code>/sys</code>：这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</li>\n<li>==<code>/tmp</code>：这个目录是用来存放一些临时文件的。==</li>\n<li>==<code>/usr</code>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。==</li>\n<li><code>/usr/bin</code>： 系统用户使用的应用程序。</li>\n<li><code>/usr/sbin</code>： 超级用户使用的比较高级的管理程序和系统守护程序。</li>\n<li><code>/usr/src</code>： 内核源代码默认的放置目录。</li>\n<li>==<code>/var</code>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。==</li>\n<li><code>/run</code>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li>\n<li><code>/www</code>：存放服务器网站相关的资源，环境，网站的项目</li>\n</ul>\n<h2 id=\"常用的基本命令\"><a href=\"#常用的基本命令\" class=\"headerlink\" title=\"常用的基本命令\"></a>常用的基本命令</h2><h3 id=\"目录管理\"><a href=\"#目录管理\" class=\"headerlink\" title=\"目录管理\"></a>目录管理</h3><blockquote>\n<p>绝对路径、相对路径</p>\n</blockquote>\n<p>我们知道 Linux 的目录结构为树状结构，最顶级的目录为根目录 /。</p>\n<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>\n<p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p>\n<p>常用的：</p>\n<ul>\n<li><code>cd</code>：切换目录命令</li>\n<li><code>./</code>：当前目录</li>\n<li><code>cd ..</code>：返回上一级目录</li>\n</ul>\n<p><strong>绝对路径：</strong></p>\n<p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p>\n<p><strong>相对路径：</strong></p>\n<p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p>\n<blockquote>\n<p>处理目录的常用命令</p>\n</blockquote>\n<p>接下来我们就来看几个常见的处理目录的命令吧：</p>\n<ul>\n<li><code>ls</code>: 列出目录</li>\n<li><code>cd</code>：切换目录</li>\n<li><code>pwd</code>：显示目前的目录</li>\n<li><code>mkdir</code>：创建一个新的目录</li>\n<li><code>rmdir</code>：删除一个空的目录</li>\n<li><code>cp</code>: 复制文件或目录</li>\n<li><code>rm</code>: 移除文件或目录</li>\n<li><code>mv</code>: 移动文件与目录，或修改文件与目录的名称</li>\n</ul>\n<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>\n<blockquote>\n<p>ls - 列出目录</p>\n</blockquote>\n<p>在 Linux 系统当中， ls 命令可能是最常被运行的。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-a</strong> ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>\n<li><strong>-l</strong> ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>\n</ul>\n<p>将目录下的所有文件列出来(含属性与隐藏档)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls -al ~</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>cd - 切换目录</p>\n</blockquote>\n<p>cd 是 Change Directory 的缩写，这是用来变换工作目录的命令。</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> [相对路径或绝对路径]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>pwd - 显示当前所在的目录</p>\n</blockquote>\n<p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kuangshen kuangstudy]<span class=\"comment\">#pwd [-P]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mkdir - 创建新目录</p>\n</blockquote>\n<p>如果想要创建新的目录的话，那么就使用 mkdir (make directory)吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> [-mp] 目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-m</strong> ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>\n<li><strong>-p</strong> ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>\n</ul>\n<blockquote>\n<p>rmdir - 删除空目录</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rmdir</span> [-p] 目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p>\n<p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会学到！</p>\n<blockquote>\n<p>cp - 复制文件或目录</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># cp [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-a</strong>：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>\n<li><strong>-p</strong>：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>\n<li><strong>-d</strong>：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>\n<li><strong>-r</strong>：递归持续复制，用於目录的复制行为；(常用)</li>\n<li><strong>-f</strong>：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>\n<li><strong>-i</strong>：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>\n<li><strong>-l</strong>：进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li>\n<li><strong>-s</strong>：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>\n<li><strong>-u</strong>：若 destination 比 source 旧才升级 destination ！</li>\n</ul>\n<blockquote>\n<p>rm - 移除文件/目录</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> [-fir] 文件或目录</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-f</strong> ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>\n<li><strong>-i</strong> ：互动模式，在删除前会询问使用者是否动作</li>\n<li><strong>-r</strong> ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>\n</ul>\n<blockquote>\n<p>mv - 移动文件或目录/修改名称</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# mv [-fiu] source destination</span><br><span class=\"line\">[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-f</strong> ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>\n<li><strong>-i</strong> ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>\n<li><strong>-u</strong> ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>\n</ul>\n<h3 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h3><blockquote>\n<p>看懂文件属性</p>\n</blockquote>\n<p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>\n<p>在 Linux 中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p>\n <img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421201636.png\" alt=\"image-20210421201636835\" style=\"zoom:67%;\" />\n\n<p>实例中，boot 文件的第一个属性用”d”表示。”d”在 Linux 中代表该文件是一个目录文件。</p>\n<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等：</p>\n<ul>\n<li><strong>当为[ d ]则是目录</strong></li>\n<li><strong>当为[ - ]则是文件</strong></li>\n<li><strong>若是[ l ]则表示为链接文档 ( link file )</strong></li>\n<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )</li>\n<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )</li>\n</ul>\n<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p>\n<p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p>\n<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>\n<p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421224446.jpeg\" alt=\"img\"></p>\n<p>从左至右用 0-9 这些数字来表示。</p>\n<p>第 0 位确定文件类型，第 1-3 位确定属主（该文件的所有者）拥有该文件的权限。第 4-6 位确定属组（所有者的同组用户）拥有该文件的权限，第 7-9 位确定其他用户拥有该文件的权限。</p>\n<p>其中：</p>\n<p>第 1、4、7 位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>\n<p>第 2、5、8 位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p>\n<p>第 3、6、9 位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>\n<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>\n<p>同时，在 Linux 系统中，用户是按组分类的，一个用户属于一个或多个组。</p>\n<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>\n<p>因此，Linux 系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>\n<p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p>\n<blockquote>\n<p>修改文件属性</p>\n</blockquote>\n<p><strong>1、chgrp：更改文件属组</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chgrp</span> [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>\n\n<p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R 的参数，那么该目录下的所有文件的属组都会更改。</p>\n<p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> [–R] 属主名 文件名</span><br><span class=\"line\"><span class=\"built_in\">chown</span> [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure>\n\n<p>==<strong>3、chmod：更改文件 9 个属性</strong>==</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure>\n\n<p>Linux 文件属性有两种设置方法，一种是数字，一种是符号。</p>\n<p>Linux 文件的基本权限就有九个，分别是 owner/group/others 三种身份各有自己的 read/write/execute 权限。</p>\n<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r:4      w:2         x:1</span><br></pre></td></tr></table></figure>\n\n<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p>\n<ul>\n<li>owner = rwx = 4+2+1 = 7</li>\n<li>group = rwx = 4+2+1 = 7</li>\n<li>others= — = 0+0+0 = 0</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 770 filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件内容查看\"><a href=\"#文件内容查看\" class=\"headerlink\" title=\"文件内容查看\"></a>文件内容查看</h3><p>Linux 系统中使用以下命令来查看文件的内容：</p>\n<ul>\n<li>==<code>cat</code> 由第一行开始显示文件内容==</li>\n<li><code>tac</code>从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>\n<li>==<code>nl</code>显示的时候，顺道输出行号！==</li>\n<li><code>more</code>一页一页的显示文件内容（空格代表翻页，enter 代表向下看一行，:f 行号）</li>\n<li>==<code>less</code>与<code>more</code> 类似，但是比 <code>more</code>更好的是，他可以往前翻页！（空格翻页，上下键翻页，退出是 q 命令，查询字符串 / 要查询的字符串向下查询，向上查询使用 ? 要查询的字符串，n 向下寻找，N 向上寻找 ）==</li>\n<li><code>head</code>只看头几行 通过-n 参数来控制显示几行</li>\n<li><code>tail</code>只看尾巴几行</li>\n</ul>\n<p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：<code>man cp</code>。</p>\n<blockquote>\n<p>cat - 由第一行开始显示文件内容</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [-AbEnTv]</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>\n<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>\n<li>-E ：将结尾的断行字节 $ 显示出来；</li>\n<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>\n<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>\n<li>-v ：列出一些看不出来的特殊字符</li>\n</ul>\n<blockquote>\n<p>tac - 由最后一行开始显示文件内容</p>\n</blockquote>\n<p>tac 与 cat 命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=dhcp</span><br><span class=\"line\">DEVICE=eth0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>nl - 显示行号</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nl [-bnw] 文件</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>\n<li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>\n<li>-w ：行号栏位的占用的位数。</li>\n</ul>\n<blockquote>\n<p>more - 一页一页翻动</p>\n</blockquote>\n<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>\n<ul>\n<li>空白键 (space)：代表向下翻一页；</li>\n<li>Enter ：代表向下翻『一行』；</li>\n<li>/字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>\n<li>:f ：立刻显示出档名以及目前显示的行数；</li>\n<li>q ：代表立刻离开 more ，不再显示该文件内容。</li>\n<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>\n</ul>\n<blockquote>\n<p>less - 一页一页翻动</p>\n</blockquote>\n<p>less 运行时可以输入的命令有：</p>\n<ul>\n<li>空白键 ：向下翻动一页；</li>\n<li>[pagedown]：向下翻动一页；</li>\n<li>[pageup] ：向上翻动一页；</li>\n<li>/字串 ：向下搜寻『字串』的功能；</li>\n<li>?字串 ：向上搜寻『字串』的功能；</li>\n<li>n ：重复前一个搜寻 (与 / 或 ? 有关！)</li>\n<li>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>\n<li>q ：离开 less 这个程序；</li>\n</ul>\n<blockquote>\n<p>head - 取出文件前面几行</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head [-n number] 文件</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>\n<blockquote>\n<p>tail - 取出文件后面几行</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail [-n number] 文件</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>\n<blockquote>\n<p>拓展：Linux 链接的概念（了解即可）</p>\n</blockquote>\n<p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p>\n<p>情况下，ln 命令产生硬链接。</p>\n<p><strong>硬连接</strong></p>\n<p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p>\n<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>\n<p><strong>软连接</strong></p>\n<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>\n<h3 id=\"Vim-编辑器\"><a href=\"#Vim-编辑器\" class=\"headerlink\" title=\"Vim 编辑器\"></a>Vim 编辑器</h3><blockquote>\n<p>什么是 Vim 编辑器</p>\n</blockquote>\n<p>Vim 是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>\n<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>\n<p>vim 则可以说是程序开发者的一项很好用的工具。</p>\n<p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>\n<p>连 vim 的官方网站 (<a href=\"http://www.vim.org/\">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>\n<p>vim 键盘图：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210422001208.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>三种使用模式</p>\n</blockquote>\n<p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是：</p>\n<p><strong>命令模式：</strong></p>\n<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p>\n<p>以下是常用的几个命令：</p>\n<ul>\n<li><strong>i</strong> 切换到输入模式，以输入字符。</li>\n<li><strong>x</strong> 删除当前光标所在处的字符。</li>\n<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。（如果是编辑模式，需要先退出编辑模式<code>esc</code>）</li>\n</ul>\n<p>若想要编辑文本：启动 Vim，进入了命令模式，按下 i，切换到输入模式。</p>\n<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>\n<p><strong>输入模式：</strong></p>\n<p>在命令模式下按下 i 就进入了输入模式。</p>\n<p>在输入模式中，可以使用以下按键：</p>\n<ul>\n<li>字符按键以及 Shift 组合，输入字符</li>\n<li>ENTER，回车键，换行</li>\n<li>BACK SPACE，退格键，删除光标前一个字符</li>\n<li>DEL，删除键，删除光标后一个字符</li>\n<li>方向键，在文本中移动光标</li>\n<li>HOME/END，移动光标到行首/行尾</li>\n<li>Page Up/Page Down，上/下翻页</li>\n<li>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</li>\n<li>ESC，退出输入模式，切换到命令模式</li>\n</ul>\n<p><strong>底线命令模式</strong></p>\n<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<ul>\n<li><strong>q</strong> 退出程序</li>\n<li><strong>w</strong> 保存文件</li>\n</ul>\n<p>按 ESC 键可随时退出底线命令模式。</p>\n<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210422001803.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>Vim 按键说明</p>\n</blockquote>\n<p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p>\n<h3 id=\"账号管理\"><a href=\"#账号管理\" class=\"headerlink\" title=\"账号管理\"></a>账号管理</h3><blockquote>\n<p>简介</p>\n</blockquote>\n<p>Linux 系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>\n<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>\n<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>\n<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>\n<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>\n<ul>\n<li>用户账号的添加、删除与修改。</li>\n<li>用户口令的管理。</li>\n<li>用户组的管理。</li>\n</ul>\n<blockquote>\n<p>用户账号的管理</p>\n</blockquote>\n<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>\n<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录 Shell 等资源。</p>\n<blockquote>\n<p>添加账号 - useradd</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>选项 :<ul>\n<li>-c comment 指定一段注释性描述</li>\n<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m 选项，可以创建主目录</li>\n<li>-g 用户组 指定用户所属的用户组</li>\n<li>-G 用户组，用户组 指定用户所属的附加组</li>\n<li>-m 　使用者目录如不存在则自动建立</li>\n<li>-s Shell 文件 指定用户的登录 Shell</li>\n<li>-u 用户号 指定用户的用户号，如果同时有-o 选项，则可以重复使用其他用户的标识号</li>\n</ul>\n</li>\n<li>用户名 :<ul>\n<li>指定新账号的登录名</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>切换用户</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su username <span class=\"comment\">#username:需要切换的用户名</span></span><br><span class=\"line\">sudo su <span class=\"comment\">#普通用户切换到root用户</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>切换用户的命令为：su username 【username 是你的用户名哦】</li>\n<li>从普通用户切换到 root 用户，还可以使用命令：sudo su</li>\n<li>在终端输入 exit 或 logout 或使用快捷方式 ctrl+d，可以退回到原来用户，其实 ctrl+d 也是执行的 exit 命令</li>\n<li>在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在 su 和 username 之间加-，例如：【su - root】</li>\n</ol>\n<p>==$ 表示普通用户==</p>\n<p>==#表示超级用户，也就是 root 用户==</p>\n<blockquote>\n<p>删除用户 - userdel</p>\n</blockquote>\n<p>如果一个用户的账号不再使用，可以从系统中删除。</p>\n<p>删除用户账号就是要将/etc/passwd 等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>\n<p>删除一个已有的用户账号使用 userdel 命令，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kuangshen home]<span class=\"meta\"># userdel -r 用户名</span></span><br></pre></td></tr></table></figure>\n\n<p>此命令删除用户 kuangshen 在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group 等）的记录，同时删除用户的主目录。</p>\n<blockquote>\n<p>修改用户 - usermod</p>\n</blockquote>\n<p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录 Shell 等。</p>\n<p>修改已有用户的信息使用 usermod 命令，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>常用的选项包括-c, -d, -m, -g, -G, -s, -u 以及-o 等，这些选项的意义与 useradd 命令中的选项一样，可以为用户指定新的资源值。</p>\n<blockquote>\n<p>用户密码的管理</p>\n</blockquote>\n<p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>\n<p>指定和修改用户口令的 Shell 命令是 passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p>\n<p>命令的格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>可使用的选项：</p>\n<ul>\n<li>-l 锁定口令，即禁用账号。</li>\n<li>-u 口令解锁。</li>\n<li>-d 使账号无口令。</li>\n<li>-f 强迫用户下次登录时修改口令。</li>\n</ul>\n<p>如果默认用户名，则修改当前用户的口令。</p>\n<p>命令修改该用户自己的口令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ passwd</span><br><span class=\"line\">Old password:******</span><br><span class=\"line\">New password:*******</span><br><span class=\"line\">Re-enter new password:*******</span><br></pre></td></tr></table></figure>\n\n<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># passwd kuangshen</span></span><br><span class=\"line\">New password:*******</span><br><span class=\"line\">Re-enter new password:*******</span><br></pre></td></tr></table></figure>\n\n<p>普通用户修改自己的口令时，passwd 命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>\n<p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用 8 位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p>\n<p>为用户指定空口令时，执行下列形式的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># passwd -d kuangshen</span></span><br></pre></td></tr></table></figure>\n\n<p>此命令将用户 kuangshen 的口令删除，这样用户 kuangshen 下一次登录时，系统就不再允许该用户登录了。</p>\n<p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># passwd -l kuangshen</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户组管理\"><a href=\"#用户组管理\" class=\"headerlink\" title=\"用户组管理\"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同 Linux 系统对用户组的规定有所不同，如 Linux 下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>\n<p>用户组的管理涉及用户组的添加、删除和修改。==组的增加、删除和修改实际上就是对/etc/group 文件的更新。==</p>\n<blockquote>\n<p>添加用户组 - groupadd</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd 选项 用户组</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group</span><br></pre></td></tr></table></figure>\n\n<p>可以使用的选项有：</p>\n<ul>\n<li>-g GID 指定新用户组的组标识号（GID）。</li>\n<li>-o 一般与-g 选项同时使用，表示新用户组的 GID 可以与系统已有用户组的 GID 相同。</li>\n</ul>\n<blockquote>\n<p>删除用户组 - groupdel</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel 用户组</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改用户组 - groupmod</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod 选项 用户组</span><br></pre></td></tr></table></figure>\n\n<p>常用的选项有：</p>\n<ul>\n<li>-g GID 为用户组指定新的组标识号。</li>\n<li>-o 与-g 选项同时使用，用户组的新 GID 可以与系统已有用户组的 GID 相同。</li>\n<li>-n 新用户组 将用户组的名字改为新名字</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此命令将组group2的组标识号修改为102。</span></span><br><span class=\"line\">groupmod -g 102 group2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将组group2的标识号改为10000，组名修改为group3。</span></span><br><span class=\"line\">groupmod –g 10000 -n group3 group2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>切换组</p>\n</blockquote>\n<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>\n<p>用户可以在登录后，使用命令 newgrp 切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ newgrp root</span><br></pre></td></tr></table></figure>\n\n<p>这条命令将当前用户切换到 root 用户组，前提条件是 root 用户组确实是该用户的主组或附加组。</p>\n<blockquote>\n<p>/etc/passwd</p>\n</blockquote>\n<p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>\n<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group 等。</p>\n<p>下面分别介绍这些文件的内容。</p>\n<p>/etc/passwd 文件是用户管理工作涉及的最重要的一个文件。</p>\n<p>Linux 系统中的每个用户都在/etc/passwd 文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>\n<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃ cat <span class=\"keyword\">/etc/</span>passwd</span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">root:</span>x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:Superuser:/:</span><br><span class=\"line\"><span class=\"symbol\">daemon:</span>x:<span class=\"number\">1</span>:<span class=\"number\">1</span>:System daemons:/etc:</span><br><span class=\"line\"><span class=\"symbol\">bin:</span>x:<span class=\"number\">2</span>:<span class=\"number\">2</span>:Owner of system commands:/bin:</span><br><span class=\"line\"><span class=\"symbol\">sys:</span>x:<span class=\"number\">3</span>:<span class=\"number\">3</span>:Owner of system files:<span class=\"keyword\">/usr/</span>sys:</span><br><span class=\"line\"><span class=\"symbol\">adm:</span>x:<span class=\"number\">4</span>:<span class=\"number\">4</span>:System accounting:<span class=\"keyword\">/usr/</span>adm:</span><br><span class=\"line\"><span class=\"symbol\">uucp:</span>x:<span class=\"number\">5</span>:<span class=\"number\">5</span>:UUCP administrator:<span class=\"keyword\">/usr/</span>lib/uucp:</span><br><span class=\"line\"><span class=\"symbol\">auth:</span>x:<span class=\"number\">7</span>:<span class=\"number\">21</span>:Authentication administrator:<span class=\"keyword\">/tcb/</span>files/auth:</span><br><span class=\"line\"><span class=\"symbol\">cron:</span>x:<span class=\"number\">9</span>:<span class=\"number\">16</span>:Cron daemon:<span class=\"keyword\">/usr/</span>spool/cron:</span><br><span class=\"line\"><span class=\"symbol\">listen:</span>x:<span class=\"number\">37</span>:<span class=\"number\">4</span>:Network daemon:<span class=\"keyword\">/usr/</span>net/nls:</span><br><span class=\"line\"><span class=\"symbol\">lp:</span>x:<span class=\"number\">71</span>:<span class=\"number\">18</span>:Printer administrator:<span class=\"keyword\">/usr/</span>spool/lp:</span><br></pre></td></tr></table></figure>\n\n<p>从上面的例子我们可以看到，/etc/passwd 中一行记录对应着一个用户，每行记录又被冒号(:)分隔为 7 个字段，其格式和具体含义如下：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录<span class=\"keyword\">Shell</span></span><br></pre></td></tr></table></figure>\n\n<p>1）”用户名”是代表用户账号的字符串。</p>\n<p>通常长度不超过 8 个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p>\n<p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>\n<p>2）“口令”一些系统中，存放着加密后的用户口令字。</p>\n<p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd 文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多 Linux 系统（如 SVR4）都使用了 shadow 技术，把真正的加密后的用户口令字存放到/etc/shadow 文件中，而在/etc/passwd 文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>\n<p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p>\n<p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录 Shell 等。</p>\n<p>通常用户标识号的取值范围是 0 ～ 65 535。0 是超级用户 root 的标识号，1 ～ 99 由系统保留，作为管理账号，普通用户的标识号从 100 开始。在 Linux 系统中，这个界限是 500。</p>\n<p>4）“组标识号”字段记录的是用户所属的用户组。</p>\n<p>它对应着/etc/group 文件中的一条记录。</p>\n<p>5)“注释性描述”字段记录着用户的一些个人情况。</p>\n<p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的 Linux 系统中，这个字段的格式并没有统一。在许多 Linux 系统中，这个字段存放的是一段任意的注释性描述文字，用作 finger 命令的输出。</p>\n<p>6)“主目录”，也就是用户的起始工作目录。</p>\n<p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>\n<p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即 Shell。</p>\n<p>Shell 是用户与 Linux 系统之间的接口。Linux 的 Shell 有许多种，每种都有不同的特点。常用的有 sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p>\n<p>系统管理员可以根据系统情况和用户习惯为用户指定某个 Shell。如果不指定 Shell，那么系统使用 sh 为默认的登录 Shell，即这个字段的值为/bin/sh。</p>\n<p>用户的登录 Shell 也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p>\n<p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些 Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>\n<p>8)系统中有一类用户称为伪用户（pseudo users）。</p>\n<p>这些用户在/etc/passwd 文件中也占有一条记录，但是不能登录，因为它们的登录 Shell 为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p>\n<p>常见的伪用户如下所示：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">伪 用 户 含 义</span><br><span class=\"line\">bin 拥有可执行的用户命令文件</span><br><span class=\"line\">sys 拥有系统文件</span><br><span class=\"line\">adm 拥有帐户文件</span><br><span class=\"line\">uucp UUCP使用</span><br><span class=\"line\"><span class=\"built_in\">lp</span> <span class=\"built_in\">lp</span>或lpd子系统使用</span><br><span class=\"line\">nobody NFS使用</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>/etc/shadow</p>\n</blockquote>\n<p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet 等，它们也都各自为相关的进程和文件所需要。</strong></p>\n<p>由于/etc/passwd 文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的 Linux 系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow 文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p>\n<p><strong>2、/etc/shadow 中的记录行与/etc/passwd 中的一一对应，它由 pwconv 命令根据/etc/passwd 中的数据自动产生</strong></p>\n<p>它的文件格式与/etc/passwd 类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>“登录名”是与/etc/passwd 文件中的登录名相一致的用户账号</li>\n<li>“口令”字段存放的是加密后的用户口令字，长度为 13 个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li>\n<li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在 SCO Linux 中，这个时间起点是 1970 年 1 月 1 日。</li>\n<li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li>\n<li>“最大时间间隔”指的是口令保持有效的最大天数。</li>\n<li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li>\n<li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li>\n<li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li>\n</ol>\n<blockquote>\n<p>/etc/group</p>\n</blockquote>\n<p>用户组的所有信息都存放在/etc/group 文件中。</p>\n<p>将用户分组是 Linux 系统中对用户进行管理及控制访问权限的一种手段。</p>\n<p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p>\n<p>当一个用户同时是多个组中的成员时，在/etc/passwd 文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p>\n<p>用户要访问属于附加组的文件时，必须首先使用 newgrp 命令使自己成为所要访问的组中的成员。</p>\n<p>用户组的所有信息都存放在/etc/group 文件中。此文件的格式也类似于/etc/passwd 文件，由冒号(:)隔开若干个字段，这些字段有：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">组名:口令:组标识号:组内用户列表</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd 中的登录名一样，组名不应重复。</li>\n<li>“口令”字段存放的是用户组加密后的口令字。一般 Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li>\n<li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li>\n<li>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li>\n</ol>\n<h3 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h3><blockquote>\n<p>概述</p>\n</blockquote>\n<p>Linux 磁盘管理好坏直接关系到整个系统的性能问题。</p>\n<p>Linux 磁盘管理常用命令为 df、du。</p>\n<ul>\n<li>df ：列出文件系统的整体磁盘使用量</li>\n<li>du：检查磁盘空间使用量</li>\n</ul>\n<blockquote>\n<p>df</p>\n</blockquote>\n<p>df 命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">df</span> [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>\n<li>-k ：以 KBytes 的容量显示各文件系统；</li>\n<li>-m ：以 MBytes 的容量显示各文件系统；</li>\n<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>\n<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>\n<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>\n<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>\n</ul>\n<blockquote>\n<p>du</p>\n</blockquote>\n<p>Linux du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看，还是和 df 命令有一些区别的，这里介绍 Linux du 命令。</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">du</span> [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>\n<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>\n<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>\n<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>\n<li>-k ：以 KBytes 列出容量显示；</li>\n<li>-m ：以 MBytes 列出容量显示；</li>\n</ul>\n<blockquote>\n<p>磁盘挂载与卸除</p>\n</blockquote>\n<p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p>\n<p>Linux 的磁盘挂载使用 mount 命令，卸载使用 umount 命令。</p>\n<p>磁盘挂载语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</span><br></pre></td></tr></table></figure>\n\n<p>磁盘卸载命令 umount 语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>\n<li>-n ：不升级 /etc/mtab 情况下卸除。</li>\n</ul>\n<h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><blockquote>\n<p>什么是进程</p>\n</blockquote>\n<ol>\n<li>在 Linux 中，每一个程序都是有自己的一个进程，每一个进程都有一个 id 号！</li>\n<li>每一个进程都会有一个父进程！</li>\n<li>进程可以有两种存在方式：前台！后台运行！</li>\n<li>一般的话服务都是后台运行，基本的程序都是前台进行的！</li>\n</ol>\n<blockquote>\n<p>命令</p>\n</blockquote>\n<p><code>ps</code> 查看当前系统中正在执行的各种进程信息</p>\n<p>参数选项：</p>\n<ul>\n<li>-A 显示当前终端运行的所有的进程信息</li>\n<li>-u 以用户的信息显示进程</li>\n<li>-x 显示后台运行的参数</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ps -aux 查看所有的进程</span></span><br><span class=\"line\">ps -aux|</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># | 在Linux中叫做管道符 A|B</span></span><br><span class=\"line\"><span class=\"comment\"># grep 查找文件中符合条件的字符串</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>ps -ef</strong> ：可以查到父进程的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep mysql <span class=\"comment\">#看父进程我们一般通过目录树结构来查看！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程树</span></span><br><span class=\"line\">pstree -pu</span><br><span class=\"line\">     -p 显示父<span class=\"built_in\">id</span></span><br><span class=\"line\">     -u 显示用户组</span><br></pre></td></tr></table></figure>\n\n<p>结束进程：杀掉进程，等价于 window 结束任务</p>\n<p><strong>kill -9</strong> 进程的 id</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -9 pid</span><br></pre></td></tr></table></figure>\n","more":"<h2 id=\"入门概述\"><a href=\"#入门概述\" class=\"headerlink\" title=\"入门概述\"></a>入门概述</h2><blockquote>\n<p>我们为什么要学习 Linux？</p>\n</blockquote>\n<p>linux 诞生了这么多年，以前还喊着如何能取代 windows 系统，现在这个口号已经小多了，任何事物发展都有其局限性都有其天花板。就如同在国内再搞一个社交软件取代腾讯一样，想想而已基本不可能，因为用户已经习惯于使用微信交流，不是说技术上实现不了解而是老百姓已经习惯了，想让他们不用，即使他们自己不用亲戚朋友还是要用，没有办法的事情。</p>\n<p>用习惯了 windows 操作系统，再让大家切换到别的操作系统基本上是不可能的事情，改变一个人已经养成的习惯太难。没有办法深入到普通老百姓的生活中，并不意味着 linux 就没有用武之地了。在服务器端，在开发领域 linux 倒是越来越受欢迎，很多程序员都觉得不懂点 linux 都觉得不好意思，linux 在开源社区的地位依然岿然不动。</p>\n<p>尤其是作为一个后端程序员，是必须要掌握 Linux 的，因为这都成为了你找工作的基础门槛了，所以不得不学习！</p>\n<blockquote>\n<p>Linux 简介</p>\n</blockquote>\n<p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p>\n<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p>\n<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>\n<blockquote>\n<p>Linux 发行版</p>\n</blockquote>\n<p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421091705.jpeg\" alt=\"img\"></p>\n<p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421091730.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>Linux 应用领域</p>\n</blockquote>\n<p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p>\n<p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p>\n<ul>\n<li>巴西联邦政府由于支持 Linux 而世界闻名。</li>\n<li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li>\n<li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li>\n<li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li>\n<li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li>\n<li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li>\n<li>法国和德国同样开始逐步采用 Linux。</li>\n</ul>\n<blockquote>\n<p>Linux VS Windows</p>\n</blockquote>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421092008.jpeg\" alt=\"img\"></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>省略…</p>\n<h2 id=\"走进-Linux-系统\"><a href=\"#走进-Linux-系统\" class=\"headerlink\" title=\"走进 Linux 系统\"></a>走进 Linux 系统</h2><blockquote>\n<p>开机登录</p>\n</blockquote>\n<p>开机会启动许多程序。它们在 Windows 叫做”服务”（service），在 Linux 就叫做”守护进程”（daemon）。</p>\n<p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给 login 程序来验证用户的身份，密码是不显示的，输完回车即可！</p>\n<p>一般来说，用户的登录方式有三种：</p>\n<ul>\n<li>命令行登录</li>\n<li>ssh 登录</li>\n<li>图形界面登录</li>\n</ul>\n<p>最高权限账户为 root，可以操作一切！</p>\n<blockquote>\n<p>关机</p>\n</blockquote>\n<p>在 linux 领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p>\n<p>关机指令为：shutdown：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sync</span> <span class=\"comment\"># 将数据由内存同步到硬盘中。</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown <span class=\"comment\"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h 10 <span class=\"comment\"># 这个命令告诉大家，计算机将在10分钟后关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h now <span class=\"comment\"># 立马关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h 20:25 <span class=\"comment\"># 系统会在今天20:25关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –h +10 <span class=\"comment\"># 十分钟后关机</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –r now <span class=\"comment\"># 系统立马重启</span></span><br><span class=\"line\"></span><br><span class=\"line\">shutdown –r +10 <span class=\"comment\"># 系统十分钟后重启</span></span><br><span class=\"line\"></span><br><span class=\"line\">reboot <span class=\"comment\"># 就是重启，等同于 shutdown –r now</span></span><br><span class=\"line\"></span><br><span class=\"line\">halt <span class=\"comment\"># 关闭系统，等同于shutdown –h now 和 poweroff</span></span><br></pre></td></tr></table></figure>\n\n<p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p>\n<blockquote>\n<p>系统目录结构</p>\n</blockquote>\n<p>登录系统后，在当前命令窗口下输入命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span> /</span><br></pre></td></tr></table></figure>\n\n<p>你会看到如下图所示：</p>\n<p>本地虚拟机：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095447.png\" alt=\"image-20210421095447557\"></p>\n<p>云服务器：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095548.png\" alt=\"img\"></p>\n<p>树状目录结构：（Linux 的一切资源都挂载在这个 / 根节点下）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421095524.jpeg\" alt=\"img\"></p>\n<p><strong>以下是对这些目录的解释：</strong></p>\n<ul>\n<li><code>/bin</code>：bin 是 Binary 的缩写, 这个目录存放着最经常使用的命令。</li>\n<li><code>/boot</code>： 这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li>\n<li><code>/dev</code> ： dev 是 Device(设备)的缩写, 存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li>\n<li>==<code>/etc</code>： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。==</li>\n<li>==<code>/home</code>：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。==</li>\n<li><code>/lib</code>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。</li>\n<li><code>/lost+found</code>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li>\n<li><code>/media</code>：linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。</li>\n<li><code>/mnt</code>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li>\n<li>==<code>/opt</code>：这是给主机额外安装软件所摆放的目录。比如你安装一个 ORACLE 数据库则就可以放到这个目录下。默认是空的。==</li>\n<li><code>/proc</code>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li>\n<li>==<code>/root</code>：该目录为系统管理员，也称作超级权限者的用户主目录。==</li>\n<li><code>/sbin</code>：s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。</li>\n<li><code>/srv</code>：该目录存放一些服务启动之后需要提取的数据。</li>\n<li><code>/sys</code>：这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</li>\n<li>==<code>/tmp</code>：这个目录是用来存放一些临时文件的。==</li>\n<li>==<code>/usr</code>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。==</li>\n<li><code>/usr/bin</code>： 系统用户使用的应用程序。</li>\n<li><code>/usr/sbin</code>： 超级用户使用的比较高级的管理程序和系统守护程序。</li>\n<li><code>/usr/src</code>： 内核源代码默认的放置目录。</li>\n<li>==<code>/var</code>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。==</li>\n<li><code>/run</code>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li>\n<li><code>/www</code>：存放服务器网站相关的资源，环境，网站的项目</li>\n</ul>\n<h2 id=\"常用的基本命令\"><a href=\"#常用的基本命令\" class=\"headerlink\" title=\"常用的基本命令\"></a>常用的基本命令</h2><h3 id=\"目录管理\"><a href=\"#目录管理\" class=\"headerlink\" title=\"目录管理\"></a>目录管理</h3><blockquote>\n<p>绝对路径、相对路径</p>\n</blockquote>\n<p>我们知道 Linux 的目录结构为树状结构，最顶级的目录为根目录 /。</p>\n<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>\n<p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p>\n<p>常用的：</p>\n<ul>\n<li><code>cd</code>：切换目录命令</li>\n<li><code>./</code>：当前目录</li>\n<li><code>cd ..</code>：返回上一级目录</li>\n</ul>\n<p><strong>绝对路径：</strong></p>\n<p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p>\n<p><strong>相对路径：</strong></p>\n<p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p>\n<blockquote>\n<p>处理目录的常用命令</p>\n</blockquote>\n<p>接下来我们就来看几个常见的处理目录的命令吧：</p>\n<ul>\n<li><code>ls</code>: 列出目录</li>\n<li><code>cd</code>：切换目录</li>\n<li><code>pwd</code>：显示目前的目录</li>\n<li><code>mkdir</code>：创建一个新的目录</li>\n<li><code>rmdir</code>：删除一个空的目录</li>\n<li><code>cp</code>: 复制文件或目录</li>\n<li><code>rm</code>: 移除文件或目录</li>\n<li><code>mv</code>: 移动文件与目录，或修改文件与目录的名称</li>\n</ul>\n<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>\n<blockquote>\n<p>ls - 列出目录</p>\n</blockquote>\n<p>在 Linux 系统当中， ls 命令可能是最常被运行的。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-a</strong> ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>\n<li><strong>-l</strong> ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>\n</ul>\n<p>将目录下的所有文件列出来(含属性与隐藏档)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># ls -al ~</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>cd - 切换目录</p>\n</blockquote>\n<p>cd 是 Change Directory 的缩写，这是用来变换工作目录的命令。</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> [相对路径或绝对路径]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>pwd - 显示当前所在的目录</p>\n</blockquote>\n<p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kuangshen kuangstudy]<span class=\"comment\">#pwd [-P]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mkdir - 创建新目录</p>\n</blockquote>\n<p>如果想要创建新的目录的话，那么就使用 mkdir (make directory)吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> [-mp] 目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-m</strong> ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>\n<li><strong>-p</strong> ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>\n</ul>\n<blockquote>\n<p>rmdir - 删除空目录</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rmdir</span> [-p] 目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p>\n<p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会学到！</p>\n<blockquote>\n<p>cp - 复制文件或目录</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]<span class=\"comment\"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span></span><br><span class=\"line\">[root@www ~]<span class=\"comment\"># cp [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-a</strong>：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>\n<li><strong>-p</strong>：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>\n<li><strong>-d</strong>：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>\n<li><strong>-r</strong>：递归持续复制，用於目录的复制行为；(常用)</li>\n<li><strong>-f</strong>：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>\n<li><strong>-i</strong>：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>\n<li><strong>-l</strong>：进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li>\n<li><strong>-s</strong>：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>\n<li><strong>-u</strong>：若 destination 比 source 旧才升级 destination ！</li>\n</ul>\n<blockquote>\n<p>rm - 移除文件/目录</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> [-fir] 文件或目录</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-f</strong> ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>\n<li><strong>-i</strong> ：互动模式，在删除前会询问使用者是否动作</li>\n<li><strong>-r</strong> ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>\n</ul>\n<blockquote>\n<p>mv - 移动文件或目录/修改名称</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# mv [-fiu] source destination</span><br><span class=\"line\">[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li><strong>-f</strong> ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>\n<li><strong>-i</strong> ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>\n<li><strong>-u</strong> ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>\n</ul>\n<h3 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h3><blockquote>\n<p>看懂文件属性</p>\n</blockquote>\n<p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>\n<p>在 Linux 中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p>\n <img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421201636.png\" alt=\"image-20210421201636835\" style=\"zoom:67%;\" />\n\n<p>实例中，boot 文件的第一个属性用”d”表示。”d”在 Linux 中代表该文件是一个目录文件。</p>\n<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等：</p>\n<ul>\n<li><strong>当为[ d ]则是目录</strong></li>\n<li><strong>当为[ - ]则是文件</strong></li>\n<li><strong>若是[ l ]则表示为链接文档 ( link file )</strong></li>\n<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )</li>\n<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )</li>\n</ul>\n<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p>\n<p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p>\n<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>\n<p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210421224446.jpeg\" alt=\"img\"></p>\n<p>从左至右用 0-9 这些数字来表示。</p>\n<p>第 0 位确定文件类型，第 1-3 位确定属主（该文件的所有者）拥有该文件的权限。第 4-6 位确定属组（所有者的同组用户）拥有该文件的权限，第 7-9 位确定其他用户拥有该文件的权限。</p>\n<p>其中：</p>\n<p>第 1、4、7 位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p>\n<p>第 2、5、8 位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p>\n<p>第 3、6、9 位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p>\n<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>\n<p>同时，在 Linux 系统中，用户是按组分类的，一个用户属于一个或多个组。</p>\n<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>\n<p>因此，Linux 系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>\n<p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p>\n<blockquote>\n<p>修改文件属性</p>\n</blockquote>\n<p><strong>1、chgrp：更改文件属组</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chgrp</span> [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>\n\n<p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R 的参数，那么该目录下的所有文件的属组都会更改。</p>\n<p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> [–R] 属主名 文件名</span><br><span class=\"line\"><span class=\"built_in\">chown</span> [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure>\n\n<p>==<strong>3、chmod：更改文件 9 个属性</strong>==</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure>\n\n<p>Linux 文件属性有两种设置方法，一种是数字，一种是符号。</p>\n<p>Linux 文件的基本权限就有九个，分别是 owner/group/others 三种身份各有自己的 read/write/execute 权限。</p>\n<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r:4      w:2         x:1</span><br></pre></td></tr></table></figure>\n\n<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p>\n<ul>\n<li>owner = rwx = 4+2+1 = 7</li>\n<li>group = rwx = 4+2+1 = 7</li>\n<li>others= — = 0+0+0 = 0</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 770 filename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件内容查看\"><a href=\"#文件内容查看\" class=\"headerlink\" title=\"文件内容查看\"></a>文件内容查看</h3><p>Linux 系统中使用以下命令来查看文件的内容：</p>\n<ul>\n<li>==<code>cat</code> 由第一行开始显示文件内容==</li>\n<li><code>tac</code>从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>\n<li>==<code>nl</code>显示的时候，顺道输出行号！==</li>\n<li><code>more</code>一页一页的显示文件内容（空格代表翻页，enter 代表向下看一行，:f 行号）</li>\n<li>==<code>less</code>与<code>more</code> 类似，但是比 <code>more</code>更好的是，他可以往前翻页！（空格翻页，上下键翻页，退出是 q 命令，查询字符串 / 要查询的字符串向下查询，向上查询使用 ? 要查询的字符串，n 向下寻找，N 向上寻找 ）==</li>\n<li><code>head</code>只看头几行 通过-n 参数来控制显示几行</li>\n<li><code>tail</code>只看尾巴几行</li>\n</ul>\n<p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：<code>man cp</code>。</p>\n<blockquote>\n<p>cat - 由第一行开始显示文件内容</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat [-AbEnTv]</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>\n<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>\n<li>-E ：将结尾的断行字节 $ 显示出来；</li>\n<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>\n<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>\n<li>-v ：列出一些看不出来的特殊字符</li>\n</ul>\n<blockquote>\n<p>tac - 由最后一行开始显示文件内容</p>\n</blockquote>\n<p>tac 与 cat 命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=dhcp</span><br><span class=\"line\">DEVICE=eth0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>nl - 显示行号</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nl [-bnw] 文件</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>\n<li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>\n<li>-w ：行号栏位的占用的位数。</li>\n</ul>\n<blockquote>\n<p>more - 一页一页翻动</p>\n</blockquote>\n<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>\n<ul>\n<li>空白键 (space)：代表向下翻一页；</li>\n<li>Enter ：代表向下翻『一行』；</li>\n<li>/字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>\n<li>:f ：立刻显示出档名以及目前显示的行数；</li>\n<li>q ：代表立刻离开 more ，不再显示该文件内容。</li>\n<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>\n</ul>\n<blockquote>\n<p>less - 一页一页翻动</p>\n</blockquote>\n<p>less 运行时可以输入的命令有：</p>\n<ul>\n<li>空白键 ：向下翻动一页；</li>\n<li>[pagedown]：向下翻动一页；</li>\n<li>[pageup] ：向上翻动一页；</li>\n<li>/字串 ：向下搜寻『字串』的功能；</li>\n<li>?字串 ：向上搜寻『字串』的功能；</li>\n<li>n ：重复前一个搜寻 (与 / 或 ? 有关！)</li>\n<li>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>\n<li>q ：离开 less 这个程序；</li>\n</ul>\n<blockquote>\n<p>head - 取出文件前面几行</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head [-n number] 文件</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>\n<blockquote>\n<p>tail - 取出文件后面几行</p>\n</blockquote>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail [-n number] 文件</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p>\n<blockquote>\n<p>拓展：Linux 链接的概念（了解即可）</p>\n</blockquote>\n<p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p>\n<p>情况下，ln 命令产生硬链接。</p>\n<p><strong>硬连接</strong></p>\n<p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p>\n<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>\n<p><strong>软连接</strong></p>\n<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>\n<h3 id=\"Vim-编辑器\"><a href=\"#Vim-编辑器\" class=\"headerlink\" title=\"Vim 编辑器\"></a>Vim 编辑器</h3><blockquote>\n<p>什么是 Vim 编辑器</p>\n</blockquote>\n<p>Vim 是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>\n<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>\n<p>vim 则可以说是程序开发者的一项很好用的工具。</p>\n<p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>\n<p>连 vim 的官方网站 (<a href=\"http://www.vim.org/\">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>\n<p>vim 键盘图：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210422001208.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>三种使用模式</p>\n</blockquote>\n<p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是：</p>\n<p><strong>命令模式：</strong></p>\n<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p>\n<p>以下是常用的几个命令：</p>\n<ul>\n<li><strong>i</strong> 切换到输入模式，以输入字符。</li>\n<li><strong>x</strong> 删除当前光标所在处的字符。</li>\n<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。（如果是编辑模式，需要先退出编辑模式<code>esc</code>）</li>\n</ul>\n<p>若想要编辑文本：启动 Vim，进入了命令模式，按下 i，切换到输入模式。</p>\n<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>\n<p><strong>输入模式：</strong></p>\n<p>在命令模式下按下 i 就进入了输入模式。</p>\n<p>在输入模式中，可以使用以下按键：</p>\n<ul>\n<li>字符按键以及 Shift 组合，输入字符</li>\n<li>ENTER，回车键，换行</li>\n<li>BACK SPACE，退格键，删除光标前一个字符</li>\n<li>DEL，删除键，删除光标后一个字符</li>\n<li>方向键，在文本中移动光标</li>\n<li>HOME/END，移动光标到行首/行尾</li>\n<li>Page Up/Page Down，上/下翻页</li>\n<li>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</li>\n<li>ESC，退出输入模式，切换到命令模式</li>\n</ul>\n<p><strong>底线命令模式</strong></p>\n<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<ul>\n<li><strong>q</strong> 退出程序</li>\n<li><strong>w</strong> 保存文件</li>\n</ul>\n<p>按 ESC 键可随时退出底线命令模式。</p>\n<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20210422001803.jpeg\" alt=\"img\"></p>\n<blockquote>\n<p>Vim 按键说明</p>\n</blockquote>\n<p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p>\n<h3 id=\"账号管理\"><a href=\"#账号管理\" class=\"headerlink\" title=\"账号管理\"></a>账号管理</h3><blockquote>\n<p>简介</p>\n</blockquote>\n<p>Linux 系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>\n<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>\n<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>\n<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>\n<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>\n<ul>\n<li>用户账号的添加、删除与修改。</li>\n<li>用户口令的管理。</li>\n<li>用户组的管理。</li>\n</ul>\n<blockquote>\n<p>用户账号的管理</p>\n</blockquote>\n<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>\n<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录 Shell 等资源。</p>\n<blockquote>\n<p>添加账号 - useradd</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>选项 :<ul>\n<li>-c comment 指定一段注释性描述</li>\n<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m 选项，可以创建主目录</li>\n<li>-g 用户组 指定用户所属的用户组</li>\n<li>-G 用户组，用户组 指定用户所属的附加组</li>\n<li>-m 　使用者目录如不存在则自动建立</li>\n<li>-s Shell 文件 指定用户的登录 Shell</li>\n<li>-u 用户号 指定用户的用户号，如果同时有-o 选项，则可以重复使用其他用户的标识号</li>\n</ul>\n</li>\n<li>用户名 :<ul>\n<li>指定新账号的登录名</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>切换用户</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su username <span class=\"comment\">#username:需要切换的用户名</span></span><br><span class=\"line\">sudo su <span class=\"comment\">#普通用户切换到root用户</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>切换用户的命令为：su username 【username 是你的用户名哦】</li>\n<li>从普通用户切换到 root 用户，还可以使用命令：sudo su</li>\n<li>在终端输入 exit 或 logout 或使用快捷方式 ctrl+d，可以退回到原来用户，其实 ctrl+d 也是执行的 exit 命令</li>\n<li>在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在 su 和 username 之间加-，例如：【su - root】</li>\n</ol>\n<p>==$ 表示普通用户==</p>\n<p>==#表示超级用户，也就是 root 用户==</p>\n<blockquote>\n<p>删除用户 - userdel</p>\n</blockquote>\n<p>如果一个用户的账号不再使用，可以从系统中删除。</p>\n<p>删除用户账号就是要将/etc/passwd 等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>\n<p>删除一个已有的用户账号使用 userdel 命令，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userdel 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@kuangshen home]<span class=\"meta\"># userdel -r 用户名</span></span><br></pre></td></tr></table></figure>\n\n<p>此命令删除用户 kuangshen 在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group 等）的记录，同时删除用户的主目录。</p>\n<blockquote>\n<p>修改用户 - usermod</p>\n</blockquote>\n<p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录 Shell 等。</p>\n<p>修改已有用户的信息使用 usermod 命令，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usermod 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>常用的选项包括-c, -d, -m, -g, -G, -s, -u 以及-o 等，这些选项的意义与 useradd 命令中的选项一样，可以为用户指定新的资源值。</p>\n<blockquote>\n<p>用户密码的管理</p>\n</blockquote>\n<p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>\n<p>指定和修改用户口令的 Shell 命令是 passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p>\n<p>命令的格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd 选项 用户名</span><br></pre></td></tr></table></figure>\n\n<p>可使用的选项：</p>\n<ul>\n<li>-l 锁定口令，即禁用账号。</li>\n<li>-u 口令解锁。</li>\n<li>-d 使账号无口令。</li>\n<li>-f 强迫用户下次登录时修改口令。</li>\n</ul>\n<p>如果默认用户名，则修改当前用户的口令。</p>\n<p>命令修改该用户自己的口令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ passwd</span><br><span class=\"line\">Old password:******</span><br><span class=\"line\">New password:*******</span><br><span class=\"line\">Re-enter new password:*******</span><br></pre></td></tr></table></figure>\n\n<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># passwd kuangshen</span></span><br><span class=\"line\">New password:*******</span><br><span class=\"line\">Re-enter new password:*******</span><br></pre></td></tr></table></figure>\n\n<p>普通用户修改自己的口令时，passwd 命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>\n<p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用 8 位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p>\n<p>为用户指定空口令时，执行下列形式的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># passwd -d kuangshen</span></span><br></pre></td></tr></table></figure>\n\n<p>此命令将用户 kuangshen 的口令删除，这样用户 kuangshen 下一次登录时，系统就不再允许该用户登录了。</p>\n<p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># passwd -l kuangshen</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户组管理\"><a href=\"#用户组管理\" class=\"headerlink\" title=\"用户组管理\"></a>用户组管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同 Linux 系统对用户组的规定有所不同，如 Linux 下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>\n<p>用户组的管理涉及用户组的添加、删除和修改。==组的增加、删除和修改实际上就是对/etc/group 文件的更新。==</p>\n<blockquote>\n<p>添加用户组 - groupadd</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd 选项 用户组</span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group</span><br></pre></td></tr></table></figure>\n\n<p>可以使用的选项有：</p>\n<ul>\n<li>-g GID 指定新用户组的组标识号（GID）。</li>\n<li>-o 一般与-g 选项同时使用，表示新用户组的 GID 可以与系统已有用户组的 GID 相同。</li>\n</ul>\n<blockquote>\n<p>删除用户组 - groupdel</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupdel 用户组</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改用户组 - groupmod</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupmod 选项 用户组</span><br></pre></td></tr></table></figure>\n\n<p>常用的选项有：</p>\n<ul>\n<li>-g GID 为用户组指定新的组标识号。</li>\n<li>-o 与-g 选项同时使用，用户组的新 GID 可以与系统已有用户组的 GID 相同。</li>\n<li>-n 新用户组 将用户组的名字改为新名字</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此命令将组group2的组标识号修改为102。</span></span><br><span class=\"line\">groupmod -g 102 group2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将组group2的标识号改为10000，组名修改为group3。</span></span><br><span class=\"line\">groupmod –g 10000 -n group3 group2</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>切换组</p>\n</blockquote>\n<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>\n<p>用户可以在登录后，使用命令 newgrp 切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ newgrp root</span><br></pre></td></tr></table></figure>\n\n<p>这条命令将当前用户切换到 root 用户组，前提条件是 root 用户组确实是该用户的主组或附加组。</p>\n<blockquote>\n<p>/etc/passwd</p>\n</blockquote>\n<p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>\n<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group 等。</p>\n<p>下面分别介绍这些文件的内容。</p>\n<p>/etc/passwd 文件是用户管理工作涉及的最重要的一个文件。</p>\n<p>Linux 系统中的每个用户都在/etc/passwd 文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>\n<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃ cat <span class=\"keyword\">/etc/</span>passwd</span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">root:</span>x:<span class=\"number\">0</span>:<span class=\"number\">0</span>:Superuser:/:</span><br><span class=\"line\"><span class=\"symbol\">daemon:</span>x:<span class=\"number\">1</span>:<span class=\"number\">1</span>:System daemons:/etc:</span><br><span class=\"line\"><span class=\"symbol\">bin:</span>x:<span class=\"number\">2</span>:<span class=\"number\">2</span>:Owner of system commands:/bin:</span><br><span class=\"line\"><span class=\"symbol\">sys:</span>x:<span class=\"number\">3</span>:<span class=\"number\">3</span>:Owner of system files:<span class=\"keyword\">/usr/</span>sys:</span><br><span class=\"line\"><span class=\"symbol\">adm:</span>x:<span class=\"number\">4</span>:<span class=\"number\">4</span>:System accounting:<span class=\"keyword\">/usr/</span>adm:</span><br><span class=\"line\"><span class=\"symbol\">uucp:</span>x:<span class=\"number\">5</span>:<span class=\"number\">5</span>:UUCP administrator:<span class=\"keyword\">/usr/</span>lib/uucp:</span><br><span class=\"line\"><span class=\"symbol\">auth:</span>x:<span class=\"number\">7</span>:<span class=\"number\">21</span>:Authentication administrator:<span class=\"keyword\">/tcb/</span>files/auth:</span><br><span class=\"line\"><span class=\"symbol\">cron:</span>x:<span class=\"number\">9</span>:<span class=\"number\">16</span>:Cron daemon:<span class=\"keyword\">/usr/</span>spool/cron:</span><br><span class=\"line\"><span class=\"symbol\">listen:</span>x:<span class=\"number\">37</span>:<span class=\"number\">4</span>:Network daemon:<span class=\"keyword\">/usr/</span>net/nls:</span><br><span class=\"line\"><span class=\"symbol\">lp:</span>x:<span class=\"number\">71</span>:<span class=\"number\">18</span>:Printer administrator:<span class=\"keyword\">/usr/</span>spool/lp:</span><br></pre></td></tr></table></figure>\n\n<p>从上面的例子我们可以看到，/etc/passwd 中一行记录对应着一个用户，每行记录又被冒号(:)分隔为 7 个字段，其格式和具体含义如下：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录<span class=\"keyword\">Shell</span></span><br></pre></td></tr></table></figure>\n\n<p>1）”用户名”是代表用户账号的字符串。</p>\n<p>通常长度不超过 8 个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p>\n<p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>\n<p>2）“口令”一些系统中，存放着加密后的用户口令字。</p>\n<p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd 文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多 Linux 系统（如 SVR4）都使用了 shadow 技术，把真正的加密后的用户口令字存放到/etc/shadow 文件中，而在/etc/passwd 文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>\n<p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p>\n<p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录 Shell 等。</p>\n<p>通常用户标识号的取值范围是 0 ～ 65 535。0 是超级用户 root 的标识号，1 ～ 99 由系统保留，作为管理账号，普通用户的标识号从 100 开始。在 Linux 系统中，这个界限是 500。</p>\n<p>4）“组标识号”字段记录的是用户所属的用户组。</p>\n<p>它对应着/etc/group 文件中的一条记录。</p>\n<p>5)“注释性描述”字段记录着用户的一些个人情况。</p>\n<p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的 Linux 系统中，这个字段的格式并没有统一。在许多 Linux 系统中，这个字段存放的是一段任意的注释性描述文字，用作 finger 命令的输出。</p>\n<p>6)“主目录”，也就是用户的起始工作目录。</p>\n<p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>\n<p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即 Shell。</p>\n<p>Shell 是用户与 Linux 系统之间的接口。Linux 的 Shell 有许多种，每种都有不同的特点。常用的有 sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p>\n<p>系统管理员可以根据系统情况和用户习惯为用户指定某个 Shell。如果不指定 Shell，那么系统使用 sh 为默认的登录 Shell，即这个字段的值为/bin/sh。</p>\n<p>用户的登录 Shell 也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p>\n<p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些 Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>\n<p>8)系统中有一类用户称为伪用户（pseudo users）。</p>\n<p>这些用户在/etc/passwd 文件中也占有一条记录，但是不能登录，因为它们的登录 Shell 为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p>\n<p>常见的伪用户如下所示：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">伪 用 户 含 义</span><br><span class=\"line\">bin 拥有可执行的用户命令文件</span><br><span class=\"line\">sys 拥有系统文件</span><br><span class=\"line\">adm 拥有帐户文件</span><br><span class=\"line\">uucp UUCP使用</span><br><span class=\"line\"><span class=\"built_in\">lp</span> <span class=\"built_in\">lp</span>或lpd子系统使用</span><br><span class=\"line\">nobody NFS使用</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>/etc/shadow</p>\n</blockquote>\n<p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet 等，它们也都各自为相关的进程和文件所需要。</strong></p>\n<p>由于/etc/passwd 文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的 Linux 系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow 文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p>\n<p><strong>2、/etc/shadow 中的记录行与/etc/passwd 中的一一对应，它由 pwconv 命令根据/etc/passwd 中的数据自动产生</strong></p>\n<p>它的文件格式与/etc/passwd 类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>“登录名”是与/etc/passwd 文件中的登录名相一致的用户账号</li>\n<li>“口令”字段存放的是加密后的用户口令字，长度为 13 个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li>\n<li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在 SCO Linux 中，这个时间起点是 1970 年 1 月 1 日。</li>\n<li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li>\n<li>“最大时间间隔”指的是口令保持有效的最大天数。</li>\n<li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li>\n<li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li>\n<li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li>\n</ol>\n<blockquote>\n<p>/etc/group</p>\n</blockquote>\n<p>用户组的所有信息都存放在/etc/group 文件中。</p>\n<p>将用户分组是 Linux 系统中对用户进行管理及控制访问权限的一种手段。</p>\n<p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p>\n<p>当一个用户同时是多个组中的成员时，在/etc/passwd 文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p>\n<p>用户要访问属于附加组的文件时，必须首先使用 newgrp 命令使自己成为所要访问的组中的成员。</p>\n<p>用户组的所有信息都存放在/etc/group 文件中。此文件的格式也类似于/etc/passwd 文件，由冒号(:)隔开若干个字段，这些字段有：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">组名:口令:组标识号:组内用户列表</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd 中的登录名一样，组名不应重复。</li>\n<li>“口令”字段存放的是用户组加密后的口令字。一般 Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li>\n<li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li>\n<li>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li>\n</ol>\n<h3 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h3><blockquote>\n<p>概述</p>\n</blockquote>\n<p>Linux 磁盘管理好坏直接关系到整个系统的性能问题。</p>\n<p>Linux 磁盘管理常用命令为 df、du。</p>\n<ul>\n<li>df ：列出文件系统的整体磁盘使用量</li>\n<li>du：检查磁盘空间使用量</li>\n</ul>\n<blockquote>\n<p>df</p>\n</blockquote>\n<p>df 命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">df</span> [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>\n<li>-k ：以 KBytes 的容量显示各文件系统；</li>\n<li>-m ：以 MBytes 的容量显示各文件系统；</li>\n<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>\n<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>\n<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>\n<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>\n</ul>\n<blockquote>\n<p>du</p>\n</blockquote>\n<p>Linux du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看，还是和 df 命令有一些区别的，这里介绍 Linux du 命令。</p>\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">du</span> [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>\n<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>\n<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>\n<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>\n<li>-k ：以 KBytes 列出容量显示；</li>\n<li>-m ：以 MBytes 列出容量显示；</li>\n</ul>\n<blockquote>\n<p>磁盘挂载与卸除</p>\n</blockquote>\n<p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p>\n<p>Linux 的磁盘挂载使用 mount 命令，卸载使用 umount 命令。</p>\n<p>磁盘挂载语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</span><br></pre></td></tr></table></figure>\n\n<p>磁盘卸载命令 umount 语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure>\n\n<p>选项与参数：</p>\n<ul>\n<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>\n<li>-n ：不升级 /etc/mtab 情况下卸除。</li>\n</ul>\n<h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><blockquote>\n<p>什么是进程</p>\n</blockquote>\n<ol>\n<li>在 Linux 中，每一个程序都是有自己的一个进程，每一个进程都有一个 id 号！</li>\n<li>每一个进程都会有一个父进程！</li>\n<li>进程可以有两种存在方式：前台！后台运行！</li>\n<li>一般的话服务都是后台运行，基本的程序都是前台进行的！</li>\n</ol>\n<blockquote>\n<p>命令</p>\n</blockquote>\n<p><code>ps</code> 查看当前系统中正在执行的各种进程信息</p>\n<p>参数选项：</p>\n<ul>\n<li>-A 显示当前终端运行的所有的进程信息</li>\n<li>-u 以用户的信息显示进程</li>\n<li>-x 显示后台运行的参数</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ps -aux 查看所有的进程</span></span><br><span class=\"line\">ps -aux|</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># | 在Linux中叫做管道符 A|B</span></span><br><span class=\"line\"><span class=\"comment\"># grep 查找文件中符合条件的字符串</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>ps -ef</strong> ：可以查到父进程的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep mysql <span class=\"comment\">#看父进程我们一般通过目录树结构来查看！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程树</span></span><br><span class=\"line\">pstree -pu</span><br><span class=\"line\">     -p 显示父<span class=\"built_in\">id</span></span><br><span class=\"line\">     -u 显示用户组</span><br></pre></td></tr></table></figure>\n\n<p>结束进程：杀掉进程，等价于 window 结束任务</p>\n<p><strong>kill -9</strong> 进程的 id</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -9 pid</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Linux","path":"api/categories/Linux.json"}],"tags":[{"name":"技巧","path":"api/tags/技巧.json"},{"name":"笔记","path":"api/tags/笔记.json"}]}