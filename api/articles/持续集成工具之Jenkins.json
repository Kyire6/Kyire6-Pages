{"title":"持续集成工具之 Jenkins","slug":"持续集成工具之Jenkins","date":"2022-04-03T15:13:53.000Z","updated":"2022-04-03T15:13:53.000Z","comments":true,"path":"api/articles/持续集成工具之Jenkins.json","excerpt":null,"covers":["https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309153101.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309154059.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309154857.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309155459.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309165502.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309165729.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174609.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174531.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174831.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174954.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175748.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175816.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175908.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180153.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180807.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181055.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181122.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181408.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181600.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181914.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181940.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182209.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182301.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182435.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182812.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182917.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183107.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183223.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183455.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184117.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184218.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310094719.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310095750.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100359.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100539.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101013.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101538.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102203.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102427.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102744.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102836.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310103242.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220312001027.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112707.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112815.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112952.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310113332.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114012.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114702.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115055.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115245.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115628.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135008.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135103.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135300.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154144.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154618.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155756.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155938.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310160044.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310163924.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164207.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164225.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164928.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170455.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170935.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171234.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171348.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172047.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172445.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172805.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173325.png","https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173704.png"],"content":"<h2 id=\"持续集成及-Jenkins-介绍\"><a href=\"#持续集成及-Jenkins-介绍\" class=\"headerlink\" title=\"持续集成及 Jenkins 介绍\"></a>持续集成及 Jenkins 介绍</h2><h3 id=\"软件开发生命周期\"><a href=\"#软件开发生命周期\" class=\"headerlink\" title=\"软件开发生命周期\"></a>软件开发生命周期</h3><p>软件开发生命周期又叫做<strong>SDLC</strong>（Software Development Life Cycle），它是集合了计划、开发、测试 和部署过程的集合。如下图所示 ：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309153101.png\" alt=\"image-20220309153101326\" style=\"zoom:67%;\" />\n\n<ul>\n<li>需求分析</li>\n</ul>\n<p>这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部 或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。 还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。</p>\n<ul>\n<li>设计</li>\n</ul>\n<p>第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目 计划。计划可以使用图表，布局设计或者文者的方式呈现。</p>\n<ul>\n<li>实现</li>\n</ul>\n<p>第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进 行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。</p>\n<ul>\n<li>测试</li>\n</ul>\n<p>测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等。</p>\n<ul>\n<li>进化</li>\n</ul>\n<p>最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修 改，bug 修复，功能增加等。</p>\n<h3 id=\"软件开发瀑布模型\"><a href=\"#软件开发瀑布模型\" class=\"headerlink\" title=\"软件开发瀑布模型\"></a>软件开发瀑布模型</h3><p>瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁 衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有 其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开发，但是已经不适合现在的开发了。</p>\n<p>下图对软件开发模型的一个阐述。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309154059.png\" alt=\"image-20220309154059145\"></p>\n<table>\n<thead>\n<tr>\n<th>优势</th>\n<th>劣势</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>简单易用和理解</td>\n<td>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。</td>\n</tr>\n<tr>\n<td>当前一阶段完成后，您只需要去关注后续阶段。</td>\n<td>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险。</td>\n</tr>\n<tr>\n<td>为项目提供了按阶段划分的检查节点</td>\n<td>瀑布模型的突出缺点是不适应用户需求的变化。</td>\n</tr>\n</tbody></table>\n<h3 id=\"软件的敏捷开发\"><a href=\"#软件的敏捷开发\" class=\"headerlink\" title=\"软件的敏捷开发\"></a>软件的敏捷开发</h3><h4 id=\"什么是敏捷开发？\"><a href=\"#什么是敏捷开发？\" class=\"headerlink\" title=\"什么是敏捷开发？\"></a>什么是敏捷开发？</h4><p>敏捷开发（Agile Development）的核心是迭代开发（Iterative Development）与 增量开发（Incremental Development）。</p>\n<ul>\n<li><strong>何为迭代开发</strong>？</li>\n</ul>\n<p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次“大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次“大开发”变成多次“小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p>\n<ul>\n<li><strong>何为增量开发</strong>？</li>\n</ul>\n<p>软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p>\n<h4 id=\"敏捷开发如何迭代？\"><a href=\"#敏捷开发如何迭代？\" class=\"headerlink\" title=\"敏捷开发如何迭代？\"></a>敏捷开发如何迭代？</h4><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309154857.png\" alt=\"image-20220309154857660\" style=\"zoom:67%;\" />\n\n<h4 id=\"敏捷开发有什么好处？\"><a href=\"#敏捷开发有什么好处？\" class=\"headerlink\" title=\"敏捷开发有什么好处？\"></a>敏捷开发有什么好处？</h4><ul>\n<li><strong>早期交付</strong></li>\n</ul>\n<p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。</p>\n<ul>\n<li><strong>降低风险</strong></li>\n</ul>\n<p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。</p>\n<h3 id=\"什么是持续集成？\"><a href=\"#什么是持续集成？\" class=\"headerlink\" title=\"什么是持续集成？\"></a>什么是持续集成？</h3><p>持续集成（Continuous integration，简称 CI）指的是，频繁地（一天多次）将代码集成到主干。</p>\n<p><strong>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。</strong>它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p>\n<p>通过持续集成，团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。</p>\n<p><strong>持续集成的流程</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309155459.png\" alt=\"image-20220309155459830\" style=\"zoom: 80%;\" />\n\n<p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p>\n<ul>\n<li>提交</li>\n</ul>\n<p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p>\n<ul>\n<li>测试（第一轮）</li>\n</ul>\n<p>代码仓库对 commit 操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p>\n<ul>\n<li>构建</li>\n</ul>\n<p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p>\n<p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS 脚本、图片）等等。</p>\n<ul>\n<li>测试（第二轮）</li>\n</ul>\n<p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p>\n<ul>\n<li>部署</li>\n</ul>\n<p>过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（ tar filename.tar * ）存档，发到生产服务器。</p>\n<ul>\n<li>回滚</li>\n</ul>\n<p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指 向上一个版本的目录。</p>\n<h3 id=\"持续集成的组成要素\"><a href=\"#持续集成的组成要素\" class=\"headerlink\" title=\"持续集成的组成要素\"></a>持续集成的组成要素</h3><ul>\n<li>一个自动构建过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预。</li>\n<li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用 SVN 或 Git。</li>\n<li>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309165502.png\" alt=\"image-20220309165502124\"></p>\n<h3 id=\"持续集成的好处\"><a href=\"#持续集成的好处\" class=\"headerlink\" title=\"持续集成的好处\"></a>持续集成的好处</h3><ol>\n<li>降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；</li>\n<li>对系统健康持续检查，减少发布风险带来的问题；</li>\n<li>减少重复性工作；</li>\n<li>持续部署，提供可部署单元包；</li>\n<li>持续交付可供使用的版本；</li>\n<li>增强团队信心；</li>\n</ol>\n<h3 id=\"Jenkins-介绍\"><a href=\"#Jenkins-介绍\" class=\"headerlink\" title=\"Jenkins 介绍\"></a>Jenkins 介绍</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309165729.png\" alt=\"image-20220309165729929\" style=\"zoom:67%;\" />\n\n<p>Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动 化构建、测试和部署等功能。官网：<a href=\"https://www.jenkins.io/\">Jenkins</a>。</p>\n<p><strong>Jenkins 的特征：</strong></p>\n<ul>\n<li>开源的 Java 语言开发持续集成工具，支持持续集成，持续部署。</li>\n<li>易于安装部署配置：可通过 yum 安装,或下载 war 包以及通过 docker 容器等快速实现安装部署，可方便 web 界面配置管理。</li>\n<li>消息通知及测试报告：集成 RSS/E-mail 通过 RSS 发布构建结果或当构建完成时通过 e-mail 通知，生成 JUnit/TestNG 测试报告。</li>\n<li>分布式构建：支持 Jenkins 能够让多台计算机一起构建/测试。</li>\n<li>文件识别：Jenkins 能够跟踪哪次构建生成哪些 jar，哪次构建使用哪个版本的 jar 等。</li>\n<li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如 git，svn，maven，docker 等。</li>\n</ul>\n<h2 id=\"Jenkins-安装与配置\"><a href=\"#Jenkins-安装与配置\" class=\"headerlink\" title=\"Jenkins 安装与配置\"></a>Jenkins 安装与配置</h2><h3 id=\"安装-Jenkins\"><a href=\"#安装-Jenkins\" class=\"headerlink\" title=\"安装 Jenkins\"></a>安装 Jenkins</h3><blockquote>\n<p><a href=\"https://www.jenkins.io/zh/doc/book/installing/\">Jenkins 官方安装文档</a></p>\n</blockquote>\n<p><strong>Docker 安装 Jenkins（推荐）</strong></p>\n<ul>\n<li><p>Docker 安装与配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、卸载旧的版本</span></span><br><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、需要的安装包</span></span><br><span class=\"line\">yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、设置镜像的仓库</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo <span class=\"comment\"># 默认是国外的，十分慢！</span></span><br><span class=\"line\"><span class=\"comment\"># 建议使用阿里云的镜像地址</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新yum软件包索引</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、安装docker相关的 docker-ce 社区版 ee 企业版</span></span><br><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5、启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6、使用docker version查看是否安装成功</span></span><br></pre></td></tr></table></figure></li>\n<li><p>使用 Docker 安装 Jenkins</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用命令直接安装</span></span><br><span class=\"line\">docker run -d --name jenkins --restart always \\</span><br><span class=\"line\">--user root -p <span class=\"number\">8180</span>:<span class=\"number\">8080</span> -p <span class=\"number\">51000</span>:<span class=\"number\">50000</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>jenkins_home:<span class=\"regexp\">/var/</span>jenkins_home \\</span><br><span class=\"line\">-v <span class=\"regexp\">/opt/m</span>aven<span class=\"regexp\">/apache-maven-3.6.3:/</span>opt<span class=\"regexp\">/maven/</span>apache-maven-<span class=\"number\">3.6</span>.<span class=\"number\">3</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251 \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>run<span class=\"regexp\">/docker.sock:/</span>var<span class=\"regexp\">/run/</span>docker.sock \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>War 安装 Jenkins</strong></p>\n<ul>\n<li>获取 Jenkins 安装包</li>\n</ul>\n<p>下载页面：<a href=\"https://jenkins.io/zh/download/\">https://jenkins.io/zh/download/</a></p>\n<p>安装文件：jenkins.war</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、将最新的稳定Jenkins WAR包 下载到您计算机上的相应目录。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、在下载的目录内打开一个终端/命令提示符窗口到。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、运行命令java -jar jenkins.war</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、浏览http:<span class=\"comment\">//localhost:8080并等到*Unlock Jenkins*页面出现。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、继续使用Post-installation setup wizard后面步骤设置向导。</span><br></pre></td></tr></table></figure>\n\n<p><strong>解锁 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174609.png\" alt=\"image-20220309174609417\"></p>\n<p>获取并输入 admin 账户密码（我这里是 docker 安装的，目录是映射到指定位置的，密码实际存放路径以提示为主）</p>\n<p><code>cat /var/jenkins_home/secrets/initialAdminPassword</code></p>\n<p><strong>跳过插件安装</strong></p>\n<p>因为 Jenkins 插件需要连接默认官网下载，速度非常慢，而且容易安装失败，所以我们暂时先跳过插件安装。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174531.png\" alt=\"image-20220309174531892\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174831.png\" alt=\"image-20220309174831016\"></p>\n<p><strong>添加一个管理员账户，并进入 Jenkins 后台</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174954.png\" alt=\"image-20220309174953956\"></p>\n<p><strong>保存并完成</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175748.png\" alt=\"image-20220309175748708\"></p>\n<p><strong>开始使用 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175816.png\" alt=\"image-20220309175816074\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175908.png\" alt=\"image-20220309175908276\"></p>\n<h3 id=\"Jenkins-插件管理\"><a href=\"#Jenkins-插件管理\" class=\"headerlink\" title=\"Jenkins 插件管理\"></a>Jenkins 插件管理</h3><p>Jenkins 本身不提供很多功能，我们可以通过使用插件来满足我们的使用。例如从 Gitlab 拉取代码，使用 Maven 构建项目等功能需要依靠插件完成。接下来演示如何下载插件。</p>\n<p><strong>修改 Jenkins 插件下载地址</strong></p>\n<p>Jenkins 国外官方插件地址下载速度非常慢，所以可以修改为国内插件地址：</p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180153.png\" alt=\"image-20220309180153473\"></p>\n<p>这样做是为了把 Jenkins 官方的插件列表下载到本地，接着修改地址文件，替换为国内插件地址：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入配置目录 （目录视情况而定，安装的jenkins_home下）</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/var/jenkins_home/updates</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">sed -i &#x27;s/http:\\/\\<span class=\"string\">/updates.jenkins</span>\u0002ci.org\\<span class=\"string\">/download/https</span>:\\/\\<span class=\"string\">/mirrors.tuna.tsinghua.edu.cn</span>\\<span class=\"string\">/jenkins/g</span>&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\\/\\<span class=\"string\">/www.google.com/https</span>:\\/\\<span class=\"string\">/www.baidu.com/g</span>&#x27; default.json</span><br></pre></td></tr></table></figure>\n\n<p>最后，Manage Plugins 点击 Advanced，把 Update Site 改为国内插件下载地址</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180807.png\" alt=\"image-20220309180807037\"></p>\n<p>Sumbit 后，在浏览器输入： <a href=\"http://120.78.204.65:8180/restart\">http://120.78.204.65:8180/restart</a> ，重启 Jenkins。</p>\n<p><strong>下载中文汉化插件</strong></p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available，搜索&quot;Chinese&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181055.png\" alt=\"image-20220309181055822\"></p>\n<p>完成后如下图所示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181122.png\" alt=\"image-20220309181122066\"></p>\n<p>重启 Jenkins 之后，就看到 Jenkins 汉化了！（PS：某些菜单可能会汉化失败）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181408.png\" alt=\"image-20220309181408200\"></p>\n<h3 id=\"Jenkins-用户权限管理\"><a href=\"#Jenkins-用户权限管理\" class=\"headerlink\" title=\"Jenkins 用户权限管理\"></a>Jenkins 用户权限管理</h3><p>我们可以利用<code>Role-based Authorization Strategy</code>插件来管理 Jenkins 用户权限</p>\n<p><strong>安装 Role-based Authorization Strategy 插件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181600.png\" alt=\"image-20220309181600238\"></p>\n<p><strong>开启权限全局安全配置</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181914.png\" alt=\"image-20220309181914873\"></p>\n<p>授权策略切换为”Role-Based Strategy”，保存</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181940.png\" alt=\"image-20220309181940124\"></p>\n<p><strong>创建角色</strong></p>\n<p>在系统管理页面进入 Manage and Assign Roles</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182209.png\" alt=\"image-20220309182209559\"></p>\n<p>点击”Manage Roles”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182301.png\" alt=\"image-20220309182301430\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182435.png\" alt=\"image-20220309182435102\"></p>\n<p><code>Global roles（全局角色）</code>：管理员等高级用户可以创建基于全局的角色</p>\n<p><code>Item roles（项目角色）</code>： 针对某个或者某些项目的角色</p>\n<p><code>Node roles（节点角色）</code>：节点相关的权限</p>\n<p>我们添加以下三个角色：</p>\n<ul>\n<li>baseRole：该角色为全局角色。这个角色需要绑定 Overall 下面的 Read 权限，是为了给所有用户绑定最基本的 Jenkins 访问权限。注意：如果不给后续用户绑定这个角色，会报错误：<code>用户名 is missing the Overall/Read permission</code></li>\n<li>role1：该角色为项目角色。使用正则表达式绑定”vx-chx.*“，意思是只能操作 vx-chx 开头的项目。</li>\n<li>role2：该角色为项目角色。使用正则表达式绑定”vx-phm.*“，意思是只能操作 vx-phm 开头的项目。</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182812.png\" alt=\"image-20220309182812353\"></p>\n<p>保存</p>\n<p><strong>创建用户</strong></p>\n<p>在系统管理页面进入 Manage Users</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182917.png\" alt=\"image-20220309182917026\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183107.png\" alt=\"image-20220309183107565\"></p>\n<p>分别创建两个用户：vxchx 和 vxphm</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183223.png\" alt=\"image-20220309183223041\"></p>\n<p><strong>给用户分配角色</strong></p>\n<p>系统管理页面进入 Manage and Assign Roles，点击 Assign Roles</p>\n<p>绑定规则如下：</p>\n<ul>\n<li><p>vxchx 用户分别绑定 baseRole 和 role1 角色</p>\n</li>\n<li><p>vxphm 用户分别绑定 baseRole 和 role2 角色</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183455.png\" alt=\"image-20220309183455591\"></p>\n</li>\n</ul>\n<p>保存</p>\n<p><strong>创建项目测试权限</strong></p>\n<p>以 admin 管理员账户创建两个项目，分别为 vx-chx-test 和 vx-phm-test</p>\n<p>结果为： vxchx 用户登录，只能看到 vx-chx-test 项目 vxphm 用户登录，只能看到 vx-phm-test 项目</p>\n<h3 id=\"Jenkins-凭证管理\"><a href=\"#Jenkins-凭证管理\" class=\"headerlink\" title=\"Jenkins 凭证管理\"></a>Jenkins 凭证管理</h3><p>凭据可以用来存储需要密文保护的数据库密码、Gitlab 密码信息、Docker 私有仓库密码等，以便 Jenkins 可以和这些第三方的应用进行交互。</p>\n<p><strong>安装 Credentials Binding 插件</strong></p>\n<p>要在 Jenkins 使用凭证管理功能，需要安装<code>Credentials Binding</code>插件</p>\n<blockquote>\n<p>注：新版本已经默认安装了此插件，这里无需另外再安装了</p>\n</blockquote>\n<p>系统管理中选择 <code>Manage Credentials</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184117.png\" alt=\"image-20220309184117479\"></p>\n<p>可以添加的凭证有 5 种：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184218.png\" alt=\"image-20220309184218399\"></p>\n<ul>\n<li>Username with password：用户名和密码</li>\n<li>SSH Username with private key： 使用 SSH 用户和密钥</li>\n<li>Secret file：需要保密的文本文件，使用时 Jenkins 会将文件复制到一个临时目录中，再将文件路径 设置到一个变量中，等构建结束后，所复制的 Secret file 就会被删除。</li>\n<li>GitHub App：GitHub 的 API 令牌</li>\n<li>Secret text：需要保存的一个加密的文本串，如钉钉机器人或 Github 的 api token</li>\n<li>Certificate：通过上传证书文件的方式</li>\n</ul>\n<p>常用的凭证类型有：<strong>Username with password（用户密码）</strong>和 <strong>SSH Username with private key（SSH 密钥）</strong></p>\n<p>接下来以使用 Git 工具到 Gitlab 拉取项目源码为例，演示 Jenkins 的如何管理 Gitlab 的凭证。</p>\n<p><strong>安装 Git 插件和 Git 工具</strong></p>\n<p>为了让 Jenkins 支持从 Gitlab 拉取源码，需要安装 Git 插件以及在服务器上安装 Git 工具。</p>\n<p>Git 插件安装：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310094719.png\" alt=\"image-20220310094712046\"></p>\n<p>服务器上安装 Git 工具（以 CentOS7 为例）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install git -y</span><br><span class=\"line\"><span class=\"comment\"># 安装后查看版本</span></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>用户密码类型</strong></p>\n<p>1）创建凭据</p>\n<p><code>Jenkins -&gt; 凭证 -&gt; 系统 -&gt; 全局凭据 -&gt; 添加凭据</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310095750.png\" alt=\"image-20220310095750604\"></p>\n<p>选择”Username with password”，输入 Gitlab 的用户名和密码，点击”确定”。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100359.png\" alt=\"image-20220310100359012\"></p>\n<p><strong>SSH 密钥类型</strong></p>\n<p>SSH 免密登录示意图</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100539.png\" alt=\"image-20220310100539140\"></p>\n<p>1）使用 root 用户生成公钥和私钥</p>\n<p><code>ssh-keygen -t rsa</code></p>\n<p>在/root/.ssh/目录保存了公钥和使用</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101013.png\" alt=\"image-20220310101013313\" style=\"zoom:67%;\" />\n\n<p>id_rsa：私钥文件</p>\n<p>id_rsa.pub：公钥文件</p>\n<p>2）把生成的公钥放在 Gitlab 中</p>\n<p><code>登录gitlab -&gt; 点击头像 -&gt; Settings -&gt; SSH Keys</code></p>\n<p>复制刚才 id_rsa.pub 文件的内容到这里，点击”Add Key”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101538.png\" alt=\"image-20220310101538008\"></p>\n<p>3）在 Jenkins 中添加凭证，配置私钥</p>\n<p>在 Jenkins 添加一个新的凭证，类型为”SSH Username with private key”，把刚才生成私有文件内容复制过来</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102203.png\" alt=\"image-20220310102203814\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102427.png\" alt=\"image-20220310102427213\"></p>\n<h3 id=\"Jenkins-关联-JDK-和-Maven\"><a href=\"#Jenkins-关联-JDK-和-Maven\" class=\"headerlink\" title=\"Jenkins 关联 JDK 和 Maven\"></a>Jenkins 关联 JDK 和 Maven</h3><p><strong>关联 JDK</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; JDK -&gt; 新增JDK，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102744.png\" alt=\"image-20220310102744563\"></p>\n<p><strong>关联 Maven</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; Maven -&gt; 新增Maven，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102836.png\" alt=\"image-20220310102835922\"></p>\n<h3 id=\"添加-Jenkins-全局变量\"><a href=\"#添加-Jenkins-全局变量\" class=\"headerlink\" title=\"添加 Jenkins 全局变量\"></a><strong>添加 Jenkins 全局变量</strong></h3><p><code>Jenkins -&gt; 系统管理 -&gt; 全局属性 -&gt; 添加三个环境变量，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310103242.png\" alt=\"image-20220310103241974\"></p>\n<h3 id=\"Jenkins-关闭跨站请求伪造保护\"><a href=\"#Jenkins-关闭跨站请求伪造保护\" class=\"headerlink\" title=\"Jenkins 关闭跨站请求伪造保护\"></a>Jenkins 关闭跨站请求伪造保护</h3><ul>\n<li>Docker 容器运行</li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、进入运行的容器</span></span><br><span class=\"line\">docker exec -u root -<span class=\"keyword\">it</span> 你的Jenkins容器名称或者容器<span class=\"built_in\">id</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、输入命令，编辑jenkins启动配置文件</span></span><br><span class=\"line\">vi /usr/<span class=\"keyword\">local</span>/bin/jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、在图中标记处，加入以下配置</span></span><br><span class=\"line\">-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、重启容器</span></span><br><span class=\"line\">docker restart jenkins</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220312001027.png\" alt=\"image-20220312001020531\"></p>\n<h2 id=\"Jenkins-构建-Maven-项目\"><a href=\"#Jenkins-构建-Maven-项目\" class=\"headerlink\" title=\"Jenkins 构建 Maven 项目\"></a>Jenkins 构建 Maven 项目</h2><blockquote>\n<p>构建方式均采用 Jar 包方式，War 方式参考<a href=\"http://doc.jeecg.com/2043887\">WAR 部署方案 · JeecgBoot 开发文档</a></p>\n</blockquote>\n<h3 id=\"Jenkins-项目构建类型\"><a href=\"#Jenkins-项目构建类型\" class=\"headerlink\" title=\"Jenkins 项目构建类型\"></a>Jenkins 项目构建类型</h3><p>Jenkins 中自动构建项目的类型有很多，常用的有以下三种：</p>\n<ul>\n<li>自由风格软件项目（FreeStyle Project）</li>\n<li>Maven 项目（Maven Project）</li>\n<li>流水线项目（Pipeline Project）</li>\n</ul>\n<p>每种类型的构建其实都可以完成一样的构建过程与结果，只是在操作方式、灵活度等方面有所区别，在实际开发中可以根据自己的需求和习惯来选择。（PS：个人推荐使用流水线类型，因为灵活度非常高）</p>\n<h3 id=\"自由风格项目构建\"><a href=\"#自由风格项目构建\" class=\"headerlink\" title=\"自由风格项目构建\"></a>自由风格项目构建</h3><p>下面演示创建一个自由风格项目来完成项目的集成过程：</p>\n<p><code>拉取代码 -&gt; 编译 -&gt; 打包 -&gt; 部署</code></p>\n<p><strong>拉取代码</strong></p>\n<p>1）创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112707.png\" alt=\"image-20220310112707895\"></p>\n<p>2）源码管理，从 Gitlab 拉取代码</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112815.png\" alt=\"image-20220310112815147\"></p>\n<p><strong>编译打包</strong></p>\n<p><code>构建 -&gt; 添加构建步骤 -&gt; 执行shell</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;开始编译和打包&quot;</span></span><br><span class=\"line\">mvn clean package</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;编译和打包结束&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112952.png\" alt=\"image-20220310112952936\"></p>\n<p><strong>部署</strong></p>\n<p>把项目部署到远程的服务器上，并启动</p>\n<p>1）安装<code>Publish Over SSH</code>插件</p>\n<p>Jenkins 本身无法实现远程部署到服务器上的功能，需要安装<code>Publish Over SSH</code>插件实现</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310113332.png\" alt=\"image-20220310113332137\"></p>\n<p>2）配置<code>Publish over SSH</code>，添加 SSH 服务器</p>\n<p><code>打开系统管理 -&gt; 系统配置 -&gt; 拉到底部，选择Publish over SSH区域选择新增</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114012.png\" alt=\"image-20220310114012322\"></p>\n<p><code>点击高级 -&gt; 填写服务器密码</code>（也可选择 ssh 验证，在 Jenkins 中配置本机私钥，将公钥发送到目标机器，即可完成无密码登录）</p>\n<p><code>发送命令：ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.xxx.xxx</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114702.png\" alt=\"image-20220310114702171\"></p>\n<ul>\n<li>Passphrase： 密码（目标机器的密码）</li>\n<li>Path to key：key 文件（私钥）的路径</li>\n<li>SSH Server Name： 标识的名字（随便你取什么）</li>\n<li>Hostname： 需要连接 ssh 的主机名或 ip 地址，此处填写应用服务器 IP（建议 ip）</li>\n<li>Username： 用户名</li>\n<li>Remote Directory： 远程目录(要发布的目录,比如/usr/local/tomcat/webapps/)</li>\n</ul>\n<p>3）添加构建步骤</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115055.png\" alt=\"image-20220310115055853\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115245.png\" alt=\"image-20220310115245384\"></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 脚本参考</span></span><br><span class=\"line\"><span class=\"attribute\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">cd</span> /apps</span><br><span class=\"line\"><span class=\"attribute\">ps</span> -ef|grep jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar|grep -v grep|awk &#x27;&#123;print $<span class=\"number\">2</span>&#125;&#x27;|xargs kill -s <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">BUILD_ID</span>=dontKillMe</span><br><span class=\"line\"><span class=\"attribute\">nohup</span> java -jar jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar &gt; jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.log <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure>\n\n<p>4）点击”立即构建”，开始构建过程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115628.png\" alt=\"image-20220310115628609\"></p>\n<p>5）构建成功，并自动化部署，访问测试！</p>\n<h3 id=\"Maven-项目构建\"><a href=\"#Maven-项目构建\" class=\"headerlink\" title=\"Maven 项目构建\"></a>Maven 项目构建</h3><p>1）安装 Maven Integration Plugin（高版本的 Jenkins 已预装了此插件）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135008.png\" alt=\"image-20220310135008339\"></p>\n<p>2）创建 Maven 项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135103.png\" alt=\"image-20220310135103444\"></p>\n<p>3）配置项目</p>\n<p>拉取代码和远程部署的过程和自由风格项目一样，只是”构建”部分不同</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135300.png\" alt=\"image-20220310135300799\"></p>\n<h3 id=\"Pipeline-流水线项目构建\"><a href=\"#Pipeline-流水线项目构建\" class=\"headerlink\" title=\"Pipeline 流水线项目构建(*)\"></a>Pipeline 流水线项目构建(*)</h3><h4 id=\"Pipeline-简介\"><a href=\"#Pipeline-简介\" class=\"headerlink\" title=\"Pipeline 简介\"></a>Pipeline 简介</h4><p><strong>1）概念</strong></p>\n<p>Pipeline，简单来说，就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p>\n<p><strong>2）使用 Pipeline 有以下好处（来自翻译自官方文档）：</strong></p>\n<p>代码：Pipeline 以代码的形式实现，通常被检入源代码控制，使团队能够编辑，审查和迭代其传送流 程。持久：无论是计划内的还是计划外的服务器重启。Pipeline 都是可恢复的。可停止：Pipeline 可接 收交互式输入，以确定是否继续执行 Pipeline。多功能：Pipeline 支持现实世界中复杂的持续交付要求。它支持 fork/join、循环执行，并行执行任务的功能。可扩展：Pipeline 插件支持其 DSL 的自定义扩展，以及与其他插件集成的多个选项。</p>\n<p><strong>3）如何创建 Jenkins Pipeline 呢？</strong></p>\n<ul>\n<li>Pipeline 脚本是由<strong>Groovy</strong>语言实现的，但是我们没必要单独去学习 Groovy</li>\n<li>Pipeline 支持两种语法：<strong>Declarative</strong>(声明式)和<strong>Scripted Pipeline</strong>(脚本式)语法</li>\n<li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中（一般我们都推荐在 Jenkins 中直接从源代码控制(SCM)中直接载入 Jenkinsfile Pipeline 这种方法）。</li>\n</ul>\n<h4 id=\"Pipeline-语法快速入门\"><a href=\"#Pipeline-语法快速入门\" class=\"headerlink\" title=\"Pipeline 语法快速入门\"></a>Pipeline 语法快速入门</h4><p><strong>1）Declarative 声明式-Pipeline</strong></p>\n<p>创建一个流水线项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154144.png\" alt=\"image-20220310154144897\"></p>\n<p><code>流水线 -&gt; 选择HelloWorld模板</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154618.png\" alt=\"image-20220310154618000\"></p>\n<p>生成的内容如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Hello&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>stages：</strong>代表整个流水线的所有执行阶段。通常 stages 只有 1 个，里面包含多个 stage</p>\n</li>\n<li><p><strong>stage：</strong>代表流水线中的某个阶段，可能出现 n 个。一般分为拉取代码，编译构建，部署等阶段。</p>\n</li>\n<li><p><strong>steps：</strong>代表一个阶段内需要执行的逻辑。steps 里面是 shell 脚本，git 拉取代码，ssh 远程发布等任意内容。</p>\n</li>\n</ul>\n<p>编写一个简单声明式的 Pipeline：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;编译构建&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;项目部署&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击构建，进入<code>Blue Ocean</code>可以看到整个构建过程</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155756.png\" alt=\"image-20220310155756052\" style=\"zoom: 150%;\" />\n\n<p><strong>2）Scripted Pipeline 脚本式-Pipeline</strong></p>\n<p>创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155938.png\" alt=\"image-20220310155938728\"></p>\n<p>选择 <code>Scripted Pipeline&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310160044.png\" alt=\"image-20220310160044398\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> mvnHome</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Preparation&#x27;</span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Results&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Node：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，后续讲到 Jenkins 的 Master-Slave 架构的时候用到。</li>\n<li>Stage：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如： Build、Test、Deploy，Stage 是一个逻辑分组的概念。</li>\n<li>Step：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像， 由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令 一样。</li>\n</ul>\n<p>编写一个简单的脚本式 Pipeline</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    def mvnHome</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;拉取代码&#x27;</span></span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;编译构建&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;项目部署&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构建结果和声明式一样！</p>\n<p><strong>Pipeline Script from SCM</strong></p>\n<p>刚才我们都是直接在 Jenkins 的 UI 界面编写 Pipeline 代码，这样不方便脚本维护，建议把 Pipeline 脚本放在项目中（一起进行版本控制）</p>\n<p><strong>1）在项目根目录建立 Jenkinsfile 文件，把内容复制到该文件中</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310163924.png\" alt=\"image-20220310163924603\" style=\"zoom:67%;\" />\n\n<p>把 Jenkinsfile 上传到 Gitlab</p>\n<p><strong>2）在项目中引用该文件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164207.png\" alt=\"image-20220310164207097\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164225.png\" alt=\"image-20220310164225747\"></p>\n<h3 id=\"Jenkinsfile\"><a href=\"#Jenkinsfile\" class=\"headerlink\" title=\"Jenkinsfile\"></a>Jenkinsfile</h3><h4 id=\"Jenkinsfile-环境变量\"><a href=\"#Jenkinsfile-环境变量\" class=\"headerlink\" title=\"Jenkinsfile 环境变量\"></a>Jenkinsfile 环境变量</h4><table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BRANCH_NAME</td>\n<td>在 multibranch 项目中，BRANCH_NAME 用于标明构建分支的名称。</td>\n</tr>\n<tr>\n<td>CHANGE_ID</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更 ID，比如 Pull Request</td>\n</tr>\n<tr>\n<td>CHANGE_URL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的 URL</td>\n</tr>\n<tr>\n<td>CHANGE_TITLE</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的标题</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_DISPLAY_NAME</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的显示名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_EMAIL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的邮件地址</td>\n</tr>\n<tr>\n<td>CHANGE_TARGET</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于合并后的分支信息等</td>\n</tr>\n<tr>\n<td>BUILD_NUMBER</td>\n<td>当前的构建编号</td>\n</tr>\n<tr>\n<td>BUILD_ID</td>\n<td>在 1.597 版本后引进，表示当前构建 ID</td>\n</tr>\n<tr>\n<td>BUILD_DISPLAY_NAME</td>\n<td>当前构建的显示信息</td>\n</tr>\n<tr>\n<td>JOB_NAME</td>\n<td>构建 Job 的全称，包含项目信息</td>\n</tr>\n<tr>\n<td>JOB_BASE_NAME</td>\n<td>除去项目信息的 Job 名称</td>\n</tr>\n<tr>\n<td>BUILD_TAG</td>\n<td>构建标签</td>\n</tr>\n<tr>\n<td>EXECUTOR_NUMBER</td>\n<td>执行器编号，用于标识构建器的不同编号</td>\n</tr>\n<tr>\n<td>NODE_NAME</td>\n<td>构建节点的名称</td>\n</tr>\n<tr>\n<td>NODE_LABELS</td>\n<td>节点标签</td>\n</tr>\n<tr>\n<td>WORKSPACE</td>\n<td>构建时使用的工作空间的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_HOME</td>\n<td>JENKINS 根目录的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_URL</td>\n<td>Jenkins 的 URL 信息</td>\n</tr>\n<tr>\n<td>BUILD_URL</td>\n<td>构建的 URL 信息</td>\n</tr>\n<tr>\n<td>JOB_URL</td>\n<td>构建 Job 的 URL 信息</td>\n</tr>\n<tr>\n<td>GIT_COMMIT</td>\n<td>git 提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_COMMIT</td>\n<td>当前分支上次提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_SUCCESSFUL_COMMIT</td>\n<td>当前分支上次成功构建时提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_BRANCH</td>\n<td>远程分支名称</td>\n</tr>\n<tr>\n<td>GIT_LOCAL_BRANCH</td>\n<td>本地分支名称</td>\n</tr>\n<tr>\n<td>GIT_URL</td>\n<td>远程 URL 地址</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_NAME</td>\n<td>Git 提交者的名称</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_NAME</td>\n<td>Git Author 的名称</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_EMAIL</td>\n<td>Git 提交者的 email 地址</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_EMAIL</td>\n<td>Git Author 的 email 地址</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION</td>\n<td>Mercurial 的版本 ID 信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_SHORT</td>\n<td>Mercurial 的版本 ID 缩写</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_NUMBER</td>\n<td>Mercurial 的版本号信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_BRANCH</td>\n<td>分支版本信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REPOSITORY_URL</td>\n<td>仓库 URL 信息</td>\n</tr>\n<tr>\n<td>SVN_REVISION</td>\n<td>Subversion 的当前版本信息</td>\n</tr>\n<tr>\n<td>SVN_URL</td>\n<td>当前工作空间中被 checkout 的 Subversion 工程的 URL 地址信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的构建触发器\"><a href=\"#常用的构建触发器\" class=\"headerlink\" title=\"常用的构建触发器\"></a>常用的构建触发器</h3><p>Jenkins 内置 4 种构建触发器：</p>\n<ul>\n<li>触发远程构建</li>\n<li>其他工程构建后触发（Build after other projects are build）</li>\n<li>定时构建（Build periodically）</li>\n<li>轮询 SCM（Poll SCM）</li>\n<li>GitHub 钩子触发的 GIT SCM 轮询（GitHub hook trigger for GITScm polling）</li>\n</ul>\n<p><strong>触发远程构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164928.png\" alt=\"image-20220310164928630\"></p>\n<p>触发构建 url：<a href=\"http://192.168.88.86:8180/job/vx-phm/build?token=abcabc\">http://192.168.88.86:8180/job/vx-phm/build?token=abcabc</a></p>\n<p><strong>其他工程构建后触发</strong></p>\n<p>1）创建 pre_job 流水线工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170455.png\" alt=\"image-20220310170454942\"></p>\n<p>2）配置需要触发的工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170935.png\" alt=\"image-20220310170935519\"></p>\n<p><strong>定时构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171234.png\" alt=\"image-20220310171234011\"></p>\n<p>定时字符串从左往右分别为： 分 时 日 月 周</p>\n<p>一些定时表达式的例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每30分钟构建一次：H代表形参 H/30 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span> 10:02 10:32</span><br><span class=\"line\"></span><br><span class=\"line\">每2个小时构建一次: H H/2 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天的8点，12点，22点，一天构建3次： (多个时间点中间用逗号隔开) 0 8,12,22 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每天中午12点定时构建一次 H 12 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天下午18点定时构建一次 H 18 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">在每个小时的前半个小时内的每10分钟 H(0-29)/10 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每两小时一次，每个工作日上午9点到下午5点(也许是上午10:38，下午12:38，下午2:38，下午</span><br><span class=\"line\">4:38) H H(9-16)/2 <span class=\"emphasis\">* *</span> 1-5</span><br></pre></td></tr></table></figure>\n\n<p><strong>轮询 SCM</strong></p>\n<p>轮询 SCM，是指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171348.png\" alt=\"image-20220310171348558\"></p>\n<p>注意：此构建触发器，Jenkins 会定时扫描本地整个项目的代码，增大系统的开销，不建议使用。</p>\n<h3 id=\"Git-Hook-自动触发构建\"><a href=\"#Git-Hook-自动触发构建\" class=\"headerlink\" title=\"Git Hook 自动触发构建(*)\"></a>Git Hook 自动触发构建(*)</h3><p>刚才我们看到在 Jenkins 的内置构建触发器中，轮询 SCM 可以实现 Gitlab 代码更新，项目自动构建，但是该方案的性能不佳。那有没有更好的方案呢？有的。就是利用 Gitlab 的 webhook 实现代码 push 到仓库，立即触发项目自动构建。</p>\n<p><strong>安装 Gitlab Hook 插件</strong></p>\n<p>需要安装两个插件：</p>\n<p>Gitlab Hook 和 Gitlab</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172047.png\" alt=\"image-20220310172047813\"></p>\n<p><strong>Jenkins 设置自动构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172445.png\" alt=\"image-20220310172445870\"></p>\n<p>等会需要把生成的 webhook URL 配置到 Gitlab 中。</p>\n<p><strong>Gitlab 配置 webhook</strong></p>\n<p>1）开启 webhook 功能</p>\n<p><code>使用root账户登录到后台，点击Admin Area -&gt; Settings -&gt; Network</code></p>\n<p><code>勾选&quot;Allow requests to the local network from web hooks and services&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172805.png\" alt=\"image-20220310172805087\"></p>\n<p>2）在项目中添加 webhook</p>\n<p><code>点击项目 -&gt; Settings -&gt; Webhooks</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173325.png\" alt=\"image-20220310173325550\"></p>\n<p>注意：以下设置必须完成，否则会报错！</p>\n<p><code>系统管理 -&gt; 系统配置</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173704.png\" alt=\"image-20220310173704682\"></p>\n","more":"<h2 id=\"持续集成及-Jenkins-介绍\"><a href=\"#持续集成及-Jenkins-介绍\" class=\"headerlink\" title=\"持续集成及 Jenkins 介绍\"></a>持续集成及 Jenkins 介绍</h2><h3 id=\"软件开发生命周期\"><a href=\"#软件开发生命周期\" class=\"headerlink\" title=\"软件开发生命周期\"></a>软件开发生命周期</h3><p>软件开发生命周期又叫做<strong>SDLC</strong>（Software Development Life Cycle），它是集合了计划、开发、测试 和部署过程的集合。如下图所示 ：</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309153101.png\" alt=\"image-20220309153101326\" style=\"zoom:67%;\" />\n\n<ul>\n<li>需求分析</li>\n</ul>\n<p>这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部 或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。 还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。</p>\n<ul>\n<li>设计</li>\n</ul>\n<p>第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目 计划。计划可以使用图表，布局设计或者文者的方式呈现。</p>\n<ul>\n<li>实现</li>\n</ul>\n<p>第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进 行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。</p>\n<ul>\n<li>测试</li>\n</ul>\n<p>测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等。</p>\n<ul>\n<li>进化</li>\n</ul>\n<p>最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修 改，bug 修复，功能增加等。</p>\n<h3 id=\"软件开发瀑布模型\"><a href=\"#软件开发瀑布模型\" class=\"headerlink\" title=\"软件开发瀑布模型\"></a>软件开发瀑布模型</h3><p>瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁 衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有 其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开发，但是已经不适合现在的开发了。</p>\n<p>下图对软件开发模型的一个阐述。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309154059.png\" alt=\"image-20220309154059145\"></p>\n<table>\n<thead>\n<tr>\n<th>优势</th>\n<th>劣势</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>简单易用和理解</td>\n<td>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。</td>\n</tr>\n<tr>\n<td>当前一阶段完成后，您只需要去关注后续阶段。</td>\n<td>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险。</td>\n</tr>\n<tr>\n<td>为项目提供了按阶段划分的检查节点</td>\n<td>瀑布模型的突出缺点是不适应用户需求的变化。</td>\n</tr>\n</tbody></table>\n<h3 id=\"软件的敏捷开发\"><a href=\"#软件的敏捷开发\" class=\"headerlink\" title=\"软件的敏捷开发\"></a>软件的敏捷开发</h3><h4 id=\"什么是敏捷开发？\"><a href=\"#什么是敏捷开发？\" class=\"headerlink\" title=\"什么是敏捷开发？\"></a>什么是敏捷开发？</h4><p>敏捷开发（Agile Development）的核心是迭代开发（Iterative Development）与 增量开发（Incremental Development）。</p>\n<ul>\n<li><strong>何为迭代开发</strong>？</li>\n</ul>\n<p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次“大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次“大开发”变成多次“小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p>\n<ul>\n<li><strong>何为增量开发</strong>？</li>\n</ul>\n<p>软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p>\n<h4 id=\"敏捷开发如何迭代？\"><a href=\"#敏捷开发如何迭代？\" class=\"headerlink\" title=\"敏捷开发如何迭代？\"></a>敏捷开发如何迭代？</h4><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309154857.png\" alt=\"image-20220309154857660\" style=\"zoom:67%;\" />\n\n<h4 id=\"敏捷开发有什么好处？\"><a href=\"#敏捷开发有什么好处？\" class=\"headerlink\" title=\"敏捷开发有什么好处？\"></a>敏捷开发有什么好处？</h4><ul>\n<li><strong>早期交付</strong></li>\n</ul>\n<p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。</p>\n<ul>\n<li><strong>降低风险</strong></li>\n</ul>\n<p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。</p>\n<h3 id=\"什么是持续集成？\"><a href=\"#什么是持续集成？\" class=\"headerlink\" title=\"什么是持续集成？\"></a>什么是持续集成？</h3><p>持续集成（Continuous integration，简称 CI）指的是，频繁地（一天多次）将代码集成到主干。</p>\n<p><strong>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。</strong>它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p>\n<p>通过持续集成，团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。</p>\n<p><strong>持续集成的流程</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309155459.png\" alt=\"image-20220309155459830\" style=\"zoom: 80%;\" />\n\n<p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p>\n<ul>\n<li>提交</li>\n</ul>\n<p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p>\n<ul>\n<li>测试（第一轮）</li>\n</ul>\n<p>代码仓库对 commit 操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p>\n<ul>\n<li>构建</li>\n</ul>\n<p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p>\n<p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS 脚本、图片）等等。</p>\n<ul>\n<li>测试（第二轮）</li>\n</ul>\n<p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p>\n<ul>\n<li>部署</li>\n</ul>\n<p>过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（ tar filename.tar * ）存档，发到生产服务器。</p>\n<ul>\n<li>回滚</li>\n</ul>\n<p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指 向上一个版本的目录。</p>\n<h3 id=\"持续集成的组成要素\"><a href=\"#持续集成的组成要素\" class=\"headerlink\" title=\"持续集成的组成要素\"></a>持续集成的组成要素</h3><ul>\n<li>一个自动构建过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预。</li>\n<li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用 SVN 或 Git。</li>\n<li>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309165502.png\" alt=\"image-20220309165502124\"></p>\n<h3 id=\"持续集成的好处\"><a href=\"#持续集成的好处\" class=\"headerlink\" title=\"持续集成的好处\"></a>持续集成的好处</h3><ol>\n<li>降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；</li>\n<li>对系统健康持续检查，减少发布风险带来的问题；</li>\n<li>减少重复性工作；</li>\n<li>持续部署，提供可部署单元包；</li>\n<li>持续交付可供使用的版本；</li>\n<li>增强团队信心；</li>\n</ol>\n<h3 id=\"Jenkins-介绍\"><a href=\"#Jenkins-介绍\" class=\"headerlink\" title=\"Jenkins 介绍\"></a>Jenkins 介绍</h3><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309165729.png\" alt=\"image-20220309165729929\" style=\"zoom:67%;\" />\n\n<p>Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动 化构建、测试和部署等功能。官网：<a href=\"https://www.jenkins.io/\">Jenkins</a>。</p>\n<p><strong>Jenkins 的特征：</strong></p>\n<ul>\n<li>开源的 Java 语言开发持续集成工具，支持持续集成，持续部署。</li>\n<li>易于安装部署配置：可通过 yum 安装,或下载 war 包以及通过 docker 容器等快速实现安装部署，可方便 web 界面配置管理。</li>\n<li>消息通知及测试报告：集成 RSS/E-mail 通过 RSS 发布构建结果或当构建完成时通过 e-mail 通知，生成 JUnit/TestNG 测试报告。</li>\n<li>分布式构建：支持 Jenkins 能够让多台计算机一起构建/测试。</li>\n<li>文件识别：Jenkins 能够跟踪哪次构建生成哪些 jar，哪次构建使用哪个版本的 jar 等。</li>\n<li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如 git，svn，maven，docker 等。</li>\n</ul>\n<h2 id=\"Jenkins-安装与配置\"><a href=\"#Jenkins-安装与配置\" class=\"headerlink\" title=\"Jenkins 安装与配置\"></a>Jenkins 安装与配置</h2><h3 id=\"安装-Jenkins\"><a href=\"#安装-Jenkins\" class=\"headerlink\" title=\"安装 Jenkins\"></a>安装 Jenkins</h3><blockquote>\n<p><a href=\"https://www.jenkins.io/zh/doc/book/installing/\">Jenkins 官方安装文档</a></p>\n</blockquote>\n<p><strong>Docker 安装 Jenkins（推荐）</strong></p>\n<ul>\n<li><p>Docker 安装与配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、卸载旧的版本</span></span><br><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、需要的安装包</span></span><br><span class=\"line\">yum install -y yum-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、设置镜像的仓库</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo <span class=\"comment\"># 默认是国外的，十分慢！</span></span><br><span class=\"line\"><span class=\"comment\"># 建议使用阿里云的镜像地址</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新yum软件包索引</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、安装docker相关的 docker-ce 社区版 ee 企业版</span></span><br><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5、启动docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6、使用docker version查看是否安装成功</span></span><br></pre></td></tr></table></figure></li>\n<li><p>使用 Docker 安装 Jenkins</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用命令直接安装</span></span><br><span class=\"line\">docker run -d --name jenkins --restart always \\</span><br><span class=\"line\">--user root -p <span class=\"number\">8180</span>:<span class=\"number\">8080</span> -p <span class=\"number\">51000</span>:<span class=\"number\">50000</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>jenkins_home:<span class=\"regexp\">/var/</span>jenkins_home \\</span><br><span class=\"line\">-v <span class=\"regexp\">/opt/m</span>aven<span class=\"regexp\">/apache-maven-3.6.3:/</span>opt<span class=\"regexp\">/maven/</span>apache-maven-<span class=\"number\">3.6</span>.<span class=\"number\">3</span> \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251:<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/java/</span>jdk1.<span class=\"number\">8.0</span>_251 \\</span><br><span class=\"line\">-v <span class=\"regexp\">/var/</span>run<span class=\"regexp\">/docker.sock:/</span>var<span class=\"regexp\">/run/</span>docker.sock \\</span><br><span class=\"line\">jenkinsci/blueocean</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>War 安装 Jenkins</strong></p>\n<ul>\n<li>获取 Jenkins 安装包</li>\n</ul>\n<p>下载页面：<a href=\"https://jenkins.io/zh/download/\">https://jenkins.io/zh/download/</a></p>\n<p>安装文件：jenkins.war</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、将最新的稳定Jenkins WAR包 下载到您计算机上的相应目录。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、在下载的目录内打开一个终端/命令提示符窗口到。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、运行命令java -jar jenkins.war</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、浏览http:<span class=\"comment\">//localhost:8080并等到*Unlock Jenkins*页面出现。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、继续使用Post-installation setup wizard后面步骤设置向导。</span><br></pre></td></tr></table></figure>\n\n<p><strong>解锁 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174609.png\" alt=\"image-20220309174609417\"></p>\n<p>获取并输入 admin 账户密码（我这里是 docker 安装的，目录是映射到指定位置的，密码实际存放路径以提示为主）</p>\n<p><code>cat /var/jenkins_home/secrets/initialAdminPassword</code></p>\n<p><strong>跳过插件安装</strong></p>\n<p>因为 Jenkins 插件需要连接默认官网下载，速度非常慢，而且容易安装失败，所以我们暂时先跳过插件安装。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174531.png\" alt=\"image-20220309174531892\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174831.png\" alt=\"image-20220309174831016\"></p>\n<p><strong>添加一个管理员账户，并进入 Jenkins 后台</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309174954.png\" alt=\"image-20220309174953956\"></p>\n<p><strong>保存并完成</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175748.png\" alt=\"image-20220309175748708\"></p>\n<p><strong>开始使用 Jenkins</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175816.png\" alt=\"image-20220309175816074\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309175908.png\" alt=\"image-20220309175908276\"></p>\n<h3 id=\"Jenkins-插件管理\"><a href=\"#Jenkins-插件管理\" class=\"headerlink\" title=\"Jenkins 插件管理\"></a>Jenkins 插件管理</h3><p>Jenkins 本身不提供很多功能，我们可以通过使用插件来满足我们的使用。例如从 Gitlab 拉取代码，使用 Maven 构建项目等功能需要依靠插件完成。接下来演示如何下载插件。</p>\n<p><strong>修改 Jenkins 插件下载地址</strong></p>\n<p>Jenkins 国外官方插件地址下载速度非常慢，所以可以修改为国内插件地址：</p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180153.png\" alt=\"image-20220309180153473\"></p>\n<p>这样做是为了把 Jenkins 官方的插件列表下载到本地，接着修改地址文件，替换为国内插件地址：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入配置目录 （目录视情况而定，安装的jenkins_home下）</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/var/jenkins_home/updates</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行命令</span></span><br><span class=\"line\">sed -i &#x27;s/http:\\/\\<span class=\"string\">/updates.jenkins</span>\u0002ci.org\\<span class=\"string\">/download/https</span>:\\/\\<span class=\"string\">/mirrors.tuna.tsinghua.edu.cn</span>\\<span class=\"string\">/jenkins/g</span>&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\\/\\<span class=\"string\">/www.google.com/https</span>:\\/\\<span class=\"string\">/www.baidu.com/g</span>&#x27; default.json</span><br></pre></td></tr></table></figure>\n\n<p>最后，Manage Plugins 点击 Advanced，把 Update Site 改为国内插件下载地址</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309180807.png\" alt=\"image-20220309180807037\"></p>\n<p>Sumbit 后，在浏览器输入： <a href=\"http://120.78.204.65:8180/restart\">http://120.78.204.65:8180/restart</a> ，重启 Jenkins。</p>\n<p><strong>下载中文汉化插件</strong></p>\n<p><code>Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins，点击Available，搜索&quot;Chinese&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181055.png\" alt=\"image-20220309181055822\"></p>\n<p>完成后如下图所示：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181122.png\" alt=\"image-20220309181122066\"></p>\n<p>重启 Jenkins 之后，就看到 Jenkins 汉化了！（PS：某些菜单可能会汉化失败）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181408.png\" alt=\"image-20220309181408200\"></p>\n<h3 id=\"Jenkins-用户权限管理\"><a href=\"#Jenkins-用户权限管理\" class=\"headerlink\" title=\"Jenkins 用户权限管理\"></a>Jenkins 用户权限管理</h3><p>我们可以利用<code>Role-based Authorization Strategy</code>插件来管理 Jenkins 用户权限</p>\n<p><strong>安装 Role-based Authorization Strategy 插件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181600.png\" alt=\"image-20220309181600238\"></p>\n<p><strong>开启权限全局安全配置</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181914.png\" alt=\"image-20220309181914873\"></p>\n<p>授权策略切换为”Role-Based Strategy”，保存</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309181940.png\" alt=\"image-20220309181940124\"></p>\n<p><strong>创建角色</strong></p>\n<p>在系统管理页面进入 Manage and Assign Roles</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182209.png\" alt=\"image-20220309182209559\"></p>\n<p>点击”Manage Roles”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182301.png\" alt=\"image-20220309182301430\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182435.png\" alt=\"image-20220309182435102\"></p>\n<p><code>Global roles（全局角色）</code>：管理员等高级用户可以创建基于全局的角色</p>\n<p><code>Item roles（项目角色）</code>： 针对某个或者某些项目的角色</p>\n<p><code>Node roles（节点角色）</code>：节点相关的权限</p>\n<p>我们添加以下三个角色：</p>\n<ul>\n<li>baseRole：该角色为全局角色。这个角色需要绑定 Overall 下面的 Read 权限，是为了给所有用户绑定最基本的 Jenkins 访问权限。注意：如果不给后续用户绑定这个角色，会报错误：<code>用户名 is missing the Overall/Read permission</code></li>\n<li>role1：该角色为项目角色。使用正则表达式绑定”vx-chx.*“，意思是只能操作 vx-chx 开头的项目。</li>\n<li>role2：该角色为项目角色。使用正则表达式绑定”vx-phm.*“，意思是只能操作 vx-phm 开头的项目。</li>\n</ul>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182812.png\" alt=\"image-20220309182812353\"></p>\n<p>保存</p>\n<p><strong>创建用户</strong></p>\n<p>在系统管理页面进入 Manage Users</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309182917.png\" alt=\"image-20220309182917026\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183107.png\" alt=\"image-20220309183107565\"></p>\n<p>分别创建两个用户：vxchx 和 vxphm</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183223.png\" alt=\"image-20220309183223041\"></p>\n<p><strong>给用户分配角色</strong></p>\n<p>系统管理页面进入 Manage and Assign Roles，点击 Assign Roles</p>\n<p>绑定规则如下：</p>\n<ul>\n<li><p>vxchx 用户分别绑定 baseRole 和 role1 角色</p>\n</li>\n<li><p>vxphm 用户分别绑定 baseRole 和 role2 角色</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309183455.png\" alt=\"image-20220309183455591\"></p>\n</li>\n</ul>\n<p>保存</p>\n<p><strong>创建项目测试权限</strong></p>\n<p>以 admin 管理员账户创建两个项目，分别为 vx-chx-test 和 vx-phm-test</p>\n<p>结果为： vxchx 用户登录，只能看到 vx-chx-test 项目 vxphm 用户登录，只能看到 vx-phm-test 项目</p>\n<h3 id=\"Jenkins-凭证管理\"><a href=\"#Jenkins-凭证管理\" class=\"headerlink\" title=\"Jenkins 凭证管理\"></a>Jenkins 凭证管理</h3><p>凭据可以用来存储需要密文保护的数据库密码、Gitlab 密码信息、Docker 私有仓库密码等，以便 Jenkins 可以和这些第三方的应用进行交互。</p>\n<p><strong>安装 Credentials Binding 插件</strong></p>\n<p>要在 Jenkins 使用凭证管理功能，需要安装<code>Credentials Binding</code>插件</p>\n<blockquote>\n<p>注：新版本已经默认安装了此插件，这里无需另外再安装了</p>\n</blockquote>\n<p>系统管理中选择 <code>Manage Credentials</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184117.png\" alt=\"image-20220309184117479\"></p>\n<p>可以添加的凭证有 5 种：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220309184218.png\" alt=\"image-20220309184218399\"></p>\n<ul>\n<li>Username with password：用户名和密码</li>\n<li>SSH Username with private key： 使用 SSH 用户和密钥</li>\n<li>Secret file：需要保密的文本文件，使用时 Jenkins 会将文件复制到一个临时目录中，再将文件路径 设置到一个变量中，等构建结束后，所复制的 Secret file 就会被删除。</li>\n<li>GitHub App：GitHub 的 API 令牌</li>\n<li>Secret text：需要保存的一个加密的文本串，如钉钉机器人或 Github 的 api token</li>\n<li>Certificate：通过上传证书文件的方式</li>\n</ul>\n<p>常用的凭证类型有：<strong>Username with password（用户密码）</strong>和 <strong>SSH Username with private key（SSH 密钥）</strong></p>\n<p>接下来以使用 Git 工具到 Gitlab 拉取项目源码为例，演示 Jenkins 的如何管理 Gitlab 的凭证。</p>\n<p><strong>安装 Git 插件和 Git 工具</strong></p>\n<p>为了让 Jenkins 支持从 Gitlab 拉取源码，需要安装 Git 插件以及在服务器上安装 Git 工具。</p>\n<p>Git 插件安装：</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310094719.png\" alt=\"image-20220310094712046\"></p>\n<p>服务器上安装 Git 工具（以 CentOS7 为例）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install git -y</span><br><span class=\"line\"><span class=\"comment\"># 安装后查看版本</span></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p><strong>用户密码类型</strong></p>\n<p>1）创建凭据</p>\n<p><code>Jenkins -&gt; 凭证 -&gt; 系统 -&gt; 全局凭据 -&gt; 添加凭据</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310095750.png\" alt=\"image-20220310095750604\"></p>\n<p>选择”Username with password”，输入 Gitlab 的用户名和密码，点击”确定”。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100359.png\" alt=\"image-20220310100359012\"></p>\n<p><strong>SSH 密钥类型</strong></p>\n<p>SSH 免密登录示意图</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310100539.png\" alt=\"image-20220310100539140\"></p>\n<p>1）使用 root 用户生成公钥和私钥</p>\n<p><code>ssh-keygen -t rsa</code></p>\n<p>在/root/.ssh/目录保存了公钥和使用</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101013.png\" alt=\"image-20220310101013313\" style=\"zoom:67%;\" />\n\n<p>id_rsa：私钥文件</p>\n<p>id_rsa.pub：公钥文件</p>\n<p>2）把生成的公钥放在 Gitlab 中</p>\n<p><code>登录gitlab -&gt; 点击头像 -&gt; Settings -&gt; SSH Keys</code></p>\n<p>复制刚才 id_rsa.pub 文件的内容到这里，点击”Add Key”</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310101538.png\" alt=\"image-20220310101538008\"></p>\n<p>3）在 Jenkins 中添加凭证，配置私钥</p>\n<p>在 Jenkins 添加一个新的凭证，类型为”SSH Username with private key”，把刚才生成私有文件内容复制过来</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102203.png\" alt=\"image-20220310102203814\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102427.png\" alt=\"image-20220310102427213\"></p>\n<h3 id=\"Jenkins-关联-JDK-和-Maven\"><a href=\"#Jenkins-关联-JDK-和-Maven\" class=\"headerlink\" title=\"Jenkins 关联 JDK 和 Maven\"></a>Jenkins 关联 JDK 和 Maven</h3><p><strong>关联 JDK</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; JDK -&gt; 新增JDK，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102744.png\" alt=\"image-20220310102744563\"></p>\n<p><strong>关联 Maven</strong></p>\n<p><code>Jenkins -&gt; 系统管理 -&gt; 全局工具配置 -&gt; Maven -&gt; 新增Maven，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310102836.png\" alt=\"image-20220310102835922\"></p>\n<h3 id=\"添加-Jenkins-全局变量\"><a href=\"#添加-Jenkins-全局变量\" class=\"headerlink\" title=\"添加 Jenkins 全局变量\"></a><strong>添加 Jenkins 全局变量</strong></h3><p><code>Jenkins -&gt; 系统管理 -&gt; 全局属性 -&gt; 添加三个环境变量，配置如下：</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310103242.png\" alt=\"image-20220310103241974\"></p>\n<h3 id=\"Jenkins-关闭跨站请求伪造保护\"><a href=\"#Jenkins-关闭跨站请求伪造保护\" class=\"headerlink\" title=\"Jenkins 关闭跨站请求伪造保护\"></a>Jenkins 关闭跨站请求伪造保护</h3><ul>\n<li>Docker 容器运行</li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、进入运行的容器</span></span><br><span class=\"line\">docker exec -u root -<span class=\"keyword\">it</span> 你的Jenkins容器名称或者容器<span class=\"built_in\">id</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、输入命令，编辑jenkins启动配置文件</span></span><br><span class=\"line\">vi /usr/<span class=\"keyword\">local</span>/bin/jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、在图中标记处，加入以下配置</span></span><br><span class=\"line\">-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、重启容器</span></span><br><span class=\"line\">docker restart jenkins</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220312001027.png\" alt=\"image-20220312001020531\"></p>\n<h2 id=\"Jenkins-构建-Maven-项目\"><a href=\"#Jenkins-构建-Maven-项目\" class=\"headerlink\" title=\"Jenkins 构建 Maven 项目\"></a>Jenkins 构建 Maven 项目</h2><blockquote>\n<p>构建方式均采用 Jar 包方式，War 方式参考<a href=\"http://doc.jeecg.com/2043887\">WAR 部署方案 · JeecgBoot 开发文档</a></p>\n</blockquote>\n<h3 id=\"Jenkins-项目构建类型\"><a href=\"#Jenkins-项目构建类型\" class=\"headerlink\" title=\"Jenkins 项目构建类型\"></a>Jenkins 项目构建类型</h3><p>Jenkins 中自动构建项目的类型有很多，常用的有以下三种：</p>\n<ul>\n<li>自由风格软件项目（FreeStyle Project）</li>\n<li>Maven 项目（Maven Project）</li>\n<li>流水线项目（Pipeline Project）</li>\n</ul>\n<p>每种类型的构建其实都可以完成一样的构建过程与结果，只是在操作方式、灵活度等方面有所区别，在实际开发中可以根据自己的需求和习惯来选择。（PS：个人推荐使用流水线类型，因为灵活度非常高）</p>\n<h3 id=\"自由风格项目构建\"><a href=\"#自由风格项目构建\" class=\"headerlink\" title=\"自由风格项目构建\"></a>自由风格项目构建</h3><p>下面演示创建一个自由风格项目来完成项目的集成过程：</p>\n<p><code>拉取代码 -&gt; 编译 -&gt; 打包 -&gt; 部署</code></p>\n<p><strong>拉取代码</strong></p>\n<p>1）创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112707.png\" alt=\"image-20220310112707895\"></p>\n<p>2）源码管理，从 Gitlab 拉取代码</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112815.png\" alt=\"image-20220310112815147\"></p>\n<p><strong>编译打包</strong></p>\n<p><code>构建 -&gt; 添加构建步骤 -&gt; 执行shell</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;开始编译和打包&quot;</span></span><br><span class=\"line\">mvn clean package</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;编译和打包结束&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310112952.png\" alt=\"image-20220310112952936\"></p>\n<p><strong>部署</strong></p>\n<p>把项目部署到远程的服务器上，并启动</p>\n<p>1）安装<code>Publish Over SSH</code>插件</p>\n<p>Jenkins 本身无法实现远程部署到服务器上的功能，需要安装<code>Publish Over SSH</code>插件实现</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310113332.png\" alt=\"image-20220310113332137\"></p>\n<p>2）配置<code>Publish over SSH</code>，添加 SSH 服务器</p>\n<p><code>打开系统管理 -&gt; 系统配置 -&gt; 拉到底部，选择Publish over SSH区域选择新增</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114012.png\" alt=\"image-20220310114012322\"></p>\n<p><code>点击高级 -&gt; 填写服务器密码</code>（也可选择 ssh 验证，在 Jenkins 中配置本机私钥，将公钥发送到目标机器，即可完成无密码登录）</p>\n<p><code>发送命令：ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.xxx.xxx</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310114702.png\" alt=\"image-20220310114702171\"></p>\n<ul>\n<li>Passphrase： 密码（目标机器的密码）</li>\n<li>Path to key：key 文件（私钥）的路径</li>\n<li>SSH Server Name： 标识的名字（随便你取什么）</li>\n<li>Hostname： 需要连接 ssh 的主机名或 ip 地址，此处填写应用服务器 IP（建议 ip）</li>\n<li>Username： 用户名</li>\n<li>Remote Directory： 远程目录(要发布的目录,比如/usr/local/tomcat/webapps/)</li>\n</ul>\n<p>3）添加构建步骤</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115055.png\" alt=\"image-20220310115055853\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115245.png\" alt=\"image-20220310115245384\"></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 脚本参考</span></span><br><span class=\"line\"><span class=\"attribute\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">cd</span> /apps</span><br><span class=\"line\"><span class=\"attribute\">ps</span> -ef|grep jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar|grep -v grep|awk &#x27;&#123;print $<span class=\"number\">2</span>&#125;&#x27;|xargs kill -s <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"attribute\">BUILD_ID</span>=dontKillMe</span><br><span class=\"line\"><span class=\"attribute\">nohup</span> java -jar jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.jar &gt; jeecg-boot-module-system-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">0</span>.log <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span> &amp;</span><br></pre></td></tr></table></figure>\n\n<p>4）点击”立即构建”，开始构建过程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310115628.png\" alt=\"image-20220310115628609\"></p>\n<p>5）构建成功，并自动化部署，访问测试！</p>\n<h3 id=\"Maven-项目构建\"><a href=\"#Maven-项目构建\" class=\"headerlink\" title=\"Maven 项目构建\"></a>Maven 项目构建</h3><p>1）安装 Maven Integration Plugin（高版本的 Jenkins 已预装了此插件）</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135008.png\" alt=\"image-20220310135008339\"></p>\n<p>2）创建 Maven 项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135103.png\" alt=\"image-20220310135103444\"></p>\n<p>3）配置项目</p>\n<p>拉取代码和远程部署的过程和自由风格项目一样，只是”构建”部分不同</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310135300.png\" alt=\"image-20220310135300799\"></p>\n<h3 id=\"Pipeline-流水线项目构建\"><a href=\"#Pipeline-流水线项目构建\" class=\"headerlink\" title=\"Pipeline 流水线项目构建(*)\"></a>Pipeline 流水线项目构建(*)</h3><h4 id=\"Pipeline-简介\"><a href=\"#Pipeline-简介\" class=\"headerlink\" title=\"Pipeline 简介\"></a>Pipeline 简介</h4><p><strong>1）概念</strong></p>\n<p>Pipeline，简单来说，就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p>\n<p><strong>2）使用 Pipeline 有以下好处（来自翻译自官方文档）：</strong></p>\n<p>代码：Pipeline 以代码的形式实现，通常被检入源代码控制，使团队能够编辑，审查和迭代其传送流 程。持久：无论是计划内的还是计划外的服务器重启。Pipeline 都是可恢复的。可停止：Pipeline 可接 收交互式输入，以确定是否继续执行 Pipeline。多功能：Pipeline 支持现实世界中复杂的持续交付要求。它支持 fork/join、循环执行，并行执行任务的功能。可扩展：Pipeline 插件支持其 DSL 的自定义扩展，以及与其他插件集成的多个选项。</p>\n<p><strong>3）如何创建 Jenkins Pipeline 呢？</strong></p>\n<ul>\n<li>Pipeline 脚本是由<strong>Groovy</strong>语言实现的，但是我们没必要单独去学习 Groovy</li>\n<li>Pipeline 支持两种语法：<strong>Declarative</strong>(声明式)和<strong>Scripted Pipeline</strong>(脚本式)语法</li>\n<li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中（一般我们都推荐在 Jenkins 中直接从源代码控制(SCM)中直接载入 Jenkinsfile Pipeline 这种方法）。</li>\n</ul>\n<h4 id=\"Pipeline-语法快速入门\"><a href=\"#Pipeline-语法快速入门\" class=\"headerlink\" title=\"Pipeline 语法快速入门\"></a>Pipeline 语法快速入门</h4><p><strong>1）Declarative 声明式-Pipeline</strong></p>\n<p>创建一个流水线项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154144.png\" alt=\"image-20220310154144897\"></p>\n<p><code>流水线 -&gt; 选择HelloWorld模板</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310154618.png\" alt=\"image-20220310154618000\"></p>\n<p>生成的内容如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Hello&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>stages：</strong>代表整个流水线的所有执行阶段。通常 stages 只有 1 个，里面包含多个 stage</p>\n</li>\n<li><p><strong>stage：</strong>代表流水线中的某个阶段，可能出现 n 个。一般分为拉取代码，编译构建，部署等阶段。</p>\n</li>\n<li><p><strong>steps：</strong>代表一个阶段内需要执行的逻辑。steps 里面是 shell 脚本，git 拉取代码，ssh 远程发布等任意内容。</p>\n</li>\n</ul>\n<p>编写一个简单声明式的 Pipeline：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;编译构建&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;项目部署&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">            \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击构建，进入<code>Blue Ocean</code>可以看到整个构建过程</p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155756.png\" alt=\"image-20220310155756052\" style=\"zoom: 150%;\" />\n\n<p><strong>2）Scripted Pipeline 脚本式-Pipeline</strong></p>\n<p>创建项目</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310155938.png\" alt=\"image-20220310155938728\"></p>\n<p>选择 <code>Scripted Pipeline&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310160044.png\" alt=\"image-20220310160044398\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> mvnHome</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Preparation&#x27;</span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Results&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Node：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，后续讲到 Jenkins 的 Master-Slave 架构的时候用到。</li>\n<li>Stage：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如： Build、Test、Deploy，Stage 是一个逻辑分组的概念。</li>\n<li>Step：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像， 由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令 一样。</li>\n</ul>\n<p>编写一个简单的脚本式 Pipeline</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">    def mvnHome</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;拉取代码&#x27;</span></span>) &#123; <span class=\"comment\">// for display purposes</span></span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;拉取代码&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;编译构建&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;编译构建&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">stage</span>(<span class=\"params\"><span class=\"string\">&#x27;项目部署&#x27;</span></span>) &#123;</span><br><span class=\"line\">    \techo <span class=\"string\">&#x27;项目部署&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构建结果和声明式一样！</p>\n<p><strong>Pipeline Script from SCM</strong></p>\n<p>刚才我们都是直接在 Jenkins 的 UI 界面编写 Pipeline 代码，这样不方便脚本维护，建议把 Pipeline 脚本放在项目中（一起进行版本控制）</p>\n<p><strong>1）在项目根目录建立 Jenkinsfile 文件，把内容复制到该文件中</strong></p>\n<img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310163924.png\" alt=\"image-20220310163924603\" style=\"zoom:67%;\" />\n\n<p>把 Jenkinsfile 上传到 Gitlab</p>\n<p><strong>2）在项目中引用该文件</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164207.png\" alt=\"image-20220310164207097\"></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164225.png\" alt=\"image-20220310164225747\"></p>\n<h3 id=\"Jenkinsfile\"><a href=\"#Jenkinsfile\" class=\"headerlink\" title=\"Jenkinsfile\"></a>Jenkinsfile</h3><h4 id=\"Jenkinsfile-环境变量\"><a href=\"#Jenkinsfile-环境变量\" class=\"headerlink\" title=\"Jenkinsfile 环境变量\"></a>Jenkinsfile 环境变量</h4><table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BRANCH_NAME</td>\n<td>在 multibranch 项目中，BRANCH_NAME 用于标明构建分支的名称。</td>\n</tr>\n<tr>\n<td>CHANGE_ID</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更 ID，比如 Pull Request</td>\n</tr>\n<tr>\n<td>CHANGE_URL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的 URL</td>\n</tr>\n<tr>\n<td>CHANGE_TITLE</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明变更的标题</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_DISPLAY_NAME</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的显示名称</td>\n</tr>\n<tr>\n<td>CHANGE_AUTHOR_EMAIL</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于标明提交变更的人员的邮件地址</td>\n</tr>\n<tr>\n<td>CHANGE_TARGET</td>\n<td>在 multibranch 的项目中，相较于特定的变更请求，用于合并后的分支信息等</td>\n</tr>\n<tr>\n<td>BUILD_NUMBER</td>\n<td>当前的构建编号</td>\n</tr>\n<tr>\n<td>BUILD_ID</td>\n<td>在 1.597 版本后引进，表示当前构建 ID</td>\n</tr>\n<tr>\n<td>BUILD_DISPLAY_NAME</td>\n<td>当前构建的显示信息</td>\n</tr>\n<tr>\n<td>JOB_NAME</td>\n<td>构建 Job 的全称，包含项目信息</td>\n</tr>\n<tr>\n<td>JOB_BASE_NAME</td>\n<td>除去项目信息的 Job 名称</td>\n</tr>\n<tr>\n<td>BUILD_TAG</td>\n<td>构建标签</td>\n</tr>\n<tr>\n<td>EXECUTOR_NUMBER</td>\n<td>执行器编号，用于标识构建器的不同编号</td>\n</tr>\n<tr>\n<td>NODE_NAME</td>\n<td>构建节点的名称</td>\n</tr>\n<tr>\n<td>NODE_LABELS</td>\n<td>节点标签</td>\n</tr>\n<tr>\n<td>WORKSPACE</td>\n<td>构建时使用的工作空间的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_HOME</td>\n<td>JENKINS 根目录的绝对路径</td>\n</tr>\n<tr>\n<td>JENKINS_URL</td>\n<td>Jenkins 的 URL 信息</td>\n</tr>\n<tr>\n<td>BUILD_URL</td>\n<td>构建的 URL 信息</td>\n</tr>\n<tr>\n<td>JOB_URL</td>\n<td>构建 Job 的 URL 信息</td>\n</tr>\n<tr>\n<td>GIT_COMMIT</td>\n<td>git 提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_COMMIT</td>\n<td>当前分支上次提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_PREVIOUS_SUCCESSFUL_COMMIT</td>\n<td>当前分支上次成功构建时提交的 hash 码</td>\n</tr>\n<tr>\n<td>GIT_BRANCH</td>\n<td>远程分支名称</td>\n</tr>\n<tr>\n<td>GIT_LOCAL_BRANCH</td>\n<td>本地分支名称</td>\n</tr>\n<tr>\n<td>GIT_URL</td>\n<td>远程 URL 地址</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_NAME</td>\n<td>Git 提交者的名称</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_NAME</td>\n<td>Git Author 的名称</td>\n</tr>\n<tr>\n<td>GIT_COMMITTER_EMAIL</td>\n<td>Git 提交者的 email 地址</td>\n</tr>\n<tr>\n<td>GIT_AUTHOR_EMAIL</td>\n<td>Git Author 的 email 地址</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION</td>\n<td>Mercurial 的版本 ID 信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_SHORT</td>\n<td>Mercurial 的版本 ID 缩写</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_NUMBER</td>\n<td>Mercurial 的版本号信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REVISION_BRANCH</td>\n<td>分支版本信息</td>\n</tr>\n<tr>\n<td>MERCURIAL_REPOSITORY_URL</td>\n<td>仓库 URL 信息</td>\n</tr>\n<tr>\n<td>SVN_REVISION</td>\n<td>Subversion 的当前版本信息</td>\n</tr>\n<tr>\n<td>SVN_URL</td>\n<td>当前工作空间中被 checkout 的 Subversion 工程的 URL 地址信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用的构建触发器\"><a href=\"#常用的构建触发器\" class=\"headerlink\" title=\"常用的构建触发器\"></a>常用的构建触发器</h3><p>Jenkins 内置 4 种构建触发器：</p>\n<ul>\n<li>触发远程构建</li>\n<li>其他工程构建后触发（Build after other projects are build）</li>\n<li>定时构建（Build periodically）</li>\n<li>轮询 SCM（Poll SCM）</li>\n<li>GitHub 钩子触发的 GIT SCM 轮询（GitHub hook trigger for GITScm polling）</li>\n</ul>\n<p><strong>触发远程构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310164928.png\" alt=\"image-20220310164928630\"></p>\n<p>触发构建 url：<a href=\"http://192.168.88.86:8180/job/vx-phm/build?token=abcabc\">http://192.168.88.86:8180/job/vx-phm/build?token=abcabc</a></p>\n<p><strong>其他工程构建后触发</strong></p>\n<p>1）创建 pre_job 流水线工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170455.png\" alt=\"image-20220310170454942\"></p>\n<p>2）配置需要触发的工程</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310170935.png\" alt=\"image-20220310170935519\"></p>\n<p><strong>定时构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171234.png\" alt=\"image-20220310171234011\"></p>\n<p>定时字符串从左往右分别为： 分 时 日 月 周</p>\n<p>一些定时表达式的例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每30分钟构建一次：H代表形参 H/30 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span> 10:02 10:32</span><br><span class=\"line\"></span><br><span class=\"line\">每2个小时构建一次: H H/2 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天的8点，12点，22点，一天构建3次： (多个时间点中间用逗号隔开) 0 8,12,22 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每天中午12点定时构建一次 H 12 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">*</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">每天下午18点定时构建一次 H 18 *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">在每个小时的前半个小时内的每10分钟 H(0-29)/10 <span class=\"emphasis\">* *</span> <span class=\"emphasis\">* *</span></span><br><span class=\"line\"></span><br><span class=\"line\">每两小时一次，每个工作日上午9点到下午5点(也许是上午10:38，下午12:38，下午2:38，下午</span><br><span class=\"line\">4:38) H H(9-16)/2 <span class=\"emphasis\">* *</span> 1-5</span><br></pre></td></tr></table></figure>\n\n<p><strong>轮询 SCM</strong></p>\n<p>轮询 SCM，是指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建。</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310171348.png\" alt=\"image-20220310171348558\"></p>\n<p>注意：此构建触发器，Jenkins 会定时扫描本地整个项目的代码，增大系统的开销，不建议使用。</p>\n<h3 id=\"Git-Hook-自动触发构建\"><a href=\"#Git-Hook-自动触发构建\" class=\"headerlink\" title=\"Git Hook 自动触发构建(*)\"></a>Git Hook 自动触发构建(*)</h3><p>刚才我们看到在 Jenkins 的内置构建触发器中，轮询 SCM 可以实现 Gitlab 代码更新，项目自动构建，但是该方案的性能不佳。那有没有更好的方案呢？有的。就是利用 Gitlab 的 webhook 实现代码 push 到仓库，立即触发项目自动构建。</p>\n<p><strong>安装 Gitlab Hook 插件</strong></p>\n<p>需要安装两个插件：</p>\n<p>Gitlab Hook 和 Gitlab</p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172047.png\" alt=\"image-20220310172047813\"></p>\n<p><strong>Jenkins 设置自动构建</strong></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172445.png\" alt=\"image-20220310172445870\"></p>\n<p>等会需要把生成的 webhook URL 配置到 Gitlab 中。</p>\n<p><strong>Gitlab 配置 webhook</strong></p>\n<p>1）开启 webhook 功能</p>\n<p><code>使用root账户登录到后台，点击Admin Area -&gt; Settings -&gt; Network</code></p>\n<p><code>勾选&quot;Allow requests to the local network from web hooks and services&quot;</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310172805.png\" alt=\"image-20220310172805087\"></p>\n<p>2）在项目中添加 webhook</p>\n<p><code>点击项目 -&gt; Settings -&gt; Webhooks</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173325.png\" alt=\"image-20220310173325550\"></p>\n<p>注意：以下设置必须完成，否则会报错！</p>\n<p><code>系统管理 -&gt; 系统配置</code></p>\n<p><img src=\"https://my-typora-oss.oss-cn-shanghai.aliyuncs.com/image-master/20220310173704.png\" alt=\"image-20220310173704682\"></p>\n","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"持续集成","path":"api/tags/持续集成.json"}]}